
Display_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022088  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00110440  08022280  08022280  00032280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  081326c0  081326c0  0025f000  2**0
                  CONTENTS
  4 .ARM          00000008  081326c0  081326c0  001426c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  081326c8  081326c8  0025f000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  081326c8  081326c8  001426c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  081326cc  081326cc  001426cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  081326d0  00150000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002c4fc  200001d8  081328a4  001501d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2002c6d4  081328a4  0015c6d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0025f000  2**0
                  CONTENTS, READONLY
 12 .mySdramSegment 000ff000  c0000000  c0000000  00160000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .debug_info   0002b831  00000000  00000000  0025f02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000074b0  00000000  00000000  0028a85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  00291d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001088  00000000  00000000  00293150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003b3b7  00000000  00000000  002941d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ec57  00000000  00000000  002cf58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00138672  00000000  00000000  002fe1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000d2  00000000  00000000  00436858  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048f8  00000000  00000000  0043692c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001d8 	.word	0x200001d8
 8000214:	00000000 	.word	0x00000000
 8000218:	08022268 	.word	0x08022268

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001dc 	.word	0x200001dc
 8000234:	08022268 	.word	0x08022268

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <CAR_CAN_Init>:


uint32_t cameraData = 0;			//used for debug

void CAR_CAN_Init(void)
{
 800054c:	b5b0      	push	{r4, r5, r7, lr}
 800054e:	af00      	add	r7, sp, #0
	pHeader_CAN1.DLC = 8; //give message size of 1 byte
 8000550:	4b9e      	ldr	r3, [pc, #632]	; (80007cc <CAR_CAN_Init+0x280>)
 8000552:	2208      	movs	r2, #8
 8000554:	611a      	str	r2, [r3, #16]
	pHeader_CAN1.IDE = CAN_ID_STD; //set identifier to standard
 8000556:	4b9d      	ldr	r3, [pc, #628]	; (80007cc <CAR_CAN_Init+0x280>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
	pHeader_CAN1.RTR = CAN_RTR_DATA; //set data type to remote transmission request?
 800055c:	4b9b      	ldr	r3, [pc, #620]	; (80007cc <CAR_CAN_Init+0x280>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
	pHeader_CAN1.StdId = 0x250; //define a standard identifier, used for message identification by filters (switch this for the other microcontroller)
 8000562:	4b9a      	ldr	r3, [pc, #616]	; (80007cc <CAR_CAN_Init+0x280>)
 8000564:	f44f 7214 	mov.w	r2, #592	; 0x250
 8000568:	601a      	str	r2, [r3, #0]

	sFilterConfig0_CAN1.FilterBank = 0; //filter bank 0 to 12
 800056a:	4b99      	ldr	r3, [pc, #612]	; (80007d0 <CAR_CAN_Init+0x284>)
 800056c:	2200      	movs	r2, #0
 800056e:	615a      	str	r2, [r3, #20]
	sFilterConfig0_CAN1.FilterMode = CAN_FILTERMODE_IDLIST; //CAN_FILTERMODE_IDLIST
 8000570:	4b97      	ldr	r3, [pc, #604]	; (80007d0 <CAR_CAN_Init+0x284>)
 8000572:	2201      	movs	r2, #1
 8000574:	619a      	str	r2, [r3, #24]
	sFilterConfig0_CAN1.FilterScale = CAN_FILTERSCALE_16BIT;
 8000576:	4b96      	ldr	r3, [pc, #600]	; (80007d0 <CAR_CAN_Init+0x284>)
 8000578:	2200      	movs	r2, #0
 800057a:	61da      	str	r2, [r3, #28]
	sFilterConfig0_CAN1.FilterIdHigh = 0x204 << 5; //can put 2 standard id's in 16 bit mode
 800057c:	4b94      	ldr	r3, [pc, #592]	; (80007d0 <CAR_CAN_Init+0x284>)
 800057e:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 8000582:	601a      	str	r2, [r3, #0]
	sFilterConfig0_CAN1.FilterIdLow = 0x200 << 5;
 8000584:	4b92      	ldr	r3, [pc, #584]	; (80007d0 <CAR_CAN_Init+0x284>)
 8000586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800058a:	605a      	str	r2, [r3, #4]
	sFilterConfig0_CAN1.FilterMaskIdHigh = 0x0; //mask doesn't care in IDLIST Mode
 800058c:	4b90      	ldr	r3, [pc, #576]	; (80007d0 <CAR_CAN_Init+0x284>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
	sFilterConfig0_CAN1.FilterMaskIdLow = 0x0;
 8000592:	4b8f      	ldr	r3, [pc, #572]	; (80007d0 <CAR_CAN_Init+0x284>)
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
	sFilterConfig0_CAN1.FilterFIFOAssignment = CAN_FILTER_FIFO0; //we have fifo 0 and fifo 1
 8000598:	4b8d      	ldr	r3, [pc, #564]	; (80007d0 <CAR_CAN_Init+0x284>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
	sFilterConfig0_CAN1.SlaveStartFilterBank = 14;
 800059e:	4b8c      	ldr	r3, [pc, #560]	; (80007d0 <CAR_CAN_Init+0x284>)
 80005a0:	220e      	movs	r2, #14
 80005a2:	625a      	str	r2, [r3, #36]	; 0x24
	sFilterConfig0_CAN1.FilterActivation = ENABLE;
 80005a4:	4b8a      	ldr	r3, [pc, #552]	; (80007d0 <CAR_CAN_Init+0x284>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	621a      	str	r2, [r3, #32]

	sFilterConfig1_CAN1.FilterBank = 1; //filter bank 0 to 12
 80005aa:	4b8a      	ldr	r3, [pc, #552]	; (80007d4 <CAR_CAN_Init+0x288>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	615a      	str	r2, [r3, #20]
	sFilterConfig1_CAN1.FilterMode = CAN_FILTERMODE_IDLIST; //CAN_FILTERMODE_IDLIST
 80005b0:	4b88      	ldr	r3, [pc, #544]	; (80007d4 <CAR_CAN_Init+0x288>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	619a      	str	r2, [r3, #24]
	sFilterConfig1_CAN1.FilterScale = CAN_FILTERSCALE_16BIT;
 80005b6:	4b87      	ldr	r3, [pc, #540]	; (80007d4 <CAR_CAN_Init+0x288>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	61da      	str	r2, [r3, #28]
	sFilterConfig1_CAN1.FilterIdHigh = 0x220 << 5; //can put 2 standard id's in 16 bit mode
 80005bc:	4b85      	ldr	r3, [pc, #532]	; (80007d4 <CAR_CAN_Init+0x288>)
 80005be:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 80005c2:	601a      	str	r2, [r3, #0]
	sFilterConfig1_CAN1.FilterIdLow = 0x208 << 5;
 80005c4:	4b83      	ldr	r3, [pc, #524]	; (80007d4 <CAR_CAN_Init+0x288>)
 80005c6:	f44f 4282 	mov.w	r2, #16640	; 0x4100
 80005ca:	605a      	str	r2, [r3, #4]
	sFilterConfig1_CAN1.FilterMaskIdHigh = 0x0; //mask doesn't care in IDLIST Mode
 80005cc:	4b81      	ldr	r3, [pc, #516]	; (80007d4 <CAR_CAN_Init+0x288>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
	sFilterConfig1_CAN1.FilterMaskIdLow = 0x0;
 80005d2:	4b80      	ldr	r3, [pc, #512]	; (80007d4 <CAR_CAN_Init+0x288>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
	sFilterConfig1_CAN1.FilterFIFOAssignment = CAN_FILTER_FIFO0; //we have fifo 0 and fifo 1
 80005d8:	4b7e      	ldr	r3, [pc, #504]	; (80007d4 <CAR_CAN_Init+0x288>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
	sFilterConfig1_CAN1.SlaveStartFilterBank = 14;
 80005de:	4b7d      	ldr	r3, [pc, #500]	; (80007d4 <CAR_CAN_Init+0x288>)
 80005e0:	220e      	movs	r2, #14
 80005e2:	625a      	str	r2, [r3, #36]	; 0x24
	sFilterConfig1_CAN1.FilterActivation = ENABLE;
 80005e4:	4b7b      	ldr	r3, [pc, #492]	; (80007d4 <CAR_CAN_Init+0x288>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	621a      	str	r2, [r3, #32]

	sFilterConfig2_CAN1.FilterBank = 2; //filter bank 0 to 12
 80005ea:	4b7b      	ldr	r3, [pc, #492]	; (80007d8 <CAR_CAN_Init+0x28c>)
 80005ec:	2202      	movs	r2, #2
 80005ee:	615a      	str	r2, [r3, #20]
	sFilterConfig2_CAN1.FilterMode = CAN_FILTERMODE_IDLIST; //CAN_FILTERMODE_IDLIST
 80005f0:	4b79      	ldr	r3, [pc, #484]	; (80007d8 <CAR_CAN_Init+0x28c>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	619a      	str	r2, [r3, #24]
	sFilterConfig2_CAN1.FilterScale = CAN_FILTERSCALE_16BIT;
 80005f6:	4b78      	ldr	r3, [pc, #480]	; (80007d8 <CAR_CAN_Init+0x28c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	61da      	str	r2, [r3, #28]
	sFilterConfig2_CAN1.FilterIdHigh = 0x20C << 5; //can put 2 standard id's in 16 bit mode
 80005fc:	4b76      	ldr	r3, [pc, #472]	; (80007d8 <CAR_CAN_Init+0x28c>)
 80005fe:	f44f 4283 	mov.w	r2, #16768	; 0x4180
 8000602:	601a      	str	r2, [r3, #0]
	sFilterConfig2_CAN1.FilterIdLow = 0x321 << 5;
 8000604:	4b74      	ldr	r3, [pc, #464]	; (80007d8 <CAR_CAN_Init+0x28c>)
 8000606:	f246 4220 	movw	r2, #25632	; 0x6420
 800060a:	605a      	str	r2, [r3, #4]
	sFilterConfig2_CAN1.FilterMaskIdHigh = 0x0; //mask doesn't care in IDLIST Mode
 800060c:	4b72      	ldr	r3, [pc, #456]	; (80007d8 <CAR_CAN_Init+0x28c>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
	sFilterConfig2_CAN1.FilterMaskIdLow = 0x0;
 8000612:	4b71      	ldr	r3, [pc, #452]	; (80007d8 <CAR_CAN_Init+0x28c>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
	sFilterConfig2_CAN1.FilterFIFOAssignment = CAN_FILTER_FIFO0; //we have fifo 0 and fifo 1
 8000618:	4b6f      	ldr	r3, [pc, #444]	; (80007d8 <CAR_CAN_Init+0x28c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
	sFilterConfig2_CAN1.SlaveStartFilterBank = 14;
 800061e:	4b6e      	ldr	r3, [pc, #440]	; (80007d8 <CAR_CAN_Init+0x28c>)
 8000620:	220e      	movs	r2, #14
 8000622:	625a      	str	r2, [r3, #36]	; 0x24
	sFilterConfig2_CAN1.FilterActivation = ENABLE;
 8000624:	4b6c      	ldr	r3, [pc, #432]	; (80007d8 <CAR_CAN_Init+0x28c>)
 8000626:	2201      	movs	r2, #1
 8000628:	621a      	str	r2, [r3, #32]




	sFilterConfig3_CAN1.FilterBank = 3; //filter bank 0 to 12
 800062a:	4b6c      	ldr	r3, [pc, #432]	; (80007dc <CAR_CAN_Init+0x290>)
 800062c:	2203      	movs	r2, #3
 800062e:	615a      	str	r2, [r3, #20]
	sFilterConfig3_CAN1.FilterMode = CAN_FILTERMODE_IDLIST; //CAN_FILTERMODE_IDLIST
 8000630:	4b6a      	ldr	r3, [pc, #424]	; (80007dc <CAR_CAN_Init+0x290>)
 8000632:	2201      	movs	r2, #1
 8000634:	619a      	str	r2, [r3, #24]
	sFilterConfig3_CAN1.FilterScale = CAN_FILTERSCALE_16BIT;
 8000636:	4b69      	ldr	r3, [pc, #420]	; (80007dc <CAR_CAN_Init+0x290>)
 8000638:	2200      	movs	r2, #0
 800063a:	61da      	str	r2, [r3, #28]
	sFilterConfig3_CAN1.FilterIdHigh = 0x30C << 5; //can put 2 standard id's in 16 bit mode
 800063c:	4b67      	ldr	r3, [pc, #412]	; (80007dc <CAR_CAN_Init+0x290>)
 800063e:	f44f 42c3 	mov.w	r2, #24960	; 0x6180
 8000642:	601a      	str	r2, [r3, #0]
	sFilterConfig3_CAN1.FilterIdLow = 0x312 << 5;
 8000644:	4b65      	ldr	r3, [pc, #404]	; (80007dc <CAR_CAN_Init+0x290>)
 8000646:	f246 2240 	movw	r2, #25152	; 0x6240
 800064a:	605a      	str	r2, [r3, #4]
	sFilterConfig3_CAN1.FilterMaskIdHigh = 0x0; //mask doesn't care in IDLIST Mode
 800064c:	4b63      	ldr	r3, [pc, #396]	; (80007dc <CAR_CAN_Init+0x290>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
	sFilterConfig3_CAN1.FilterMaskIdLow = 0x0;
 8000652:	4b62      	ldr	r3, [pc, #392]	; (80007dc <CAR_CAN_Init+0x290>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
	sFilterConfig3_CAN1.FilterFIFOAssignment = CAN_FILTER_FIFO0; //we have fifo 0 and fifo 1
 8000658:	4b60      	ldr	r3, [pc, #384]	; (80007dc <CAR_CAN_Init+0x290>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
	sFilterConfig3_CAN1.SlaveStartFilterBank = 14;
 800065e:	4b5f      	ldr	r3, [pc, #380]	; (80007dc <CAR_CAN_Init+0x290>)
 8000660:	220e      	movs	r2, #14
 8000662:	625a      	str	r2, [r3, #36]	; 0x24
	sFilterConfig3_CAN1.FilterActivation = ENABLE;
 8000664:	4b5d      	ldr	r3, [pc, #372]	; (80007dc <CAR_CAN_Init+0x290>)
 8000666:	2201      	movs	r2, #1
 8000668:	621a      	str	r2, [r3, #32]





	sFilterConfig9_CAN1.FilterBank = 12; //filter bank 0 to 12
 800066a:	4b5d      	ldr	r3, [pc, #372]	; (80007e0 <CAR_CAN_Init+0x294>)
 800066c:	220c      	movs	r2, #12
 800066e:	615a      	str	r2, [r3, #20]
	sFilterConfig9_CAN1.FilterMode = CAN_FILTERMODE_IDLIST; //CAN_FILTERMODE_IDLIST
 8000670:	4b5b      	ldr	r3, [pc, #364]	; (80007e0 <CAR_CAN_Init+0x294>)
 8000672:	2201      	movs	r2, #1
 8000674:	619a      	str	r2, [r3, #24]
	sFilterConfig9_CAN1.FilterScale = CAN_FILTERSCALE_16BIT;
 8000676:	4b5a      	ldr	r3, [pc, #360]	; (80007e0 <CAR_CAN_Init+0x294>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
	sFilterConfig9_CAN1.FilterIdHigh = 0x00 << 5;
 800067c:	4b58      	ldr	r3, [pc, #352]	; (80007e0 <CAR_CAN_Init+0x294>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
	sFilterConfig9_CAN1.FilterIdLow = 0x00 << 5;
 8000682:	4b57      	ldr	r3, [pc, #348]	; (80007e0 <CAR_CAN_Init+0x294>)
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
	sFilterConfig9_CAN1.FilterMaskIdHigh = 0x0; //mask doesn't care in IDLIST Mode
 8000688:	4b55      	ldr	r3, [pc, #340]	; (80007e0 <CAR_CAN_Init+0x294>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
	sFilterConfig9_CAN1.FilterMaskIdLow = 0x0;
 800068e:	4b54      	ldr	r3, [pc, #336]	; (80007e0 <CAR_CAN_Init+0x294>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
	sFilterConfig9_CAN1.FilterFIFOAssignment = CAN_FILTER_FIFO0; //we have fifo 0 and fifo 1
 8000694:	4b52      	ldr	r3, [pc, #328]	; (80007e0 <CAR_CAN_Init+0x294>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
	sFilterConfig9_CAN1.SlaveStartFilterBank = 14;
 800069a:	4b51      	ldr	r3, [pc, #324]	; (80007e0 <CAR_CAN_Init+0x294>)
 800069c:	220e      	movs	r2, #14
 800069e:	625a      	str	r2, [r3, #36]	; 0x24
	sFilterConfig9_CAN1.FilterActivation = ENABLE;
 80006a0:	4b4f      	ldr	r3, [pc, #316]	; (80007e0 <CAR_CAN_Init+0x294>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	621a      	str	r2, [r3, #32]

	sFilterConfig10_CAN1 = sFilterConfig9_CAN1;
 80006a6:	4a4f      	ldr	r2, [pc, #316]	; (80007e4 <CAR_CAN_Init+0x298>)
 80006a8:	4b4d      	ldr	r3, [pc, #308]	; (80007e0 <CAR_CAN_Init+0x294>)
 80006aa:	4614      	mov	r4, r2
 80006ac:	461d      	mov	r5, r3
 80006ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006ba:	e884 0003 	stmia.w	r4, {r0, r1}
	sFilterConfig11_CAN1 = sFilterConfig9_CAN1;
 80006be:	4a4a      	ldr	r2, [pc, #296]	; (80007e8 <CAR_CAN_Init+0x29c>)
 80006c0:	4b47      	ldr	r3, [pc, #284]	; (80007e0 <CAR_CAN_Init+0x294>)
 80006c2:	4614      	mov	r4, r2
 80006c4:	461d      	mov	r5, r3
 80006c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006d2:	e884 0003 	stmia.w	r4, {r0, r1}
	sFilterConfig12_CAN1 = sFilterConfig9_CAN1;
 80006d6:	4a45      	ldr	r2, [pc, #276]	; (80007ec <CAR_CAN_Init+0x2a0>)
 80006d8:	4b41      	ldr	r3, [pc, #260]	; (80007e0 <CAR_CAN_Init+0x294>)
 80006da:	4614      	mov	r4, r2
 80006dc:	461d      	mov	r5, r3
 80006de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006ea:	e884 0003 	stmia.w	r4, {r0, r1}

	sFilterConfig9_CAN1.FilterBank   = 9;
 80006ee:	4b3c      	ldr	r3, [pc, #240]	; (80007e0 <CAR_CAN_Init+0x294>)
 80006f0:	2209      	movs	r2, #9
 80006f2:	615a      	str	r2, [r3, #20]
	sFilterConfig9_CAN1.FilterIdHigh = RL_TyreTemp_0to7_address  << 5;
 80006f4:	4b3a      	ldr	r3, [pc, #232]	; (80007e0 <CAR_CAN_Init+0x294>)
 80006f6:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 80006fa:	601a      	str	r2, [r3, #0]
	sFilterConfig9_CAN1.FilterIdLow  = RL_TyreTemp_8to15_address << 5;
 80006fc:	4b38      	ldr	r3, [pc, #224]	; (80007e0 <CAR_CAN_Init+0x294>)
 80006fe:	f44f 4291 	mov.w	r2, #18560	; 0x4880
 8000702:	605a      	str	r2, [r3, #4]

	sFilterConfig10_CAN1.FilterBank   = 10;
 8000704:	4b37      	ldr	r3, [pc, #220]	; (80007e4 <CAR_CAN_Init+0x298>)
 8000706:	220a      	movs	r2, #10
 8000708:	615a      	str	r2, [r3, #20]
	sFilterConfig10_CAN1.FilterIdHigh = RR_TyreTemp_0to7_address  << 5;
 800070a:	4b36      	ldr	r3, [pc, #216]	; (80007e4 <CAR_CAN_Init+0x298>)
 800070c:	f44f 4293 	mov.w	r2, #18816	; 0x4980
 8000710:	601a      	str	r2, [r3, #0]
	sFilterConfig10_CAN1.FilterIdLow  = RR_TyreTemp_8to15_address << 5;
 8000712:	4b34      	ldr	r3, [pc, #208]	; (80007e4 <CAR_CAN_Init+0x298>)
 8000714:	f44f 429b 	mov.w	r2, #19840	; 0x4d80
 8000718:	605a      	str	r2, [r3, #4]

	sFilterConfig11_CAN1.FilterBank   = 11;
 800071a:	4b33      	ldr	r3, [pc, #204]	; (80007e8 <CAR_CAN_Init+0x29c>)
 800071c:	220b      	movs	r2, #11
 800071e:	615a      	str	r2, [r3, #20]
	sFilterConfig11_CAN1.FilterIdHigh = FL_TyreTemp_0to7_address  << 5;
 8000720:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <CAR_CAN_Init+0x29c>)
 8000722:	f44f 4295 	mov.w	r2, #19072	; 0x4a80
 8000726:	601a      	str	r2, [r3, #0]
	sFilterConfig11_CAN1.FilterIdLow  = FL_TyreTemp_8to15_address << 5;
 8000728:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <CAR_CAN_Init+0x29c>)
 800072a:	f44f 4297 	mov.w	r2, #19328	; 0x4b80
 800072e:	605a      	str	r2, [r3, #4]

	sFilterConfig12_CAN1.FilterBank   = 12;
 8000730:	4b2e      	ldr	r3, [pc, #184]	; (80007ec <CAR_CAN_Init+0x2a0>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
	sFilterConfig12_CAN1.FilterIdHigh = FR_TyreTemp_0to7_address  << 5;
 8000736:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <CAR_CAN_Init+0x2a0>)
 8000738:	f44f 4298 	mov.w	r2, #19456	; 0x4c00
 800073c:	601a      	str	r2, [r3, #0]
	sFilterConfig12_CAN1.FilterIdLow  = FR_TyreTemp_8to15_address << 5;
 800073e:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <CAR_CAN_Init+0x2a0>)
 8000740:	f44f 4299 	mov.w	r2, #19584	; 0x4c80
 8000744:	605a      	str	r2, [r3, #4]





	pHeader_CAN2.DLC = 8; //give message size of 1 byte
 8000746:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <CAR_CAN_Init+0x2a4>)
 8000748:	2208      	movs	r2, #8
 800074a:	611a      	str	r2, [r3, #16]
	pHeader_CAN2.IDE = CAN_ID_STD; //set identifier to standard
 800074c:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <CAR_CAN_Init+0x2a4>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
	pHeader_CAN2.RTR = CAN_RTR_DATA; //set data type to remote transmission request?
 8000752:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <CAR_CAN_Init+0x2a4>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
	pHeader_CAN2.StdId = 0x203; //define a standard identifier, used for message identification by filters (switch this for the other microcontroller)
 8000758:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <CAR_CAN_Init+0x2a4>)
 800075a:	f240 2203 	movw	r2, #515	; 0x203
 800075e:	601a      	str	r2, [r3, #0]

	sFilterConfig0_CAN2.FilterBank = 14; //filter bank 13 to 27
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <CAR_CAN_Init+0x2a8>)
 8000762:	220e      	movs	r2, #14
 8000764:	615a      	str	r2, [r3, #20]
	sFilterConfig0_CAN2.FilterMode = CAN_FILTERMODE_IDLIST; //CAN_FILTERMODE_IDLIST
 8000766:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <CAR_CAN_Init+0x2a8>)
 8000768:	2201      	movs	r2, #1
 800076a:	619a      	str	r2, [r3, #24]
	sFilterConfig0_CAN2.FilterScale = CAN_FILTERSCALE_16BIT;
 800076c:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <CAR_CAN_Init+0x2a8>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
	sFilterConfig0_CAN2.FilterIdHigh = 0x308 << 5; //can put 2 standard id's in 16 bit mode
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <CAR_CAN_Init+0x2a8>)
 8000774:	f44f 42c2 	mov.w	r2, #24832	; 0x6100
 8000778:	601a      	str	r2, [r3, #0]
	sFilterConfig0_CAN2.FilterIdLow = 0x174 << 5;
 800077a:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <CAR_CAN_Init+0x2a8>)
 800077c:	f44f 523a 	mov.w	r2, #11904	; 0x2e80
 8000780:	605a      	str	r2, [r3, #4]
	sFilterConfig0_CAN2.FilterMaskIdHigh = 0x0; //mask doesn't care in IDLIST Mode
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <CAR_CAN_Init+0x2a8>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
	sFilterConfig0_CAN2.FilterMaskIdLow = 0x0;
 8000788:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <CAR_CAN_Init+0x2a8>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
	sFilterConfig0_CAN2.FilterFIFOAssignment = CAN_FILTER_FIFO1; //we have fifo 0 and fifo 1
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <CAR_CAN_Init+0x2a8>)
 8000790:	2201      	movs	r2, #1
 8000792:	611a      	str	r2, [r3, #16]
	sFilterConfig0_CAN2.SlaveStartFilterBank = 14;
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <CAR_CAN_Init+0x2a8>)
 8000796:	220e      	movs	r2, #14
 8000798:	625a      	str	r2, [r3, #36]	; 0x24
	sFilterConfig0_CAN2.FilterActivation = ENABLE;
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <CAR_CAN_Init+0x2a8>)
 800079c:	2201      	movs	r2, #1
 800079e:	621a      	str	r2, [r3, #32]

	sFilterConfig1_CAN2.FilterBank = 15; //filter bank 13 to 27
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <CAR_CAN_Init+0x2ac>)
 80007a2:	220f      	movs	r2, #15
 80007a4:	615a      	str	r2, [r3, #20]
	sFilterConfig1_CAN2.FilterMode = CAN_FILTERMODE_IDLIST; //CAN_FILTERMODE_IDLIST
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <CAR_CAN_Init+0x2ac>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	619a      	str	r2, [r3, #24]
	sFilterConfig1_CAN2.FilterScale = CAN_FILTERSCALE_16BIT;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <CAR_CAN_Init+0x2ac>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
	sFilterConfig1_CAN2.FilterIdHigh = 0x178 << 5; //can put 2 standard id's in 16 bit mode
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <CAR_CAN_Init+0x2ac>)
 80007b4:	f44f 523c 	mov.w	r2, #12032	; 0x2f00
 80007b8:	601a      	str	r2, [r3, #0]
	sFilterConfig1_CAN2.FilterIdLow = 0x17C << 5;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <CAR_CAN_Init+0x2ac>)
 80007bc:	f44f 523e 	mov.w	r2, #12160	; 0x2f80
 80007c0:	605a      	str	r2, [r3, #4]
	sFilterConfig1_CAN2.FilterMaskIdHigh = 0x0; //mask doesn't care in IDLIST Mode
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <CAR_CAN_Init+0x2ac>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	e018      	b.n	80007fc <CAR_CAN_Init+0x2b0>
 80007ca:	bf00      	nop
 80007cc:	200001f4 	.word	0x200001f4
 80007d0:	2000023c 	.word	0x2000023c
 80007d4:	20000264 	.word	0x20000264
 80007d8:	2000028c 	.word	0x2000028c
 80007dc:	200002b4 	.word	0x200002b4
 80007e0:	200002dc 	.word	0x200002dc
 80007e4:	20000304 	.word	0x20000304
 80007e8:	2000032c 	.word	0x2000032c
 80007ec:	20000354 	.word	0x20000354
 80007f0:	2000037c 	.word	0x2000037c
 80007f4:	200003c0 	.word	0x200003c0
 80007f8:	200003e8 	.word	0x200003e8
	sFilterConfig1_CAN2.FilterMaskIdLow = 0x0;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <CAR_CAN_Init+0x328>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
	sFilterConfig1_CAN2.FilterFIFOAssignment = CAN_FILTER_FIFO1; //we have fifo 0 and fifo 1
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <CAR_CAN_Init+0x328>)
 8000804:	2201      	movs	r2, #1
 8000806:	611a      	str	r2, [r3, #16]
	sFilterConfig1_CAN2.SlaveStartFilterBank = 14;
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <CAR_CAN_Init+0x328>)
 800080a:	220e      	movs	r2, #14
 800080c:	625a      	str	r2, [r3, #36]	; 0x24
	sFilterConfig1_CAN2.FilterActivation = ENABLE;
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <CAR_CAN_Init+0x328>)
 8000810:	2201      	movs	r2, #1
 8000812:	621a      	str	r2, [r3, #32]





	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig0_CAN1);		//ECU		0x200: rpm[2], tps[2], waterTemperature[2], oilPressure[2]
 8000814:	4918      	ldr	r1, [pc, #96]	; (8000878 <CAR_CAN_Init+0x32c>)
 8000816:	4819      	ldr	r0, [pc, #100]	; (800087c <CAR_CAN_Init+0x330>)
 8000818:	f010 fcdc 	bl	80111d4 <HAL_CAN_ConfigFilter>
															//ECU		0x204: oilTemperature[2], ND[1], gear[1], DN[1], batteryVoltage[2]
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig1_CAN1);		//ECU		0x208: ND[2], fuelPressure[2], airTemperature[2], ND[2]
 800081c:	4918      	ldr	r1, [pc, #96]	; (8000880 <CAR_CAN_Init+0x334>)
 800081e:	4817      	ldr	r0, [pc, #92]	; (800087c <CAR_CAN_Init+0x330>)
 8000820:	f010 fcd8 	bl	80111d4 <HAL_CAN_ConfigFilter>
															//GBU		0x220: ND[3], launchControlStatus[1], ND[4]
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig2_CAN1);		//ECU		0x20C: pedal[1], slip[1], speed[2], brake[1], ND[3]
 8000824:	4917      	ldr	r1, [pc, #92]	; (8000884 <CAR_CAN_Init+0x338>)
 8000826:	4815      	ldr	r0, [pc, #84]	; (800087c <CAR_CAN_Init+0x330>)
 8000828:	f010 fcd4 	bl	80111d4 <HAL_CAN_ConfigFilter>
															//DRS		0x321: ND[4], drsTargher[2], ND[2]

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig3_CAN1);		//LOG		0x30C: brakeRear[1], ND[7]
 800082c:	4916      	ldr	r1, [pc, #88]	; (8000888 <CAR_CAN_Init+0x33c>)
 800082e:	4813      	ldr	r0, [pc, #76]	; (800087c <CAR_CAN_Init+0x330>)
 8000830:	f010 fcd0 	bl	80111d4 <HAL_CAN_ConfigFilter>
															//			0x312: fuelTemperature[2], ND[6]


	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig9_CAN1);		//RL_TCAM	0x240: tyreTemp0_7[8]
 8000834:	4915      	ldr	r1, [pc, #84]	; (800088c <CAR_CAN_Init+0x340>)
 8000836:	4811      	ldr	r0, [pc, #68]	; (800087c <CAR_CAN_Init+0x330>)
 8000838:	f010 fccc 	bl	80111d4 <HAL_CAN_ConfigFilter>
															//RL_TCAM	0x244: tyreTemp8_15[8]
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig10_CAN1);	//RR_TCAM	0x24C: tyreTemp0_7[8]
 800083c:	4914      	ldr	r1, [pc, #80]	; (8000890 <CAR_CAN_Init+0x344>)
 800083e:	480f      	ldr	r0, [pc, #60]	; (800087c <CAR_CAN_Init+0x330>)
 8000840:	f010 fcc8 	bl	80111d4 <HAL_CAN_ConfigFilter>
															//RR_TCAM	0x26C: tyreTemp8_15[8]
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig11_CAN1);	//FL_TCAM	0x254: tyreTemp0_7[8]
 8000844:	4913      	ldr	r1, [pc, #76]	; (8000894 <CAR_CAN_Init+0x348>)
 8000846:	480d      	ldr	r0, [pc, #52]	; (800087c <CAR_CAN_Init+0x330>)
 8000848:	f010 fcc4 	bl	80111d4 <HAL_CAN_ConfigFilter>
															//FL_TCAM	0x25C: tyreTemp8_15[8]
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig12_CAN1);	//FR_TCAM	0x260: tyreTemp0_7[8]
 800084c:	4912      	ldr	r1, [pc, #72]	; (8000898 <CAR_CAN_Init+0x34c>)
 800084e:	480b      	ldr	r0, [pc, #44]	; (800087c <CAR_CAN_Init+0x330>)
 8000850:	f010 fcc0 	bl	80111d4 <HAL_CAN_ConfigFilter>
															//FR_TCAM	0x264: tyreTemp8_15[8]




	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig0_CAN2);
 8000854:	4911      	ldr	r1, [pc, #68]	; (800089c <CAR_CAN_Init+0x350>)
 8000856:	4812      	ldr	r0, [pc, #72]	; (80008a0 <CAR_CAN_Init+0x354>)
 8000858:	f010 fcbc 	bl	80111d4 <HAL_CAN_ConfigFilter>
	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig1_CAN2);
 800085c:	4905      	ldr	r1, [pc, #20]	; (8000874 <CAR_CAN_Init+0x328>)
 800085e:	4810      	ldr	r0, [pc, #64]	; (80008a0 <CAR_CAN_Init+0x354>)
 8000860:	f010 fcb8 	bl	80111d4 <HAL_CAN_ConfigFilter>


	HAL_CAN_Start(&hcan1);
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <CAR_CAN_Init+0x330>)
 8000866:	f010 fda1 	bl	80113ac <HAL_CAN_Start>
	HAL_CAN_Start(&hcan2);
 800086a:	480d      	ldr	r0, [pc, #52]	; (80008a0 <CAR_CAN_Init+0x354>)
 800086c:	f010 fd9e 	bl	80113ac <HAL_CAN_Start>


#endif


}
 8000870:	bf00      	nop
 8000872:	bdb0      	pop	{r4, r5, r7, pc}
 8000874:	200003e8 	.word	0x200003e8
 8000878:	2000023c 	.word	0x2000023c
 800087c:	20001bb8 	.word	0x20001bb8
 8000880:	20000264 	.word	0x20000264
 8000884:	2000028c 	.word	0x2000028c
 8000888:	200002b4 	.word	0x200002b4
 800088c:	200002dc 	.word	0x200002dc
 8000890:	20000304 	.word	0x20000304
 8000894:	2000032c 	.word	0x2000032c
 8000898:	20000354 	.word	0x20000354
 800089c:	200003c0 	.word	0x200003c0
 80008a0:	20001be0 	.word	0x20001be0

080008a4 <CAR_DATA_Init>:


CAR_DATA_Typedef CAR_Data = {0};

void CAR_DATA_Init(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
	CAR_Data.speed.peripheric = speed_peripheric;
 80008a8:	4bc1      	ldr	r3, [pc, #772]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	605a      	str	r2, [r3, #4]
	CAR_Data.speed.dataAddress = speed_address;
 80008ae:	4bc0      	ldr	r3, [pc, #768]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
	CAR_Data.speed.dataLength = speed_dataLength;
 80008b4:	4bbe      	ldr	r3, [pc, #760]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	731a      	strb	r2, [r3, #12]

	CAR_Data.speed.dataId = 0;
 80008ba:	4bbd      	ldr	r3, [pc, #756]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]

	CAR_Data.speed.dataType = speed_dataType;
 80008c0:	4bbb      	ldr	r3, [pc, #748]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	751a      	strb	r2, [r3, #20]

	CAR_Data.speed.floatData = 0;
 80008c6:	4bba      	ldr	r3, [pc, #744]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80008c8:	f04f 0200 	mov.w	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
	CAR_Data.speed.intData = 0;
 80008ce:	4bb8      	ldr	r3, [pc, #736]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]

	CAR_Data.speed.oldFloatData = 0;
 80008d4:	4bb6      	ldr	r3, [pc, #728]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80008d6:	f04f 0200 	mov.w	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
	CAR_Data.speed.oldIntData = 0;
 80008dc:	4bb4      	ldr	r3, [pc, #720]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24

	CAR_Data.speed.gain = speed_gain;
 80008e2:	4bb3      	ldr	r3, [pc, #716]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80008e4:	4ab3      	ldr	r2, [pc, #716]	; (8000bb4 <CAR_DATA_Init+0x310>)
 80008e6:	631a      	str	r2, [r3, #48]	; 0x30
	CAR_Data.speed.offset = speed_offset;
 80008e8:	4bb1      	ldr	r3, [pc, #708]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80008ea:	f04f 0200 	mov.w	r2, #0
 80008ee:	635a      	str	r2, [r3, #52]	; 0x34

	CAR_Data.speed.checkEnable = speed_check;
 80008f0:	4baf      	ldr	r3, [pc, #700]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	CAR_Data.speed.notificationEnable = speed_notification;
 80008f8:	4bad      	ldr	r3, [pc, #692]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	CAR_Data.speed.priority = speed_priority;
 8000900:	4bab      	ldr	r3, [pc, #684]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000902:	2207      	movs	r2, #7
 8000904:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	CAR_Data.speed.maxValue = speed_max;
 8000908:	4ba9      	ldr	r3, [pc, #676]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 800090a:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 800090e:	63da      	str	r2, [r3, #60]	; 0x3c
	CAR_Data.speed.minValue = speed_min;
 8000910:	4ba7      	ldr	r3, [pc, #668]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000912:	f04f 0200 	mov.w	r2, #0
 8000916:	641a      	str	r2, [r3, #64]	; 0x40
	CAR_Data.speed.idealValue = speed_ideal;
 8000918:	4ba5      	ldr	r3, [pc, #660]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 800091a:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 800091e:	645a      	str	r2, [r3, #68]	; 0x44

	CAR_Data.speed.absoluteMaxValue = speed_absoluteMax;
 8000920:	4ba3      	ldr	r3, [pc, #652]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000922:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000926:	649a      	str	r2, [r3, #72]	; 0x48
	CAR_Data.speed.absoluteMinValue = speed_absoluteMin;
 8000928:	4ba1      	ldr	r3, [pc, #644]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 800092a:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 800092e:	64da      	str	r2, [r3, #76]	; 0x4c



	CAR_Data.airTemp.peripheric = airTemp_peripheric;
 8000930:	4b9f      	ldr	r3, [pc, #636]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000932:	2201      	movs	r2, #1
 8000934:	651a      	str	r2, [r3, #80]	; 0x50
	CAR_Data.airTemp.dataAddress = airTemp_address;
 8000936:	4b9e      	ldr	r3, [pc, #632]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000938:	2200      	movs	r2, #0
 800093a:	655a      	str	r2, [r3, #84]	; 0x54
	CAR_Data.airTemp.dataLength = airTemp_dataLength;
 800093c:	4b9c      	ldr	r3, [pc, #624]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 800093e:	2202      	movs	r2, #2
 8000940:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	CAR_Data.airTemp.dataId = 0;
 8000944:	4b9a      	ldr	r3, [pc, #616]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000946:	2200      	movs	r2, #0
 8000948:	65da      	str	r2, [r3, #92]	; 0x5c

	CAR_Data.airTemp.dataType = airTemp_dataType;
 800094a:	4b99      	ldr	r3, [pc, #612]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 800094c:	2201      	movs	r2, #1
 800094e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	CAR_Data.airTemp.floatData = 0;
 8000952:	4b97      	ldr	r3, [pc, #604]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000954:	f04f 0200 	mov.w	r2, #0
 8000958:	665a      	str	r2, [r3, #100]	; 0x64
	CAR_Data.airTemp.intData = 0;
 800095a:	4b95      	ldr	r3, [pc, #596]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 800095c:	2200      	movs	r2, #0
 800095e:	669a      	str	r2, [r3, #104]	; 0x68

	CAR_Data.airTemp.oldFloatData = 0;
 8000960:	4b93      	ldr	r3, [pc, #588]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000962:	f04f 0200 	mov.w	r2, #0
 8000966:	66da      	str	r2, [r3, #108]	; 0x6c
	CAR_Data.airTemp.oldIntData = 0;
 8000968:	4b91      	ldr	r3, [pc, #580]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 800096a:	2200      	movs	r2, #0
 800096c:	671a      	str	r2, [r3, #112]	; 0x70

	CAR_Data.airTemp.gain = airTemp_gain;
 800096e:	4b90      	ldr	r3, [pc, #576]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000970:	4a90      	ldr	r2, [pc, #576]	; (8000bb4 <CAR_DATA_Init+0x310>)
 8000972:	67da      	str	r2, [r3, #124]	; 0x7c
	CAR_Data.airTemp.offset = airTemp_offset;
 8000974:	4b8e      	ldr	r3, [pc, #568]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000976:	f04f 0200 	mov.w	r2, #0
 800097a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	CAR_Data.airTemp.checkEnable = airTemp_check;
 800097e:	4b8c      	ldr	r3, [pc, #560]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000980:	2201      	movs	r2, #1
 8000982:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	CAR_Data.airTemp.notificationEnable = airTemp_notification;
 8000986:	4b8a      	ldr	r3, [pc, #552]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000988:	2201      	movs	r2, #1
 800098a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	CAR_Data.airTemp.priority = airTemp_priority;
 800098e:	4b88      	ldr	r3, [pc, #544]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000990:	2200      	movs	r2, #0
 8000992:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86

	CAR_Data.airTemp.maxValue = airTemp_max;
 8000996:	4b86      	ldr	r3, [pc, #536]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000998:	4a87      	ldr	r2, [pc, #540]	; (8000bb8 <CAR_DATA_Init+0x314>)
 800099a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAR_Data.airTemp.minValue = airTemp_min;
 800099e:	4b84      	ldr	r3, [pc, #528]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80009a0:	4a86      	ldr	r2, [pc, #536]	; (8000bbc <CAR_DATA_Init+0x318>)
 80009a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	CAR_Data.airTemp.idealValue = airTemp_ideal;
 80009a6:	4b82      	ldr	r3, [pc, #520]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80009a8:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 80009ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	CAR_Data.airTemp.absoluteMaxValue = airTemp_absoluteMax;
 80009b0:	4b7f      	ldr	r3, [pc, #508]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80009b2:	4a83      	ldr	r2, [pc, #524]	; (8000bc0 <CAR_DATA_Init+0x31c>)
 80009b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	CAR_Data.airTemp.absoluteMinValue = airTemp_absoluteMin;
 80009b8:	4b7d      	ldr	r3, [pc, #500]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80009ba:	4a82      	ldr	r2, [pc, #520]	; (8000bc4 <CAR_DATA_Init+0x320>)
 80009bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98



	CAR_Data.gear.peripheric = gear_peripheric;
 80009c0:	4b7b      	ldr	r3, [pc, #492]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	CAR_Data.gear.dataAddress = gear_address;
 80009c8:	4b79      	ldr	r3, [pc, #484]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAR_Data.gear.dataLength = gear_dataLength;
 80009d0:	4b77      	ldr	r3, [pc, #476]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80009d2:	2202      	movs	r2, #2
 80009d4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

	CAR_Data.gear.dataId = gear_dataId;
 80009d8:	4b75      	ldr	r3, [pc, #468]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80009da:	f04f 32ff 	mov.w	r2, #4294967295
 80009de:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	CAR_Data.gear.dataType = gear_dataType;
 80009e2:	4b73      	ldr	r3, [pc, #460]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

	CAR_Data.gear.floatData = 0;
 80009ea:	4b71      	ldr	r3, [pc, #452]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80009ec:	f04f 0200 	mov.w	r2, #0
 80009f0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	CAR_Data.gear.intData = 0;
 80009f4:	4b6e      	ldr	r3, [pc, #440]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	CAR_Data.gear.oldFloatData = 0;
 80009fc:	4b6c      	ldr	r3, [pc, #432]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 80009fe:	f04f 0200 	mov.w	r2, #0
 8000a02:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	CAR_Data.gear.oldIntData = 0;
 8000a06:	4b6a      	ldr	r3, [pc, #424]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	CAR_Data.gear.gain = gear_gain;
 8000a0e:	4b68      	ldr	r3, [pc, #416]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000a10:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000a14:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAR_Data.gear.offset = gear_offset;
 8000a18:	4b65      	ldr	r3, [pc, #404]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000a1a:	f04f 0200 	mov.w	r2, #0
 8000a1e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	CAR_Data.gear.checkEnable = gear_check;
 8000a22:	4b63      	ldr	r3, [pc, #396]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	CAR_Data.gear.notificationEnable = gear_notification;
 8000a2a:	4b61      	ldr	r3, [pc, #388]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	CAR_Data.gear.priority = gear_priority;
 8000a32:	4b5f      	ldr	r3, [pc, #380]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000a34:	2202      	movs	r2, #2
 8000a36:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2

	CAR_Data.gear.maxValue = gear_max;
 8000a3a:	4b5d      	ldr	r3, [pc, #372]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000a3c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8000a40:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	CAR_Data.gear.minValue = gear_min;
 8000a44:	4b5a      	ldr	r3, [pc, #360]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000a46:	f04f 0200 	mov.w	r2, #0
 8000a4a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	CAR_Data.gear.idealValue = gear_ideal;
 8000a4e:	4b58      	ldr	r3, [pc, #352]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000a50:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000a54:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	CAR_Data.gear.absoluteMaxValue = gear_absoluteMax;
 8000a58:	4b55      	ldr	r3, [pc, #340]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000a5a:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000a5e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	CAR_Data.gear.absoluteMinValue = gear_absoluteMin;
 8000a62:	4b53      	ldr	r3, [pc, #332]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000a64:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000a68:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4



	CAR_Data.brake.peripheric = brake_peripheric;
 8000a6c:	4b50      	ldr	r3, [pc, #320]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	CAR_Data.brake.dataAddress = brake_address;
 8000a74:	4b4e      	ldr	r3, [pc, #312]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	CAR_Data.brake.dataLength = brake_dataLength;
 8000a7c:	4b4c      	ldr	r3, [pc, #304]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

	CAR_Data.brake.dataId = brake_dataId;
 8000a84:	4b4a      	ldr	r3, [pc, #296]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000a86:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

	CAR_Data.brake.dataType = brake_dataType;
 8000a8e:	4b48      	ldr	r3, [pc, #288]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8

	CAR_Data.brake.floatData = 0;
 8000a96:	4b46      	ldr	r3, [pc, #280]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000a98:	f04f 0200 	mov.w	r2, #0
 8000a9c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	CAR_Data.brake.intData = 0;
 8000aa0:	4b43      	ldr	r3, [pc, #268]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	CAR_Data.brake.oldFloatData = 0;
 8000aa8:	4b41      	ldr	r3, [pc, #260]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000aaa:	f04f 0200 	mov.w	r2, #0
 8000aae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	CAR_Data.brake.oldIntData = 0;
 8000ab2:	4b3f      	ldr	r3, [pc, #252]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	CAR_Data.brake.gain = brake_gain;
 8000aba:	4b3d      	ldr	r3, [pc, #244]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000abc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ac0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	CAR_Data.brake.offset = brake_offset;
 8000ac4:	4b3a      	ldr	r3, [pc, #232]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000ac6:	f04f 0200 	mov.w	r2, #0
 8000aca:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	CAR_Data.brake.checkEnable = brake_check;
 8000ace:	4b38      	ldr	r3, [pc, #224]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	CAR_Data.brake.notificationEnable = brake_notification;
 8000ad6:	4b36      	ldr	r3, [pc, #216]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
	CAR_Data.brake.priority = brake_priority;
 8000ade:	4b34      	ldr	r3, [pc, #208]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000ae0:	2207      	movs	r2, #7
 8000ae2:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e

	CAR_Data.brake.maxValue = brake_max;
 8000ae6:	4b32      	ldr	r3, [pc, #200]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000ae8:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000aec:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	CAR_Data.brake.minValue = brake_min;
 8000af0:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000af2:	f04f 0200 	mov.w	r2, #0
 8000af6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	CAR_Data.brake.idealValue = brake_ideal;
 8000afa:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000afc:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000b00:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	CAR_Data.brake.absoluteMaxValue = brake_absoluteMax;
 8000b04:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000b06:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000b0a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	CAR_Data.brake.absoluteMinValue = brake_absoluteMin;
 8000b0e:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000b10:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000b14:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130



	CAR_Data.brakeRear.peripheric = brakeRear_peripheric;
 8000b18:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	CAR_Data.brakeRear.dataAddress = brakeRear_address;
 8000b20:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	CAR_Data.brakeRear.dataLength = brakeRear_dataLength;
 8000b28:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	CAR_Data.brakeRear.dataId = brakeRear_dataId;
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000b32:	f04f 32ff 	mov.w	r2, #4294967295
 8000b36:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

	CAR_Data.brakeRear.dataType = brakeRear_dataType;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144

	CAR_Data.brakeRear.floatData = 0;
 8000b42:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000b44:	f04f 0200 	mov.w	r2, #0
 8000b48:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	CAR_Data.brakeRear.intData = 0;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

	CAR_Data.brakeRear.oldFloatData = 0;
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000b56:	f04f 0200 	mov.w	r2, #0
 8000b5a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	CAR_Data.brakeRear.oldIntData = 0;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

	CAR_Data.brakeRear.gain = brakeRear_gain;
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000b68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b6c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	CAR_Data.brakeRear.offset = brakeRear_offset;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000b72:	f04f 0200 	mov.w	r2, #0
 8000b76:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

	CAR_Data.brakeRear.checkEnable = brakeRear_check;
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
	CAR_Data.brakeRear.notificationEnable = brakeRear_notification;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
	CAR_Data.brakeRear.priority = brakeRear_priority;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000b8c:	2207      	movs	r2, #7
 8000b8e:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a

	CAR_Data.brakeRear.maxValue = brakeRear_max;
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000b94:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000b98:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	CAR_Data.brakeRear.minValue = brakeRear_min;
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000b9e:	f04f 0200 	mov.w	r2, #0
 8000ba2:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	CAR_Data.brakeRear.idealValue = brakeRear_ideal;
 8000ba6:	4b02      	ldr	r3, [pc, #8]	; (8000bb0 <CAR_DATA_Init+0x30c>)
 8000ba8:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000bac:	e00c      	b.n	8000bc8 <CAR_DATA_Init+0x324>
 8000bae:	bf00      	nop
 8000bb0:	2000041c 	.word	0x2000041c
 8000bb4:	3dcccccd 	.word	0x3dcccccd
 8000bb8:	42700000 	.word	0x42700000
 8000bbc:	40a00000 	.word	0x40a00000
 8000bc0:	42c80000 	.word	0x42c80000
 8000bc4:	c2480000 	.word	0xc2480000
 8000bc8:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

	CAR_Data.brakeRear.absoluteMaxValue = brakeRear_absoluteMax;
 8000bcc:	4bcc      	ldr	r3, [pc, #816]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000bce:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000bd2:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	CAR_Data.brakeRear.absoluteMinValue = brakeRear_absoluteMin;
 8000bd6:	4bca      	ldr	r3, [pc, #808]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000bd8:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000bdc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c



	CAR_Data.pedal.peripheric = pedal_peripheric;
 8000be0:	4bc7      	ldr	r3, [pc, #796]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	CAR_Data.pedal.dataAddress = pedal_address;
 8000be8:	4bc5      	ldr	r3, [pc, #788]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	CAR_Data.pedal.dataLength = pedal_dataLength;
 8000bf0:	4bc3      	ldr	r3, [pc, #780]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188

	CAR_Data.pedal.dataId = pedal_dataId;
 8000bf8:	4bc1      	ldr	r3, [pc, #772]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfe:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

	CAR_Data.pedal.dataType = pedal_dataType;
 8000c02:	4bbf      	ldr	r3, [pc, #764]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190

	CAR_Data.pedal.floatData = 0;
 8000c0a:	4bbd      	ldr	r3, [pc, #756]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000c0c:	f04f 0200 	mov.w	r2, #0
 8000c10:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	CAR_Data.pedal.intData = 0;
 8000c14:	4bba      	ldr	r3, [pc, #744]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

	CAR_Data.pedal.oldFloatData = 0;
 8000c1c:	4bb8      	ldr	r3, [pc, #736]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000c1e:	f04f 0200 	mov.w	r2, #0
 8000c22:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	CAR_Data.pedal.oldIntData = 0;
 8000c26:	4bb6      	ldr	r3, [pc, #728]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	CAR_Data.pedal.gain = pedal_gain;
 8000c2e:	4bb4      	ldr	r3, [pc, #720]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000c30:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c34:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	CAR_Data.pedal.offset = pedal_offset;
 8000c38:	4bb1      	ldr	r3, [pc, #708]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000c3a:	f04f 0200 	mov.w	r2, #0
 8000c3e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

	CAR_Data.pedal.checkEnable = pedal_check;
 8000c42:	4baf      	ldr	r3, [pc, #700]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	CAR_Data.pedal.notificationEnable = pedal_notification;
 8000c4a:	4bad      	ldr	r3, [pc, #692]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
	CAR_Data.pedal.priority = pedal_priority;
 8000c52:	4bab      	ldr	r3, [pc, #684]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6

	CAR_Data.pedal.maxValue = pedal_max;
 8000c5a:	4ba9      	ldr	r3, [pc, #676]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000c5c:	4aa9      	ldr	r2, [pc, #676]	; (8000f04 <CAR_DATA_Init+0x660>)
 8000c5e:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	CAR_Data.pedal.minValue = pedal_min;
 8000c62:	4ba7      	ldr	r3, [pc, #668]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000c64:	f04f 0200 	mov.w	r2, #0
 8000c68:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	CAR_Data.pedal.idealValue = pedal_ideal;
 8000c6c:	4ba4      	ldr	r3, [pc, #656]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000c6e:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000c72:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0

	CAR_Data.pedal.absoluteMaxValue = pedal_absoluteMax;
 8000c76:	4ba2      	ldr	r3, [pc, #648]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000c78:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000c7c:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
	CAR_Data.pedal.absoluteMinValue = pedal_absoluteMin;
 8000c80:	4b9f      	ldr	r3, [pc, #636]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000c82:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000c86:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8



	CAR_Data.steer.peripheric = steer_peripheric;
 8000c8a:	4b9d      	ldr	r3, [pc, #628]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	CAR_Data.steer.dataAddress = steer_address;
 8000c92:	4b9b      	ldr	r3, [pc, #620]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	CAR_Data.steer.dataLength = steer_dataLength;
 8000c9a:	4b99      	ldr	r3, [pc, #612]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4

	CAR_Data.steer.dataId = steer_dataId;
 8000ca2:	4b97      	ldr	r3, [pc, #604]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8

	CAR_Data.steer.dataType =steer_dataType;
 8000cac:	4b94      	ldr	r3, [pc, #592]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc

	CAR_Data.steer.floatData = 0;
 8000cb4:	4b92      	ldr	r3, [pc, #584]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000cb6:	f04f 0200 	mov.w	r2, #0
 8000cba:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	CAR_Data.steer.intData = 0;
 8000cbe:	4b90      	ldr	r3, [pc, #576]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4

	CAR_Data.steer.oldFloatData = 0;
 8000cc6:	4b8e      	ldr	r3, [pc, #568]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000cc8:	f04f 0200 	mov.w	r2, #0
 8000ccc:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	CAR_Data.steer.oldIntData = 0;
 8000cd0:	4b8b      	ldr	r3, [pc, #556]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

	CAR_Data.steer.gain = steer_gain;
 8000cd8:	4b89      	ldr	r3, [pc, #548]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000cda:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000cde:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	CAR_Data.steer.offset = steer_offset;
 8000ce2:	4b87      	ldr	r3, [pc, #540]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

	CAR_Data.steer.checkEnable = steer_check;
 8000cec:	4b84      	ldr	r3, [pc, #528]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	CAR_Data.steer.notificationEnable = steer_notification;
 8000cf4:	4b82      	ldr	r3, [pc, #520]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	CAR_Data.steer.priority = steer_priority;
 8000cfc:	4b80      	ldr	r3, [pc, #512]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000cfe:	2207      	movs	r2, #7
 8000d00:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202

	CAR_Data.steer.maxValue = steer_max;
 8000d04:	4b7e      	ldr	r3, [pc, #504]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000d06:	4a80      	ldr	r2, [pc, #512]	; (8000f08 <CAR_DATA_Init+0x664>)
 8000d08:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	CAR_Data.steer.minValue = steer_min;
 8000d0c:	4b7c      	ldr	r3, [pc, #496]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000d0e:	4a7f      	ldr	r2, [pc, #508]	; (8000f0c <CAR_DATA_Init+0x668>)
 8000d10:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	CAR_Data.steer.idealValue = steer_ideal;
 8000d14:	4b7a      	ldr	r3, [pc, #488]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000d16:	f04f 0200 	mov.w	r2, #0
 8000d1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	CAR_Data.steer.absoluteMaxValue = steer_absoluteMax;
 8000d1e:	4b78      	ldr	r3, [pc, #480]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000d20:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000d24:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	CAR_Data.steer.absoluteMinValue = steer_absoluteMin;
 8000d28:	4b75      	ldr	r3, [pc, #468]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000d2a:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000d2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214



	CAR_Data.rpm.peripheric = rpm_peripheric;
 8000d32:	4b73      	ldr	r3, [pc, #460]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	CAR_Data.rpm.dataAddress = rpm_address;
 8000d3a:	4b71      	ldr	r3, [pc, #452]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	CAR_Data.rpm.dataLength = rpm_dataLength;
 8000d42:	4b6f      	ldr	r3, [pc, #444]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000d44:	2202      	movs	r2, #2
 8000d46:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220

	CAR_Data.rpm.dataId = rpm_dataId;
 8000d4a:	4b6d      	ldr	r3, [pc, #436]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

	CAR_Data.rpm.dataType = rpm_dataType;
 8000d54:	4b6a      	ldr	r3, [pc, #424]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

	CAR_Data.rpm.floatData = 0;
 8000d5c:	4b68      	ldr	r3, [pc, #416]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000d5e:	f04f 0200 	mov.w	r2, #0
 8000d62:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	CAR_Data.rpm.intData = 0;
 8000d66:	4b66      	ldr	r3, [pc, #408]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230

	CAR_Data.rpm.oldFloatData = 0;
 8000d6e:	4b64      	ldr	r3, [pc, #400]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000d70:	f04f 0200 	mov.w	r2, #0
 8000d74:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	CAR_Data.rpm.oldIntData = 0;
 8000d78:	4b61      	ldr	r3, [pc, #388]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

	CAR_Data.rpm.gain = rpm_gain;
 8000d80:	4b5f      	ldr	r3, [pc, #380]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000d82:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000d86:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	CAR_Data.rpm.offset = rpm_offset;
 8000d8a:	4b5d      	ldr	r3, [pc, #372]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248

	CAR_Data.rpm.checkEnable = rpm_check;
 8000d94:	4b5a      	ldr	r3, [pc, #360]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
	CAR_Data.rpm.notificationEnable = rpm_notification;
 8000d9c:	4b58      	ldr	r3, [pc, #352]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d
	CAR_Data.rpm.priority = rpm_priority;
 8000da4:	4b56      	ldr	r3, [pc, #344]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000da6:	2202      	movs	r2, #2
 8000da8:	f883 224e 	strb.w	r2, [r3, #590]	; 0x24e

	CAR_Data.rpm.maxValue = rpm_max;
 8000dac:	4b54      	ldr	r3, [pc, #336]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000dae:	4a58      	ldr	r2, [pc, #352]	; (8000f10 <CAR_DATA_Init+0x66c>)
 8000db0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	CAR_Data.rpm.minValue = rpm_min;
 8000db4:	4b52      	ldr	r3, [pc, #328]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	CAR_Data.rpm.idealValue = rpm_ideal;
 8000dbe:	4b50      	ldr	r3, [pc, #320]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000dc0:	4a54      	ldr	r2, [pc, #336]	; (8000f14 <CAR_DATA_Init+0x670>)
 8000dc2:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258

	CAR_Data.rpm.absoluteMaxValue = rpm_absoluteMax;
 8000dc6:	4b4e      	ldr	r3, [pc, #312]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000dc8:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000dcc:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	CAR_Data.rpm.absoluteMinValue = rpm_absoluteMin;
 8000dd0:	4b4b      	ldr	r3, [pc, #300]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000dd2:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000dd6:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260



	CAR_Data.drsStatus.peripheric = drsStatus_peripheric;
 8000dda:	4b49      	ldr	r3, [pc, #292]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	CAR_Data.drsStatus.dataAddress = drsStatus_address;
 8000de2:	4b47      	ldr	r3, [pc, #284]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	CAR_Data.drsStatus.dataLength = drsStatus_dataLength;
 8000dea:	4b45      	ldr	r3, [pc, #276]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	f883 226c 	strb.w	r2, [r3, #620]	; 0x26c

	CAR_Data.drsStatus.dataId = drsStatus_dataId;
 8000df2:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

	CAR_Data.drsStatus.dataType = drsStatus_dataType;
 8000dfc:	4b40      	ldr	r3, [pc, #256]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274

	CAR_Data.drsStatus.floatData = 0;
 8000e04:	4b3e      	ldr	r3, [pc, #248]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	CAR_Data.drsStatus.intData = 0;
 8000e0e:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

	CAR_Data.drsStatus.oldFloatData = 0;
 8000e16:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	CAR_Data.drsStatus.oldIntData = 0;
 8000e20:	4b37      	ldr	r3, [pc, #220]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284

	CAR_Data.drsStatus.gain = drsStatus_gain;
 8000e28:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000e2a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e2e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	CAR_Data.drsStatus.offset = drsStatus_offset;
 8000e32:	4b33      	ldr	r3, [pc, #204]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

	CAR_Data.drsStatus.checkEnable = drsStatus_check;
 8000e3c:	4b30      	ldr	r3, [pc, #192]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	CAR_Data.drsStatus.notificationEnable = drsStatus_notification;
 8000e44:	4b2e      	ldr	r3, [pc, #184]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
	CAR_Data.drsStatus.priority = drsStatus_priority;
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a

	CAR_Data.drsStatus.maxValue = drsStatus_max;
 8000e54:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
	CAR_Data.drsStatus.minValue = drsStatus_min;
 8000e5e:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000e60:	4a2d      	ldr	r2, [pc, #180]	; (8000f18 <CAR_DATA_Init+0x674>)
 8000e62:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	CAR_Data.drsStatus.idealValue = drsStatus_ideal;
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000e68:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000e6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

	CAR_Data.drsStatus.absoluteMaxValue = drsStatus_absoluteMax;
 8000e70:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000e72:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000e76:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	CAR_Data.drsStatus.absoluteMinValue = drsStatus_absoluteMin;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000e7c:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000e80:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac



	CAR_Data.tractionControl.peripheric = tractionControl_peripheric;
 8000e84:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	CAR_Data.tractionControl.dataAddress = tractionControl_address;
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	CAR_Data.tractionControl.dataLength = tractionControl_dataLength;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304

	CAR_Data.tractionControl.dataId = tractionControl_dataId;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

	CAR_Data.tractionControl.dataType = tractionControl_dataType;
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c

	CAR_Data.tractionControl.floatData = 0;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
	CAR_Data.tractionControl.intData = 0;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

	CAR_Data.tractionControl.oldFloatData = 0;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
	CAR_Data.tractionControl.oldIntData = 0;
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c

	CAR_Data.tractionControl.gain = tractionControl_gain;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000ed4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ed8:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	CAR_Data.tractionControl.offset = tractionControl_offset;
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c

	CAR_Data.tractionControl.checkEnable = tractionControl_check;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
	CAR_Data.tractionControl.notificationEnable = tractionControl_notification;
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
	CAR_Data.tractionControl.priority = tractionControl_priority;
 8000ef6:	4b02      	ldr	r3, [pc, #8]	; (8000f00 <CAR_DATA_Init+0x65c>)
 8000ef8:	2204      	movs	r2, #4
 8000efa:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
 8000efe:	e00d      	b.n	8000f1c <CAR_DATA_Init+0x678>
 8000f00:	2000041c 	.word	0x2000041c
 8000f04:	42c80000 	.word	0x42c80000
 8000f08:	43070000 	.word	0x43070000
 8000f0c:	c3070000 	.word	0xc3070000
 8000f10:	46435000 	.word	0x46435000
 8000f14:	463b8000 	.word	0x463b8000
 8000f18:	bf800000 	.word	0xbf800000

	CAR_Data.tractionControl.maxValue = tractionControl_max;
 8000f1c:	4bc5      	ldr	r3, [pc, #788]	; (8001234 <CAR_DATA_Init+0x990>)
 8000f1e:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8000f22:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
	CAR_Data.tractionControl.minValue = tractionControl_min;
 8000f26:	4bc3      	ldr	r3, [pc, #780]	; (8001234 <CAR_DATA_Init+0x990>)
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	CAR_Data.tractionControl.idealValue = tractionControl_ideal;
 8000f30:	4bc0      	ldr	r3, [pc, #768]	; (8001234 <CAR_DATA_Init+0x990>)
 8000f32:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000f36:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c

	CAR_Data.tractionControl.absoluteMaxValue = tractionControl_absoluteMax;
 8000f3a:	4bbe      	ldr	r3, [pc, #760]	; (8001234 <CAR_DATA_Init+0x990>)
 8000f3c:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000f40:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
	CAR_Data.tractionControl.absoluteMinValue = tractionControl_absoluteMin;
 8000f44:	4bbb      	ldr	r3, [pc, #748]	; (8001234 <CAR_DATA_Init+0x990>)
 8000f46:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000f4a:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344



	CAR_Data.slip.peripheric = slip_peripheric;
 8000f4e:	4bb9      	ldr	r3, [pc, #740]	; (8001234 <CAR_DATA_Init+0x990>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	CAR_Data.slip.dataAddress = slip_address;
 8000f56:	4bb7      	ldr	r3, [pc, #732]	; (8001234 <CAR_DATA_Init+0x990>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
	CAR_Data.slip.dataLength = slip_dataLength;
 8000f5e:	4bb5      	ldr	r3, [pc, #724]	; (8001234 <CAR_DATA_Init+0x990>)
 8000f60:	2202      	movs	r2, #2
 8000f62:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350

	CAR_Data.slip.dataId = slip_dataId;
 8000f66:	4bb3      	ldr	r3, [pc, #716]	; (8001234 <CAR_DATA_Init+0x990>)
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354

	CAR_Data.slip.dataType = slip_dataType;
 8000f70:	4bb0      	ldr	r3, [pc, #704]	; (8001234 <CAR_DATA_Init+0x990>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

	CAR_Data.slip.floatData = 0;
 8000f78:	4bae      	ldr	r3, [pc, #696]	; (8001234 <CAR_DATA_Init+0x990>)
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
	CAR_Data.slip.intData = 0;
 8000f82:	4bac      	ldr	r3, [pc, #688]	; (8001234 <CAR_DATA_Init+0x990>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360

	CAR_Data.slip.oldFloatData = 0;
 8000f8a:	4baa      	ldr	r3, [pc, #680]	; (8001234 <CAR_DATA_Init+0x990>)
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
	CAR_Data.slip.oldIntData = 0;
 8000f94:	4ba7      	ldr	r3, [pc, #668]	; (8001234 <CAR_DATA_Init+0x990>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368

	CAR_Data.slip.gain = slip_gain;
 8000f9c:	4ba5      	ldr	r3, [pc, #660]	; (8001234 <CAR_DATA_Init+0x990>)
 8000f9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000fa2:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
	CAR_Data.slip.offset = slip_offset;
 8000fa6:	4ba3      	ldr	r3, [pc, #652]	; (8001234 <CAR_DATA_Init+0x990>)
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

	CAR_Data.slip.checkEnable = slip_check;
 8000fb0:	4ba0      	ldr	r3, [pc, #640]	; (8001234 <CAR_DATA_Init+0x990>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	CAR_Data.slip.notificationEnable = slip_notification;
 8000fb8:	4b9e      	ldr	r3, [pc, #632]	; (8001234 <CAR_DATA_Init+0x990>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
	CAR_Data.slip.priority = slip_priority;
 8000fc0:	4b9c      	ldr	r3, [pc, #624]	; (8001234 <CAR_DATA_Init+0x990>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e

	CAR_Data.slip.maxValue = slip_max;
 8000fc8:	4b9a      	ldr	r3, [pc, #616]	; (8001234 <CAR_DATA_Init+0x990>)
 8000fca:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000fce:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
	CAR_Data.slip.minValue = slip_min;
 8000fd2:	4b98      	ldr	r3, [pc, #608]	; (8001234 <CAR_DATA_Init+0x990>)
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
	CAR_Data.slip.idealValue = slip_ideal;
 8000fdc:	4b95      	ldr	r3, [pc, #596]	; (8001234 <CAR_DATA_Init+0x990>)
 8000fde:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000fe2:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388

	CAR_Data.slip.absoluteMaxValue = slip_absoluteMax;
 8000fe6:	4b93      	ldr	r3, [pc, #588]	; (8001234 <CAR_DATA_Init+0x990>)
 8000fe8:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000fec:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
	CAR_Data.slip.absoluteMinValue = slip_absoluteMin;
 8000ff0:	4b90      	ldr	r3, [pc, #576]	; (8001234 <CAR_DATA_Init+0x990>)
 8000ff2:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8000ff6:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
//	CAR_Data.launchStatus.absoluteMaxValue = launchStatus_absoluteMax;
//	CAR_Data.launchStatus.absoluteMinValue = launchStatus_absoluteMin;



	CAR_Data.map.peripheric = map_peripheric;
 8000ffa:	4b8e      	ldr	r3, [pc, #568]	; (8001234 <CAR_DATA_Init+0x990>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
	CAR_Data.map.dataAddress = map_address;
 8001002:	4b8c      	ldr	r3, [pc, #560]	; (8001234 <CAR_DATA_Init+0x990>)
 8001004:	2200      	movs	r2, #0
 8001006:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
	CAR_Data.map.dataLength = map_dataLength;
 800100a:	4b8a      	ldr	r3, [pc, #552]	; (8001234 <CAR_DATA_Init+0x990>)
 800100c:	2200      	movs	r2, #0
 800100e:	f883 239c 	strb.w	r2, [r3, #924]	; 0x39c

	CAR_Data.map.dataId = map_dataId;
 8001012:	4b88      	ldr	r3, [pc, #544]	; (8001234 <CAR_DATA_Init+0x990>)
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0

	CAR_Data.map.dataType = map_dataType;
 800101c:	4b85      	ldr	r3, [pc, #532]	; (8001234 <CAR_DATA_Init+0x990>)
 800101e:	2200      	movs	r2, #0
 8001020:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

	CAR_Data.map.floatData = 0;
 8001024:	4b83      	ldr	r3, [pc, #524]	; (8001234 <CAR_DATA_Init+0x990>)
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	CAR_Data.map.intData = 0;
 800102e:	4b81      	ldr	r3, [pc, #516]	; (8001234 <CAR_DATA_Init+0x990>)
 8001030:	2200      	movs	r2, #0
 8001032:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac

	CAR_Data.map.oldFloatData = 0;
 8001036:	4b7f      	ldr	r3, [pc, #508]	; (8001234 <CAR_DATA_Init+0x990>)
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
	CAR_Data.map.oldIntData = 0;
 8001040:	4b7c      	ldr	r3, [pc, #496]	; (8001234 <CAR_DATA_Init+0x990>)
 8001042:	2200      	movs	r2, #0
 8001044:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4

	CAR_Data.map.gain = map_gain;
 8001048:	4b7a      	ldr	r3, [pc, #488]	; (8001234 <CAR_DATA_Init+0x990>)
 800104a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800104e:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
	CAR_Data.map.offset = map_offset;
 8001052:	4b78      	ldr	r3, [pc, #480]	; (8001234 <CAR_DATA_Init+0x990>)
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

	CAR_Data.map.checkEnable = map_check;
 800105c:	4b75      	ldr	r3, [pc, #468]	; (8001234 <CAR_DATA_Init+0x990>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
	CAR_Data.map.notificationEnable = map_notification;
 8001064:	4b73      	ldr	r3, [pc, #460]	; (8001234 <CAR_DATA_Init+0x990>)
 8001066:	2200      	movs	r2, #0
 8001068:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
	CAR_Data.map.priority = map_priority;
 800106c:	4b71      	ldr	r3, [pc, #452]	; (8001234 <CAR_DATA_Init+0x990>)
 800106e:	2203      	movs	r2, #3
 8001070:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca

	CAR_Data.map.maxValue = map_max;
 8001074:	4b6f      	ldr	r3, [pc, #444]	; (8001234 <CAR_DATA_Init+0x990>)
 8001076:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 800107a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
	CAR_Data.map.minValue = map_min;
 800107e:	4b6d      	ldr	r3, [pc, #436]	; (8001234 <CAR_DATA_Init+0x990>)
 8001080:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8001084:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
	CAR_Data.map.idealValue = map_ideal;
 8001088:	4b6a      	ldr	r3, [pc, #424]	; (8001234 <CAR_DATA_Init+0x990>)
 800108a:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 800108e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

	CAR_Data.map.absoluteMaxValue = map_absoluteMax;
 8001092:	4b68      	ldr	r3, [pc, #416]	; (8001234 <CAR_DATA_Init+0x990>)
 8001094:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8001098:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
	CAR_Data.map.absoluteMinValue = map_absoluteMin;
 800109c:	4b65      	ldr	r3, [pc, #404]	; (8001234 <CAR_DATA_Init+0x990>)
 800109e:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 80010a2:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc





	CAR_Data.oilPressure.peripheric = oilPressure_peripheric;
 80010a6:	4b63      	ldr	r3, [pc, #396]	; (8001234 <CAR_DATA_Init+0x990>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
	CAR_Data.oilPressure.dataAddress = oilPressure_address;
 80010ae:	4b61      	ldr	r3, [pc, #388]	; (8001234 <CAR_DATA_Init+0x990>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
	CAR_Data.oilPressure.dataLength = oilPressure_dataLength;
 80010b6:	4b5f      	ldr	r3, [pc, #380]	; (8001234 <CAR_DATA_Init+0x990>)
 80010b8:	2202      	movs	r2, #2
 80010ba:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8

	CAR_Data.oilPressure.dataId = oilPressure_dataId;
 80010be:	4b5d      	ldr	r3, [pc, #372]	; (8001234 <CAR_DATA_Init+0x990>)
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec

	CAR_Data.oilPressure.dataType = oilPressure_dataType;
 80010c8:	4b5a      	ldr	r3, [pc, #360]	; (8001234 <CAR_DATA_Init+0x990>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0

	CAR_Data.oilPressure.floatData = 0;
 80010d0:	4b58      	ldr	r3, [pc, #352]	; (8001234 <CAR_DATA_Init+0x990>)
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
	CAR_Data.oilPressure.intData = 0;
 80010da:	4b56      	ldr	r3, [pc, #344]	; (8001234 <CAR_DATA_Init+0x990>)
 80010dc:	2200      	movs	r2, #0
 80010de:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

	CAR_Data.oilPressure.oldFloatData = 0;
 80010e2:	4b54      	ldr	r3, [pc, #336]	; (8001234 <CAR_DATA_Init+0x990>)
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
	CAR_Data.oilPressure.oldIntData = 0;
 80010ec:	4b51      	ldr	r3, [pc, #324]	; (8001234 <CAR_DATA_Init+0x990>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

	CAR_Data.oilPressure.gain = oilPressure_gain;
 80010f4:	4b4f      	ldr	r3, [pc, #316]	; (8001234 <CAR_DATA_Init+0x990>)
 80010f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80010fa:	4a4f      	ldr	r2, [pc, #316]	; (8001238 <CAR_DATA_Init+0x994>)
 80010fc:	601a      	str	r2, [r3, #0]
	CAR_Data.oilPressure.offset = oilPressure_offset;
 80010fe:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <CAR_DATA_Init+0x990>)
 8001100:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8001104:	4a4d      	ldr	r2, [pc, #308]	; (800123c <CAR_DATA_Init+0x998>)
 8001106:	601a      	str	r2, [r3, #0]

	CAR_Data.oilPressure.checkEnable = oilPressure_check;
 8001108:	4b4a      	ldr	r3, [pc, #296]	; (8001234 <CAR_DATA_Init+0x990>)
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
	CAR_Data.oilPressure.notificationEnable = oilPressure_notification;
 8001110:	4b48      	ldr	r3, [pc, #288]	; (8001234 <CAR_DATA_Init+0x990>)
 8001112:	2201      	movs	r2, #1
 8001114:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
	CAR_Data.oilPressure.priority = oilPressure_priority;
 8001118:	4b46      	ldr	r3, [pc, #280]	; (8001234 <CAR_DATA_Init+0x990>)
 800111a:	2204      	movs	r2, #4
 800111c:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

	CAR_Data.oilPressure.maxValue = oilPressure_max;
 8001120:	4b44      	ldr	r3, [pc, #272]	; (8001234 <CAR_DATA_Init+0x990>)
 8001122:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8001126:	4a46      	ldr	r2, [pc, #280]	; (8001240 <CAR_DATA_Init+0x99c>)
 8001128:	601a      	str	r2, [r3, #0]
	CAR_Data.oilPressure.minValue = oilPressure_min;
 800112a:	4b42      	ldr	r3, [pc, #264]	; (8001234 <CAR_DATA_Init+0x990>)
 800112c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8001130:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001134:	601a      	str	r2, [r3, #0]
	CAR_Data.oilPressure.idealValue = oilPressure_ideal;
 8001136:	4b3f      	ldr	r3, [pc, #252]	; (8001234 <CAR_DATA_Init+0x990>)
 8001138:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800113c:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8001140:	601a      	str	r2, [r3, #0]

	CAR_Data.oilPressure.absoluteMaxValue = oilPressure_absoluteMax;
 8001142:	4b3c      	ldr	r3, [pc, #240]	; (8001234 <CAR_DATA_Init+0x990>)
 8001144:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001148:	4a3e      	ldr	r2, [pc, #248]	; (8001244 <CAR_DATA_Init+0x9a0>)
 800114a:	601a      	str	r2, [r3, #0]
	CAR_Data.oilPressure.absoluteMinValue = oilPressure_absoluteMin;
 800114c:	4b39      	ldr	r3, [pc, #228]	; (8001234 <CAR_DATA_Init+0x990>)
 800114e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001152:	4a3d      	ldr	r2, [pc, #244]	; (8001248 <CAR_DATA_Init+0x9a4>)
 8001154:	601a      	str	r2, [r3, #0]



	CAR_Data.fuelPressure.peripheric = fuelPressure_peripheric;
 8001156:	4b37      	ldr	r3, [pc, #220]	; (8001234 <CAR_DATA_Init+0x990>)
 8001158:	2201      	movs	r2, #1
 800115a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	CAR_Data.fuelPressure.dataAddress = fuelPressure_address;
 800115e:	4b35      	ldr	r3, [pc, #212]	; (8001234 <CAR_DATA_Init+0x990>)
 8001160:	2200      	movs	r2, #0
 8001162:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
	CAR_Data.fuelPressure.dataLength = fuelPressure_dataLength;
 8001166:	4b33      	ldr	r3, [pc, #204]	; (8001234 <CAR_DATA_Init+0x990>)
 8001168:	2202      	movs	r2, #2
 800116a:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

	CAR_Data.fuelPressure.dataId = fuelPressure_dataId;
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <CAR_DATA_Init+0x990>)
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438

	CAR_Data.fuelPressure.dataType = fuelPressure_dataType;
 8001178:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <CAR_DATA_Init+0x990>)
 800117a:	2201      	movs	r2, #1
 800117c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

	CAR_Data.fuelPressure.floatData = 0;
 8001180:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <CAR_DATA_Init+0x990>)
 8001182:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
	CAR_Data.fuelPressure.intData = 0;
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <CAR_DATA_Init+0x990>)
 800118e:	2200      	movs	r2, #0
 8001190:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444

	CAR_Data.fuelPressure.oldFloatData = 0;
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <CAR_DATA_Init+0x990>)
 8001196:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
	CAR_Data.fuelPressure.oldIntData = 0;
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <CAR_DATA_Init+0x990>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

	CAR_Data.fuelPressure.gain = fuelPressure_gain;
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <CAR_DATA_Init+0x990>)
 80011aa:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80011ae:	4a22      	ldr	r2, [pc, #136]	; (8001238 <CAR_DATA_Init+0x994>)
 80011b0:	601a      	str	r2, [r3, #0]
	CAR_Data.fuelPressure.offset = fuelPressure_offset;
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <CAR_DATA_Init+0x990>)
 80011b4:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80011b8:	4a20      	ldr	r2, [pc, #128]	; (800123c <CAR_DATA_Init+0x998>)
 80011ba:	601a      	str	r2, [r3, #0]

	CAR_Data.fuelPressure.checkEnable = fuelPressure_check;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <CAR_DATA_Init+0x990>)
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
	CAR_Data.fuelPressure.notificationEnable = fuelPressure_notification;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <CAR_DATA_Init+0x990>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
	CAR_Data.fuelPressure.priority = fuelPressure_priority;
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <CAR_DATA_Init+0x990>)
 80011ce:	2204      	movs	r2, #4
 80011d0:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462

	CAR_Data.fuelPressure.maxValue = fuelPressure_max;
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <CAR_DATA_Init+0x990>)
 80011d6:	f203 4364 	addw	r3, r3, #1124	; 0x464
 80011da:	4a19      	ldr	r2, [pc, #100]	; (8001240 <CAR_DATA_Init+0x99c>)
 80011dc:	601a      	str	r2, [r3, #0]
	CAR_Data.fuelPressure.minValue = fuelPressure_min;
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <CAR_DATA_Init+0x990>)
 80011e0:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80011e4:	4a19      	ldr	r2, [pc, #100]	; (800124c <CAR_DATA_Init+0x9a8>)
 80011e6:	601a      	str	r2, [r3, #0]
	CAR_Data.fuelPressure.idealValue = fuelPressure_ideal;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <CAR_DATA_Init+0x990>)
 80011ea:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 80011ee:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 80011f2:	601a      	str	r2, [r3, #0]

	CAR_Data.fuelPressure.absoluteMaxValue = fuelPressure_absoluteMax;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <CAR_DATA_Init+0x990>)
 80011f6:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <CAR_DATA_Init+0x9a0>)
 80011fc:	601a      	str	r2, [r3, #0]
	CAR_Data.fuelPressure.absoluteMinValue = fuelPressure_absoluteMin;
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <CAR_DATA_Init+0x990>)
 8001200:	f203 4374 	addw	r3, r3, #1140	; 0x474
 8001204:	4a10      	ldr	r2, [pc, #64]	; (8001248 <CAR_DATA_Init+0x9a4>)
 8001206:	601a      	str	r2, [r3, #0]



	CAR_Data.tps.peripheric = tps_peripheric;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <CAR_DATA_Init+0x990>)
 800120a:	2201      	movs	r2, #1
 800120c:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
	CAR_Data.tps.dataAddress = tps_address;
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <CAR_DATA_Init+0x990>)
 8001212:	2200      	movs	r2, #0
 8001214:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
	CAR_Data.tps.dataLength = tps_dataLength;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <CAR_DATA_Init+0x990>)
 800121a:	2202      	movs	r2, #2
 800121c:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480

	CAR_Data.tps.dataId = tps_dataId;
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <CAR_DATA_Init+0x990>)
 8001222:	f04f 32ff 	mov.w	r2, #4294967295
 8001226:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484

	CAR_Data.tps.dataType = tps_dataType;
 800122a:	4b02      	ldr	r3, [pc, #8]	; (8001234 <CAR_DATA_Init+0x990>)
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2488 	strb.w	r2, [r3, #1160]	; 0x488
 8001232:	e00d      	b.n	8001250 <CAR_DATA_Init+0x9ac>
 8001234:	2000041c 	.word	0x2000041c
 8001238:	3a83126f 	.word	0x3a83126f
 800123c:	3d4ccccd 	.word	0x3d4ccccd
 8001240:	40a00000 	.word	0x40a00000
 8001244:	42c80000 	.word	0x42c80000
 8001248:	c2480000 	.word	0xc2480000
 800124c:	40600000 	.word	0x40600000

	CAR_Data.tps.floatData = 0;
 8001250:	4bba      	ldr	r3, [pc, #744]	; (800153c <CAR_DATA_Init+0xc98>)
 8001252:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
	CAR_Data.tps.intData = 0;
 800125c:	4bb7      	ldr	r3, [pc, #732]	; (800153c <CAR_DATA_Init+0xc98>)
 800125e:	2200      	movs	r2, #0
 8001260:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490

	CAR_Data.tps.oldFloatData = 0;
 8001264:	4bb5      	ldr	r3, [pc, #724]	; (800153c <CAR_DATA_Init+0xc98>)
 8001266:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
	CAR_Data.tps.oldIntData = 0;
 8001270:	4bb2      	ldr	r3, [pc, #712]	; (800153c <CAR_DATA_Init+0xc98>)
 8001272:	2200      	movs	r2, #0
 8001274:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498

	CAR_Data.tps.gain = tps_gain;
 8001278:	4bb0      	ldr	r3, [pc, #704]	; (800153c <CAR_DATA_Init+0xc98>)
 800127a:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 800127e:	4ab0      	ldr	r2, [pc, #704]	; (8001540 <CAR_DATA_Init+0xc9c>)
 8001280:	601a      	str	r2, [r3, #0]
	CAR_Data.tps.offset = tps_offset;
 8001282:	4bae      	ldr	r3, [pc, #696]	; (800153c <CAR_DATA_Init+0xc98>)
 8001284:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	601a      	str	r2, [r3, #0]

	CAR_Data.tps.checkEnable = tps_check;
 800128e:	4bab      	ldr	r3, [pc, #684]	; (800153c <CAR_DATA_Init+0xc98>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 24ac 	strb.w	r2, [r3, #1196]	; 0x4ac
	CAR_Data.tps.notificationEnable = tps_notification;
 8001296:	4ba9      	ldr	r3, [pc, #676]	; (800153c <CAR_DATA_Init+0xc98>)
 8001298:	2200      	movs	r2, #0
 800129a:	f883 24ad 	strb.w	r2, [r3, #1197]	; 0x4ad
	CAR_Data.tps.priority = tps_priority;
 800129e:	4ba7      	ldr	r3, [pc, #668]	; (800153c <CAR_DATA_Init+0xc98>)
 80012a0:	2203      	movs	r2, #3
 80012a2:	f883 24ae 	strb.w	r2, [r3, #1198]	; 0x4ae

	CAR_Data.tps.maxValue = tps_max;
 80012a6:	4ba5      	ldr	r3, [pc, #660]	; (800153c <CAR_DATA_Init+0xc98>)
 80012a8:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80012ac:	4aa5      	ldr	r2, [pc, #660]	; (8001544 <CAR_DATA_Init+0xca0>)
 80012ae:	601a      	str	r2, [r3, #0]
	CAR_Data.tps.minValue = tps_min;
 80012b0:	4ba2      	ldr	r3, [pc, #648]	; (800153c <CAR_DATA_Init+0xc98>)
 80012b2:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80012b6:	4aa4      	ldr	r2, [pc, #656]	; (8001548 <CAR_DATA_Init+0xca4>)
 80012b8:	601a      	str	r2, [r3, #0]
	CAR_Data.tps.idealValue = tps_ideal;
 80012ba:	4ba0      	ldr	r3, [pc, #640]	; (800153c <CAR_DATA_Init+0xc98>)
 80012bc:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 80012c0:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 80012c4:	601a      	str	r2, [r3, #0]

	CAR_Data.tps.absoluteMaxValue = tps_absoluteMax;
 80012c6:	4b9d      	ldr	r3, [pc, #628]	; (800153c <CAR_DATA_Init+0xc98>)
 80012c8:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 80012cc:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 80012d0:	601a      	str	r2, [r3, #0]
	CAR_Data.tps.absoluteMinValue = tps_absoluteMin;
 80012d2:	4b9a      	ldr	r3, [pc, #616]	; (800153c <CAR_DATA_Init+0xc98>)
 80012d4:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80012d8:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 80012dc:	601a      	str	r2, [r3, #0]



	CAR_Data.waterTemp.peripheric = waterTemp_peripheric;
 80012de:	4b97      	ldr	r3, [pc, #604]	; (800153c <CAR_DATA_Init+0xc98>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
	CAR_Data.waterTemp.dataAddress = waterTemp_address;
 80012e6:	4b95      	ldr	r3, [pc, #596]	; (800153c <CAR_DATA_Init+0xc98>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
	CAR_Data.waterTemp.dataLength = waterTemp_dataLength;
 80012ee:	4b93      	ldr	r3, [pc, #588]	; (800153c <CAR_DATA_Init+0xc98>)
 80012f0:	2202      	movs	r2, #2
 80012f2:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

	CAR_Data.waterTemp.dataId = waterTemp_dataId;
 80012f6:	4b91      	ldr	r3, [pc, #580]	; (800153c <CAR_DATA_Init+0xc98>)
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
 80012fc:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

	CAR_Data.waterTemp.dataType = waterTemp_dataType;
 8001300:	4b8e      	ldr	r3, [pc, #568]	; (800153c <CAR_DATA_Init+0xc98>)
 8001302:	2201      	movs	r2, #1
 8001304:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4

	CAR_Data.waterTemp.floatData = 0;
 8001308:	4b8c      	ldr	r3, [pc, #560]	; (800153c <CAR_DATA_Init+0xc98>)
 800130a:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
	CAR_Data.waterTemp.intData = 0;
 8001314:	4b89      	ldr	r3, [pc, #548]	; (800153c <CAR_DATA_Init+0xc98>)
 8001316:	2200      	movs	r2, #0
 8001318:	f8c3 24dc 	str.w	r2, [r3, #1244]	; 0x4dc

	CAR_Data.waterTemp.oldFloatData = 0;
 800131c:	4b87      	ldr	r3, [pc, #540]	; (800153c <CAR_DATA_Init+0xc98>)
 800131e:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
	CAR_Data.waterTemp.oldIntData = 0;
 8001328:	4b84      	ldr	r3, [pc, #528]	; (800153c <CAR_DATA_Init+0xc98>)
 800132a:	2200      	movs	r2, #0
 800132c:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4

	CAR_Data.waterTemp.gain = waterTemp_gain;
 8001330:	4b82      	ldr	r3, [pc, #520]	; (800153c <CAR_DATA_Init+0xc98>)
 8001332:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8001336:	4a82      	ldr	r2, [pc, #520]	; (8001540 <CAR_DATA_Init+0xc9c>)
 8001338:	601a      	str	r2, [r3, #0]
	CAR_Data.waterTemp.offset = waterTemp_offset;
 800133a:	4b80      	ldr	r3, [pc, #512]	; (800153c <CAR_DATA_Init+0xc98>)
 800133c:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	601a      	str	r2, [r3, #0]

	CAR_Data.waterTemp.checkEnable = waterTemp_check;
 8001346:	4b7d      	ldr	r3, [pc, #500]	; (800153c <CAR_DATA_Init+0xc98>)
 8001348:	2201      	movs	r2, #1
 800134a:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
	CAR_Data.waterTemp.notificationEnable = waterTemp_notification;
 800134e:	4b7b      	ldr	r3, [pc, #492]	; (800153c <CAR_DATA_Init+0xc98>)
 8001350:	2201      	movs	r2, #1
 8001352:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
	CAR_Data.waterTemp.priority = waterTemp_priority;
 8001356:	4b79      	ldr	r3, [pc, #484]	; (800153c <CAR_DATA_Init+0xc98>)
 8001358:	2205      	movs	r2, #5
 800135a:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa

	CAR_Data.waterTemp.maxValue = waterTemp_max;
 800135e:	4b77      	ldr	r3, [pc, #476]	; (800153c <CAR_DATA_Init+0xc98>)
 8001360:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8001364:	4a79      	ldr	r2, [pc, #484]	; (800154c <CAR_DATA_Init+0xca8>)
 8001366:	601a      	str	r2, [r3, #0]
	CAR_Data.waterTemp.minValue = waterTemp_min;
 8001368:	4b74      	ldr	r3, [pc, #464]	; (800153c <CAR_DATA_Init+0xc98>)
 800136a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800136e:	4a78      	ldr	r2, [pc, #480]	; (8001550 <CAR_DATA_Init+0xcac>)
 8001370:	601a      	str	r2, [r3, #0]
	CAR_Data.waterTemp.idealValue = waterTemp_ideal;
 8001372:	4b72      	ldr	r3, [pc, #456]	; (800153c <CAR_DATA_Init+0xc98>)
 8001374:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8001378:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 800137c:	601a      	str	r2, [r3, #0]

	CAR_Data.waterTemp.absoluteMaxValue = waterTemp_absoluteMax;
 800137e:	4b6f      	ldr	r3, [pc, #444]	; (800153c <CAR_DATA_Init+0xc98>)
 8001380:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8001384:	4a73      	ldr	r2, [pc, #460]	; (8001554 <CAR_DATA_Init+0xcb0>)
 8001386:	601a      	str	r2, [r3, #0]
	CAR_Data.waterTemp.absoluteMinValue = waterTemp_absoluteMin;
 8001388:	4b6c      	ldr	r3, [pc, #432]	; (800153c <CAR_DATA_Init+0xc98>)
 800138a:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 800138e:	4a72      	ldr	r2, [pc, #456]	; (8001558 <CAR_DATA_Init+0xcb4>)
 8001390:	601a      	str	r2, [r3, #0]



	CAR_Data.oilTemp.peripheric = oilTemp_peripheric;
 8001392:	4b6a      	ldr	r3, [pc, #424]	; (800153c <CAR_DATA_Init+0xc98>)
 8001394:	2201      	movs	r2, #1
 8001396:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	CAR_Data.oilTemp.dataAddress = oilTemp_address;
 800139a:	4b68      	ldr	r3, [pc, #416]	; (800153c <CAR_DATA_Init+0xc98>)
 800139c:	2200      	movs	r2, #0
 800139e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	CAR_Data.oilTemp.dataLength = oilTemp_dataLength;
 80013a2:	4b66      	ldr	r3, [pc, #408]	; (800153c <CAR_DATA_Init+0xc98>)
 80013a4:	2202      	movs	r2, #2
 80013a6:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518

	CAR_Data.oilTemp.dataId = oilTemp_dataId;
 80013aa:	4b64      	ldr	r3, [pc, #400]	; (800153c <CAR_DATA_Init+0xc98>)
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c

	CAR_Data.oilTemp.dataType = oilTemp_dataType;
 80013b4:	4b61      	ldr	r3, [pc, #388]	; (800153c <CAR_DATA_Init+0xc98>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520

	CAR_Data.oilTemp.floatData = 0;
 80013bc:	4b5f      	ldr	r3, [pc, #380]	; (800153c <CAR_DATA_Init+0xc98>)
 80013be:	f203 5324 	addw	r3, r3, #1316	; 0x524
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
	CAR_Data.oilTemp.intData = 0;
 80013c8:	4b5c      	ldr	r3, [pc, #368]	; (800153c <CAR_DATA_Init+0xc98>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528

	CAR_Data.oilTemp.oldFloatData = 0;
 80013d0:	4b5a      	ldr	r3, [pc, #360]	; (800153c <CAR_DATA_Init+0xc98>)
 80013d2:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
	CAR_Data.oilTemp.oldIntData = 0;
 80013dc:	4b57      	ldr	r3, [pc, #348]	; (800153c <CAR_DATA_Init+0xc98>)
 80013de:	2200      	movs	r2, #0
 80013e0:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530

	CAR_Data.oilTemp.gain = oilTemp_gain;
 80013e4:	4b55      	ldr	r3, [pc, #340]	; (800153c <CAR_DATA_Init+0xc98>)
 80013e6:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 80013ea:	4a55      	ldr	r2, [pc, #340]	; (8001540 <CAR_DATA_Init+0xc9c>)
 80013ec:	601a      	str	r2, [r3, #0]
	CAR_Data.oilTemp.offset = oilTemp_offset;
 80013ee:	4b53      	ldr	r3, [pc, #332]	; (800153c <CAR_DATA_Init+0xc98>)
 80013f0:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]

	CAR_Data.oilTemp.checkEnable = oilTemp_check;
 80013fa:	4b50      	ldr	r3, [pc, #320]	; (800153c <CAR_DATA_Init+0xc98>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2544 	strb.w	r2, [r3, #1348]	; 0x544
	CAR_Data.oilTemp.notificationEnable = oilTemp_notification;
 8001402:	4b4e      	ldr	r3, [pc, #312]	; (800153c <CAR_DATA_Init+0xc98>)
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2545 	strb.w	r2, [r3, #1349]	; 0x545
	CAR_Data.oilTemp.priority = oilTemp_priority;
 800140a:	4b4c      	ldr	r3, [pc, #304]	; (800153c <CAR_DATA_Init+0xc98>)
 800140c:	2205      	movs	r2, #5
 800140e:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546

	CAR_Data.oilTemp.maxValue = oilTemp_max;
 8001412:	4b4a      	ldr	r3, [pc, #296]	; (800153c <CAR_DATA_Init+0xc98>)
 8001414:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 8001418:	4a50      	ldr	r2, [pc, #320]	; (800155c <CAR_DATA_Init+0xcb8>)
 800141a:	601a      	str	r2, [r3, #0]
	CAR_Data.oilTemp.minValue = oilTemp_min;
 800141c:	4b47      	ldr	r3, [pc, #284]	; (800153c <CAR_DATA_Init+0xc98>)
 800141e:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8001422:	4a4f      	ldr	r2, [pc, #316]	; (8001560 <CAR_DATA_Init+0xcbc>)
 8001424:	601a      	str	r2, [r3, #0]
	CAR_Data.oilTemp.idealValue = oilTemp_ideal;
 8001426:	4b45      	ldr	r3, [pc, #276]	; (800153c <CAR_DATA_Init+0xc98>)
 8001428:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800142c:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8001430:	601a      	str	r2, [r3, #0]

	CAR_Data.oilTemp.absoluteMaxValue = oilTemp_absoluteMax;
 8001432:	4b42      	ldr	r3, [pc, #264]	; (800153c <CAR_DATA_Init+0xc98>)
 8001434:	f203 5354 	addw	r3, r3, #1364	; 0x554
 8001438:	4a46      	ldr	r2, [pc, #280]	; (8001554 <CAR_DATA_Init+0xcb0>)
 800143a:	601a      	str	r2, [r3, #0]
	CAR_Data.oilTemp.absoluteMinValue = oilTemp_absoluteMin;
 800143c:	4b3f      	ldr	r3, [pc, #252]	; (800153c <CAR_DATA_Init+0xc98>)
 800143e:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8001442:	4a45      	ldr	r2, [pc, #276]	; (8001558 <CAR_DATA_Init+0xcb4>)
 8001444:	601a      	str	r2, [r3, #0]



	CAR_Data.fuelTemp.peripheric = fuelTemp_peripheric;
 8001446:	4b3d      	ldr	r3, [pc, #244]	; (800153c <CAR_DATA_Init+0xc98>)
 8001448:	2201      	movs	r2, #1
 800144a:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
	CAR_Data.fuelTemp.dataAddress = fuelTemp_address;
 800144e:	4b3b      	ldr	r3, [pc, #236]	; (800153c <CAR_DATA_Init+0xc98>)
 8001450:	2200      	movs	r2, #0
 8001452:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
	CAR_Data.fuelTemp.dataLength = fuelTemp_dataLength;
 8001456:	4b39      	ldr	r3, [pc, #228]	; (800153c <CAR_DATA_Init+0xc98>)
 8001458:	2202      	movs	r2, #2
 800145a:	f883 2564 	strb.w	r2, [r3, #1380]	; 0x564

	CAR_Data.fuelTemp.dataId = fuelTemp_dataId;
 800145e:	4b37      	ldr	r3, [pc, #220]	; (800153c <CAR_DATA_Init+0xc98>)
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568

	CAR_Data.fuelTemp.dataType = fuelTemp_dataType;
 8001468:	4b34      	ldr	r3, [pc, #208]	; (800153c <CAR_DATA_Init+0xc98>)
 800146a:	2201      	movs	r2, #1
 800146c:	f883 256c 	strb.w	r2, [r3, #1388]	; 0x56c

	CAR_Data.fuelTemp.floatData = 0;
 8001470:	4b32      	ldr	r3, [pc, #200]	; (800153c <CAR_DATA_Init+0xc98>)
 8001472:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
	CAR_Data.fuelTemp.intData = 0;
 800147c:	4b2f      	ldr	r3, [pc, #188]	; (800153c <CAR_DATA_Init+0xc98>)
 800147e:	2200      	movs	r2, #0
 8001480:	f8c3 2574 	str.w	r2, [r3, #1396]	; 0x574

	CAR_Data.fuelTemp.oldFloatData = 0;
 8001484:	4b2d      	ldr	r3, [pc, #180]	; (800153c <CAR_DATA_Init+0xc98>)
 8001486:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
	CAR_Data.fuelTemp.oldIntData = 0;
 8001490:	4b2a      	ldr	r3, [pc, #168]	; (800153c <CAR_DATA_Init+0xc98>)
 8001492:	2200      	movs	r2, #0
 8001494:	f8c3 257c 	str.w	r2, [r3, #1404]	; 0x57c

	CAR_Data.fuelTemp.gain = fuelTemp_gain;
 8001498:	4b28      	ldr	r3, [pc, #160]	; (800153c <CAR_DATA_Init+0xc98>)
 800149a:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 800149e:	4a28      	ldr	r2, [pc, #160]	; (8001540 <CAR_DATA_Init+0xc9c>)
 80014a0:	601a      	str	r2, [r3, #0]
	CAR_Data.fuelTemp.offset = fuelTemp_offset;
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <CAR_DATA_Init+0xc98>)
 80014a4:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

	CAR_Data.fuelTemp.checkEnable = fuelTemp_check;
 80014ae:	4b23      	ldr	r3, [pc, #140]	; (800153c <CAR_DATA_Init+0xc98>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2590 	strb.w	r2, [r3, #1424]	; 0x590
	CAR_Data.fuelTemp.notificationEnable = fuelTemp_notification;
 80014b6:	4b21      	ldr	r3, [pc, #132]	; (800153c <CAR_DATA_Init+0xc98>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2591 	strb.w	r2, [r3, #1425]	; 0x591
	CAR_Data.fuelTemp.priority = fuelTemp_priority;
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <CAR_DATA_Init+0xc98>)
 80014c0:	2206      	movs	r2, #6
 80014c2:	f883 2592 	strb.w	r2, [r3, #1426]	; 0x592

	CAR_Data.fuelTemp.maxValue = fuelTemp_max;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <CAR_DATA_Init+0xc98>)
 80014c8:	f203 5394 	addw	r3, r3, #1428	; 0x594
 80014cc:	4a25      	ldr	r2, [pc, #148]	; (8001564 <CAR_DATA_Init+0xcc0>)
 80014ce:	601a      	str	r2, [r3, #0]
	CAR_Data.fuelTemp.minValue = fuelTemp_min;
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <CAR_DATA_Init+0xc98>)
 80014d2:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 80014d6:	4a24      	ldr	r2, [pc, #144]	; (8001568 <CAR_DATA_Init+0xcc4>)
 80014d8:	601a      	str	r2, [r3, #0]
	CAR_Data.fuelTemp.idealValue = fuelTemp_ideal;
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <CAR_DATA_Init+0xc98>)
 80014dc:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 80014e0:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 80014e4:	601a      	str	r2, [r3, #0]

	CAR_Data.fuelTemp.absoluteMaxValue = fuelTemp_absoluteMax;
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <CAR_DATA_Init+0xc98>)
 80014e8:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80014ec:	4a19      	ldr	r2, [pc, #100]	; (8001554 <CAR_DATA_Init+0xcb0>)
 80014ee:	601a      	str	r2, [r3, #0]
	CAR_Data.fuelTemp.absoluteMinValue = fuelTemp_absoluteMin;
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <CAR_DATA_Init+0xc98>)
 80014f2:	f203 53a4 	addw	r3, r3, #1444	; 0x5a4
 80014f6:	4a18      	ldr	r2, [pc, #96]	; (8001558 <CAR_DATA_Init+0xcb4>)
 80014f8:	601a      	str	r2, [r3, #0]



	CAR_Data.batteryVoltage.peripheric = batteryVoltage_peripheric;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <CAR_DATA_Init+0xc98>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	CAR_Data.batteryVoltage.dataAddress = batteryVoltage_address;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <CAR_DATA_Init+0xc98>)
 8001504:	2200      	movs	r2, #0
 8001506:	f8c3 25f8 	str.w	r2, [r3, #1528]	; 0x5f8
	CAR_Data.batteryVoltage.dataLength = batteryVoltage_dataLength;
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <CAR_DATA_Init+0xc98>)
 800150c:	2202      	movs	r2, #2
 800150e:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc

	CAR_Data.batteryVoltage.dataId = batteryVoltage_dataId;
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <CAR_DATA_Init+0xc98>)
 8001514:	f04f 32ff 	mov.w	r2, #4294967295
 8001518:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600

	CAR_Data.batteryVoltage.dataType = batteryVoltage_dataType;
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <CAR_DATA_Init+0xc98>)
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604

	CAR_Data.batteryVoltage.floatData = 0;
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <CAR_DATA_Init+0xc98>)
 8001526:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
	CAR_Data.batteryVoltage.intData = 0;
 8001530:	4b02      	ldr	r3, [pc, #8]	; (800153c <CAR_DATA_Init+0xc98>)
 8001532:	2200      	movs	r2, #0
 8001534:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8001538:	e018      	b.n	800156c <CAR_DATA_Init+0xcc8>
 800153a:	bf00      	nop
 800153c:	2000041c 	.word	0x2000041c
 8001540:	3dcccccd 	.word	0x3dcccccd
 8001544:	42c80000 	.word	0x42c80000
 8001548:	41400000 	.word	0x41400000
 800154c:	42d20000 	.word	0x42d20000
 8001550:	42700000 	.word	0x42700000
 8001554:	44480000 	.word	0x44480000
 8001558:	c2480000 	.word	0xc2480000
 800155c:	43070000 	.word	0x43070000
 8001560:	428c0000 	.word	0x428c0000
 8001564:	42b40000 	.word	0x42b40000
 8001568:	41200000 	.word	0x41200000

	CAR_Data.batteryVoltage.oldFloatData = 0;
 800156c:	4b82      	ldr	r3, [pc, #520]	; (8001778 <CAR_DATA_Init+0xed4>)
 800156e:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
	CAR_Data.batteryVoltage.oldIntData = 0;
 8001578:	4b7f      	ldr	r3, [pc, #508]	; (8001778 <CAR_DATA_Init+0xed4>)
 800157a:	2200      	movs	r2, #0
 800157c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614

	CAR_Data.batteryVoltage.gain = batteryVoltage_gain;
 8001580:	4b7d      	ldr	r3, [pc, #500]	; (8001778 <CAR_DATA_Init+0xed4>)
 8001582:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8001586:	4a7d      	ldr	r2, [pc, #500]	; (800177c <CAR_DATA_Init+0xed8>)
 8001588:	601a      	str	r2, [r3, #0]
	CAR_Data.batteryVoltage.offset = batteryVoltage_offset;
 800158a:	4b7b      	ldr	r3, [pc, #492]	; (8001778 <CAR_DATA_Init+0xed4>)
 800158c:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	601a      	str	r2, [r3, #0]

	CAR_Data.batteryVoltage.checkEnable = batteryVoltage_check;
 8001596:	4b78      	ldr	r3, [pc, #480]	; (8001778 <CAR_DATA_Init+0xed4>)
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
	CAR_Data.batteryVoltage.notificationEnable = batteryVoltage_notification;
 800159e:	4b76      	ldr	r3, [pc, #472]	; (8001778 <CAR_DATA_Init+0xed4>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
	CAR_Data.batteryVoltage.priority = batteryVoltage_priority;
 80015a6:	4b74      	ldr	r3, [pc, #464]	; (8001778 <CAR_DATA_Init+0xed4>)
 80015a8:	2206      	movs	r2, #6
 80015aa:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

	CAR_Data.batteryVoltage.maxValue = batteryVoltage_max;
 80015ae:	4b72      	ldr	r3, [pc, #456]	; (8001778 <CAR_DATA_Init+0xed4>)
 80015b0:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80015b4:	4a72      	ldr	r2, [pc, #456]	; (8001780 <CAR_DATA_Init+0xedc>)
 80015b6:	601a      	str	r2, [r3, #0]
	CAR_Data.batteryVoltage.minValue = batteryVoltage_min;
 80015b8:	4b6f      	ldr	r3, [pc, #444]	; (8001778 <CAR_DATA_Init+0xed4>)
 80015ba:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 80015be:	4a71      	ldr	r2, [pc, #452]	; (8001784 <CAR_DATA_Init+0xee0>)
 80015c0:	601a      	str	r2, [r3, #0]
	CAR_Data.batteryVoltage.idealValue = batteryVoltage_ideal;
 80015c2:	4b6d      	ldr	r3, [pc, #436]	; (8001778 <CAR_DATA_Init+0xed4>)
 80015c4:	f203 6334 	addw	r3, r3, #1588	; 0x634
 80015c8:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 80015cc:	601a      	str	r2, [r3, #0]

	CAR_Data.batteryVoltage.absoluteMaxValue = batteryVoltage_absoluteMax;
 80015ce:	4b6a      	ldr	r3, [pc, #424]	; (8001778 <CAR_DATA_Init+0xed4>)
 80015d0:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 80015d4:	4a6c      	ldr	r2, [pc, #432]	; (8001788 <CAR_DATA_Init+0xee4>)
 80015d6:	601a      	str	r2, [r3, #0]
	CAR_Data.batteryVoltage.absoluteMinValue = batteryVoltage_absoluteMin;
 80015d8:	4b67      	ldr	r3, [pc, #412]	; (8001778 <CAR_DATA_Init+0xed4>)
 80015da:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 80015de:	4a6b      	ldr	r2, [pc, #428]	; (800178c <CAR_DATA_Init+0xee8>)
 80015e0:	601a      	str	r2, [r3, #0]





	CAR_Data.BSPD_status_can.peripheric = 0;
 80015e2:	4b65      	ldr	r3, [pc, #404]	; (8001778 <CAR_DATA_Init+0xed4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	f8c3 2774 	str.w	r2, [r3, #1908]	; 0x774
	CAR_Data.BSPD_status_can.dataAddress = 0;
 80015ea:	4b63      	ldr	r3, [pc, #396]	; (8001778 <CAR_DATA_Init+0xed4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	f8c3 2778 	str.w	r2, [r3, #1912]	; 0x778
	CAR_Data.BSPD_status_can.dataLength = 0;
 80015f2:	4b61      	ldr	r3, [pc, #388]	; (8001778 <CAR_DATA_Init+0xed4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 277c 	strb.w	r2, [r3, #1916]	; 0x77c

	CAR_Data.BSPD_status_can.dataId = dataIdUnused;
 80015fa:	4b5f      	ldr	r3, [pc, #380]	; (8001778 <CAR_DATA_Init+0xed4>)
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	f8c3 2780 	str.w	r2, [r3, #1920]	; 0x780

	CAR_Data.BSPD_status_can.dataType = dataType_Int;
 8001604:	4b5c      	ldr	r3, [pc, #368]	; (8001778 <CAR_DATA_Init+0xed4>)
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784

	CAR_Data.BSPD_status_can.floatData = 0;
 800160c:	4b5a      	ldr	r3, [pc, #360]	; (8001778 <CAR_DATA_Init+0xed4>)
 800160e:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
	CAR_Data.BSPD_status_can.intData = 0;
 8001618:	4b57      	ldr	r3, [pc, #348]	; (8001778 <CAR_DATA_Init+0xed4>)
 800161a:	2200      	movs	r2, #0
 800161c:	f8c3 278c 	str.w	r2, [r3, #1932]	; 0x78c

	CAR_Data.BSPD_status_can.oldFloatData = 0;
 8001620:	4b55      	ldr	r3, [pc, #340]	; (8001778 <CAR_DATA_Init+0xed4>)
 8001622:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
	CAR_Data.BSPD_status_can.oldIntData = 0;
 800162c:	4b52      	ldr	r3, [pc, #328]	; (8001778 <CAR_DATA_Init+0xed4>)
 800162e:	2200      	movs	r2, #0
 8001630:	f8c3 2794 	str.w	r2, [r3, #1940]	; 0x794

	CAR_Data.BSPD_status_can.gain = 0;
 8001634:	4b50      	ldr	r3, [pc, #320]	; (8001778 <CAR_DATA_Init+0xed4>)
 8001636:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
	CAR_Data.BSPD_status_can.offset = 0;
 8001640:	4b4d      	ldr	r3, [pc, #308]	; (8001778 <CAR_DATA_Init+0xed4>)
 8001642:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

	CAR_Data.BSPD_status_can.checkEnable = dataCheck_Enabled;
 800164c:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <CAR_DATA_Init+0xed4>)
 800164e:	2201      	movs	r2, #1
 8001650:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
	CAR_Data.BSPD_status_can.notificationEnable = dataNotification_Enabled;
 8001654:	4b48      	ldr	r3, [pc, #288]	; (8001778 <CAR_DATA_Init+0xed4>)
 8001656:	2201      	movs	r2, #1
 8001658:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
	CAR_Data.BSPD_status_can.priority = 0;
 800165c:	4b46      	ldr	r3, [pc, #280]	; (8001778 <CAR_DATA_Init+0xed4>)
 800165e:	2200      	movs	r2, #0
 8001660:	f883 27aa 	strb.w	r2, [r3, #1962]	; 0x7aa

	CAR_Data.BSPD_status_can.maxValue = 0;
 8001664:	4b44      	ldr	r3, [pc, #272]	; (8001778 <CAR_DATA_Init+0xed4>)
 8001666:	f203 73ac 	addw	r3, r3, #1964	; 0x7ac
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
	CAR_Data.BSPD_status_can.minValue = -1;
 8001670:	4b41      	ldr	r3, [pc, #260]	; (8001778 <CAR_DATA_Init+0xed4>)
 8001672:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8001676:	4a46      	ldr	r2, [pc, #280]	; (8001790 <CAR_DATA_Init+0xeec>)
 8001678:	601a      	str	r2, [r3, #0]
	CAR_Data.BSPD_status_can.idealValue = 0;
 800167a:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <CAR_DATA_Init+0xed4>)
 800167c:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	601a      	str	r2, [r3, #0]

	CAR_Data.BSPD_status_can.absoluteMaxValue = noDataLimit;
 8001686:	4b3c      	ldr	r3, [pc, #240]	; (8001778 <CAR_DATA_Init+0xed4>)
 8001688:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800168c:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 8001690:	601a      	str	r2, [r3, #0]
	CAR_Data.BSPD_status_can.absoluteMinValue = noDataLimit;
 8001692:	4b39      	ldr	r3, [pc, #228]	; (8001778 <CAR_DATA_Init+0xed4>)
 8001694:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8001698:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 800169c:	601a      	str	r2, [r3, #0]




	CAR_Data.waterPumpStatus.peripheric = 0;
 800169e:	4b36      	ldr	r3, [pc, #216]	; (8001778 <CAR_DATA_Init+0xed4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	f8c3 27c0 	str.w	r2, [r3, #1984]	; 0x7c0
	CAR_Data.waterPumpStatus.dataAddress = 0;
 80016a6:	4b34      	ldr	r3, [pc, #208]	; (8001778 <CAR_DATA_Init+0xed4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	f8c3 27c4 	str.w	r2, [r3, #1988]	; 0x7c4
	CAR_Data.waterPumpStatus.dataLength = 0;
 80016ae:	4b32      	ldr	r3, [pc, #200]	; (8001778 <CAR_DATA_Init+0xed4>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 27c8 	strb.w	r2, [r3, #1992]	; 0x7c8

	CAR_Data.waterPumpStatus.dataId = dataIdUnused;
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <CAR_DATA_Init+0xed4>)
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	f8c3 27cc 	str.w	r2, [r3, #1996]	; 0x7cc

	CAR_Data.waterPumpStatus.dataType = dataType_Int;
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <CAR_DATA_Init+0xed4>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0

	CAR_Data.waterPumpStatus.floatData = 0;
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <CAR_DATA_Init+0xed4>)
 80016ca:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
	CAR_Data.waterPumpStatus.intData = 0;
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <CAR_DATA_Init+0xed4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	f8c3 27d8 	str.w	r2, [r3, #2008]	; 0x7d8

	CAR_Data.waterPumpStatus.oldFloatData = 0;
 80016dc:	4b26      	ldr	r3, [pc, #152]	; (8001778 <CAR_DATA_Init+0xed4>)
 80016de:	f203 73dc 	addw	r3, r3, #2012	; 0x7dc
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
	CAR_Data.waterPumpStatus.oldIntData = 0;
 80016e8:	4b23      	ldr	r3, [pc, #140]	; (8001778 <CAR_DATA_Init+0xed4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0

	CAR_Data.waterPumpStatus.gain = 0;
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <CAR_DATA_Init+0xed4>)
 80016f2:	f203 73ec 	addw	r3, r3, #2028	; 0x7ec
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
	CAR_Data.waterPumpStatus.offset = 0;
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <CAR_DATA_Init+0xed4>)
 80016fe:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	601a      	str	r2, [r3, #0]

	CAR_Data.waterPumpStatus.checkEnable = dataCheck_Enabled;
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <CAR_DATA_Init+0xed4>)
 800170a:	2201      	movs	r2, #1
 800170c:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
	CAR_Data.waterPumpStatus.notificationEnable = dataNotification_Enabled;
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <CAR_DATA_Init+0xed4>)
 8001712:	2201      	movs	r2, #1
 8001714:	f883 27f5 	strb.w	r2, [r3, #2037]	; 0x7f5
	CAR_Data.waterPumpStatus.priority = 0;
 8001718:	4b17      	ldr	r3, [pc, #92]	; (8001778 <CAR_DATA_Init+0xed4>)
 800171a:	2200      	movs	r2, #0
 800171c:	f883 27f6 	strb.w	r2, [r3, #2038]	; 0x7f6

	CAR_Data.waterPumpStatus.maxValue = 1;
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <CAR_DATA_Init+0xed4>)
 8001722:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8001726:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800172a:	601a      	str	r2, [r3, #0]
	CAR_Data.waterPumpStatus.minValue = 1;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <CAR_DATA_Init+0xed4>)
 800172e:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8001732:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001736:	601a      	str	r2, [r3, #0]
	CAR_Data.waterPumpStatus.idealValue = 0;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <CAR_DATA_Init+0xed4>)
 800173a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	601a      	str	r2, [r3, #0]

	CAR_Data.waterPumpStatus.absoluteMaxValue = noDataLimit;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <CAR_DATA_Init+0xed4>)
 8001746:	f603 0304 	addw	r3, r3, #2052	; 0x804
 800174a:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 800174e:	601a      	str	r2, [r3, #0]
	CAR_Data.waterPumpStatus.absoluteMinValue = noDataLimit;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <CAR_DATA_Init+0xed4>)
 8001752:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8001756:	f04f 4297 	mov.w	r2, #1266679808	; 0x4b800000
 800175a:	601a      	str	r2, [r3, #0]


	CAR_Data.lastAccelerationTime = 0;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <CAR_DATA_Init+0xed4>)
 800175e:	2200      	movs	r2, #0
 8001760:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
	CAR_Data.bestAccelerationTime = 0;
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <CAR_DATA_Init+0xed4>)
 8001766:	2200      	movs	r2, #0
 8001768:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810

}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	2000041c 	.word	0x2000041c
 800177c:	3a83126f 	.word	0x3a83126f
 8001780:	41600000 	.word	0x41600000
 8001784:	4139999a 	.word	0x4139999a
 8001788:	42480000 	.word	0x42480000
 800178c:	c2480000 	.word	0xc2480000
 8001790:	bf800000 	.word	0xbf800000

08001794 <CAR_DATA_Read>:

#endif


void CAR_DATA_Read(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
#if CAN1_DATA_READ_IT_ENABLE == 0 && (DEBUG_MODE == 0 || DEBUG_MODE == 2)
	CAN1_DATA_Read();
 8001798:	f000 f884 	bl	80018a4 <CAN1_DATA_Read>
#endif

	//FIFO1 CAN2
	while (HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO1) > 0)
 800179c:	e01f      	b.n	80017de <CAR_DATA_Read+0x4a>
	{
		HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO1, &pRxHeader_CAN2, dataRX_CAN2);
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <CAR_DATA_Read+0x60>)
 80017a0:	4a15      	ldr	r2, [pc, #84]	; (80017f8 <CAR_DATA_Read+0x64>)
 80017a2:	2101      	movs	r1, #1
 80017a4:	4815      	ldr	r0, [pc, #84]	; (80017fc <CAR_DATA_Read+0x68>)
 80017a6:	f00f ff20 	bl	80115ea <HAL_CAN_GetRxMessage>

		if (pRxHeader_CAN2.StdId == 0x308)
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <CAR_DATA_Read+0x64>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
 80017b2:	d107      	bne.n	80017c4 <CAR_DATA_Read+0x30>
		{
			dataRX_SAVED[0]=dataRX_CAN2[4];
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <CAR_DATA_Read+0x60>)
 80017b6:	791a      	ldrb	r2, [r3, #4]
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <CAR_DATA_Read+0x6c>)
 80017ba:	701a      	strb	r2, [r3, #0]
			dataRX_SAVED[1]=dataRX_CAN2[5];
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <CAR_DATA_Read+0x60>)
 80017be:	795a      	ldrb	r2, [r3, #5]
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <CAR_DATA_Read+0x6c>)
 80017c2:	705a      	strb	r2, [r3, #1]
			//speed *=-0.143693;
			//speed+=212.594;
		}

		if (pRxHeader_CAN2.StdId == 0x174)
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <CAR_DATA_Read+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f5b3 7fba 	cmp.w	r3, #372	; 0x174
 80017cc:	d107      	bne.n	80017de <CAR_DATA_Read+0x4a>
			//TxData_CAN2[0]=dataRX_CAN2[5];//y
			//TxData_CAN2[1]=dataRX_CAN2[4];
			//TxData_CAN2[2]=dataRX_CAN2[1];//yaw
			//TxData_CAN2[3]=dataRX_CAN2[0];

			dataRX_SAVED[2]=dataRX_CAN2[5];
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <CAR_DATA_Read+0x60>)
 80017d0:	795a      	ldrb	r2, [r3, #5]
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <CAR_DATA_Read+0x6c>)
 80017d4:	709a      	strb	r2, [r3, #2]
			dataRX_SAVED[3]=dataRX_CAN2[4];//Y
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <CAR_DATA_Read+0x60>)
 80017d8:	791a      	ldrb	r2, [r3, #4]
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <CAR_DATA_Read+0x6c>)
 80017dc:	70da      	strb	r2, [r3, #3]
	while (HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO1) > 0)
 80017de:	2101      	movs	r1, #1
 80017e0:	4806      	ldr	r0, [pc, #24]	; (80017fc <CAR_DATA_Read+0x68>)
 80017e2:	f010 f814 	bl	801180e <HAL_CAN_GetRxFifoFillLevel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1d8      	bne.n	800179e <CAR_DATA_Read+0xa>
			//HAL_CAN_AddTxMessage(&hcan2, &pHeader_CAN2, TxData_CAN2, &TxMailbox_CAN2);
		}
	}


	GPIO_IN_Read();
 80017ec:	f000 f80a 	bl	8001804 <GPIO_IN_Read>
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200003b0 	.word	0x200003b0
 80017f8:	20000394 	.word	0x20000394
 80017fc:	20001be0 	.word	0x20001be0
 8001800:	200003b8 	.word	0x200003b8

08001804 <GPIO_IN_Read>:


void GPIO_IN_Read(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0

	static uint8_t initFlag = 0;

	static GPIO_EdgeTypeDef DIG1;

	if(initFlag == 0)
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <GPIO_IN_Read+0x8c>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d108      	bne.n	8001822 <GPIO_IN_Read+0x1e>
	{
		DIG1.GPIOx = DIG1_F_GPIO_Port;
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <GPIO_IN_Read+0x90>)
 8001812:	4a21      	ldr	r2, [pc, #132]	; (8001898 <GPIO_IN_Read+0x94>)
 8001814:	601a      	str	r2, [r3, #0]
		DIG1.GPIO_Pin = DIG1_F_Pin;
 8001816:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <GPIO_IN_Read+0x90>)
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	809a      	strh	r2, [r3, #4]
		DIG1.delay = 100;
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <GPIO_IN_Read+0x90>)
 800181e:	2264      	movs	r2, #100	; 0x64
 8001820:	819a      	strh	r2, [r3, #12]
	}


	CAR_Data.waterPumpStatus.oldTimeData = CAR_Data.waterPumpStatus.lastTimeData;
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <GPIO_IN_Read+0x98>)
 8001824:	f8d3 37e4 	ldr.w	r3, [r3, #2020]	; 0x7e4
 8001828:	4a1c      	ldr	r2, [pc, #112]	; (800189c <GPIO_IN_Read+0x98>)
 800182a:	f8c2 37e8 	str.w	r3, [r2, #2024]	; 0x7e8
	CAR_Data.waterPumpStatus.oldIntData = CAR_Data.waterPumpStatus.intData;
 800182e:	4b1b      	ldr	r3, [pc, #108]	; (800189c <GPIO_IN_Read+0x98>)
 8001830:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 8001834:	4a19      	ldr	r2, [pc, #100]	; (800189c <GPIO_IN_Read+0x98>)
 8001836:	f8c2 37e0 	str.w	r3, [r2, #2016]	; 0x7e0
	CAR_Data.waterPumpStatus.oldFloatData = CAR_Data.waterPumpStatus.floatData;
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <GPIO_IN_Read+0x98>)
 800183c:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <GPIO_IN_Read+0x98>)
 8001844:	f203 73dc 	addw	r3, r3, #2012	; 0x7dc
 8001848:	601a      	str	r2, [r3, #0]

	//if(HAL_GPIO_ReadPin(DIG1_F_GPIO_Port, DIG1_F_Pin))
	if(GPIO_AdvancedRead(&DIG1) == GPIO_HIGH)
 800184a:	4812      	ldr	r0, [pc, #72]	; (8001894 <GPIO_IN_Read+0x90>)
 800184c:	f013 fa56 	bl	8014cfc <GPIO_AdvancedRead>
 8001850:	4603      	mov	r3, r0
 8001852:	2b01      	cmp	r3, #1
 8001854:	d10a      	bne.n	800186c <GPIO_IN_Read+0x68>
	{
		CAR_Data.waterPumpStatus.intData = 1;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <GPIO_IN_Read+0x98>)
 8001858:	2201      	movs	r2, #1
 800185a:	f8c3 27d8 	str.w	r2, [r3, #2008]	; 0x7d8
		CAR_Data.waterPumpStatus.floatData = 1;
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <GPIO_IN_Read+0x98>)
 8001860:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8001864:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	e009      	b.n	8001880 <GPIO_IN_Read+0x7c>
	}
	else
	{
		CAR_Data.waterPumpStatus.intData = 0;
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <GPIO_IN_Read+0x98>)
 800186e:	2200      	movs	r2, #0
 8001870:	f8c3 27d8 	str.w	r2, [r3, #2008]	; 0x7d8
		CAR_Data.waterPumpStatus.floatData = 0;
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <GPIO_IN_Read+0x98>)
 8001876:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
	}

	CAR_Data.waterPumpStatus.lastTimeData = millis;
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <GPIO_IN_Read+0x9c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a05      	ldr	r2, [pc, #20]	; (800189c <GPIO_IN_Read+0x98>)
 8001886:	f8c2 37e4 	str.w	r3, [r2, #2020]	; 0x7e4
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20001a46 	.word	0x20001a46
 8001894:	20001a48 	.word	0x20001a48
 8001898:	40020400 	.word	0x40020400
 800189c:	2000041c 	.word	0x2000041c
 80018a0:	20006a98 	.word	0x20006a98

080018a4 <CAN1_DATA_Read>:



void CAN1_DATA_Read(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	; 0x30
 80018a8:	af00      	add	r7, sp, #0
	uint8_t debugDataDone = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	75bb      	strb	r3, [r7, #22]

	//FIFO 0
	while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0 || (DEBUG_MODE == 2 && debugDataDone == 0))
 80018ae:	f001 bbd1 	b.w	8003054 <CAN1_DATA_Read+0x17b0>
	{
		debugDataDone = 1;
 80018b2:	2301      	movs	r3, #1
 80018b4:	75bb      	strb	r3, [r7, #22]

		if(DEBUG_MODE == 2)
			canDataGenerationForDebug();
		else
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader_CAN1, RxData_CAN1);
 80018b6:	4bb1      	ldr	r3, [pc, #708]	; (8001b7c <CAN1_DATA_Read+0x2d8>)
 80018b8:	4ab1      	ldr	r2, [pc, #708]	; (8001b80 <CAN1_DATA_Read+0x2dc>)
 80018ba:	2100      	movs	r1, #0
 80018bc:	48b1      	ldr	r0, [pc, #708]	; (8001b84 <CAN1_DATA_Read+0x2e0>)
 80018be:	f00f fe94 	bl	80115ea <HAL_CAN_GetRxMessage>

		CAR_Data.canLastReceiveTime = millis;
 80018c2:	4bb1      	ldr	r3, [pc, #708]	; (8001b88 <CAN1_DATA_Read+0x2e4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4ab1      	ldr	r2, [pc, #708]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 80018c8:	6013      	str	r3, [r2, #0]

		int32_t tempDataInt = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
		float 	tempDataFloat = 0;
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
		uint8_t tempDataInRange = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if (pRxHeader_CAN1.StdId == 0x200)
 80018da:	4ba9      	ldr	r3, [pc, #676]	; (8001b80 <CAN1_DATA_Read+0x2dc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018e2:	f040 82e6 	bne.w	8001eb2 <CAN1_DATA_Read+0x60e>
		{
			tWater = (float) (RxData_CAN1[4] << 8 | RxData_CAN1[5]) / 10;
 80018e6:	4ba5      	ldr	r3, [pc, #660]	; (8001b7c <CAN1_DATA_Read+0x2d8>)
 80018e8:	791b      	ldrb	r3, [r3, #4]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	4aa3      	ldr	r2, [pc, #652]	; (8001b7c <CAN1_DATA_Read+0x2d8>)
 80018ee:	7952      	ldrb	r2, [r2, #5]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80018fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001902:	4ba3      	ldr	r3, [pc, #652]	; (8001b90 <CAN1_DATA_Read+0x2ec>)
 8001904:	edc3 7a00 	vstr	s15, [r3]

			if (tWater > 299)
 8001908:	4ba1      	ldr	r3, [pc, #644]	; (8001b90 <CAN1_DATA_Read+0x2ec>)
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001b94 <CAN1_DATA_Read+0x2f0>
 8001912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191a:	dd02      	ble.n	8001922 <CAN1_DATA_Read+0x7e>
				tWater = 299;
 800191c:	4b9c      	ldr	r3, [pc, #624]	; (8001b90 <CAN1_DATA_Read+0x2ec>)
 800191e:	4a9e      	ldr	r2, [pc, #632]	; (8001b98 <CAN1_DATA_Read+0x2f4>)
 8001920:	601a      	str	r2, [r3, #0]

			//CAR_Data.waterTemp.floatData = tWater;

			rpm = (RxData_CAN1[0] << 8 | RxData_CAN1[1]);
 8001922:	4b96      	ldr	r3, [pc, #600]	; (8001b7c <CAN1_DATA_Read+0x2d8>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	4a94      	ldr	r2, [pc, #592]	; (8001b7c <CAN1_DATA_Read+0x2d8>)
 800192a:	7852      	ldrb	r2, [r2, #1]
 800192c:	4313      	orrs	r3, r2
 800192e:	4a9b      	ldr	r2, [pc, #620]	; (8001b9c <CAN1_DATA_Read+0x2f8>)
 8001930:	6013      	str	r3, [r2, #0]

			tps = (float) (RxData_CAN1[2] << 8 | RxData_CAN1[3]) / 10;
 8001932:	4b92      	ldr	r3, [pc, #584]	; (8001b7c <CAN1_DATA_Read+0x2d8>)
 8001934:	789b      	ldrb	r3, [r3, #2]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	4a90      	ldr	r2, [pc, #576]	; (8001b7c <CAN1_DATA_Read+0x2d8>)
 800193a:	78d2      	ldrb	r2, [r2, #3]
 800193c:	4313      	orrs	r3, r2
 800193e:	ee07 3a90 	vmov	s15, r3
 8001942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001946:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800194a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001952:	ee17 2a90 	vmov	r2, s15
 8001956:	4b92      	ldr	r3, [pc, #584]	; (8001ba0 <CAN1_DATA_Read+0x2fc>)
 8001958:	601a      	str	r2, [r3, #0]

			if (tps > 199)
 800195a:	4b91      	ldr	r3, [pc, #580]	; (8001ba0 <CAN1_DATA_Read+0x2fc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2bc7      	cmp	r3, #199	; 0xc7
 8001960:	dd02      	ble.n	8001968 <CAN1_DATA_Read+0xc4>
				tps = 199;
 8001962:	4b8f      	ldr	r3, [pc, #572]	; (8001ba0 <CAN1_DATA_Read+0x2fc>)
 8001964:	22c7      	movs	r2, #199	; 0xc7
 8001966:	601a      	str	r2, [r3, #0]

			//CAR_Data.tps.intData = tps;

			pOil = (float) (RxData_CAN1[6] << 8 | RxData_CAN1[7]) / 1000;
 8001968:	4b84      	ldr	r3, [pc, #528]	; (8001b7c <CAN1_DATA_Read+0x2d8>)
 800196a:	799b      	ldrb	r3, [r3, #6]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	4a83      	ldr	r2, [pc, #524]	; (8001b7c <CAN1_DATA_Read+0x2d8>)
 8001970:	79d2      	ldrb	r2, [r2, #7]
 8001972:	4313      	orrs	r3, r2
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800197c:	eddf 6a89 	vldr	s13, [pc, #548]	; 8001ba4 <CAN1_DATA_Read+0x300>
 8001980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001984:	4b88      	ldr	r3, [pc, #544]	; (8001ba8 <CAN1_DATA_Read+0x304>)
 8001986:	edc3 7a00 	vstr	s15, [r3]
			if (pOil > 19)
 800198a:	4b87      	ldr	r3, [pc, #540]	; (8001ba8 <CAN1_DATA_Read+0x304>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8001994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199c:	dd03      	ble.n	80019a6 <CAN1_DATA_Read+0x102>
				pOil = 0;
 800199e:	4b82      	ldr	r3, [pc, #520]	; (8001ba8 <CAN1_DATA_Read+0x304>)
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]


			CAR_Data.waterTemp.oldIntData = CAR_Data.waterTemp.intData;
 80019a6:	4b79      	ldr	r3, [pc, #484]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 80019a8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	; 0x4dc
 80019ac:	4a77      	ldr	r2, [pc, #476]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 80019ae:	f8c2 34e4 	str.w	r3, [r2, #1252]	; 0x4e4
			CAR_Data.waterTemp.oldFloatData = CAR_Data.waterTemp.floatData;
 80019b2:	4b76      	ldr	r3, [pc, #472]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 80019b4:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4b74      	ldr	r3, [pc, #464]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 80019bc:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 80019c0:	601a      	str	r2, [r3, #0]
			CAR_Data.waterTemp.oldTimeData = CAR_Data.waterTemp.lastTimeData;
 80019c2:	4b72      	ldr	r3, [pc, #456]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 80019c4:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80019c8:	4a70      	ldr	r2, [pc, #448]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 80019ca:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec

			if(CAR_Data.waterTemp.dataType == dataType_Int)
 80019ce:	4b6f      	ldr	r3, [pc, #444]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 80019d0:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d16b      	bne.n	8001ab0 <CAN1_DATA_Read+0x20c>
			{
				tempDataInt = ((int32_t)((int8_t)RxData_CAN1[4] << 8 | (uint8_t)RxData_CAN1[5])) * CAR_Data.waterTemp.gain + CAR_Data.waterTemp.offset;
 80019d8:	4b68      	ldr	r3, [pc, #416]	; (8001b7c <CAN1_DATA_Read+0x2d8>)
 80019da:	791b      	ldrb	r3, [r3, #4]
 80019dc:	b25b      	sxtb	r3, r3
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	4a66      	ldr	r2, [pc, #408]	; (8001b7c <CAN1_DATA_Read+0x2d8>)
 80019e2:	7952      	ldrb	r2, [r2, #5]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	ee07 3a90 	vmov	s15, r3
 80019ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ee:	4b67      	ldr	r3, [pc, #412]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 80019f0:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019fc:	4b63      	ldr	r3, [pc, #396]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 80019fe:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0e:	ee17 3a90 	vmov	r3, s15
 8001a12:	613b      	str	r3, [r7, #16]

				if(
						(CAR_Data.waterTemp.absoluteMaxValue == noDataLimit || tempDataInt <= CAR_Data.waterTemp.absoluteMaxValue) &&
 8001a14:	4b5d      	ldr	r3, [pc, #372]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 8001a16:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8001a1a:	edd3 7a00 	vldr	s15, [r3]
				if(
 8001a1e:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001bac <CAN1_DATA_Read+0x308>
 8001a22:	eef4 7a47 	vcmp.f32	s15, s14
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	d00e      	beq.n	8001a4a <CAN1_DATA_Read+0x1a6>
						(CAR_Data.waterTemp.absoluteMaxValue == noDataLimit || tempDataInt <= CAR_Data.waterTemp.absoluteMaxValue) &&
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a36:	4b55      	ldr	r3, [pc, #340]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 8001a38:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a48:	d82e      	bhi.n	8001aa8 <CAN1_DATA_Read+0x204>
						(CAR_Data.waterTemp.absoluteMinValue == noDataLimit || tempDataInt >= CAR_Data.waterTemp.absoluteMinValue)
 8001a4a:	4b50      	ldr	r3, [pc, #320]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 8001a4c:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8001a50:	edd3 7a00 	vldr	s15, [r3]
						(CAR_Data.waterTemp.absoluteMaxValue == noDataLimit || tempDataInt <= CAR_Data.waterTemp.absoluteMaxValue) &&
 8001a54:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001bac <CAN1_DATA_Read+0x308>
 8001a58:	eef4 7a47 	vcmp.f32	s15, s14
 8001a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a60:	d00e      	beq.n	8001a80 <CAN1_DATA_Read+0x1dc>
						(CAR_Data.waterTemp.absoluteMinValue == noDataLimit || tempDataInt >= CAR_Data.waterTemp.absoluteMinValue)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a6c:	4b47      	ldr	r3, [pc, #284]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 8001a6e:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7e:	db13      	blt.n	8001aa8 <CAN1_DATA_Read+0x204>
					)
				{
					CAR_Data.waterTemp.intData = tempDataInt;
 8001a80:	4a42      	ldr	r2, [pc, #264]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	f8c2 34dc 	str.w	r3, [r2, #1244]	; 0x4dc
					CAR_Data.waterTemp.floatData = CAR_Data.waterTemp.intData;
 8001a88:	4b40      	ldr	r3, [pc, #256]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 8001a8a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	; 0x4dc
 8001a8e:	ee07 3a90 	vmov	s15, r3
 8001a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a96:	4b3d      	ldr	r3, [pc, #244]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 8001a98:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8001a9c:	edc3 7a00 	vstr	s15, [r3]

					tempDataInRange = 1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001aa6:	e086      	b.n	8001bb6 <CAN1_DATA_Read+0x312>
				}
				else
					tempDataInRange = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001aae:	e082      	b.n	8001bb6 <CAN1_DATA_Read+0x312>
			}
			else
			{
				tempDataFloat = (float) ((int32_t)((int8_t)RxData_CAN1[4] << 8 | (uint8_t)RxData_CAN1[5])) * CAR_Data.waterTemp.gain + CAR_Data.waterTemp.offset;
 8001ab0:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <CAN1_DATA_Read+0x2d8>)
 8001ab2:	791b      	ldrb	r3, [r3, #4]
 8001ab4:	b25b      	sxtb	r3, r3
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	4a30      	ldr	r2, [pc, #192]	; (8001b7c <CAN1_DATA_Read+0x2d8>)
 8001aba:	7952      	ldrb	r2, [r2, #5]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac6:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 8001ac8:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 8001ad6:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae2:	edc7 7a03 	vstr	s15, [r7, #12]

				if(
						(CAR_Data.waterTemp.absoluteMaxValue == noDataLimit || tempDataInt <= CAR_Data.waterTemp.absoluteMaxValue) &&
 8001ae6:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 8001ae8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8001aec:	edd3 7a00 	vldr	s15, [r3]
				if(
 8001af0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001bac <CAN1_DATA_Read+0x308>
 8001af4:	eef4 7a47 	vcmp.f32	s15, s14
 8001af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afc:	d00e      	beq.n	8001b1c <CAN1_DATA_Read+0x278>
						(CAR_Data.waterTemp.absoluteMaxValue == noDataLimit || tempDataInt <= CAR_Data.waterTemp.absoluteMaxValue) &&
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b08:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 8001b0a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1a:	d849      	bhi.n	8001bb0 <CAN1_DATA_Read+0x30c>
						(CAR_Data.waterTemp.absoluteMinValue == noDataLimit || tempDataInt >= CAR_Data.waterTemp.absoluteMinValue)
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 8001b1e:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8001b22:	edd3 7a00 	vldr	s15, [r3]
						(CAR_Data.waterTemp.absoluteMaxValue == noDataLimit || tempDataInt <= CAR_Data.waterTemp.absoluteMaxValue) &&
 8001b26:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001bac <CAN1_DATA_Read+0x308>
 8001b2a:	eef4 7a47 	vcmp.f32	s15, s14
 8001b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b32:	d00e      	beq.n	8001b52 <CAN1_DATA_Read+0x2ae>
						(CAR_Data.waterTemp.absoluteMinValue == noDataLimit || tempDataInt >= CAR_Data.waterTemp.absoluteMinValue)
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b3e:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 8001b40:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	db2e      	blt.n	8001bb0 <CAN1_DATA_Read+0x30c>
					)
				{
					CAR_Data.waterTemp.floatData = tempDataFloat;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 8001b54:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	601a      	str	r2, [r3, #0]
					CAR_Data.waterTemp.intData = CAR_Data.waterTemp.floatData;
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 8001b5e:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b6a:	ee17 2a90 	vmov	r2, s15
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <CAN1_DATA_Read+0x2e8>)
 8001b70:	f8c3 24dc 	str.w	r2, [r3, #1244]	; 0x4dc

					tempDataInRange = 1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001b7a:	e01c      	b.n	8001bb6 <CAN1_DATA_Read+0x312>
 8001b7c:	20000234 	.word	0x20000234
 8001b80:	2000020c 	.word	0x2000020c
 8001b84:	20001bb8 	.word	0x20001bb8
 8001b88:	20006a98 	.word	0x20006a98
 8001b8c:	2000041c 	.word	0x2000041c
 8001b90:	20000010 	.word	0x20000010
 8001b94:	43958000 	.word	0x43958000
 8001b98:	43958000 	.word	0x43958000
 8001b9c:	20000020 	.word	0x20000020
 8001ba0:	20000024 	.word	0x20000024
 8001ba4:	447a0000 	.word	0x447a0000
 8001ba8:	2000001c 	.word	0x2000001c
 8001bac:	4b800000 	.word	0x4b800000
				}
				else
					tempDataInRange = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}

			if(tempDataInRange == 1)
 8001bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d104      	bne.n	8001bc8 <CAN1_DATA_Read+0x324>
				CAR_Data.waterTemp.lastTimeData = millis;
 8001bbe:	4ba4      	ldr	r3, [pc, #656]	; (8001e50 <CAN1_DATA_Read+0x5ac>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4aa4      	ldr	r2, [pc, #656]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001bc4:	f8c2 34e8 	str.w	r3, [r2, #1256]	; 0x4e8



			CAR_Data.rpm.oldIntData = CAR_Data.rpm.intData;
 8001bc8:	4ba2      	ldr	r3, [pc, #648]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001bca:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8001bce:	4aa1      	ldr	r2, [pc, #644]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001bd0:	f8c2 3238 	str.w	r3, [r2, #568]	; 0x238
			CAR_Data.rpm.oldFloatData = CAR_Data.rpm.floatData;
 8001bd4:	4b9f      	ldr	r3, [pc, #636]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001bd6:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8001bda:	4a9e      	ldr	r2, [pc, #632]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001bdc:	f8c2 3234 	str.w	r3, [r2, #564]	; 0x234
			CAR_Data.rpm.oldTimeData = CAR_Data.rpm.lastTimeData;
 8001be0:	4b9c      	ldr	r3, [pc, #624]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001be2:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 8001be6:	4a9b      	ldr	r2, [pc, #620]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001be8:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240

			if(CAR_Data.rpm.dataType == dataType_Int)
 8001bec:	4b99      	ldr	r3, [pc, #612]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001bee:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d126      	bne.n	8001c44 <CAN1_DATA_Read+0x3a0>
			{
				CAR_Data.rpm.intData = ((int32_t)((int8_t)RxData_CAN1[0] << 8 | (uint8_t)RxData_CAN1[1])) * CAR_Data.rpm.gain + CAR_Data.rpm.offset;
 8001bf6:	4b98      	ldr	r3, [pc, #608]	; (8001e58 <CAN1_DATA_Read+0x5b4>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	b25b      	sxtb	r3, r3
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	4a96      	ldr	r2, [pc, #600]	; (8001e58 <CAN1_DATA_Read+0x5b4>)
 8001c00:	7852      	ldrb	r2, [r2, #1]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c0c:	4b91      	ldr	r3, [pc, #580]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001c0e:	edd3 7a91 	vldr	s15, [r3, #580]	; 0x244
 8001c12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c16:	4b8f      	ldr	r3, [pc, #572]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001c18:	edd3 7a92 	vldr	s15, [r3, #584]	; 0x248
 8001c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c24:	ee17 2a90 	vmov	r2, s15
 8001c28:	4b8a      	ldr	r3, [pc, #552]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001c2a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				CAR_Data.rpm.floatData = CAR_Data.rpm.intData;
 8001c2e:	4b89      	ldr	r3, [pc, #548]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001c30:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8001c34:	ee07 3a90 	vmov	s15, r3
 8001c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3c:	4b85      	ldr	r3, [pc, #532]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001c3e:	edc3 7a8b 	vstr	s15, [r3, #556]	; 0x22c
 8001c42:	e021      	b.n	8001c88 <CAN1_DATA_Read+0x3e4>
			}
			else
			{
				CAR_Data.rpm.floatData = (float) ((int32_t)((int8_t)RxData_CAN1[0] << 8 | (uint8_t)RxData_CAN1[1])) * CAR_Data.rpm.gain + CAR_Data.rpm.offset;
 8001c44:	4b84      	ldr	r3, [pc, #528]	; (8001e58 <CAN1_DATA_Read+0x5b4>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b25b      	sxtb	r3, r3
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	4a82      	ldr	r2, [pc, #520]	; (8001e58 <CAN1_DATA_Read+0x5b4>)
 8001c4e:	7852      	ldrb	r2, [r2, #1]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c5a:	4b7e      	ldr	r3, [pc, #504]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001c5c:	edd3 7a91 	vldr	s15, [r3, #580]	; 0x244
 8001c60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c64:	4b7b      	ldr	r3, [pc, #492]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001c66:	edd3 7a92 	vldr	s15, [r3, #584]	; 0x248
 8001c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6e:	4b79      	ldr	r3, [pc, #484]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001c70:	edc3 7a8b 	vstr	s15, [r3, #556]	; 0x22c
				CAR_Data.rpm.intData = CAR_Data.rpm.floatData;
 8001c74:	4b77      	ldr	r3, [pc, #476]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001c76:	edd3 7a8b 	vldr	s15, [r3, #556]	; 0x22c
 8001c7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c7e:	ee17 2a90 	vmov	r2, s15
 8001c82:	4b74      	ldr	r3, [pc, #464]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001c84:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			}
			CAR_Data.rpm.lastTimeData = millis;
 8001c88:	4b71      	ldr	r3, [pc, #452]	; (8001e50 <CAN1_DATA_Read+0x5ac>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a71      	ldr	r2, [pc, #452]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001c8e:	f8c2 323c 	str.w	r3, [r2, #572]	; 0x23c



			CAR_Data.tps.oldIntData = CAR_Data.tps.intData;
 8001c92:	4b70      	ldr	r3, [pc, #448]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001c94:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8001c98:	4a6e      	ldr	r2, [pc, #440]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001c9a:	f8c2 3498 	str.w	r3, [r2, #1176]	; 0x498
			CAR_Data.tps.oldFloatData = CAR_Data.tps.floatData;
 8001c9e:	4b6d      	ldr	r3, [pc, #436]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001ca0:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4b6b      	ldr	r3, [pc, #428]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001ca8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8001cac:	601a      	str	r2, [r3, #0]
			CAR_Data.tps.oldTimeData = CAR_Data.tps.lastTimeData;
 8001cae:	4b69      	ldr	r3, [pc, #420]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001cb0:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 8001cb4:	4a67      	ldr	r2, [pc, #412]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001cb6:	f8c2 34a0 	str.w	r3, [r2, #1184]	; 0x4a0

			if(CAR_Data.tps.dataType == dataType_Int)
 8001cba:	4b66      	ldr	r3, [pc, #408]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001cbc:	f893 3488 	ldrb.w	r3, [r3, #1160]	; 0x488
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d12c      	bne.n	8001d1e <CAN1_DATA_Read+0x47a>
			{
				CAR_Data.tps.intData = ((int32_t)((int8_t)RxData_CAN1[2] << 8 | (uint8_t)RxData_CAN1[3])) * CAR_Data.tps.gain + CAR_Data.tps.offset;
 8001cc4:	4b64      	ldr	r3, [pc, #400]	; (8001e58 <CAN1_DATA_Read+0x5b4>)
 8001cc6:	789b      	ldrb	r3, [r3, #2]
 8001cc8:	b25b      	sxtb	r3, r3
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	4a62      	ldr	r2, [pc, #392]	; (8001e58 <CAN1_DATA_Read+0x5b4>)
 8001cce:	78d2      	ldrb	r2, [r2, #3]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cda:	4b5e      	ldr	r3, [pc, #376]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001cdc:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce8:	4b5a      	ldr	r3, [pc, #360]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001cea:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cfa:	ee17 2a90 	vmov	r2, s15
 8001cfe:	4b55      	ldr	r3, [pc, #340]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001d00:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
				CAR_Data.tps.floatData = CAR_Data.tps.intData;
 8001d04:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001d06:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8001d0a:	ee07 3a90 	vmov	s15, r3
 8001d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d12:	4b50      	ldr	r3, [pc, #320]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001d14:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8001d18:	edc3 7a00 	vstr	s15, [r3]
 8001d1c:	e029      	b.n	8001d72 <CAN1_DATA_Read+0x4ce>
			}
			else
			{
				CAR_Data.tps.floatData = (float) ((int32_t)((int8_t)RxData_CAN1[2] << 8 | (uint8_t)RxData_CAN1[3])) * CAR_Data.tps.gain + CAR_Data.tps.offset;
 8001d1e:	4b4e      	ldr	r3, [pc, #312]	; (8001e58 <CAN1_DATA_Read+0x5b4>)
 8001d20:	789b      	ldrb	r3, [r3, #2]
 8001d22:	b25b      	sxtb	r3, r3
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	4a4c      	ldr	r2, [pc, #304]	; (8001e58 <CAN1_DATA_Read+0x5b4>)
 8001d28:	78d2      	ldrb	r2, [r2, #3]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	ee07 3a90 	vmov	s15, r3
 8001d30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d34:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001d36:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8001d3a:	edd3 7a00 	vldr	s15, [r3]
 8001d3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d42:	4b44      	ldr	r3, [pc, #272]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001d44:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8001d48:	edd3 7a00 	vldr	s15, [r3]
 8001d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d50:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001d52:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8001d56:	edc3 7a00 	vstr	s15, [r3]
				CAR_Data.tps.intData = CAR_Data.tps.floatData;
 8001d5a:	4b3e      	ldr	r3, [pc, #248]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001d5c:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8001d60:	edd3 7a00 	vldr	s15, [r3]
 8001d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d68:	ee17 2a90 	vmov	r2, s15
 8001d6c:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001d6e:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
			}
			CAR_Data.tps.lastTimeData = millis;
 8001d72:	4b37      	ldr	r3, [pc, #220]	; (8001e50 <CAN1_DATA_Read+0x5ac>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a37      	ldr	r2, [pc, #220]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001d78:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c


			float tmpOilPressure = ((float) ((int32_t)((int8_t)RxData_CAN1[6] << 8 | (uint8_t)RxData_CAN1[7])) * CAR_Data.oilPressure.gain + CAR_Data.oilPressure.offset);
 8001d7c:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <CAN1_DATA_Read+0x5b4>)
 8001d7e:	799b      	ldrb	r3, [r3, #6]
 8001d80:	b25b      	sxtb	r3, r3
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	4a34      	ldr	r2, [pc, #208]	; (8001e58 <CAN1_DATA_Read+0x5b4>)
 8001d86:	79d2      	ldrb	r2, [r2, #7]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	ee07 3a90 	vmov	s15, r3
 8001d8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d92:	4b30      	ldr	r3, [pc, #192]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001d94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da0:	4b2c      	ldr	r3, [pc, #176]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001da2:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8001da6:	edd3 7a00 	vldr	s15, [r3]
 8001daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dae:	edc7 7a02 	vstr	s15, [r7, #8]

			if(tmpOilPressure <= CAR_Data.oilPressure.absoluteMaxValue)
 8001db2:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001db4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001db8:	edd3 7a00 	vldr	s15, [r3]
 8001dbc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001dc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc8:	d873      	bhi.n	8001eb2 <CAN1_DATA_Read+0x60e>
			{
				CAR_Data.oilPressure.oldIntData = CAR_Data.oilPressure.intData;
 8001dca:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001dcc:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8001dd0:	4a20      	ldr	r2, [pc, #128]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001dd2:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
				CAR_Data.oilPressure.oldFloatData = CAR_Data.oilPressure.floatData;
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001dd8:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 8001ddc:	4a1d      	ldr	r2, [pc, #116]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001dde:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
				CAR_Data.oilPressure.oldTimeData = CAR_Data.oilPressure.lastTimeData;
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001de4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001de8:	4a1a      	ldr	r2, [pc, #104]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001dea:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408

				if(CAR_Data.oilPressure.dataType == dataType_Int)
 8001dee:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001df0:	f893 33f0 	ldrb.w	r3, [r3, #1008]	; 0x3f0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d131      	bne.n	8001e5c <CAN1_DATA_Read+0x5b8>
				{
					CAR_Data.oilPressure.intData = ((int32_t)((int8_t)RxData_CAN1[6] << 8 | (uint8_t)RxData_CAN1[7])) * CAR_Data.oilPressure.gain + CAR_Data.oilPressure.offset;
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <CAN1_DATA_Read+0x5b4>)
 8001dfa:	799b      	ldrb	r3, [r3, #6]
 8001dfc:	b25b      	sxtb	r3, r3
 8001dfe:	021b      	lsls	r3, r3, #8
 8001e00:	4a15      	ldr	r2, [pc, #84]	; (8001e58 <CAN1_DATA_Read+0x5b4>)
 8001e02:	79d2      	ldrb	r2, [r2, #7]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	ee07 3a90 	vmov	s15, r3
 8001e0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001e10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e14:	edd3 7a00 	vldr	s15, [r3]
 8001e18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001e1e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8001e22:	edd3 7a00 	vldr	s15, [r3]
 8001e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e2e:	ee17 2a90 	vmov	r2, s15
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001e34:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
					CAR_Data.oilPressure.floatData = CAR_Data.oilPressure.intData;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001e3a:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e46:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <CAN1_DATA_Read+0x5b0>)
 8001e48:	edc3 7afd 	vstr	s15, [r3, #1012]	; 0x3f4
 8001e4c:	e02c      	b.n	8001ea8 <CAN1_DATA_Read+0x604>
 8001e4e:	bf00      	nop
 8001e50:	20006a98 	.word	0x20006a98
 8001e54:	2000041c 	.word	0x2000041c
 8001e58:	20000234 	.word	0x20000234
				}
				else
				{
					CAR_Data.oilPressure.floatData = (float) ((int32_t)((int8_t)RxData_CAN1[6] << 8 | (uint8_t)RxData_CAN1[7])) * CAR_Data.oilPressure.gain + CAR_Data.oilPressure.offset;
 8001e5c:	4b90      	ldr	r3, [pc, #576]	; (80020a0 <CAN1_DATA_Read+0x7fc>)
 8001e5e:	799b      	ldrb	r3, [r3, #6]
 8001e60:	b25b      	sxtb	r3, r3
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	4a8e      	ldr	r2, [pc, #568]	; (80020a0 <CAN1_DATA_Read+0x7fc>)
 8001e66:	79d2      	ldrb	r2, [r2, #7]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e72:	4b8c      	ldr	r3, [pc, #560]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001e74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e80:	4b88      	ldr	r3, [pc, #544]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001e82:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8e:	4b85      	ldr	r3, [pc, #532]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001e90:	edc3 7afd 	vstr	s15, [r3, #1012]	; 0x3f4
					CAR_Data.oilPressure.intData = CAR_Data.oilPressure.floatData;
 8001e94:	4b83      	ldr	r3, [pc, #524]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001e96:	edd3 7afd 	vldr	s15, [r3, #1012]	; 0x3f4
 8001e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e9e:	ee17 2a90 	vmov	r2, s15
 8001ea2:	4b80      	ldr	r3, [pc, #512]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001ea4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
				}
				CAR_Data.oilPressure.lastTimeData = millis;
 8001ea8:	4b7f      	ldr	r3, [pc, #508]	; (80020a8 <CAN1_DATA_Read+0x804>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a7d      	ldr	r2, [pc, #500]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001eae:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			}
		}

		if (pRxHeader_CAN1.StdId == 0x204)
 8001eb2:	4b7e      	ldr	r3, [pc, #504]	; (80020ac <CAN1_DATA_Read+0x808>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8001eba:	f040 819e 	bne.w	80021fa <CAN1_DATA_Read+0x956>
		{
			vBat = (float) ((int32_t)((int8_t)RxData_CAN1[6] << 8 | (uint8_t)RxData_CAN1[7])) / 1000;
 8001ebe:	4b78      	ldr	r3, [pc, #480]	; (80020a0 <CAN1_DATA_Read+0x7fc>)
 8001ec0:	799b      	ldrb	r3, [r3, #6]
 8001ec2:	b25b      	sxtb	r3, r3
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	4a76      	ldr	r2, [pc, #472]	; (80020a0 <CAN1_DATA_Read+0x7fc>)
 8001ec8:	79d2      	ldrb	r2, [r2, #7]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	ee07 3a90 	vmov	s15, r3
 8001ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed4:	eddf 6a76 	vldr	s13, [pc, #472]	; 80020b0 <CAN1_DATA_Read+0x80c>
 8001ed8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001edc:	4b75      	ldr	r3, [pc, #468]	; (80020b4 <CAN1_DATA_Read+0x810>)
 8001ede:	edc3 7a00 	vstr	s15, [r3]

			if (vBat > 19)
 8001ee2:	4b74      	ldr	r3, [pc, #464]	; (80020b4 <CAN1_DATA_Read+0x810>)
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8001eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef4:	dd02      	ble.n	8001efc <CAN1_DATA_Read+0x658>
				vBat = 19;
 8001ef6:	4b6f      	ldr	r3, [pc, #444]	; (80020b4 <CAN1_DATA_Read+0x810>)
 8001ef8:	4a6f      	ldr	r2, [pc, #444]	; (80020b8 <CAN1_DATA_Read+0x814>)
 8001efa:	601a      	str	r2, [r3, #0]

			//CAR_Data.batteryVoltage.floatData = vBat;

			gear = RxData_CAN1[4];
 8001efc:	4b68      	ldr	r3, [pc, #416]	; (80020a0 <CAN1_DATA_Read+0x7fc>)
 8001efe:	791b      	ldrb	r3, [r3, #4]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b6e      	ldr	r3, [pc, #440]	; (80020bc <CAN1_DATA_Read+0x818>)
 8001f04:	601a      	str	r2, [r3, #0]

			//CAR_Data.gear.intData = gear;

			tOil = (float) ((int32_t)((int8_t)RxData_CAN1[0] << 8 | (uint8_t)RxData_CAN1[1])) / 10;
 8001f06:	4b66      	ldr	r3, [pc, #408]	; (80020a0 <CAN1_DATA_Read+0x7fc>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	b25b      	sxtb	r3, r3
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	4a64      	ldr	r2, [pc, #400]	; (80020a0 <CAN1_DATA_Read+0x7fc>)
 8001f10:	7852      	ldrb	r2, [r2, #1]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	ee07 3a90 	vmov	s15, r3
 8001f18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f1c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001f20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f24:	4b66      	ldr	r3, [pc, #408]	; (80020c0 <CAN1_DATA_Read+0x81c>)
 8001f26:	edc3 7a00 	vstr	s15, [r3]

			if (tOil > 199)
 8001f2a:	4b65      	ldr	r3, [pc, #404]	; (80020c0 <CAN1_DATA_Read+0x81c>)
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80020c4 <CAN1_DATA_Read+0x820>
 8001f34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3c:	dd02      	ble.n	8001f44 <CAN1_DATA_Read+0x6a0>
				tOil = 199;
 8001f3e:	4b60      	ldr	r3, [pc, #384]	; (80020c0 <CAN1_DATA_Read+0x81c>)
 8001f40:	4a61      	ldr	r2, [pc, #388]	; (80020c8 <CAN1_DATA_Read+0x824>)
 8001f42:	601a      	str	r2, [r3, #0]


			CAR_Data.batteryVoltage.oldIntData = CAR_Data.batteryVoltage.intData;
 8001f44:	4b57      	ldr	r3, [pc, #348]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001f46:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8001f4a:	4a56      	ldr	r2, [pc, #344]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001f4c:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
			CAR_Data.batteryVoltage.oldFloatData = CAR_Data.batteryVoltage.floatData;
 8001f50:	4b54      	ldr	r3, [pc, #336]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001f52:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b52      	ldr	r3, [pc, #328]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001f5a:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8001f5e:	601a      	str	r2, [r3, #0]
			CAR_Data.batteryVoltage.oldTimeData = CAR_Data.batteryVoltage.lastTimeData;
 8001f60:	4b50      	ldr	r3, [pc, #320]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001f62:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 8001f66:	4a4f      	ldr	r2, [pc, #316]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001f68:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c

			if(CAR_Data.batteryVoltage.dataType == dataType_Int)
 8001f6c:	4b4d      	ldr	r3, [pc, #308]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001f6e:	f893 3604 	ldrb.w	r3, [r3, #1540]	; 0x604
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d12c      	bne.n	8001fd0 <CAN1_DATA_Read+0x72c>
			{
				CAR_Data.batteryVoltage.intData = ((int32_t)((int8_t)RxData_CAN1[6] << 8 | (uint8_t)RxData_CAN1[7])) * CAR_Data.batteryVoltage.gain + CAR_Data.batteryVoltage.offset;
 8001f76:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <CAN1_DATA_Read+0x7fc>)
 8001f78:	799b      	ldrb	r3, [r3, #6]
 8001f7a:	b25b      	sxtb	r3, r3
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	4a48      	ldr	r2, [pc, #288]	; (80020a0 <CAN1_DATA_Read+0x7fc>)
 8001f80:	79d2      	ldrb	r2, [r2, #7]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8c:	4b45      	ldr	r3, [pc, #276]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001f8e:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8001f92:	edd3 7a00 	vldr	s15, [r3]
 8001f96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f9a:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001f9c:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001fa0:	edd3 7a00 	vldr	s15, [r3]
 8001fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fac:	ee17 2a90 	vmov	r2, s15
 8001fb0:	4b3c      	ldr	r3, [pc, #240]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001fb2:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
				CAR_Data.batteryVoltage.floatData = CAR_Data.batteryVoltage.intData;
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001fb8:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8001fbc:	ee07 3a90 	vmov	s15, r3
 8001fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc4:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001fc6:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8001fca:	edc3 7a00 	vstr	s15, [r3]
 8001fce:	e029      	b.n	8002024 <CAN1_DATA_Read+0x780>
			}
			else
			{
				CAR_Data.batteryVoltage.floatData = (float) ((int32_t)((int8_t)RxData_CAN1[6] << 8 | (uint8_t)RxData_CAN1[7])) * CAR_Data.batteryVoltage.gain + CAR_Data.batteryVoltage.offset;
 8001fd0:	4b33      	ldr	r3, [pc, #204]	; (80020a0 <CAN1_DATA_Read+0x7fc>)
 8001fd2:	799b      	ldrb	r3, [r3, #6]
 8001fd4:	b25b      	sxtb	r3, r3
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	4a31      	ldr	r2, [pc, #196]	; (80020a0 <CAN1_DATA_Read+0x7fc>)
 8001fda:	79d2      	ldrb	r2, [r2, #7]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe6:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001fe8:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8001fec:	edd3 7a00 	vldr	s15, [r3]
 8001ff0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8001ff6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001ffa:	edd3 7a00 	vldr	s15, [r3]
 8001ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002002:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8002004:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8002008:	edc3 7a00 	vstr	s15, [r3]
				CAR_Data.batteryVoltage.intData = CAR_Data.batteryVoltage.floatData;
 800200c:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <CAN1_DATA_Read+0x800>)
 800200e:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800201a:	ee17 2a90 	vmov	r2, s15
 800201e:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8002020:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
			}
			CAR_Data.batteryVoltage.lastTimeData = millis;
 8002024:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <CAN1_DATA_Read+0x804>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1e      	ldr	r2, [pc, #120]	; (80020a4 <CAN1_DATA_Read+0x800>)
 800202a:	f8c2 3618 	str.w	r3, [r2, #1560]	; 0x618


			CAR_Data.gear.oldIntData = CAR_Data.gear.intData;
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8002030:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002034:	4a1b      	ldr	r2, [pc, #108]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8002036:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
			CAR_Data.gear.oldFloatData = CAR_Data.gear.floatData;
 800203a:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <CAN1_DATA_Read+0x800>)
 800203c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002040:	4a18      	ldr	r2, [pc, #96]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8002042:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
			CAR_Data.gear.oldTimeData = CAR_Data.gear.lastTimeData;
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8002048:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800204c:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <CAN1_DATA_Read+0x800>)
 800204e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

			if(CAR_Data.gear.dataType == dataType_Int)
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8002054:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002058:	2b00      	cmp	r3, #0
 800205a:	d137      	bne.n	80020cc <CAN1_DATA_Read+0x828>
			{
				CAR_Data.gear.intData = ((int32_t)(RxData_CAN1[4])) * CAR_Data.gear.gain + CAR_Data.gear.offset;
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <CAN1_DATA_Read+0x7fc>)
 800205e:	791b      	ldrb	r3, [r3, #4]
 8002060:	ee07 3a90 	vmov	s15, r3
 8002064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <CAN1_DATA_Read+0x800>)
 800206a:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 800206e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8002074:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8002078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002080:	ee17 2a90 	vmov	r2, s15
 8002084:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <CAN1_DATA_Read+0x800>)
 8002086:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				CAR_Data.gear.floatData = CAR_Data.gear.intData;
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <CAN1_DATA_Read+0x800>)
 800208c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002098:	4b02      	ldr	r3, [pc, #8]	; (80020a4 <CAN1_DATA_Read+0x800>)
 800209a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800209e:	e032      	b.n	8002106 <CAN1_DATA_Read+0x862>
 80020a0:	20000234 	.word	0x20000234
 80020a4:	2000041c 	.word	0x2000041c
 80020a8:	20006a98 	.word	0x20006a98
 80020ac:	2000020c 	.word	0x2000020c
 80020b0:	447a0000 	.word	0x447a0000
 80020b4:	20000008 	.word	0x20000008
 80020b8:	41980000 	.word	0x41980000
 80020bc:	20002d34 	.word	0x20002d34
 80020c0:	2000000c 	.word	0x2000000c
 80020c4:	43470000 	.word	0x43470000
 80020c8:	43470000 	.word	0x43470000
			}
			else
			{
				CAR_Data.gear.floatData = (float) ((int32_t)(RxData_CAN1[4])) * CAR_Data.gear.gain + CAR_Data.gear.offset;
 80020cc:	4b85      	ldr	r3, [pc, #532]	; (80022e4 <CAN1_DATA_Read+0xa40>)
 80020ce:	791b      	ldrb	r3, [r3, #4]
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d8:	4b83      	ldr	r3, [pc, #524]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 80020da:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80020de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020e2:	4b81      	ldr	r3, [pc, #516]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 80020e4:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80020e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ec:	4b7e      	ldr	r3, [pc, #504]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 80020ee:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
				CAR_Data.gear.intData = CAR_Data.gear.floatData;
 80020f2:	4b7d      	ldr	r3, [pc, #500]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 80020f4:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80020f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020fc:	ee17 2a90 	vmov	r2, s15
 8002100:	4b79      	ldr	r3, [pc, #484]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 8002102:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			}
			CAR_Data.gear.lastTimeData = millis;
 8002106:	4b79      	ldr	r3, [pc, #484]	; (80022ec <CAN1_DATA_Read+0xa48>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a77      	ldr	r2, [pc, #476]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 800210c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0




			CAR_Data.oilTemp.oldIntData = CAR_Data.oilTemp.intData;
 8002110:	4b75      	ldr	r3, [pc, #468]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 8002112:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
 8002116:	4a74      	ldr	r2, [pc, #464]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 8002118:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			CAR_Data.oilTemp.oldFloatData = CAR_Data.oilTemp.floatData;
 800211c:	4b72      	ldr	r3, [pc, #456]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 800211e:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b70      	ldr	r3, [pc, #448]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 8002126:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 800212a:	601a      	str	r2, [r3, #0]
			CAR_Data.oilTemp.oldTimeData = CAR_Data.oilTemp.lastTimeData;
 800212c:	4b6e      	ldr	r3, [pc, #440]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 800212e:	f8d3 3534 	ldr.w	r3, [r3, #1332]	; 0x534
 8002132:	4a6d      	ldr	r2, [pc, #436]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 8002134:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538

			if(CAR_Data.oilTemp.dataType == dataType_Int)
 8002138:	4b6b      	ldr	r3, [pc, #428]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 800213a:	f893 3520 	ldrb.w	r3, [r3, #1312]	; 0x520
 800213e:	2b00      	cmp	r3, #0
 8002140:	d12c      	bne.n	800219c <CAN1_DATA_Read+0x8f8>
			{
				CAR_Data.oilTemp.intData = ((int32_t)((int8_t)RxData_CAN1[0] << 8 | (uint8_t)RxData_CAN1[1])) * CAR_Data.oilTemp.gain + CAR_Data.oilTemp.offset;
 8002142:	4b68      	ldr	r3, [pc, #416]	; (80022e4 <CAN1_DATA_Read+0xa40>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	b25b      	sxtb	r3, r3
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	4a66      	ldr	r2, [pc, #408]	; (80022e4 <CAN1_DATA_Read+0xa40>)
 800214c:	7852      	ldrb	r2, [r2, #1]
 800214e:	4313      	orrs	r3, r2
 8002150:	ee07 3a90 	vmov	s15, r3
 8002154:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002158:	4b63      	ldr	r3, [pc, #396]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 800215a:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 800215e:	edd3 7a00 	vldr	s15, [r3]
 8002162:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002166:	4b60      	ldr	r3, [pc, #384]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 8002168:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 800216c:	edd3 7a00 	vldr	s15, [r3]
 8002170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002178:	ee17 2a90 	vmov	r2, s15
 800217c:	4b5a      	ldr	r3, [pc, #360]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 800217e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
				CAR_Data.oilTemp.floatData = CAR_Data.oilTemp.intData;
 8002182:	4b59      	ldr	r3, [pc, #356]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 8002184:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
 8002188:	ee07 3a90 	vmov	s15, r3
 800218c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002190:	4b55      	ldr	r3, [pc, #340]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 8002192:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8002196:	edc3 7a00 	vstr	s15, [r3]
 800219a:	e029      	b.n	80021f0 <CAN1_DATA_Read+0x94c>
			}
			else
			{
				CAR_Data.oilTemp.floatData = (float) ((int32_t)((int8_t)RxData_CAN1[0] << 8 | (uint8_t)RxData_CAN1[1])) * CAR_Data.oilTemp.gain + CAR_Data.oilTemp.offset;
 800219c:	4b51      	ldr	r3, [pc, #324]	; (80022e4 <CAN1_DATA_Read+0xa40>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	b25b      	sxtb	r3, r3
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	4a4f      	ldr	r2, [pc, #316]	; (80022e4 <CAN1_DATA_Read+0xa40>)
 80021a6:	7852      	ldrb	r2, [r2, #1]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021b2:	4b4d      	ldr	r3, [pc, #308]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 80021b4:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021c0:	4b49      	ldr	r3, [pc, #292]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 80021c2:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 80021c6:	edd3 7a00 	vldr	s15, [r3]
 80021ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ce:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 80021d0:	f203 5324 	addw	r3, r3, #1316	; 0x524
 80021d4:	edc3 7a00 	vstr	s15, [r3]
				CAR_Data.oilTemp.intData = CAR_Data.oilTemp.floatData;
 80021d8:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 80021da:	f203 5324 	addw	r3, r3, #1316	; 0x524
 80021de:	edd3 7a00 	vldr	s15, [r3]
 80021e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021e6:	ee17 2a90 	vmov	r2, s15
 80021ea:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 80021ec:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
			}
			CAR_Data.oilTemp.lastTimeData = millis;
 80021f0:	4b3e      	ldr	r3, [pc, #248]	; (80022ec <CAN1_DATA_Read+0xa48>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a3c      	ldr	r2, [pc, #240]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 80021f6:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
		}

		if (pRxHeader_CAN1.StdId == 0x220)
 80021fa:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <CAN1_DATA_Read+0xa4c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
 8002202:	d113      	bne.n	800222c <CAN1_DATA_Read+0x988>
		{
			launchControlStatus = RxData_CAN1[3];
 8002204:	4b37      	ldr	r3, [pc, #220]	; (80022e4 <CAN1_DATA_Read+0xa40>)
 8002206:	78db      	ldrb	r3, [r3, #3]
 8002208:	461a      	mov	r2, r3
 800220a:	4b3a      	ldr	r3, [pc, #232]	; (80022f4 <CAN1_DATA_Read+0xa50>)
 800220c:	601a      	str	r2, [r3, #0]

			if (launchControlStatus >= 2 && launchControlStatus <= 4)
 800220e:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <CAN1_DATA_Read+0xa50>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b01      	cmp	r3, #1
 8002214:	dd07      	ble.n	8002226 <CAN1_DATA_Read+0x982>
 8002216:	4b37      	ldr	r3, [pc, #220]	; (80022f4 <CAN1_DATA_Read+0xa50>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b04      	cmp	r3, #4
 800221c:	dc03      	bgt.n	8002226 <CAN1_DATA_Read+0x982>
				launchControlStatus = 1;
 800221e:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <CAN1_DATA_Read+0xa50>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e002      	b.n	800222c <CAN1_DATA_Read+0x988>
			else
				launchControlStatus = 0;
 8002226:	4b33      	ldr	r3, [pc, #204]	; (80022f4 <CAN1_DATA_Read+0xa50>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
		}

		if (pRxHeader_CAN1.StdId == 0x208)
 800222c:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <CAN1_DATA_Read+0xa4c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8002234:	f040 8147 	bne.w	80024c6 <CAN1_DATA_Read+0xc22>
		{
			tAir = (float) ((int32_t)((int8_t)RxData_CAN1[4] << 8 | (uint8_t)RxData_CAN1[5])) / 10;
 8002238:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <CAN1_DATA_Read+0xa40>)
 800223a:	791b      	ldrb	r3, [r3, #4]
 800223c:	b25b      	sxtb	r3, r3
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	4a28      	ldr	r2, [pc, #160]	; (80022e4 <CAN1_DATA_Read+0xa40>)
 8002242:	7952      	ldrb	r2, [r2, #5]
 8002244:	4313      	orrs	r3, r2
 8002246:	ee07 3a90 	vmov	s15, r3
 800224a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800224e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002256:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <CAN1_DATA_Read+0xa54>)
 8002258:	edc3 7a00 	vstr	s15, [r3]

			if (tAir > 199)	tAir = 199;
 800225c:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <CAN1_DATA_Read+0xa54>)
 800225e:	edd3 7a00 	vldr	s15, [r3]
 8002262:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80022fc <CAN1_DATA_Read+0xa58>
 8002266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800226a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226e:	dd02      	ble.n	8002276 <CAN1_DATA_Read+0x9d2>
 8002270:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <CAN1_DATA_Read+0xa54>)
 8002272:	4a23      	ldr	r2, [pc, #140]	; (8002300 <CAN1_DATA_Read+0xa5c>)
 8002274:	601a      	str	r2, [r3, #0]

			CAR_Data.airTemp.oldIntData = CAR_Data.airTemp.intData;
 8002276:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 8002278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800227a:	4a1b      	ldr	r2, [pc, #108]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 800227c:	6713      	str	r3, [r2, #112]	; 0x70
			CAR_Data.airTemp.oldFloatData = CAR_Data.airTemp.floatData;
 800227e:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 8002280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002282:	4a19      	ldr	r2, [pc, #100]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 8002284:	66d3      	str	r3, [r2, #108]	; 0x6c
			CAR_Data.airTemp.oldTimeData = CAR_Data.airTemp.lastTimeData;
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 8002288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800228a:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 800228c:	6793      	str	r3, [r2, #120]	; 0x78

			if(CAR_Data.airTemp.dataType == dataType_Int)
 800228e:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 8002290:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002294:	2b00      	cmp	r3, #0
 8002296:	d135      	bne.n	8002304 <CAN1_DATA_Read+0xa60>
			{
				CAR_Data.airTemp.intData = ((int32_t)((int8_t)RxData_CAN1[4] << 8 | (uint8_t)RxData_CAN1[5])) * CAR_Data.airTemp.gain + CAR_Data.airTemp.offset;
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <CAN1_DATA_Read+0xa40>)
 800229a:	791b      	ldrb	r3, [r3, #4]
 800229c:	b25b      	sxtb	r3, r3
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <CAN1_DATA_Read+0xa40>)
 80022a2:	7952      	ldrb	r2, [r2, #5]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 80022b0:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80022b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 80022ba:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80022be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c6:	ee17 2a90 	vmov	r2, s15
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 80022cc:	669a      	str	r2, [r3, #104]	; 0x68
				CAR_Data.airTemp.floatData = CAR_Data.airTemp.intData;
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 80022d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022da:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <CAN1_DATA_Read+0xa44>)
 80022dc:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 80022e0:	e031      	b.n	8002346 <CAN1_DATA_Read+0xaa2>
 80022e2:	bf00      	nop
 80022e4:	20000234 	.word	0x20000234
 80022e8:	2000041c 	.word	0x2000041c
 80022ec:	20006a98 	.word	0x20006a98
 80022f0:	2000020c 	.word	0x2000020c
 80022f4:	20002d44 	.word	0x20002d44
 80022f8:	20000014 	.word	0x20000014
 80022fc:	43470000 	.word	0x43470000
 8002300:	43470000 	.word	0x43470000
			}
			else
			{
				CAR_Data.airTemp.floatData = (float) ((int32_t)((int8_t)RxData_CAN1[4] << 8 | (uint8_t)RxData_CAN1[5])) * CAR_Data.airTemp.gain + CAR_Data.airTemp.offset;
 8002304:	4b96      	ldr	r3, [pc, #600]	; (8002560 <CAN1_DATA_Read+0xcbc>)
 8002306:	791b      	ldrb	r3, [r3, #4]
 8002308:	b25b      	sxtb	r3, r3
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	4a94      	ldr	r2, [pc, #592]	; (8002560 <CAN1_DATA_Read+0xcbc>)
 800230e:	7952      	ldrb	r2, [r2, #5]
 8002310:	4313      	orrs	r3, r2
 8002312:	ee07 3a90 	vmov	s15, r3
 8002316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800231a:	4b92      	ldr	r3, [pc, #584]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 800231c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8002320:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002324:	4b8f      	ldr	r3, [pc, #572]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 8002326:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800232a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800232e:	4b8d      	ldr	r3, [pc, #564]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 8002330:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
				CAR_Data.airTemp.intData = CAR_Data.airTemp.floatData;
 8002334:	4b8b      	ldr	r3, [pc, #556]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 8002336:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800233a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800233e:	ee17 2a90 	vmov	r2, s15
 8002342:	4b88      	ldr	r3, [pc, #544]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 8002344:	669a      	str	r2, [r3, #104]	; 0x68
			}
			CAR_Data.airTemp.lastTimeData = millis;
 8002346:	4b88      	ldr	r3, [pc, #544]	; (8002568 <CAN1_DATA_Read+0xcc4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a86      	ldr	r2, [pc, #536]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 800234c:	6753      	str	r3, [r2, #116]	; 0x74



			//pFuel = (float) (RxData_CAN1[2] << 8 | RxData_CAN1[3]) / 1000;

			tempDataFloat = (float) ((int32_t)((int8_t)RxData_CAN1[2] << 8 | (uint8_t)RxData_CAN1[3])) / 1000;
 800234e:	4b84      	ldr	r3, [pc, #528]	; (8002560 <CAN1_DATA_Read+0xcbc>)
 8002350:	789b      	ldrb	r3, [r3, #2]
 8002352:	b25b      	sxtb	r3, r3
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	4a82      	ldr	r2, [pc, #520]	; (8002560 <CAN1_DATA_Read+0xcbc>)
 8002358:	78d2      	ldrb	r2, [r2, #3]
 800235a:	4313      	orrs	r3, r2
 800235c:	ee07 3a90 	vmov	s15, r3
 8002360:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002364:	eddf 6a81 	vldr	s13, [pc, #516]	; 800256c <CAN1_DATA_Read+0xcc8>
 8002368:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800236c:	edc7 7a03 	vstr	s15, [r7, #12]

			if(tempDataFloat <= CAR_Data.fuelPressure.absoluteMaxValue)
 8002370:	4b7c      	ldr	r3, [pc, #496]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 8002372:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8002376:	edd3 7a00 	vldr	s15, [r3]
 800237a:	ed97 7a03 	vldr	s14, [r7, #12]
 800237e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002386:	d802      	bhi.n	800238e <CAN1_DATA_Read+0xaea>
				pFuel = tempDataFloat;
 8002388:	4a79      	ldr	r2, [pc, #484]	; (8002570 <CAN1_DATA_Read+0xccc>)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6013      	str	r3, [r2, #0]


			float tmpfuelPressure = ((float) ((uint32_t)((int8_t)RxData_CAN1[2] << 8 | (uint8_t)RxData_CAN1[3])) * CAR_Data.fuelPressure.gain + CAR_Data.fuelPressure.offset);
 800238e:	4b74      	ldr	r3, [pc, #464]	; (8002560 <CAN1_DATA_Read+0xcbc>)
 8002390:	789b      	ldrb	r3, [r3, #2]
 8002392:	b25b      	sxtb	r3, r3
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	4a72      	ldr	r2, [pc, #456]	; (8002560 <CAN1_DATA_Read+0xcbc>)
 8002398:	78d2      	ldrb	r2, [r2, #3]
 800239a:	4313      	orrs	r3, r2
 800239c:	ee07 3a90 	vmov	s15, r3
 80023a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023a4:	4b6f      	ldr	r3, [pc, #444]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 80023a6:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023b2:	4b6c      	ldr	r3, [pc, #432]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 80023b4:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c0:	edc7 7a01 	vstr	s15, [r7, #4]

			if(tmpfuelPressure <= CAR_Data.fuelPressure.absoluteMaxValue)
 80023c4:	4b67      	ldr	r3, [pc, #412]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 80023c6:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80023ca:	edd3 7a00 	vldr	s15, [r3]
 80023ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80023d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023da:	d874      	bhi.n	80024c6 <CAN1_DATA_Read+0xc22>
			{
				CAR_Data.fuelPressure.oldIntData = CAR_Data.fuelPressure.intData;
 80023dc:	4b61      	ldr	r3, [pc, #388]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 80023de:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 80023e2:	4a60      	ldr	r2, [pc, #384]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 80023e4:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
				CAR_Data.fuelPressure.oldFloatData = CAR_Data.fuelPressure.floatData;
 80023e8:	4b5e      	ldr	r3, [pc, #376]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 80023ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b5c      	ldr	r3, [pc, #368]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 80023f2:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80023f6:	601a      	str	r2, [r3, #0]
				CAR_Data.fuelPressure.oldTimeData = CAR_Data.fuelPressure.lastTimeData;
 80023f8:	4b5a      	ldr	r3, [pc, #360]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 80023fa:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80023fe:	4a59      	ldr	r2, [pc, #356]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 8002400:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454


				if(CAR_Data.fuelPressure.dataType == dataType_Int)
 8002404:	4b57      	ldr	r3, [pc, #348]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 8002406:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800240a:	2b00      	cmp	r3, #0
 800240c:	d12c      	bne.n	8002468 <CAN1_DATA_Read+0xbc4>
				{
					CAR_Data.fuelPressure.intData = ((int32_t)((int8_t)RxData_CAN1[2] << 8 | (uint8_t)RxData_CAN1[3])) * CAR_Data.fuelPressure.gain + CAR_Data.fuelPressure.offset;
 800240e:	4b54      	ldr	r3, [pc, #336]	; (8002560 <CAN1_DATA_Read+0xcbc>)
 8002410:	789b      	ldrb	r3, [r3, #2]
 8002412:	b25b      	sxtb	r3, r3
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	4a52      	ldr	r2, [pc, #328]	; (8002560 <CAN1_DATA_Read+0xcbc>)
 8002418:	78d2      	ldrb	r2, [r2, #3]
 800241a:	4313      	orrs	r3, r2
 800241c:	ee07 3a90 	vmov	s15, r3
 8002420:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002424:	4b4f      	ldr	r3, [pc, #316]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 8002426:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002432:	4b4c      	ldr	r3, [pc, #304]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 8002434:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002444:	ee17 2a90 	vmov	r2, s15
 8002448:	4b46      	ldr	r3, [pc, #280]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 800244a:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
					CAR_Data.fuelPressure.floatData = CAR_Data.fuelPressure.intData;
 800244e:	4b45      	ldr	r3, [pc, #276]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 8002450:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 8002454:	ee07 3a90 	vmov	s15, r3
 8002458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800245c:	4b41      	ldr	r3, [pc, #260]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 800245e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002462:	edc3 7a00 	vstr	s15, [r3]
 8002466:	e029      	b.n	80024bc <CAN1_DATA_Read+0xc18>
				}
				else
				{
					CAR_Data.fuelPressure.floatData = (float) ((int32_t)((int8_t)RxData_CAN1[2] << 8 | (uint8_t)RxData_CAN1[3])) * CAR_Data.fuelPressure.gain + CAR_Data.fuelPressure.offset;
 8002468:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <CAN1_DATA_Read+0xcbc>)
 800246a:	789b      	ldrb	r3, [r3, #2]
 800246c:	b25b      	sxtb	r3, r3
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	4a3b      	ldr	r2, [pc, #236]	; (8002560 <CAN1_DATA_Read+0xcbc>)
 8002472:	78d2      	ldrb	r2, [r2, #3]
 8002474:	4313      	orrs	r3, r2
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800247e:	4b39      	ldr	r3, [pc, #228]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 8002480:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8002484:	edd3 7a00 	vldr	s15, [r3]
 8002488:	ee27 7a27 	vmul.f32	s14, s14, s15
 800248c:	4b35      	ldr	r3, [pc, #212]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 800248e:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800249a:	4b32      	ldr	r3, [pc, #200]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 800249c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80024a0:	edc3 7a00 	vstr	s15, [r3]
					CAR_Data.fuelPressure.intData = CAR_Data.fuelPressure.floatData;
 80024a4:	4b2f      	ldr	r3, [pc, #188]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 80024a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b2:	ee17 2a90 	vmov	r2, s15
 80024b6:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 80024b8:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
				}

				CAR_Data.fuelPressure.lastTimeData = millis;
 80024bc:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <CAN1_DATA_Read+0xcc4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a28      	ldr	r2, [pc, #160]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 80024c2:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450
			}
		}

		if (pRxHeader_CAN1.StdId == 0x20C)
 80024c6:	4b2b      	ldr	r3, [pc, #172]	; (8002574 <CAN1_DATA_Read+0xcd0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80024ce:	f040 81a4 	bne.w	800281a <CAN1_DATA_Read+0xf76>
		{
			pedal = (float) ((int8_t) RxData_CAN1[0]); //signed byte (va da 0 a 100 senza decimali)
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <CAN1_DATA_Read+0xcbc>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	b25b      	sxtb	r3, r3
 80024d8:	ee07 3a90 	vmov	s15, r3
 80024dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024e4:	ee17 2a90 	vmov	r2, s15
 80024e8:	4b23      	ldr	r3, [pc, #140]	; (8002578 <CAN1_DATA_Read+0xcd4>)
 80024ea:	601a      	str	r2, [r3, #0]

			CAR_Data.pedal.oldIntData = CAR_Data.pedal.intData;
 80024ec:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 80024ee:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80024f2:	4a1c      	ldr	r2, [pc, #112]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 80024f4:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
			CAR_Data.pedal.oldFloatData = CAR_Data.pedal.floatData;
 80024f8:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 80024fa:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80024fe:	4a19      	ldr	r2, [pc, #100]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 8002500:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
			CAR_Data.pedal.oldTimeData = CAR_Data.pedal.lastTimeData;
 8002504:	4b17      	ldr	r3, [pc, #92]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 8002506:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800250a:	4a16      	ldr	r2, [pc, #88]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 800250c:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8

			if(CAR_Data.pedal.dataType == dataType_Int)
 8002510:	4b14      	ldr	r3, [pc, #80]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 8002512:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8002516:	2b00      	cmp	r3, #0
 8002518:	d130      	bne.n	800257c <CAN1_DATA_Read+0xcd8>
			{
				CAR_Data.pedal.intData = ((int32_t)(RxData_CAN1[0])) * CAR_Data.pedal.gain + CAR_Data.pedal.offset;
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <CAN1_DATA_Read+0xcbc>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002526:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 8002528:	edd3 7a6b 	vldr	s15, [r3, #428]	; 0x1ac
 800252c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 8002532:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 8002536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800253e:	ee17 2a90 	vmov	r2, s15
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 8002544:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
				CAR_Data.pedal.floatData = CAR_Data.pedal.intData;
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 800254a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002556:	4b03      	ldr	r3, [pc, #12]	; (8002564 <CAN1_DATA_Read+0xcc0>)
 8002558:	edc3 7a65 	vstr	s15, [r3, #404]	; 0x194
 800255c:	e02b      	b.n	80025b6 <CAN1_DATA_Read+0xd12>
 800255e:	bf00      	nop
 8002560:	20000234 	.word	0x20000234
 8002564:	2000041c 	.word	0x2000041c
 8002568:	20006a98 	.word	0x20006a98
 800256c:	447a0000 	.word	0x447a0000
 8002570:	20000030 	.word	0x20000030
 8002574:	2000020c 	.word	0x2000020c
 8002578:	20000028 	.word	0x20000028
			}
			else
			{
				CAR_Data.pedal.floatData = (float) ((int32_t)(RxData_CAN1[0])) * CAR_Data.pedal.gain + CAR_Data.pedal.offset;
 800257c:	4bb3      	ldr	r3, [pc, #716]	; (800284c <CAN1_DATA_Read+0xfa8>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	ee07 3a90 	vmov	s15, r3
 8002584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002588:	4bb1      	ldr	r3, [pc, #708]	; (8002850 <CAN1_DATA_Read+0xfac>)
 800258a:	edd3 7a6b 	vldr	s15, [r3, #428]	; 0x1ac
 800258e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002592:	4baf      	ldr	r3, [pc, #700]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002594:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 8002598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800259c:	4bac      	ldr	r3, [pc, #688]	; (8002850 <CAN1_DATA_Read+0xfac>)
 800259e:	edc3 7a65 	vstr	s15, [r3, #404]	; 0x194
				CAR_Data.pedal.intData = CAR_Data.pedal.floatData;
 80025a2:	4bab      	ldr	r3, [pc, #684]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80025a4:	edd3 7a65 	vldr	s15, [r3, #404]	; 0x194
 80025a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ac:	ee17 2a90 	vmov	r2, s15
 80025b0:	4ba7      	ldr	r3, [pc, #668]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80025b2:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
			}
			CAR_Data.pedal.lastTimeData = millis;
 80025b6:	4ba7      	ldr	r3, [pc, #668]	; (8002854 <CAN1_DATA_Read+0xfb0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4aa5      	ldr	r2, [pc, #660]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80025bc:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4


			slip = RxData_CAN1[1];
 80025c0:	4ba2      	ldr	r3, [pc, #648]	; (800284c <CAN1_DATA_Read+0xfa8>)
 80025c2:	785b      	ldrb	r3, [r3, #1]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4ba4      	ldr	r3, [pc, #656]	; (8002858 <CAN1_DATA_Read+0xfb4>)
 80025c8:	601a      	str	r2, [r3, #0]

			CAR_Data.slip.oldIntData = CAR_Data.slip.intData;
 80025ca:	4ba1      	ldr	r3, [pc, #644]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80025cc:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
 80025d0:	4a9f      	ldr	r2, [pc, #636]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80025d2:	f8c2 3368 	str.w	r3, [r2, #872]	; 0x368
			CAR_Data.slip.oldFloatData = CAR_Data.slip.floatData;
 80025d6:	4b9e      	ldr	r3, [pc, #632]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80025d8:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 80025dc:	4a9c      	ldr	r2, [pc, #624]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80025de:	f8c2 3364 	str.w	r3, [r2, #868]	; 0x364
			CAR_Data.slip.oldTimeData = CAR_Data.slip.lastTimeData;
 80025e2:	4b9b      	ldr	r3, [pc, #620]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80025e4:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80025e8:	4a99      	ldr	r2, [pc, #612]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80025ea:	f8c2 3370 	str.w	r3, [r2, #880]	; 0x370

			if(CAR_Data.slip.dataType == dataType_Int)
 80025ee:	4b98      	ldr	r3, [pc, #608]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80025f0:	f893 3358 	ldrb.w	r3, [r3, #856]	; 0x358
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d121      	bne.n	800263c <CAN1_DATA_Read+0xd98>
			{
				CAR_Data.slip.intData = ((int32_t)(RxData_CAN1[1])) * CAR_Data.slip.gain + CAR_Data.slip.offset;
 80025f8:	4b94      	ldr	r3, [pc, #592]	; (800284c <CAN1_DATA_Read+0xfa8>)
 80025fa:	785b      	ldrb	r3, [r3, #1]
 80025fc:	ee07 3a90 	vmov	s15, r3
 8002600:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002604:	4b92      	ldr	r3, [pc, #584]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002606:	edd3 7add 	vldr	s15, [r3, #884]	; 0x374
 800260a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800260e:	4b90      	ldr	r3, [pc, #576]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002610:	edd3 7ade 	vldr	s15, [r3, #888]	; 0x378
 8002614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002618:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800261c:	ee17 2a90 	vmov	r2, s15
 8002620:	4b8b      	ldr	r3, [pc, #556]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002622:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
				CAR_Data.slip.floatData = CAR_Data.slip.intData;
 8002626:	4b8a      	ldr	r3, [pc, #552]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002628:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002634:	4b86      	ldr	r3, [pc, #536]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002636:	edc3 7ad7 	vstr	s15, [r3, #860]	; 0x35c
 800263a:	e01c      	b.n	8002676 <CAN1_DATA_Read+0xdd2>
			}
			else
			{
				CAR_Data.slip.floatData = (float) ((int32_t)(RxData_CAN1[1])) * CAR_Data.slip.gain + CAR_Data.slip.offset;
 800263c:	4b83      	ldr	r3, [pc, #524]	; (800284c <CAN1_DATA_Read+0xfa8>)
 800263e:	785b      	ldrb	r3, [r3, #1]
 8002640:	ee07 3a90 	vmov	s15, r3
 8002644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002648:	4b81      	ldr	r3, [pc, #516]	; (8002850 <CAN1_DATA_Read+0xfac>)
 800264a:	edd3 7add 	vldr	s15, [r3, #884]	; 0x374
 800264e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002652:	4b7f      	ldr	r3, [pc, #508]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002654:	edd3 7ade 	vldr	s15, [r3, #888]	; 0x378
 8002658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800265c:	4b7c      	ldr	r3, [pc, #496]	; (8002850 <CAN1_DATA_Read+0xfac>)
 800265e:	edc3 7ad7 	vstr	s15, [r3, #860]	; 0x35c
				CAR_Data.slip.intData = CAR_Data.slip.floatData;
 8002662:	4b7b      	ldr	r3, [pc, #492]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002664:	edd3 7ad7 	vldr	s15, [r3, #860]	; 0x35c
 8002668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800266c:	ee17 2a90 	vmov	r2, s15
 8002670:	4b77      	ldr	r3, [pc, #476]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002672:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
			}
			CAR_Data.slip.lastTimeData = millis;
 8002676:	4b77      	ldr	r3, [pc, #476]	; (8002854 <CAN1_DATA_Read+0xfb0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a75      	ldr	r2, [pc, #468]	; (8002850 <CAN1_DATA_Read+0xfac>)
 800267c:	f8c2 336c 	str.w	r3, [r2, #876]	; 0x36c



			speed = (float) ((int32_t)((int8_t)RxData_CAN1[2] << 8 | (uint8_t)RxData_CAN1[3])) / 10;// è SPEED
 8002680:	4b72      	ldr	r3, [pc, #456]	; (800284c <CAN1_DATA_Read+0xfa8>)
 8002682:	789b      	ldrb	r3, [r3, #2]
 8002684:	b25b      	sxtb	r3, r3
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	4a70      	ldr	r2, [pc, #448]	; (800284c <CAN1_DATA_Read+0xfa8>)
 800268a:	78d2      	ldrb	r2, [r2, #3]
 800268c:	4313      	orrs	r3, r2
 800268e:	ee07 3a90 	vmov	s15, r3
 8002692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002696:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800269a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800269e:	4b6f      	ldr	r3, [pc, #444]	; (800285c <CAN1_DATA_Read+0xfb8>)
 80026a0:	edc3 7a00 	vstr	s15, [r3]

			CAR_Data.speed.oldIntData = CAR_Data.speed.intData;
 80026a4:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	4a69      	ldr	r2, [pc, #420]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80026aa:	6253      	str	r3, [r2, #36]	; 0x24
			CAR_Data.speed.oldFloatData = CAR_Data.speed.floatData;
 80026ac:	4b68      	ldr	r3, [pc, #416]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	4a67      	ldr	r2, [pc, #412]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80026b2:	6213      	str	r3, [r2, #32]
			CAR_Data.speed.oldTimeData = CAR_Data.speed.lastTimeData;
 80026b4:	4b66      	ldr	r3, [pc, #408]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	4a65      	ldr	r2, [pc, #404]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80026ba:	62d3      	str	r3, [r2, #44]	; 0x2c

			if(CAR_Data.speed.dataType == dataType_Int)
 80026bc:	4b64      	ldr	r3, [pc, #400]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80026be:	7d1b      	ldrb	r3, [r3, #20]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d124      	bne.n	800270e <CAN1_DATA_Read+0xe6a>
			{
				CAR_Data.speed.intData = ((int32_t)((int8_t)RxData_CAN1[2] << 8 | (uint8_t)RxData_CAN1[3])) * CAR_Data.speed.gain + CAR_Data.speed.offset;
 80026c4:	4b61      	ldr	r3, [pc, #388]	; (800284c <CAN1_DATA_Read+0xfa8>)
 80026c6:	789b      	ldrb	r3, [r3, #2]
 80026c8:	b25b      	sxtb	r3, r3
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	4a5f      	ldr	r2, [pc, #380]	; (800284c <CAN1_DATA_Read+0xfa8>)
 80026ce:	78d2      	ldrb	r2, [r2, #3]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026da:	4b5d      	ldr	r3, [pc, #372]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80026dc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80026e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026e4:	4b5a      	ldr	r3, [pc, #360]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80026e6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80026ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f2:	ee17 2a90 	vmov	r2, s15
 80026f6:	4b56      	ldr	r3, [pc, #344]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80026f8:	61da      	str	r2, [r3, #28]
				CAR_Data.speed.floatData = CAR_Data.speed.intData;
 80026fa:	4b55      	ldr	r3, [pc, #340]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	ee07 3a90 	vmov	s15, r3
 8002702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002706:	4b52      	ldr	r3, [pc, #328]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002708:	edc3 7a06 	vstr	s15, [r3, #24]
 800270c:	e020      	b.n	8002750 <CAN1_DATA_Read+0xeac>
			}
			else
			{
				CAR_Data.speed.floatData = (float) ((int32_t)((int8_t)RxData_CAN1[2] << 8 | (uint8_t)RxData_CAN1[3])) * CAR_Data.speed.gain + CAR_Data.speed.offset;
 800270e:	4b4f      	ldr	r3, [pc, #316]	; (800284c <CAN1_DATA_Read+0xfa8>)
 8002710:	789b      	ldrb	r3, [r3, #2]
 8002712:	b25b      	sxtb	r3, r3
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	4a4d      	ldr	r2, [pc, #308]	; (800284c <CAN1_DATA_Read+0xfa8>)
 8002718:	78d2      	ldrb	r2, [r2, #3]
 800271a:	4313      	orrs	r3, r2
 800271c:	ee07 3a90 	vmov	s15, r3
 8002720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002724:	4b4a      	ldr	r3, [pc, #296]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002726:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800272a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800272e:	4b48      	ldr	r3, [pc, #288]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002730:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002738:	4b45      	ldr	r3, [pc, #276]	; (8002850 <CAN1_DATA_Read+0xfac>)
 800273a:	edc3 7a06 	vstr	s15, [r3, #24]
				CAR_Data.speed.intData = CAR_Data.speed.floatData;
 800273e:	4b44      	ldr	r3, [pc, #272]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002740:	edd3 7a06 	vldr	s15, [r3, #24]
 8002744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002748:	ee17 2a90 	vmov	r2, s15
 800274c:	4b40      	ldr	r3, [pc, #256]	; (8002850 <CAN1_DATA_Read+0xfac>)
 800274e:	61da      	str	r2, [r3, #28]
			}
			CAR_Data.speed.lastTimeData = millis;
 8002750:	4b40      	ldr	r3, [pc, #256]	; (8002854 <CAN1_DATA_Read+0xfb0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a3e      	ldr	r2, [pc, #248]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002756:	6293      	str	r3, [r2, #40]	; 0x28



			//brake = (float) ((int8_t)RxData_CAN1[4]);
			brake = ((int8_t)RxData_CAN1[4]);
 8002758:	4b3c      	ldr	r3, [pc, #240]	; (800284c <CAN1_DATA_Read+0xfa8>)
 800275a:	791b      	ldrb	r3, [r3, #4]
 800275c:	b25b      	sxtb	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	4b3f      	ldr	r3, [pc, #252]	; (8002860 <CAN1_DATA_Read+0xfbc>)
 8002762:	601a      	str	r2, [r3, #0]

			CAR_Data.brake.oldIntData = CAR_Data.brake.intData;
 8002764:	4b3a      	ldr	r3, [pc, #232]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002766:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800276a:	4a39      	ldr	r2, [pc, #228]	; (8002850 <CAN1_DATA_Read+0xfac>)
 800276c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
			CAR_Data.brake.oldFloatData = CAR_Data.brake.floatData;
 8002770:	4b37      	ldr	r3, [pc, #220]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002772:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8002776:	4a36      	ldr	r2, [pc, #216]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002778:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
			CAR_Data.brake.oldTimeData = CAR_Data.brake.lastTimeData;
 800277c:	4b34      	ldr	r3, [pc, #208]	; (8002850 <CAN1_DATA_Read+0xfac>)
 800277e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002782:	4a33      	ldr	r2, [pc, #204]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002784:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110

			if(CAR_Data.brake.dataType == dataType_Int)
 8002788:	4b31      	ldr	r3, [pc, #196]	; (8002850 <CAN1_DATA_Read+0xfac>)
 800278a:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d121      	bne.n	80027d6 <CAN1_DATA_Read+0xf32>
			{
				CAR_Data.brake.intData = ((int32_t)(RxData_CAN1[4])) * CAR_Data.brake.gain + CAR_Data.brake.offset;
 8002792:	4b2e      	ldr	r3, [pc, #184]	; (800284c <CAN1_DATA_Read+0xfa8>)
 8002794:	791b      	ldrb	r3, [r3, #4]
 8002796:	ee07 3a90 	vmov	s15, r3
 800279a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800279e:	4b2c      	ldr	r3, [pc, #176]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80027a0:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 80027a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a8:	4b29      	ldr	r3, [pc, #164]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80027aa:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 80027ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027b6:	ee17 2a90 	vmov	r2, s15
 80027ba:	4b25      	ldr	r3, [pc, #148]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80027bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
				CAR_Data.brake.floatData = CAR_Data.brake.intData;
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80027c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ce:	4b20      	ldr	r3, [pc, #128]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80027d0:	edc3 7a3f 	vstr	s15, [r3, #252]	; 0xfc
 80027d4:	e01c      	b.n	8002810 <CAN1_DATA_Read+0xf6c>
			}
			else
			{
				CAR_Data.brake.floatData = (float) ((int32_t)(RxData_CAN1[4])) * CAR_Data.brake.gain + CAR_Data.brake.offset;
 80027d6:	4b1d      	ldr	r3, [pc, #116]	; (800284c <CAN1_DATA_Read+0xfa8>)
 80027d8:	791b      	ldrb	r3, [r3, #4]
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027e2:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80027e4:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 80027e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ec:	4b18      	ldr	r3, [pc, #96]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80027ee:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 80027f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f6:	4b16      	ldr	r3, [pc, #88]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80027f8:	edc3 7a3f 	vstr	s15, [r3, #252]	; 0xfc
				CAR_Data.brake.intData = CAR_Data.brake.floatData;
 80027fc:	4b14      	ldr	r3, [pc, #80]	; (8002850 <CAN1_DATA_Read+0xfac>)
 80027fe:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8002802:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002806:	ee17 2a90 	vmov	r2, s15
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <CAN1_DATA_Read+0xfac>)
 800280c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			}
			CAR_Data.brake.lastTimeData = millis;
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <CAN1_DATA_Read+0xfb0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <CAN1_DATA_Read+0xfac>)
 8002816:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c


		}

		if (pRxHeader_CAN1.StdId == 0x321) //DATA FROM DRS
 800281a:	4b12      	ldr	r3, [pc, #72]	; (8002864 <CAN1_DATA_Read+0xfc0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f240 3221 	movw	r2, #801	; 0x321
 8002822:	4293      	cmp	r3, r2
 8002824:	d153      	bne.n	80028ce <CAN1_DATA_Read+0x102a>
		{
			uint16_t drsTarget = ((int8_t)RxData_CAN1[4] << 8 | (uint8_t)RxData_CAN1[5]);
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <CAN1_DATA_Read+0xfa8>)
 8002828:	791b      	ldrb	r3, [r3, #4]
 800282a:	b25b      	sxtb	r3, r3
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	b21a      	sxth	r2, r3
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <CAN1_DATA_Read+0xfa8>)
 8002832:	795b      	ldrb	r3, [r3, #5]
 8002834:	b21b      	sxth	r3, r3
 8002836:	4313      	orrs	r3, r2
 8002838:	b21b      	sxth	r3, r3
 800283a:	807b      	strh	r3, [r7, #2]

			if (drsTarget >= 1000)
 800283c:	887b      	ldrh	r3, [r7, #2]
 800283e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002842:	d313      	bcc.n	800286c <CAN1_DATA_Read+0xfc8>
			//if (drsTarget != 0)
				drsStatus = 1;
 8002844:	4b08      	ldr	r3, [pc, #32]	; (8002868 <CAN1_DATA_Read+0xfc4>)
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	e012      	b.n	8002872 <CAN1_DATA_Read+0xfce>
 800284c:	20000234 	.word	0x20000234
 8002850:	2000041c 	.word	0x2000041c
 8002854:	20006a98 	.word	0x20006a98
 8002858:	20002d50 	.word	0x20002d50
 800285c:	2000002c 	.word	0x2000002c
 8002860:	20002d54 	.word	0x20002d54
 8002864:	2000020c 	.word	0x2000020c
 8002868:	20002d38 	.word	0x20002d38
			else
				drsStatus = 0;
 800286c:	4ba4      	ldr	r3, [pc, #656]	; (8002b00 <CAN1_DATA_Read+0x125c>)
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]


			CAR_Data.drsStatus.oldIntData = CAR_Data.drsStatus.intData;
 8002872:	4ba4      	ldr	r3, [pc, #656]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002874:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8002878:	4aa2      	ldr	r2, [pc, #648]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 800287a:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284
			CAR_Data.drsStatus.oldFloatData = CAR_Data.drsStatus.floatData;
 800287e:	4ba1      	ldr	r3, [pc, #644]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002880:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8002884:	4a9f      	ldr	r2, [pc, #636]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002886:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
			CAR_Data.drsStatus.oldTimeData = CAR_Data.drsStatus.lastTimeData;
 800288a:	4b9e      	ldr	r3, [pc, #632]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 800288c:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8002890:	4a9c      	ldr	r2, [pc, #624]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002892:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c

			if (drsTarget >= 1000)
 8002896:	887b      	ldrh	r3, [r7, #2]
 8002898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800289c:	d309      	bcc.n	80028b2 <CAN1_DATA_Read+0x100e>
			{
				CAR_Data.drsStatus.intData = 1;
 800289e:	4b99      	ldr	r3, [pc, #612]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
				CAR_Data.drsStatus.floatData = 1;
 80028a6:	4b97      	ldr	r3, [pc, #604]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80028a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028ac:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
 80028b0:	e008      	b.n	80028c4 <CAN1_DATA_Read+0x1020>
			}
			else
			{
				CAR_Data.drsStatus.intData = 0;
 80028b2:	4b94      	ldr	r3, [pc, #592]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
				CAR_Data.drsStatus.floatData = 0;
 80028ba:	4b92      	ldr	r3, [pc, #584]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
			}

			CAR_Data.drsStatus.lastTimeData = millis;
 80028c4:	4b90      	ldr	r3, [pc, #576]	; (8002b08 <CAN1_DATA_Read+0x1264>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a8e      	ldr	r2, [pc, #568]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80028ca:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
		}



		if(pRxHeader_CAN1.StdId == 0x30C)
 80028ce:	4b8f      	ldr	r3, [pc, #572]	; (8002b0c <CAN1_DATA_Read+0x1268>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f5b3 7f43 	cmp.w	r3, #780	; 0x30c
 80028d6:	d164      	bne.n	80029a2 <CAN1_DATA_Read+0x10fe>
		{
			CAR_Data.brakeRear.oldIntData = CAR_Data.brakeRear.intData;
 80028d8:	4b8a      	ldr	r3, [pc, #552]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80028da:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80028de:	4a89      	ldr	r2, [pc, #548]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80028e0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
			CAR_Data.brakeRear.oldFloatData = CAR_Data.brakeRear.floatData;
 80028e4:	4b87      	ldr	r3, [pc, #540]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80028e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80028ea:	4a86      	ldr	r2, [pc, #536]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80028ec:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
			CAR_Data.brakeRear.oldTimeData = CAR_Data.brakeRear.lastTimeData;
 80028f0:	4b84      	ldr	r3, [pc, #528]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80028f2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80028f6:	4a83      	ldr	r2, [pc, #524]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80028f8:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c

			if(CAR_Data.brakeRear.dataType == dataType_Int)
 80028fc:	4b81      	ldr	r3, [pc, #516]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80028fe:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8002902:	2b00      	cmp	r3, #0
 8002904:	d126      	bne.n	8002954 <CAN1_DATA_Read+0x10b0>
			{
				CAR_Data.brakeRear.intData = ((int32_t)((int8_t)RxData_CAN1[0] << 8 | (uint8_t)RxData_CAN1[1])) * CAR_Data.brakeRear.gain + CAR_Data.brakeRear.offset;
 8002906:	4b82      	ldr	r3, [pc, #520]	; (8002b10 <CAN1_DATA_Read+0x126c>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	b25b      	sxtb	r3, r3
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	4a80      	ldr	r2, [pc, #512]	; (8002b10 <CAN1_DATA_Read+0x126c>)
 8002910:	7852      	ldrb	r2, [r2, #1]
 8002912:	4313      	orrs	r3, r2
 8002914:	ee07 3a90 	vmov	s15, r3
 8002918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800291c:	4b79      	ldr	r3, [pc, #484]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 800291e:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 8002922:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002926:	4b77      	ldr	r3, [pc, #476]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002928:	edd3 7a59 	vldr	s15, [r3, #356]	; 0x164
 800292c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002934:	ee17 2a90 	vmov	r2, s15
 8002938:	4b72      	ldr	r3, [pc, #456]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 800293a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
				CAR_Data.brakeRear.floatData = CAR_Data.brakeRear.intData;
 800293e:	4b71      	ldr	r3, [pc, #452]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002940:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002944:	ee07 3a90 	vmov	s15, r3
 8002948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800294c:	4b6d      	ldr	r3, [pc, #436]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 800294e:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
 8002952:	e021      	b.n	8002998 <CAN1_DATA_Read+0x10f4>
			}
			else
			{
				CAR_Data.brakeRear.floatData = (float) ((int32_t)((int8_t)RxData_CAN1[0] << 8 | (uint8_t)RxData_CAN1[1])) * CAR_Data.brakeRear.gain + CAR_Data.brakeRear.offset;
 8002954:	4b6e      	ldr	r3, [pc, #440]	; (8002b10 <CAN1_DATA_Read+0x126c>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	b25b      	sxtb	r3, r3
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	4a6c      	ldr	r2, [pc, #432]	; (8002b10 <CAN1_DATA_Read+0x126c>)
 800295e:	7852      	ldrb	r2, [r2, #1]
 8002960:	4313      	orrs	r3, r2
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800296a:	4b66      	ldr	r3, [pc, #408]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 800296c:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 8002970:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002974:	4b63      	ldr	r3, [pc, #396]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002976:	edd3 7a59 	vldr	s15, [r3, #356]	; 0x164
 800297a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297e:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002980:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
				CAR_Data.brakeRear.intData = CAR_Data.brakeRear.floatData;
 8002984:	4b5f      	ldr	r3, [pc, #380]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002986:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800298a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800298e:	ee17 2a90 	vmov	r2, s15
 8002992:	4b5c      	ldr	r3, [pc, #368]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002994:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			}
			CAR_Data.brakeRear.lastTimeData = millis;
 8002998:	4b5b      	ldr	r3, [pc, #364]	; (8002b08 <CAN1_DATA_Read+0x1264>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a59      	ldr	r2, [pc, #356]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 800299e:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
		}


		if(pRxHeader_CAN1.StdId == 0x312)
 80029a2:	4b5a      	ldr	r3, [pc, #360]	; (8002b0c <CAN1_DATA_Read+0x1268>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f240 3212 	movw	r2, #786	; 0x312
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d174      	bne.n	8002a98 <CAN1_DATA_Read+0x11f4>
		{
			CAR_Data.fuelTemp.oldIntData = CAR_Data.fuelTemp.intData;
 80029ae:	4b55      	ldr	r3, [pc, #340]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80029b0:	f8d3 3574 	ldr.w	r3, [r3, #1396]	; 0x574
 80029b4:	4a53      	ldr	r2, [pc, #332]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80029b6:	f8c2 357c 	str.w	r3, [r2, #1404]	; 0x57c
			CAR_Data.fuelTemp.oldFloatData = CAR_Data.fuelTemp.floatData;
 80029ba:	4b52      	ldr	r3, [pc, #328]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80029bc:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b50      	ldr	r3, [pc, #320]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80029c4:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 80029c8:	601a      	str	r2, [r3, #0]
			CAR_Data.fuelTemp.oldTimeData = CAR_Data.fuelTemp.lastTimeData;
 80029ca:	4b4e      	ldr	r3, [pc, #312]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80029cc:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 80029d0:	4a4c      	ldr	r2, [pc, #304]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80029d2:	f8c2 3584 	str.w	r3, [r2, #1412]	; 0x584

			if(CAR_Data.fuelTemp.dataType == dataType_Int)
 80029d6:	4b4b      	ldr	r3, [pc, #300]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80029d8:	f893 356c 	ldrb.w	r3, [r3, #1388]	; 0x56c
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d12c      	bne.n	8002a3a <CAN1_DATA_Read+0x1196>
			{
				CAR_Data.fuelTemp.intData = ((int32_t)((int8_t)RxData_CAN1[0] << 8 | (uint8_t)RxData_CAN1[1])) * CAR_Data.fuelTemp.gain + CAR_Data.fuelTemp.offset;
 80029e0:	4b4b      	ldr	r3, [pc, #300]	; (8002b10 <CAN1_DATA_Read+0x126c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	b25b      	sxtb	r3, r3
 80029e6:	021b      	lsls	r3, r3, #8
 80029e8:	4a49      	ldr	r2, [pc, #292]	; (8002b10 <CAN1_DATA_Read+0x126c>)
 80029ea:	7852      	ldrb	r2, [r2, #1]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	ee07 3a90 	vmov	s15, r3
 80029f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029f6:	4b43      	ldr	r3, [pc, #268]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 80029f8:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80029fc:	edd3 7a00 	vldr	s15, [r3]
 8002a00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a04:	4b3f      	ldr	r3, [pc, #252]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002a06:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8002a0a:	edd3 7a00 	vldr	s15, [r3]
 8002a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a16:	ee17 2a90 	vmov	r2, s15
 8002a1a:	4b3a      	ldr	r3, [pc, #232]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002a1c:	f8c3 2574 	str.w	r2, [r3, #1396]	; 0x574
				CAR_Data.fuelTemp.floatData = CAR_Data.fuelTemp.intData;
 8002a20:	4b38      	ldr	r3, [pc, #224]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002a22:	f8d3 3574 	ldr.w	r3, [r3, #1396]	; 0x574
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a2e:	4b35      	ldr	r3, [pc, #212]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002a30:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8002a34:	edc3 7a00 	vstr	s15, [r3]
 8002a38:	e029      	b.n	8002a8e <CAN1_DATA_Read+0x11ea>
			}
			else
			{
				CAR_Data.fuelTemp.floatData = (float) ((int32_t)((int8_t)RxData_CAN1[0] << 8 | (uint8_t)RxData_CAN1[1])) * CAR_Data.fuelTemp.gain + CAR_Data.fuelTemp.offset;
 8002a3a:	4b35      	ldr	r3, [pc, #212]	; (8002b10 <CAN1_DATA_Read+0x126c>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	b25b      	sxtb	r3, r3
 8002a40:	021b      	lsls	r3, r3, #8
 8002a42:	4a33      	ldr	r2, [pc, #204]	; (8002b10 <CAN1_DATA_Read+0x126c>)
 8002a44:	7852      	ldrb	r2, [r2, #1]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	ee07 3a90 	vmov	s15, r3
 8002a4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a50:	4b2c      	ldr	r3, [pc, #176]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002a52:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a5e:	4b29      	ldr	r3, [pc, #164]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002a60:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8002a64:	edd3 7a00 	vldr	s15, [r3]
 8002a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6c:	4b25      	ldr	r3, [pc, #148]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002a6e:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8002a72:	edc3 7a00 	vstr	s15, [r3]
				CAR_Data.fuelTemp.intData = CAR_Data.fuelTemp.floatData;
 8002a76:	4b23      	ldr	r3, [pc, #140]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002a78:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8002a7c:	edd3 7a00 	vldr	s15, [r3]
 8002a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a84:	ee17 2a90 	vmov	r2, s15
 8002a88:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002a8a:	f8c3 2574 	str.w	r2, [r3, #1396]	; 0x574
			}
			CAR_Data.fuelTemp.lastTimeData = millis;
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <CAN1_DATA_Read+0x1264>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1c      	ldr	r2, [pc, #112]	; (8002b04 <CAN1_DATA_Read+0x1260>)
 8002a94:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580





		if(pRxHeader_CAN1.StdId == RL_TyreTemp_0to7_address || pRxHeader_CAN1.StdId == RL_TyreTemp_8to15_address)
 8002a98:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <CAN1_DATA_Read+0x1268>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8002aa0:	d005      	beq.n	8002aae <CAN1_DATA_Read+0x120a>
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <CAN1_DATA_Read+0x1268>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8002aaa:	f040 80b7 	bne.w	8002c1c <CAN1_DATA_Read+0x1378>
			static int8_t tmpTyTemp8[8];

			static uint32_t millisTyTemp0 = 0;
			static uint32_t millisTyTemp8 = 0;

			switch(pRxHeader_CAN1.StdId)
 8002aae:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <CAN1_DATA_Read+0x1268>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8002ab6:	d003      	beq.n	8002ac0 <CAN1_DATA_Read+0x121c>
 8002ab8:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8002abc:	d01b      	beq.n	8002af6 <CAN1_DATA_Read+0x1252>
 8002abe:	e044      	b.n	8002b4a <CAN1_DATA_Read+0x12a6>
			{
				case RL_TyreTemp_0to7_address:

					for(uint8_t i = 1; i < 8; i++)
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002ac6:	e00d      	b.n	8002ae4 <CAN1_DATA_Read+0x1240>
						tmpTyTemp0[i] = (int8_t)RxData_CAN1[i];
 8002ac8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002acc:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <CAN1_DATA_Read+0x126c>)
 8002ace:	5cd2      	ldrb	r2, [r2, r3]
 8002ad0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002ad4:	b251      	sxtb	r1, r2
 8002ad6:	4a0f      	ldr	r2, [pc, #60]	; (8002b14 <CAN1_DATA_Read+0x1270>)
 8002ad8:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i = 1; i < 8; i++)
 8002ada:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002ae4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002ae8:	2b07      	cmp	r3, #7
 8002aea:	d9ed      	bls.n	8002ac8 <CAN1_DATA_Read+0x1224>

					millisTyTemp0 = millis;
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <CAN1_DATA_Read+0x1264>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a09      	ldr	r2, [pc, #36]	; (8002b18 <CAN1_DATA_Read+0x1274>)
 8002af2:	6013      	str	r3, [r2, #0]

					break;
 8002af4:	e029      	b.n	8002b4a <CAN1_DATA_Read+0x12a6>

				case RL_TyreTemp_8to15_address:

					for(uint8_t i = 0; i < 7; i++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8002afc:	e01c      	b.n	8002b38 <CAN1_DATA_Read+0x1294>
 8002afe:	bf00      	nop
 8002b00:	20002d38 	.word	0x20002d38
 8002b04:	2000041c 	.word	0x2000041c
 8002b08:	20006a98 	.word	0x20006a98
 8002b0c:	2000020c 	.word	0x2000020c
 8002b10:	20000234 	.word	0x20000234
 8002b14:	20001a58 	.word	0x20001a58
 8002b18:	20001a60 	.word	0x20001a60
						tmpTyTemp8[i] = (int8_t)RxData_CAN1[i];
 8002b1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b20:	4aa4      	ldr	r2, [pc, #656]	; (8002db4 <CAN1_DATA_Read+0x1510>)
 8002b22:	5cd2      	ldrb	r2, [r2, r3]
 8002b24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b28:	b251      	sxtb	r1, r2
 8002b2a:	4aa3      	ldr	r2, [pc, #652]	; (8002db8 <CAN1_DATA_Read+0x1514>)
 8002b2c:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i = 0; i < 7; i++)
 8002b2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b32:	3301      	adds	r3, #1
 8002b34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8002b38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b3c:	2b06      	cmp	r3, #6
 8002b3e:	d9ed      	bls.n	8002b1c <CAN1_DATA_Read+0x1278>

					millisTyTemp8 = millis;
 8002b40:	4b9e      	ldr	r3, [pc, #632]	; (8002dbc <CAN1_DATA_Read+0x1518>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a9e      	ldr	r2, [pc, #632]	; (8002dc0 <CAN1_DATA_Read+0x151c>)
 8002b46:	6013      	str	r3, [r2, #0]

					break;
 8002b48:	bf00      	nop
			}

			if(millis <= millisTyTemp0 + 1000 && millis <= millisTyTemp8 + 1000)
 8002b4a:	4b9e      	ldr	r3, [pc, #632]	; (8002dc4 <CAN1_DATA_Read+0x1520>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8002b52:	4b9a      	ldr	r3, [pc, #616]	; (8002dbc <CAN1_DATA_Read+0x1518>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d360      	bcc.n	8002c1c <CAN1_DATA_Read+0x1378>
 8002b5a:	4b99      	ldr	r3, [pc, #612]	; (8002dc0 <CAN1_DATA_Read+0x151c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8002b62:	4b96      	ldr	r3, [pc, #600]	; (8002dbc <CAN1_DATA_Read+0x1518>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d358      	bcc.n	8002c1c <CAN1_DATA_Read+0x1378>
			{
				int16_t tyreTempTmp = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	857b      	strh	r3, [r7, #42]	; 0x2a

				for(uint8_t i = 0; i < 7; i++)
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8002b74:	e015      	b.n	8002ba2 <CAN1_DATA_Read+0x12fe>
					tyreTempTmp = tyreTempTmp + tmpTyTemp0[i+1] + tmpTyTemp8[i];
 8002b76:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	4a92      	ldr	r2, [pc, #584]	; (8002dc8 <CAN1_DATA_Read+0x1524>)
 8002b7e:	56d3      	ldrsb	r3, [r2, r3]
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b84:	4413      	add	r3, r2
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002b8c:	498a      	ldr	r1, [pc, #552]	; (8002db8 <CAN1_DATA_Read+0x1514>)
 8002b8e:	56cb      	ldrsb	r3, [r1, r3]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	857b      	strh	r3, [r7, #42]	; 0x2a
				for(uint8_t i = 0; i < 7; i++)
 8002b98:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8002ba2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d9e5      	bls.n	8002b76 <CAN1_DATA_Read+0x12d2>

				CAR_Data.tyresTemp[RL].oldFloatData = CAR_Data.tyresTemp[RL].floatData;
 8002baa:	4b88      	ldr	r3, [pc, #544]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002bac:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4b86      	ldr	r3, [pc, #536]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002bb4:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 8002bb8:	601a      	str	r2, [r3, #0]
				CAR_Data.tyresTemp[RL].oldIntData = CAR_Data.tyresTemp[RL].intData;
 8002bba:	4b84      	ldr	r3, [pc, #528]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002bbc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8002bc0:	4a82      	ldr	r2, [pc, #520]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002bc2:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660

				CAR_Data.tyresTemp[RL].floatData = (float)tyreTempTmp / 16;
 8002bc6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002bca:	ee07 3a90 	vmov	s15, r3
 8002bce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bd2:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002bd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bda:	4b7c      	ldr	r3, [pc, #496]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002bdc:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002be0:	edc3 7a00 	vstr	s15, [r3]
				CAR_Data.tyresTemp[RL].intData = CAR_Data.tyresTemp[RL].floatData;
 8002be4:	4b79      	ldr	r3, [pc, #484]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002be6:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002bea:	edd3 7a00 	vldr	s15, [r3]
 8002bee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bf2:	ee17 2a90 	vmov	r2, s15
 8002bf6:	4b75      	ldr	r3, [pc, #468]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002bf8:	f8c3 2658 	str.w	r2, [r3, #1624]	; 0x658

				CAR_Data.tyresTemp[RL].oldTimeData = CAR_Data.tyresTemp[RL].lastTimeData;
 8002bfc:	4b73      	ldr	r3, [pc, #460]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002bfe:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8002c02:	4a72      	ldr	r2, [pc, #456]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002c04:	f8c2 3668 	str.w	r3, [r2, #1640]	; 0x668
				CAR_Data.tyresTemp[RL].lastTimeData = millis;
 8002c08:	4b6c      	ldr	r3, [pc, #432]	; (8002dbc <CAN1_DATA_Read+0x1518>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a6f      	ldr	r2, [pc, #444]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002c0e:	f8c2 3664 	str.w	r3, [r2, #1636]	; 0x664

				cameraData++;
 8002c12:	4b6f      	ldr	r3, [pc, #444]	; (8002dd0 <CAN1_DATA_Read+0x152c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3301      	adds	r3, #1
 8002c18:	4a6d      	ldr	r2, [pc, #436]	; (8002dd0 <CAN1_DATA_Read+0x152c>)
 8002c1a:	6013      	str	r3, [r2, #0]
			}
		}

		if(pRxHeader_CAN1.StdId == RR_TyreTemp_0to7_address || pRxHeader_CAN1.StdId == RR_TyreTemp_8to15_address)
 8002c1c:	4b6d      	ldr	r3, [pc, #436]	; (8002dd4 <CAN1_DATA_Read+0x1530>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f5b3 7f13 	cmp.w	r3, #588	; 0x24c
 8002c24:	d005      	beq.n	8002c32 <CAN1_DATA_Read+0x138e>
 8002c26:	4b6b      	ldr	r3, [pc, #428]	; (8002dd4 <CAN1_DATA_Read+0x1530>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002c2e:	f040 80a8 	bne.w	8002d82 <CAN1_DATA_Read+0x14de>
			static int8_t tmpTyTemp8[8];

			static uint32_t millisTyTemp0 = 0;
			static uint32_t millisTyTemp8 = 0;

			switch(pRxHeader_CAN1.StdId)
 8002c32:	4b68      	ldr	r3, [pc, #416]	; (8002dd4 <CAN1_DATA_Read+0x1530>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8002c3a:	d003      	beq.n	8002c44 <CAN1_DATA_Read+0x13a0>
 8002c3c:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8002c40:	d01b      	beq.n	8002c7a <CAN1_DATA_Read+0x13d6>
 8002c42:	e035      	b.n	8002cb0 <CAN1_DATA_Read+0x140c>
			{
				case RL_TyreTemp_0to7_address:

					for(uint8_t i = 1; i < 8; i++)
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8002c4a:	e00d      	b.n	8002c68 <CAN1_DATA_Read+0x13c4>
						tmpTyTemp0[i] = (int8_t)RxData_CAN1[i];
 8002c4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c50:	4a58      	ldr	r2, [pc, #352]	; (8002db4 <CAN1_DATA_Read+0x1510>)
 8002c52:	5cd2      	ldrb	r2, [r2, r3]
 8002c54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c58:	b251      	sxtb	r1, r2
 8002c5a:	4a5f      	ldr	r2, [pc, #380]	; (8002dd8 <CAN1_DATA_Read+0x1534>)
 8002c5c:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i = 1; i < 8; i++)
 8002c5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c62:	3301      	adds	r3, #1
 8002c64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8002c68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c6c:	2b07      	cmp	r3, #7
 8002c6e:	d9ed      	bls.n	8002c4c <CAN1_DATA_Read+0x13a8>

					millisTyTemp0 = millis;
 8002c70:	4b52      	ldr	r3, [pc, #328]	; (8002dbc <CAN1_DATA_Read+0x1518>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a59      	ldr	r2, [pc, #356]	; (8002ddc <CAN1_DATA_Read+0x1538>)
 8002c76:	6013      	str	r3, [r2, #0]

					break;
 8002c78:	e01a      	b.n	8002cb0 <CAN1_DATA_Read+0x140c>

				case RL_TyreTemp_8to15_address:

					for(uint8_t i = 0; i < 7; i++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c80:	e00d      	b.n	8002c9e <CAN1_DATA_Read+0x13fa>
						tmpTyTemp8[i] = (int8_t)RxData_CAN1[i];
 8002c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c86:	4a4b      	ldr	r2, [pc, #300]	; (8002db4 <CAN1_DATA_Read+0x1510>)
 8002c88:	5cd2      	ldrb	r2, [r2, r3]
 8002c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c8e:	b251      	sxtb	r1, r2
 8002c90:	4a53      	ldr	r2, [pc, #332]	; (8002de0 <CAN1_DATA_Read+0x153c>)
 8002c92:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i = 0; i < 7; i++)
 8002c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d9ed      	bls.n	8002c82 <CAN1_DATA_Read+0x13de>

					millisTyTemp8 = millis;
 8002ca6:	4b45      	ldr	r3, [pc, #276]	; (8002dbc <CAN1_DATA_Read+0x1518>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a4e      	ldr	r2, [pc, #312]	; (8002de4 <CAN1_DATA_Read+0x1540>)
 8002cac:	6013      	str	r3, [r2, #0]

					break;
 8002cae:	bf00      	nop
			}

			if(millis <= millisTyTemp0 + 1000 && millis <= millisTyTemp8 + 1000)
 8002cb0:	4b4a      	ldr	r3, [pc, #296]	; (8002ddc <CAN1_DATA_Read+0x1538>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8002cb8:	4b40      	ldr	r3, [pc, #256]	; (8002dbc <CAN1_DATA_Read+0x1518>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d360      	bcc.n	8002d82 <CAN1_DATA_Read+0x14de>
 8002cc0:	4b48      	ldr	r3, [pc, #288]	; (8002de4 <CAN1_DATA_Read+0x1540>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8002cc8:	4b3c      	ldr	r3, [pc, #240]	; (8002dbc <CAN1_DATA_Read+0x1518>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d358      	bcc.n	8002d82 <CAN1_DATA_Read+0x14de>
			{
				int16_t tyreTempTmp = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	84bb      	strh	r3, [r7, #36]	; 0x24

				for(uint8_t i = 0; i < 7; i++)
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cda:	e015      	b.n	8002d08 <CAN1_DATA_Read+0x1464>
					tyreTempTmp = tyreTempTmp + tmpTyTemp0[i+1] + tmpTyTemp8[i];
 8002cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	4a3d      	ldr	r2, [pc, #244]	; (8002dd8 <CAN1_DATA_Read+0x1534>)
 8002ce4:	56d3      	ldrsb	r3, [r2, r3]
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cea:	4413      	add	r3, r2
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cf2:	493b      	ldr	r1, [pc, #236]	; (8002de0 <CAN1_DATA_Read+0x153c>)
 8002cf4:	56cb      	ldrsb	r3, [r1, r3]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	84bb      	strh	r3, [r7, #36]	; 0x24
				for(uint8_t i = 0; i < 7; i++)
 8002cfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d02:	3301      	adds	r3, #1
 8002d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d0c:	2b06      	cmp	r3, #6
 8002d0e:	d9e5      	bls.n	8002cdc <CAN1_DATA_Read+0x1438>

				CAR_Data.tyresTemp[RR].oldFloatData = CAR_Data.tyresTemp[RR].floatData;
 8002d10:	4b2e      	ldr	r3, [pc, #184]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002d12:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002d1a:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 8002d1e:	601a      	str	r2, [r3, #0]
				CAR_Data.tyresTemp[RR].oldIntData = CAR_Data.tyresTemp[RR].intData;
 8002d20:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002d22:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8002d26:	4a29      	ldr	r2, [pc, #164]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002d28:	f8c2 36ac 	str.w	r3, [r2, #1708]	; 0x6ac

				CAR_Data.tyresTemp[RR].floatData = (float)tyreTempTmp / 16;
 8002d2c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002d30:	ee07 3a90 	vmov	s15, r3
 8002d34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d38:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d40:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002d42:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8002d46:	edc3 7a00 	vstr	s15, [r3]
				CAR_Data.tyresTemp[RR].intData = CAR_Data.tyresTemp[RR].floatData;
 8002d4a:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002d4c:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8002d50:	edd3 7a00 	vldr	s15, [r3]
 8002d54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d58:	ee17 2a90 	vmov	r2, s15
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002d5e:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4

				CAR_Data.tyresTemp[RR].oldTimeData = CAR_Data.tyresTemp[RR].lastTimeData;
 8002d62:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002d64:	f8d3 36b0 	ldr.w	r3, [r3, #1712]	; 0x6b0
 8002d68:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002d6a:	f8c2 36b4 	str.w	r3, [r2, #1716]	; 0x6b4
				CAR_Data.tyresTemp[RR].lastTimeData = millis;
 8002d6e:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <CAN1_DATA_Read+0x1518>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a16      	ldr	r2, [pc, #88]	; (8002dcc <CAN1_DATA_Read+0x1528>)
 8002d74:	f8c2 36b0 	str.w	r3, [r2, #1712]	; 0x6b0

				cameraData++;
 8002d78:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <CAN1_DATA_Read+0x152c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	4a14      	ldr	r2, [pc, #80]	; (8002dd0 <CAN1_DATA_Read+0x152c>)
 8002d80:	6013      	str	r3, [r2, #0]
			}
		}

		if(pRxHeader_CAN1.StdId == FL_TyreTemp_0to7_address || pRxHeader_CAN1.StdId == FL_TyreTemp_8to15_address)
 8002d82:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <CAN1_DATA_Read+0x1530>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 8002d8a:	d005      	beq.n	8002d98 <CAN1_DATA_Read+0x14f4>
 8002d8c:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <CAN1_DATA_Read+0x1530>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f5b3 7f17 	cmp.w	r3, #604	; 0x25c
 8002d94:	f040 80bd 	bne.w	8002f12 <CAN1_DATA_Read+0x166e>
			static int8_t tmpTyTemp8[8];

			static uint32_t millisTyTemp0 = 0;
			static uint32_t millisTyTemp8 = 0;

			switch(pRxHeader_CAN1.StdId)
 8002d98:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <CAN1_DATA_Read+0x1530>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8002da0:	d003      	beq.n	8002daa <CAN1_DATA_Read+0x1506>
 8002da2:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8002da6:	d036      	beq.n	8002e16 <CAN1_DATA_Read+0x1572>
 8002da8:	e050      	b.n	8002e4c <CAN1_DATA_Read+0x15a8>
			{
				case RL_TyreTemp_0to7_address:

					for(uint8_t i = 1; i < 8; i++)
 8002daa:	2301      	movs	r3, #1
 8002dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002db0:	e028      	b.n	8002e04 <CAN1_DATA_Read+0x1560>
 8002db2:	bf00      	nop
 8002db4:	20000234 	.word	0x20000234
 8002db8:	20001a64 	.word	0x20001a64
 8002dbc:	20006a98 	.word	0x20006a98
 8002dc0:	20001a6c 	.word	0x20001a6c
 8002dc4:	20001a60 	.word	0x20001a60
 8002dc8:	20001a58 	.word	0x20001a58
 8002dcc:	2000041c 	.word	0x2000041c
 8002dd0:	20000418 	.word	0x20000418
 8002dd4:	2000020c 	.word	0x2000020c
 8002dd8:	20001a70 	.word	0x20001a70
 8002ddc:	20001a78 	.word	0x20001a78
 8002de0:	20001a7c 	.word	0x20001a7c
 8002de4:	20001a84 	.word	0x20001a84
						tmpTyTemp0[i] = (int8_t)RxData_CAN1[i];
 8002de8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002dec:	4aa0      	ldr	r2, [pc, #640]	; (8003070 <CAN1_DATA_Read+0x17cc>)
 8002dee:	5cd2      	ldrb	r2, [r2, r3]
 8002df0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002df4:	b251      	sxtb	r1, r2
 8002df6:	4a9f      	ldr	r2, [pc, #636]	; (8003074 <CAN1_DATA_Read+0x17d0>)
 8002df8:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i = 1; i < 8; i++)
 8002dfa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002e08:	2b07      	cmp	r3, #7
 8002e0a:	d9ed      	bls.n	8002de8 <CAN1_DATA_Read+0x1544>

					millisTyTemp0 = millis;
 8002e0c:	4b9a      	ldr	r3, [pc, #616]	; (8003078 <CAN1_DATA_Read+0x17d4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a9a      	ldr	r2, [pc, #616]	; (800307c <CAN1_DATA_Read+0x17d8>)
 8002e12:	6013      	str	r3, [r2, #0]

					break;
 8002e14:	e01a      	b.n	8002e4c <CAN1_DATA_Read+0x15a8>

				case RL_TyreTemp_8to15_address:

					for(uint8_t i = 0; i < 7; i++)
 8002e16:	2300      	movs	r3, #0
 8002e18:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002e1c:	e00d      	b.n	8002e3a <CAN1_DATA_Read+0x1596>
						tmpTyTemp8[i] = (int8_t)RxData_CAN1[i];
 8002e1e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002e22:	4a93      	ldr	r2, [pc, #588]	; (8003070 <CAN1_DATA_Read+0x17cc>)
 8002e24:	5cd2      	ldrb	r2, [r2, r3]
 8002e26:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002e2a:	b251      	sxtb	r1, r2
 8002e2c:	4a94      	ldr	r2, [pc, #592]	; (8003080 <CAN1_DATA_Read+0x17dc>)
 8002e2e:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i = 0; i < 7; i++)
 8002e30:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002e34:	3301      	adds	r3, #1
 8002e36:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002e3a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d9ed      	bls.n	8002e1e <CAN1_DATA_Read+0x157a>

					millisTyTemp8 = millis;
 8002e42:	4b8d      	ldr	r3, [pc, #564]	; (8003078 <CAN1_DATA_Read+0x17d4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a8f      	ldr	r2, [pc, #572]	; (8003084 <CAN1_DATA_Read+0x17e0>)
 8002e48:	6013      	str	r3, [r2, #0]

					break;
 8002e4a:	bf00      	nop
			}

			if(millis <= millisTyTemp0 + 1000 && millis <= millisTyTemp8 + 1000)
 8002e4c:	4b8b      	ldr	r3, [pc, #556]	; (800307c <CAN1_DATA_Read+0x17d8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8002e54:	4b88      	ldr	r3, [pc, #544]	; (8003078 <CAN1_DATA_Read+0x17d4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d35a      	bcc.n	8002f12 <CAN1_DATA_Read+0x166e>
 8002e5c:	4b89      	ldr	r3, [pc, #548]	; (8003084 <CAN1_DATA_Read+0x17e0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8002e64:	4b84      	ldr	r3, [pc, #528]	; (8003078 <CAN1_DATA_Read+0x17d4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d352      	bcc.n	8002f12 <CAN1_DATA_Read+0x166e>
			{
				int16_t tyreTempTmp = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	83fb      	strh	r3, [r7, #30]

				for(uint8_t i = 0; i < 7; i++)
 8002e70:	2300      	movs	r3, #0
 8002e72:	777b      	strb	r3, [r7, #29]
 8002e74:	e011      	b.n	8002e9a <CAN1_DATA_Read+0x15f6>
					tyreTempTmp = tyreTempTmp + tmpTyTemp0[i+1] + tmpTyTemp8[i];
 8002e76:	7f7b      	ldrb	r3, [r7, #29]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	4a7e      	ldr	r2, [pc, #504]	; (8003074 <CAN1_DATA_Read+0x17d0>)
 8002e7c:	56d3      	ldrsb	r3, [r2, r3]
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	8bfb      	ldrh	r3, [r7, #30]
 8002e82:	4413      	add	r3, r2
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	7f7b      	ldrb	r3, [r7, #29]
 8002e88:	497d      	ldr	r1, [pc, #500]	; (8003080 <CAN1_DATA_Read+0x17dc>)
 8002e8a:	56cb      	ldrsb	r3, [r1, r3]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	83fb      	strh	r3, [r7, #30]
				for(uint8_t i = 0; i < 7; i++)
 8002e94:	7f7b      	ldrb	r3, [r7, #29]
 8002e96:	3301      	adds	r3, #1
 8002e98:	777b      	strb	r3, [r7, #29]
 8002e9a:	7f7b      	ldrb	r3, [r7, #29]
 8002e9c:	2b06      	cmp	r3, #6
 8002e9e:	d9ea      	bls.n	8002e76 <CAN1_DATA_Read+0x15d2>

				CAR_Data.tyresTemp[FL].oldFloatData = CAR_Data.tyresTemp[FL].floatData;
 8002ea0:	4b79      	ldr	r3, [pc, #484]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 8002ea2:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4b77      	ldr	r3, [pc, #476]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 8002eaa:	f203 63f4 	addw	r3, r3, #1780	; 0x6f4
 8002eae:	601a      	str	r2, [r3, #0]
				CAR_Data.tyresTemp[FL].oldIntData = CAR_Data.tyresTemp[FL].intData;
 8002eb0:	4b75      	ldr	r3, [pc, #468]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 8002eb2:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8002eb6:	4a74      	ldr	r2, [pc, #464]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 8002eb8:	f8c2 36f8 	str.w	r3, [r2, #1784]	; 0x6f8

				CAR_Data.tyresTemp[FL].floatData = (float)tyreTempTmp / 16;
 8002ebc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ec0:	ee07 3a90 	vmov	s15, r3
 8002ec4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ec8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002ecc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ed0:	4b6d      	ldr	r3, [pc, #436]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 8002ed2:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8002ed6:	edc3 7a00 	vstr	s15, [r3]
				CAR_Data.tyresTemp[FL].intData = CAR_Data.tyresTemp[FL].floatData;
 8002eda:	4b6b      	ldr	r3, [pc, #428]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 8002edc:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8002ee0:	edd3 7a00 	vldr	s15, [r3]
 8002ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ee8:	ee17 2a90 	vmov	r2, s15
 8002eec:	4b66      	ldr	r3, [pc, #408]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 8002eee:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0

				CAR_Data.tyresTemp[FL].oldTimeData = CAR_Data.tyresTemp[FL].lastTimeData;
 8002ef2:	4b65      	ldr	r3, [pc, #404]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 8002ef4:	f8d3 36fc 	ldr.w	r3, [r3, #1788]	; 0x6fc
 8002ef8:	4a63      	ldr	r2, [pc, #396]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 8002efa:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
				CAR_Data.tyresTemp[FL].lastTimeData = millis;
 8002efe:	4b5e      	ldr	r3, [pc, #376]	; (8003078 <CAN1_DATA_Read+0x17d4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a61      	ldr	r2, [pc, #388]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 8002f04:	f8c2 36fc 	str.w	r3, [r2, #1788]	; 0x6fc

				cameraData++;
 8002f08:	4b60      	ldr	r3, [pc, #384]	; (800308c <CAN1_DATA_Read+0x17e8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	4a5f      	ldr	r2, [pc, #380]	; (800308c <CAN1_DATA_Read+0x17e8>)
 8002f10:	6013      	str	r3, [r2, #0]
			}
		}

		if(pRxHeader_CAN1.StdId == FR_TyreTemp_0to7_address || pRxHeader_CAN1.StdId == FR_TyreTemp_8to15_address)
 8002f12:	4b5f      	ldr	r3, [pc, #380]	; (8003090 <CAN1_DATA_Read+0x17ec>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8002f1a:	d005      	beq.n	8002f28 <CAN1_DATA_Read+0x1684>
 8002f1c:	4b5c      	ldr	r3, [pc, #368]	; (8003090 <CAN1_DATA_Read+0x17ec>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f5b3 7f19 	cmp.w	r3, #612	; 0x264
 8002f24:	f040 8096 	bne.w	8003054 <CAN1_DATA_Read+0x17b0>
			static int8_t tmpTyTemp8[8];

			static uint32_t millisTyTemp0 = 0;
			static uint32_t millisTyTemp8 = 0;

			switch(pRxHeader_CAN1.StdId)
 8002f28:	4b59      	ldr	r3, [pc, #356]	; (8003090 <CAN1_DATA_Read+0x17ec>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8002f30:	d003      	beq.n	8002f3a <CAN1_DATA_Read+0x1696>
 8002f32:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8002f36:	d015      	beq.n	8002f64 <CAN1_DATA_Read+0x16c0>
 8002f38:	e029      	b.n	8002f8e <CAN1_DATA_Read+0x16ea>
			{
				case RL_TyreTemp_0to7_address:

					for(uint8_t i = 1; i < 8; i++)
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	773b      	strb	r3, [r7, #28]
 8002f3e:	e009      	b.n	8002f54 <CAN1_DATA_Read+0x16b0>
						tmpTyTemp0[i] = (int8_t)RxData_CAN1[i];
 8002f40:	7f3b      	ldrb	r3, [r7, #28]
 8002f42:	4a4b      	ldr	r2, [pc, #300]	; (8003070 <CAN1_DATA_Read+0x17cc>)
 8002f44:	5cd2      	ldrb	r2, [r2, r3]
 8002f46:	7f3b      	ldrb	r3, [r7, #28]
 8002f48:	b251      	sxtb	r1, r2
 8002f4a:	4a52      	ldr	r2, [pc, #328]	; (8003094 <CAN1_DATA_Read+0x17f0>)
 8002f4c:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i = 1; i < 8; i++)
 8002f4e:	7f3b      	ldrb	r3, [r7, #28]
 8002f50:	3301      	adds	r3, #1
 8002f52:	773b      	strb	r3, [r7, #28]
 8002f54:	7f3b      	ldrb	r3, [r7, #28]
 8002f56:	2b07      	cmp	r3, #7
 8002f58:	d9f2      	bls.n	8002f40 <CAN1_DATA_Read+0x169c>

					millisTyTemp0 = millis;
 8002f5a:	4b47      	ldr	r3, [pc, #284]	; (8003078 <CAN1_DATA_Read+0x17d4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a4e      	ldr	r2, [pc, #312]	; (8003098 <CAN1_DATA_Read+0x17f4>)
 8002f60:	6013      	str	r3, [r2, #0]

					break;
 8002f62:	e014      	b.n	8002f8e <CAN1_DATA_Read+0x16ea>

				case RL_TyreTemp_8to15_address:

					for(uint8_t i = 0; i < 7; i++)
 8002f64:	2300      	movs	r3, #0
 8002f66:	76fb      	strb	r3, [r7, #27]
 8002f68:	e009      	b.n	8002f7e <CAN1_DATA_Read+0x16da>
						tmpTyTemp8[i] = (int8_t)RxData_CAN1[i];
 8002f6a:	7efb      	ldrb	r3, [r7, #27]
 8002f6c:	4a40      	ldr	r2, [pc, #256]	; (8003070 <CAN1_DATA_Read+0x17cc>)
 8002f6e:	5cd2      	ldrb	r2, [r2, r3]
 8002f70:	7efb      	ldrb	r3, [r7, #27]
 8002f72:	b251      	sxtb	r1, r2
 8002f74:	4a49      	ldr	r2, [pc, #292]	; (800309c <CAN1_DATA_Read+0x17f8>)
 8002f76:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i = 0; i < 7; i++)
 8002f78:	7efb      	ldrb	r3, [r7, #27]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	76fb      	strb	r3, [r7, #27]
 8002f7e:	7efb      	ldrb	r3, [r7, #27]
 8002f80:	2b06      	cmp	r3, #6
 8002f82:	d9f2      	bls.n	8002f6a <CAN1_DATA_Read+0x16c6>

					millisTyTemp8 = millis;
 8002f84:	4b3c      	ldr	r3, [pc, #240]	; (8003078 <CAN1_DATA_Read+0x17d4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a45      	ldr	r2, [pc, #276]	; (80030a0 <CAN1_DATA_Read+0x17fc>)
 8002f8a:	6013      	str	r3, [r2, #0]

					break;
 8002f8c:	bf00      	nop
			}

			if(millis <= millisTyTemp0 + 1000 && millis <= millisTyTemp8 + 1000)
 8002f8e:	4b42      	ldr	r3, [pc, #264]	; (8003098 <CAN1_DATA_Read+0x17f4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8002f96:	4b38      	ldr	r3, [pc, #224]	; (8003078 <CAN1_DATA_Read+0x17d4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d35a      	bcc.n	8003054 <CAN1_DATA_Read+0x17b0>
 8002f9e:	4b40      	ldr	r3, [pc, #256]	; (80030a0 <CAN1_DATA_Read+0x17fc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8002fa6:	4b34      	ldr	r3, [pc, #208]	; (8003078 <CAN1_DATA_Read+0x17d4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d352      	bcc.n	8003054 <CAN1_DATA_Read+0x17b0>
			{
				int16_t tyreTempTmp = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	833b      	strh	r3, [r7, #24]

				for(uint8_t i = 0; i < 7; i++)
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	75fb      	strb	r3, [r7, #23]
 8002fb6:	e011      	b.n	8002fdc <CAN1_DATA_Read+0x1738>
					tyreTempTmp = tyreTempTmp + tmpTyTemp0[i+1] + tmpTyTemp8[i];
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	4a35      	ldr	r2, [pc, #212]	; (8003094 <CAN1_DATA_Read+0x17f0>)
 8002fbe:	56d3      	ldrsb	r3, [r2, r3]
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	8b3b      	ldrh	r3, [r7, #24]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
 8002fca:	4934      	ldr	r1, [pc, #208]	; (800309c <CAN1_DATA_Read+0x17f8>)
 8002fcc:	56cb      	ldrsb	r3, [r1, r3]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	833b      	strh	r3, [r7, #24]
				for(uint8_t i = 0; i < 7; i++)
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	75fb      	strb	r3, [r7, #23]
 8002fdc:	7dfb      	ldrb	r3, [r7, #23]
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d9ea      	bls.n	8002fb8 <CAN1_DATA_Read+0x1714>

				CAR_Data.tyresTemp[FR].oldFloatData = CAR_Data.tyresTemp[FR].oldFloatData;
 8002fe2:	4b29      	ldr	r3, [pc, #164]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 8002fe4:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4b27      	ldr	r3, [pc, #156]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 8002fec:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8002ff0:	601a      	str	r2, [r3, #0]
				CAR_Data.tyresTemp[FR].oldIntData = CAR_Data.tyresTemp[FR].intData;
 8002ff2:	4b25      	ldr	r3, [pc, #148]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 8002ff4:	f8d3 373c 	ldr.w	r3, [r3, #1852]	; 0x73c
 8002ff8:	4a23      	ldr	r2, [pc, #140]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 8002ffa:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744

				CAR_Data.tyresTemp[FR].floatData = (float)tyreTempTmp / 16;
 8002ffe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800300a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800300e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003012:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 8003014:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8003018:	edc3 7a00 	vstr	s15, [r3]
				CAR_Data.tyresTemp[FR].intData = CAR_Data.tyresTemp[FR].floatData;
 800301c:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 800301e:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8003022:	edd3 7a00 	vldr	s15, [r3]
 8003026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800302a:	ee17 2a90 	vmov	r2, s15
 800302e:	4b16      	ldr	r3, [pc, #88]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 8003030:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c

				CAR_Data.tyresTemp[FR].oldTimeData = CAR_Data.tyresTemp[FR].lastTimeData;
 8003034:	4b14      	ldr	r3, [pc, #80]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 8003036:	f8d3 3748 	ldr.w	r3, [r3, #1864]	; 0x748
 800303a:	4a13      	ldr	r2, [pc, #76]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 800303c:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
				CAR_Data.tyresTemp[FR].lastTimeData = millis;
 8003040:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <CAN1_DATA_Read+0x17d4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a10      	ldr	r2, [pc, #64]	; (8003088 <CAN1_DATA_Read+0x17e4>)
 8003046:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748

				cameraData++;
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <CAN1_DATA_Read+0x17e8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3301      	adds	r3, #1
 8003050:	4a0e      	ldr	r2, [pc, #56]	; (800308c <CAN1_DATA_Read+0x17e8>)
 8003052:	6013      	str	r3, [r2, #0]
	while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0 || (DEBUG_MODE == 2 && debugDataDone == 0))
 8003054:	2100      	movs	r1, #0
 8003056:	4813      	ldr	r0, [pc, #76]	; (80030a4 <CAN1_DATA_Read+0x1800>)
 8003058:	f00e fbd9 	bl	801180e <HAL_CAN_GetRxFifoFillLevel>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	f47e ac27 	bne.w	80018b2 <CAN1_DATA_Read+0xe>
			}
		}


	}
}
 8003064:	bf00      	nop
 8003066:	bf00      	nop
 8003068:	3730      	adds	r7, #48	; 0x30
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000234 	.word	0x20000234
 8003074:	20001a88 	.word	0x20001a88
 8003078:	20006a98 	.word	0x20006a98
 800307c:	20001a90 	.word	0x20001a90
 8003080:	20001a94 	.word	0x20001a94
 8003084:	20001a9c 	.word	0x20001a9c
 8003088:	2000041c 	.word	0x2000041c
 800308c:	20000418 	.word	0x20000418
 8003090:	2000020c 	.word	0x2000020c
 8003094:	20001aa0 	.word	0x20001aa0
 8003098:	20001aa8 	.word	0x20001aa8
 800309c:	20001aac 	.word	0x20001aac
 80030a0:	20001ab4 	.word	0x20001ab4
 80030a4:	20001bb8 	.word	0x20001bb8

080030a8 <tractionAcquisition>:



void tractionAcquisition(void)
{
 80030a8:	b598      	push	{r3, r4, r7, lr}
 80030aa:	af00      	add	r7, sp, #0
//			CAR_Data.tractionControl.floatData = tractionControl;
//			CAR_Data.tractionControl.intData = tractionControl;

	static uint32_t millisTractionRefresh = 0;

	if(millis >= millisTractionRefresh + TRACTION_REFRESH_TIME)
 80030ac:	4b3e      	ldr	r3, [pc, #248]	; (80031a8 <tractionAcquisition+0x100>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f103 020a 	add.w	r2, r3, #10
 80030b4:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <tractionAcquisition+0x104>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d873      	bhi.n	80031a4 <tractionAcquisition+0xfc>
	{
		if(HAL_ADC_PollForConversion(&hadc3, 1) == HAL_OK)
 80030bc:	2101      	movs	r1, #1
 80030be:	483c      	ldr	r0, [pc, #240]	; (80031b0 <tractionAcquisition+0x108>)
 80030c0:	f00d fcb0 	bl	8010a24 <HAL_ADC_PollForConversion>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d16c      	bne.n	80031a4 <tractionAcquisition+0xfc>
		{
			TRACTION_AD_RESr = HAL_ADC_GetValue(&hadc3);
 80030ca:	4839      	ldr	r0, [pc, #228]	; (80031b0 <tractionAcquisition+0x108>)
 80030cc:	f00d fd35 	bl	8010b3a <HAL_ADC_GetValue>
 80030d0:	4603      	mov	r3, r0
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	4b37      	ldr	r3, [pc, #220]	; (80031b4 <tractionAcquisition+0x10c>)
 80030d6:	801a      	strh	r2, [r3, #0]

			static uint16_t adcStartFlag = 0;
			static uint16_t adcDataPointer = 0;
			static uint32_t tractionAdcFilterSum = 0;

			tractionAdcFilterSum -= tractionFilterBuffer[adcDataPointer];
 80030d8:	4b37      	ldr	r3, [pc, #220]	; (80031b8 <tractionAcquisition+0x110>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a37      	ldr	r2, [pc, #220]	; (80031bc <tractionAcquisition+0x114>)
 80030de:	8812      	ldrh	r2, [r2, #0]
 80030e0:	4611      	mov	r1, r2
 80030e2:	4a37      	ldr	r2, [pc, #220]	; (80031c0 <tractionAcquisition+0x118>)
 80030e4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	4a33      	ldr	r2, [pc, #204]	; (80031b8 <tractionAcquisition+0x110>)
 80030ec:	6013      	str	r3, [r2, #0]
			tractionFilterBuffer[adcDataPointer] = TRACTION_AD_RESr;
 80030ee:	4b33      	ldr	r3, [pc, #204]	; (80031bc <tractionAcquisition+0x114>)
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	4b2f      	ldr	r3, [pc, #188]	; (80031b4 <tractionAcquisition+0x10c>)
 80030f6:	8819      	ldrh	r1, [r3, #0]
 80030f8:	4b31      	ldr	r3, [pc, #196]	; (80031c0 <tractionAcquisition+0x118>)
 80030fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			tractionAdcFilterSum += TRACTION_AD_RESr;
 80030fe:	4b2d      	ldr	r3, [pc, #180]	; (80031b4 <tractionAcquisition+0x10c>)
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <tractionAcquisition+0x110>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4413      	add	r3, r2
 800310a:	4a2b      	ldr	r2, [pc, #172]	; (80031b8 <tractionAcquisition+0x110>)
 800310c:	6013      	str	r3, [r2, #0]

			tractionAdcFiltered = tractionAdcFilterSum / TRACTION_FILTER_SIZE;
 800310e:	4b2a      	ldr	r3, [pc, #168]	; (80031b8 <tractionAcquisition+0x110>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	b29a      	uxth	r2, r3
 8003114:	4b2b      	ldr	r3, [pc, #172]	; (80031c4 <tractionAcquisition+0x11c>)
 8003116:	801a      	strh	r2, [r3, #0]

			if(adcStartFlag < TRACTION_FILTER_SIZE)
 8003118:	4b2b      	ldr	r3, [pc, #172]	; (80031c8 <tractionAcquisition+0x120>)
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <tractionAcquisition+0x8c>
			{
				adcStartFlag++;
 8003120:	4b29      	ldr	r3, [pc, #164]	; (80031c8 <tractionAcquisition+0x120>)
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	3301      	adds	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <tractionAcquisition+0x120>)
 800312a:	801a      	strh	r2, [r3, #0]

				tractionAdcFiltered = TRACTION_AD_RESr;
 800312c:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <tractionAcquisition+0x10c>)
 800312e:	881a      	ldrh	r2, [r3, #0]
 8003130:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <tractionAcquisition+0x11c>)
 8003132:	801a      	strh	r2, [r3, #0]
			}

			if(adcDataPointer < TRACTION_FILTER_SIZE - 1)
				adcDataPointer++;
			else
				adcDataPointer = 0;
 8003134:	4b21      	ldr	r3, [pc, #132]	; (80031bc <tractionAcquisition+0x114>)
 8003136:	2200      	movs	r2, #0
 8003138:	801a      	strh	r2, [r3, #0]

			register uint8_t tractionTmp = 0;

			if		(tractionAdcFiltered <= TRACTION_OFF_UPPER_VALUE) 	tractionTmp = 0;
 800313a:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <tractionAcquisition+0x11c>)
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003142:	d801      	bhi.n	8003148 <tractionAcquisition+0xa0>
 8003144:	2400      	movs	r4, #0
 8003146:	e018      	b.n	800317a <tractionAcquisition+0xd2>
			else if	(tractionAdcFiltered <= TRACTION_1_UPPER_VALUE) 	tractionTmp = 1;
 8003148:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <tractionAcquisition+0x11c>)
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	f240 5214 	movw	r2, #1300	; 0x514
 8003150:	4293      	cmp	r3, r2
 8003152:	d801      	bhi.n	8003158 <tractionAcquisition+0xb0>
 8003154:	2401      	movs	r4, #1
 8003156:	e010      	b.n	800317a <tractionAcquisition+0xd2>
			else if	(tractionAdcFiltered <= TRACTION_2_UPPER_VALUE) 	tractionTmp = 2;
 8003158:	4b1a      	ldr	r3, [pc, #104]	; (80031c4 <tractionAcquisition+0x11c>)
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	f240 726c 	movw	r2, #1900	; 0x76c
 8003160:	4293      	cmp	r3, r2
 8003162:	d801      	bhi.n	8003168 <tractionAcquisition+0xc0>
 8003164:	2402      	movs	r4, #2
 8003166:	e008      	b.n	800317a <tractionAcquisition+0xd2>
			else if	(tractionAdcFiltered <= TRACTION_3_UPPER_VALUE) 	tractionTmp = 3;
 8003168:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <tractionAcquisition+0x11c>)
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	f640 0298 	movw	r2, #2200	; 0x898
 8003170:	4293      	cmp	r3, r2
 8003172:	d801      	bhi.n	8003178 <tractionAcquisition+0xd0>
 8003174:	2403      	movs	r4, #3
 8003176:	e000      	b.n	800317a <tractionAcquisition+0xd2>
			else 					 									tractionTmp = 4;
 8003178:	2404      	movs	r4, #4
//					tractionAdcFiltered <= TRACTION_3_UPPER_VALUE + TRACTION_VALUE_MARGIN)		tractionTmp = 3;
//			else if	(tractionAdcFiltered >= TRACTION_4_UPPER_VALUE - TRACTION_VALUE_MARGIN &&
//					tractionAdcFiltered <= TRACTION_4_UPPER_VALUE + TRACTION_VALUE_MARGIN)		tractionTmp = 4;
//			else																				tractionTmp = CAR_Data.tractionControl.intData;

			CAR_Data.tractionControl.floatData = tractionTmp;
 800317a:	ee07 4a90 	vmov	s15, r4
 800317e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003182:	4b12      	ldr	r3, [pc, #72]	; (80031cc <tractionAcquisition+0x124>)
 8003184:	edc3 7ac4 	vstr	s15, [r3, #784]	; 0x310
			CAR_Data.tractionControl.intData = tractionTmp;
 8003188:	4622      	mov	r2, r4
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <tractionAcquisition+0x124>)
 800318c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
			tractionControl = tractionTmp;
 8003190:	4622      	mov	r2, r4
 8003192:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <tractionAcquisition+0x128>)
 8003194:	601a      	str	r2, [r3, #0]

			millisTractionRefresh = millis;
 8003196:	4b05      	ldr	r3, [pc, #20]	; (80031ac <tractionAcquisition+0x104>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a03      	ldr	r2, [pc, #12]	; (80031a8 <tractionAcquisition+0x100>)
 800319c:	6013      	str	r3, [r2, #0]

			HAL_ADC_Start(&hadc3);				//traction ADC start conversion
 800319e:	4804      	ldr	r0, [pc, #16]	; (80031b0 <tractionAcquisition+0x108>)
 80031a0:	f00d fb3e 	bl	8010820 <HAL_ADC_Start>
		}
	}
}
 80031a4:	bf00      	nop
 80031a6:	bd98      	pop	{r3, r4, r7, pc}
 80031a8:	20001ab8 	.word	0x20001ab8
 80031ac:	20006a98 	.word	0x20006a98
 80031b0:	20001b70 	.word	0x20001b70
 80031b4:	20000410 	.word	0x20000410
 80031b8:	20001abc 	.word	0x20001abc
 80031bc:	20001ac0 	.word	0x20001ac0
 80031c0:	20000414 	.word	0x20000414
 80031c4:	20000416 	.word	0x20000416
 80031c8:	20001ac2 	.word	0x20001ac2
 80031cc:	2000041c 	.word	0x2000041c
 80031d0:	20002d40 	.word	0x20002d40

080031d4 <CAR_DATA_Calculations>:



void CAR_DATA_Calculations(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
	//Acceleration Time Calculation 0-100 Km/h BEGIN
	static uint32_t timeStartVariable = 0;
	static uint32_t timeEndVariable = 0;
	static uint8_t accelerationStatus = 0;

	if (speed < ACC_SPEED_THRESHOLD)		// < 5
 80031d8:	4b8b      	ldr	r3, [pc, #556]	; (8003408 <CAR_DATA_Calculations+0x234>)
 80031da:	edd3 7a00 	vldr	s15, [r3]
 80031de:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80031e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ea:	d506      	bpl.n	80031fa <CAR_DATA_Calculations+0x26>
	{
		timeStartVariable = millis;
 80031ec:	4b87      	ldr	r3, [pc, #540]	; (800340c <CAR_DATA_Calculations+0x238>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a87      	ldr	r2, [pc, #540]	; (8003410 <CAR_DATA_Calculations+0x23c>)
 80031f2:	6013      	str	r3, [r2, #0]

		accelerationStatus = 0;
 80031f4:	4b87      	ldr	r3, [pc, #540]	; (8003414 <CAR_DATA_Calculations+0x240>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
	}

	if (CAR_Data.speed.intData >= ACC_MAX_SPEED && accelerationStatus == 0)
 80031fa:	4b87      	ldr	r3, [pc, #540]	; (8003418 <CAR_DATA_Calculations+0x244>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	2b63      	cmp	r3, #99	; 0x63
 8003200:	dd0a      	ble.n	8003218 <CAR_DATA_Calculations+0x44>
 8003202:	4b84      	ldr	r3, [pc, #528]	; (8003414 <CAR_DATA_Calculations+0x240>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <CAR_DATA_Calculations+0x44>
	{
		timeEndVariable = millis;
 800320a:	4b80      	ldr	r3, [pc, #512]	; (800340c <CAR_DATA_Calculations+0x238>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a83      	ldr	r2, [pc, #524]	; (800341c <CAR_DATA_Calculations+0x248>)
 8003210:	6013      	str	r3, [r2, #0]

		accelerationStatus = 1;
 8003212:	4b80      	ldr	r3, [pc, #512]	; (8003414 <CAR_DATA_Calculations+0x240>)
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
	}

	if(accelerationStatus == 1)
 8003218:	4b7e      	ldr	r3, [pc, #504]	; (8003414 <CAR_DATA_Calculations+0x240>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d13e      	bne.n	800329e <CAR_DATA_Calculations+0xca>
	{
		CAR_Data.lastAccelerationTime = timeEndVariable - timeStartVariable;
 8003220:	4b7e      	ldr	r3, [pc, #504]	; (800341c <CAR_DATA_Calculations+0x248>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4b7a      	ldr	r3, [pc, #488]	; (8003410 <CAR_DATA_Calculations+0x23c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	4a7b      	ldr	r2, [pc, #492]	; (8003418 <CAR_DATA_Calculations+0x244>)
 800322c:	f8c2 380c 	str.w	r3, [r2, #2060]	; 0x80c

		if(CAR_Data.lastAccelerationTime >= ACC_MIN_TIME)
 8003230:	4b79      	ldr	r3, [pc, #484]	; (8003418 <CAR_DATA_Calculations+0x244>)
 8003232:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8003236:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800323a:	d32d      	bcc.n	8003298 <CAR_DATA_Calculations+0xc4>
		{
			if(CAR_Data.bestAccelerationTime != 0)
 800323c:	4b76      	ldr	r3, [pc, #472]	; (8003418 <CAR_DATA_Calculations+0x244>)
 800323e:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00c      	beq.n	8003260 <CAR_DATA_Calculations+0x8c>
				CAR_Data.bestAccelerationTime = min(CAR_Data.bestAccelerationTime, CAR_Data.lastAccelerationTime);
 8003246:	4b74      	ldr	r3, [pc, #464]	; (8003418 <CAR_DATA_Calculations+0x244>)
 8003248:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 800324c:	4b72      	ldr	r3, [pc, #456]	; (8003418 <CAR_DATA_Calculations+0x244>)
 800324e:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8003252:	4293      	cmp	r3, r2
 8003254:	bf28      	it	cs
 8003256:	4613      	movcs	r3, r2
 8003258:	4a6f      	ldr	r2, [pc, #444]	; (8003418 <CAR_DATA_Calculations+0x244>)
 800325a:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
 800325e:	e005      	b.n	800326c <CAR_DATA_Calculations+0x98>
			else
				CAR_Data.bestAccelerationTime = CAR_Data.lastAccelerationTime;
 8003260:	4b6d      	ldr	r3, [pc, #436]	; (8003418 <CAR_DATA_Calculations+0x244>)
 8003262:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8003266:	4a6c      	ldr	r2, [pc, #432]	; (8003418 <CAR_DATA_Calculations+0x244>)
 8003268:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810

			CAR_Data.lastAccelerationTime = min(CAR_Data.lastAccelerationTime, 9999);
 800326c:	4b6a      	ldr	r3, [pc, #424]	; (8003418 <CAR_DATA_Calculations+0x244>)
 800326e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8003272:	f242 720f 	movw	r2, #9999	; 0x270f
 8003276:	4293      	cmp	r3, r2
 8003278:	bf28      	it	cs
 800327a:	4613      	movcs	r3, r2
 800327c:	4a66      	ldr	r2, [pc, #408]	; (8003418 <CAR_DATA_Calculations+0x244>)
 800327e:	f8c2 380c 	str.w	r3, [r2, #2060]	; 0x80c
			CAR_Data.bestAccelerationTime = min(CAR_Data.bestAccelerationTime, 9999);
 8003282:	4b65      	ldr	r3, [pc, #404]	; (8003418 <CAR_DATA_Calculations+0x244>)
 8003284:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8003288:	f242 720f 	movw	r2, #9999	; 0x270f
 800328c:	4293      	cmp	r3, r2
 800328e:	bf28      	it	cs
 8003290:	4613      	movcs	r3, r2
 8003292:	4a61      	ldr	r2, [pc, #388]	; (8003418 <CAR_DATA_Calculations+0x244>)
 8003294:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
		}

		accelerationStatus = 3;
 8003298:	4b5e      	ldr	r3, [pc, #376]	; (8003414 <CAR_DATA_Calculations+0x240>)
 800329a:	2203      	movs	r2, #3
 800329c:	701a      	strb	r2, [r3, #0]

	//Brake Bias / Brake Balance calculation BEGIN

	static uint8_t flagBrakeBalFirsthBrake = 0;

	if((CAR_Data.brake.intData + CAR_Data.brakeRear.intData) > 10)
 800329e:	4b5e      	ldr	r3, [pc, #376]	; (8003418 <CAR_DATA_Calculations+0x244>)
 80032a0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80032a4:	4b5c      	ldr	r3, [pc, #368]	; (8003418 <CAR_DATA_Calculations+0x244>)
 80032a6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80032aa:	4413      	add	r3, r2
 80032ac:	2b0a      	cmp	r3, #10
 80032ae:	dd1d      	ble.n	80032ec <CAR_DATA_Calculations+0x118>
	{
		CAR_Data.brakeBias.floatData = ((float)CAR_Data.brake.intData / (CAR_Data.brake.intData + CAR_Data.brakeRear.intData)) * 100;
 80032b0:	4b59      	ldr	r3, [pc, #356]	; (8003418 <CAR_DATA_Calculations+0x244>)
 80032b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80032be:	4b56      	ldr	r3, [pc, #344]	; (8003418 <CAR_DATA_Calculations+0x244>)
 80032c0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80032c4:	4b54      	ldr	r3, [pc, #336]	; (8003418 <CAR_DATA_Calculations+0x244>)
 80032c6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80032ca:	4413      	add	r3, r2
 80032cc:	ee07 3a90 	vmov	s15, r3
 80032d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d8:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8003420 <CAR_DATA_Calculations+0x24c>
 80032dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032e0:	4b4d      	ldr	r3, [pc, #308]	; (8003418 <CAR_DATA_Calculations+0x244>)
 80032e2:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
		flagBrakeBalFirsthBrake = 1;
 80032e6:	4b4f      	ldr	r3, [pc, #316]	; (8003424 <CAR_DATA_Calculations+0x250>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
	}

	if(CAR_Data.brakeBias.floatData > 99)
 80032ec:	4b4a      	ldr	r3, [pc, #296]	; (8003418 <CAR_DATA_Calculations+0x244>)
 80032ee:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80032f2:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003428 <CAR_DATA_Calculations+0x254>
 80032f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fe:	dd04      	ble.n	800330a <CAR_DATA_Calculations+0x136>
		CAR_Data.brakeBias.floatData = 99;
 8003300:	4b45      	ldr	r3, [pc, #276]	; (8003418 <CAR_DATA_Calculations+0x244>)
 8003302:	4a4a      	ldr	r2, [pc, #296]	; (800342c <CAR_DATA_Calculations+0x258>)
 8003304:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 8003308:	e00c      	b.n	8003324 <CAR_DATA_Calculations+0x150>
	else if (CAR_Data.brakeBias.floatData < 0)
 800330a:	4b43      	ldr	r3, [pc, #268]	; (8003418 <CAR_DATA_Calculations+0x244>)
 800330c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8003310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003318:	d504      	bpl.n	8003324 <CAR_DATA_Calculations+0x150>
		CAR_Data.brakeBias.floatData = 0;
 800331a:	4b3f      	ldr	r3, [pc, #252]	; (8003418 <CAR_DATA_Calculations+0x244>)
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

	CAR_Data.brakeBias.intData = CAR_Data.brakeBias.floatData;
 8003324:	4b3c      	ldr	r3, [pc, #240]	; (8003418 <CAR_DATA_Calculations+0x244>)
 8003326:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 800332a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800332e:	ee17 2a90 	vmov	r2, s15
 8003332:	4b39      	ldr	r3, [pc, #228]	; (8003418 <CAR_DATA_Calculations+0x244>)
 8003334:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

	if(flagBrakeBalFirsthBrake)
 8003338:	4b3a      	ldr	r3, [pc, #232]	; (8003424 <CAR_DATA_Calculations+0x250>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00b      	beq.n	8003358 <CAR_DATA_Calculations+0x184>
		CAR_Data.brakeBias.lastTimeData = min(CAR_Data.brake.lastTimeData, CAR_Data.brakeRear.lastTimeData);
 8003340:	4b35      	ldr	r3, [pc, #212]	; (8003418 <CAR_DATA_Calculations+0x244>)
 8003342:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 8003346:	4b34      	ldr	r3, [pc, #208]	; (8003418 <CAR_DATA_Calculations+0x244>)
 8003348:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800334c:	4293      	cmp	r3, r2
 800334e:	bf28      	it	cs
 8003350:	4613      	movcs	r3, r2
 8003352:	4a31      	ldr	r2, [pc, #196]	; (8003418 <CAR_DATA_Calculations+0x244>)
 8003354:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
	//BSPD activation detected BEGIN

	static uint32_t millisCheckBSPD = 0;
	static uint32_t millisResetWarningBSPD = 0;

	if(millis < min(CAR_Data.brake.lastTimeData, CAR_Data.tps.lastTimeData) + 100)
 8003358:	4b2f      	ldr	r3, [pc, #188]	; (8003418 <CAR_DATA_Calculations+0x244>)
 800335a:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
 800335e:	4b2e      	ldr	r3, [pc, #184]	; (8003418 <CAR_DATA_Calculations+0x244>)
 8003360:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003364:	4293      	cmp	r3, r2
 8003366:	bf28      	it	cs
 8003368:	4613      	movcs	r3, r2
 800336a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800336e:	4b27      	ldr	r3, [pc, #156]	; (800340c <CAR_DATA_Calculations+0x238>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d960      	bls.n	8003438 <CAR_DATA_Calculations+0x264>
	{
		if(CAR_Data.brake.intData >= BSPD_BRAKE_THRESHOLD && CAR_Data.tps.intData >= BSPD_TPS_THRESHOLD)
 8003376:	4b28      	ldr	r3, [pc, #160]	; (8003418 <CAR_DATA_Calculations+0x244>)
 8003378:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800337c:	2b09      	cmp	r3, #9
 800337e:	dd08      	ble.n	8003392 <CAR_DATA_Calculations+0x1be>
 8003380:	4b25      	ldr	r3, [pc, #148]	; (8003418 <CAR_DATA_Calculations+0x244>)
 8003382:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8003386:	2b1d      	cmp	r3, #29
 8003388:	dd03      	ble.n	8003392 <CAR_DATA_Calculations+0x1be>
		{
			millisCheckBSPD = 0;
 800338a:	4b29      	ldr	r3, [pc, #164]	; (8003430 <CAR_DATA_Calculations+0x25c>)
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	e003      	b.n	800339a <CAR_DATA_Calculations+0x1c6>
		}
		else
		{
			millisCheckBSPD = millis;
 8003392:	4b1e      	ldr	r3, [pc, #120]	; (800340c <CAR_DATA_Calculations+0x238>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a26      	ldr	r2, [pc, #152]	; (8003430 <CAR_DATA_Calculations+0x25c>)
 8003398:	6013      	str	r3, [r2, #0]
		}

		if(millis >= millisCheckBSPD + BSPD_DETECTION_TIME)
 800339a:	4b25      	ldr	r3, [pc, #148]	; (8003430 <CAR_DATA_Calculations+0x25c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 80033a2:	4b1a      	ldr	r3, [pc, #104]	; (800340c <CAR_DATA_Calculations+0x238>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d807      	bhi.n	80033ba <CAR_DATA_Calculations+0x1e6>
		{
			CAR_Data.BSPD_warning = 1;
 80033aa:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <CAR_DATA_Calculations+0x244>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
			millisResetWarningBSPD = millis;
 80033b2:	4b16      	ldr	r3, [pc, #88]	; (800340c <CAR_DATA_Calculations+0x238>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <CAR_DATA_Calculations+0x260>)
 80033b8:	6013      	str	r3, [r2, #0]
		}

		if(CAR_Data.BSPD_warning != 0)
 80033ba:	4b17      	ldr	r3, [pc, #92]	; (8003418 <CAR_DATA_Calculations+0x244>)
 80033bc:	f893 3770 	ldrb.w	r3, [r3, #1904]	; 0x770
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d045      	beq.n	8003450 <CAR_DATA_Calculations+0x27c>
		{
			if(CAR_Data.tps.intData < 10 || CAR_Data.batteryVoltage.intData < 6)
 80033c4:	4b14      	ldr	r3, [pc, #80]	; (8003418 <CAR_DATA_Calculations+0x244>)
 80033c6:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80033ca:	2b09      	cmp	r3, #9
 80033cc:	dd04      	ble.n	80033d8 <CAR_DATA_Calculations+0x204>
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <CAR_DATA_Calculations+0x244>)
 80033d0:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 80033d4:	2b05      	cmp	r3, #5
 80033d6:	dc04      	bgt.n	80033e2 <CAR_DATA_Calculations+0x20e>
			{
				CAR_Data.BSPD_status_can.intData = 1;
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <CAR_DATA_Calculations+0x244>)
 80033da:	2201      	movs	r2, #1
 80033dc:	f8c3 278c 	str.w	r2, [r3, #1932]	; 0x78c
 80033e0:	e036      	b.n	8003450 <CAR_DATA_Calculations+0x27c>
			}
			else if(millis >= millisResetWarningBSPD + BSPD_TIME_RESET)
 80033e2:	4b14      	ldr	r3, [pc, #80]	; (8003434 <CAR_DATA_Calculations+0x260>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	f242 7310 	movw	r3, #10000	; 0x2710
 80033ea:	4413      	add	r3, r2
 80033ec:	4a07      	ldr	r2, [pc, #28]	; (800340c <CAR_DATA_Calculations+0x238>)
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d82d      	bhi.n	8003450 <CAR_DATA_Calculations+0x27c>
			{
				CAR_Data.BSPD_warning = 0;
 80033f4:	4b08      	ldr	r3, [pc, #32]	; (8003418 <CAR_DATA_Calculations+0x244>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
				CAR_Data.BSPD_status_can.intData = 0;
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <CAR_DATA_Calculations+0x244>)
 80033fe:	2200      	movs	r2, #0
 8003400:	f8c3 278c 	str.w	r2, [r3, #1932]	; 0x78c
 8003404:	e024      	b.n	8003450 <CAR_DATA_Calculations+0x27c>
 8003406:	bf00      	nop
 8003408:	2000002c 	.word	0x2000002c
 800340c:	20006a98 	.word	0x20006a98
 8003410:	20001ac4 	.word	0x20001ac4
 8003414:	20001ac8 	.word	0x20001ac8
 8003418:	2000041c 	.word	0x2000041c
 800341c:	20001acc 	.word	0x20001acc
 8003420:	42c80000 	.word	0x42c80000
 8003424:	20001ad0 	.word	0x20001ad0
 8003428:	42c60000 	.word	0x42c60000
 800342c:	42c60000 	.word	0x42c60000
 8003430:	20001ad4 	.word	0x20001ad4
 8003434:	20001ad8 	.word	0x20001ad8
			}
		}
	}
	else
	{
		CAR_Data.BSPD_warning = 0;
 8003438:	4b6c      	ldr	r3, [pc, #432]	; (80035ec <CAR_DATA_Calculations+0x418>)
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
		CAR_Data.BSPD_status_can.intData = 0;
 8003440:	4b6a      	ldr	r3, [pc, #424]	; (80035ec <CAR_DATA_Calculations+0x418>)
 8003442:	2200      	movs	r2, #0
 8003444:	f8c3 278c 	str.w	r2, [r3, #1932]	; 0x78c
		millisCheckBSPD = millis;
 8003448:	4b69      	ldr	r3, [pc, #420]	; (80035f0 <CAR_DATA_Calculations+0x41c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a69      	ldr	r2, [pc, #420]	; (80035f4 <CAR_DATA_Calculations+0x420>)
 800344e:	6013      	str	r3, [r2, #0]
	}

	//CAR_Data.BSPD_status_can.intData = 0; ///WARNING: only DEBUG

	CAR_Data.BSPD_status_can.oldIntData = CAR_Data.BSPD_status_can.intData;
 8003450:	4b66      	ldr	r3, [pc, #408]	; (80035ec <CAR_DATA_Calculations+0x418>)
 8003452:	f8d3 378c 	ldr.w	r3, [r3, #1932]	; 0x78c
 8003456:	4a65      	ldr	r2, [pc, #404]	; (80035ec <CAR_DATA_Calculations+0x418>)
 8003458:	f8c2 3794 	str.w	r3, [r2, #1940]	; 0x794
	CAR_Data.BSPD_status_can.oldFloatData = CAR_Data.BSPD_status_can.floatData;
 800345c:	4b63      	ldr	r3, [pc, #396]	; (80035ec <CAR_DATA_Calculations+0x418>)
 800345e:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4b61      	ldr	r3, [pc, #388]	; (80035ec <CAR_DATA_Calculations+0x418>)
 8003466:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 800346a:	601a      	str	r2, [r3, #0]

	CAR_Data.BSPD_status_can.floatData = CAR_Data.BSPD_status_can.intData;
 800346c:	4b5f      	ldr	r3, [pc, #380]	; (80035ec <CAR_DATA_Calculations+0x418>)
 800346e:	f8d3 378c 	ldr.w	r3, [r3, #1932]	; 0x78c
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800347a:	4b5c      	ldr	r3, [pc, #368]	; (80035ec <CAR_DATA_Calculations+0x418>)
 800347c:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 8003480:	edc3 7a00 	vstr	s15, [r3]

	CAR_Data.BSPD_status_can.oldTimeData = CAR_Data.BSPD_status_can.lastTimeData;
 8003484:	4b59      	ldr	r3, [pc, #356]	; (80035ec <CAR_DATA_Calculations+0x418>)
 8003486:	f8d3 3798 	ldr.w	r3, [r3, #1944]	; 0x798
 800348a:	4a58      	ldr	r2, [pc, #352]	; (80035ec <CAR_DATA_Calculations+0x418>)
 800348c:	f8c2 379c 	str.w	r3, [r2, #1948]	; 0x79c
	CAR_Data.BSPD_status_can.lastTimeData = min(CAR_Data.brake.lastTimeData, CAR_Data.tps.lastTimeData);
 8003490:	4b56      	ldr	r3, [pc, #344]	; (80035ec <CAR_DATA_Calculations+0x418>)
 8003492:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
 8003496:	4b55      	ldr	r3, [pc, #340]	; (80035ec <CAR_DATA_Calculations+0x418>)
 8003498:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800349c:	4293      	cmp	r3, r2
 800349e:	bf28      	it	cs
 80034a0:	4613      	movcs	r3, r2
 80034a2:	4a52      	ldr	r2, [pc, #328]	; (80035ec <CAR_DATA_Calculations+0x418>)
 80034a4:	f8c2 3798 	str.w	r3, [r2, #1944]	; 0x798
	//ALARMS activation control BEGIN

	static uint32_t millisWaitAlarmsEngineStart = 0;
	static uint8_t alarmsEngineStartFlag = 0;

	if(millis <= CAR_Data.rpm.lastTimeData + 1000)
 80034a8:	4b50      	ldr	r3, [pc, #320]	; (80035ec <CAR_DATA_Calculations+0x418>)
 80034aa:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 80034ae:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80034b2:	4b4f      	ldr	r3, [pc, #316]	; (80035f0 <CAR_DATA_Calculations+0x41c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d33b      	bcc.n	8003532 <CAR_DATA_Calculations+0x35e>
	{
		if(CAR_Data.rpm.intData <= 1000)
 80034ba:	4b4c      	ldr	r3, [pc, #304]	; (80035ec <CAR_DATA_Calculations+0x418>)
 80034bc:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80034c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034c4:	dc16      	bgt.n	80034f4 <CAR_DATA_Calculations+0x320>
		{
			millisWaitAlarmsEngineStart = millis;
 80034c6:	4b4a      	ldr	r3, [pc, #296]	; (80035f0 <CAR_DATA_Calculations+0x41c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a4b      	ldr	r2, [pc, #300]	; (80035f8 <CAR_DATA_Calculations+0x424>)
 80034cc:	6013      	str	r3, [r2, #0]


			CAN_DATA_GuiPopUp_Disable(2);		//Water Temperature, 	range
 80034ce:	2002      	movs	r0, #2
 80034d0:	f001 fa4e 	bl	8004970 <CAN_DATA_GuiPopUp_Disable>
			CAN_DATA_GuiPopUp_Disable(3);		//Oil Temperature,		range
 80034d4:	2003      	movs	r0, #3
 80034d6:	f001 fa4b 	bl	8004970 <CAN_DATA_GuiPopUp_Disable>
			CAN_DATA_GuiPopUp_Disable(4);		//Fuel Pressure, 		range
 80034da:	2004      	movs	r0, #4
 80034dc:	f001 fa48 	bl	8004970 <CAN_DATA_GuiPopUp_Disable>
			CAN_DATA_GuiPopUp_Disable(5);		//Oil Pressure, 		range
 80034e0:	2005      	movs	r0, #5
 80034e2:	f001 fa45 	bl	8004970 <CAN_DATA_GuiPopUp_Disable>
			//CAN_DATA_GuiPopUp_Disable(6);		//RPM,					range

			CAN_DATA_GuiPopUp_Disable(9);		//Water pump,			range
 80034e6:	2009      	movs	r0, #9
 80034e8:	f001 fa42 	bl	8004970 <CAN_DATA_GuiPopUp_Disable>

			alarmsEngineStartFlag = 0;
 80034ec:	4b43      	ldr	r3, [pc, #268]	; (80035fc <CAR_DATA_Calculations+0x428>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	e01e      	b.n	8003532 <CAR_DATA_Calculations+0x35e>
		}
		else
		{
			if(alarmsEngineStartFlag == 0 && millis >= millisWaitAlarmsEngineStart + 5000)
 80034f4:	4b41      	ldr	r3, [pc, #260]	; (80035fc <CAR_DATA_Calculations+0x428>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d11a      	bne.n	8003532 <CAR_DATA_Calculations+0x35e>
 80034fc:	4b3e      	ldr	r3, [pc, #248]	; (80035f8 <CAR_DATA_Calculations+0x424>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	f241 3388 	movw	r3, #5000	; 0x1388
 8003504:	4413      	add	r3, r2
 8003506:	4a3a      	ldr	r2, [pc, #232]	; (80035f0 <CAR_DATA_Calculations+0x41c>)
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	4293      	cmp	r3, r2
 800350c:	d811      	bhi.n	8003532 <CAR_DATA_Calculations+0x35e>
			{
				CAN_DATA_GuiRangePopUp_Enable(2);		//Water Temperature, 	range
 800350e:	2002      	movs	r0, #2
 8003510:	f001 fa6c 	bl	80049ec <CAN_DATA_GuiRangePopUp_Enable>
				CAN_DATA_GuiRangePopUp_Enable(3);		//Oil Temperature,		range
 8003514:	2003      	movs	r0, #3
 8003516:	f001 fa69 	bl	80049ec <CAN_DATA_GuiRangePopUp_Enable>
				CAN_DATA_GuiRangePopUp_Enable(4);		//Fuel Pressure, 		range
 800351a:	2004      	movs	r0, #4
 800351c:	f001 fa66 	bl	80049ec <CAN_DATA_GuiRangePopUp_Enable>
				CAN_DATA_GuiRangePopUp_Enable(5);		//Oil Pressure, 		range
 8003520:	2005      	movs	r0, #5
 8003522:	f001 fa63 	bl	80049ec <CAN_DATA_GuiRangePopUp_Enable>
				//CAN_DATA_GuiRangePopUp_Enable(6);		//RPM,					range

				CAN_DATA_GuiRangePopUp_Enable(9);		//Water pump,			range
 8003526:	2009      	movs	r0, #9
 8003528:	f001 fa60 	bl	80049ec <CAN_DATA_GuiRangePopUp_Enable>

				alarmsEngineStartFlag = 1;
 800352c:	4b33      	ldr	r3, [pc, #204]	; (80035fc <CAR_DATA_Calculations+0x428>)
 800352e:	2201      	movs	r2, #1
 8003530:	701a      	strb	r2, [r3, #0]

	//ALARMS activation control END


	//Old car data refresh (for old code) BEGIN
	vBat 					= CAR_Data.batteryVoltage.floatData;
 8003532:	4b2e      	ldr	r3, [pc, #184]	; (80035ec <CAR_DATA_Calculations+0x418>)
 8003534:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a31      	ldr	r2, [pc, #196]	; (8003600 <CAR_DATA_Calculations+0x42c>)
 800353c:	6013      	str	r3, [r2, #0]
	gear 					= CAR_Data.gear.intData;
 800353e:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <CAR_DATA_Calculations+0x418>)
 8003540:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003544:	4a2f      	ldr	r2, [pc, #188]	; (8003604 <CAR_DATA_Calculations+0x430>)
 8003546:	6013      	str	r3, [r2, #0]
	tOil 					= CAR_Data.oilTemp.floatData;
 8003548:	4b28      	ldr	r3, [pc, #160]	; (80035ec <CAR_DATA_Calculations+0x418>)
 800354a:	f203 5324 	addw	r3, r3, #1316	; 0x524
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a2d      	ldr	r2, [pc, #180]	; (8003608 <CAR_DATA_Calculations+0x434>)
 8003552:	6013      	str	r3, [r2, #0]
	tWater 					= CAR_Data.waterTemp.floatData;
 8003554:	4b25      	ldr	r3, [pc, #148]	; (80035ec <CAR_DATA_Calculations+0x418>)
 8003556:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a2b      	ldr	r2, [pc, #172]	; (800360c <CAR_DATA_Calculations+0x438>)
 800355e:	6013      	str	r3, [r2, #0]
	tAir 					= CAR_Data.airTemp.floatData;
 8003560:	4b22      	ldr	r3, [pc, #136]	; (80035ec <CAR_DATA_Calculations+0x418>)
 8003562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003564:	4a2a      	ldr	r2, [pc, #168]	; (8003610 <CAR_DATA_Calculations+0x43c>)
 8003566:	6013      	str	r3, [r2, #0]
	drsStatus 				= CAR_Data.drsStatus.intData;
 8003568:	4b20      	ldr	r3, [pc, #128]	; (80035ec <CAR_DATA_Calculations+0x418>)
 800356a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800356e:	4a29      	ldr	r2, [pc, #164]	; (8003614 <CAR_DATA_Calculations+0x440>)
 8003570:	6013      	str	r3, [r2, #0]
	map 					= CAR_Data.map.intData;
 8003572:	4b1e      	ldr	r3, [pc, #120]	; (80035ec <CAR_DATA_Calculations+0x418>)
 8003574:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8003578:	4a27      	ldr	r2, [pc, #156]	; (8003618 <CAR_DATA_Calculations+0x444>)
 800357a:	6013      	str	r3, [r2, #0]
	//map_pp					= map + 1; //used to have map + 1
	tractionControl 		= CAR_Data.tractionControl.intData;
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <CAR_DATA_Calculations+0x418>)
 800357e:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8003582:	4a26      	ldr	r2, [pc, #152]	; (800361c <CAR_DATA_Calculations+0x448>)
 8003584:	6013      	str	r3, [r2, #0]
	pOil 					= CAR_Data.oilPressure.floatData;
 8003586:	4b19      	ldr	r3, [pc, #100]	; (80035ec <CAR_DATA_Calculations+0x418>)
 8003588:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 800358c:	4a24      	ldr	r2, [pc, #144]	; (8003620 <CAR_DATA_Calculations+0x44c>)
 800358e:	6013      	str	r3, [r2, #0]
	rpm 					= CAR_Data.rpm.intData;
 8003590:	4b16      	ldr	r3, [pc, #88]	; (80035ec <CAR_DATA_Calculations+0x418>)
 8003592:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8003596:	4a23      	ldr	r2, [pc, #140]	; (8003624 <CAR_DATA_Calculations+0x450>)
 8003598:	6013      	str	r3, [r2, #0]
	tps 					= CAR_Data.tps.intData;
 800359a:	4b14      	ldr	r3, [pc, #80]	; (80035ec <CAR_DATA_Calculations+0x418>)
 800359c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80035a0:	4a21      	ldr	r2, [pc, #132]	; (8003628 <CAR_DATA_Calculations+0x454>)
 80035a2:	6013      	str	r3, [r2, #0]
	//launchControlStatus 	= CAR_Data.launchStatus.intData;
	gs 						= 0;
 80035a4:	4b21      	ldr	r3, [pc, #132]	; (800362c <CAR_DATA_Calculations+0x458>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
	pedal 					= CAR_Data.pedal.intData;
 80035aa:	4b10      	ldr	r3, [pc, #64]	; (80035ec <CAR_DATA_Calculations+0x418>)
 80035ac:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80035b0:	4a1f      	ldr	r2, [pc, #124]	; (8003630 <CAR_DATA_Calculations+0x45c>)
 80035b2:	6013      	str	r3, [r2, #0]
	speed 					= CAR_Data.speed.floatData;
 80035b4:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <CAR_DATA_Calculations+0x418>)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	4a1e      	ldr	r2, [pc, #120]	; (8003634 <CAR_DATA_Calculations+0x460>)
 80035ba:	6013      	str	r3, [r2, #0]
	steer 					= CAR_Data.steer.intData;
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <CAR_DATA_Calculations+0x418>)
 80035be:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80035c2:	4a1d      	ldr	r2, [pc, #116]	; (8003638 <CAR_DATA_Calculations+0x464>)
 80035c4:	6013      	str	r3, [r2, #0]
	slip 					= CAR_Data.slip.intData;
 80035c6:	4b09      	ldr	r3, [pc, #36]	; (80035ec <CAR_DATA_Calculations+0x418>)
 80035c8:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
 80035cc:	4a1b      	ldr	r2, [pc, #108]	; (800363c <CAR_DATA_Calculations+0x468>)
 80035ce:	6013      	str	r3, [r2, #0]
	brake 					= CAR_Data.brake.intData;
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <CAR_DATA_Calculations+0x418>)
 80035d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035d6:	4a1a      	ldr	r2, [pc, #104]	; (8003640 <CAR_DATA_Calculations+0x46c>)
 80035d8:	6013      	str	r3, [r2, #0]
	pFuel 					= CAR_Data.fuelPressure.floatData;
 80035da:	4b04      	ldr	r3, [pc, #16]	; (80035ec <CAR_DATA_Calculations+0x418>)
 80035dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a18      	ldr	r2, [pc, #96]	; (8003644 <CAR_DATA_Calculations+0x470>)
 80035e4:	6013      	str	r3, [r2, #0]
	//Old car data refresh (for old code) END
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	2000041c 	.word	0x2000041c
 80035f0:	20006a98 	.word	0x20006a98
 80035f4:	20001ad4 	.word	0x20001ad4
 80035f8:	20001adc 	.word	0x20001adc
 80035fc:	20001ae0 	.word	0x20001ae0
 8003600:	20000008 	.word	0x20000008
 8003604:	20002d34 	.word	0x20002d34
 8003608:	2000000c 	.word	0x2000000c
 800360c:	20000010 	.word	0x20000010
 8003610:	20000014 	.word	0x20000014
 8003614:	20002d38 	.word	0x20002d38
 8003618:	20002d3c 	.word	0x20002d3c
 800361c:	20002d40 	.word	0x20002d40
 8003620:	2000001c 	.word	0x2000001c
 8003624:	20000020 	.word	0x20000020
 8003628:	20000024 	.word	0x20000024
 800362c:	20002d48 	.word	0x20002d48
 8003630:	20000028 	.word	0x20000028
 8003634:	2000002c 	.word	0x2000002c
 8003638:	20002d4c 	.word	0x20002d4c
 800363c:	20002d50 	.word	0x20002d50
 8003640:	20002d54 	.word	0x20002d54
 8003644:	20000030 	.word	0x20000030

08003648 <CAR_DATA_GuiAlarm_Init>:

void AlarmPage(char* string, CAN_DATA_Typedef* dataPointer, uint32_t messageColor, uint32_t dataColor, uint32_t backColor);


void CAR_DATA_GuiAlarm_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af06      	add	r7, sp, #24
	uint16_t setupError = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	80fb      	strh	r3, [r7, #6]

	//setupError += CAN_DATA_GuiChangePopUp_Add(0, &CAR_Data.tractionControl, 0, 1000, 0, "Traction", GUI_BLACK, GUI_BLACK, ARGB_CREATE(0, 100, 100, 255));
	setupError += CAN_DATA_GuiChangePopUp_Add(0, &CAR_Data.tractionControl, 0, 800, 100, "Traction", GUI_BLACK, GUI_BLACK, ARGB_CREATE(0, 100, 100, 255));
 8003652:	4b81      	ldr	r3, [pc, #516]	; (8003858 <CAR_DATA_GuiAlarm_Init+0x210>)
 8003654:	9304      	str	r3, [sp, #16]
 8003656:	2300      	movs	r3, #0
 8003658:	9303      	str	r3, [sp, #12]
 800365a:	2300      	movs	r3, #0
 800365c:	9302      	str	r3, [sp, #8]
 800365e:	4b7f      	ldr	r3, [pc, #508]	; (800385c <CAR_DATA_GuiAlarm_Init+0x214>)
 8003660:	9301      	str	r3, [sp, #4]
 8003662:	2364      	movs	r3, #100	; 0x64
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	f44f 7348 	mov.w	r3, #800	; 0x320
 800366a:	2200      	movs	r2, #0
 800366c:	497c      	ldr	r1, [pc, #496]	; (8003860 <CAR_DATA_GuiAlarm_Init+0x218>)
 800366e:	2000      	movs	r0, #0
 8003670:	f000 ffc2 	bl	80045f8 <CAN_DATA_GuiChangePopUp_Add>
 8003674:	4603      	mov	r3, r0
 8003676:	b29a      	uxth	r2, r3
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	4413      	add	r3, r2
 800367c:	80fb      	strh	r3, [r7, #6]
	setupError += CAN_DATA_GuiChangePopUp_Add(1, &CAR_Data.map, 0, 800, 100, "MAP", GUI_BLACK, GUI_BLACK, ARGB_CREATE(0, 100, 100, 255));
 800367e:	4b76      	ldr	r3, [pc, #472]	; (8003858 <CAR_DATA_GuiAlarm_Init+0x210>)
 8003680:	9304      	str	r3, [sp, #16]
 8003682:	2300      	movs	r3, #0
 8003684:	9303      	str	r3, [sp, #12]
 8003686:	2300      	movs	r3, #0
 8003688:	9302      	str	r3, [sp, #8]
 800368a:	4b76      	ldr	r3, [pc, #472]	; (8003864 <CAR_DATA_GuiAlarm_Init+0x21c>)
 800368c:	9301      	str	r3, [sp, #4]
 800368e:	2364      	movs	r3, #100	; 0x64
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003696:	2200      	movs	r2, #0
 8003698:	4973      	ldr	r1, [pc, #460]	; (8003868 <CAR_DATA_GuiAlarm_Init+0x220>)
 800369a:	2001      	movs	r0, #1
 800369c:	f000 ffac 	bl	80045f8 <CAN_DATA_GuiChangePopUp_Add>
 80036a0:	4603      	mov	r3, r0
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	4413      	add	r3, r2
 80036a8:	80fb      	strh	r3, [r7, #6]

//	setupError += CAN_DATA_GuiChangePopUp_Add(99, &CAR_Data.tractionControl, 0, 1000, 100, "TRACTION TEST", GUI_BLACK, GUI_BLACK, ARGB_CREATE(0, 100, 255, 100));


	setupError += CAN_DATA_GuiRangePopUp_Add(2, &CAR_Data.waterTemp, 1000, 4000, 60000, "Water Temperature", GUI_BLACK, GUI_BLACK, GUI_BLUE, GUI_RED);
 80036aa:	23ff      	movs	r3, #255	; 0xff
 80036ac:	9305      	str	r3, [sp, #20]
 80036ae:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80036b2:	9304      	str	r3, [sp, #16]
 80036b4:	2300      	movs	r3, #0
 80036b6:	9303      	str	r3, [sp, #12]
 80036b8:	2300      	movs	r3, #0
 80036ba:	9302      	str	r3, [sp, #8]
 80036bc:	4b6b      	ldr	r3, [pc, #428]	; (800386c <CAR_DATA_GuiAlarm_Init+0x224>)
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80036ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036ce:	4968      	ldr	r1, [pc, #416]	; (8003870 <CAR_DATA_GuiAlarm_Init+0x228>)
 80036d0:	2002      	movs	r0, #2
 80036d2:	f001 f86f 	bl	80047b4 <CAN_DATA_GuiRangePopUp_Add>
 80036d6:	4603      	mov	r3, r0
 80036d8:	b29a      	uxth	r2, r3
 80036da:	88fb      	ldrh	r3, [r7, #6]
 80036dc:	4413      	add	r3, r2
 80036de:	80fb      	strh	r3, [r7, #6]
	setupError += CAN_DATA_GuiRangePopUp_Add(3, &CAR_Data.oilTemp, 1000, 4000, 60000, "Oil Temperature", GUI_BLACK, GUI_BLACK, GUI_BLUE, GUI_RED);
 80036e0:	23ff      	movs	r3, #255	; 0xff
 80036e2:	9305      	str	r3, [sp, #20]
 80036e4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80036e8:	9304      	str	r3, [sp, #16]
 80036ea:	2300      	movs	r3, #0
 80036ec:	9303      	str	r3, [sp, #12]
 80036ee:	2300      	movs	r3, #0
 80036f0:	9302      	str	r3, [sp, #8]
 80036f2:	4b60      	ldr	r3, [pc, #384]	; (8003874 <CAR_DATA_GuiAlarm_Init+0x22c>)
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8003700:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003704:	495c      	ldr	r1, [pc, #368]	; (8003878 <CAR_DATA_GuiAlarm_Init+0x230>)
 8003706:	2003      	movs	r0, #3
 8003708:	f001 f854 	bl	80047b4 <CAN_DATA_GuiRangePopUp_Add>
 800370c:	4603      	mov	r3, r0
 800370e:	b29a      	uxth	r2, r3
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	4413      	add	r3, r2
 8003714:	80fb      	strh	r3, [r7, #6]

	setupError += CAN_DATA_GuiRangePopUp_Add(4, &CAR_Data.fuelPressure, 500, 4000, 60000, "Fuel Pressure", GUI_BLACK, GUI_BLACK, GUI_RED, GUI_RED);
 8003716:	23ff      	movs	r3, #255	; 0xff
 8003718:	9305      	str	r3, [sp, #20]
 800371a:	23ff      	movs	r3, #255	; 0xff
 800371c:	9304      	str	r3, [sp, #16]
 800371e:	2300      	movs	r3, #0
 8003720:	9303      	str	r3, [sp, #12]
 8003722:	2300      	movs	r3, #0
 8003724:	9302      	str	r3, [sp, #8]
 8003726:	4b55      	ldr	r3, [pc, #340]	; (800387c <CAR_DATA_GuiAlarm_Init+0x234>)
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8003734:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003738:	4951      	ldr	r1, [pc, #324]	; (8003880 <CAR_DATA_GuiAlarm_Init+0x238>)
 800373a:	2004      	movs	r0, #4
 800373c:	f001 f83a 	bl	80047b4 <CAN_DATA_GuiRangePopUp_Add>
 8003740:	4603      	mov	r3, r0
 8003742:	b29a      	uxth	r2, r3
 8003744:	88fb      	ldrh	r3, [r7, #6]
 8003746:	4413      	add	r3, r2
 8003748:	80fb      	strh	r3, [r7, #6]
	setupError += CAN_DATA_GuiRangePopUp_Add(5, &CAR_Data.oilPressure, 500, 4000, 60000, "Oil Pressure", GUI_BLACK, GUI_BLACK, GUI_RED, GUI_RED);
 800374a:	23ff      	movs	r3, #255	; 0xff
 800374c:	9305      	str	r3, [sp, #20]
 800374e:	23ff      	movs	r3, #255	; 0xff
 8003750:	9304      	str	r3, [sp, #16]
 8003752:	2300      	movs	r3, #0
 8003754:	9303      	str	r3, [sp, #12]
 8003756:	2300      	movs	r3, #0
 8003758:	9302      	str	r3, [sp, #8]
 800375a:	4b4a      	ldr	r3, [pc, #296]	; (8003884 <CAR_DATA_GuiAlarm_Init+0x23c>)
 800375c:	9301      	str	r3, [sp, #4]
 800375e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8003768:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800376c:	4946      	ldr	r1, [pc, #280]	; (8003888 <CAR_DATA_GuiAlarm_Init+0x240>)
 800376e:	2005      	movs	r0, #5
 8003770:	f001 f820 	bl	80047b4 <CAN_DATA_GuiRangePopUp_Add>
 8003774:	4603      	mov	r3, r0
 8003776:	b29a      	uxth	r2, r3
 8003778:	88fb      	ldrh	r3, [r7, #6]
 800377a:	4413      	add	r3, r2
 800377c:	80fb      	strh	r3, [r7, #6]

	setupError += CAN_DATA_GuiRangePopUp_Add(6, &CAR_Data.rpm, 0, 1000, 5000, "TOO HIGH RPM", GUI_BLACK, GUI_BLACK, GUI_RED, GUI_RED);
 800377e:	23ff      	movs	r3, #255	; 0xff
 8003780:	9305      	str	r3, [sp, #20]
 8003782:	23ff      	movs	r3, #255	; 0xff
 8003784:	9304      	str	r3, [sp, #16]
 8003786:	2300      	movs	r3, #0
 8003788:	9303      	str	r3, [sp, #12]
 800378a:	2300      	movs	r3, #0
 800378c:	9302      	str	r3, [sp, #8]
 800378e:	4b3f      	ldr	r3, [pc, #252]	; (800388c <CAR_DATA_GuiAlarm_Init+0x244>)
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	f241 3388 	movw	r3, #5000	; 0x1388
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800379c:	2200      	movs	r2, #0
 800379e:	493c      	ldr	r1, [pc, #240]	; (8003890 <CAR_DATA_GuiAlarm_Init+0x248>)
 80037a0:	2006      	movs	r0, #6
 80037a2:	f001 f807 	bl	80047b4 <CAN_DATA_GuiRangePopUp_Add>
 80037a6:	4603      	mov	r3, r0
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	4413      	add	r3, r2
 80037ae:	80fb      	strh	r3, [r7, #6]

	if(BSPD_V3_ON_CAR == TRUE)
		setupError += CAN_DATA_GuiRangePopUp_Add(7, &CAR_Data.BSPD_status_can, 0, 11000, 20000, "BSPD ACTIVATED", GUI_BLACK, GUI_BLACK, GUI_GREEN, GUI_RED);
	else
		setupError += CAN_DATA_GuiRangePopUp_Add(7, &CAR_Data.BSPD_status_can, 1000, 10000, 10000, "BSPD ACTIVATED", GUI_BLACK, GUI_BLACK, GUI_GREEN, GUI_RED);
 80037b0:	23ff      	movs	r3, #255	; 0xff
 80037b2:	9305      	str	r3, [sp, #20]
 80037b4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80037b8:	9304      	str	r3, [sp, #16]
 80037ba:	2300      	movs	r3, #0
 80037bc:	9303      	str	r3, [sp, #12]
 80037be:	2300      	movs	r3, #0
 80037c0:	9302      	str	r3, [sp, #8]
 80037c2:	4b34      	ldr	r3, [pc, #208]	; (8003894 <CAR_DATA_GuiAlarm_Init+0x24c>)
 80037c4:	9301      	str	r3, [sp, #4]
 80037c6:	f242 7310 	movw	r3, #10000	; 0x2710
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80037d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037d4:	4930      	ldr	r1, [pc, #192]	; (8003898 <CAR_DATA_GuiAlarm_Init+0x250>)
 80037d6:	2007      	movs	r0, #7
 80037d8:	f000 ffec 	bl	80047b4 <CAN_DATA_GuiRangePopUp_Add>
 80037dc:	4603      	mov	r3, r0
 80037de:	b29a      	uxth	r2, r3
 80037e0:	88fb      	ldrh	r3, [r7, #6]
 80037e2:	4413      	add	r3, r2
 80037e4:	80fb      	strh	r3, [r7, #6]


	setupError += CAN_DATA_GuiChangePopUp_Add(8, &CAR_Data.waterPumpStatus, 0, 5000,     0, "Water pump", GUI_BLACK, GUI_BLACK, GUI_RED);
 80037e6:	23ff      	movs	r3, #255	; 0xff
 80037e8:	9304      	str	r3, [sp, #16]
 80037ea:	2300      	movs	r3, #0
 80037ec:	9303      	str	r3, [sp, #12]
 80037ee:	2300      	movs	r3, #0
 80037f0:	9302      	str	r3, [sp, #8]
 80037f2:	4b2a      	ldr	r3, [pc, #168]	; (800389c <CAR_DATA_GuiAlarm_Init+0x254>)
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	2300      	movs	r3, #0
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80037fe:	2200      	movs	r2, #0
 8003800:	4927      	ldr	r1, [pc, #156]	; (80038a0 <CAR_DATA_GuiAlarm_Init+0x258>)
 8003802:	2008      	movs	r0, #8
 8003804:	f000 fef8 	bl	80045f8 <CAN_DATA_GuiChangePopUp_Add>
 8003808:	4603      	mov	r3, r0
 800380a:	b29a      	uxth	r2, r3
 800380c:	88fb      	ldrh	r3, [r7, #6]
 800380e:	4413      	add	r3, r2
 8003810:	80fb      	strh	r3, [r7, #6]
	setupError += CAN_DATA_GuiRangePopUp_Add( 9, &CAR_Data.waterPumpStatus, 0, 5000, 10000, "Water pump", GUI_BLACK, GUI_BLACK, GUI_RED, GUI_RED);
 8003812:	23ff      	movs	r3, #255	; 0xff
 8003814:	9305      	str	r3, [sp, #20]
 8003816:	23ff      	movs	r3, #255	; 0xff
 8003818:	9304      	str	r3, [sp, #16]
 800381a:	2300      	movs	r3, #0
 800381c:	9303      	str	r3, [sp, #12]
 800381e:	2300      	movs	r3, #0
 8003820:	9302      	str	r3, [sp, #8]
 8003822:	4b1e      	ldr	r3, [pc, #120]	; (800389c <CAR_DATA_GuiAlarm_Init+0x254>)
 8003824:	9301      	str	r3, [sp, #4]
 8003826:	f242 7310 	movw	r3, #10000	; 0x2710
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003830:	2200      	movs	r2, #0
 8003832:	491b      	ldr	r1, [pc, #108]	; (80038a0 <CAR_DATA_GuiAlarm_Init+0x258>)
 8003834:	2009      	movs	r0, #9
 8003836:	f000 ffbd 	bl	80047b4 <CAN_DATA_GuiRangePopUp_Add>
 800383a:	4603      	mov	r3, r0
 800383c:	b29a      	uxth	r2, r3
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	4413      	add	r3, r2
 8003842:	80fb      	strh	r3, [r7, #6]

	if(setupError != 0)
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <CAR_DATA_GuiAlarm_Init+0x206>
		Error_Handler();
 800384a:	f002 ff2b 	bl	80066a4 <Error_Handler>
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	00ff6464 	.word	0x00ff6464
 800385c:	08022280 	.word	0x08022280
 8003860:	20000718 	.word	0x20000718
 8003864:	0802228c 	.word	0x0802228c
 8003868:	200007b0 	.word	0x200007b0
 800386c:	08022290 	.word	0x08022290
 8003870:	200008e0 	.word	0x200008e0
 8003874:	080222a4 	.word	0x080222a4
 8003878:	2000092c 	.word	0x2000092c
 800387c:	080222b4 	.word	0x080222b4
 8003880:	20000848 	.word	0x20000848
 8003884:	080222c4 	.word	0x080222c4
 8003888:	200007fc 	.word	0x200007fc
 800388c:	080222d4 	.word	0x080222d4
 8003890:	20000634 	.word	0x20000634
 8003894:	080222e4 	.word	0x080222e4
 8003898:	20000b90 	.word	0x20000b90
 800389c:	080222f4 	.word	0x080222f4
 80038a0:	20000bdc 	.word	0x20000bdc

080038a4 <CAN_Data_AlarmDetection>:
uint8_t alarmDetected = 0;
uint8_t alarmNumber = 0;
uint8_t lastAlarmId = 255;						//used for debug in STMStudio

void CAN_Data_AlarmDetection(void)
{
 80038a4:	b5b0      	push	{r4, r5, r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af02      	add	r7, sp, #8
	if(millis < 7000 && DEBUG_MODE == DISABLE)
 80038aa:	4bb3      	ldr	r3, [pc, #716]	; (8003b78 <CAN_Data_AlarmDetection+0x2d4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f641 3257 	movw	r2, #6999	; 0x1b57
 80038b2:	4293      	cmp	r3, r2
 80038b4:	f240 84e0 	bls.w	8004278 <CAN_Data_AlarmDetection+0x9d4>
		goto END_OF_FUNCTION;

	static uint16_t localSelectedGui = 0;

	if(selectedGui != GuiAlarm)
 80038b8:	4bb0      	ldr	r3, [pc, #704]	; (8003b7c <CAN_Data_AlarmDetection+0x2d8>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2bfe      	cmp	r3, #254	; 0xfe
 80038be:	d004      	beq.n	80038ca <CAN_Data_AlarmDetection+0x26>
		localSelectedGui = selectedGui;
 80038c0:	4bae      	ldr	r3, [pc, #696]	; (8003b7c <CAN_Data_AlarmDetection+0x2d8>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	4bae      	ldr	r3, [pc, #696]	; (8003b80 <CAN_Data_AlarmDetection+0x2dc>)
 80038c8:	801a      	strh	r2, [r3, #0]

	//data check BEGIN

	for(uint8_t i = 0; i < canDataToCheckNumber; i++)			//data check cycle
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
 80038ce:	e273      	b.n	8003db8 <CAN_Data_AlarmDetection+0x514>
	{
		if(canDataToCheck[i].firstCall == 0)
 80038d0:	7bfa      	ldrb	r2, [r7, #15]
 80038d2:	49ac      	ldr	r1, [pc, #688]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4413      	add	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	440b      	add	r3, r1
 80038de:	3345      	adds	r3, #69	; 0x45
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d11c      	bne.n	8003920 <CAN_Data_AlarmDetection+0x7c>
		{
			canDataToCheck[i].oldData = canDataToCheck[i].dataPointer->floatData;
 80038e6:	7bfa      	ldrb	r2, [r7, #15]
 80038e8:	49a6      	ldr	r1, [pc, #664]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 80038ea:	4613      	mov	r3, r2
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	4413      	add	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	440b      	add	r3, r1
 80038f4:	3304      	adds	r3, #4
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	7bfa      	ldrb	r2, [r7, #15]
 80038fa:	6959      	ldr	r1, [r3, #20]
 80038fc:	48a1      	ldr	r0, [pc, #644]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 80038fe:	4613      	mov	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4413      	add	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4403      	add	r3, r0
 8003908:	3308      	adds	r3, #8
 800390a:	6019      	str	r1, [r3, #0]
			canDataToCheck[i].firstCall = 1;
 800390c:	7bfa      	ldrb	r2, [r7, #15]
 800390e:	499d      	ldr	r1, [pc, #628]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	440b      	add	r3, r1
 800391a:	3345      	adds	r3, #69	; 0x45
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]
		}

		if(canDataToCheck[i].changeControlEnable == ENABLE)
 8003920:	7bfa      	ldrb	r2, [r7, #15]
 8003922:	4998      	ldr	r1, [pc, #608]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	440b      	add	r3, r1
 800392e:	330d      	adds	r3, #13
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d158      	bne.n	80039e8 <CAN_Data_AlarmDetection+0x144>
		{
			if(canDataToCheck[i].dataPointer->floatData != canDataToCheck[i].oldData || (canDataToCheck[i].dataChanged == 1 && canDataToCheck[i].alarmWaiting == 1))
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	4992      	ldr	r1, [pc, #584]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 800393a:	4613      	mov	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4413      	add	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	440b      	add	r3, r1
 8003944:	3304      	adds	r3, #4
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	ed93 7a05 	vldr	s14, [r3, #20]
 800394c:	7bfa      	ldrb	r2, [r7, #15]
 800394e:	498d      	ldr	r1, [pc, #564]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003950:	4613      	mov	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	440b      	add	r3, r1
 800395a:	3308      	adds	r3, #8
 800395c:	edd3 7a00 	vldr	s15, [r3]
 8003960:	eeb4 7a67 	vcmp.f32	s14, s15
 8003964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003968:	d115      	bne.n	8003996 <CAN_Data_AlarmDetection+0xf2>
 800396a:	7bfa      	ldrb	r2, [r7, #15]
 800396c:	4985      	ldr	r1, [pc, #532]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 800396e:	4613      	mov	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4413      	add	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	440b      	add	r3, r1
 8003978:	330e      	adds	r3, #14
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d128      	bne.n	80039d2 <CAN_Data_AlarmDetection+0x12e>
 8003980:	7bfa      	ldrb	r2, [r7, #15]
 8003982:	4980      	ldr	r1, [pc, #512]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	440b      	add	r3, r1
 800398e:	3324      	adds	r3, #36	; 0x24
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d11d      	bne.n	80039d2 <CAN_Data_AlarmDetection+0x12e>
			{
				canDataToCheck[i].dataChanged = 1;
 8003996:	7bfa      	ldrb	r2, [r7, #15]
 8003998:	497a      	ldr	r1, [pc, #488]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 800399a:	4613      	mov	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	4413      	add	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	440b      	add	r3, r1
 80039a4:	330e      	adds	r3, #14
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]

				canDataToCheck[i].oldData = canDataToCheck[i].dataPointer->floatData;
 80039aa:	7bfa      	ldrb	r2, [r7, #15]
 80039ac:	4975      	ldr	r1, [pc, #468]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	440b      	add	r3, r1
 80039b8:	3304      	adds	r3, #4
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	7bfa      	ldrb	r2, [r7, #15]
 80039be:	6959      	ldr	r1, [r3, #20]
 80039c0:	4870      	ldr	r0, [pc, #448]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4403      	add	r3, r0
 80039cc:	3308      	adds	r3, #8
 80039ce:	6019      	str	r1, [r3, #0]
 80039d0:	e014      	b.n	80039fc <CAN_Data_AlarmDetection+0x158>
			}
			else
			{
				canDataToCheck[i].dataChanged = 0;
 80039d2:	7bfa      	ldrb	r2, [r7, #15]
 80039d4:	496b      	ldr	r1, [pc, #428]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4413      	add	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	440b      	add	r3, r1
 80039e0:	330e      	adds	r3, #14
 80039e2:	2200      	movs	r2, #0
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	e009      	b.n	80039fc <CAN_Data_AlarmDetection+0x158>
			}
		}
		else
		{
			canDataToCheck[i].dataChanged = 0;
 80039e8:	7bfa      	ldrb	r2, [r7, #15]
 80039ea:	4966      	ldr	r1, [pc, #408]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	440b      	add	r3, r1
 80039f6:	330e      	adds	r3, #14
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
		}


		if(canDataToCheck[i].rangeControlEnable == ENABLE && canDataToCheck[i].dataPointer->lastTimeData - canDataToCheck[i].dataPointer->oldTimeData <= 2000 && canDataToCheck[i].dataPointer->lastTimeData > 1000)
 80039fc:	7bfa      	ldrb	r2, [r7, #15]
 80039fe:	4961      	ldr	r1, [pc, #388]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4413      	add	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	440b      	add	r3, r1
 8003a0a:	330c      	adds	r3, #12
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	f040 8182 	bne.w	8003d18 <CAN_Data_AlarmDetection+0x474>
 8003a14:	7bfa      	ldrb	r2, [r7, #15]
 8003a16:	495b      	ldr	r1, [pc, #364]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	440b      	add	r3, r1
 8003a22:	3304      	adds	r3, #4
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a28:	7bfa      	ldrb	r2, [r7, #15]
 8003a2a:	4856      	ldr	r0, [pc, #344]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4413      	add	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4403      	add	r3, r0
 8003a36:	3304      	adds	r3, #4
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	1acb      	subs	r3, r1, r3
 8003a3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003a42:	f200 8169 	bhi.w	8003d18 <CAN_Data_AlarmDetection+0x474>
 8003a46:	7bfa      	ldrb	r2, [r7, #15]
 8003a48:	494e      	ldr	r1, [pc, #312]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4413      	add	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	440b      	add	r3, r1
 8003a54:	3304      	adds	r3, #4
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a5e:	f240 815b 	bls.w	8003d18 <CAN_Data_AlarmDetection+0x474>
		{
			if(
					canDataToCheck[i].dataOutRange == 0 &&
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	4947      	ldr	r1, [pc, #284]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	440b      	add	r3, r1
 8003a70:	330f      	adds	r3, #15
 8003a72:	781b      	ldrb	r3, [r3, #0]
			if(
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f040 80c2 	bne.w	8003bfe <CAN_Data_AlarmDetection+0x35a>
					(canDataToCheck[i].dataPointer->floatData > canDataToCheck[i].dataPointer->maxValue ||
 8003a7a:	7bfa      	ldrb	r2, [r7, #15]
 8003a7c:	4941      	ldr	r1, [pc, #260]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003a7e:	4613      	mov	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4413      	add	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	440b      	add	r3, r1
 8003a88:	3304      	adds	r3, #4
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	ed93 7a05 	vldr	s14, [r3, #20]
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	493c      	ldr	r1, [pc, #240]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	440b      	add	r3, r1
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
					canDataToCheck[i].dataOutRange == 0 &&
 8003aa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aae:	dc1b      	bgt.n	8003ae8 <CAN_Data_AlarmDetection+0x244>
					 canDataToCheck[i].dataPointer->floatData < canDataToCheck[i].dataPointer->minValue	)
 8003ab0:	7bfa      	ldrb	r2, [r7, #15]
 8003ab2:	4934      	ldr	r1, [pc, #208]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4413      	add	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	440b      	add	r3, r1
 8003abe:	3304      	adds	r3, #4
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	ed93 7a05 	vldr	s14, [r3, #20]
 8003ac6:	7bfa      	ldrb	r2, [r7, #15]
 8003ac8:	492e      	ldr	r1, [pc, #184]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003aca:	4613      	mov	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4413      	add	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	440b      	add	r3, r1
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
					(canDataToCheck[i].dataPointer->floatData > canDataToCheck[i].dataPointer->maxValue ||
 8003adc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae4:	f140 808b 	bpl.w	8003bfe <CAN_Data_AlarmDetection+0x35a>
				)
			{

				if(millis >= canDataToCheck[i].dataOutRangeMillis + canDataToCheck[i].dataOutRangeTime)
 8003ae8:	7bfa      	ldrb	r2, [r7, #15]
 8003aea:	4926      	ldr	r1, [pc, #152]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003aec:	4613      	mov	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	440b      	add	r3, r1
 8003af6:	3314      	adds	r3, #20
 8003af8:	6819      	ldr	r1, [r3, #0]
 8003afa:	7bfa      	ldrb	r2, [r7, #15]
 8003afc:	4821      	ldr	r0, [pc, #132]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4403      	add	r3, r0
 8003b08:	3310      	adds	r3, #16
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	18ca      	adds	r2, r1, r3
 8003b0e:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <CAN_Data_AlarmDetection+0x2d4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	f200 80ff 	bhi.w	8003d16 <CAN_Data_AlarmDetection+0x472>
				{
					if(canDataToCheck[i].dataPointer->floatData > canDataToCheck[i].dataPointer->maxValue)
 8003b18:	7bfa      	ldrb	r2, [r7, #15]
 8003b1a:	491a      	ldr	r1, [pc, #104]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4413      	add	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	440b      	add	r3, r1
 8003b26:	3304      	adds	r3, #4
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	ed93 7a05 	vldr	s14, [r3, #20]
 8003b2e:	7bfa      	ldrb	r2, [r7, #15]
 8003b30:	4914      	ldr	r1, [pc, #80]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003b32:	4613      	mov	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4413      	add	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	440b      	add	r3, r1
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003b44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4c:	dd1c      	ble.n	8003b88 <CAN_Data_AlarmDetection+0x2e4>
					{
						canDataToCheck[i].dataOutRange = 1;
 8003b4e:	7bfa      	ldrb	r2, [r7, #15]
 8003b50:	490c      	ldr	r1, [pc, #48]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003b52:	4613      	mov	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4413      	add	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	440b      	add	r3, r1
 8003b5c:	330f      	adds	r3, #15
 8003b5e:	2201      	movs	r2, #1
 8003b60:	701a      	strb	r2, [r3, #0]
						canDataToCheck[i].backColorSelector = 1;
 8003b62:	7bfa      	ldrb	r2, [r7, #15]
 8003b64:	4907      	ldr	r1, [pc, #28]	; (8003b84 <CAN_Data_AlarmDetection+0x2e0>)
 8003b66:	4613      	mov	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	440b      	add	r3, r1
 8003b70:	3344      	adds	r3, #68	; 0x44
 8003b72:	2201      	movs	r2, #1
 8003b74:	701a      	strb	r2, [r3, #0]
 8003b76:	e036      	b.n	8003be6 <CAN_Data_AlarmDetection+0x342>
 8003b78:	20006a98 	.word	0x20006a98
 8003b7c:	20002dbe 	.word	0x20002dbe
 8003b80:	20001ae2 	.word	0x20001ae2
 8003b84:	20000c34 	.word	0x20000c34
					}
					else
						if(canDataToCheck[i].dataPointer->floatData < canDataToCheck[i].dataPointer->maxValue)
 8003b88:	7bfa      	ldrb	r2, [r7, #15]
 8003b8a:	49ab      	ldr	r1, [pc, #684]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	440b      	add	r3, r1
 8003b96:	3304      	adds	r3, #4
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	ed93 7a05 	vldr	s14, [r3, #20]
 8003b9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ba0:	49a5      	ldr	r1, [pc, #660]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	440b      	add	r3, r1
 8003bac:	3304      	adds	r3, #4
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003bb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bbc:	d513      	bpl.n	8003be6 <CAN_Data_AlarmDetection+0x342>
						{
							canDataToCheck[i].dataOutRange = 2;
 8003bbe:	7bfa      	ldrb	r2, [r7, #15]
 8003bc0:	499d      	ldr	r1, [pc, #628]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	440b      	add	r3, r1
 8003bcc:	330f      	adds	r3, #15
 8003bce:	2202      	movs	r2, #2
 8003bd0:	701a      	strb	r2, [r3, #0]
							canDataToCheck[i].backColorSelector = 2;
 8003bd2:	7bfa      	ldrb	r2, [r7, #15]
 8003bd4:	4998      	ldr	r1, [pc, #608]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4413      	add	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	440b      	add	r3, r1
 8003be0:	3344      	adds	r3, #68	; 0x44
 8003be2:	2202      	movs	r2, #2
 8003be4:	701a      	strb	r2, [r3, #0]
						}

					canDataToCheck[i].dataOutRangeMillis = millis;
 8003be6:	7bfa      	ldrb	r2, [r7, #15]
 8003be8:	4b94      	ldr	r3, [pc, #592]	; (8003e3c <CAN_Data_AlarmDetection+0x598>)
 8003bea:	6819      	ldr	r1, [r3, #0]
 8003bec:	4892      	ldr	r0, [pc, #584]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003bee:	4613      	mov	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	4403      	add	r3, r0
 8003bf8:	3314      	adds	r3, #20
 8003bfa:	6019      	str	r1, [r3, #0]
				if(millis >= canDataToCheck[i].dataOutRangeMillis + canDataToCheck[i].dataOutRangeTime)
 8003bfc:	e08b      	b.n	8003d16 <CAN_Data_AlarmDetection+0x472>
				}

			}
			else
			{
				if(canDataToCheck[i].dataOutRange != 0)
 8003bfe:	7bfa      	ldrb	r2, [r7, #15]
 8003c00:	498d      	ldr	r1, [pc, #564]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	440b      	add	r3, r1
 8003c0c:	330f      	adds	r3, #15
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 808c 	beq.w	8003d2e <CAN_Data_AlarmDetection+0x48a>
				{
					if(!(canDataToCheck[i].dataPointer->floatData >= canDataToCheck[i].dataPointer->maxValue ||
 8003c16:	7bfa      	ldrb	r2, [r7, #15]
 8003c18:	4987      	ldr	r1, [pc, #540]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4413      	add	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	440b      	add	r3, r1
 8003c24:	3304      	adds	r3, #4
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	ed93 7a05 	vldr	s14, [r3, #20]
 8003c2c:	7bfa      	ldrb	r2, [r7, #15]
 8003c2e:	4982      	ldr	r1, [pc, #520]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	440b      	add	r3, r1
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003c42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4a:	bfac      	ite	ge
 8003c4c:	2301      	movge	r3, #1
 8003c4e:	2300      	movlt	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	f083 0301 	eor.w	r3, r3, #1
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d050      	beq.n	8003cfe <CAN_Data_AlarmDetection+0x45a>
						 canDataToCheck[i].dataPointer->floatData <= canDataToCheck[i].dataPointer->minValue)
 8003c5c:	7bfa      	ldrb	r2, [r7, #15]
 8003c5e:	4976      	ldr	r1, [pc, #472]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003c60:	4613      	mov	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4413      	add	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	440b      	add	r3, r1
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	ed93 7a05 	vldr	s14, [r3, #20]
 8003c72:	7bfa      	ldrb	r2, [r7, #15]
 8003c74:	4970      	ldr	r1, [pc, #448]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003c76:	4613      	mov	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	440b      	add	r3, r1
 8003c80:	3304      	adds	r3, #4
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003c88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c90:	bf94      	ite	ls
 8003c92:	2301      	movls	r3, #1
 8003c94:	2300      	movhi	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f083 0301 	eor.w	r3, r3, #1
 8003c9c:	b2db      	uxtb	r3, r3
					if(!(canDataToCheck[i].dataPointer->floatData >= canDataToCheck[i].dataPointer->maxValue ||
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d02d      	beq.n	8003cfe <CAN_Data_AlarmDetection+0x45a>
						)
					{
						if(millis >= canDataToCheck[i].dataOutRangeMillis + canDataToCheck[i].dataOutRangeTime/2)
 8003ca2:	7bfa      	ldrb	r2, [r7, #15]
 8003ca4:	4964      	ldr	r1, [pc, #400]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4413      	add	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	440b      	add	r3, r1
 8003cb0:	3314      	adds	r3, #20
 8003cb2:	6819      	ldr	r1, [r3, #0]
 8003cb4:	7bfa      	ldrb	r2, [r7, #15]
 8003cb6:	4860      	ldr	r0, [pc, #384]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4403      	add	r3, r0
 8003cc2:	3310      	adds	r3, #16
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	085b      	lsrs	r3, r3, #1
 8003cc8:	18ca      	adds	r2, r1, r3
 8003cca:	4b5c      	ldr	r3, [pc, #368]	; (8003e3c <CAN_Data_AlarmDetection+0x598>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d821      	bhi.n	8003d16 <CAN_Data_AlarmDetection+0x472>
						{
							canDataToCheck[i].dataOutRange = 0;
 8003cd2:	7bfa      	ldrb	r2, [r7, #15]
 8003cd4:	4958      	ldr	r1, [pc, #352]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4413      	add	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	440b      	add	r3, r1
 8003ce0:	330f      	adds	r3, #15
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	701a      	strb	r2, [r3, #0]
							canDataToCheck[i].dataOutRangeMillis = millis;
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	4b54      	ldr	r3, [pc, #336]	; (8003e3c <CAN_Data_AlarmDetection+0x598>)
 8003cea:	6819      	ldr	r1, [r3, #0]
 8003cec:	4852      	ldr	r0, [pc, #328]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003cee:	4613      	mov	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4403      	add	r3, r0
 8003cf8:	3314      	adds	r3, #20
 8003cfa:	6019      	str	r1, [r3, #0]
						if(millis >= canDataToCheck[i].dataOutRangeMillis + canDataToCheck[i].dataOutRangeTime/2)
 8003cfc:	e00b      	b.n	8003d16 <CAN_Data_AlarmDetection+0x472>
						}
					}
					else
					{
						canDataToCheck[i].dataOutRangeMillis = millis;
 8003cfe:	7bfa      	ldrb	r2, [r7, #15]
 8003d00:	4b4e      	ldr	r3, [pc, #312]	; (8003e3c <CAN_Data_AlarmDetection+0x598>)
 8003d02:	6819      	ldr	r1, [r3, #0]
 8003d04:	484c      	ldr	r0, [pc, #304]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4403      	add	r3, r0
 8003d10:	3314      	adds	r3, #20
 8003d12:	6019      	str	r1, [r3, #0]
			if(
 8003d14:	e00b      	b.n	8003d2e <CAN_Data_AlarmDetection+0x48a>
 8003d16:	e00a      	b.n	8003d2e <CAN_Data_AlarmDetection+0x48a>
				//canDataToCheck[i].dataOutRange = 0;
			}
		}
		else
		{
			canDataToCheck[i].dataOutRange = 0;
 8003d18:	7bfa      	ldrb	r2, [r7, #15]
 8003d1a:	4947      	ldr	r1, [pc, #284]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4413      	add	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	440b      	add	r3, r1
 8003d26:	330f      	adds	r3, #15
 8003d28:	2200      	movs	r2, #0
 8003d2a:	701a      	strb	r2, [r3, #0]
 8003d2c:	e000      	b.n	8003d30 <CAN_Data_AlarmDetection+0x48c>
			if(
 8003d2e:	bf00      	nop
		}


		if(canDataToCheck[i].alarmDisplayed == 0)
 8003d30:	7bfa      	ldrb	r2, [r7, #15]
 8003d32:	4941      	ldr	r1, [pc, #260]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003d34:	4613      	mov	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4413      	add	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	440b      	add	r3, r1
 8003d3e:	331a      	adds	r3, #26
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d12b      	bne.n	8003d9e <CAN_Data_AlarmDetection+0x4fa>
		{
			if(canDataToCheck[i].dataChanged == 1 || canDataToCheck[i].dataOutRange != 0)
 8003d46:	7bfa      	ldrb	r2, [r7, #15]
 8003d48:	493b      	ldr	r1, [pc, #236]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4413      	add	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	440b      	add	r3, r1
 8003d54:	330e      	adds	r3, #14
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d00a      	beq.n	8003d72 <CAN_Data_AlarmDetection+0x4ce>
 8003d5c:	7bfa      	ldrb	r2, [r7, #15]
 8003d5e:	4936      	ldr	r1, [pc, #216]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003d60:	4613      	mov	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4413      	add	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	440b      	add	r3, r1
 8003d6a:	330f      	adds	r3, #15
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <CAN_Data_AlarmDetection+0x4e4>
			{
				canDataToCheck[i].alarmWaiting = 1;
 8003d72:	7bfa      	ldrb	r2, [r7, #15]
 8003d74:	4930      	ldr	r1, [pc, #192]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003d76:	4613      	mov	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	440b      	add	r3, r1
 8003d80:	3324      	adds	r3, #36	; 0x24
 8003d82:	2201      	movs	r2, #1
 8003d84:	701a      	strb	r2, [r3, #0]
 8003d86:	e014      	b.n	8003db2 <CAN_Data_AlarmDetection+0x50e>
			}
			else
			{
				canDataToCheck[i].alarmWaiting = 0;
 8003d88:	7bfa      	ldrb	r2, [r7, #15]
 8003d8a:	492b      	ldr	r1, [pc, #172]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	440b      	add	r3, r1
 8003d96:	3324      	adds	r3, #36	; 0x24
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e009      	b.n	8003db2 <CAN_Data_AlarmDetection+0x50e>
			}
		}
		else
		{
			canDataToCheck[i].alarmWaiting = 0;
 8003d9e:	7bfa      	ldrb	r2, [r7, #15]
 8003da0:	4925      	ldr	r1, [pc, #148]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003da2:	4613      	mov	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4413      	add	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	440b      	add	r3, r1
 8003dac:	3324      	adds	r3, #36	; 0x24
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < canDataToCheckNumber; i++)			//data check cycle
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	3301      	adds	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
 8003db8:	4b21      	ldr	r3, [pc, #132]	; (8003e40 <CAN_Data_AlarmDetection+0x59c>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	7bfa      	ldrb	r2, [r7, #15]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	f4ff ad86 	bcc.w	80038d0 <CAN_Data_AlarmDetection+0x2c>

	//data check END

	//alarm selection BEGIN

	uint16_t lowerPriority = 0xFF;
 8003dc4:	23ff      	movs	r3, #255	; 0xff
 8003dc6:	81bb      	strh	r3, [r7, #12]
	static uint8_t alarmOnDisplay = 0;


	//static uint8_t alarmNumber = 0;

	if(alarmNumber != 0 && alarmDetected == 0)
 8003dc8:	4b1e      	ldr	r3, [pc, #120]	; (8003e44 <CAN_Data_AlarmDetection+0x5a0>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d02d      	beq.n	8003e2c <CAN_Data_AlarmDetection+0x588>
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <CAN_Data_AlarmDetection+0x5a4>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d129      	bne.n	8003e2c <CAN_Data_AlarmDetection+0x588>
	{
		for(uint8_t i = 0; i < canDataToCheckNumber; i++)			//alarm selection cycle
 8003dd8:	2300      	movs	r3, #0
 8003dda:	72fb      	strb	r3, [r7, #11]
 8003ddc:	e021      	b.n	8003e22 <CAN_Data_AlarmDetection+0x57e>
		{
			if(canDataToCheck[i].alarmWaiting == 1)
 8003dde:	7afa      	ldrb	r2, [r7, #11]
 8003de0:	4915      	ldr	r1, [pc, #84]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003de2:	4613      	mov	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4413      	add	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	440b      	add	r3, r1
 8003dec:	3324      	adds	r3, #36	; 0x24
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d113      	bne.n	8003e1c <CAN_Data_AlarmDetection+0x578>
			{
				alarmDetected = 1;
 8003df4:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <CAN_Data_AlarmDetection+0x5a4>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	701a      	strb	r2, [r3, #0]
				lowerPriority = min(lowerPriority, canDataToCheck[i].dataPointer->priority);
 8003dfa:	7afa      	ldrb	r2, [r7, #11]
 8003dfc:	490e      	ldr	r1, [pc, #56]	; (8003e38 <CAN_Data_AlarmDetection+0x594>)
 8003dfe:	4613      	mov	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4413      	add	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	440b      	add	r3, r1
 8003e08:	3304      	adds	r3, #4
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	89ba      	ldrh	r2, [r7, #12]
 8003e14:	4293      	cmp	r3, r2
 8003e16:	bf28      	it	cs
 8003e18:	4613      	movcs	r3, r2
 8003e1a:	81bb      	strh	r3, [r7, #12]
		for(uint8_t i = 0; i < canDataToCheckNumber; i++)			//alarm selection cycle
 8003e1c:	7afb      	ldrb	r3, [r7, #11]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	72fb      	strb	r3, [r7, #11]
 8003e22:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <CAN_Data_AlarmDetection+0x59c>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	7afa      	ldrb	r2, [r7, #11]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d3d8      	bcc.n	8003dde <CAN_Data_AlarmDetection+0x53a>
			}
		}
	}


	uint8_t tmpAlarmNumber = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	72bb      	strb	r3, [r7, #10]

	for(uint8_t i = 0; i < canDataToCheckNumber; i++)			//alarm selection cycle
 8003e30:	2300      	movs	r3, #0
 8003e32:	727b      	strb	r3, [r7, #9]
 8003e34:	e02f      	b.n	8003e96 <CAN_Data_AlarmDetection+0x5f2>
 8003e36:	bf00      	nop
 8003e38:	20000c34 	.word	0x20000c34
 8003e3c:	20006a98 	.word	0x20006a98
 8003e40:	20000c30 	.word	0x20000c30
 8003e44:	20001a45 	.word	0x20001a45
 8003e48:	20001a44 	.word	0x20001a44
	{
		if(canDataToCheck[i].alarmWaiting == 1)
 8003e4c:	7a7a      	ldrb	r2, [r7, #9]
 8003e4e:	491e      	ldr	r1, [pc, #120]	; (8003ec8 <CAN_Data_AlarmDetection+0x624>)
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	440b      	add	r3, r1
 8003e5a:	3324      	adds	r3, #36	; 0x24
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d116      	bne.n	8003e90 <CAN_Data_AlarmDetection+0x5ec>
		{
			tmpAlarmNumber++;
 8003e62:	7abb      	ldrb	r3, [r7, #10]
 8003e64:	3301      	adds	r3, #1
 8003e66:	72bb      	strb	r3, [r7, #10]
			alarmDetected = 1;
 8003e68:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <CAN_Data_AlarmDetection+0x628>)
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	701a      	strb	r2, [r3, #0]
			lowerPriority = min(lowerPriority, canDataToCheck[i].dataPointer->priority);
 8003e6e:	7a7a      	ldrb	r2, [r7, #9]
 8003e70:	4915      	ldr	r1, [pc, #84]	; (8003ec8 <CAN_Data_AlarmDetection+0x624>)
 8003e72:	4613      	mov	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4413      	add	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	440b      	add	r3, r1
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	89ba      	ldrh	r2, [r7, #12]
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	bf28      	it	cs
 8003e8c:	4613      	movcs	r3, r2
 8003e8e:	81bb      	strh	r3, [r7, #12]
	for(uint8_t i = 0; i < canDataToCheckNumber; i++)			//alarm selection cycle
 8003e90:	7a7b      	ldrb	r3, [r7, #9]
 8003e92:	3301      	adds	r3, #1
 8003e94:	727b      	strb	r3, [r7, #9]
 8003e96:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <CAN_Data_AlarmDetection+0x62c>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	7a7a      	ldrb	r2, [r7, #9]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d3d5      	bcc.n	8003e4c <CAN_Data_AlarmDetection+0x5a8>
		}
	}

	alarmNumber = max(alarmNumber, tmpAlarmNumber);
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <CAN_Data_AlarmDetection+0x630>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	7aba      	ldrb	r2, [r7, #10]
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	bf38      	it	cc
 8003eaa:	4613      	movcc	r3, r2
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <CAN_Data_AlarmDetection+0x630>)
 8003eb0:	701a      	strb	r2, [r3, #0]


	if(lowerPriority != 0xFF && alarmOnDisplay == 0)
 8003eb2:	89bb      	ldrh	r3, [r7, #12]
 8003eb4:	2bff      	cmp	r3, #255	; 0xff
 8003eb6:	d059      	beq.n	8003f6c <CAN_Data_AlarmDetection+0x6c8>
 8003eb8:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <CAN_Data_AlarmDetection+0x634>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d155      	bne.n	8003f6c <CAN_Data_AlarmDetection+0x6c8>
	{
		for(uint8_t i = 0; i < canDataToCheckNumber; i++)			//alarm activation cycle
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	723b      	strb	r3, [r7, #8]
 8003ec4:	e04d      	b.n	8003f62 <CAN_Data_AlarmDetection+0x6be>
 8003ec6:	bf00      	nop
 8003ec8:	20000c34 	.word	0x20000c34
 8003ecc:	20001a44 	.word	0x20001a44
 8003ed0:	20000c30 	.word	0x20000c30
 8003ed4:	20001a45 	.word	0x20001a45
 8003ed8:	20001ae4 	.word	0x20001ae4
		{
			if(canDataToCheck[i].alarmWaiting == 1 && canDataToCheck[i].dataPointer->priority == lowerPriority)
 8003edc:	7a3a      	ldrb	r2, [r7, #8]
 8003ede:	49a6      	ldr	r1, [pc, #664]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	440b      	add	r3, r1
 8003eea:	3324      	adds	r3, #36	; 0x24
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d134      	bne.n	8003f5c <CAN_Data_AlarmDetection+0x6b8>
 8003ef2:	7a3a      	ldrb	r2, [r7, #8]
 8003ef4:	49a0      	ldr	r1, [pc, #640]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4413      	add	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	440b      	add	r3, r1
 8003f00:	3304      	adds	r3, #4
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	89ba      	ldrh	r2, [r7, #12]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d125      	bne.n	8003f5c <CAN_Data_AlarmDetection+0x6b8>
			{
				canDataToCheck[i].alarmStatus = 1;
 8003f10:	7a3a      	ldrb	r2, [r7, #8]
 8003f12:	4999      	ldr	r1, [pc, #612]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 8003f14:	4613      	mov	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3318      	adds	r3, #24
 8003f20:	2201      	movs	r2, #1
 8003f22:	701a      	strb	r2, [r3, #0]
				canDataToCheck[i].alarmWaiting = 0;
 8003f24:	7a3a      	ldrb	r2, [r7, #8]
 8003f26:	4994      	ldr	r1, [pc, #592]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 8003f28:	4613      	mov	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	440b      	add	r3, r1
 8003f32:	3324      	adds	r3, #36	; 0x24
 8003f34:	2200      	movs	r2, #0
 8003f36:	701a      	strb	r2, [r3, #0]

				canDataToCheck[i].alarmMillis = millis;
 8003f38:	7a3a      	ldrb	r2, [r7, #8]
 8003f3a:	4b90      	ldr	r3, [pc, #576]	; (800417c <CAN_Data_AlarmDetection+0x8d8>)
 8003f3c:	6819      	ldr	r1, [r3, #0]
 8003f3e:	488e      	ldr	r0, [pc, #568]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 8003f40:	4613      	mov	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4413      	add	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4403      	add	r3, r0
 8003f4a:	332c      	adds	r3, #44	; 0x2c
 8003f4c:	6019      	str	r1, [r3, #0]

				dataInAlarm = i;
 8003f4e:	7a3b      	ldrb	r3, [r7, #8]
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	4b8b      	ldr	r3, [pc, #556]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 8003f54:	801a      	strh	r2, [r3, #0]
				i = canDataToCheckNumber;
 8003f56:	4b8b      	ldr	r3, [pc, #556]	; (8004184 <CAN_Data_AlarmDetection+0x8e0>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	723b      	strb	r3, [r7, #8]
		for(uint8_t i = 0; i < canDataToCheckNumber; i++)			//alarm activation cycle
 8003f5c:	7a3b      	ldrb	r3, [r7, #8]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	723b      	strb	r3, [r7, #8]
 8003f62:	4b88      	ldr	r3, [pc, #544]	; (8004184 <CAN_Data_AlarmDetection+0x8e0>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	7a3a      	ldrb	r2, [r7, #8]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d3b7      	bcc.n	8003edc <CAN_Data_AlarmDetection+0x638>

	//alarm selection END

	//alarm display BEGIN

	if(alarmPageDisplayRefreshEnable == 1)		//WARNING: if there are some problems disable this and make it true
 8003f6c:	4b86      	ldr	r3, [pc, #536]	; (8004188 <CAN_Data_AlarmDetection+0x8e4>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	f040 8132 	bne.w	80041da <CAN_Data_AlarmDetection+0x936>
	{
		static uint32_t millisAlarmPageExit = 0;

		if(alarmDetected != 0 || (alarmOnDisplay == 1 || dataInAlarm != 0xFF))
 8003f76:	4b85      	ldr	r3, [pc, #532]	; (800418c <CAN_Data_AlarmDetection+0x8e8>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d108      	bne.n	8003f90 <CAN_Data_AlarmDetection+0x6ec>
 8003f7e:	4b84      	ldr	r3, [pc, #528]	; (8004190 <CAN_Data_AlarmDetection+0x8ec>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d004      	beq.n	8003f90 <CAN_Data_AlarmDetection+0x6ec>
 8003f86:	4b7e      	ldr	r3, [pc, #504]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	2bff      	cmp	r3, #255	; 0xff
 8003f8c:	f000 810c 	beq.w	80041a8 <CAN_Data_AlarmDetection+0x904>
		{
			if(canDataToCheck[dataInAlarm].alarmDisplayed == 0)
 8003f90:	4b7b      	ldr	r3, [pc, #492]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	4619      	mov	r1, r3
 8003f96:	4a78      	ldr	r2, [pc, #480]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 8003f98:	460b      	mov	r3, r1
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	440b      	add	r3, r1
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	331a      	adds	r3, #26
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f040 80dd 	bne.w	8004166 <CAN_Data_AlarmDetection+0x8c2>
			{
				canDataToCheck[dataInAlarm].alarmOnDisplay = 1;
 8003fac:	4b74      	ldr	r3, [pc, #464]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4a71      	ldr	r2, [pc, #452]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	440b      	add	r3, r1
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3319      	adds	r3, #25
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	701a      	strb	r2, [r3, #0]
				//alarmToDisplay = 0;
				alarmOnDisplay = 1;
 8003fc4:	4b72      	ldr	r3, [pc, #456]	; (8004190 <CAN_Data_AlarmDetection+0x8ec>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	701a      	strb	r2, [r3, #0]

				lastAlarmId = canDataToCheck[dataInAlarm].alarmId;
 8003fca:	4b6d      	ldr	r3, [pc, #436]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4a69      	ldr	r2, [pc, #420]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	440b      	add	r3, r1
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4413      	add	r3, r2
 8003fdc:	781a      	ldrb	r2, [r3, #0]
 8003fde:	4b6d      	ldr	r3, [pc, #436]	; (8004194 <CAN_Data_AlarmDetection+0x8f0>)
 8003fe0:	701a      	strb	r2, [r3, #0]

				uint32_t backColor = canDataToCheck[dataInAlarm].backColorOver;
 8003fe2:	4b67      	ldr	r3, [pc, #412]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4a63      	ldr	r2, [pc, #396]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 8003fea:	460b      	mov	r3, r1
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	440b      	add	r3, r1
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3340      	adds	r3, #64	; 0x40
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	607b      	str	r3, [r7, #4]

				if(canDataToCheck[dataInAlarm].backColorSelector == 2)
 8003ffa:	4b61      	ldr	r3, [pc, #388]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	4619      	mov	r1, r3
 8004000:	4a5d      	ldr	r2, [pc, #372]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 8004002:	460b      	mov	r3, r1
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	440b      	add	r3, r1
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4413      	add	r3, r2
 800400c:	3344      	adds	r3, #68	; 0x44
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d10b      	bne.n	800402c <CAN_Data_AlarmDetection+0x788>
					backColor = canDataToCheck[dataInAlarm].backColorUnder;
 8004014:	4b5a      	ldr	r3, [pc, #360]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	4619      	mov	r1, r3
 800401a:	4a57      	ldr	r2, [pc, #348]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 800401c:	460b      	mov	r3, r1
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	440b      	add	r3, r1
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4413      	add	r3, r2
 8004026:	333c      	adds	r3, #60	; 0x3c
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	607b      	str	r3, [r7, #4]

				AlarmPage(canDataToCheck[dataInAlarm].message, canDataToCheck[dataInAlarm].dataPointer, canDataToCheck[dataInAlarm].messageColor, canDataToCheck[dataInAlarm].dataColor, backColor);
 800402c:	4b54      	ldr	r3, [pc, #336]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	4619      	mov	r1, r3
 8004032:	4a51      	ldr	r2, [pc, #324]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 8004034:	460b      	mov	r3, r1
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	440b      	add	r3, r1
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	3330      	adds	r3, #48	; 0x30
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	4b4f      	ldr	r3, [pc, #316]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	4619      	mov	r1, r3
 8004048:	4a4b      	ldr	r2, [pc, #300]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 800404a:	460b      	mov	r3, r1
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	440b      	add	r3, r1
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	4413      	add	r3, r2
 8004054:	3304      	adds	r3, #4
 8004056:	6819      	ldr	r1, [r3, #0]
 8004058:	4b49      	ldr	r3, [pc, #292]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	461c      	mov	r4, r3
 800405e:	4a46      	ldr	r2, [pc, #280]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 8004060:	4623      	mov	r3, r4
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4423      	add	r3, r4
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4413      	add	r3, r2
 800406a:	3334      	adds	r3, #52	; 0x34
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4b44      	ldr	r3, [pc, #272]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	461d      	mov	r5, r3
 8004074:	4c40      	ldr	r4, [pc, #256]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 8004076:	462b      	mov	r3, r5
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	442b      	add	r3, r5
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4423      	add	r3, r4
 8004080:	3338      	adds	r3, #56	; 0x38
 8004082:	681c      	ldr	r4, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	4623      	mov	r3, r4
 800408a:	f000 f90b 	bl	80042a4 <AlarmPage>

				selectedGui = GuiAlarm;
 800408e:	4b42      	ldr	r3, [pc, #264]	; (8004198 <CAN_Data_AlarmDetection+0x8f4>)
 8004090:	22fe      	movs	r2, #254	; 0xfe
 8004092:	701a      	strb	r2, [r3, #0]

				if(millis >= canDataToCheck[dataInAlarm].alarmMillis + canDataToCheck[dataInAlarm].alarmTime)
 8004094:	4b3a      	ldr	r3, [pc, #232]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	4619      	mov	r1, r3
 800409a:	4a37      	ldr	r2, [pc, #220]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 800409c:	460b      	mov	r3, r1
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	440b      	add	r3, r1
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4413      	add	r3, r2
 80040a6:	332c      	adds	r3, #44	; 0x2c
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4b35      	ldr	r3, [pc, #212]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	4931      	ldr	r1, [pc, #196]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 80040b2:	4603      	mov	r3, r0
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4403      	add	r3, r0
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	440b      	add	r3, r1
 80040bc:	3328      	adds	r3, #40	; 0x28
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	441a      	add	r2, r3
 80040c2:	4b2e      	ldr	r3, [pc, #184]	; (800417c <CAN_Data_AlarmDetection+0x8d8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d84d      	bhi.n	8004166 <CAN_Data_AlarmDetection+0x8c2>
				{
					canDataToCheck[dataInAlarm].alarmMillis = millis;
 80040ca:	4b2d      	ldr	r3, [pc, #180]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	4b2a      	ldr	r3, [pc, #168]	; (800417c <CAN_Data_AlarmDetection+0x8d8>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4928      	ldr	r1, [pc, #160]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 80040d6:	4603      	mov	r3, r0
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	4403      	add	r3, r0
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	440b      	add	r3, r1
 80040e0:	332c      	adds	r3, #44	; 0x2c
 80040e2:	601a      	str	r2, [r3, #0]
					alarmDetected = 0;
 80040e4:	4b29      	ldr	r3, [pc, #164]	; (800418c <CAN_Data_AlarmDetection+0x8e8>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]

					alarmNumber--;
 80040ea:	4b2c      	ldr	r3, [pc, #176]	; (800419c <CAN_Data_AlarmDetection+0x8f8>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	4b2a      	ldr	r3, [pc, #168]	; (800419c <CAN_Data_AlarmDetection+0x8f8>)
 80040f4:	701a      	strb	r2, [r3, #0]

					canDataToCheck[dataInAlarm].alarmOnDisplay = 0;
 80040f6:	4b22      	ldr	r3, [pc, #136]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	4619      	mov	r1, r3
 80040fc:	4a1e      	ldr	r2, [pc, #120]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 80040fe:	460b      	mov	r3, r1
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	440b      	add	r3, r1
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	4413      	add	r3, r2
 8004108:	3319      	adds	r3, #25
 800410a:	2200      	movs	r2, #0
 800410c:	701a      	strb	r2, [r3, #0]
					canDataToCheck[dataInAlarm].alarmStatus = 0;
 800410e:	4b1c      	ldr	r3, [pc, #112]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	4619      	mov	r1, r3
 8004114:	4a18      	ldr	r2, [pc, #96]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 8004116:	460b      	mov	r3, r1
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	440b      	add	r3, r1
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	4413      	add	r3, r2
 8004120:	3318      	adds	r3, #24
 8004122:	2200      	movs	r2, #0
 8004124:	701a      	strb	r2, [r3, #0]

					canDataToCheck[dataInAlarm].alarmDisplayed = 1;
 8004126:	4b16      	ldr	r3, [pc, #88]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	4619      	mov	r1, r3
 800412c:	4a12      	ldr	r2, [pc, #72]	; (8004178 <CAN_Data_AlarmDetection+0x8d4>)
 800412e:	460b      	mov	r3, r1
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	440b      	add	r3, r1
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	4413      	add	r3, r2
 8004138:	331a      	adds	r3, #26
 800413a:	2201      	movs	r2, #1
 800413c:	701a      	strb	r2, [r3, #0]

					alarmOnDisplay = 0;
 800413e:	4b14      	ldr	r3, [pc, #80]	; (8004190 <CAN_Data_AlarmDetection+0x8ec>)
 8004140:	2200      	movs	r2, #0
 8004142:	701a      	strb	r2, [r3, #0]
					dataInAlarm = 0xFF;
 8004144:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <CAN_Data_AlarmDetection+0x8dc>)
 8004146:	22ff      	movs	r2, #255	; 0xff
 8004148:	801a      	strh	r2, [r3, #0]

					selectedGui = localSelectedGui;
 800414a:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <CAN_Data_AlarmDetection+0x8fc>)
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	b2da      	uxtb	r2, r3
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <CAN_Data_AlarmDetection+0x8f4>)
 8004152:	701a      	strb	r2, [r3, #0]

					GUI_SetColor(GUI_WHITE);
 8004154:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8004158:	f018 fde8 	bl	801cd2c <GUI_SetColor>
					GUI_SetBkColor(GUI_BLACK);
 800415c:	2000      	movs	r0, #0
 800415e:	f018 fde3 	bl	801cd28 <GUI_SetBkColor>
					GUI_Clear();
 8004162:	f019 fe8f 	bl	801de84 <GUI_Clear>

					//canDataToCheck[dataInAlarm].alarmResetMillis = millis;
				}
			}

			millisAlarmPageExit = millis;
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <CAN_Data_AlarmDetection+0x8d8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a0e      	ldr	r2, [pc, #56]	; (80041a4 <CAN_Data_AlarmDetection+0x900>)
 800416c:	6013      	str	r3, [r2, #0]

			alarmPageDisplayRefreshEnable = 0;
 800416e:	4b06      	ldr	r3, [pc, #24]	; (8004188 <CAN_Data_AlarmDetection+0x8e4>)
 8004170:	2200      	movs	r2, #0
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e031      	b.n	80041da <CAN_Data_AlarmDetection+0x936>
 8004176:	bf00      	nop
 8004178:	20000c34 	.word	0x20000c34
 800417c:	20006a98 	.word	0x20006a98
 8004180:	20000002 	.word	0x20000002
 8004184:	20000c30 	.word	0x20000c30
 8004188:	20000000 	.word	0x20000000
 800418c:	20001a44 	.word	0x20001a44
 8004190:	20001ae4 	.word	0x20001ae4
 8004194:	20000001 	.word	0x20000001
 8004198:	20002dbe 	.word	0x20002dbe
 800419c:	20001a45 	.word	0x20001a45
 80041a0:	20001ae2 	.word	0x20001ae2
 80041a4:	20001ae8 	.word	0x20001ae8
		}
		else
		{
			if(millis >=  millisAlarmPageExit + 200)
 80041a8:	4b36      	ldr	r3, [pc, #216]	; (8004284 <CAN_Data_AlarmDetection+0x9e0>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 80041b0:	4b35      	ldr	r3, [pc, #212]	; (8004288 <CAN_Data_AlarmDetection+0x9e4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d810      	bhi.n	80041da <CAN_Data_AlarmDetection+0x936>
			if(alarmDetected == 0 && alarmNumber == 0)
 80041b8:	4b34      	ldr	r3, [pc, #208]	; (800428c <CAN_Data_AlarmDetection+0x9e8>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10c      	bne.n	80041da <CAN_Data_AlarmDetection+0x936>
 80041c0:	4b33      	ldr	r3, [pc, #204]	; (8004290 <CAN_Data_AlarmDetection+0x9ec>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d108      	bne.n	80041da <CAN_Data_AlarmDetection+0x936>
			{
				selectedGui = localSelectedGui;
 80041c8:	4b32      	ldr	r3, [pc, #200]	; (8004294 <CAN_Data_AlarmDetection+0x9f0>)
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	4b32      	ldr	r3, [pc, #200]	; (8004298 <CAN_Data_AlarmDetection+0x9f4>)
 80041d0:	701a      	strb	r2, [r3, #0]
				millisAlarmPageExit = millis;
 80041d2:	4b2d      	ldr	r3, [pc, #180]	; (8004288 <CAN_Data_AlarmDetection+0x9e4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a2b      	ldr	r2, [pc, #172]	; (8004284 <CAN_Data_AlarmDetection+0x9e0>)
 80041d8:	6013      	str	r3, [r2, #0]

	//alarm display END

	//alarm ri-enable after display BEGIN

	for(uint8_t i = 0; i < canDataToCheckNumber; i++)
 80041da:	2300      	movs	r3, #0
 80041dc:	70fb      	strb	r3, [r7, #3]
 80041de:	e045      	b.n	800426c <CAN_Data_AlarmDetection+0x9c8>
	{
		if(canDataToCheck[i].alarmDisplayed == 1)
 80041e0:	78fa      	ldrb	r2, [r7, #3]
 80041e2:	492e      	ldr	r1, [pc, #184]	; (800429c <CAN_Data_AlarmDetection+0x9f8>)
 80041e4:	4613      	mov	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	4413      	add	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	440b      	add	r3, r1
 80041ee:	331a      	adds	r3, #26
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d12c      	bne.n	8004250 <CAN_Data_AlarmDetection+0x9ac>
		{
			if(millis >= canDataToCheck[i].alarmResetMillis + canDataToCheck[i].alarmResetTime)
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	4928      	ldr	r1, [pc, #160]	; (800429c <CAN_Data_AlarmDetection+0x9f8>)
 80041fa:	4613      	mov	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	4413      	add	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	440b      	add	r3, r1
 8004204:	3320      	adds	r3, #32
 8004206:	6819      	ldr	r1, [r3, #0]
 8004208:	78fa      	ldrb	r2, [r7, #3]
 800420a:	4824      	ldr	r0, [pc, #144]	; (800429c <CAN_Data_AlarmDetection+0x9f8>)
 800420c:	4613      	mov	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4413      	add	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4403      	add	r3, r0
 8004216:	331c      	adds	r3, #28
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	18ca      	adds	r2, r1, r3
 800421c:	4b1a      	ldr	r3, [pc, #104]	; (8004288 <CAN_Data_AlarmDetection+0x9e4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d820      	bhi.n	8004266 <CAN_Data_AlarmDetection+0x9c2>
			{
				canDataToCheck[i].alarmResetMillis = millis;
 8004224:	78fa      	ldrb	r2, [r7, #3]
 8004226:	4b18      	ldr	r3, [pc, #96]	; (8004288 <CAN_Data_AlarmDetection+0x9e4>)
 8004228:	6819      	ldr	r1, [r3, #0]
 800422a:	481c      	ldr	r0, [pc, #112]	; (800429c <CAN_Data_AlarmDetection+0x9f8>)
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4413      	add	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4403      	add	r3, r0
 8004236:	3320      	adds	r3, #32
 8004238:	6019      	str	r1, [r3, #0]
				canDataToCheck[i].alarmDisplayed = 0;
 800423a:	78fa      	ldrb	r2, [r7, #3]
 800423c:	4917      	ldr	r1, [pc, #92]	; (800429c <CAN_Data_AlarmDetection+0x9f8>)
 800423e:	4613      	mov	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	4413      	add	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	440b      	add	r3, r1
 8004248:	331a      	adds	r3, #26
 800424a:	2200      	movs	r2, #0
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	e00a      	b.n	8004266 <CAN_Data_AlarmDetection+0x9c2>
			}
		}
		else
			canDataToCheck[i].alarmResetMillis = millis;
 8004250:	78fa      	ldrb	r2, [r7, #3]
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <CAN_Data_AlarmDetection+0x9e4>)
 8004254:	6819      	ldr	r1, [r3, #0]
 8004256:	4811      	ldr	r0, [pc, #68]	; (800429c <CAN_Data_AlarmDetection+0x9f8>)
 8004258:	4613      	mov	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4413      	add	r3, r2
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4403      	add	r3, r0
 8004262:	3320      	adds	r3, #32
 8004264:	6019      	str	r1, [r3, #0]
	for(uint8_t i = 0; i < canDataToCheckNumber; i++)
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	3301      	adds	r3, #1
 800426a:	70fb      	strb	r3, [r7, #3]
 800426c:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <CAN_Data_AlarmDetection+0x9fc>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	78fa      	ldrb	r2, [r7, #3]
 8004272:	429a      	cmp	r2, r3
 8004274:	d3b4      	bcc.n	80041e0 <CAN_Data_AlarmDetection+0x93c>

	//alarm ri-enable after display END



	END_OF_FUNCTION:;
 8004276:	e000      	b.n	800427a <CAN_Data_AlarmDetection+0x9d6>
		goto END_OF_FUNCTION;
 8004278:	bf00      	nop
}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bdb0      	pop	{r4, r5, r7, pc}
 8004282:	bf00      	nop
 8004284:	20001ae8 	.word	0x20001ae8
 8004288:	20006a98 	.word	0x20006a98
 800428c:	20001a44 	.word	0x20001a44
 8004290:	20001a45 	.word	0x20001a45
 8004294:	20001ae2 	.word	0x20001ae2
 8004298:	20002dbe 	.word	0x20002dbe
 800429c:	20000c34 	.word	0x20000c34
 80042a0:	20000c30 	.word	0x20000c30

080042a4 <AlarmPage>:



void AlarmPage(char* string, CAN_DATA_Typedef* dataPointer, uint32_t messageColor, uint32_t dataColor, uint32_t backColor)
{
 80042a4:	b5b0      	push	{r4, r5, r7, lr}
 80042a6:	b094      	sub	sp, #80	; 0x50
 80042a8:	af0a      	add	r7, sp, #40	; 0x28
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
	register uint8_t particularDataDetected = 0;
 80042b2:	2400      	movs	r4, #0

	static CAN_DATA_Typedef* dataPointerOld;
	float dataTemp;
	register uint8_t decimalDigit = 1;
 80042b4:	2501      	movs	r5, #1

	if(dataPointer->dataType == dataType_Float)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	7c1b      	ldrb	r3, [r3, #16]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d103      	bne.n	80042c6 <AlarmPage+0x22>
		dataTemp = dataPointer->floatData;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
 80042c4:	e008      	b.n	80042d8 <AlarmPage+0x34>
	else
	{
		dataTemp = dataPointer->intData;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042d2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		decimalDigit = 0;
 80042d6:	2500      	movs	r5, #0
	}


	GUI_SetColor(GUI_WHITE);
 80042d8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80042dc:	f018 fd26 	bl	801cd2c <GUI_SetColor>

	//main rect (frame)
	GUI_DrawRect(1, 1, 479, 271);
 80042e0:	f240 130f 	movw	r3, #271	; 0x10f
 80042e4:	f240 12df 	movw	r2, #479	; 0x1df
 80042e8:	2101      	movs	r1, #1
 80042ea:	2001      	movs	r0, #1
 80042ec:	f01a fdb2 	bl	801ee54 <GUI_DrawRect>
	GUI_DrawRect(2, 2, 478, 270);
 80042f0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80042f4:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80042f8:	2102      	movs	r1, #2
 80042fa:	2002      	movs	r0, #2
 80042fc:	f01a fdaa 	bl	801ee54 <GUI_DrawRect>


	static uint8_t countdownBSPD = 11;
	static uint8_t clearFlagBSPD = 0;

	if(countdownBSPD == 0 && dataPointer == &CAR_Data.BSPD_status_can)
 8004300:	4ba2      	ldr	r3, [pc, #648]	; (800458c <AlarmPage+0x2e8>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d112      	bne.n	800432e <AlarmPage+0x8a>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4aa1      	ldr	r2, [pc, #644]	; (8004590 <AlarmPage+0x2ec>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d10e      	bne.n	800432e <AlarmPage+0x8a>
	{
		backColor = GUI_GREEN;
 8004310:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004314:	63bb      	str	r3, [r7, #56]	; 0x38
		GUI_SetBkColor(backColor);
 8004316:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004318:	f018 fd06 	bl	801cd28 <GUI_SetBkColor>

		if(clearFlagBSPD == 0)
 800431c:	4b9d      	ldr	r3, [pc, #628]	; (8004594 <AlarmPage+0x2f0>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d104      	bne.n	800432e <AlarmPage+0x8a>
		{
			GUI_Clear();
 8004324:	f019 fdae 	bl	801de84 <GUI_Clear>
			clearFlagBSPD = 1;
 8004328:	4b9a      	ldr	r3, [pc, #616]	; (8004594 <AlarmPage+0x2f0>)
 800432a:	2201      	movs	r2, #1
 800432c:	701a      	strb	r2, [r3, #0]
		}
	}


	if(dataPointer == &CAR_Data.waterPumpStatus)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4a99      	ldr	r2, [pc, #612]	; (8004598 <AlarmPage+0x2f4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d110      	bne.n	8004358 <AlarmPage+0xb4>
	{
		if(CAR_Data.waterPumpStatus.intData == 0)
 8004336:	4b99      	ldr	r3, [pc, #612]	; (800459c <AlarmPage+0x2f8>)
 8004338:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d105      	bne.n	800434c <AlarmPage+0xa8>
		{
			backColor = GUI_RED;
 8004340:	23ff      	movs	r3, #255	; 0xff
 8004342:	63bb      	str	r3, [r7, #56]	; 0x38
			GUI_SetBkColor(backColor);
 8004344:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004346:	f018 fcef 	bl	801cd28 <GUI_SetBkColor>
 800434a:	e005      	b.n	8004358 <AlarmPage+0xb4>
		}
		else
		{
			backColor = GUI_GREEN;
 800434c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004350:	63bb      	str	r3, [r7, #56]	; 0x38
			GUI_SetBkColor(backColor);
 8004352:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004354:	f018 fce8 	bl	801cd28 <GUI_SetBkColor>

	static char* lastString = 0;
	static uint32_t lastData = 0;
	static uint32_t lastBackColor = 0;

	if((string != lastString && dataTemp != lastData) || lastBackColor != backColor)
 8004358:	4b91      	ldr	r3, [pc, #580]	; (80045a0 <AlarmPage+0x2fc>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	429a      	cmp	r2, r3
 8004360:	d00c      	beq.n	800437c <AlarmPage+0xd8>
 8004362:	4b90      	ldr	r3, [pc, #576]	; (80045a4 <AlarmPage+0x300>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004372:	eeb4 7a67 	vcmp.f32	s14, s15
 8004376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437a:	d104      	bne.n	8004386 <AlarmPage+0xe2>
 800437c:	4b8a      	ldr	r3, [pc, #552]	; (80045a8 <AlarmPage+0x304>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004382:	429a      	cmp	r2, r3
 8004384:	d018      	beq.n	80043b8 <AlarmPage+0x114>
	{
		//GUI_SetColor(ARGB_CREATE(0, 100, 100, 255));
		GUI_SetColor(backColor);
 8004386:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004388:	f018 fcd0 	bl	801cd2c <GUI_SetColor>
		GUI_FillRect(3, 3, 477, 269);
 800438c:	f240 130d 	movw	r3, #269	; 0x10d
 8004390:	f240 12dd 	movw	r2, #477	; 0x1dd
 8004394:	2103      	movs	r1, #3
 8004396:	2003      	movs	r0, #3
 8004398:	f018 fdd2 	bl	801cf40 <GUI_FillRect>

		lastString = string;
 800439c:	4a80      	ldr	r2, [pc, #512]	; (80045a0 <AlarmPage+0x2fc>)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6013      	str	r3, [r2, #0]
		lastData = dataTemp;
 80043a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80043a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043aa:	ee17 2a90 	vmov	r2, s15
 80043ae:	4b7d      	ldr	r3, [pc, #500]	; (80045a4 <AlarmPage+0x300>)
 80043b0:	601a      	str	r2, [r3, #0]
		lastBackColor = backColor;
 80043b2:	4a7d      	ldr	r2, [pc, #500]	; (80045a8 <AlarmPage+0x304>)
 80043b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b6:	6013      	str	r3, [r2, #0]
	}



	GUI_SetColor(messageColor);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f018 fcb7 	bl	801cd2c <GUI_SetColor>
	GUI_SetBkColor(backColor);
 80043be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80043c0:	f018 fcb2 	bl	801cd28 <GUI_SetBkColor>

	GUI_SetTextAlign(GUI_TA_HCENTER);
 80043c4:	2002      	movs	r0, #2
 80043c6:	f018 fc79 	bl	801ccbc <GUI_SetTextAlign>
	GUI_SetFont(&GUI_Font32B_1);
 80043ca:	4878      	ldr	r0, [pc, #480]	; (80045ac <AlarmPage+0x308>)
 80043cc:	f018 fc80 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, 240, 46);
 80043d0:	222e      	movs	r2, #46	; 0x2e
 80043d2:	21f0      	movs	r1, #240	; 0xf0
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f019 fb87 	bl	801dae8 <GUI_DispStringAt>


	char stringInit[8] = "";
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	2300      	movs	r3, #0
 80043e0:	623b      	str	r3, [r7, #32]
	char stringEnd[8] = "";
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	2300      	movs	r3, #0
 80043e8:	61bb      	str	r3, [r7, #24]
	static  GUI_DrawNumAtTypeDef dataforText = {0};



	if(dataPointer == &CAR_Data.tractionControl && dataTemp == 0)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4a70      	ldr	r2, [pc, #448]	; (80045b0 <AlarmPage+0x30c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d112      	bne.n	8004418 <AlarmPage+0x174>
 80043f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80043f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043fe:	d10b      	bne.n	8004418 <AlarmPage+0x174>
	{
		GUI_SetFont(&ALARM_DATA_FONT);
 8004400:	486c      	ldr	r0, [pc, #432]	; (80045b4 <AlarmPage+0x310>)
 8004402:	f018 fc65 	bl	801ccd0 <GUI_SetFont>
		GUI_SetTextAlign(GUI_TA_HCENTER);
 8004406:	2002      	movs	r0, #2
 8004408:	f018 fc58 	bl	801ccbc <GUI_SetTextAlign>
		GUI_DispStringAt("OFF", 240, 100 + ALARM_DATA_OFFSET_Y);
 800440c:	225a      	movs	r2, #90	; 0x5a
 800440e:	21f0      	movs	r1, #240	; 0xf0
 8004410:	4869      	ldr	r0, [pc, #420]	; (80045b8 <AlarmPage+0x314>)
 8004412:	f019 fb69 	bl	801dae8 <GUI_DispStringAt>

		particularDataDetected = 1;
 8004416:	2401      	movs	r4, #1
	}

	if(dataPointer == &CAR_Data.map)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4a68      	ldr	r2, [pc, #416]	; (80045bc <AlarmPage+0x318>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d127      	bne.n	8004470 <AlarmPage+0x1cc>
	{
		GUI_SetFont(&ALARM_DATA_FONT);
 8004420:	4864      	ldr	r0, [pc, #400]	; (80045b4 <AlarmPage+0x310>)
 8004422:	f018 fc55 	bl	801ccd0 <GUI_SetFont>
		GUI_SetTextAlign(GUI_TA_HCENTER);
 8004426:	2002      	movs	r0, #2
 8004428:	f018 fc48 	bl	801ccbc <GUI_SetTextAlign>

		if(dataTemp == 0)
 800442c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004430:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004438:	d105      	bne.n	8004446 <AlarmPage+0x1a2>
		{
			GUI_DispStringAt("BASE", 240, 100 + ALARM_DATA_OFFSET_Y);
 800443a:	225a      	movs	r2, #90	; 0x5a
 800443c:	21f0      	movs	r1, #240	; 0xf0
 800443e:	4860      	ldr	r0, [pc, #384]	; (80045c0 <AlarmPage+0x31c>)
 8004440:	f019 fb52 	bl	801dae8 <GUI_DispStringAt>
 8004444:	e013      	b.n	800446e <AlarmPage+0x1ca>
		}
		else if(dataTemp == 1)
 8004446:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800444a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800444e:	eef4 7a47 	vcmp.f32	s15, s14
 8004452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004456:	d105      	bne.n	8004464 <AlarmPage+0x1c0>
		{
			GUI_DispStringAt("ECO", 240, 100 + ALARM_DATA_OFFSET_Y);
 8004458:	225a      	movs	r2, #90	; 0x5a
 800445a:	21f0      	movs	r1, #240	; 0xf0
 800445c:	4859      	ldr	r0, [pc, #356]	; (80045c4 <AlarmPage+0x320>)
 800445e:	f019 fb43 	bl	801dae8 <GUI_DispStringAt>
 8004462:	e004      	b.n	800446e <AlarmPage+0x1ca>
		}
		else
		{
			GUI_DispStringAt("ERROR", 240, 100 + ALARM_DATA_OFFSET_Y);
 8004464:	225a      	movs	r2, #90	; 0x5a
 8004466:	21f0      	movs	r1, #240	; 0xf0
 8004468:	4857      	ldr	r0, [pc, #348]	; (80045c8 <AlarmPage+0x324>)
 800446a:	f019 fb3d 	bl	801dae8 <GUI_DispStringAt>
		}

		particularDataDetected = 1;
 800446e:	2401      	movs	r4, #1
	}




	if(dataPointer == &CAR_Data.rpm)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4a56      	ldr	r2, [pc, #344]	; (80045cc <AlarmPage+0x328>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d10b      	bne.n	8004490 <AlarmPage+0x1ec>
	{
		GUI_SetFont(&ALARM_DATA_FONT);
 8004478:	484e      	ldr	r0, [pc, #312]	; (80045b4 <AlarmPage+0x310>)
 800447a:	f018 fc29 	bl	801ccd0 <GUI_SetFont>
		GUI_SetTextAlign(GUI_TA_HCENTER);
 800447e:	2002      	movs	r0, #2
 8004480:	f018 fc1c 	bl	801ccbc <GUI_SetTextAlign>
		GUI_DispStringAt("RPM", 240, 100 + ALARM_DATA_OFFSET_Y);
 8004484:	225a      	movs	r2, #90	; 0x5a
 8004486:	21f0      	movs	r1, #240	; 0xf0
 8004488:	4851      	ldr	r0, [pc, #324]	; (80045d0 <AlarmPage+0x32c>)
 800448a:	f019 fb2d 	bl	801dae8 <GUI_DispStringAt>

		particularDataDetected = 1;
 800448e:	2401      	movs	r4, #1
	}



	if(dataPointer == &CAR_Data.BSPD_status_can)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4a3f      	ldr	r2, [pc, #252]	; (8004590 <AlarmPage+0x2ec>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d117      	bne.n	80044c8 <AlarmPage+0x224>
				GUI_DispStringAt("RESTART!", 240, 180 + ALARM_DATA_OFFSET_Y);
			}
		}
		else
		{
			GUI_SetFont(&GUI_Font32B_1);
 8004498:	4844      	ldr	r0, [pc, #272]	; (80045ac <AlarmPage+0x308>)
 800449a:	f018 fc19 	bl	801ccd0 <GUI_SetFont>
			GUI_SetTextAlign(GUI_TA_HCENTER);
 800449e:	2002      	movs	r0, #2
 80044a0:	f018 fc0c 	bl	801ccbc <GUI_SetTextAlign>
			//GUI_DispStringAt("RETIRE", 240, 120);
			GUI_DispStringAt("IF CAN NOT RESTART", 240, 120);
 80044a4:	2278      	movs	r2, #120	; 0x78
 80044a6:	21f0      	movs	r1, #240	; 0xf0
 80044a8:	484a      	ldr	r0, [pc, #296]	; (80045d4 <AlarmPage+0x330>)
 80044aa:	f019 fb1d 	bl	801dae8 <GUI_DispStringAt>

			//GUI_SetFont(&GUI_Font32B_1);
			GUI_SetTextAlign(GUI_TA_HCENTER);
 80044ae:	2002      	movs	r0, #2
 80044b0:	f018 fc04 	bl	801ccbc <GUI_SetTextAlign>
			//GUI_DispStringAt("THE CAR", 240, 160);
			GUI_DispStringAt("RETIRE THE CAR", 240, 160);
 80044b4:	22a0      	movs	r2, #160	; 0xa0
 80044b6:	21f0      	movs	r1, #240	; 0xf0
 80044b8:	4847      	ldr	r0, [pc, #284]	; (80045d8 <AlarmPage+0x334>)
 80044ba:	f019 fb15 	bl	801dae8 <GUI_DispStringAt>
		}

		lastMillisBSPD = millis;
 80044be:	4b47      	ldr	r3, [pc, #284]	; (80045dc <AlarmPage+0x338>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a47      	ldr	r2, [pc, #284]	; (80045e0 <AlarmPage+0x33c>)
 80044c4:	6013      	str	r3, [r2, #0]

		particularDataDetected = 1;
 80044c6:	2401      	movs	r4, #1
	}



	if(dataPointer == &CAR_Data.waterPumpStatus)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4a33      	ldr	r2, [pc, #204]	; (8004598 <AlarmPage+0x2f4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d116      	bne.n	80044fe <AlarmPage+0x25a>
	{
		GUI_SetFont(&ALARM_DATA_FONT);
 80044d0:	4838      	ldr	r0, [pc, #224]	; (80045b4 <AlarmPage+0x310>)
 80044d2:	f018 fbfd 	bl	801ccd0 <GUI_SetFont>
		GUI_SetTextAlign(GUI_TA_HCENTER);
 80044d6:	2002      	movs	r0, #2
 80044d8:	f018 fbf0 	bl	801ccbc <GUI_SetTextAlign>


		if(CAR_Data.waterPumpStatus.intData == 0)
 80044dc:	4b2f      	ldr	r3, [pc, #188]	; (800459c <AlarmPage+0x2f8>)
 80044de:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d105      	bne.n	80044f2 <AlarmPage+0x24e>
		{
			GUI_DispStringAt("OFF", 240, 100 + ALARM_DATA_OFFSET_Y);
 80044e6:	225a      	movs	r2, #90	; 0x5a
 80044e8:	21f0      	movs	r1, #240	; 0xf0
 80044ea:	4833      	ldr	r0, [pc, #204]	; (80045b8 <AlarmPage+0x314>)
 80044ec:	f019 fafc 	bl	801dae8 <GUI_DispStringAt>
 80044f0:	e004      	b.n	80044fc <AlarmPage+0x258>
		}
		else
		{
			GUI_DispStringAt("ON", 240, 100 + ALARM_DATA_OFFSET_Y);
 80044f2:	225a      	movs	r2, #90	; 0x5a
 80044f4:	21f0      	movs	r1, #240	; 0xf0
 80044f6:	483b      	ldr	r0, [pc, #236]	; (80045e4 <AlarmPage+0x340>)
 80044f8:	f019 faf6 	bl	801dae8 <GUI_DispStringAt>
		}


		particularDataDetected = 1;
 80044fc:	2401      	movs	r4, #1
	}


	if(particularDataDetected == 0)
 80044fe:	2c00      	cmp	r4, #0
 8004500:	d13c      	bne.n	800457c <AlarmPage+0x2d8>
	{
		static uint32_t dataTempMillisRefresh = 0;
		static float dataTempDelayed = 0;

		if(dataPointer != dataPointerOld || millis >= dataTempMillisRefresh + 200)
 8004502:	4b39      	ldr	r3, [pc, #228]	; (80045e8 <AlarmPage+0x344>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	429a      	cmp	r2, r3
 800450a:	d107      	bne.n	800451c <AlarmPage+0x278>
 800450c:	4b37      	ldr	r3, [pc, #220]	; (80045ec <AlarmPage+0x348>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8004514:	4b31      	ldr	r3, [pc, #196]	; (80045dc <AlarmPage+0x338>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d806      	bhi.n	800452a <AlarmPage+0x286>
		{
			dataTempMillisRefresh = millis;
 800451c:	4b2f      	ldr	r3, [pc, #188]	; (80045dc <AlarmPage+0x338>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a32      	ldr	r2, [pc, #200]	; (80045ec <AlarmPage+0x348>)
 8004522:	6013      	str	r3, [r2, #0]
			dataTempDelayed = dataTemp;
 8004524:	4a32      	ldr	r2, [pc, #200]	; (80045f0 <AlarmPage+0x34c>)
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	6013      	str	r3, [r2, #0]
		}

		if(dataPointer == &CAR_Data.tractionControl)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	4a20      	ldr	r2, [pc, #128]	; (80045b0 <AlarmPage+0x30c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d102      	bne.n	8004538 <AlarmPage+0x294>
			dataTempDelayed = dataTemp;
 8004532:	4a2f      	ldr	r2, [pc, #188]	; (80045f0 <AlarmPage+0x34c>)
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	6013      	str	r3, [r2, #0]

		dataforText.number = dataTempDelayed;
 8004538:	4b2d      	ldr	r3, [pc, #180]	; (80045f0 <AlarmPage+0x34c>)
 800453a:	edd3 7a00 	vldr	s15, [r3]
 800453e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004542:	4b2c      	ldr	r3, [pc, #176]	; (80045f4 <AlarmPage+0x350>)
 8004544:	ed83 7b00 	vstr	d7, [r3]
		//GUI_DrawNumAt(240, 100, &GUI_FontD80, dataColor, backColor, &dataforText, UNDEFINED_NINT, decimalDigit, SIGN_NEGATIVE, DISABLE, CENTER, noString_, noString_);
		GUI_DrawNumAt(240, 100 + ALARM_DATA_OFFSET_Y, &ALARM_DATA_FONT, dataColor, backColor, &dataforText, UNDEFINED_NINT, decimalDigit, SIGN_NEGATIVE, DISABLE, CENTER, stringInit, stringEnd);
 8004548:	f107 0314 	add.w	r3, r7, #20
 800454c:	9308      	str	r3, [sp, #32]
 800454e:	f107 031c 	add.w	r3, r7, #28
 8004552:	9307      	str	r3, [sp, #28]
 8004554:	2302      	movs	r3, #2
 8004556:	9306      	str	r3, [sp, #24]
 8004558:	2300      	movs	r3, #0
 800455a:	9305      	str	r3, [sp, #20]
 800455c:	2303      	movs	r3, #3
 800455e:	9304      	str	r3, [sp, #16]
 8004560:	9503      	str	r5, [sp, #12]
 8004562:	f04f 33ff 	mov.w	r3, #4294967295
 8004566:	9302      	str	r3, [sp, #8]
 8004568:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <AlarmPage+0x350>)
 800456a:	9301      	str	r3, [sp, #4]
 800456c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	4a10      	ldr	r2, [pc, #64]	; (80045b4 <AlarmPage+0x310>)
 8004574:	215a      	movs	r1, #90	; 0x5a
 8004576:	20f0      	movs	r0, #240	; 0xf0
 8004578:	f011 f9b6 	bl	80158e8 <GUI_DrawNumAt>
	}

	dataPointerOld = dataPointer;
 800457c:	4a1a      	ldr	r2, [pc, #104]	; (80045e8 <AlarmPage+0x344>)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	6013      	str	r3, [r2, #0]
}
 8004582:	bf00      	nop
 8004584:	3728      	adds	r7, #40	; 0x28
 8004586:	46bd      	mov	sp, r7
 8004588:	bdb0      	pop	{r4, r5, r7, pc}
 800458a:	bf00      	nop
 800458c:	20000004 	.word	0x20000004
 8004590:	20000b90 	.word	0x20000b90
 8004594:	20001aec 	.word	0x20001aec
 8004598:	20000bdc 	.word	0x20000bdc
 800459c:	2000041c 	.word	0x2000041c
 80045a0:	20001af0 	.word	0x20001af0
 80045a4:	20001af4 	.word	0x20001af4
 80045a8:	20001af8 	.word	0x20001af8
 80045ac:	08127b30 	.word	0x08127b30
 80045b0:	20000718 	.word	0x20000718
 80045b4:	080d88a4 	.word	0x080d88a4
 80045b8:	08022300 	.word	0x08022300
 80045bc:	200007b0 	.word	0x200007b0
 80045c0:	08022304 	.word	0x08022304
 80045c4:	0802230c 	.word	0x0802230c
 80045c8:	08022310 	.word	0x08022310
 80045cc:	20000634 	.word	0x20000634
 80045d0:	08022318 	.word	0x08022318
 80045d4:	0802231c 	.word	0x0802231c
 80045d8:	08022330 	.word	0x08022330
 80045dc:	20006a98 	.word	0x20006a98
 80045e0:	20001afc 	.word	0x20001afc
 80045e4:	08022340 	.word	0x08022340
 80045e8:	20001b00 	.word	0x20001b00
 80045ec:	20001b04 	.word	0x20001b04
 80045f0:	20001b08 	.word	0x20001b08
 80045f4:	20001b10 	.word	0x20001b10

080045f8 <CAN_DATA_GuiChangePopUp_Add>:

uint8_t CAN_DATA_GuiChangePopUp_Add(uint8_t alarmId, CAN_DATA_Typedef* dataToAdd, uint32_t timeout, uint32_t popUpTime, uint32_t resetTime, char* message, uint32_t messageColor, uint32_t dataColor, uint32_t backColor)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	607a      	str	r2, [r7, #4]
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	4603      	mov	r3, r0
 8004606:	73fb      	strb	r3, [r7, #15]
	if(canDataToCheckNumber < maxcanDataToCheck)
 8004608:	4b68      	ldr	r3, [pc, #416]	; (80047ac <CAN_DATA_GuiChangePopUp_Add+0x1b4>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b31      	cmp	r3, #49	; 0x31
 800460e:	f200 80c5 	bhi.w	800479c <CAN_DATA_GuiChangePopUp_Add+0x1a4>
	{
		uint8_t setupError = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	75fb      	strb	r3, [r7, #23]

		for(uint16_t i = 0; i < canDataToCheckNumber; i++)
 8004616:	2300      	movs	r3, #0
 8004618:	82bb      	strh	r3, [r7, #20]
 800461a:	e010      	b.n	800463e <CAN_DATA_GuiChangePopUp_Add+0x46>
			if(canDataToCheck[i].alarmId == alarmId)
 800461c:	8aba      	ldrh	r2, [r7, #20]
 800461e:	4964      	ldr	r1, [pc, #400]	; (80047b0 <CAN_DATA_GuiChangePopUp_Add+0x1b8>)
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	440b      	add	r3, r1
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	7bfa      	ldrb	r2, [r7, #15]
 800462e:	429a      	cmp	r2, r3
 8004630:	d102      	bne.n	8004638 <CAN_DATA_GuiChangePopUp_Add+0x40>
				setupError++;
 8004632:	7dfb      	ldrb	r3, [r7, #23]
 8004634:	3301      	adds	r3, #1
 8004636:	75fb      	strb	r3, [r7, #23]
		for(uint16_t i = 0; i < canDataToCheckNumber; i++)
 8004638:	8abb      	ldrh	r3, [r7, #20]
 800463a:	3301      	adds	r3, #1
 800463c:	82bb      	strh	r3, [r7, #20]
 800463e:	4b5b      	ldr	r3, [pc, #364]	; (80047ac <CAN_DATA_GuiChangePopUp_Add+0x1b4>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	b29b      	uxth	r3, r3
 8004644:	8aba      	ldrh	r2, [r7, #20]
 8004646:	429a      	cmp	r2, r3
 8004648:	d3e8      	bcc.n	800461c <CAN_DATA_GuiChangePopUp_Add+0x24>

		if(setupError == 0)
 800464a:	7dfb      	ldrb	r3, [r7, #23]
 800464c:	2b00      	cmp	r3, #0
 800464e:	f040 80a3 	bne.w	8004798 <CAN_DATA_GuiChangePopUp_Add+0x1a0>
		{
			canDataToCheck[canDataToCheckNumber].alarmId =  alarmId;
 8004652:	4b56      	ldr	r3, [pc, #344]	; (80047ac <CAN_DATA_GuiChangePopUp_Add+0x1b4>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	4619      	mov	r1, r3
 8004658:	4a55      	ldr	r2, [pc, #340]	; (80047b0 <CAN_DATA_GuiChangePopUp_Add+0x1b8>)
 800465a:	460b      	mov	r3, r1
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	440b      	add	r3, r1
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	4413      	add	r3, r2
 8004664:	7bfa      	ldrb	r2, [r7, #15]
 8004666:	701a      	strb	r2, [r3, #0]
			canDataToCheck[canDataToCheckNumber].dataPointer = dataToAdd;
 8004668:	4b50      	ldr	r3, [pc, #320]	; (80047ac <CAN_DATA_GuiChangePopUp_Add+0x1b4>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	4619      	mov	r1, r3
 800466e:	4a50      	ldr	r2, [pc, #320]	; (80047b0 <CAN_DATA_GuiChangePopUp_Add+0x1b8>)
 8004670:	460b      	mov	r3, r1
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	440b      	add	r3, r1
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4413      	add	r3, r2
 800467a:	3304      	adds	r3, #4
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	601a      	str	r2, [r3, #0]
			canDataToCheck[canDataToCheckNumber].rangeControlEnable = DISABLE;
 8004680:	4b4a      	ldr	r3, [pc, #296]	; (80047ac <CAN_DATA_GuiChangePopUp_Add+0x1b4>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	4619      	mov	r1, r3
 8004686:	4a4a      	ldr	r2, [pc, #296]	; (80047b0 <CAN_DATA_GuiChangePopUp_Add+0x1b8>)
 8004688:	460b      	mov	r3, r1
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	440b      	add	r3, r1
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4413      	add	r3, r2
 8004692:	330c      	adds	r3, #12
 8004694:	2200      	movs	r2, #0
 8004696:	701a      	strb	r2, [r3, #0]
			canDataToCheck[canDataToCheckNumber].changeControlEnable = ENABLE;
 8004698:	4b44      	ldr	r3, [pc, #272]	; (80047ac <CAN_DATA_GuiChangePopUp_Add+0x1b4>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	4619      	mov	r1, r3
 800469e:	4a44      	ldr	r2, [pc, #272]	; (80047b0 <CAN_DATA_GuiChangePopUp_Add+0x1b8>)
 80046a0:	460b      	mov	r3, r1
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	440b      	add	r3, r1
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4413      	add	r3, r2
 80046aa:	330d      	adds	r3, #13
 80046ac:	2201      	movs	r2, #1
 80046ae:	701a      	strb	r2, [r3, #0]

			canDataToCheck[canDataToCheckNumber].dataOutRangeTime = timeout;
 80046b0:	4b3e      	ldr	r3, [pc, #248]	; (80047ac <CAN_DATA_GuiChangePopUp_Add+0x1b4>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	4619      	mov	r1, r3
 80046b6:	4a3e      	ldr	r2, [pc, #248]	; (80047b0 <CAN_DATA_GuiChangePopUp_Add+0x1b8>)
 80046b8:	460b      	mov	r3, r1
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	440b      	add	r3, r1
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	3310      	adds	r3, #16
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	601a      	str	r2, [r3, #0]
			canDataToCheck[canDataToCheckNumber].alarmTime = popUpTime;
 80046c8:	4b38      	ldr	r3, [pc, #224]	; (80047ac <CAN_DATA_GuiChangePopUp_Add+0x1b4>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	4619      	mov	r1, r3
 80046ce:	4a38      	ldr	r2, [pc, #224]	; (80047b0 <CAN_DATA_GuiChangePopUp_Add+0x1b8>)
 80046d0:	460b      	mov	r3, r1
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	440b      	add	r3, r1
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	4413      	add	r3, r2
 80046da:	3328      	adds	r3, #40	; 0x28
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	601a      	str	r2, [r3, #0]
			canDataToCheck[canDataToCheckNumber].alarmResetTime = resetTime;
 80046e0:	4b32      	ldr	r3, [pc, #200]	; (80047ac <CAN_DATA_GuiChangePopUp_Add+0x1b4>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	4619      	mov	r1, r3
 80046e6:	4a32      	ldr	r2, [pc, #200]	; (80047b0 <CAN_DATA_GuiChangePopUp_Add+0x1b8>)
 80046e8:	460b      	mov	r3, r1
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	440b      	add	r3, r1
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	4413      	add	r3, r2
 80046f2:	331c      	adds	r3, #28
 80046f4:	6a3a      	ldr	r2, [r7, #32]
 80046f6:	601a      	str	r2, [r3, #0]

			canDataToCheck[canDataToCheckNumber].message = message;
 80046f8:	4b2c      	ldr	r3, [pc, #176]	; (80047ac <CAN_DATA_GuiChangePopUp_Add+0x1b4>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	4619      	mov	r1, r3
 80046fe:	4a2c      	ldr	r2, [pc, #176]	; (80047b0 <CAN_DATA_GuiChangePopUp_Add+0x1b8>)
 8004700:	460b      	mov	r3, r1
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	440b      	add	r3, r1
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	4413      	add	r3, r2
 800470a:	3330      	adds	r3, #48	; 0x30
 800470c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470e:	601a      	str	r2, [r3, #0]

			canDataToCheck[canDataToCheckNumber].messageColor = messageColor;
 8004710:	4b26      	ldr	r3, [pc, #152]	; (80047ac <CAN_DATA_GuiChangePopUp_Add+0x1b4>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	4619      	mov	r1, r3
 8004716:	4a26      	ldr	r2, [pc, #152]	; (80047b0 <CAN_DATA_GuiChangePopUp_Add+0x1b8>)
 8004718:	460b      	mov	r3, r1
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	440b      	add	r3, r1
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4413      	add	r3, r2
 8004722:	3334      	adds	r3, #52	; 0x34
 8004724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004726:	601a      	str	r2, [r3, #0]
			canDataToCheck[canDataToCheckNumber].dataColor = dataColor;
 8004728:	4b20      	ldr	r3, [pc, #128]	; (80047ac <CAN_DATA_GuiChangePopUp_Add+0x1b4>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	4619      	mov	r1, r3
 800472e:	4a20      	ldr	r2, [pc, #128]	; (80047b0 <CAN_DATA_GuiChangePopUp_Add+0x1b8>)
 8004730:	460b      	mov	r3, r1
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	440b      	add	r3, r1
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	4413      	add	r3, r2
 800473a:	3338      	adds	r3, #56	; 0x38
 800473c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800473e:	601a      	str	r2, [r3, #0]
			canDataToCheck[canDataToCheckNumber].backColorUnder = backColor;
 8004740:	4b1a      	ldr	r3, [pc, #104]	; (80047ac <CAN_DATA_GuiChangePopUp_Add+0x1b4>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	4619      	mov	r1, r3
 8004746:	4a1a      	ldr	r2, [pc, #104]	; (80047b0 <CAN_DATA_GuiChangePopUp_Add+0x1b8>)
 8004748:	460b      	mov	r3, r1
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	440b      	add	r3, r1
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4413      	add	r3, r2
 8004752:	333c      	adds	r3, #60	; 0x3c
 8004754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004756:	601a      	str	r2, [r3, #0]
			canDataToCheck[canDataToCheckNumber].backColorOver = backColor;
 8004758:	4b14      	ldr	r3, [pc, #80]	; (80047ac <CAN_DATA_GuiChangePopUp_Add+0x1b4>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	4619      	mov	r1, r3
 800475e:	4a14      	ldr	r2, [pc, #80]	; (80047b0 <CAN_DATA_GuiChangePopUp_Add+0x1b8>)
 8004760:	460b      	mov	r3, r1
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	440b      	add	r3, r1
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4413      	add	r3, r2
 800476a:	3340      	adds	r3, #64	; 0x40
 800476c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800476e:	601a      	str	r2, [r3, #0]

			canDataToCheck[canDataToCheckNumber].firstCall = 0;
 8004770:	4b0e      	ldr	r3, [pc, #56]	; (80047ac <CAN_DATA_GuiChangePopUp_Add+0x1b4>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	4619      	mov	r1, r3
 8004776:	4a0e      	ldr	r2, [pc, #56]	; (80047b0 <CAN_DATA_GuiChangePopUp_Add+0x1b8>)
 8004778:	460b      	mov	r3, r1
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	440b      	add	r3, r1
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	4413      	add	r3, r2
 8004782:	3345      	adds	r3, #69	; 0x45
 8004784:	2200      	movs	r2, #0
 8004786:	701a      	strb	r2, [r3, #0]

			canDataToCheckNumber++;
 8004788:	4b08      	ldr	r3, [pc, #32]	; (80047ac <CAN_DATA_GuiChangePopUp_Add+0x1b4>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	3301      	adds	r3, #1
 800478e:	b2da      	uxtb	r2, r3
 8004790:	4b06      	ldr	r3, [pc, #24]	; (80047ac <CAN_DATA_GuiChangePopUp_Add+0x1b4>)
 8004792:	701a      	strb	r2, [r3, #0]
		}
		else
			return 1;

		return 0;
 8004794:	2300      	movs	r3, #0
 8004796:	e002      	b.n	800479e <CAN_DATA_GuiChangePopUp_Add+0x1a6>
			return 1;
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <CAN_DATA_GuiChangePopUp_Add+0x1a6>
	}
	else
		return 1;
 800479c:	2301      	movs	r3, #1
}
 800479e:	4618      	mov	r0, r3
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	20000c30 	.word	0x20000c30
 80047b0:	20000c34 	.word	0x20000c34

080047b4 <CAN_DATA_GuiRangePopUp_Add>:


uint8_t CAN_DATA_GuiRangePopUp_Add(uint8_t alarmId, CAN_DATA_Typedef* dataToAdd, uint32_t timeout, uint32_t popUpTime, uint32_t resetTime, char* message, uint32_t messageColor, uint32_t dataColor, uint32_t backColorUnder, uint32_t backColorOver)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	607a      	str	r2, [r7, #4]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4603      	mov	r3, r0
 80047c2:	73fb      	strb	r3, [r7, #15]
	if(canDataToCheckNumber < maxcanDataToCheck)
 80047c4:	4b68      	ldr	r3, [pc, #416]	; (8004968 <CAN_DATA_GuiRangePopUp_Add+0x1b4>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b31      	cmp	r3, #49	; 0x31
 80047ca:	f200 80c5 	bhi.w	8004958 <CAN_DATA_GuiRangePopUp_Add+0x1a4>
	{
		uint8_t setupError = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	75fb      	strb	r3, [r7, #23]

		for(uint16_t i = 0; i < canDataToCheckNumber; i++)
 80047d2:	2300      	movs	r3, #0
 80047d4:	82bb      	strh	r3, [r7, #20]
 80047d6:	e010      	b.n	80047fa <CAN_DATA_GuiRangePopUp_Add+0x46>
			if(canDataToCheck[i].alarmId == alarmId)
 80047d8:	8aba      	ldrh	r2, [r7, #20]
 80047da:	4964      	ldr	r1, [pc, #400]	; (800496c <CAN_DATA_GuiRangePopUp_Add+0x1b8>)
 80047dc:	4613      	mov	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4413      	add	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	440b      	add	r3, r1
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	7bfa      	ldrb	r2, [r7, #15]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d102      	bne.n	80047f4 <CAN_DATA_GuiRangePopUp_Add+0x40>
				setupError++;
 80047ee:	7dfb      	ldrb	r3, [r7, #23]
 80047f0:	3301      	adds	r3, #1
 80047f2:	75fb      	strb	r3, [r7, #23]
		for(uint16_t i = 0; i < canDataToCheckNumber; i++)
 80047f4:	8abb      	ldrh	r3, [r7, #20]
 80047f6:	3301      	adds	r3, #1
 80047f8:	82bb      	strh	r3, [r7, #20]
 80047fa:	4b5b      	ldr	r3, [pc, #364]	; (8004968 <CAN_DATA_GuiRangePopUp_Add+0x1b4>)
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	8aba      	ldrh	r2, [r7, #20]
 8004802:	429a      	cmp	r2, r3
 8004804:	d3e8      	bcc.n	80047d8 <CAN_DATA_GuiRangePopUp_Add+0x24>

		if(setupError == 0)
 8004806:	7dfb      	ldrb	r3, [r7, #23]
 8004808:	2b00      	cmp	r3, #0
 800480a:	f040 80a3 	bne.w	8004954 <CAN_DATA_GuiRangePopUp_Add+0x1a0>
		{
			canDataToCheck[canDataToCheckNumber].alarmId =  alarmId;
 800480e:	4b56      	ldr	r3, [pc, #344]	; (8004968 <CAN_DATA_GuiRangePopUp_Add+0x1b4>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	4619      	mov	r1, r3
 8004814:	4a55      	ldr	r2, [pc, #340]	; (800496c <CAN_DATA_GuiRangePopUp_Add+0x1b8>)
 8004816:	460b      	mov	r3, r1
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	440b      	add	r3, r1
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	4413      	add	r3, r2
 8004820:	7bfa      	ldrb	r2, [r7, #15]
 8004822:	701a      	strb	r2, [r3, #0]
			canDataToCheck[canDataToCheckNumber].dataPointer = dataToAdd;
 8004824:	4b50      	ldr	r3, [pc, #320]	; (8004968 <CAN_DATA_GuiRangePopUp_Add+0x1b4>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	4619      	mov	r1, r3
 800482a:	4a50      	ldr	r2, [pc, #320]	; (800496c <CAN_DATA_GuiRangePopUp_Add+0x1b8>)
 800482c:	460b      	mov	r3, r1
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	440b      	add	r3, r1
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	4413      	add	r3, r2
 8004836:	3304      	adds	r3, #4
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	601a      	str	r2, [r3, #0]
			canDataToCheck[canDataToCheckNumber].rangeControlEnable = ENABLE;
 800483c:	4b4a      	ldr	r3, [pc, #296]	; (8004968 <CAN_DATA_GuiRangePopUp_Add+0x1b4>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	4619      	mov	r1, r3
 8004842:	4a4a      	ldr	r2, [pc, #296]	; (800496c <CAN_DATA_GuiRangePopUp_Add+0x1b8>)
 8004844:	460b      	mov	r3, r1
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	440b      	add	r3, r1
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	4413      	add	r3, r2
 800484e:	330c      	adds	r3, #12
 8004850:	2201      	movs	r2, #1
 8004852:	701a      	strb	r2, [r3, #0]
			canDataToCheck[canDataToCheckNumber].changeControlEnable = DISABLE;
 8004854:	4b44      	ldr	r3, [pc, #272]	; (8004968 <CAN_DATA_GuiRangePopUp_Add+0x1b4>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	4619      	mov	r1, r3
 800485a:	4a44      	ldr	r2, [pc, #272]	; (800496c <CAN_DATA_GuiRangePopUp_Add+0x1b8>)
 800485c:	460b      	mov	r3, r1
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	440b      	add	r3, r1
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	4413      	add	r3, r2
 8004866:	330d      	adds	r3, #13
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]

			canDataToCheck[canDataToCheckNumber].dataOutRangeTime = timeout;
 800486c:	4b3e      	ldr	r3, [pc, #248]	; (8004968 <CAN_DATA_GuiRangePopUp_Add+0x1b4>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	4619      	mov	r1, r3
 8004872:	4a3e      	ldr	r2, [pc, #248]	; (800496c <CAN_DATA_GuiRangePopUp_Add+0x1b8>)
 8004874:	460b      	mov	r3, r1
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	440b      	add	r3, r1
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4413      	add	r3, r2
 800487e:	3310      	adds	r3, #16
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	601a      	str	r2, [r3, #0]
			canDataToCheck[canDataToCheckNumber].alarmTime = popUpTime;
 8004884:	4b38      	ldr	r3, [pc, #224]	; (8004968 <CAN_DATA_GuiRangePopUp_Add+0x1b4>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	4619      	mov	r1, r3
 800488a:	4a38      	ldr	r2, [pc, #224]	; (800496c <CAN_DATA_GuiRangePopUp_Add+0x1b8>)
 800488c:	460b      	mov	r3, r1
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	440b      	add	r3, r1
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	4413      	add	r3, r2
 8004896:	3328      	adds	r3, #40	; 0x28
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	601a      	str	r2, [r3, #0]
			canDataToCheck[canDataToCheckNumber].alarmResetTime = resetTime;
 800489c:	4b32      	ldr	r3, [pc, #200]	; (8004968 <CAN_DATA_GuiRangePopUp_Add+0x1b4>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	4619      	mov	r1, r3
 80048a2:	4a32      	ldr	r2, [pc, #200]	; (800496c <CAN_DATA_GuiRangePopUp_Add+0x1b8>)
 80048a4:	460b      	mov	r3, r1
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	440b      	add	r3, r1
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	4413      	add	r3, r2
 80048ae:	331c      	adds	r3, #28
 80048b0:	6a3a      	ldr	r2, [r7, #32]
 80048b2:	601a      	str	r2, [r3, #0]

			canDataToCheck[canDataToCheckNumber].message = message;
 80048b4:	4b2c      	ldr	r3, [pc, #176]	; (8004968 <CAN_DATA_GuiRangePopUp_Add+0x1b4>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	4619      	mov	r1, r3
 80048ba:	4a2c      	ldr	r2, [pc, #176]	; (800496c <CAN_DATA_GuiRangePopUp_Add+0x1b8>)
 80048bc:	460b      	mov	r3, r1
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	440b      	add	r3, r1
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	4413      	add	r3, r2
 80048c6:	3330      	adds	r3, #48	; 0x30
 80048c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ca:	601a      	str	r2, [r3, #0]

			canDataToCheck[canDataToCheckNumber].messageColor = messageColor;
 80048cc:	4b26      	ldr	r3, [pc, #152]	; (8004968 <CAN_DATA_GuiRangePopUp_Add+0x1b4>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	4619      	mov	r1, r3
 80048d2:	4a26      	ldr	r2, [pc, #152]	; (800496c <CAN_DATA_GuiRangePopUp_Add+0x1b8>)
 80048d4:	460b      	mov	r3, r1
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	440b      	add	r3, r1
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4413      	add	r3, r2
 80048de:	3334      	adds	r3, #52	; 0x34
 80048e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048e2:	601a      	str	r2, [r3, #0]
			canDataToCheck[canDataToCheckNumber].dataColor = dataColor;
 80048e4:	4b20      	ldr	r3, [pc, #128]	; (8004968 <CAN_DATA_GuiRangePopUp_Add+0x1b4>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	4619      	mov	r1, r3
 80048ea:	4a20      	ldr	r2, [pc, #128]	; (800496c <CAN_DATA_GuiRangePopUp_Add+0x1b8>)
 80048ec:	460b      	mov	r3, r1
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	440b      	add	r3, r1
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	4413      	add	r3, r2
 80048f6:	3338      	adds	r3, #56	; 0x38
 80048f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048fa:	601a      	str	r2, [r3, #0]
			canDataToCheck[canDataToCheckNumber].backColorUnder = backColorUnder;
 80048fc:	4b1a      	ldr	r3, [pc, #104]	; (8004968 <CAN_DATA_GuiRangePopUp_Add+0x1b4>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	4619      	mov	r1, r3
 8004902:	4a1a      	ldr	r2, [pc, #104]	; (800496c <CAN_DATA_GuiRangePopUp_Add+0x1b8>)
 8004904:	460b      	mov	r3, r1
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	440b      	add	r3, r1
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	4413      	add	r3, r2
 800490e:	333c      	adds	r3, #60	; 0x3c
 8004910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004912:	601a      	str	r2, [r3, #0]
			canDataToCheck[canDataToCheckNumber].backColorOver = backColorOver;
 8004914:	4b14      	ldr	r3, [pc, #80]	; (8004968 <CAN_DATA_GuiRangePopUp_Add+0x1b4>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	4619      	mov	r1, r3
 800491a:	4a14      	ldr	r2, [pc, #80]	; (800496c <CAN_DATA_GuiRangePopUp_Add+0x1b8>)
 800491c:	460b      	mov	r3, r1
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	440b      	add	r3, r1
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	4413      	add	r3, r2
 8004926:	3340      	adds	r3, #64	; 0x40
 8004928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800492a:	601a      	str	r2, [r3, #0]


			canDataToCheck[canDataToCheckNumber].firstCall = 0;
 800492c:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <CAN_DATA_GuiRangePopUp_Add+0x1b4>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	4619      	mov	r1, r3
 8004932:	4a0e      	ldr	r2, [pc, #56]	; (800496c <CAN_DATA_GuiRangePopUp_Add+0x1b8>)
 8004934:	460b      	mov	r3, r1
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	440b      	add	r3, r1
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	4413      	add	r3, r2
 800493e:	3345      	adds	r3, #69	; 0x45
 8004940:	2200      	movs	r2, #0
 8004942:	701a      	strb	r2, [r3, #0]

			canDataToCheckNumber++;
 8004944:	4b08      	ldr	r3, [pc, #32]	; (8004968 <CAN_DATA_GuiRangePopUp_Add+0x1b4>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	3301      	adds	r3, #1
 800494a:	b2da      	uxtb	r2, r3
 800494c:	4b06      	ldr	r3, [pc, #24]	; (8004968 <CAN_DATA_GuiRangePopUp_Add+0x1b4>)
 800494e:	701a      	strb	r2, [r3, #0]
		}
		else
			return 1;

		return 0;
 8004950:	2300      	movs	r3, #0
 8004952:	e002      	b.n	800495a <CAN_DATA_GuiRangePopUp_Add+0x1a6>
			return 1;
 8004954:	2301      	movs	r3, #1
 8004956:	e000      	b.n	800495a <CAN_DATA_GuiRangePopUp_Add+0x1a6>
	}
	else
		return 1;
 8004958:	2301      	movs	r3, #1
}
 800495a:	4618      	mov	r0, r3
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	20000c30 	.word	0x20000c30
 800496c:	20000c34 	.word	0x20000c34

08004970 <CAN_DATA_GuiPopUp_Disable>:


uint8_t CAN_DATA_GuiPopUp_Disable(uint8_t alarmId)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	71fb      	strb	r3, [r7, #7]
	for(uint16_t i = 0; i < canDataToCheckNumber; i++)
 800497a:	2300      	movs	r3, #0
 800497c:	81fb      	strh	r3, [r7, #14]
 800497e:	e023      	b.n	80049c8 <CAN_DATA_GuiPopUp_Disable+0x58>
	{
		if(canDataToCheck[i].alarmId == alarmId)
 8004980:	89fa      	ldrh	r2, [r7, #14]
 8004982:	4918      	ldr	r1, [pc, #96]	; (80049e4 <CAN_DATA_GuiPopUp_Disable+0x74>)
 8004984:	4613      	mov	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	4413      	add	r3, r2
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	440b      	add	r3, r1
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	79fa      	ldrb	r2, [r7, #7]
 8004992:	429a      	cmp	r2, r3
 8004994:	d115      	bne.n	80049c2 <CAN_DATA_GuiPopUp_Disable+0x52>
		{
			canDataToCheck[i].rangeControlEnable = DISABLE;
 8004996:	89fa      	ldrh	r2, [r7, #14]
 8004998:	4912      	ldr	r1, [pc, #72]	; (80049e4 <CAN_DATA_GuiPopUp_Disable+0x74>)
 800499a:	4613      	mov	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	4413      	add	r3, r2
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	440b      	add	r3, r1
 80049a4:	330c      	adds	r3, #12
 80049a6:	2200      	movs	r2, #0
 80049a8:	701a      	strb	r2, [r3, #0]
			canDataToCheck[i].changeControlEnable = DISABLE;
 80049aa:	89fa      	ldrh	r2, [r7, #14]
 80049ac:	490d      	ldr	r1, [pc, #52]	; (80049e4 <CAN_DATA_GuiPopUp_Disable+0x74>)
 80049ae:	4613      	mov	r3, r2
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	4413      	add	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	440b      	add	r3, r1
 80049b8:	330d      	adds	r3, #13
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]

			return 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	e009      	b.n	80049d6 <CAN_DATA_GuiPopUp_Disable+0x66>
	for(uint16_t i = 0; i < canDataToCheckNumber; i++)
 80049c2:	89fb      	ldrh	r3, [r7, #14]
 80049c4:	3301      	adds	r3, #1
 80049c6:	81fb      	strh	r3, [r7, #14]
 80049c8:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <CAN_DATA_GuiPopUp_Disable+0x78>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	89fa      	ldrh	r2, [r7, #14]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d3d5      	bcc.n	8004980 <CAN_DATA_GuiPopUp_Disable+0x10>
		}
	}

	return 1;
 80049d4:	2301      	movs	r3, #1
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20000c34 	.word	0x20000c34
 80049e8:	20000c30 	.word	0x20000c30

080049ec <CAN_DATA_GuiRangePopUp_Enable>:

	return 1;
}

uint8_t CAN_DATA_GuiRangePopUp_Enable(uint8_t alarmId)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	4603      	mov	r3, r0
 80049f4:	71fb      	strb	r3, [r7, #7]
	for(uint16_t i = 0; i < canDataToCheckNumber; i++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	81fb      	strh	r3, [r7, #14]
 80049fa:	e023      	b.n	8004a44 <CAN_DATA_GuiRangePopUp_Enable+0x58>
	{
		if(canDataToCheck[i].alarmId == alarmId)
 80049fc:	89fa      	ldrh	r2, [r7, #14]
 80049fe:	4918      	ldr	r1, [pc, #96]	; (8004a60 <CAN_DATA_GuiRangePopUp_Enable+0x74>)
 8004a00:	4613      	mov	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	440b      	add	r3, r1
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	79fa      	ldrb	r2, [r7, #7]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d115      	bne.n	8004a3e <CAN_DATA_GuiRangePopUp_Enable+0x52>
		{
			canDataToCheck[i].rangeControlEnable = ENABLE;
 8004a12:	89fa      	ldrh	r2, [r7, #14]
 8004a14:	4912      	ldr	r1, [pc, #72]	; (8004a60 <CAN_DATA_GuiRangePopUp_Enable+0x74>)
 8004a16:	4613      	mov	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	440b      	add	r3, r1
 8004a20:	330c      	adds	r3, #12
 8004a22:	2201      	movs	r2, #1
 8004a24:	701a      	strb	r2, [r3, #0]
			canDataToCheck[i].changeControlEnable = DISABLE;
 8004a26:	89fa      	ldrh	r2, [r7, #14]
 8004a28:	490d      	ldr	r1, [pc, #52]	; (8004a60 <CAN_DATA_GuiRangePopUp_Enable+0x74>)
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	4413      	add	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	440b      	add	r3, r1
 8004a34:	330d      	adds	r3, #13
 8004a36:	2200      	movs	r2, #0
 8004a38:	701a      	strb	r2, [r3, #0]

			return 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e009      	b.n	8004a52 <CAN_DATA_GuiRangePopUp_Enable+0x66>
	for(uint16_t i = 0; i < canDataToCheckNumber; i++)
 8004a3e:	89fb      	ldrh	r3, [r7, #14]
 8004a40:	3301      	adds	r3, #1
 8004a42:	81fb      	strh	r3, [r7, #14]
 8004a44:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <CAN_DATA_GuiRangePopUp_Enable+0x78>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	89fa      	ldrh	r2, [r7, #14]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d3d5      	bcc.n	80049fc <CAN_DATA_GuiRangePopUp_Enable+0x10>
		}
	}

	return 1;
 8004a50:	2301      	movs	r3, #1
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	20000c34 	.word	0x20000c34
 8004a64:	20000c30 	.word	0x20000c30

08004a68 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004a6e:	463b      	mov	r3, r7
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	605a      	str	r2, [r3, #4]
 8004a76:	609a      	str	r2, [r3, #8]
 8004a78:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004a7a:	4b21      	ldr	r3, [pc, #132]	; (8004b00 <MX_ADC1_Init+0x98>)
 8004a7c:	4a21      	ldr	r2, [pc, #132]	; (8004b04 <MX_ADC1_Init+0x9c>)
 8004a7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004a80:	4b1f      	ldr	r3, [pc, #124]	; (8004b00 <MX_ADC1_Init+0x98>)
 8004a82:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004a86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004a88:	4b1d      	ldr	r3, [pc, #116]	; (8004b00 <MX_ADC1_Init+0x98>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004a8e:	4b1c      	ldr	r3, [pc, #112]	; (8004b00 <MX_ADC1_Init+0x98>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004a94:	4b1a      	ldr	r3, [pc, #104]	; (8004b00 <MX_ADC1_Init+0x98>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004a9a:	4b19      	ldr	r3, [pc, #100]	; (8004b00 <MX_ADC1_Init+0x98>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004aa2:	4b17      	ldr	r3, [pc, #92]	; (8004b00 <MX_ADC1_Init+0x98>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004aa8:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <MX_ADC1_Init+0x98>)
 8004aaa:	4a17      	ldr	r2, [pc, #92]	; (8004b08 <MX_ADC1_Init+0xa0>)
 8004aac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004aae:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <MX_ADC1_Init+0x98>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004ab4:	4b12      	ldr	r3, [pc, #72]	; (8004b00 <MX_ADC1_Init+0x98>)
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004aba:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <MX_ADC1_Init+0x98>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004ac2:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <MX_ADC1_Init+0x98>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004ac8:	480d      	ldr	r0, [pc, #52]	; (8004b00 <MX_ADC1_Init+0x98>)
 8004aca:	f00b fe65 	bl	8010798 <HAL_ADC_Init>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004ad4:	f001 fde6 	bl	80066a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <MX_ADC1_Init+0xa4>)
 8004ada:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004adc:	2301      	movs	r3, #1
 8004ade:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004ae0:	2307      	movs	r3, #7
 8004ae2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ae4:	463b      	mov	r3, r7
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4805      	ldr	r0, [pc, #20]	; (8004b00 <MX_ADC1_Init+0x98>)
 8004aea:	f00c f833 	bl	8010b54 <HAL_ADC_ConfigChannel>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004af4:	f001 fdd6 	bl	80066a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004af8:	bf00      	nop
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20001b28 	.word	0x20001b28
 8004b04:	40012000 	.word	0x40012000
 8004b08:	0f000001 	.word	0x0f000001
 8004b0c:	10000012 	.word	0x10000012

08004b10 <MX_ADC3_Init>:
  /* USER CODE END ADC2_Init 2 */

}
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004b16:	463b      	mov	r3, r7
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	605a      	str	r2, [r3, #4]
 8004b1e:	609a      	str	r2, [r3, #8]
 8004b20:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8004b22:	4b21      	ldr	r3, [pc, #132]	; (8004ba8 <MX_ADC3_Init+0x98>)
 8004b24:	4a21      	ldr	r2, [pc, #132]	; (8004bac <MX_ADC3_Init+0x9c>)
 8004b26:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004b28:	4b1f      	ldr	r3, [pc, #124]	; (8004ba8 <MX_ADC3_Init+0x98>)
 8004b2a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004b2e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004b30:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <MX_ADC3_Init+0x98>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004b36:	4b1c      	ldr	r3, [pc, #112]	; (8004ba8 <MX_ADC3_Init+0x98>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <MX_ADC3_Init+0x98>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004b42:	4b19      	ldr	r3, [pc, #100]	; (8004ba8 <MX_ADC3_Init+0x98>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004b4a:	4b17      	ldr	r3, [pc, #92]	; (8004ba8 <MX_ADC3_Init+0x98>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004b50:	4b15      	ldr	r3, [pc, #84]	; (8004ba8 <MX_ADC3_Init+0x98>)
 8004b52:	4a17      	ldr	r2, [pc, #92]	; (8004bb0 <MX_ADC3_Init+0xa0>)
 8004b54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b56:	4b14      	ldr	r3, [pc, #80]	; (8004ba8 <MX_ADC3_Init+0x98>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8004b5c:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <MX_ADC3_Init+0x98>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8004b62:	4b11      	ldr	r3, [pc, #68]	; (8004ba8 <MX_ADC3_Init+0x98>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004b6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <MX_ADC3_Init+0x98>)
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004b70:	480d      	ldr	r0, [pc, #52]	; (8004ba8 <MX_ADC3_Init+0x98>)
 8004b72:	f00b fe11 	bl	8010798 <HAL_ADC_Init>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8004b7c:	f001 fd92 	bl	80066a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004b80:	230d      	movs	r3, #13
 8004b82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004b84:	2301      	movs	r3, #1
 8004b86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004b8c:	463b      	mov	r3, r7
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4805      	ldr	r0, [pc, #20]	; (8004ba8 <MX_ADC3_Init+0x98>)
 8004b92:	f00b ffdf 	bl	8010b54 <HAL_ADC_ConfigChannel>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8004b9c:	f001 fd82 	bl	80066a4 <Error_Handler>
  /* USER CODE BEGIN ADC3_Init 2 */


  /* USER CODE END ADC3_Init 2 */

}
 8004ba0:	bf00      	nop
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	20001b70 	.word	0x20001b70
 8004bac:	40012200 	.word	0x40012200
 8004bb0:	0f000001 	.word	0x0f000001

08004bb4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08c      	sub	sp, #48	; 0x30
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bbc:	f107 031c 	add.w	r3, r7, #28
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	605a      	str	r2, [r3, #4]
 8004bc6:	609a      	str	r2, [r3, #8]
 8004bc8:	60da      	str	r2, [r3, #12]
 8004bca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a33      	ldr	r2, [pc, #204]	; (8004ca0 <HAL_ADC_MspInit+0xec>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_ADC_MspInit+0x3c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004bd6:	4b33      	ldr	r3, [pc, #204]	; (8004ca4 <HAL_ADC_MspInit+0xf0>)
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	4a32      	ldr	r2, [pc, #200]	; (8004ca4 <HAL_ADC_MspInit+0xf0>)
 8004bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be0:	6453      	str	r3, [r2, #68]	; 0x44
 8004be2:	4b30      	ldr	r3, [pc, #192]	; (8004ca4 <HAL_ADC_MspInit+0xf0>)
 8004be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bea:	61bb      	str	r3, [r7, #24]
 8004bec:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8004bee:	e052      	b.n	8004c96 <HAL_ADC_MspInit+0xe2>
  else if(adcHandle->Instance==ADC2)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a2c      	ldr	r2, [pc, #176]	; (8004ca8 <HAL_ADC_MspInit+0xf4>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d124      	bne.n	8004c44 <HAL_ADC_MspInit+0x90>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004bfa:	4b2a      	ldr	r3, [pc, #168]	; (8004ca4 <HAL_ADC_MspInit+0xf0>)
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	4a29      	ldr	r2, [pc, #164]	; (8004ca4 <HAL_ADC_MspInit+0xf0>)
 8004c00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c04:	6453      	str	r3, [r2, #68]	; 0x44
 8004c06:	4b27      	ldr	r3, [pc, #156]	; (8004ca4 <HAL_ADC_MspInit+0xf0>)
 8004c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c12:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <HAL_ADC_MspInit+0xf0>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	4a23      	ldr	r2, [pc, #140]	; (8004ca4 <HAL_ADC_MspInit+0xf0>)
 8004c18:	f043 0304 	orr.w	r3, r3, #4
 8004c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c1e:	4b21      	ldr	r3, [pc, #132]	; (8004ca4 <HAL_ADC_MspInit+0xf0>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = AN3_F_Pin|AN4_F_Pin;
 8004c2a:	2330      	movs	r3, #48	; 0x30
 8004c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c36:	f107 031c 	add.w	r3, r7, #28
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	481b      	ldr	r0, [pc, #108]	; (8004cac <HAL_ADC_MspInit+0xf8>)
 8004c3e:	f00d fb3b 	bl	80122b8 <HAL_GPIO_Init>
}
 8004c42:	e028      	b.n	8004c96 <HAL_ADC_MspInit+0xe2>
  else if(adcHandle->Instance==ADC3)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a19      	ldr	r2, [pc, #100]	; (8004cb0 <HAL_ADC_MspInit+0xfc>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d123      	bne.n	8004c96 <HAL_ADC_MspInit+0xe2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004c4e:	4b15      	ldr	r3, [pc, #84]	; (8004ca4 <HAL_ADC_MspInit+0xf0>)
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	4a14      	ldr	r2, [pc, #80]	; (8004ca4 <HAL_ADC_MspInit+0xf0>)
 8004c54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c58:	6453      	str	r3, [r2, #68]	; 0x44
 8004c5a:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <HAL_ADC_MspInit+0xf0>)
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c66:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <HAL_ADC_MspInit+0xf0>)
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ca4 <HAL_ADC_MspInit+0xf0>)
 8004c6c:	f043 0304 	orr.w	r3, r3, #4
 8004c70:	6313      	str	r3, [r2, #48]	; 0x30
 8004c72:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <HAL_ADC_MspInit+0xf0>)
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TEMP_Pin|AN1_F_Pin|AN2_F_Pin;
 8004c7e:	230e      	movs	r3, #14
 8004c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c82:	2303      	movs	r3, #3
 8004c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c8a:	f107 031c 	add.w	r3, r7, #28
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4806      	ldr	r0, [pc, #24]	; (8004cac <HAL_ADC_MspInit+0xf8>)
 8004c92:	f00d fb11 	bl	80122b8 <HAL_GPIO_Init>
}
 8004c96:	bf00      	nop
 8004c98:	3730      	adds	r7, #48	; 0x30
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40012000 	.word	0x40012000
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	40012100 	.word	0x40012100
 8004cac:	40020800 	.word	0x40020800
 8004cb0:	40012200 	.word	0x40012200

08004cb4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8004cb8:	4b18      	ldr	r3, [pc, #96]	; (8004d1c <MX_CAN1_Init+0x68>)
 8004cba:	4a19      	ldr	r2, [pc, #100]	; (8004d20 <MX_CAN1_Init+0x6c>)
 8004cbc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8004cbe:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <MX_CAN1_Init+0x68>)
 8004cc0:	2209      	movs	r2, #9
 8004cc2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004cc4:	4b15      	ldr	r3, [pc, #84]	; (8004d1c <MX_CAN1_Init+0x68>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8004cca:	4b14      	ldr	r3, [pc, #80]	; (8004d1c <MX_CAN1_Init+0x68>)
 8004ccc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cd0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8004cd2:	4b12      	ldr	r3, [pc, #72]	; (8004d1c <MX_CAN1_Init+0x68>)
 8004cd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cd8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8004cda:	4b10      	ldr	r3, [pc, #64]	; (8004d1c <MX_CAN1_Init+0x68>)
 8004cdc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ce0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004ce2:	4b0e      	ldr	r3, [pc, #56]	; (8004d1c <MX_CAN1_Init+0x68>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <MX_CAN1_Init+0x68>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8004cee:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <MX_CAN1_Init+0x68>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8004cf4:	4b09      	ldr	r3, [pc, #36]	; (8004d1c <MX_CAN1_Init+0x68>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004cfa:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <MX_CAN1_Init+0x68>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004d00:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <MX_CAN1_Init+0x68>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004d06:	4805      	ldr	r0, [pc, #20]	; (8004d1c <MX_CAN1_Init+0x68>)
 8004d08:	f00c f968 	bl	8010fdc <HAL_CAN_Init>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8004d12:	f001 fcc7 	bl	80066a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8004d16:	bf00      	nop
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20001bb8 	.word	0x20001bb8
 8004d20:	40006400 	.word	0x40006400

08004d24 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8004d28:	4b17      	ldr	r3, [pc, #92]	; (8004d88 <MX_CAN2_Init+0x64>)
 8004d2a:	4a18      	ldr	r2, [pc, #96]	; (8004d8c <MX_CAN2_Init+0x68>)
 8004d2c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 8004d2e:	4b16      	ldr	r3, [pc, #88]	; (8004d88 <MX_CAN2_Init+0x64>)
 8004d30:	2206      	movs	r2, #6
 8004d32:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8004d34:	4b14      	ldr	r3, [pc, #80]	; (8004d88 <MX_CAN2_Init+0x64>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004d3a:	4b13      	ldr	r3, [pc, #76]	; (8004d88 <MX_CAN2_Init+0x64>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8004d40:	4b11      	ldr	r3, [pc, #68]	; (8004d88 <MX_CAN2_Init+0x64>)
 8004d42:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8004d46:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8004d48:	4b0f      	ldr	r3, [pc, #60]	; (8004d88 <MX_CAN2_Init+0x64>)
 8004d4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d4e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8004d50:	4b0d      	ldr	r3, [pc, #52]	; (8004d88 <MX_CAN2_Init+0x64>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8004d56:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <MX_CAN2_Init+0x64>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <MX_CAN2_Init+0x64>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8004d62:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <MX_CAN2_Init+0x64>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8004d68:	4b07      	ldr	r3, [pc, #28]	; (8004d88 <MX_CAN2_Init+0x64>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8004d6e:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <MX_CAN2_Init+0x64>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8004d74:	4804      	ldr	r0, [pc, #16]	; (8004d88 <MX_CAN2_Init+0x64>)
 8004d76:	f00c f931 	bl	8010fdc <HAL_CAN_Init>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8004d80:	f001 fc90 	bl	80066a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8004d84:	bf00      	nop
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	20001be0 	.word	0x20001be0
 8004d8c:	40006800 	.word	0x40006800

08004d90 <HAL_CAN_MspInit>:
static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN3_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN2_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b092      	sub	sp, #72	; 0x48
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	605a      	str	r2, [r3, #4]
 8004da2:	609a      	str	r2, [r3, #8]
 8004da4:	60da      	str	r2, [r3, #12]
 8004da6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a82      	ldr	r2, [pc, #520]	; (8004fb8 <HAL_CAN_MspInit+0x228>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d13a      	bne.n	8004e28 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004db2:	4b82      	ldr	r3, [pc, #520]	; (8004fbc <HAL_CAN_MspInit+0x22c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3301      	adds	r3, #1
 8004db8:	4a80      	ldr	r2, [pc, #512]	; (8004fbc <HAL_CAN_MspInit+0x22c>)
 8004dba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004dbc:	4b7f      	ldr	r3, [pc, #508]	; (8004fbc <HAL_CAN_MspInit+0x22c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d10b      	bne.n	8004ddc <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004dc4:	4b7e      	ldr	r3, [pc, #504]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	4a7d      	ldr	r2, [pc, #500]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004dca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004dce:	6413      	str	r3, [r2, #64]	; 0x40
 8004dd0:	4b7b      	ldr	r3, [pc, #492]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd8:	633b      	str	r3, [r7, #48]	; 0x30
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ddc:	4b78      	ldr	r3, [pc, #480]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de0:	4a77      	ldr	r2, [pc, #476]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	6313      	str	r3, [r2, #48]	; 0x30
 8004de8:	4b75      	ldr	r3, [pc, #468]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004df4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004df8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e02:	2303      	movs	r3, #3
 8004e04:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004e06:	2309      	movs	r3, #9
 8004e08:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e0e:	4619      	mov	r1, r3
 8004e10:	486c      	ldr	r0, [pc, #432]	; (8004fc4 <HAL_CAN_MspInit+0x234>)
 8004e12:	f00d fa51 	bl	80122b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8004e16:	2200      	movs	r2, #0
 8004e18:	2100      	movs	r1, #0
 8004e1a:	2014      	movs	r0, #20
 8004e1c:	f00d f833 	bl	8011e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004e20:	2014      	movs	r0, #20
 8004e22:	f00d f84c 	bl	8011ebe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8004e26:	e0c2      	b.n	8004fae <HAL_CAN_MspInit+0x21e>
  else if(canHandle->Instance==CAN2)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a66      	ldr	r2, [pc, #408]	; (8004fc8 <HAL_CAN_MspInit+0x238>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d15c      	bne.n	8004eec <HAL_CAN_MspInit+0x15c>
    HAL_RCC_CAN3_CLK_ENABLED++;
 8004e32:	4b66      	ldr	r3, [pc, #408]	; (8004fcc <HAL_CAN_MspInit+0x23c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3301      	adds	r3, #1
 8004e38:	4a64      	ldr	r2, [pc, #400]	; (8004fcc <HAL_CAN_MspInit+0x23c>)
 8004e3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 8004e3c:	4b63      	ldr	r3, [pc, #396]	; (8004fcc <HAL_CAN_MspInit+0x23c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d10b      	bne.n	8004e5c <HAL_CAN_MspInit+0xcc>
      __HAL_RCC_CAN3_CLK_ENABLE();
 8004e44:	4b5e      	ldr	r3, [pc, #376]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	4a5d      	ldr	r2, [pc, #372]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004e4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8004e50:	4b5b      	ldr	r3, [pc, #364]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_RCC_CAN2_CLK_ENABLED++;
 8004e5c:	4b5c      	ldr	r3, [pc, #368]	; (8004fd0 <HAL_CAN_MspInit+0x240>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3301      	adds	r3, #1
 8004e62:	4a5b      	ldr	r2, [pc, #364]	; (8004fd0 <HAL_CAN_MspInit+0x240>)
 8004e64:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 8004e66:	4b5a      	ldr	r3, [pc, #360]	; (8004fd0 <HAL_CAN_MspInit+0x240>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d10b      	bne.n	8004e86 <HAL_CAN_MspInit+0xf6>
      __HAL_RCC_CAN2_CLK_ENABLE();
 8004e6e:	4b54      	ldr	r3, [pc, #336]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	4a53      	ldr	r2, [pc, #332]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004e74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e78:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7a:	4b51      	ldr	r3, [pc, #324]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004e86:	4b4d      	ldr	r3, [pc, #308]	; (8004fbc <HAL_CAN_MspInit+0x22c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	4a4b      	ldr	r2, [pc, #300]	; (8004fbc <HAL_CAN_MspInit+0x22c>)
 8004e8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004e90:	4b4a      	ldr	r3, [pc, #296]	; (8004fbc <HAL_CAN_MspInit+0x22c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d10b      	bne.n	8004eb0 <HAL_CAN_MspInit+0x120>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004e98:	4b49      	ldr	r3, [pc, #292]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9c:	4a48      	ldr	r2, [pc, #288]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004e9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ea4:	4b46      	ldr	r3, [pc, #280]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eac:	623b      	str	r3, [r7, #32]
 8004eae:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eb0:	4b43      	ldr	r3, [pc, #268]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb4:	4a42      	ldr	r2, [pc, #264]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004eb6:	f043 0302 	orr.w	r3, r3, #2
 8004eba:	6313      	str	r3, [r2, #48]	; 0x30
 8004ebc:	4b40      	ldr	r3, [pc, #256]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	61fb      	str	r3, [r7, #28]
 8004ec6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004ec8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004ecc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ece:	2302      	movs	r3, #2
 8004ed0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004eda:	2309      	movs	r3, #9
 8004edc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ede:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	483b      	ldr	r0, [pc, #236]	; (8004fd4 <HAL_CAN_MspInit+0x244>)
 8004ee6:	f00d f9e7 	bl	80122b8 <HAL_GPIO_Init>
}
 8004eea:	e060      	b.n	8004fae <HAL_CAN_MspInit+0x21e>
  else if(canHandle->Instance==CAN3)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a39      	ldr	r2, [pc, #228]	; (8004fd8 <HAL_CAN_MspInit+0x248>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d15b      	bne.n	8004fae <HAL_CAN_MspInit+0x21e>
    HAL_RCC_CAN3_CLK_ENABLED++;
 8004ef6:	4b35      	ldr	r3, [pc, #212]	; (8004fcc <HAL_CAN_MspInit+0x23c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3301      	adds	r3, #1
 8004efc:	4a33      	ldr	r2, [pc, #204]	; (8004fcc <HAL_CAN_MspInit+0x23c>)
 8004efe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 8004f00:	4b32      	ldr	r3, [pc, #200]	; (8004fcc <HAL_CAN_MspInit+0x23c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d10b      	bne.n	8004f20 <HAL_CAN_MspInit+0x190>
      __HAL_RCC_CAN3_CLK_ENABLE();
 8004f08:	4b2d      	ldr	r3, [pc, #180]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	4a2c      	ldr	r2, [pc, #176]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004f0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f12:	6413      	str	r3, [r2, #64]	; 0x40
 8004f14:	4b2a      	ldr	r3, [pc, #168]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	69bb      	ldr	r3, [r7, #24]
    HAL_RCC_CAN2_CLK_ENABLED++;
 8004f20:	4b2b      	ldr	r3, [pc, #172]	; (8004fd0 <HAL_CAN_MspInit+0x240>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3301      	adds	r3, #1
 8004f26:	4a2a      	ldr	r2, [pc, #168]	; (8004fd0 <HAL_CAN_MspInit+0x240>)
 8004f28:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 8004f2a:	4b29      	ldr	r3, [pc, #164]	; (8004fd0 <HAL_CAN_MspInit+0x240>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d10b      	bne.n	8004f4a <HAL_CAN_MspInit+0x1ba>
      __HAL_RCC_CAN2_CLK_ENABLE();
 8004f32:	4b23      	ldr	r3, [pc, #140]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	4a22      	ldr	r2, [pc, #136]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004f38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f3e:	4b20      	ldr	r3, [pc, #128]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004f4a:	4b1c      	ldr	r3, [pc, #112]	; (8004fbc <HAL_CAN_MspInit+0x22c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	4a1a      	ldr	r2, [pc, #104]	; (8004fbc <HAL_CAN_MspInit+0x22c>)
 8004f52:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004f54:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <HAL_CAN_MspInit+0x22c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d10b      	bne.n	8004f74 <HAL_CAN_MspInit+0x1e4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004f5c:	4b18      	ldr	r3, [pc, #96]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	4a17      	ldr	r2, [pc, #92]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004f62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f66:	6413      	str	r3, [r2, #64]	; 0x40
 8004f68:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f74:	4b12      	ldr	r3, [pc, #72]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	4a11      	ldr	r2, [pc, #68]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004f7a:	f043 0301 	orr.w	r3, r3, #1
 8004f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f80:	4b0f      	ldr	r3, [pc, #60]	; (8004fc0 <HAL_CAN_MspInit+0x230>)
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8004f8c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8004f90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f92:	2302      	movs	r3, #2
 8004f94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8004f9e:	230b      	movs	r3, #11
 8004fa0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fa2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4806      	ldr	r0, [pc, #24]	; (8004fc4 <HAL_CAN_MspInit+0x234>)
 8004faa:	f00d f985 	bl	80122b8 <HAL_GPIO_Init>
}
 8004fae:	bf00      	nop
 8004fb0:	3748      	adds	r7, #72	; 0x48
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40006400 	.word	0x40006400
 8004fbc:	20001c08 	.word	0x20001c08
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	40020000 	.word	0x40020000
 8004fc8:	40006800 	.word	0x40006800
 8004fcc:	20001c0c 	.word	0x20001c0c
 8004fd0:	20001c10 	.word	0x20001c10
 8004fd4:	40020400 	.word	0x40020400
 8004fd8:	40003400 	.word	0x40003400

08004fdc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004fe0:	4b0d      	ldr	r3, [pc, #52]	; (8005018 <MX_CRC_Init+0x3c>)
 8004fe2:	4a0e      	ldr	r2, [pc, #56]	; (800501c <MX_CRC_Init+0x40>)
 8004fe4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004fe6:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <MX_CRC_Init+0x3c>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8004fec:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <MX_CRC_Init+0x3c>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8004ff2:	4b09      	ldr	r3, [pc, #36]	; (8005018 <MX_CRC_Init+0x3c>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004ff8:	4b07      	ldr	r3, [pc, #28]	; (8005018 <MX_CRC_Init+0x3c>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004ffe:	4b06      	ldr	r3, [pc, #24]	; (8005018 <MX_CRC_Init+0x3c>)
 8005000:	2201      	movs	r2, #1
 8005002:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005004:	4804      	ldr	r0, [pc, #16]	; (8005018 <MX_CRC_Init+0x3c>)
 8005006:	f00c ff75 	bl	8011ef4 <HAL_CRC_Init>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8005010:	f001 fb48 	bl	80066a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8005014:	bf00      	nop
 8005016:	bd80      	pop	{r7, pc}
 8005018:	20001c14 	.word	0x20001c14
 800501c:	40023000 	.word	0x40023000

08005020 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a0a      	ldr	r2, [pc, #40]	; (8005058 <HAL_CRC_MspInit+0x38>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d10b      	bne.n	800504a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005032:	4b0a      	ldr	r3, [pc, #40]	; (800505c <HAL_CRC_MspInit+0x3c>)
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	4a09      	ldr	r2, [pc, #36]	; (800505c <HAL_CRC_MspInit+0x3c>)
 8005038:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800503c:	6313      	str	r3, [r2, #48]	; 0x30
 800503e:	4b07      	ldr	r3, [pc, #28]	; (800505c <HAL_CRC_MspInit+0x3c>)
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40023000 	.word	0x40023000
 800505c:	40023800 	.word	0x40023800

08005060 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8005064:	4b18      	ldr	r3, [pc, #96]	; (80050c8 <MX_DMA2D_Init+0x68>)
 8005066:	4a19      	ldr	r2, [pc, #100]	; (80050cc <MX_DMA2D_Init+0x6c>)
 8005068:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800506a:	4b17      	ldr	r3, [pc, #92]	; (80050c8 <MX_DMA2D_Init+0x68>)
 800506c:	2200      	movs	r2, #0
 800506e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8005070:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <MX_DMA2D_Init+0x68>)
 8005072:	2200      	movs	r2, #0
 8005074:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8005076:	4b14      	ldr	r3, [pc, #80]	; (80050c8 <MX_DMA2D_Init+0x68>)
 8005078:	2200      	movs	r2, #0
 800507a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800507c:	4b12      	ldr	r3, [pc, #72]	; (80050c8 <MX_DMA2D_Init+0x68>)
 800507e:	2200      	movs	r2, #0
 8005080:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8005082:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <MX_DMA2D_Init+0x68>)
 8005084:	2200      	movs	r2, #0
 8005086:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005088:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <MX_DMA2D_Init+0x68>)
 800508a:	2200      	movs	r2, #0
 800508c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800508e:	4b0e      	ldr	r3, [pc, #56]	; (80050c8 <MX_DMA2D_Init+0x68>)
 8005090:	2200      	movs	r2, #0
 8005092:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8005094:	4b0c      	ldr	r3, [pc, #48]	; (80050c8 <MX_DMA2D_Init+0x68>)
 8005096:	2200      	movs	r2, #0
 8005098:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800509a:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <MX_DMA2D_Init+0x68>)
 800509c:	2200      	movs	r2, #0
 800509e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80050a0:	4809      	ldr	r0, [pc, #36]	; (80050c8 <MX_DMA2D_Init+0x68>)
 80050a2:	f00d f811 	bl	80120c8 <HAL_DMA2D_Init>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 80050ac:	f001 fafa 	bl	80066a4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80050b0:	2101      	movs	r1, #1
 80050b2:	4805      	ldr	r0, [pc, #20]	; (80050c8 <MX_DMA2D_Init+0x68>)
 80050b4:	f00d f862 	bl	801217c <HAL_DMA2D_ConfigLayer>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 80050be:	f001 faf1 	bl	80066a4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20001c38 	.word	0x20001c38
 80050cc:	4002b000 	.word	0x4002b000

080050d0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <HAL_DMA2D_MspInit+0x38>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d10b      	bne.n	80050fa <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80050e2:	4b0a      	ldr	r3, [pc, #40]	; (800510c <HAL_DMA2D_MspInit+0x3c>)
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	4a09      	ldr	r2, [pc, #36]	; (800510c <HAL_DMA2D_MspInit+0x3c>)
 80050e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050ec:	6313      	str	r3, [r2, #48]	; 0x30
 80050ee:	4b07      	ldr	r3, [pc, #28]	; (800510c <HAL_DMA2D_MspInit+0x3c>)
 80050f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	4002b000 	.word	0x4002b000
 800510c:	40023800 	.word	0x40023800

08005110 <MDM_SDRAM_Initialization_sequence>:
  * @}
  */


void MDM_SDRAM_Initialization_sequence(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
  __IO uint32_t tmpmrd = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	613b      	str	r3, [r7, #16]
  FMC_SDRAM_CommandTypeDef Command = {0};
 800511a:	463b      	mov	r3, r7
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	605a      	str	r2, [r3, #4]
 8005122:	609a      	str	r2, [r3, #8]
 8005124:	60da      	str	r2, [r3, #12]

  uint32_t RefreshCount = ((uint32_t)0x0603);   /* SDRAM refresh counter (100Mhz SD clock) */
 8005126:	f240 6303 	movw	r3, #1539	; 0x603
 800512a:	617b      	str	r3, [r7, #20]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800512c:	2301      	movs	r3, #1
 800512e:	603b      	str	r3, [r7, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005130:	2310      	movs	r3, #16
 8005132:	607b      	str	r3, [r7, #4]
  Command.AutoRefreshNumber      = 1;
 8005134:	2301      	movs	r3, #1
 8005136:	60bb      	str	r3, [r7, #8]
  Command.ModeRegisterDefinition = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800513c:	463b      	mov	r3, r7
 800513e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005142:	4619      	mov	r1, r3
 8005144:	481e      	ldr	r0, [pc, #120]	; (80051c0 <MDM_SDRAM_Initialization_sequence+0xb0>)
 8005146:	f00f fa47 	bl	80145d8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800514a:	2001      	movs	r0, #1
 800514c:	f00b fb00 	bl	8010750 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8005150:	2302      	movs	r3, #2
 8005152:	603b      	str	r3, [r7, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005154:	2310      	movs	r3, #16
 8005156:	607b      	str	r3, [r7, #4]
  Command.AutoRefreshNumber      = 1;
 8005158:	2301      	movs	r3, #1
 800515a:	60bb      	str	r3, [r7, #8]
  Command.ModeRegisterDefinition = 0;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8005160:	463b      	mov	r3, r7
 8005162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005166:	4619      	mov	r1, r3
 8005168:	4815      	ldr	r0, [pc, #84]	; (80051c0 <MDM_SDRAM_Initialization_sequence+0xb0>)
 800516a:	f00f fa35 	bl	80145d8 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800516e:	2303      	movs	r3, #3
 8005170:	603b      	str	r3, [r7, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005172:	2310      	movs	r3, #16
 8005174:	607b      	str	r3, [r7, #4]
  Command.AutoRefreshNumber      = 8;
 8005176:	2308      	movs	r3, #8
 8005178:	60bb      	str	r3, [r7, #8]
  Command.ModeRegisterDefinition = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800517e:	463b      	mov	r3, r7
 8005180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005184:	4619      	mov	r1, r3
 8005186:	480e      	ldr	r0, [pc, #56]	; (80051c0 <MDM_SDRAM_Initialization_sequence+0xb0>)
 8005188:	f00f fa26 	bl	80145d8 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800518c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8005190:	613b      	str	r3, [r7, #16]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8005192:	2304      	movs	r3, #4
 8005194:	603b      	str	r3, [r7, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005196:	2310      	movs	r3, #16
 8005198:	607b      	str	r3, [r7, #4]
  Command.AutoRefreshNumber      = 1;
 800519a:	2301      	movs	r3, #1
 800519c:	60bb      	str	r3, [r7, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80051a2:	463b      	mov	r3, r7
 80051a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051a8:	4619      	mov	r1, r3
 80051aa:	4805      	ldr	r0, [pc, #20]	; (80051c0 <MDM_SDRAM_Initialization_sequence+0xb0>)
 80051ac:	f00f fa14 	bl	80145d8 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 80051b0:	6979      	ldr	r1, [r7, #20]
 80051b2:	4803      	ldr	r0, [pc, #12]	; (80051c0 <MDM_SDRAM_Initialization_sequence+0xb0>)
 80051b4:	f00f fa3b 	bl	801462e <HAL_SDRAM_ProgramRefreshRate>
}
 80051b8:	bf00      	nop
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	20001c90 	.word	0x20001c90

080051c4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80051ca:	1d3b      	adds	r3, r7, #4
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	605a      	str	r2, [r3, #4]
 80051d2:	609a      	str	r2, [r3, #8]
 80051d4:	60da      	str	r2, [r3, #12]
 80051d6:	611a      	str	r2, [r3, #16]
 80051d8:	615a      	str	r2, [r3, #20]
 80051da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80051dc:	4b20      	ldr	r3, [pc, #128]	; (8005260 <MX_FMC_Init+0x9c>)
 80051de:	4a21      	ldr	r2, [pc, #132]	; (8005264 <MX_FMC_Init+0xa0>)
 80051e0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80051e2:	4b1f      	ldr	r3, [pc, #124]	; (8005260 <MX_FMC_Init+0x9c>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80051e8:	4b1d      	ldr	r3, [pc, #116]	; (8005260 <MX_FMC_Init+0x9c>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80051ee:	4b1c      	ldr	r3, [pc, #112]	; (8005260 <MX_FMC_Init+0x9c>)
 80051f0:	2204      	movs	r2, #4
 80051f2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80051f4:	4b1a      	ldr	r3, [pc, #104]	; (8005260 <MX_FMC_Init+0x9c>)
 80051f6:	2220      	movs	r2, #32
 80051f8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80051fa:	4b19      	ldr	r3, [pc, #100]	; (8005260 <MX_FMC_Init+0x9c>)
 80051fc:	2240      	movs	r2, #64	; 0x40
 80051fe:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8005200:	4b17      	ldr	r3, [pc, #92]	; (8005260 <MX_FMC_Init+0x9c>)
 8005202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005206:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005208:	4b15      	ldr	r3, [pc, #84]	; (8005260 <MX_FMC_Init+0x9c>)
 800520a:	2200      	movs	r2, #0
 800520c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800520e:	4b14      	ldr	r3, [pc, #80]	; (8005260 <MX_FMC_Init+0x9c>)
 8005210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005214:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8005216:	4b12      	ldr	r3, [pc, #72]	; (8005260 <MX_FMC_Init+0x9c>)
 8005218:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800521c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800521e:	4b10      	ldr	r3, [pc, #64]	; (8005260 <MX_FMC_Init+0x9c>)
 8005220:	2200      	movs	r2, #0
 8005222:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8005224:	2302      	movs	r3, #2
 8005226:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8005228:	2307      	movs	r3, #7
 800522a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800522c:	2304      	movs	r3, #4
 800522e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8005230:	2307      	movs	r3, #7
 8005232:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8005234:	2303      	movs	r3, #3
 8005236:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8005238:	2302      	movs	r3, #2
 800523a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800523c:	2302      	movs	r3, #2
 800523e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8005240:	1d3b      	adds	r3, r7, #4
 8005242:	4619      	mov	r1, r3
 8005244:	4806      	ldr	r0, [pc, #24]	; (8005260 <MX_FMC_Init+0x9c>)
 8005246:	f00f f993 	bl	8014570 <HAL_SDRAM_Init>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8005250:	f001 fa28 	bl	80066a4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* SDRAM initialization sequence */
  MDM_SDRAM_Initialization_sequence();
 8005254:	f7ff ff5c 	bl	8005110 <MDM_SDRAM_Initialization_sequence>

  /* USER CODE END FMC_Init 2 */
}
 8005258:	bf00      	nop
 800525a:	3720      	adds	r7, #32
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	20001c90 	.word	0x20001c90
 8005264:	a0000140 	.word	0xa0000140

08005268 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800526e:	1d3b      	adds	r3, r7, #4
 8005270:	2200      	movs	r2, #0
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	605a      	str	r2, [r3, #4]
 8005276:	609a      	str	r2, [r3, #8]
 8005278:	60da      	str	r2, [r3, #12]
 800527a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800527c:	4b3b      	ldr	r3, [pc, #236]	; (800536c <HAL_FMC_MspInit+0x104>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d16f      	bne.n	8005364 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8005284:	4b39      	ldr	r3, [pc, #228]	; (800536c <HAL_FMC_MspInit+0x104>)
 8005286:	2201      	movs	r2, #1
 8005288:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800528a:	4b39      	ldr	r3, [pc, #228]	; (8005370 <HAL_FMC_MspInit+0x108>)
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	4a38      	ldr	r2, [pc, #224]	; (8005370 <HAL_FMC_MspInit+0x108>)
 8005290:	f043 0301 	orr.w	r3, r3, #1
 8005294:	6393      	str	r3, [r2, #56]	; 0x38
 8005296:	4b36      	ldr	r3, [pc, #216]	; (8005370 <HAL_FMC_MspInit+0x108>)
 8005298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	683b      	ldr	r3, [r7, #0]
  PI5   ------> FMC_NBL3
  PI6   ------> FMC_D28
  PI7   ------> FMC_D29
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 80052a2:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80052a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052a8:	2302      	movs	r3, #2
 80052aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052b0:	2303      	movs	r3, #3
 80052b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80052b4:	230c      	movs	r3, #12
 80052b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80052b8:	1d3b      	adds	r3, r7, #4
 80052ba:	4619      	mov	r1, r3
 80052bc:	482d      	ldr	r0, [pc, #180]	; (8005374 <HAL_FMC_MspInit+0x10c>)
 80052be:	f00c fffb 	bl	80122b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80052c2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80052c6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c8:	2302      	movs	r3, #2
 80052ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d0:	2303      	movs	r3, #3
 80052d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80052d4:	230c      	movs	r3, #12
 80052d6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80052d8:	1d3b      	adds	r3, r7, #4
 80052da:	4619      	mov	r1, r3
 80052dc:	4826      	ldr	r0, [pc, #152]	; (8005378 <HAL_FMC_MspInit+0x110>)
 80052de:	f00c ffeb 	bl	80122b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8
 80052e2:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80052e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e8:	2302      	movs	r3, #2
 80052ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052f0:	2303      	movs	r3, #3
 80052f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80052f4:	230c      	movs	r3, #12
 80052f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80052f8:	1d3b      	adds	r3, r7, #4
 80052fa:	4619      	mov	r1, r3
 80052fc:	481f      	ldr	r0, [pc, #124]	; (800537c <HAL_FMC_MspInit+0x114>)
 80052fe:	f00c ffdb 	bl	80122b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8005302:	f248 1337 	movw	r3, #33079	; 0x8137
 8005306:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005308:	2302      	movs	r3, #2
 800530a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530c:	2300      	movs	r3, #0
 800530e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005310:	2303      	movs	r3, #3
 8005312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005314:	230c      	movs	r3, #12
 8005316:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005318:	1d3b      	adds	r3, r7, #4
 800531a:	4619      	mov	r1, r3
 800531c:	4818      	ldr	r0, [pc, #96]	; (8005380 <HAL_FMC_MspInit+0x118>)
 800531e:	f00c ffcb 	bl	80122b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005322:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005326:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005328:	2302      	movs	r3, #2
 800532a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005330:	2303      	movs	r3, #3
 8005332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005334:	230c      	movs	r3, #12
 8005336:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005338:	1d3b      	adds	r3, r7, #4
 800533a:	4619      	mov	r1, r3
 800533c:	4811      	ldr	r0, [pc, #68]	; (8005384 <HAL_FMC_MspInit+0x11c>)
 800533e:	f00c ffbb 	bl	80122b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8005342:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005346:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005348:	2302      	movs	r3, #2
 800534a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005350:	2303      	movs	r3, #3
 8005352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005354:	230c      	movs	r3, #12
 8005356:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005358:	1d3b      	adds	r3, r7, #4
 800535a:	4619      	mov	r1, r3
 800535c:	480a      	ldr	r0, [pc, #40]	; (8005388 <HAL_FMC_MspInit+0x120>)
 800535e:	f00c ffab 	bl	80122b8 <HAL_GPIO_Init>
 8005362:	e000      	b.n	8005366 <HAL_FMC_MspInit+0xfe>
    return;
 8005364:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20001cc4 	.word	0x20001cc4
 8005370:	40023800 	.word	0x40023800
 8005374:	40022000 	.word	0x40022000
 8005378:	40021400 	.word	0x40021400
 800537c:	40021c00 	.word	0x40021c00
 8005380:	40021800 	.word	0x40021800
 8005384:	40021000 	.word	0x40021000
 8005388:	40020c00 	.word	0x40020c00

0800538c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005394:	f7ff ff68 	bl	8005268 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b090      	sub	sp, #64	; 0x40
 80053a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	605a      	str	r2, [r3, #4]
 80053b0:	609a      	str	r2, [r3, #8]
 80053b2:	60da      	str	r2, [r3, #12]
 80053b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80053b6:	4bb0      	ldr	r3, [pc, #704]	; (8005678 <MX_GPIO_Init+0x2d8>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	4aaf      	ldr	r2, [pc, #700]	; (8005678 <MX_GPIO_Init+0x2d8>)
 80053bc:	f043 0310 	orr.w	r3, r3, #16
 80053c0:	6313      	str	r3, [r2, #48]	; 0x30
 80053c2:	4bad      	ldr	r3, [pc, #692]	; (8005678 <MX_GPIO_Init+0x2d8>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	f003 0310 	and.w	r3, r3, #16
 80053ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80053cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80053ce:	4baa      	ldr	r3, [pc, #680]	; (8005678 <MX_GPIO_Init+0x2d8>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	4aa9      	ldr	r2, [pc, #676]	; (8005678 <MX_GPIO_Init+0x2d8>)
 80053d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d8:	6313      	str	r3, [r2, #48]	; 0x30
 80053da:	4ba7      	ldr	r3, [pc, #668]	; (8005678 <MX_GPIO_Init+0x2d8>)
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80053e6:	4ba4      	ldr	r3, [pc, #656]	; (8005678 <MX_GPIO_Init+0x2d8>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	4aa3      	ldr	r2, [pc, #652]	; (8005678 <MX_GPIO_Init+0x2d8>)
 80053ec:	f043 0320 	orr.w	r3, r3, #32
 80053f0:	6313      	str	r3, [r2, #48]	; 0x30
 80053f2:	4ba1      	ldr	r3, [pc, #644]	; (8005678 <MX_GPIO_Init+0x2d8>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	623b      	str	r3, [r7, #32]
 80053fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80053fe:	4b9e      	ldr	r3, [pc, #632]	; (8005678 <MX_GPIO_Init+0x2d8>)
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	4a9d      	ldr	r2, [pc, #628]	; (8005678 <MX_GPIO_Init+0x2d8>)
 8005404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005408:	6313      	str	r3, [r2, #48]	; 0x30
 800540a:	4b9b      	ldr	r3, [pc, #620]	; (8005678 <MX_GPIO_Init+0x2d8>)
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005412:	61fb      	str	r3, [r7, #28]
 8005414:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005416:	4b98      	ldr	r3, [pc, #608]	; (8005678 <MX_GPIO_Init+0x2d8>)
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	4a97      	ldr	r2, [pc, #604]	; (8005678 <MX_GPIO_Init+0x2d8>)
 800541c:	f043 0304 	orr.w	r3, r3, #4
 8005420:	6313      	str	r3, [r2, #48]	; 0x30
 8005422:	4b95      	ldr	r3, [pc, #596]	; (8005678 <MX_GPIO_Init+0x2d8>)
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	61bb      	str	r3, [r7, #24]
 800542c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800542e:	4b92      	ldr	r3, [pc, #584]	; (8005678 <MX_GPIO_Init+0x2d8>)
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	4a91      	ldr	r2, [pc, #580]	; (8005678 <MX_GPIO_Init+0x2d8>)
 8005434:	f043 0301 	orr.w	r3, r3, #1
 8005438:	6313      	str	r3, [r2, #48]	; 0x30
 800543a:	4b8f      	ldr	r3, [pc, #572]	; (8005678 <MX_GPIO_Init+0x2d8>)
 800543c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005446:	4b8c      	ldr	r3, [pc, #560]	; (8005678 <MX_GPIO_Init+0x2d8>)
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	4a8b      	ldr	r2, [pc, #556]	; (8005678 <MX_GPIO_Init+0x2d8>)
 800544c:	f043 0302 	orr.w	r3, r3, #2
 8005450:	6313      	str	r3, [r2, #48]	; 0x30
 8005452:	4b89      	ldr	r3, [pc, #548]	; (8005678 <MX_GPIO_Init+0x2d8>)
 8005454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800545e:	4b86      	ldr	r3, [pc, #536]	; (8005678 <MX_GPIO_Init+0x2d8>)
 8005460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005462:	4a85      	ldr	r2, [pc, #532]	; (8005678 <MX_GPIO_Init+0x2d8>)
 8005464:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005468:	6313      	str	r3, [r2, #48]	; 0x30
 800546a:	4b83      	ldr	r3, [pc, #524]	; (8005678 <MX_GPIO_Init+0x2d8>)
 800546c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005476:	4b80      	ldr	r3, [pc, #512]	; (8005678 <MX_GPIO_Init+0x2d8>)
 8005478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547a:	4a7f      	ldr	r2, [pc, #508]	; (8005678 <MX_GPIO_Init+0x2d8>)
 800547c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005480:	6313      	str	r3, [r2, #48]	; 0x30
 8005482:	4b7d      	ldr	r3, [pc, #500]	; (8005678 <MX_GPIO_Init+0x2d8>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548a:	60bb      	str	r3, [r7, #8]
 800548c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800548e:	4b7a      	ldr	r3, [pc, #488]	; (8005678 <MX_GPIO_Init+0x2d8>)
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	4a79      	ldr	r2, [pc, #484]	; (8005678 <MX_GPIO_Init+0x2d8>)
 8005494:	f043 0308 	orr.w	r3, r3, #8
 8005498:	6313      	str	r3, [r2, #48]	; 0x30
 800549a:	4b77      	ldr	r3, [pc, #476]	; (8005678 <MX_GPIO_Init+0x2d8>)
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	607b      	str	r3, [r7, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80054a6:	4b74      	ldr	r3, [pc, #464]	; (8005678 <MX_GPIO_Init+0x2d8>)
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	4a73      	ldr	r2, [pc, #460]	; (8005678 <MX_GPIO_Init+0x2d8>)
 80054ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054b0:	6313      	str	r3, [r2, #48]	; 0x30
 80054b2:	4b71      	ldr	r3, [pc, #452]	; (8005678 <MX_GPIO_Init+0x2d8>)
 80054b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPARE10_GPIO_Port, SPARE10_Pin, GPIO_PIN_RESET);
 80054be:	2200      	movs	r2, #0
 80054c0:	2108      	movs	r1, #8
 80054c2:	486e      	ldr	r0, [pc, #440]	; (800567c <MX_GPIO_Init+0x2dc>)
 80054c4:	f00d f9c8 	bl	8012858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80054c8:	2200      	movs	r2, #0
 80054ca:	2180      	movs	r1, #128	; 0x80
 80054cc:	486c      	ldr	r0, [pc, #432]	; (8005680 <MX_GPIO_Init+0x2e0>)
 80054ce:	f00d f9c3 	bl	8012858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, U_LED_Pin|SPARE2_Pin, GPIO_PIN_RESET);
 80054d2:	2200      	movs	r2, #0
 80054d4:	f44f 7120 	mov.w	r1, #640	; 0x280
 80054d8:	486a      	ldr	r0, [pc, #424]	; (8005684 <MX_GPIO_Init+0x2e4>)
 80054da:	f00d f9bd 	bl	8012858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, SPARE25_Pin|SPARE24_Pin|SPARE23_Pin|SPARE21_Pin, GPIO_PIN_RESET);
 80054de:	2200      	movs	r2, #0
 80054e0:	f244 0116 	movw	r1, #16406	; 0x4016
 80054e4:	4868      	ldr	r0, [pc, #416]	; (8005688 <MX_GPIO_Init+0x2e8>)
 80054e6:	f00d f9b7 	bl	8012858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPARE3_GPIO_Port, SPARE3_Pin, GPIO_PIN_RESET);
 80054ea:	2200      	movs	r2, #0
 80054ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054f0:	4866      	ldr	r0, [pc, #408]	; (800568c <MX_GPIO_Init+0x2ec>)
 80054f2:	f00d f9b1 	bl	8012858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, SPARE19_Pin|SPARE18_Pin, GPIO_PIN_RESET);
 80054f6:	2200      	movs	r2, #0
 80054f8:	21c0      	movs	r1, #192	; 0xc0
 80054fa:	4865      	ldr	r0, [pc, #404]	; (8005690 <MX_GPIO_Init+0x2f0>)
 80054fc:	f00d f9ac 	bl	8012858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, _5V_OUT2_Pin|_5V_OUT1_Pin|MAP_OUT_Pin|_5V_OUT4_Pin
 8005500:	2200      	movs	r2, #0
 8005502:	f643 01b0 	movw	r1, #14512	; 0x38b0
 8005506:	4863      	ldr	r0, [pc, #396]	; (8005694 <MX_GPIO_Init+0x2f4>)
 8005508:	f00d f9a6 	bl	8012858 <HAL_GPIO_WritePin>
                          |_5V_OUT3_Pin|SPARE9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SPARE16_Pin|SPARE15_Pin|SPARE14_Pin|SPARE13_Pin
 800550c:	2200      	movs	r2, #0
 800550e:	f646 2188 	movw	r1, #27272	; 0x6a88
 8005512:	4861      	ldr	r0, [pc, #388]	; (8005698 <MX_GPIO_Init+0x2f8>)
 8005514:	f00d f9a0 	bl	8012858 <HAL_GPIO_WritePin>
                          |SPARE12_Pin|SPARE11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPARE4_GPIO_Port, SPARE4_Pin, GPIO_PIN_RESET);
 8005518:	2200      	movs	r2, #0
 800551a:	2140      	movs	r1, #64	; 0x40
 800551c:	485f      	ldr	r0, [pc, #380]	; (800569c <MX_GPIO_Init+0x2fc>)
 800551e:	f00d f99b 	bl	8012858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, LCD_DISP_Pin|SPARE27_Pin|SPARE26_Pin, GPIO_PIN_RESET);
 8005522:	2200      	movs	r2, #0
 8005524:	2198      	movs	r1, #152	; 0x98
 8005526:	485e      	ldr	r0, [pc, #376]	; (80056a0 <MX_GPIO_Init+0x300>)
 8005528:	f00d f996 	bl	8012858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPARE10_Pin;
 800552c:	2308      	movs	r3, #8
 800552e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005530:	2301      	movs	r3, #1
 8005532:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005534:	2300      	movs	r3, #0
 8005536:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005538:	2300      	movs	r3, #0
 800553a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SPARE10_GPIO_Port, &GPIO_InitStruct);
 800553c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005540:	4619      	mov	r1, r3
 8005542:	484e      	ldr	r0, [pc, #312]	; (800567c <MX_GPIO_Init+0x2dc>)
 8005544:	f00c feb8 	bl	80122b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8005548:	2380      	movs	r3, #128	; 0x80
 800554a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800554c:	2301      	movs	r3, #1
 800554e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005550:	2300      	movs	r3, #0
 8005552:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005554:	2300      	movs	r3, #0
 8005556:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8005558:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800555c:	4619      	mov	r1, r3
 800555e:	4848      	ldr	r0, [pc, #288]	; (8005680 <MX_GPIO_Init+0x2e0>)
 8005560:	f00c feaa 	bl	80122b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = U_LED_Pin|SPARE2_Pin;
 8005564:	f44f 7320 	mov.w	r3, #640	; 0x280
 8005568:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800556a:	2301      	movs	r3, #1
 800556c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556e:	2300      	movs	r3, #0
 8005570:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005572:	2300      	movs	r3, #0
 8005574:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800557a:	4619      	mov	r1, r3
 800557c:	4841      	ldr	r0, [pc, #260]	; (8005684 <MX_GPIO_Init+0x2e4>)
 800557e:	f00c fe9b 	bl	80122b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = SPARE25_Pin|SPARE24_Pin|SPARE23_Pin|SPARE21_Pin;
 8005582:	f244 0316 	movw	r3, #16406	; 0x4016
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005588:	2301      	movs	r3, #1
 800558a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800558c:	2300      	movs	r3, #0
 800558e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005590:	2300      	movs	r3, #0
 8005592:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8005594:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005598:	4619      	mov	r1, r3
 800559a:	483b      	ldr	r0, [pc, #236]	; (8005688 <MX_GPIO_Init+0x2e8>)
 800559c:	f00c fe8c 	bl	80122b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPARE3_Pin;
 80055a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055a6:	2301      	movs	r3, #1
 80055a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ae:	2300      	movs	r3, #0
 80055b0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SPARE3_GPIO_Port, &GPIO_InitStruct);
 80055b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055b6:	4619      	mov	r1, r3
 80055b8:	4834      	ldr	r0, [pc, #208]	; (800568c <MX_GPIO_Init+0x2ec>)
 80055ba:	f00c fe7d 	bl	80122b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = SPARE19_Pin|SPARE18_Pin;
 80055be:	23c0      	movs	r3, #192	; 0xc0
 80055c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055c2:	2301      	movs	r3, #1
 80055c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ca:	2300      	movs	r3, #0
 80055cc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80055ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055d2:	4619      	mov	r1, r3
 80055d4:	482e      	ldr	r0, [pc, #184]	; (8005690 <MX_GPIO_Init+0x2f0>)
 80055d6:	f00c fe6f 	bl	80122b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = _5V_OUT2_Pin|_5V_OUT1_Pin|MAP_OUT_Pin|_5V_OUT4_Pin
 80055da:	f643 03b0 	movw	r3, #14512	; 0x38b0
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |_5V_OUT3_Pin|SPARE9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055e0:	2301      	movs	r3, #1
 80055e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055e8:	2300      	movs	r3, #0
 80055ea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055f0:	4619      	mov	r1, r3
 80055f2:	4828      	ldr	r0, [pc, #160]	; (8005694 <MX_GPIO_Init+0x2f4>)
 80055f4:	f00c fe60 	bl	80122b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = SPARE16_Pin|SPARE15_Pin|SPARE14_Pin|SPARE13_Pin
 80055f8:	f646 2388 	movw	r3, #27272	; 0x6a88
 80055fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SPARE12_Pin|SPARE11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055fe:	2301      	movs	r3, #1
 8005600:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005602:	2300      	movs	r3, #0
 8005604:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005606:	2300      	movs	r3, #0
 8005608:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800560a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800560e:	4619      	mov	r1, r3
 8005610:	4821      	ldr	r0, [pc, #132]	; (8005698 <MX_GPIO_Init+0x2f8>)
 8005612:	f00c fe51 	bl	80122b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPARE4_Pin;
 8005616:	2340      	movs	r3, #64	; 0x40
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800561a:	2301      	movs	r3, #1
 800561c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561e:	2300      	movs	r3, #0
 8005620:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005622:	2300      	movs	r3, #0
 8005624:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SPARE4_GPIO_Port, &GPIO_InitStruct);
 8005626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800562a:	4619      	mov	r1, r3
 800562c:	481b      	ldr	r0, [pc, #108]	; (800569c <MX_GPIO_Init+0x2fc>)
 800562e:	f00c fe43 	bl	80122b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_DETECT_Pin;
 8005632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005636:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005638:	2300      	movs	r3, #0
 800563a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800563c:	2301      	movs	r3, #1
 800563e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8005640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005644:	4619      	mov	r1, r3
 8005646:	4814      	ldr	r0, [pc, #80]	; (8005698 <MX_GPIO_Init+0x2f8>)
 8005648:	f00c fe36 	bl	80122b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin|SPARE27_Pin|SPARE26_Pin;
 800564c:	2398      	movs	r3, #152	; 0x98
 800564e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005650:	2301      	movs	r3, #1
 8005652:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005654:	2300      	movs	r3, #0
 8005656:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005658:	2300      	movs	r3, #0
 800565a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800565c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005660:	4619      	mov	r1, r3
 8005662:	480f      	ldr	r0, [pc, #60]	; (80056a0 <MX_GPIO_Init+0x300>)
 8005664:	f00c fe28 	bl	80122b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = DIG4_F_Pin|DIG3_F_Pin|DIG2_F_Pin|DIG1_F_Pin
 8005668:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 800566c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |Map_BTN_F_Pin|Disp_BTN_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800566e:	2300      	movs	r3, #0
 8005670:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005672:	2300      	movs	r3, #0
 8005674:	637b      	str	r3, [r7, #52]	; 0x34
 8005676:	e015      	b.n	80056a4 <MX_GPIO_Init+0x304>
 8005678:	40023800 	.word	0x40023800
 800567c:	40021000 	.word	0x40021000
 8005680:	40021400 	.word	0x40021400
 8005684:	40020000 	.word	0x40020000
 8005688:	40022400 	.word	0x40022400
 800568c:	40020400 	.word	0x40020400
 8005690:	40021c00 	.word	0x40021c00
 8005694:	40020c00 	.word	0x40020c00
 8005698:	40021800 	.word	0x40021800
 800569c:	40020800 	.word	0x40020800
 80056a0:	40022800 	.word	0x40022800
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056a8:	4619      	mov	r1, r3
 80056aa:	4803      	ldr	r0, [pc, #12]	; (80056b8 <MX_GPIO_Init+0x318>)
 80056ac:	f00c fe04 	bl	80122b8 <HAL_GPIO_Init>

}
 80056b0:	bf00      	nop
 80056b2:	3740      	adds	r7, #64	; 0x40
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40020400 	.word	0x40020400

080056bc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80056c0:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <MX_IWDG_Init+0x34>)
 80056c2:	4a0c      	ldr	r2, [pc, #48]	; (80056f4 <MX_IWDG_Init+0x38>)
 80056c4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80056c6:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <MX_IWDG_Init+0x34>)
 80056c8:	2203      	movs	r2, #3
 80056ca:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 1000;
 80056cc:	4b08      	ldr	r3, [pc, #32]	; (80056f0 <MX_IWDG_Init+0x34>)
 80056ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056d2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 1000;
 80056d4:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <MX_IWDG_Init+0x34>)
 80056d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056da:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80056dc:	4804      	ldr	r0, [pc, #16]	; (80056f0 <MX_IWDG_Init+0x34>)
 80056de:	f00d f8ee 	bl	80128be <HAL_IWDG_Init>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80056e8:	f000 ffdc 	bl	80066a4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80056ec:	bf00      	nop
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20001cc8 	.word	0x20001cc8
 80056f4:	40003000 	.word	0x40003000

080056f8 <MDM_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE
  * @retval None
  */
void MDM_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	460b      	mov	r3, r1
 8005702:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d112      	bne.n	8005730 <MDM_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex);
 800570a:	4b19      	ldr	r3, [pc, #100]	; (8005770 <MDM_LCD_SetLayerVisible+0x78>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	01db      	lsls	r3, r3, #7
 8005714:	4413      	add	r3, r2
 8005716:	3384      	adds	r3, #132	; 0x84
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a15      	ldr	r2, [pc, #84]	; (8005770 <MDM_LCD_SetLayerVisible+0x78>)
 800571c:	6812      	ldr	r2, [r2, #0]
 800571e:	4611      	mov	r1, r2
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	01d2      	lsls	r2, r2, #7
 8005724:	440a      	add	r2, r1
 8005726:	3284      	adds	r2, #132	; 0x84
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	e011      	b.n	8005754 <MDM_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex);
 8005730:	4b0f      	ldr	r3, [pc, #60]	; (8005770 <MDM_LCD_SetLayerVisible+0x78>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	01db      	lsls	r3, r3, #7
 800573a:	4413      	add	r3, r2
 800573c:	3384      	adds	r3, #132	; 0x84
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a0b      	ldr	r2, [pc, #44]	; (8005770 <MDM_LCD_SetLayerVisible+0x78>)
 8005742:	6812      	ldr	r2, [r2, #0]
 8005744:	4611      	mov	r1, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	01d2      	lsls	r2, r2, #7
 800574a:	440a      	add	r2, r1
 800574c:	3284      	adds	r2, #132	; 0x84
 800574e:	f023 0301 	bic.w	r3, r3, #1
 8005752:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 8005754:	4b06      	ldr	r3, [pc, #24]	; (8005770 <MDM_LCD_SetLayerVisible+0x78>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800575a:	4b05      	ldr	r3, [pc, #20]	; (8005770 <MDM_LCD_SetLayerVisible+0x78>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	20001cd8 	.word	0x20001cd8

08005774 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08e      	sub	sp, #56	; 0x38
 8005778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800577a:	1d3b      	adds	r3, r7, #4
 800577c:	2234      	movs	r2, #52	; 0x34
 800577e:	2100      	movs	r1, #0
 8005780:	4618      	mov	r0, r3
 8005782:	f01c fa67 	bl	8021c54 <memset>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  }


  hltdc.Instance = LTDC;
 8005786:	4b3a      	ldr	r3, [pc, #232]	; (8005870 <MX_LTDC_Init+0xfc>)
 8005788:	4a3a      	ldr	r2, [pc, #232]	; (8005874 <MX_LTDC_Init+0x100>)
 800578a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800578c:	4b38      	ldr	r3, [pc, #224]	; (8005870 <MX_LTDC_Init+0xfc>)
 800578e:	2200      	movs	r2, #0
 8005790:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005792:	4b37      	ldr	r3, [pc, #220]	; (8005870 <MX_LTDC_Init+0xfc>)
 8005794:	2200      	movs	r2, #0
 8005796:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8005798:	4b35      	ldr	r3, [pc, #212]	; (8005870 <MX_LTDC_Init+0xfc>)
 800579a:	2200      	movs	r2, #0
 800579c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800579e:	4b34      	ldr	r3, [pc, #208]	; (8005870 <MX_LTDC_Init+0xfc>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 63;
 80057a4:	4b32      	ldr	r3, [pc, #200]	; (8005870 <MX_LTDC_Init+0xfc>)
 80057a6:	223f      	movs	r2, #63	; 0x3f
 80057a8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 19;
 80057aa:	4b31      	ldr	r3, [pc, #196]	; (8005870 <MX_LTDC_Init+0xfc>)
 80057ac:	2213      	movs	r2, #19
 80057ae:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 83;
 80057b0:	4b2f      	ldr	r3, [pc, #188]	; (8005870 <MX_LTDC_Init+0xfc>)
 80057b2:	2253      	movs	r2, #83	; 0x53
 80057b4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 29;
 80057b6:	4b2e      	ldr	r3, [pc, #184]	; (8005870 <MX_LTDC_Init+0xfc>)
 80057b8:	221d      	movs	r2, #29
 80057ba:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 563;
 80057bc:	4b2c      	ldr	r3, [pc, #176]	; (8005870 <MX_LTDC_Init+0xfc>)
 80057be:	f240 2233 	movw	r2, #563	; 0x233
 80057c2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 301;
 80057c4:	4b2a      	ldr	r3, [pc, #168]	; (8005870 <MX_LTDC_Init+0xfc>)
 80057c6:	f240 122d 	movw	r2, #301	; 0x12d
 80057ca:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 607;
 80057cc:	4b28      	ldr	r3, [pc, #160]	; (8005870 <MX_LTDC_Init+0xfc>)
 80057ce:	f240 225f 	movw	r2, #607	; 0x25f
 80057d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 311;
 80057d4:	4b26      	ldr	r3, [pc, #152]	; (8005870 <MX_LTDC_Init+0xfc>)
 80057d6:	f240 1237 	movw	r2, #311	; 0x137
 80057da:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80057dc:	4b24      	ldr	r3, [pc, #144]	; (8005870 <MX_LTDC_Init+0xfc>)
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80057e4:	4b22      	ldr	r3, [pc, #136]	; (8005870 <MX_LTDC_Init+0xfc>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80057ec:	4b20      	ldr	r3, [pc, #128]	; (8005870 <MX_LTDC_Init+0xfc>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80057f4:	481e      	ldr	r0, [pc, #120]	; (8005870 <MX_LTDC_Init+0xfc>)
 80057f6:	f00d f8b1 	bl	801295c <HAL_LTDC_Init>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <MX_LTDC_Init+0x90>
  {
	  Error_Handler();
 8005800:	f000 ff50 	bl	80066a4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8005808:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800580c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8005812:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005816:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800581c:	23ff      	movs	r3, #255	; 0xff
 800581e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005824:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005828:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800582a:	2307      	movs	r3, #7
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t) LCD_LAYER0_BUFFER;
 800582e:	4b12      	ldr	r3, [pc, #72]	; (8005878 <MX_LTDC_Init+0x104>)
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8005832:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8005838:	f44f 7388 	mov.w	r3, #272	; 0x110
 800583c:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800583e:	2300      	movs	r3, #0
 8005840:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8005844:	2300      	movs	r3, #0
 8005846:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8005850:	1d3b      	adds	r3, r7, #4
 8005852:	2200      	movs	r2, #0
 8005854:	4619      	mov	r1, r3
 8005856:	4806      	ldr	r0, [pc, #24]	; (8005870 <MX_LTDC_Init+0xfc>)
 8005858:	f00d f968 	bl	8012b2c <HAL_LTDC_ConfigLayer>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <MX_LTDC_Init+0xf2>
  {
	  Error_Handler();
 8005862:	f000 ff1f 	bl	80066a4 <Error_Handler>
  }

  /* USER CODE END LTDC_Init 2 */

}
 8005866:	bf00      	nop
 8005868:	3738      	adds	r7, #56	; 0x38
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20001cd8 	.word	0x20001cd8
 8005874:	40016800 	.word	0x40016800
 8005878:	c0000000 	.word	0xc0000000

0800587c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b094      	sub	sp, #80	; 0x50
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005884:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	605a      	str	r2, [r3, #4]
 800588e:	609a      	str	r2, [r3, #8]
 8005890:	60da      	str	r2, [r3, #12]
 8005892:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4aa9      	ldr	r2, [pc, #676]	; (8005b40 <HAL_LTDC_MspInit+0x2c4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	f040 8190 	bne.w	8005bc0 <HAL_LTDC_MspInit+0x344>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80058a0:	4ba8      	ldr	r3, [pc, #672]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 80058a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a4:	4aa7      	ldr	r2, [pc, #668]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 80058a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058aa:	6453      	str	r3, [r2, #68]	; 0x44
 80058ac:	4ba5      	ldr	r3, [pc, #660]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 80058ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80058b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80058b8:	4ba2      	ldr	r3, [pc, #648]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 80058ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058bc:	4aa1      	ldr	r2, [pc, #644]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 80058be:	f043 0310 	orr.w	r3, r3, #16
 80058c2:	6313      	str	r3, [r2, #48]	; 0x30
 80058c4:	4b9f      	ldr	r3, [pc, #636]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 80058c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	637b      	str	r3, [r7, #52]	; 0x34
 80058ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80058d0:	4b9c      	ldr	r3, [pc, #624]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 80058d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d4:	4a9b      	ldr	r2, [pc, #620]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 80058d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058da:	6313      	str	r3, [r2, #48]	; 0x30
 80058dc:	4b99      	ldr	r3, [pc, #612]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 80058de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e4:	633b      	str	r3, [r7, #48]	; 0x30
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80058e8:	4b96      	ldr	r3, [pc, #600]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 80058ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ec:	4a95      	ldr	r2, [pc, #596]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 80058ee:	f043 0320 	orr.w	r3, r3, #32
 80058f2:	6313      	str	r3, [r2, #48]	; 0x30
 80058f4:	4b93      	ldr	r3, [pc, #588]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 80058f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005900:	4b90      	ldr	r3, [pc, #576]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 8005902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005904:	4a8f      	ldr	r2, [pc, #572]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 8005906:	f043 0304 	orr.w	r3, r3, #4
 800590a:	6313      	str	r3, [r2, #48]	; 0x30
 800590c:	4b8d      	ldr	r3, [pc, #564]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	62bb      	str	r3, [r7, #40]	; 0x28
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005918:	4b8a      	ldr	r3, [pc, #552]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 800591a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591c:	4a89      	ldr	r2, [pc, #548]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 800591e:	f043 0301 	orr.w	r3, r3, #1
 8005922:	6313      	str	r3, [r2, #48]	; 0x30
 8005924:	4b87      	ldr	r3, [pc, #540]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 8005926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8005930:	4b84      	ldr	r3, [pc, #528]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 8005932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005934:	4a83      	ldr	r2, [pc, #524]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 8005936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593a:	6313      	str	r3, [r2, #48]	; 0x30
 800593c:	4b81      	ldr	r3, [pc, #516]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005944:	623b      	str	r3, [r7, #32]
 8005946:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005948:	4b7e      	ldr	r3, [pc, #504]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 800594a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594c:	4a7d      	ldr	r2, [pc, #500]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 800594e:	f043 0302 	orr.w	r3, r3, #2
 8005952:	6313      	str	r3, [r2, #48]	; 0x30
 8005954:	4b7b      	ldr	r3, [pc, #492]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 8005956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005960:	4b78      	ldr	r3, [pc, #480]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 8005962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005964:	4a77      	ldr	r2, [pc, #476]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 8005966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800596a:	6313      	str	r3, [r2, #48]	; 0x30
 800596c:	4b75      	ldr	r3, [pc, #468]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 800596e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005974:	61bb      	str	r3, [r7, #24]
 8005976:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005978:	4b72      	ldr	r3, [pc, #456]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597c:	4a71      	ldr	r2, [pc, #452]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 800597e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005982:	6313      	str	r3, [r2, #48]	; 0x30
 8005984:	4b6f      	ldr	r3, [pc, #444]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005990:	4b6c      	ldr	r3, [pc, #432]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 8005992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005994:	4a6b      	ldr	r2, [pc, #428]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 8005996:	f043 0308 	orr.w	r3, r3, #8
 800599a:	6313      	str	r3, [r2, #48]	; 0x30
 800599c:	4b69      	ldr	r3, [pc, #420]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 800599e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a0:	f003 0308 	and.w	r3, r3, #8
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80059a8:	4b66      	ldr	r3, [pc, #408]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	4a65      	ldr	r2, [pc, #404]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 80059ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059b2:	6313      	str	r3, [r2, #48]	; 0x30
 80059b4:	4b63      	ldr	r3, [pc, #396]	; (8005b44 <HAL_LTDC_MspInit+0x2c8>)
 80059b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	68fb      	ldr	r3, [r7, #12]
    PJ15     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PK5     ------> LTDC_B6
    PK6     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80059c0:	2370      	movs	r3, #112	; 0x70
 80059c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059c4:	2302      	movs	r3, #2
 80059c6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c8:	2300      	movs	r3, #0
 80059ca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059cc:	2300      	movs	r3, #0
 80059ce:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80059d0:	230e      	movs	r3, #14
 80059d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80059d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80059d8:	4619      	mov	r1, r3
 80059da:	485b      	ldr	r0, [pc, #364]	; (8005b48 <HAL_LTDC_MspInit+0x2cc>)
 80059dc:	f00c fc6c 	bl	80122b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80059e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059e6:	2302      	movs	r3, #2
 80059e8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059ee:	2300      	movs	r3, #0
 80059f0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80059f2:	2309      	movs	r3, #9
 80059f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80059f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80059fa:	4619      	mov	r1, r3
 80059fc:	4853      	ldr	r0, [pc, #332]	; (8005b4c <HAL_LTDC_MspInit+0x2d0>)
 80059fe:	f00c fc5b 	bl	80122b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005a02:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005a06:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a08:	2302      	movs	r3, #2
 8005a0a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a10:	2300      	movs	r3, #0
 8005a12:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005a14:	230e      	movs	r3, #14
 8005a16:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005a18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	484b      	ldr	r0, [pc, #300]	; (8005b4c <HAL_LTDC_MspInit+0x2d0>)
 8005a20:	f00c fc4a 	bl	80122b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a28:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a32:	2300      	movs	r3, #0
 8005a34:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005a36:	230e      	movs	r3, #14
 8005a38:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005a3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4843      	ldr	r0, [pc, #268]	; (8005b50 <HAL_LTDC_MspInit+0x2d4>)
 8005a42:	f00c fc39 	bl	80122b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005a46:	2301      	movs	r3, #1
 8005a48:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a52:	2300      	movs	r3, #0
 8005a54:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005a56:	230e      	movs	r3, #14
 8005a58:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a5e:	4619      	mov	r1, r3
 8005a60:	483c      	ldr	r0, [pc, #240]	; (8005b54 <HAL_LTDC_MspInit+0x2d8>)
 8005a62:	f00c fc29 	bl	80122b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_10;
 8005a66:	f240 434a 	movw	r3, #1098	; 0x44a
 8005a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a70:	2300      	movs	r3, #0
 8005a72:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a74:	2300      	movs	r3, #0
 8005a76:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005a78:	230e      	movs	r3, #14
 8005a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a80:	4619      	mov	r1, r3
 8005a82:	4835      	ldr	r0, [pc, #212]	; (8005b58 <HAL_LTDC_MspInit+0x2dc>)
 8005a84:	f00c fc18 	bl	80122b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005a88:	2310      	movs	r3, #16
 8005a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a90:	2300      	movs	r3, #0
 8005a92:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a94:	2300      	movs	r3, #0
 8005a96:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005a98:	2309      	movs	r3, #9
 8005a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005a9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	482e      	ldr	r0, [pc, #184]	; (8005b5c <HAL_LTDC_MspInit+0x2e0>)
 8005aa4:	f00c fc08 	bl	80122b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aac:	2302      	movs	r3, #2
 8005aae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005ab8:	2309      	movs	r3, #9
 8005aba:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005abc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4827      	ldr	r0, [pc, #156]	; (8005b60 <HAL_LTDC_MspInit+0x2e4>)
 8005ac4:	f00c fbf8 	bl	80122b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_15;
 8005ac8:	f248 0309 	movw	r3, #32777	; 0x8009
 8005acc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ace:	2302      	movs	r3, #2
 8005ad0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005ada:	230e      	movs	r3, #14
 8005adc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8005ade:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	481f      	ldr	r0, [pc, #124]	; (8005b64 <HAL_LTDC_MspInit+0x2e8>)
 8005ae6:	f00c fbe7 	bl	80122b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005aea:	2340      	movs	r3, #64	; 0x40
 8005aec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aee:	2302      	movs	r3, #2
 8005af0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005af6:	2300      	movs	r3, #0
 8005af8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005afa:	230e      	movs	r3, #14
 8005afc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005afe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b02:	4619      	mov	r1, r3
 8005b04:	4818      	ldr	r0, [pc, #96]	; (8005b68 <HAL_LTDC_MspInit+0x2ec>)
 8005b06:	f00c fbd7 	bl	80122b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8005b0a:	2348      	movs	r3, #72	; 0x48
 8005b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b0e:	2302      	movs	r3, #2
 8005b10:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b16:	2300      	movs	r3, #0
 8005b18:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005b1a:	230e      	movs	r3, #14
 8005b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b22:	4619      	mov	r1, r3
 8005b24:	4811      	ldr	r0, [pc, #68]	; (8005b6c <HAL_LTDC_MspInit+0x2f0>)
 8005b26:	f00c fbc7 	bl	80122b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005b2a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b30:	2302      	movs	r3, #2
 8005b32:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b34:	2300      	movs	r3, #0
 8005b36:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005b3c:	2309      	movs	r3, #9
 8005b3e:	e017      	b.n	8005b70 <HAL_LTDC_MspInit+0x2f4>
 8005b40:	40016800 	.word	0x40016800
 8005b44:	40023800 	.word	0x40023800
 8005b48:	40021000 	.word	0x40021000
 8005b4c:	40022000 	.word	0x40022000
 8005b50:	40021400 	.word	0x40021400
 8005b54:	40020800 	.word	0x40020800
 8005b58:	40020000 	.word	0x40020000
 8005b5c:	40021c00 	.word	0x40021c00
 8005b60:	40020400 	.word	0x40020400
 8005b64:	40022400 	.word	0x40022400
 8005b68:	40021800 	.word	0x40021800
 8005b6c:	40020c00 	.word	0x40020c00
 8005b70:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8005b72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b76:	4619      	mov	r1, r3
 8005b78:	4813      	ldr	r0, [pc, #76]	; (8005bc8 <HAL_LTDC_MspInit+0x34c>)
 8005b7a:	f00c fb9d 	bl	80122b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b82:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b84:	2302      	movs	r3, #2
 8005b86:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005b90:	2309      	movs	r3, #9
 8005b92:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005b94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b98:	4619      	mov	r1, r3
 8005b9a:	480c      	ldr	r0, [pc, #48]	; (8005bcc <HAL_LTDC_MspInit+0x350>)
 8005b9c:	f00c fb8c 	bl	80122b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005ba0:	2360      	movs	r3, #96	; 0x60
 8005ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bac:	2300      	movs	r3, #0
 8005bae:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005bb0:	230e      	movs	r3, #14
 8005bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8005bb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4805      	ldr	r0, [pc, #20]	; (8005bd0 <HAL_LTDC_MspInit+0x354>)
 8005bbc:	f00c fb7c 	bl	80122b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8005bc0:	bf00      	nop
 8005bc2:	3750      	adds	r7, #80	; 0x50
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40022400 	.word	0x40022400
 8005bcc:	40021800 	.word	0x40021800
 8005bd0:	40022800 	.word	0x40022800

08005bd4 <HAL_LTDC_MspDeInit>:

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

  if(ltdcHandle->Instance==LTDC)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a1e      	ldr	r2, [pc, #120]	; (8005c5c <HAL_LTDC_MspDeInit+0x88>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d136      	bne.n	8005c54 <HAL_LTDC_MspDeInit+0x80>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 8005be6:	4b1e      	ldr	r3, [pc, #120]	; (8005c60 <HAL_LTDC_MspDeInit+0x8c>)
 8005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bea:	4a1d      	ldr	r2, [pc, #116]	; (8005c60 <HAL_LTDC_MspDeInit+0x8c>)
 8005bec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bf0:	6453      	str	r3, [r2, #68]	; 0x44
    PJ15     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PK5     ------> LTDC_B6
    PK6     ------> LTDC_B7
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8005bf2:	2170      	movs	r1, #112	; 0x70
 8005bf4:	481b      	ldr	r0, [pc, #108]	; (8005c64 <HAL_LTDC_MspDeInit+0x90>)
 8005bf6:	f00c fd0b 	bl	8012610 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8005bfa:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8005bfe:	481a      	ldr	r0, [pc, #104]	; (8005c68 <HAL_LTDC_MspDeInit+0x94>)
 8005c00:	f00c fd06 	bl	8012610 <HAL_GPIO_DeInit>
                          |GPIO_PIN_15);

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_10);
 8005c04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c08:	4818      	ldr	r0, [pc, #96]	; (8005c6c <HAL_LTDC_MspDeInit+0x98>)
 8005c0a:	f00c fd01 	bl	8012610 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8005c0e:	2101      	movs	r1, #1
 8005c10:	4817      	ldr	r0, [pc, #92]	; (8005c70 <HAL_LTDC_MspDeInit+0x9c>)
 8005c12:	f00c fcfd 	bl	8012610 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_10);
 8005c16:	f240 414a 	movw	r1, #1098	; 0x44a
 8005c1a:	4816      	ldr	r0, [pc, #88]	; (8005c74 <HAL_LTDC_MspDeInit+0xa0>)
 8005c1c:	f00c fcf8 	bl	8012610 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_4);
 8005c20:	2110      	movs	r1, #16
 8005c22:	4815      	ldr	r0, [pc, #84]	; (8005c78 <HAL_LTDC_MspDeInit+0xa4>)
 8005c24:	f00c fcf4 	bl	8012610 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1);
 8005c28:	2103      	movs	r1, #3
 8005c2a:	4814      	ldr	r0, [pc, #80]	; (8005c7c <HAL_LTDC_MspDeInit+0xa8>)
 8005c2c:	f00c fcf0 	bl	8012610 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_12|GPIO_PIN_13
 8005c30:	f24b 0109 	movw	r1, #45065	; 0xb009
 8005c34:	4812      	ldr	r0, [pc, #72]	; (8005c80 <HAL_LTDC_MspDeInit+0xac>)
 8005c36:	f00c fceb 	bl	8012610 <HAL_GPIO_DeInit>
                          |GPIO_PIN_15);

    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_6|GPIO_PIN_12);
 8005c3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005c3e:	4811      	ldr	r0, [pc, #68]	; (8005c84 <HAL_LTDC_MspDeInit+0xb0>)
 8005c40:	f00c fce6 	bl	8012610 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_3|GPIO_PIN_6);
 8005c44:	2148      	movs	r1, #72	; 0x48
 8005c46:	4810      	ldr	r0, [pc, #64]	; (8005c88 <HAL_LTDC_MspDeInit+0xb4>)
 8005c48:	f00c fce2 	bl	8012610 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOK, GPIO_PIN_5|GPIO_PIN_6);
 8005c4c:	2160      	movs	r1, #96	; 0x60
 8005c4e:	480f      	ldr	r0, [pc, #60]	; (8005c8c <HAL_LTDC_MspDeInit+0xb8>)
 8005c50:	f00c fcde 	bl	8012610 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }
}
 8005c54:	bf00      	nop
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40016800 	.word	0x40016800
 8005c60:	40023800 	.word	0x40023800
 8005c64:	40021000 	.word	0x40021000
 8005c68:	40022000 	.word	0x40022000
 8005c6c:	40021400 	.word	0x40021400
 8005c70:	40020800 	.word	0x40020800
 8005c74:	40020000 	.word	0x40020000
 8005c78:	40021c00 	.word	0x40021c00
 8005c7c:	40020400 	.word	0x40020400
 8005c80:	40022400 	.word	0x40022400
 8005c84:	40021800 	.word	0x40021800
 8005c88:	40020c00 	.word	0x40020c00
 8005c8c:	40022800 	.word	0x40022800

08005c90 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8005c90:	b480      	push	{r7}
 8005c92:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005c94:	f3bf 8f4f 	dsb	sy
}
 8005c98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005c9a:	f3bf 8f6f 	isb	sy
}
 8005c9e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005ca0:	4b0d      	ldr	r3, [pc, #52]	; (8005cd8 <SCB_EnableICache+0x48>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005ca8:	f3bf 8f4f 	dsb	sy
}
 8005cac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005cae:	f3bf 8f6f 	isb	sy
}
 8005cb2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005cb4:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <SCB_EnableICache+0x48>)
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	4a07      	ldr	r2, [pc, #28]	; (8005cd8 <SCB_EnableICache+0x48>)
 8005cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cbe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cc0:	f3bf 8f4f 	dsb	sy
}
 8005cc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005cc6:	f3bf 8f6f 	isb	sy
}
 8005cca:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8005ccc:	bf00      	nop
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	e000ed00 	.word	0xe000ed00

08005cdc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8005ce2:	4b1f      	ldr	r3, [pc, #124]	; (8005d60 <SCB_EnableDCache+0x84>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005cea:	f3bf 8f4f 	dsb	sy
}
 8005cee:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8005cf0:	4b1b      	ldr	r3, [pc, #108]	; (8005d60 <SCB_EnableDCache+0x84>)
 8005cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cf6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	0b5b      	lsrs	r3, r3, #13
 8005cfc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005d00:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	08db      	lsrs	r3, r3, #3
 8005d06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d0a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8005d14:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005d1a:	4911      	ldr	r1, [pc, #68]	; (8005d60 <SCB_EnableDCache+0x84>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	1e5a      	subs	r2, r3, #1
 8005d26:	60ba      	str	r2, [r7, #8]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1ef      	bne.n	8005d0c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	1e5a      	subs	r2, r3, #1
 8005d30:	60fa      	str	r2, [r7, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e5      	bne.n	8005d02 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8005d36:	f3bf 8f4f 	dsb	sy
}
 8005d3a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8005d3c:	4b08      	ldr	r3, [pc, #32]	; (8005d60 <SCB_EnableDCache+0x84>)
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	4a07      	ldr	r2, [pc, #28]	; (8005d60 <SCB_EnableDCache+0x84>)
 8005d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d46:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d48:	f3bf 8f4f 	dsb	sy
}
 8005d4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d4e:	f3bf 8f6f 	isb	sy
}
 8005d52:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8005d54:	bf00      	nop
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	e000ed00 	.word	0xe000ed00

08005d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8005d6a:	f7ff ff91 	bl	8005c90 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8005d6e:	f7ff ffb5 	bl	8005cdc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d72:	f00a fc81 	bl	8010678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d76:	f000 fac9 	bl	800630c <SystemClock_Config>
  MX_ADC2_Init();
  MX_ADC3_Init();
  /* USER CODE BEGIN 2 */
	}

	MX_GPIO_Init();
 8005d7a:	f7ff fb11 	bl	80053a0 <MX_GPIO_Init>
	DisplayOFF();
 8005d7e:	f000 fdf3 	bl	8006968 <DisplayOFF>
	MX_ADC1_Init();
 8005d82:	f7fe fe71 	bl	8004a68 <MX_ADC1_Init>
	//MX_ADC2_Init();
	MX_ADC3_Init();
 8005d86:	f7fe fec3 	bl	8004b10 <MX_ADC3_Init>
	MX_CAN1_Init();
 8005d8a:	f7fe ff93 	bl	8004cb4 <MX_CAN1_Init>
	MX_CAN2_Init();
 8005d8e:	f7fe ffc9 	bl	8004d24 <MX_CAN2_Init>
	//MX_CAN3_Init();
	//MX_DAC_Init();
	//MX_SDMMC1_SD_Init();
	//MX_USART1_UART_Init();
	MX_DMA2D_Init();
 8005d92:	f7ff f965 	bl	8005060 <MX_DMA2D_Init>
	MX_CRC_Init();
 8005d96:	f7ff f921 	bl	8004fdc <MX_CRC_Init>
	MX_FMC_Init();
 8005d9a:	f7ff fa13 	bl	80051c4 <MX_FMC_Init>
	MX_LTDC_Init();
 8005d9e:	f7ff fce9 	bl	8005774 <MX_LTDC_Init>
	MDM_LCD_SetLayerVisible(0, DISABLE);
 8005da2:	2100      	movs	r1, #0
 8005da4:	2000      	movs	r0, #0
 8005da6:	f7ff fca7 	bl	80056f8 <MDM_LCD_SetLayerVisible>
	DisplayOFF();
 8005daa:	f000 fddd 	bl	8006968 <DisplayOFF>


	// QSPI meme test END


	HAL_GPIO_WritePin(_5V_OUT1_GPIO_Port, _5V_OUT1_Pin, 1);
 8005dae:	2201      	movs	r2, #1
 8005db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005db4:	489d      	ldr	r0, [pc, #628]	; (800602c <main+0x2c8>)
 8005db6:	f00c fd4f 	bl	8012858 <HAL_GPIO_WritePin>

	CAR_CAN_Init();
 8005dba:	f7fa fbc7 	bl	800054c <CAR_CAN_Init>

	CAR_DATA_Init();
 8005dbe:	f7fa fd71 	bl	80008a4 <CAR_DATA_Init>

	MX_IWDG_Init();
 8005dc2:	f7ff fc7b 	bl	80056bc <MX_IWDG_Init>



	displayButton.GPIOx = Disp_BTN_F_GPIO_Port;
 8005dc6:	4b9a      	ldr	r3, [pc, #616]	; (8006030 <main+0x2cc>)
 8005dc8:	4a9a      	ldr	r2, [pc, #616]	; (8006034 <main+0x2d0>)
 8005dca:	601a      	str	r2, [r3, #0]
	displayButton.GPIO_Pin = Disp_BTN_F_Pin;
 8005dcc:	4b98      	ldr	r3, [pc, #608]	; (8006030 <main+0x2cc>)
 8005dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dd2:	809a      	strh	r2, [r3, #4]
	displayButton.delay = displayButtonDelay;
 8005dd4:	4b96      	ldr	r3, [pc, #600]	; (8006030 <main+0x2cc>)
 8005dd6:	2264      	movs	r2, #100	; 0x64
 8005dd8:	819a      	strh	r2, [r3, #12]

	DisplayGui_Init();
 8005dda:	f000 fdb0 	bl	800693e <DisplayGui_Init>

	HAL_ADC_Start(&hadc3);
 8005dde:	4896      	ldr	r0, [pc, #600]	; (8006038 <main+0x2d4>)
 8005de0:	f00a fd1e 	bl	8010820 <HAL_ADC_Start>

	__HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 8005de4:	4b95      	ldr	r3, [pc, #596]	; (800603c <main+0x2d8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005dec:	601a      	str	r2, [r3, #0]
	HAL_Delay(150);							//needed to eliminate white flash of the display at the startup (needed at least 150 ms)
 8005dee:	2096      	movs	r0, #150	; 0x96
 8005df0:	f00a fcae 	bl	8010750 <HAL_Delay>
	__HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 8005df4:	4b91      	ldr	r3, [pc, #580]	; (800603c <main+0x2d8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005dfc:	601a      	str	r2, [r3, #0]

	DisplayON();
 8005dfe:	f000 fdbf 	bl	8006980 <DisplayON>

	HAL_GPIO_WritePin(_5V_OUT1_GPIO_Port, _5V_OUT1_Pin, 0);
 8005e02:	2200      	movs	r2, #0
 8005e04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e08:	4888      	ldr	r0, [pc, #544]	; (800602c <main+0x2c8>)
 8005e0a:	f00c fd25 	bl	8012858 <HAL_GPIO_WritePin>
		//uint32_t loopTimeAvgTemp = 0;

		static uint32_t loopTimeAvgTemp = 0;


		loopTime = millis - loopTimeBegin;
 8005e0e:	4b8c      	ldr	r3, [pc, #560]	; (8006040 <main+0x2dc>)
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	4b8c      	ldr	r3, [pc, #560]	; (8006044 <main+0x2e0>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	4a8b      	ldr	r2, [pc, #556]	; (8006048 <main+0x2e4>)
 8005e1a:	6013      	str	r3, [r2, #0]
		loopTimeBegin = millis;
 8005e1c:	4b88      	ldr	r3, [pc, #544]	; (8006040 <main+0x2dc>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a88      	ldr	r2, [pc, #544]	; (8006044 <main+0x2e0>)
 8005e22:	6013      	str	r3, [r2, #0]


		loopTimeAvgTemp = loopTimeAvgTemp - loopTimeAvgMem[loopTimeAvgPointer];
 8005e24:	4b89      	ldr	r3, [pc, #548]	; (800604c <main+0x2e8>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	4b89      	ldr	r3, [pc, #548]	; (8006050 <main+0x2ec>)
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4b89      	ldr	r3, [pc, #548]	; (8006054 <main+0x2f0>)
 8005e30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	4a85      	ldr	r2, [pc, #532]	; (800604c <main+0x2e8>)
 8005e38:	6013      	str	r3, [r2, #0]
		loopTimeAvgMem[loopTimeAvgPointer] = loopTime;
 8005e3a:	4b85      	ldr	r3, [pc, #532]	; (8006050 <main+0x2ec>)
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4b81      	ldr	r3, [pc, #516]	; (8006048 <main+0x2e4>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a83      	ldr	r2, [pc, #524]	; (8006054 <main+0x2f0>)
 8005e46:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		loopTimeAvgTemp = loopTimeAvgTemp + loopTime;
 8005e4a:	4b80      	ldr	r3, [pc, #512]	; (800604c <main+0x2e8>)
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	4b7e      	ldr	r3, [pc, #504]	; (8006048 <main+0x2e4>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4413      	add	r3, r2
 8005e54:	4a7d      	ldr	r2, [pc, #500]	; (800604c <main+0x2e8>)
 8005e56:	6013      	str	r3, [r2, #0]

		loopTimeAvgPointer++;
 8005e58:	4b7d      	ldr	r3, [pc, #500]	; (8006050 <main+0x2ec>)
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	4b7b      	ldr	r3, [pc, #492]	; (8006050 <main+0x2ec>)
 8005e62:	801a      	strh	r2, [r3, #0]

		if(loopTimeAvgPointer >= avgLoopNumber)
 8005e64:	4b7a      	ldr	r3, [pc, #488]	; (8006050 <main+0x2ec>)
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e6c:	d302      	bcc.n	8005e74 <main+0x110>
			loopTimeAvgPointer = 0;
 8005e6e:	4b78      	ldr	r3, [pc, #480]	; (8006050 <main+0x2ec>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	801a      	strh	r2, [r3, #0]

		loopTimeAvg = (float)loopTimeAvgTemp / avgLoopNumber;
 8005e74:	4b75      	ldr	r3, [pc, #468]	; (800604c <main+0x2e8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	ee07 3a90 	vmov	s15, r3
 8005e7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e80:	eddf 6a75 	vldr	s13, [pc, #468]	; 8006058 <main+0x2f4>
 8005e84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e88:	4b74      	ldr	r3, [pc, #464]	; (800605c <main+0x2f8>)
 8005e8a:	edc3 7a00 	vstr	s15, [r3]


		if(millis >= loopTimeMaxResetMillis + loopTimeMaxResetDelay)
 8005e8e:	4b74      	ldr	r3, [pc, #464]	; (8006060 <main+0x2fc>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8005e96:	4b6a      	ldr	r3, [pc, #424]	; (8006040 <main+0x2dc>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d806      	bhi.n	8005eac <main+0x148>
		{
			loopTimeMax = 0;
 8005e9e:	4b71      	ldr	r3, [pc, #452]	; (8006064 <main+0x300>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]
			loopTimeMaxResetMillis = millis;
 8005ea4:	4b66      	ldr	r3, [pc, #408]	; (8006040 <main+0x2dc>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a6d      	ldr	r2, [pc, #436]	; (8006060 <main+0x2fc>)
 8005eaa:	6013      	str	r3, [r2, #0]
		}

		loopTimeMax = max(loopTimeMax, loopTime);
 8005eac:	4b66      	ldr	r3, [pc, #408]	; (8006048 <main+0x2e4>)
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	4b6c      	ldr	r3, [pc, #432]	; (8006064 <main+0x300>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	bf38      	it	cc
 8005eb8:	4613      	movcc	r3, r2
 8005eba:	4a6a      	ldr	r2, [pc, #424]	; (8006064 <main+0x300>)
 8005ebc:	6013      	str	r3, [r2, #0]

		// loop time calculation END


		readMcuTemperature();
 8005ebe:	f000 fc19 	bl	80066f4 <readMcuTemperature>


		CAR_DATA_Read();
 8005ec2:	f7fb fc67 	bl	8001794 <CAR_DATA_Read>
		CAR_DATA_Calculations();
 8005ec6:	f7fd f985 	bl	80031d4 <CAR_DATA_Calculations>

		if(DEBUG_MODE == 0)
		{
			tractionAcquisition();
 8005eca:	f7fd f8ed 	bl	80030a8 <tractionAcquisition>
		}


		// Mark button BEGIN

		if (millis >= markMillis + markSendDelay)
 8005ece:	4b66      	ldr	r3, [pc, #408]	; (8006068 <main+0x304>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8005ed6:	4b5a      	ldr	r3, [pc, #360]	; (8006040 <main+0x2dc>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d84d      	bhi.n	8005f7a <main+0x216>
		{

			markState = HAL_GPIO_ReadPin(DIG1_F_GPIO_Port, DIG1_F_Pin);
 8005ede:	2180      	movs	r1, #128	; 0x80
 8005ee0:	4854      	ldr	r0, [pc, #336]	; (8006034 <main+0x2d0>)
 8005ee2:	f00c fca1 	bl	8012828 <HAL_GPIO_ReadPin>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4b60      	ldr	r3, [pc, #384]	; (800606c <main+0x308>)
 8005eec:	701a      	strb	r2, [r3, #0]

			TxData_CAN1[0] = markState; //MARK TO ECU
 8005eee:	4b5f      	ldr	r3, [pc, #380]	; (800606c <main+0x308>)
 8005ef0:	781a      	ldrb	r2, [r3, #0]
 8005ef2:	4b5f      	ldr	r3, [pc, #380]	; (8006070 <main+0x30c>)
 8005ef4:	701a      	strb	r2, [r3, #0]
			TxData_CAN1[1] = MCU_temperature; //SEND MCU TEMP FOR DEBUGGING
 8005ef6:	4b5f      	ldr	r3, [pc, #380]	; (8006074 <main+0x310>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	4b5c      	ldr	r3, [pc, #368]	; (8006070 <main+0x30c>)
 8005efe:	705a      	strb	r2, [r3, #1]
			TxData_CAN1[2] = dataRX_SAVED[0]; //STEER DATA FROM CAN2 TO CAN1 FOR DRS
 8005f00:	4b5d      	ldr	r3, [pc, #372]	; (8006078 <main+0x314>)
 8005f02:	781a      	ldrb	r2, [r3, #0]
 8005f04:	4b5a      	ldr	r3, [pc, #360]	; (8006070 <main+0x30c>)
 8005f06:	709a      	strb	r2, [r3, #2]
			TxData_CAN1[3] = dataRX_SAVED[1]; //AS ABOVE
 8005f08:	4b5b      	ldr	r3, [pc, #364]	; (8006078 <main+0x314>)
 8005f0a:	785a      	ldrb	r2, [r3, #1]
 8005f0c:	4b58      	ldr	r3, [pc, #352]	; (8006070 <main+0x30c>)
 8005f0e:	70da      	strb	r2, [r3, #3]
			//ADD Y ACCEL FROM CAN2 TO CAN1 FOR DRS
			TxData_CAN1[4]=dataRX_SAVED[2];
 8005f10:	4b59      	ldr	r3, [pc, #356]	; (8006078 <main+0x314>)
 8005f12:	789a      	ldrb	r2, [r3, #2]
 8005f14:	4b56      	ldr	r3, [pc, #344]	; (8006070 <main+0x30c>)
 8005f16:	711a      	strb	r2, [r3, #4]
			TxData_CAN1[5]=dataRX_SAVED[3];
 8005f18:	4b57      	ldr	r3, [pc, #348]	; (8006078 <main+0x314>)
 8005f1a:	78da      	ldrb	r2, [r3, #3]
 8005f1c:	4b54      	ldr	r3, [pc, #336]	; (8006070 <main+0x30c>)
 8005f1e:	715a      	strb	r2, [r3, #5]

			if(DEBUG_MODE == 0)
			{
				CAR_Data.steer.intData = TxData_CAN1[2]<<8|TxData_CAN1[3];
 8005f20:	4b53      	ldr	r3, [pc, #332]	; (8006070 <main+0x30c>)
 8005f22:	789b      	ldrb	r3, [r3, #2]
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	4a52      	ldr	r2, [pc, #328]	; (8006070 <main+0x30c>)
 8005f28:	78d2      	ldrb	r2, [r2, #3]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	4a53      	ldr	r2, [pc, #332]	; (800607c <main+0x318>)
 8005f2e:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4

				CAR_Data.steer.floatData = CAR_Data.steer.intData;
 8005f32:	4b52      	ldr	r3, [pc, #328]	; (800607c <main+0x318>)
 8005f34:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8005f38:	ee07 3a90 	vmov	s15, r3
 8005f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f40:	4b4e      	ldr	r3, [pc, #312]	; (800607c <main+0x318>)
 8005f42:	edc3 7a78 	vstr	s15, [r3, #480]	; 0x1e0
				CAR_Data.steer.oldTimeData = CAR_Data.steer.lastTimeData;
 8005f46:	4b4d      	ldr	r3, [pc, #308]	; (800607c <main+0x318>)
 8005f48:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8005f4c:	4a4b      	ldr	r2, [pc, #300]	; (800607c <main+0x318>)
 8005f4e:	f8c2 31f4 	str.w	r3, [r2, #500]	; 0x1f4
				CAR_Data.steer.lastTimeData = millis;
 8005f52:	4b3b      	ldr	r3, [pc, #236]	; (8006040 <main+0x2dc>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a49      	ldr	r2, [pc, #292]	; (800607c <main+0x318>)
 8005f58:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0

				steer = CAR_Data.steer.intData;
 8005f5c:	4b47      	ldr	r3, [pc, #284]	; (800607c <main+0x318>)
 8005f5e:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8005f62:	4a47      	ldr	r2, [pc, #284]	; (8006080 <main+0x31c>)
 8005f64:	6013      	str	r3, [r2, #0]
			}

			HAL_CAN_AddTxMessage(&hcan1, &pHeader_CAN1, TxData_CAN1, &TxMailbox_CAN1);		//WARNING: disable only for DEBUG
 8005f66:	4b47      	ldr	r3, [pc, #284]	; (8006084 <main+0x320>)
 8005f68:	4a41      	ldr	r2, [pc, #260]	; (8006070 <main+0x30c>)
 8005f6a:	4947      	ldr	r1, [pc, #284]	; (8006088 <main+0x324>)
 8005f6c:	4847      	ldr	r0, [pc, #284]	; (800608c <main+0x328>)
 8005f6e:	f00b fa61 	bl	8011434 <HAL_CAN_AddTxMessage>

			markMillis = millis;
 8005f72:	4b33      	ldr	r3, [pc, #204]	; (8006040 <main+0x2dc>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a3c      	ldr	r2, [pc, #240]	; (8006068 <main+0x304>)
 8005f78:	6013      	str	r3, [r2, #0]



		// Display debounce section BEGIN

		uint8_t readingDISP = HAL_GPIO_ReadPin(Disp_BTN_F_GPIO_Port, Disp_BTN_F_Pin);
 8005f7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f7e:	482d      	ldr	r0, [pc, #180]	; (8006034 <main+0x2d0>)
 8005f80:	f00c fc52 	bl	8012828 <HAL_GPIO_ReadPin>
 8005f84:	4603      	mov	r3, r0
 8005f86:	71fb      	strb	r3, [r7, #7]
		// check to see if you just pressed the button
		// (i.e. the input went from LOW to HIGH), and you've waited long enough
		// since the last press to ignore any noise:

		// If the switch changed, due to noise or pressing:
		if (readingDISP != lastButtonStateDISP) {
 8005f88:	4b41      	ldr	r3, [pc, #260]	; (8006090 <main+0x32c>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	79fa      	ldrb	r2, [r7, #7]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d003      	beq.n	8005f9a <main+0x236>
			// reset the debouncing timer
			lastDebounceTimeDISP = millis;
 8005f92:	4b2b      	ldr	r3, [pc, #172]	; (8006040 <main+0x2dc>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a3f      	ldr	r2, [pc, #252]	; (8006094 <main+0x330>)
 8005f98:	6013      	str	r3, [r2, #0]
		}

		if ((millis - lastDebounceTimeDISP) > debounceDelay) {
 8005f9a:	4b29      	ldr	r3, [pc, #164]	; (8006040 <main+0x2dc>)
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	4b3d      	ldr	r3, [pc, #244]	; (8006094 <main+0x330>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	1ad2      	subs	r2, r2, r3
 8005fa4:	4b3c      	ldr	r3, [pc, #240]	; (8006098 <main+0x334>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d915      	bls.n	8005fd8 <main+0x274>
			// whatever the reading is at, it's been there for longer than the debounce
			// delay, so take it as the actual current state:

			// if the button state has changed:
			if (readingDISP != buttonStateDISP) {
 8005fac:	4b3b      	ldr	r3, [pc, #236]	; (800609c <main+0x338>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	79fa      	ldrb	r2, [r7, #7]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d010      	beq.n	8005fd8 <main+0x274>
				buttonStateDISP = readingDISP;
 8005fb6:	4a39      	ldr	r2, [pc, #228]	; (800609c <main+0x338>)
 8005fb8:	79fb      	ldrb	r3, [r7, #7]
 8005fba:	7013      	strb	r3, [r2, #0]

				// only toggle the LED if the new button state is HIGH
				if (buttonStateDISP == 1) {
 8005fbc:	4b37      	ldr	r3, [pc, #220]	; (800609c <main+0x338>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d109      	bne.n	8005fd8 <main+0x274>
					//HAL_GPIO_TogglePin(MAP_OUT_GPIO_Port, MAP_OUT_Pin);
					//MAPbtn = !MAPbtn;
					DISPbtn = !DISPbtn;
 8005fc4:	4b36      	ldr	r3, [pc, #216]	; (80060a0 <main+0x33c>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	bf0c      	ite	eq
 8005fcc:	2301      	moveq	r3, #1
 8005fce:	2300      	movne	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	4b32      	ldr	r3, [pc, #200]	; (80060a0 <main+0x33c>)
 8005fd6:	701a      	strb	r2, [r3, #0]


		//if(GPIO_AdvancedRead(&displayButton) == GPIO_FALL)
		//DISPbtn = !DISPbtn;

		lastButtonStateDISP = readingDISP;
 8005fd8:	4a2d      	ldr	r2, [pc, #180]	; (8006090 <main+0x32c>)
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	7013      	strb	r3, [r2, #0]
				flagDecrementoPagina = 0;
			}
		}
		else
		{
			if (DISPbtn == 1 && flagIncrementoPagina == 0)
 8005fde:	4b30      	ldr	r3, [pc, #192]	; (80060a0 <main+0x33c>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d10c      	bne.n	8006000 <main+0x29c>
 8005fe6:	4b2f      	ldr	r3, [pc, #188]	; (80060a4 <main+0x340>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d108      	bne.n	8006000 <main+0x29c>
			{
				paginaAttivata++;
 8005fee:	4b2e      	ldr	r3, [pc, #184]	; (80060a8 <main+0x344>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	4b2c      	ldr	r3, [pc, #176]	; (80060a8 <main+0x344>)
 8005ff8:	701a      	strb	r2, [r3, #0]
				flagIncrementoPagina = 1;
 8005ffa:	4b2a      	ldr	r3, [pc, #168]	; (80060a4 <main+0x340>)
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	701a      	strb	r2, [r3, #0]
			}

			if (DISPbtn == 0 && flagIncrementoPagina == 1)
 8006000:	4b27      	ldr	r3, [pc, #156]	; (80060a0 <main+0x33c>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10c      	bne.n	8006022 <main+0x2be>
 8006008:	4b26      	ldr	r3, [pc, #152]	; (80060a4 <main+0x340>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d108      	bne.n	8006022 <main+0x2be>
			{
				paginaAttivata++;
 8006010:	4b25      	ldr	r3, [pc, #148]	; (80060a8 <main+0x344>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	3301      	adds	r3, #1
 8006016:	b2da      	uxtb	r2, r3
 8006018:	4b23      	ldr	r3, [pc, #140]	; (80060a8 <main+0x344>)
 800601a:	701a      	strb	r2, [r3, #0]
				flagIncrementoPagina = 0;
 800601c:	4b21      	ldr	r3, [pc, #132]	; (80060a4 <main+0x340>)
 800601e:	2200      	movs	r2, #0
 8006020:	701a      	strb	r2, [r3, #0]
			}
		}

		if (paginaAttivata > 5)
 8006022:	4b21      	ldr	r3, [pc, #132]	; (80060a8 <main+0x344>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b05      	cmp	r3, #5
 8006028:	d944      	bls.n	80060b4 <main+0x350>
 800602a:	e03f      	b.n	80060ac <main+0x348>
 800602c:	40020c00 	.word	0x40020c00
 8006030:	20002d68 	.word	0x20002d68
 8006034:	40020400 	.word	0x40020400
 8006038:	20001b70 	.word	0x20001b70
 800603c:	20001cc8 	.word	0x20001cc8
 8006040:	20006a98 	.word	0x20006a98
 8006044:	20002d80 	.word	0x20002d80
 8006048:	20001d84 	.word	0x20001d84
 800604c:	20002d84 	.word	0x20002d84
 8006050:	20002d88 	.word	0x20002d88
 8006054:	20001d94 	.word	0x20001d94
 8006058:	447a0000 	.word	0x447a0000
 800605c:	20001d90 	.word	0x20001d90
 8006060:	20001d8c 	.word	0x20001d8c
 8006064:	20001d88 	.word	0x20001d88
 8006068:	20002d7c 	.word	0x20002d7c
 800606c:	20002d78 	.word	0x20002d78
 8006070:	2000022c 	.word	0x2000022c
 8006074:	20002db0 	.word	0x20002db0
 8006078:	200003b8 	.word	0x200003b8
 800607c:	2000041c 	.word	0x2000041c
 8006080:	20002d4c 	.word	0x20002d4c
 8006084:	20000228 	.word	0x20000228
 8006088:	200001f4 	.word	0x200001f4
 800608c:	20001bb8 	.word	0x20001bb8
 8006090:	20002d61 	.word	0x20002d61
 8006094:	20002d64 	.word	0x20002d64
 8006098:	20000038 	.word	0x20000038
 800609c:	20002d60 	.word	0x20002d60
 80060a0:	20002d62 	.word	0x20002d62
 80060a4:	20002d8a 	.word	0x20002d8a
 80060a8:	2000003c 	.word	0x2000003c
		{
			paginaAttivata = 1;
 80060ac:	4b84      	ldr	r3, [pc, #528]	; (80062c0 <main+0x55c>)
 80060ae:	2201      	movs	r2, #1
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	e006      	b.n	80060c2 <main+0x35e>
		}
		else if (paginaAttivata < 1)
 80060b4:	4b82      	ldr	r3, [pc, #520]	; (80062c0 <main+0x55c>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d102      	bne.n	80060c2 <main+0x35e>
		{
			paginaAttivata = 5;
 80060bc:	4b80      	ldr	r3, [pc, #512]	; (80062c0 <main+0x55c>)
 80060be:	2205      	movs	r2, #5
 80060c0:	701a      	strb	r2, [r3, #0]

		//paginaAttivata = 2;		//WARNING: SOLO DEBUG

		static uint8_t changePageFloag = 0;

		if (selectedGui != GuiAlarm && DEBUG_MODE == 0)
 80060c2:	4b80      	ldr	r3, [pc, #512]	; (80062c4 <main+0x560>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2bfe      	cmp	r3, #254	; 0xfe
 80060c8:	d050      	beq.n	800616c <main+0x408>
		{
			if(selectedGui_old != GuiAlarm && changePageFloag)
 80060ca:	4b7f      	ldr	r3, [pc, #508]	; (80062c8 <main+0x564>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2bfe      	cmp	r3, #254	; 0xfe
 80060d0:	d037      	beq.n	8006142 <main+0x3de>
 80060d2:	4b7e      	ldr	r3, [pc, #504]	; (80062cc <main+0x568>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d033      	beq.n	8006142 <main+0x3de>
			{
				switch (paginaAttivata)
 80060da:	4b79      	ldr	r3, [pc, #484]	; (80062c0 <main+0x55c>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	3b01      	subs	r3, #1
 80060e0:	2b05      	cmp	r3, #5
 80060e2:	d827      	bhi.n	8006134 <main+0x3d0>
 80060e4:	a201      	add	r2, pc, #4	; (adr r2, 80060ec <main+0x388>)
 80060e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ea:	bf00      	nop
 80060ec:	08006105 	.word	0x08006105
 80060f0:	0800610d 	.word	0x0800610d
 80060f4:	08006115 	.word	0x08006115
 80060f8:	0800611d 	.word	0x0800611d
 80060fc:	08006125 	.word	0x08006125
 8006100:	0800612d 	.word	0x0800612d
				{
					case 1:
						selectedGui = GuiDrive1;					//ENDURANCE
 8006104:	4b6f      	ldr	r3, [pc, #444]	; (80062c4 <main+0x560>)
 8006106:	2215      	movs	r2, #21
 8006108:	701a      	strb	r2, [r3, #0]
						break;
 800610a:	e016      	b.n	800613a <main+0x3d6>

					case 2:
						//selectedGui = GuiDrive2;
						selectedGui = GuiOld1;						//AUTOCROSS
 800610c:	4b6d      	ldr	r3, [pc, #436]	; (80062c4 <main+0x560>)
 800610e:	220b      	movs	r2, #11
 8006110:	701a      	strb	r2, [r3, #0]
						break;
 8006112:	e012      	b.n	800613a <main+0x3d6>

					case 3:
						selectedGui = GuiHandlingCurvesTest;		//SKIDPAD
 8006114:	4b6b      	ldr	r3, [pc, #428]	; (80062c4 <main+0x560>)
 8006116:	221f      	movs	r2, #31
 8006118:	701a      	strb	r2, [r3, #0]
						break;
 800611a:	e00e      	b.n	800613a <main+0x3d6>

					case 4:
						selectedGui = GuiAcceleration;				//ACCELERATION
 800611c:	4b69      	ldr	r3, [pc, #420]	; (80062c4 <main+0x560>)
 800611e:	2203      	movs	r2, #3
 8006120:	701a      	strb	r2, [r3, #0]
						break;
 8006122:	e00a      	b.n	800613a <main+0x3d6>

					case 5:
						selectedGui = GuiCarSetup;
 8006124:	4b67      	ldr	r3, [pc, #412]	; (80062c4 <main+0x560>)
 8006126:	2233      	movs	r2, #51	; 0x33
 8006128:	701a      	strb	r2, [r3, #0]
						break;
 800612a:	e006      	b.n	800613a <main+0x3d6>

					case 6:
						selectedGui = GuiOld1;
 800612c:	4b65      	ldr	r3, [pc, #404]	; (80062c4 <main+0x560>)
 800612e:	220b      	movs	r2, #11
 8006130:	701a      	strb	r2, [r3, #0]
						break;
 8006132:	e002      	b.n	800613a <main+0x3d6>

					default:
						selectedGui = GuiDrive1;
 8006134:	4b63      	ldr	r3, [pc, #396]	; (80062c4 <main+0x560>)
 8006136:	2215      	movs	r2, #21
 8006138:	701a      	strb	r2, [r3, #0]

				}

				changePageFloag = 0;
 800613a:	4b64      	ldr	r3, [pc, #400]	; (80062cc <main+0x568>)
 800613c:	2200      	movs	r2, #0
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	e014      	b.n	800616c <main+0x408>
			}
			else
			{
				static uint32_t millisWaitToChangePage = 0;

				if(millisWaitToChangePage == 0)
 8006142:	4b63      	ldr	r3, [pc, #396]	; (80062d0 <main+0x56c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d103      	bne.n	8006152 <main+0x3ee>
					millisWaitToChangePage = millis;
 800614a:	4b62      	ldr	r3, [pc, #392]	; (80062d4 <main+0x570>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a60      	ldr	r2, [pc, #384]	; (80062d0 <main+0x56c>)
 8006150:	6013      	str	r3, [r2, #0]

				if(millis - millisWaitToChangePage >= 50)
 8006152:	4b60      	ldr	r3, [pc, #384]	; (80062d4 <main+0x570>)
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	4b5e      	ldr	r3, [pc, #376]	; (80062d0 <main+0x56c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	2b31      	cmp	r3, #49	; 0x31
 800615e:	d905      	bls.n	800616c <main+0x408>
				{
					millisWaitToChangePage = 0;
 8006160:	4b5b      	ldr	r3, [pc, #364]	; (80062d0 <main+0x56c>)
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
					changePageFloag = 1;
 8006166:	4b59      	ldr	r3, [pc, #356]	; (80062cc <main+0x568>)
 8006168:	2201      	movs	r2, #1
 800616a:	701a      	strb	r2, [r3, #0]



		// MAP debounce section BEGIN

		uint8_t readingMAP = HAL_GPIO_ReadPin(Map_BTN_F_GPIO_Port, Map_BTN_F_Pin);
 800616c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006170:	4859      	ldr	r0, [pc, #356]	; (80062d8 <main+0x574>)
 8006172:	f00c fb59 	bl	8012828 <HAL_GPIO_ReadPin>
 8006176:	4603      	mov	r3, r0
 8006178:	71bb      	strb	r3, [r7, #6]
		// check to see if you just pressed the button
		// (i.e. the input went from LOW to HIGH), and you've waited long enough
		// since the last press to ignore any noise:

		// If the switch changed, due to noise or pressing:
		if (readingMAP != lastButtonStateMAP)
 800617a:	4b58      	ldr	r3, [pc, #352]	; (80062dc <main+0x578>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	79ba      	ldrb	r2, [r7, #6]
 8006180:	429a      	cmp	r2, r3
 8006182:	d003      	beq.n	800618c <main+0x428>
		{
			// reset the debouncing timer
			lastDebounceTimeMAP = millis;
 8006184:	4b53      	ldr	r3, [pc, #332]	; (80062d4 <main+0x570>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a55      	ldr	r2, [pc, #340]	; (80062e0 <main+0x57c>)
 800618a:	6013      	str	r3, [r2, #0]
		}

		if ((millis - lastDebounceTimeMAP) > debounceDelay)
 800618c:	4b51      	ldr	r3, [pc, #324]	; (80062d4 <main+0x570>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	4b53      	ldr	r3, [pc, #332]	; (80062e0 <main+0x57c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	1ad2      	subs	r2, r2, r3
 8006196:	4b53      	ldr	r3, [pc, #332]	; (80062e4 <main+0x580>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d915      	bls.n	80061ca <main+0x466>
		{
			// whatever the reading is at, it's been there for longer than the debounce
			// delay, so take it as the actual current state:

			// if the button state has changed:
			if (readingMAP != buttonStateMAP)
 800619e:	4b52      	ldr	r3, [pc, #328]	; (80062e8 <main+0x584>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	79ba      	ldrb	r2, [r7, #6]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d010      	beq.n	80061ca <main+0x466>
			{
				buttonStateMAP = readingMAP;
 80061a8:	4a4f      	ldr	r2, [pc, #316]	; (80062e8 <main+0x584>)
 80061aa:	79bb      	ldrb	r3, [r7, #6]
 80061ac:	7013      	strb	r3, [r2, #0]

				// only toggle the LED if the new button state is HIGH
				if (buttonStateMAP == 1)
 80061ae:	4b4e      	ldr	r3, [pc, #312]	; (80062e8 <main+0x584>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d109      	bne.n	80061ca <main+0x466>
				{
					//HAL_GPIO_TogglePin(MAP_OUT_GPIO_Port, MAP_OUT_Pin);
					MAPbtn = !MAPbtn;
 80061b6:	4b4d      	ldr	r3, [pc, #308]	; (80062ec <main+0x588>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	bf0c      	ite	eq
 80061be:	2301      	moveq	r3, #1
 80061c0:	2300      	movne	r3, #0
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	4b49      	ldr	r3, [pc, #292]	; (80062ec <main+0x588>)
 80061c8:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if(MAP_CHANGE_ENABLE == ENABLE)
			HAL_GPIO_WritePin(MAP_OUT_GPIO_Port, MAP_OUT_Pin, !MAPbtn);
 80061ca:	4b48      	ldr	r3, [pc, #288]	; (80062ec <main+0x588>)
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	bf0c      	ite	eq
 80061d2:	2301      	moveq	r3, #1
 80061d4:	2300      	movne	r3, #0
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061de:	4844      	ldr	r0, [pc, #272]	; (80062f0 <main+0x58c>)
 80061e0:	f00c fb3a 	bl	8012858 <HAL_GPIO_WritePin>
		else
			HAL_GPIO_WritePin(MAP_OUT_GPIO_Port, MAP_OUT_Pin, 1);

		//map = MAPbtn;
		CAR_Data.map.intData = !HAL_GPIO_ReadPin(MAP_OUT_GPIO_Port, MAP_OUT_Pin);
 80061e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061e8:	4841      	ldr	r0, [pc, #260]	; (80062f0 <main+0x58c>)
 80061ea:	f00c fb1d 	bl	8012828 <HAL_GPIO_ReadPin>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	bf0c      	ite	eq
 80061f4:	2301      	moveq	r3, #1
 80061f6:	2300      	movne	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	461a      	mov	r2, r3
 80061fc:	4b3d      	ldr	r3, [pc, #244]	; (80062f4 <main+0x590>)
 80061fe:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
		map = CAR_Data.map.intData;
 8006202:	4b3c      	ldr	r3, [pc, #240]	; (80062f4 <main+0x590>)
 8006204:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8006208:	4a3b      	ldr	r2, [pc, #236]	; (80062f8 <main+0x594>)
 800620a:	6013      	str	r3, [r2, #0]

		CAR_Data.map.floatData = CAR_Data.map.intData;
 800620c:	4b39      	ldr	r3, [pc, #228]	; (80062f4 <main+0x590>)
 800620e:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8006212:	ee07 3a90 	vmov	s15, r3
 8006216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800621a:	4b36      	ldr	r3, [pc, #216]	; (80062f4 <main+0x590>)
 800621c:	edc3 7aea 	vstr	s15, [r3, #936]	; 0x3a8

		map_pp = CAR_Data.map.intData + 1;
 8006220:	4b34      	ldr	r3, [pc, #208]	; (80062f4 <main+0x590>)
 8006222:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8006226:	3301      	adds	r3, #1
 8006228:	4a34      	ldr	r2, [pc, #208]	; (80062fc <main+0x598>)
 800622a:	6013      	str	r3, [r2, #0]
		// save the reading. Next time through the loop, it'll be the lastButtonState:
		lastButtonStateMAP = readingMAP;
 800622c:	4a2b      	ldr	r2, [pc, #172]	; (80062dc <main+0x578>)
 800622e:	79bb      	ldrb	r3, [r7, #6]
 8006230:	7013      	strb	r3, [r2, #0]
		//CAN_DATA_GuiPopUp_Disable(0);		//Traction, 			change
		//CAN_DATA_GuiPopUp_Disable(2);		//Water Temperature, 	range
		//CAN_DATA_GuiPopUp_Disable(3);		//Oil Temperature,		range
		//CAN_DATA_GuiPopUp_Disable(4);		//Fuel Pressure, 		range
		//CAN_DATA_GuiPopUp_Disable(5);		//Oil Pressure, 		range
		CAN_DATA_GuiPopUp_Disable(6);		//RPM,					range
 8006232:	2006      	movs	r0, #6
 8006234:	f7fe fb9c 	bl	8004970 <CAN_DATA_GuiPopUp_Disable>
		CAN_DATA_GuiPopUp_Disable(7);		//BSPD,					range
 8006238:	2007      	movs	r0, #7
 800623a:	f7fe fb99 	bl	8004970 <CAN_DATA_GuiPopUp_Disable>
		CAN_DATA_GuiPopUp_Disable(8);		//Water pump,			change
 800623e:	2008      	movs	r0, #8
 8006240:	f7fe fb96 	bl	8004970 <CAN_DATA_GuiPopUp_Disable>
		CAN_DATA_GuiPopUp_Disable(9);		//Water pump,			range
 8006244:	2009      	movs	r0, #9
 8006246:	f7fe fb93 	bl	8004970 <CAN_DATA_GuiPopUp_Disable>

		static uint32_t millisDelayEnableOilPressureAlarm = 0;
		static uint32_t oilPressureAlarmEnableStatus = 0;

		if(CAR_Data.rpm.intData <= 2500)
 800624a:	4b2a      	ldr	r3, [pc, #168]	; (80062f4 <main+0x590>)
 800624c:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8006250:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006254:	4293      	cmp	r3, r2
 8006256:	dc13      	bgt.n	8006280 <main+0x51c>
		{
			CAN_DATA_GuiPopUp_Disable(5);			//Oil Pressure, 		range
 8006258:	2005      	movs	r0, #5
 800625a:	f7fe fb89 	bl	8004970 <CAN_DATA_GuiPopUp_Disable>

			if(CAR_Data.rpm.intData <= 1000)
 800625e:	4b25      	ldr	r3, [pc, #148]	; (80062f4 <main+0x590>)
 8006260:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8006264:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006268:	dc02      	bgt.n	8006270 <main+0x50c>
				CAN_DATA_GuiPopUp_Disable(4);		//Fuel Pressure, 		range
 800626a:	2004      	movs	r0, #4
 800626c:	f7fe fb80 	bl	8004970 <CAN_DATA_GuiPopUp_Disable>

			oilPressureAlarmEnableStatus = 1;
 8006270:	4b23      	ldr	r3, [pc, #140]	; (8006300 <main+0x59c>)
 8006272:	2201      	movs	r2, #1
 8006274:	601a      	str	r2, [r3, #0]
			millisDelayEnableOilPressureAlarm = millis;
 8006276:	4b17      	ldr	r3, [pc, #92]	; (80062d4 <main+0x570>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a22      	ldr	r2, [pc, #136]	; (8006304 <main+0x5a0>)
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	e015      	b.n	80062ac <main+0x548>
		}
		else
		{
			if(oilPressureAlarmEnableStatus == 1 && millis >= millisDelayEnableOilPressureAlarm + 5000)
 8006280:	4b1f      	ldr	r3, [pc, #124]	; (8006300 <main+0x59c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d111      	bne.n	80062ac <main+0x548>
 8006288:	4b1e      	ldr	r3, [pc, #120]	; (8006304 <main+0x5a0>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006290:	4413      	add	r3, r2
 8006292:	4a10      	ldr	r2, [pc, #64]	; (80062d4 <main+0x570>)
 8006294:	6812      	ldr	r2, [r2, #0]
 8006296:	4293      	cmp	r3, r2
 8006298:	d808      	bhi.n	80062ac <main+0x548>
			{
				CAN_DATA_GuiRangePopUp_Enable(5);	//Oil Pressure, 		range
 800629a:	2005      	movs	r0, #5
 800629c:	f7fe fba6 	bl	80049ec <CAN_DATA_GuiRangePopUp_Enable>

				CAN_DATA_GuiRangePopUp_Enable(4);	//Fuel Pressure, 		range
 80062a0:	2004      	movs	r0, #4
 80062a2:	f7fe fba3 	bl	80049ec <CAN_DATA_GuiRangePopUp_Enable>

				oilPressureAlarmEnableStatus = 0;
 80062a6:	4b16      	ldr	r3, [pc, #88]	; (8006300 <main+0x59c>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]
			}
		}



		dashboardLedControl();
 80062ac:	f000 f8d6 	bl	800645c <dashboardLedControl>

		DisplayGui();
 80062b0:	f000 fb72 	bl	8006998 <DisplayGui>


		__HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 80062b4:	4b14      	ldr	r3, [pc, #80]	; (8006308 <main+0x5a4>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80062bc:	601a      	str	r2, [r3, #0]
	while (1) {
 80062be:	e5a6      	b.n	8005e0e <main+0xaa>
 80062c0:	2000003c 	.word	0x2000003c
 80062c4:	20002dbe 	.word	0x20002dbe
 80062c8:	20000044 	.word	0x20000044
 80062cc:	20002d8b 	.word	0x20002d8b
 80062d0:	20002d8c 	.word	0x20002d8c
 80062d4:	20006a98 	.word	0x20006a98
 80062d8:	40020400 	.word	0x40020400
 80062dc:	20002d59 	.word	0x20002d59
 80062e0:	20002d5c 	.word	0x20002d5c
 80062e4:	20000038 	.word	0x20000038
 80062e8:	20002d58 	.word	0x20002d58
 80062ec:	20002d5a 	.word	0x20002d5a
 80062f0:	40020c00 	.word	0x40020c00
 80062f4:	2000041c 	.word	0x2000041c
 80062f8:	20002d3c 	.word	0x20002d3c
 80062fc:	20000018 	.word	0x20000018
 8006300:	20002d90 	.word	0x20002d90
 8006304:	20002d94 	.word	0x20002d94
 8006308:	20001cc8 	.word	0x20001cc8

0800630c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b0b8      	sub	sp, #224	; 0xe0
 8006310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006312:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006316:	2234      	movs	r2, #52	; 0x34
 8006318:	2100      	movs	r1, #0
 800631a:	4618      	mov	r0, r3
 800631c:	f01b fc9a 	bl	8021c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006320:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	605a      	str	r2, [r3, #4]
 800632a:	609a      	str	r2, [r3, #8]
 800632c:	60da      	str	r2, [r3, #12]
 800632e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006330:	f107 0308 	add.w	r3, r7, #8
 8006334:	2290      	movs	r2, #144	; 0x90
 8006336:	2100      	movs	r1, #0
 8006338:	4618      	mov	r0, r3
 800633a:	f01b fc8b 	bl	8021c54 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800633e:	4b44      	ldr	r3, [pc, #272]	; (8006450 <SystemClock_Config+0x144>)
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	4a43      	ldr	r2, [pc, #268]	; (8006450 <SystemClock_Config+0x144>)
 8006344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006348:	6413      	str	r3, [r2, #64]	; 0x40
 800634a:	4b41      	ldr	r3, [pc, #260]	; (8006450 <SystemClock_Config+0x144>)
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006352:	607b      	str	r3, [r7, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006356:	4b3f      	ldr	r3, [pc, #252]	; (8006454 <SystemClock_Config+0x148>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a3e      	ldr	r2, [pc, #248]	; (8006454 <SystemClock_Config+0x148>)
 800635c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	4b3c      	ldr	r3, [pc, #240]	; (8006454 <SystemClock_Config+0x148>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800636e:	2309      	movs	r3, #9
 8006370:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006378:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800637c:	2301      	movs	r3, #1
 800637e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006382:	2302      	movs	r3, #2
 8006384:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006388:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800638c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8006390:	2319      	movs	r3, #25
 8006392:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8006396:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800639a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800639e:	2302      	movs	r3, #2
 80063a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80063a4:	2308      	movs	r3, #8
 80063a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80063aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80063ae:	4618      	mov	r0, r3
 80063b0:	f00d f856 	bl	8013460 <HAL_RCC_OscConfig>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80063ba:	f000 f973 	bl	80066a4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80063be:	f00c ffff 	bl	80133c0 <HAL_PWREx_EnableOverDrive>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80063c8:	f000 f96c 	bl	80066a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80063cc:	230f      	movs	r3, #15
 80063ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80063d2:	2302      	movs	r3, #2
 80063d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80063d8:	2300      	movs	r3, #0
 80063da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80063de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80063e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80063e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80063ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80063f2:	2107      	movs	r1, #7
 80063f4:	4618      	mov	r0, r3
 80063f6:	f00d fae1 	bl	80139bc <HAL_RCC_ClockConfig>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8006400:	f000 f950 	bl	80066a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 8006404:	4b14      	ldr	r3, [pc, #80]	; (8006458 <SystemClock_Config+0x14c>)
 8006406:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8006408:	23c0      	movs	r3, #192	; 0xc0
 800640a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 800640c:	2303      	movs	r3, #3
 800640e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8006410:	2302      	movs	r3, #2
 8006412:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8006414:	2301      	movs	r3, #1
 8006416:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8006418:	2301      	movs	r3, #1
 800641a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800641c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006420:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006422:	2300      	movs	r3, #0
 8006424:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8006426:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800642a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800642e:	2300      	movs	r3, #0
 8006430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006434:	f107 0308 	add.w	r3, r7, #8
 8006438:	4618      	mov	r0, r3
 800643a:	f00d fc71 	bl	8013d20 <HAL_RCCEx_PeriphCLKConfig>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8006444:	f000 f92e 	bl	80066a4 <Error_Handler>
  }
}
 8006448:	bf00      	nop
 800644a:	37e0      	adds	r7, #224	; 0xe0
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	40023800 	.word	0x40023800
 8006454:	40007000 	.word	0x40007000
 8006458:	00a00048 	.word	0x00a00048

0800645c <dashboardLedControl>:

/* USER CODE BEGIN 4 */

void dashboardLedControl(void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	af00      	add	r7, sp, #0
	static uint8_t ledStartingProcedureDone = 0;

	if(ledStartingProcedureDone == 0)
 8006460:	4b87      	ldr	r3, [pc, #540]	; (8006680 <dashboardLedControl+0x224>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d146      	bne.n	80064f6 <dashboardLedControl+0x9a>
	{
		static uint32_t millisLedStartingProcedure = 0;

		if(millisLedStartingProcedure < 500)
 8006468:	4b86      	ldr	r3, [pc, #536]	; (8006684 <dashboardLedControl+0x228>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006470:	d20a      	bcs.n	8006488 <dashboardLedControl+0x2c>
		{
			millisLedStartingProcedure = millis;
 8006472:	4b85      	ldr	r3, [pc, #532]	; (8006688 <dashboardLedControl+0x22c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a83      	ldr	r2, [pc, #524]	; (8006684 <dashboardLedControl+0x228>)
 8006478:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(_5V_OUT1_GPIO_Port, _5V_OUT1_Pin, 1);
 800647a:	2201      	movs	r2, #1
 800647c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006480:	4882      	ldr	r0, [pc, #520]	; (800668c <dashboardLedControl+0x230>)
 8006482:	f00c f9e9 	bl	8012858 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(_5V_OUT1_GPIO_Port, _5V_OUT1_Pin, 0);
			ledStartingProcedureDone = 1;
			millisLedStartingProcedure = millis;
		}

		goto END_OF_FUNCTION;
 8006486:	e0f8      	b.n	800667a <dashboardLedControl+0x21e>
		else if(millisLedStartingProcedure < 2000)
 8006488:	4b7e      	ldr	r3, [pc, #504]	; (8006684 <dashboardLedControl+0x228>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006490:	d212      	bcs.n	80064b8 <dashboardLedControl+0x5c>
			if(millis >= millisLedStartingProcedure + 50)
 8006492:	4b7c      	ldr	r3, [pc, #496]	; (8006684 <dashboardLedControl+0x228>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800649a:	4b7b      	ldr	r3, [pc, #492]	; (8006688 <dashboardLedControl+0x22c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	f200 80eb 	bhi.w	800667a <dashboardLedControl+0x21e>
				HAL_GPIO_TogglePin(_5V_OUT1_GPIO_Port, _5V_OUT1_Pin);
 80064a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064a8:	4878      	ldr	r0, [pc, #480]	; (800668c <dashboardLedControl+0x230>)
 80064aa:	f00c f9ee 	bl	801288a <HAL_GPIO_TogglePin>
				millisLedStartingProcedure = millis;
 80064ae:	4b76      	ldr	r3, [pc, #472]	; (8006688 <dashboardLedControl+0x22c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a74      	ldr	r2, [pc, #464]	; (8006684 <dashboardLedControl+0x228>)
 80064b4:	6013      	str	r3, [r2, #0]
		goto END_OF_FUNCTION;
 80064b6:	e0e0      	b.n	800667a <dashboardLedControl+0x21e>
		else if(millisLedStartingProcedure < 2500)
 80064b8:	4b72      	ldr	r3, [pc, #456]	; (8006684 <dashboardLedControl+0x228>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d80a      	bhi.n	80064da <dashboardLedControl+0x7e>
			millisLedStartingProcedure = millis;
 80064c4:	4b70      	ldr	r3, [pc, #448]	; (8006688 <dashboardLedControl+0x22c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a6e      	ldr	r2, [pc, #440]	; (8006684 <dashboardLedControl+0x228>)
 80064ca:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(_5V_OUT1_GPIO_Port, _5V_OUT1_Pin, 1);
 80064cc:	2201      	movs	r2, #1
 80064ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064d2:	486e      	ldr	r0, [pc, #440]	; (800668c <dashboardLedControl+0x230>)
 80064d4:	f00c f9c0 	bl	8012858 <HAL_GPIO_WritePin>
		goto END_OF_FUNCTION;
 80064d8:	e0cf      	b.n	800667a <dashboardLedControl+0x21e>
			HAL_GPIO_WritePin(_5V_OUT1_GPIO_Port, _5V_OUT1_Pin, 0);
 80064da:	2200      	movs	r2, #0
 80064dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064e0:	486a      	ldr	r0, [pc, #424]	; (800668c <dashboardLedControl+0x230>)
 80064e2:	f00c f9b9 	bl	8012858 <HAL_GPIO_WritePin>
			ledStartingProcedureDone = 1;
 80064e6:	4b66      	ldr	r3, [pc, #408]	; (8006680 <dashboardLedControl+0x224>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	701a      	strb	r2, [r3, #0]
			millisLedStartingProcedure = millis;
 80064ec:	4b66      	ldr	r3, [pc, #408]	; (8006688 <dashboardLedControl+0x22c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a64      	ldr	r2, [pc, #400]	; (8006684 <dashboardLedControl+0x228>)
 80064f2:	6013      	str	r3, [r2, #0]
		goto END_OF_FUNCTION;
 80064f4:	e0c1      	b.n	800667a <dashboardLedControl+0x21e>
	static uint8_t ledAlarmDetected = 0;


	static uint32_t millisLedAlarmActivation = 0;

	if((CAR_Data.waterTemp.floatData > CAR_Data.waterTemp.maxValue && millis - CAR_Data.waterTemp.lastTimeData <= 100)
 80064f6:	4b66      	ldr	r3, [pc, #408]	; (8006690 <dashboardLedControl+0x234>)
 80064f8:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 80064fc:	ed93 7a00 	vldr	s14, [r3]
 8006500:	4b63      	ldr	r3, [pc, #396]	; (8006690 <dashboardLedControl+0x234>)
 8006502:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8006506:	edd3 7a00 	vldr	s15, [r3]
 800650a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800650e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006512:	dd07      	ble.n	8006524 <dashboardLedControl+0xc8>
 8006514:	4b5c      	ldr	r3, [pc, #368]	; (8006688 <dashboardLedControl+0x22c>)
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	4b5d      	ldr	r3, [pc, #372]	; (8006690 <dashboardLedControl+0x234>)
 800651a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	2b64      	cmp	r3, #100	; 0x64
 8006522:	d963      	bls.n	80065ec <dashboardLedControl+0x190>
			|| (CAR_Data.oilTemp.floatData > CAR_Data.oilTemp.maxValue && millis - CAR_Data.oilTemp.lastTimeData <= 100)
 8006524:	4b5a      	ldr	r3, [pc, #360]	; (8006690 <dashboardLedControl+0x234>)
 8006526:	f203 5324 	addw	r3, r3, #1316	; 0x524
 800652a:	ed93 7a00 	vldr	s14, [r3]
 800652e:	4b58      	ldr	r3, [pc, #352]	; (8006690 <dashboardLedControl+0x234>)
 8006530:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 8006534:	edd3 7a00 	vldr	s15, [r3]
 8006538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800653c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006540:	dd07      	ble.n	8006552 <dashboardLedControl+0xf6>
 8006542:	4b51      	ldr	r3, [pc, #324]	; (8006688 <dashboardLedControl+0x22c>)
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	4b52      	ldr	r3, [pc, #328]	; (8006690 <dashboardLedControl+0x234>)
 8006548:	f8d3 3534 	ldr.w	r3, [r3, #1332]	; 0x534
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b64      	cmp	r3, #100	; 0x64
 8006550:	d94c      	bls.n	80065ec <dashboardLedControl+0x190>
			|| ((CAR_Data.oilTemp.floatData < CAR_Data.oilTemp.minValue && CAR_Data.rpm.intData > 1000 && millis - CAR_Data.oilTemp.lastTimeData <= 100))
 8006552:	4b4f      	ldr	r3, [pc, #316]	; (8006690 <dashboardLedControl+0x234>)
 8006554:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8006558:	ed93 7a00 	vldr	s14, [r3]
 800655c:	4b4c      	ldr	r3, [pc, #304]	; (8006690 <dashboardLedControl+0x234>)
 800655e:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8006562:	edd3 7a00 	vldr	s15, [r3]
 8006566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800656a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800656e:	d50d      	bpl.n	800658c <dashboardLedControl+0x130>
 8006570:	4b47      	ldr	r3, [pc, #284]	; (8006690 <dashboardLedControl+0x234>)
 8006572:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8006576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800657a:	dd07      	ble.n	800658c <dashboardLedControl+0x130>
 800657c:	4b42      	ldr	r3, [pc, #264]	; (8006688 <dashboardLedControl+0x22c>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	4b43      	ldr	r3, [pc, #268]	; (8006690 <dashboardLedControl+0x234>)
 8006582:	f8d3 3534 	ldr.w	r3, [r3, #1332]	; 0x534
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b64      	cmp	r3, #100	; 0x64
 800658a:	d92f      	bls.n	80065ec <dashboardLedControl+0x190>
			|| (CAR_Data.oilPressure.floatData > CAR_Data.oilPressure.maxValue && millis - CAR_Data.oilPressure.lastTimeData <= 100)
 800658c:	4b40      	ldr	r3, [pc, #256]	; (8006690 <dashboardLedControl+0x234>)
 800658e:	ed93 7afd 	vldr	s14, [r3, #1012]	; 0x3f4
 8006592:	4b3f      	ldr	r3, [pc, #252]	; (8006690 <dashboardLedControl+0x234>)
 8006594:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006598:	edd3 7a00 	vldr	s15, [r3]
 800659c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a4:	dd07      	ble.n	80065b6 <dashboardLedControl+0x15a>
 80065a6:	4b38      	ldr	r3, [pc, #224]	; (8006688 <dashboardLedControl+0x22c>)
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4b39      	ldr	r3, [pc, #228]	; (8006690 <dashboardLedControl+0x234>)
 80065ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b64      	cmp	r3, #100	; 0x64
 80065b4:	d91a      	bls.n	80065ec <dashboardLedControl+0x190>
			|| ((CAR_Data.oilPressure.floatData < CAR_Data.oilPressure.minValue && CAR_Data.rpm.intData > 1000 && millis - CAR_Data.oilPressure.lastTimeData <= 100))
 80065b6:	4b36      	ldr	r3, [pc, #216]	; (8006690 <dashboardLedControl+0x234>)
 80065b8:	ed93 7afd 	vldr	s14, [r3, #1012]	; 0x3f4
 80065bc:	4b34      	ldr	r3, [pc, #208]	; (8006690 <dashboardLedControl+0x234>)
 80065be:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80065c2:	edd3 7a00 	vldr	s15, [r3]
 80065c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ce:	d519      	bpl.n	8006604 <dashboardLedControl+0x1a8>
 80065d0:	4b2f      	ldr	r3, [pc, #188]	; (8006690 <dashboardLedControl+0x234>)
 80065d2:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80065d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065da:	dd13      	ble.n	8006604 <dashboardLedControl+0x1a8>
 80065dc:	4b2a      	ldr	r3, [pc, #168]	; (8006688 <dashboardLedControl+0x22c>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	4b2b      	ldr	r3, [pc, #172]	; (8006690 <dashboardLedControl+0x234>)
 80065e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	2b64      	cmp	r3, #100	; 0x64
 80065ea:	d80b      	bhi.n	8006604 <dashboardLedControl+0x1a8>
			)
	{
		if(millis - millisLedAlarmActivation >= 500)
 80065ec:	4b26      	ldr	r3, [pc, #152]	; (8006688 <dashboardLedControl+0x22c>)
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	4b28      	ldr	r3, [pc, #160]	; (8006694 <dashboardLedControl+0x238>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80065fa:	d30a      	bcc.n	8006612 <dashboardLedControl+0x1b6>
		{
			ledAlarmDetected = 1;
 80065fc:	4b26      	ldr	r3, [pc, #152]	; (8006698 <dashboardLedControl+0x23c>)
 80065fe:	2201      	movs	r2, #1
 8006600:	701a      	strb	r2, [r3, #0]
		if(millis - millisLedAlarmActivation >= 500)
 8006602:	e006      	b.n	8006612 <dashboardLedControl+0x1b6>
		}
	}
	else
	{
		millisLedAlarmActivation = millis;
 8006604:	4b20      	ldr	r3, [pc, #128]	; (8006688 <dashboardLedControl+0x22c>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a22      	ldr	r2, [pc, #136]	; (8006694 <dashboardLedControl+0x238>)
 800660a:	6013      	str	r3, [r2, #0]
		ledAlarmDetected = 0;
 800660c:	4b22      	ldr	r3, [pc, #136]	; (8006698 <dashboardLedControl+0x23c>)
 800660e:	2200      	movs	r2, #0
 8006610:	701a      	strb	r2, [r3, #0]



	static uint8_t blinkCounter = 0;

	if(ledAlarmDetected != 0)
 8006612:	4b21      	ldr	r3, [pc, #132]	; (8006698 <dashboardLedControl+0x23c>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d025      	beq.n	8006666 <dashboardLedControl+0x20a>
	{
		static uint32_t millisLedAlarmDetected = 0;

		if(millis >= millisLedAlarmDetected + 50 && blinkCounter <= 30)
 800661a:	4b20      	ldr	r3, [pc, #128]	; (800669c <dashboardLedControl+0x240>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006622:	4b19      	ldr	r3, [pc, #100]	; (8006688 <dashboardLedControl+0x22c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	429a      	cmp	r2, r3
 8006628:	d812      	bhi.n	8006650 <dashboardLedControl+0x1f4>
 800662a:	4b1d      	ldr	r3, [pc, #116]	; (80066a0 <dashboardLedControl+0x244>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	2b1e      	cmp	r3, #30
 8006630:	d80e      	bhi.n	8006650 <dashboardLedControl+0x1f4>
		{
			blinkCounter++;
 8006632:	4b1b      	ldr	r3, [pc, #108]	; (80066a0 <dashboardLedControl+0x244>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	3301      	adds	r3, #1
 8006638:	b2da      	uxtb	r2, r3
 800663a:	4b19      	ldr	r3, [pc, #100]	; (80066a0 <dashboardLedControl+0x244>)
 800663c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(_5V_OUT1_GPIO_Port, _5V_OUT1_Pin);
 800663e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006642:	4812      	ldr	r0, [pc, #72]	; (800668c <dashboardLedControl+0x230>)
 8006644:	f00c f921 	bl	801288a <HAL_GPIO_TogglePin>
			millisLedAlarmDetected = millis;
 8006648:	4b0f      	ldr	r3, [pc, #60]	; (8006688 <dashboardLedControl+0x22c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a13      	ldr	r2, [pc, #76]	; (800669c <dashboardLedControl+0x240>)
 800664e:	6013      	str	r3, [r2, #0]
		}

		if(blinkCounter >= 10)
 8006650:	4b13      	ldr	r3, [pc, #76]	; (80066a0 <dashboardLedControl+0x244>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b09      	cmp	r3, #9
 8006656:	d911      	bls.n	800667c <dashboardLedControl+0x220>
			HAL_GPIO_WritePin(_5V_OUT1_GPIO_Port, _5V_OUT1_Pin, 1);
 8006658:	2201      	movs	r2, #1
 800665a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800665e:	480b      	ldr	r0, [pc, #44]	; (800668c <dashboardLedControl+0x230>)
 8006660:	f00c f8fa 	bl	8012858 <HAL_GPIO_WritePin>
		blinkCounter = 0;
		HAL_GPIO_WritePin(_5V_OUT1_GPIO_Port, _5V_OUT1_Pin, 0);
	}

	END_OF_FUNCTION:;
}
 8006664:	e00a      	b.n	800667c <dashboardLedControl+0x220>
		blinkCounter = 0;
 8006666:	4b0e      	ldr	r3, [pc, #56]	; (80066a0 <dashboardLedControl+0x244>)
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(_5V_OUT1_GPIO_Port, _5V_OUT1_Pin, 0);
 800666c:	2200      	movs	r2, #0
 800666e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006672:	4806      	ldr	r0, [pc, #24]	; (800668c <dashboardLedControl+0x230>)
 8006674:	f00c f8f0 	bl	8012858 <HAL_GPIO_WritePin>
}
 8006678:	e000      	b.n	800667c <dashboardLedControl+0x220>
		goto END_OF_FUNCTION;
 800667a:	bf00      	nop
}
 800667c:	bf00      	nop
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20002d98 	.word	0x20002d98
 8006684:	20002d9c 	.word	0x20002d9c
 8006688:	20006a98 	.word	0x20006a98
 800668c:	40020c00 	.word	0x40020c00
 8006690:	2000041c 	.word	0x2000041c
 8006694:	20002da0 	.word	0x20002da0
 8006698:	20002da4 	.word	0x20002da4
 800669c:	20002da8 	.word	0x20002da8
 80066a0:	20002dac 	.word	0x20002dac

080066a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	DisplayGui_Init();
 80066a8:	f000 f949 	bl	800693e <DisplayGui_Init>
  __ASM volatile ("cpsid i" : : : "memory");
 80066ac:	b672      	cpsid	i
}
 80066ae:	bf00      	nop

	__disable_irq(); //Do not remove

	GUI_Clear();
 80066b0:	f017 fbe8 	bl	801de84 <GUI_Clear>
	GUI_SetColor(GUI_RED);
 80066b4:	20ff      	movs	r0, #255	; 0xff
 80066b6:	f016 fb39 	bl	801cd2c <GUI_SetColor>
	GUI_SetFont(&GUI_Font32_1);
 80066ba:	480b      	ldr	r0, [pc, #44]	; (80066e8 <Error_Handler+0x44>)
 80066bc:	f016 fb08 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt("SETUP ERROR!", (480 - 200) / 2, (272 - 20) / 2);
 80066c0:	227e      	movs	r2, #126	; 0x7e
 80066c2:	218c      	movs	r1, #140	; 0x8c
 80066c4:	4809      	ldr	r0, [pc, #36]	; (80066ec <Error_Handler+0x48>)
 80066c6:	f017 fa0f 	bl	801dae8 <GUI_DispStringAt>

	GUI_SetTextAlign(GUI_TA_HCENTER);
 80066ca:	2002      	movs	r0, #2
 80066cc:	f016 faf6 	bl	801ccbc <GUI_SetTextAlign>
	GUI_DispDecAt(Error_Handler_Code, 480 / 2, (272 - 20) / 2 + 32, 3);
 80066d0:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <Error_Handler+0x4c>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	4618      	mov	r0, r3
 80066d6:	2303      	movs	r3, #3
 80066d8:	229e      	movs	r2, #158	; 0x9e
 80066da:	21f0      	movs	r1, #240	; 0xf0
 80066dc:	f016 fa36 	bl	801cb4c <GUI_DispDecAt>

	DisplayON();
 80066e0:	f000 f94e 	bl	8006980 <DisplayON>

	while (1)
 80066e4:	e7fe      	b.n	80066e4 <Error_Handler+0x40>
 80066e6:	bf00      	nop
 80066e8:	081249a8 	.word	0x081249a8
 80066ec:	08022344 	.word	0x08022344
 80066f0:	20001d80 	.word	0x20001d80

080066f4 <readMcuTemperature>:
int32_t MCU_temperature = 0;
float MCU_Temperature = 0;


void readMcuTemperature(void)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af02      	add	r7, sp, #8
	static uint32_t refreshTime = 0;

	if(millis > 100)
 80066fa:	4b3e      	ldr	r3, [pc, #248]	; (80067f4 <readMcuTemperature+0x100>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b64      	cmp	r3, #100	; 0x64
 8006700:	d907      	bls.n	8006712 <readMcuTemperature+0x1e>
	if(millis < refreshTime + MCU_TEMPERATURE_REFRESH_TIME)
 8006702:	4b3d      	ldr	r3, [pc, #244]	; (80067f8 <readMcuTemperature+0x104>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 800670a:	4b3a      	ldr	r3, [pc, #232]	; (80067f4 <readMcuTemperature+0x100>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d86a      	bhi.n	80067e8 <readMcuTemperature+0xf4>
		goto readMcuTemperature_END;

	refreshTime = millis;
 8006712:	4b38      	ldr	r3, [pc, #224]	; (80067f4 <readMcuTemperature+0x100>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a38      	ldr	r2, [pc, #224]	; (80067f8 <readMcuTemperature+0x104>)
 8006718:	6013      	str	r3, [r2, #0]

	/*---readMcuTemperature function core BEGIN---*/
	static uint8_t dataToReadFlag = 0;

	uint32_t sensorValue = 0;
 800671a:	2300      	movs	r3, #0
 800671c:	617b      	str	r3, [r7, #20]

	//float adcCalValue30 = (float)(*TEMP30_CAL_VALUE);
	//float adcCalValue110 = (float)(*TEMP110_CAL_VALUE);

	if(dataToReadFlag == 0)
 800671e:	4b37      	ldr	r3, [pc, #220]	; (80067fc <readMcuTemperature+0x108>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d117      	bne.n	8006756 <readMcuTemperature+0x62>
	{
		ADC_ChannelConfTypeDef sConfig = {0};
 8006726:	1d3b      	adds	r3, r7, #4
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	605a      	str	r2, [r3, #4]
 800672e:	609a      	str	r2, [r3, #8]
 8006730:	60da      	str	r2, [r3, #12]

		sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8006732:	4b33      	ldr	r3, [pc, #204]	; (8006800 <readMcuTemperature+0x10c>)
 8006734:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8006736:	2301      	movs	r3, #1
 8006738:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800673a:	2307      	movs	r3, #7
 800673c:	60fb      	str	r3, [r7, #12]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800673e:	1d3b      	adds	r3, r7, #4
 8006740:	4619      	mov	r1, r3
 8006742:	4830      	ldr	r0, [pc, #192]	; (8006804 <readMcuTemperature+0x110>)
 8006744:	f00a fa06 	bl	8010b54 <HAL_ADC_ConfigChannel>

		HAL_ADC_Start(&hadc1);
 8006748:	482e      	ldr	r0, [pc, #184]	; (8006804 <readMcuTemperature+0x110>)
 800674a:	f00a f869 	bl	8010820 <HAL_ADC_Start>
		dataToReadFlag = 1;
 800674e:	4b2b      	ldr	r3, [pc, #172]	; (80067fc <readMcuTemperature+0x108>)
 8006750:	2201      	movs	r2, #1
 8006752:	701a      	strb	r2, [r3, #0]

	/*---readMcuTemperature function core END---*/


	readMcuTemperature_END:;
}
 8006754:	e049      	b.n	80067ea <readMcuTemperature+0xf6>
		if(HAL_ADC_PollForConversion(&hadc1, 0) == HAL_OK)
 8006756:	2100      	movs	r1, #0
 8006758:	482a      	ldr	r0, [pc, #168]	; (8006804 <readMcuTemperature+0x110>)
 800675a:	f00a f963 	bl	8010a24 <HAL_ADC_PollForConversion>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d13d      	bne.n	80067e0 <readMcuTemperature+0xec>
			sensorValue = HAL_ADC_GetValue(&hadc1);
 8006764:	4827      	ldr	r0, [pc, #156]	; (8006804 <readMcuTemperature+0x110>)
 8006766:	f00a f9e8 	bl	8010b3a <HAL_ADC_GetValue>
 800676a:	6178      	str	r0, [r7, #20]
			HAL_ADC_Stop(&hadc1);
 800676c:	4825      	ldr	r0, [pc, #148]	; (8006804 <readMcuTemperature+0x110>)
 800676e:	f00a f925 	bl	80109bc <HAL_ADC_Stop>
			dataToReadFlag = 0;
 8006772:	4b22      	ldr	r3, [pc, #136]	; (80067fc <readMcuTemperature+0x108>)
 8006774:	2200      	movs	r2, #0
 8006776:	701a      	strb	r2, [r3, #0]
			sensorValue = map_int32(sensorValue, 0, ADC_MAX_OUTPUT_VALUE, 0, ADC_REFERENCE_VOLTAGE_MV);
 8006778:	6978      	ldr	r0, [r7, #20]
 800677a:	f640 43e4 	movw	r3, #3300	; 0xce4
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	2300      	movs	r3, #0
 8006782:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006786:	2100      	movs	r1, #0
 8006788:	f00e f89b 	bl	80148c2 <map_int32>
 800678c:	4603      	mov	r3, r0
 800678e:	617b      	str	r3, [r7, #20]
			MCU_temperature = ((sensorValue - TEMP_SENSOR_VOLTAGE_MV_AT_25)*10)/TEMP_SENSOR_AVG_SLOPE_MV_PER_CELSIUS + 25;
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	4613      	mov	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	461a      	mov	r2, r3
 800679c:	4b1a      	ldr	r3, [pc, #104]	; (8006808 <readMcuTemperature+0x114>)
 800679e:	4413      	add	r3, r2
 80067a0:	4a1a      	ldr	r2, [pc, #104]	; (800680c <readMcuTemperature+0x118>)
 80067a2:	fba2 2303 	umull	r2, r3, r2, r3
 80067a6:	08db      	lsrs	r3, r3, #3
 80067a8:	3319      	adds	r3, #25
 80067aa:	461a      	mov	r2, r3
 80067ac:	4b18      	ldr	r3, [pc, #96]	; (8006810 <readMcuTemperature+0x11c>)
 80067ae:	601a      	str	r2, [r3, #0]
			MCU_Temperature = ((float)((sensorValue - TEMP_SENSOR_VOLTAGE_MV_AT_25)*10))/((float)(TEMP_SENSOR_AVG_SLOPE_MV_PER_CELSIUS)) + 25;
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	4613      	mov	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	461a      	mov	r2, r3
 80067bc:	4b12      	ldr	r3, [pc, #72]	; (8006808 <readMcuTemperature+0x114>)
 80067be:	4413      	add	r3, r2
 80067c0:	ee07 3a90 	vmov	s15, r3
 80067c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067c8:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80067cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067d0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80067d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067d8:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <readMcuTemperature+0x120>)
 80067da:	edc3 7a00 	vstr	s15, [r3]
}
 80067de:	e004      	b.n	80067ea <readMcuTemperature+0xf6>
			dataToReadFlag = 2;
 80067e0:	4b06      	ldr	r3, [pc, #24]	; (80067fc <readMcuTemperature+0x108>)
 80067e2:	2202      	movs	r2, #2
 80067e4:	701a      	strb	r2, [r3, #0]
}
 80067e6:	e000      	b.n	80067ea <readMcuTemperature+0xf6>
		goto readMcuTemperature_END;
 80067e8:	bf00      	nop
}
 80067ea:	bf00      	nop
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20006a98 	.word	0x20006a98
 80067f8:	20002db8 	.word	0x20002db8
 80067fc:	20002dbc 	.word	0x20002dbc
 8006800:	10000012 	.word	0x10000012
 8006804:	20001b28 	.word	0x20001b28
 8006808:	ffffe250 	.word	0xffffe250
 800680c:	51eb851f 	.word	0x51eb851f
 8006810:	20002db0 	.word	0x20002db0
 8006814:	20002db4 	.word	0x20002db4

08006818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800681e:	4b0f      	ldr	r3, [pc, #60]	; (800685c <HAL_MspInit+0x44>)
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	4a0e      	ldr	r2, [pc, #56]	; (800685c <HAL_MspInit+0x44>)
 8006824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006828:	6413      	str	r3, [r2, #64]	; 0x40
 800682a:	4b0c      	ldr	r3, [pc, #48]	; (800685c <HAL_MspInit+0x44>)
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006832:	607b      	str	r3, [r7, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006836:	4b09      	ldr	r3, [pc, #36]	; (800685c <HAL_MspInit+0x44>)
 8006838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683a:	4a08      	ldr	r2, [pc, #32]	; (800685c <HAL_MspInit+0x44>)
 800683c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006840:	6453      	str	r3, [r2, #68]	; 0x44
 8006842:	4b06      	ldr	r3, [pc, #24]	; (800685c <HAL_MspInit+0x44>)
 8006844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800684a:	603b      	str	r3, [r7, #0]
 800684c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	40023800 	.word	0x40023800

08006860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006864:	e7fe      	b.n	8006864 <NMI_Handler+0x4>

08006866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006866:	b480      	push	{r7}
 8006868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800686a:	e7fe      	b.n	800686a <HardFault_Handler+0x4>

0800686c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006870:	e7fe      	b.n	8006870 <MemManage_Handler+0x4>

08006872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006872:	b480      	push	{r7}
 8006874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006876:	e7fe      	b.n	8006876 <BusFault_Handler+0x4>

08006878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006878:	b480      	push	{r7}
 800687a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800687c:	e7fe      	b.n	800687c <UsageFault_Handler+0x4>

0800687e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800687e:	b480      	push	{r7}
 8006880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006882:	bf00      	nop
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800688c:	b480      	push	{r7}
 800688e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006890:	bf00      	nop
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800689a:	b480      	push	{r7}
 800689c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800689e:	bf00      	nop
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068ac:	f009 ff30 	bl	8010710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068b0:	bf00      	nop
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80068b8:	4802      	ldr	r0, [pc, #8]	; (80068c4 <CAN1_RX0_IRQHandler+0x10>)
 80068ba:	f00a ffd0 	bl	801185e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80068be:	bf00      	nop
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20001bb8 	.word	0x20001bb8

080068c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80068cc:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <SystemInit+0x20>)
 80068ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d2:	4a05      	ldr	r2, [pc, #20]	; (80068e8 <SystemInit+0x20>)
 80068d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80068dc:	bf00      	nop
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	e000ed00 	.word	0xe000ed00

080068ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80068ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006924 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80068f0:	480d      	ldr	r0, [pc, #52]	; (8006928 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80068f2:	490e      	ldr	r1, [pc, #56]	; (800692c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80068f4:	4a0e      	ldr	r2, [pc, #56]	; (8006930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80068f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80068f8:	e002      	b.n	8006900 <LoopCopyDataInit>

080068fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80068fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80068fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80068fe:	3304      	adds	r3, #4

08006900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006904:	d3f9      	bcc.n	80068fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006906:	4a0b      	ldr	r2, [pc, #44]	; (8006934 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006908:	4c0b      	ldr	r4, [pc, #44]	; (8006938 <LoopFillZerobss+0x26>)
  movs r3, #0
 800690a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800690c:	e001      	b.n	8006912 <LoopFillZerobss>

0800690e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800690e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006910:	3204      	adds	r2, #4

08006912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006914:	d3fb      	bcc.n	800690e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006916:	f7ff ffd7 	bl	80068c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800691a:	f01b f94f 	bl	8021bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800691e:	f7ff fa21 	bl	8005d64 <main>
  bx  lr    
 8006922:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006924:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8006928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800692c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8006930:	081326d0 	.word	0x081326d0
  ldr r2, =_sbss
 8006934:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8006938:	2002c6d4 	.word	0x2002c6d4

0800693c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800693c:	e7fe      	b.n	800693c <ADC_IRQHandler>

0800693e <DisplayGui_Init>:
#define FPS_REFRESH_TIME	100
float FPS = 0;


void DisplayGui_Init(void)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	af00      	add	r7, sp, #0
	//DisplayOFF();
	GUI_Init();
 8006942:	f017 fad9 	bl	801def8 <GUI_Init>
	GUI_SetColor(GUI_BLACK);
 8006946:	2000      	movs	r0, #0
 8006948:	f016 f9f0 	bl	801cd2c <GUI_SetColor>
	GUI_SetBkColor(GUI_BLACK);
 800694c:	2000      	movs	r0, #0
 800694e:	f016 f9eb 	bl	801cd28 <GUI_SetBkColor>
	GUI_Clear();
 8006952:	f017 fa97 	bl	801de84 <GUI_Clear>

	MDM_LCD_SetLayerVisible(0, ENABLE);
 8006956:	2101      	movs	r1, #1
 8006958:	2000      	movs	r0, #0
 800695a:	f7fe fecd 	bl	80056f8 <MDM_LCD_SetLayerVisible>
	//DisplayON();

	CAR_DATA_GuiAlarm_Init();
 800695e:	f7fc fe73 	bl	8003648 <CAR_DATA_GuiAlarm_Init>
}
 8006962:	bf00      	nop
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <DisplayOFF>:

void DisplayOFF(void)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, 0);
 800696c:	2200      	movs	r2, #0
 800696e:	2180      	movs	r1, #128	; 0x80
 8006970:	4802      	ldr	r0, [pc, #8]	; (800697c <DisplayOFF+0x14>)
 8006972:	f00b ff71 	bl	8012858 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, 0);
}
 8006976:	bf00      	nop
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	40021400 	.word	0x40021400

08006980 <DisplayON>:

void DisplayON(void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, 1);
 8006984:	2201      	movs	r2, #1
 8006986:	2180      	movs	r1, #128	; 0x80
 8006988:	4802      	ldr	r0, [pc, #8]	; (8006994 <DisplayON+0x14>)
 800698a:	f00b ff65 	bl	8012858 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, 1);
}
 800698e:	bf00      	nop
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	40021400 	.word	0x40021400

08006998 <DisplayGui>:


void DisplayGui(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
	CAN_Data_AlarmDetection();
 800699c:	f7fc ff82 	bl	80038a4 <CAN_Data_AlarmDetection>

	//gui startup logo BEGIN

	if(logoStartupDoneFlag == 0 && millis <= logoStartupTime + 100 && selectedGui != GuiAlarm && DEBUG_MODE == 0 && DEBUG_ON_CAR == 0)
 80069a0:	4bb8      	ldr	r3, [pc, #736]	; (8006c84 <DisplayGui+0x2ec>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d128      	bne.n	80069fa <DisplayGui+0x62>
 80069a8:	4bb7      	ldr	r3, [pc, #732]	; (8006c88 <DisplayGui+0x2f0>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f640 0234 	movw	r2, #2100	; 0x834
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d822      	bhi.n	80069fa <DisplayGui+0x62>
 80069b4:	4bb5      	ldr	r3, [pc, #724]	; (8006c8c <DisplayGui+0x2f4>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2bfe      	cmp	r3, #254	; 0xfe
 80069ba:	d01e      	beq.n	80069fa <DisplayGui+0x62>
	{
		if(
					CAR_Data.canLastReceiveTime == 0	||
 80069bc:	4bb4      	ldr	r3, [pc, #720]	; (8006c90 <DisplayGui+0x2f8>)
 80069be:	681b      	ldr	r3, [r3, #0]
		if(
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d012      	beq.n	80069ea <DisplayGui+0x52>
					(
							CAR_Data.speed.intData < 5 			&&
 80069c4:	4bb2      	ldr	r3, [pc, #712]	; (8006c90 <DisplayGui+0x2f8>)
 80069c6:	69db      	ldr	r3, [r3, #28]
					CAR_Data.canLastReceiveTime == 0	||
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	dc12      	bgt.n	80069f2 <DisplayGui+0x5a>
							CAR_Data.rpm.intData < 50 			&&
 80069cc:	4bb0      	ldr	r3, [pc, #704]	; (8006c90 <DisplayGui+0x2f8>)
 80069ce:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
							CAR_Data.speed.intData < 5 			&&
 80069d2:	2b31      	cmp	r3, #49	; 0x31
 80069d4:	dc0d      	bgt.n	80069f2 <DisplayGui+0x5a>
							CAR_Data.waterTemp.intData < 105	&&
 80069d6:	4bae      	ldr	r3, [pc, #696]	; (8006c90 <DisplayGui+0x2f8>)
 80069d8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	; 0x4dc
							CAR_Data.rpm.intData < 50 			&&
 80069dc:	2b68      	cmp	r3, #104	; 0x68
 80069de:	dc08      	bgt.n	80069f2 <DisplayGui+0x5a>
							CAR_Data.oilTemp.intData < 100
 80069e0:	4bab      	ldr	r3, [pc, #684]	; (8006c90 <DisplayGui+0x2f8>)
 80069e2:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
							CAR_Data.waterTemp.intData < 105	&&
 80069e6:	2b63      	cmp	r3, #99	; 0x63
 80069e8:	dc03      	bgt.n	80069f2 <DisplayGui+0x5a>
					)
				)
		{
			selectedGui = GuiLogo;
 80069ea:	4ba8      	ldr	r3, [pc, #672]	; (8006c8c <DisplayGui+0x2f4>)
 80069ec:	2263      	movs	r2, #99	; 0x63
 80069ee:	701a      	strb	r2, [r3, #0]
		if(
 80069f0:	e006      	b.n	8006a00 <DisplayGui+0x68>
		}
		else
			logoStartupDoneFlag = 1;
 80069f2:	4ba4      	ldr	r3, [pc, #656]	; (8006c84 <DisplayGui+0x2ec>)
 80069f4:	2201      	movs	r2, #1
 80069f6:	701a      	strb	r2, [r3, #0]
		if(
 80069f8:	e002      	b.n	8006a00 <DisplayGui+0x68>
	}
	else
		logoStartupDoneFlag = 1;
 80069fa:	4ba2      	ldr	r3, [pc, #648]	; (8006c84 <DisplayGui+0x2ec>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	701a      	strb	r2, [r3, #0]
	//gui startup logo END

	static uint32_t refreshTime = 0;
	static uint32_t clearTime = 0;

	if(selectedGui != selectedGui_old)
 8006a00:	4ba2      	ldr	r3, [pc, #648]	; (8006c8c <DisplayGui+0x2f4>)
 8006a02:	781a      	ldrb	r2, [r3, #0]
 8006a04:	4ba3      	ldr	r3, [pc, #652]	; (8006c94 <DisplayGui+0x2fc>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d00d      	beq.n	8006a28 <DisplayGui+0x90>
	{
		GUI_Clear();
 8006a0c:	f017 fa3a 	bl	801de84 <GUI_Clear>
		GUI_SetPenSize(1);
 8006a10:	2001      	movs	r0, #1
 8006a12:	f016 fa01 	bl	801ce18 <GUI_SetPenSize>

		refreshTime = millis;
 8006a16:	4b9c      	ldr	r3, [pc, #624]	; (8006c88 <DisplayGui+0x2f0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a9f      	ldr	r2, [pc, #636]	; (8006c98 <DisplayGui+0x300>)
 8006a1c:	6013      	str	r3, [r2, #0]
		clearTime = millis;
 8006a1e:	4b9a      	ldr	r3, [pc, #616]	; (8006c88 <DisplayGui+0x2f0>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a9e      	ldr	r2, [pc, #632]	; (8006c9c <DisplayGui+0x304>)
 8006a24:	6013      	str	r3, [r2, #0]

		goto DisplayGui_BEGIN;
 8006a26:	e025      	b.n	8006a74 <DisplayGui+0xdc>
	}

	//gui refresh rate control BEGIN

	if(millis < refreshTime + DISPLAY_GUI_REFRESH_TIME)
 8006a28:	4b9b      	ldr	r3, [pc, #620]	; (8006c98 <DisplayGui+0x300>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f103 0210 	add.w	r2, r3, #16
 8006a30:	4b95      	ldr	r3, [pc, #596]	; (8006c88 <DisplayGui+0x2f0>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	f200 818b 	bhi.w	8006d50 <DisplayGui+0x3b8>
		goto DisplayGui_END;

	refreshTime = millis;
 8006a3a:	4b93      	ldr	r3, [pc, #588]	; (8006c88 <DisplayGui+0x2f0>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a96      	ldr	r2, [pc, #600]	; (8006c98 <DisplayGui+0x300>)
 8006a40:	6013      	str	r3, [r2, #0]

	//gui refresh rate control END

	//gui clear rate control BEGIN

	if(millis < clearTime + DISPLAY_GUI_CLEAR_TIME)
 8006a42:	4b96      	ldr	r3, [pc, #600]	; (8006c9c <DisplayGui+0x304>)
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	f242 7310 	movw	r3, #10000	; 0x2710
 8006a4a:	4413      	add	r3, r2
 8006a4c:	4a8e      	ldr	r2, [pc, #568]	; (8006c88 <DisplayGui+0x2f0>)
 8006a4e:	6812      	ldr	r2, [r2, #0]
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d80c      	bhi.n	8006a6e <DisplayGui+0xd6>
		goto DisplayGui_BEGIN;

	if(selectedGui != GuiSponsor
 8006a54:	4b8d      	ldr	r3, [pc, #564]	; (8006c8c <DisplayGui+0x2f4>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b5a      	cmp	r3, #90	; 0x5a
 8006a5a:	d00a      	beq.n	8006a72 <DisplayGui+0xda>
		&& selectedGui != GuiLogo)
 8006a5c:	4b8b      	ldr	r3, [pc, #556]	; (8006c8c <DisplayGui+0x2f4>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b63      	cmp	r3, #99	; 0x63
 8006a62:	d006      	beq.n	8006a72 <DisplayGui+0xda>
	{
		//GUI_Clear();
		clearTime = millis;
 8006a64:	4b88      	ldr	r3, [pc, #544]	; (8006c88 <DisplayGui+0x2f0>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a8c      	ldr	r2, [pc, #560]	; (8006c9c <DisplayGui+0x304>)
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	e002      	b.n	8006a74 <DisplayGui+0xdc>
		goto DisplayGui_BEGIN;
 8006a6e:	bf00      	nop
 8006a70:	e000      	b.n	8006a74 <DisplayGui+0xdc>
	}


	//gui clear rate control END

	DisplayGui_BEGIN:
 8006a72:	bf00      	nop

	if(selectedGui != GuiAlarm)
 8006a74:	4b85      	ldr	r3, [pc, #532]	; (8006c8c <DisplayGui+0x2f4>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2bfe      	cmp	r3, #254	; 0xfe
 8006a7a:	d002      	beq.n	8006a82 <DisplayGui+0xea>
		alarmPageDisplayRefreshEnable = 1;
 8006a7c:	4b88      	ldr	r3, [pc, #544]	; (8006ca0 <DisplayGui+0x308>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	701a      	strb	r2, [r3, #0]

	/*---DisplayGui function core BEGIN---*/

	switch(selectedGui)
 8006a82:	4b82      	ldr	r3, [pc, #520]	; (8006c8c <DisplayGui+0x2f4>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b63      	cmp	r3, #99	; 0x63
 8006a88:	f300 80cc 	bgt.w	8006c24 <DisplayGui+0x28c>
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	f2c0 80f1 	blt.w	8006c74 <DisplayGui+0x2dc>
 8006a92:	3b03      	subs	r3, #3
 8006a94:	2b60      	cmp	r3, #96	; 0x60
 8006a96:	f200 80ed 	bhi.w	8006c74 <DisplayGui+0x2dc>
 8006a9a:	a201      	add	r2, pc, #4	; (adr r2, 8006aa0 <DisplayGui+0x108>)
 8006a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa0:	08006c37 	.word	0x08006c37
 8006aa4:	08006c3d 	.word	0x08006c3d
 8006aa8:	08006c75 	.word	0x08006c75
 8006aac:	08006c75 	.word	0x08006c75
 8006ab0:	08006c75 	.word	0x08006c75
 8006ab4:	08006c75 	.word	0x08006c75
 8006ab8:	08006c75 	.word	0x08006c75
 8006abc:	08006c75 	.word	0x08006c75
 8006ac0:	08006c43 	.word	0x08006c43
 8006ac4:	08006c49 	.word	0x08006c49
 8006ac8:	08006c75 	.word	0x08006c75
 8006acc:	08006c75 	.word	0x08006c75
 8006ad0:	08006c75 	.word	0x08006c75
 8006ad4:	08006c75 	.word	0x08006c75
 8006ad8:	08006c75 	.word	0x08006c75
 8006adc:	08006c75 	.word	0x08006c75
 8006ae0:	08006c2b 	.word	0x08006c2b
 8006ae4:	08006c75 	.word	0x08006c75
 8006ae8:	08006c4f 	.word	0x08006c4f
 8006aec:	08006c55 	.word	0x08006c55
 8006af0:	08006c75 	.word	0x08006c75
 8006af4:	08006c75 	.word	0x08006c75
 8006af8:	08006c75 	.word	0x08006c75
 8006afc:	08006c75 	.word	0x08006c75
 8006b00:	08006c75 	.word	0x08006c75
 8006b04:	08006c75 	.word	0x08006c75
 8006b08:	08006c75 	.word	0x08006c75
 8006b0c:	08006c75 	.word	0x08006c75
 8006b10:	08006c5b 	.word	0x08006c5b
 8006b14:	08006c75 	.word	0x08006c75
 8006b18:	08006c75 	.word	0x08006c75
 8006b1c:	08006c75 	.word	0x08006c75
 8006b20:	08006c75 	.word	0x08006c75
 8006b24:	08006c75 	.word	0x08006c75
 8006b28:	08006c75 	.word	0x08006c75
 8006b2c:	08006c75 	.word	0x08006c75
 8006b30:	08006c75 	.word	0x08006c75
 8006b34:	08006c75 	.word	0x08006c75
 8006b38:	08006c61 	.word	0x08006c61
 8006b3c:	08006c75 	.word	0x08006c75
 8006b40:	08006c75 	.word	0x08006c75
 8006b44:	08006c75 	.word	0x08006c75
 8006b48:	08006c75 	.word	0x08006c75
 8006b4c:	08006c75 	.word	0x08006c75
 8006b50:	08006c75 	.word	0x08006c75
 8006b54:	08006c75 	.word	0x08006c75
 8006b58:	08006c75 	.word	0x08006c75
 8006b5c:	08006c75 	.word	0x08006c75
 8006b60:	08006c67 	.word	0x08006c67
 8006b64:	08006c75 	.word	0x08006c75
 8006b68:	08006c75 	.word	0x08006c75
 8006b6c:	08006c75 	.word	0x08006c75
 8006b70:	08006c75 	.word	0x08006c75
 8006b74:	08006c75 	.word	0x08006c75
 8006b78:	08006c75 	.word	0x08006c75
 8006b7c:	08006c75 	.word	0x08006c75
 8006b80:	08006c75 	.word	0x08006c75
 8006b84:	08006c75 	.word	0x08006c75
 8006b88:	08006c75 	.word	0x08006c75
 8006b8c:	08006c75 	.word	0x08006c75
 8006b90:	08006c75 	.word	0x08006c75
 8006b94:	08006c75 	.word	0x08006c75
 8006b98:	08006c75 	.word	0x08006c75
 8006b9c:	08006c75 	.word	0x08006c75
 8006ba0:	08006c75 	.word	0x08006c75
 8006ba4:	08006c75 	.word	0x08006c75
 8006ba8:	08006c75 	.word	0x08006c75
 8006bac:	08006c75 	.word	0x08006c75
 8006bb0:	08006c75 	.word	0x08006c75
 8006bb4:	08006c75 	.word	0x08006c75
 8006bb8:	08006c75 	.word	0x08006c75
 8006bbc:	08006c75 	.word	0x08006c75
 8006bc0:	08006c75 	.word	0x08006c75
 8006bc4:	08006c75 	.word	0x08006c75
 8006bc8:	08006c75 	.word	0x08006c75
 8006bcc:	08006c75 	.word	0x08006c75
 8006bd0:	08006c75 	.word	0x08006c75
 8006bd4:	08006c75 	.word	0x08006c75
 8006bd8:	08006c75 	.word	0x08006c75
 8006bdc:	08006c75 	.word	0x08006c75
 8006be0:	08006c75 	.word	0x08006c75
 8006be4:	08006c75 	.word	0x08006c75
 8006be8:	08006c75 	.word	0x08006c75
 8006bec:	08006c75 	.word	0x08006c75
 8006bf0:	08006c75 	.word	0x08006c75
 8006bf4:	08006ca5 	.word	0x08006ca5
 8006bf8:	08006c75 	.word	0x08006c75
 8006bfc:	08006ca5 	.word	0x08006ca5
 8006c00:	08006c75 	.word	0x08006c75
 8006c04:	08006c75 	.word	0x08006c75
 8006c08:	08006c75 	.word	0x08006c75
 8006c0c:	08006c75 	.word	0x08006c75
 8006c10:	08006c75 	.word	0x08006c75
 8006c14:	08006c75 	.word	0x08006c75
 8006c18:	08006c75 	.word	0x08006c75
 8006c1c:	08006c75 	.word	0x08006c75
 8006c20:	08006c31 	.word	0x08006c31
 8006c24:	2bfe      	cmp	r3, #254	; 0xfe
 8006c26:	d021      	beq.n	8006c6c <DisplayGui+0x2d4>
 8006c28:	e024      	b.n	8006c74 <DisplayGui+0x2dc>
	{

		case DisplayGui_Debug_INDEX:
			DisplayGui_Debug();
 8006c2a:	f001 fa9d 	bl	8008168 <DisplayGui_Debug>
			break;
 8006c2e:	e03a      	b.n	8006ca6 <DisplayGui+0x30e>

		case GuiLogo:
			if(DEBUG_MODE == DISABLE || DEBUG_ON_CAR == DISABLE)
				DisplayGui_Logo();
 8006c30:	f002 f8fc 	bl	8008e2c <DisplayGui_Logo>
			break;
 8006c34:	e037      	b.n	8006ca6 <DisplayGui+0x30e>

		case GuiAcceleration:
			DisplayGui_Acceleration();
 8006c36:	f000 f8a7 	bl	8006d88 <DisplayGui_Acceleration>
			break;
 8006c3a:	e034      	b.n	8006ca6 <DisplayGui+0x30e>

		case GuiTestDrive:
			DisplayGui_TestDrive();
 8006c3c:	f005 fbe6 	bl	800c40c <DisplayGui_TestDrive>
			break;
 8006c40:	e031      	b.n	8006ca6 <DisplayGui+0x30e>

		case GuiOld1:
			DisplayGui_Old1();
 8006c42:	f002 f919 	bl	8008e78 <DisplayGui_Old1>
			break;
 8006c46:	e02e      	b.n	8006ca6 <DisplayGui+0x30e>

		case GuiOld2:
			DisplayGui_Old2();
 8006c48:	f003 f96e 	bl	8009f28 <DisplayGui_Old2>
			break;
 8006c4c:	e02b      	b.n	8006ca6 <DisplayGui+0x30e>

		case GuiDrive1:
			DisplayGui_Drive1();
 8006c4e:	f001 fb17 	bl	8008280 <DisplayGui_Drive1>
			break;
 8006c52:	e028      	b.n	8006ca6 <DisplayGui+0x30e>

		case GuiDrive2:
			DisplayGui_Drive2();
 8006c54:	f001 fc8a 	bl	800856c <DisplayGui_Drive2>
			break;
 8006c58:	e025      	b.n	8006ca6 <DisplayGui+0x30e>

		case GuiHandlingCurvesTest:
			DisplayGui_HandlingCurvesTest();
 8006c5a:	f001 fe17 	bl	800888c <DisplayGui_HandlingCurvesTest>
			break;
 8006c5e:	e022      	b.n	8006ca6 <DisplayGui+0x30e>

		case DisplayGui_PowertrainData1_INDEX:
			DisplayGui_PowertrainData1();
 8006c60:	f004 f94e 	bl	800af00 <DisplayGui_PowertrainData1>
			break;
 8006c64:	e01f      	b.n	8006ca6 <DisplayGui+0x30e>

		case GuiCarSetup:
			DisplayGui_CarSetup();
 8006c66:	f000 ffeb 	bl	8007c40 <DisplayGui_CarSetup>
			break;
 8006c6a:	e01c      	b.n	8006ca6 <DisplayGui+0x30e>
			break;



		case GuiAlarm:
			alarmPageDisplayRefreshEnable = 1;
 8006c6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <DisplayGui+0x308>)
 8006c6e:	2201      	movs	r2, #1
 8006c70:	701a      	strb	r2, [r3, #0]
			break;
 8006c72:	e018      	b.n	8006ca6 <DisplayGui+0x30e>

		default:
			Error_Handler();
 8006c74:	f7ff fd16 	bl	80066a4 <Error_Handler>
			selectedGui = GuiDrive1;
 8006c78:	4b04      	ldr	r3, [pc, #16]	; (8006c8c <DisplayGui+0x2f4>)
 8006c7a:	2215      	movs	r2, #21
 8006c7c:	701a      	strb	r2, [r3, #0]
			DisplayGui_Drive1();
 8006c7e:	f001 faff 	bl	8008280 <DisplayGui_Drive1>
 8006c82:	e010      	b.n	8006ca6 <DisplayGui+0x30e>
 8006c84:	20002dbd 	.word	0x20002dbd
 8006c88:	20006a98 	.word	0x20006a98
 8006c8c:	20002dbe 	.word	0x20002dbe
 8006c90:	2000041c 	.word	0x2000041c
 8006c94:	20000044 	.word	0x20000044
 8006c98:	20002dc4 	.word	0x20002dc4
 8006c9c:	20002dc8 	.word	0x20002dc8
 8006ca0:	20000000 	.word	0x20000000
			break;
 8006ca4:	bf00      	nop

	}

	GUI_SetColor(GUI_WHITE);
 8006ca6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006caa:	f016 f83f 	bl	801cd2c <GUI_SetColor>
	GUI_SetBkColor(GUI_BLACK);
 8006cae:	2000      	movs	r0, #0
 8006cb0:	f016 f83a 	bl	801cd28 <GUI_SetBkColor>
	GUI_Exec();
 8006cb4:	f016 f980 	bl	801cfb8 <GUI_Exec>

	/*---DisplayGui function core END---*/

	selectedGui_old = selectedGui;
 8006cb8:	4b2b      	ldr	r3, [pc, #172]	; (8006d68 <DisplayGui+0x3d0>)
 8006cba:	781a      	ldrb	r2, [r3, #0]
 8006cbc:	4b2b      	ldr	r3, [pc, #172]	; (8006d6c <DisplayGui+0x3d4>)
 8006cbe:	701a      	strb	r2, [r3, #0]


	static uint8_t pointsToggle = 1;
	static uint32_t pointsToggleMillis = 0;

	if(millis >= pointsToggleMillis + 500)
 8006cc0:	4b2b      	ldr	r3, [pc, #172]	; (8006d70 <DisplayGui+0x3d8>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8006cc8:	4b2a      	ldr	r3, [pc, #168]	; (8006d74 <DisplayGui+0x3dc>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d80d      	bhi.n	8006cec <DisplayGui+0x354>
	{
		pointsToggleMillis = millis;
 8006cd0:	4b28      	ldr	r3, [pc, #160]	; (8006d74 <DisplayGui+0x3dc>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a26      	ldr	r2, [pc, #152]	; (8006d70 <DisplayGui+0x3d8>)
 8006cd6:	6013      	str	r3, [r2, #0]
		pointsToggle = !pointsToggle;
 8006cd8:	4b27      	ldr	r3, [pc, #156]	; (8006d78 <DisplayGui+0x3e0>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	bf0c      	ite	eq
 8006ce0:	2301      	moveq	r3, #1
 8006ce2:	2300      	movne	r3, #0
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	4b23      	ldr	r3, [pc, #140]	; (8006d78 <DisplayGui+0x3e0>)
 8006cea:	701a      	strb	r2, [r3, #0]


	static uint32_t millisFpsCounter = 0;
	static uint16_t displayFpsCounter = 0;

	displayFpsCounter++;
 8006cec:	4b23      	ldr	r3, [pc, #140]	; (8006d7c <DisplayGui+0x3e4>)
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	4b21      	ldr	r3, [pc, #132]	; (8006d7c <DisplayGui+0x3e4>)
 8006cf6:	801a      	strh	r2, [r3, #0]

	if(millis >= millisFpsCounter + FPS_REFRESH_TIME)
 8006cf8:	4b21      	ldr	r3, [pc, #132]	; (8006d80 <DisplayGui+0x3e8>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8006d00:	4b1c      	ldr	r3, [pc, #112]	; (8006d74 <DisplayGui+0x3dc>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d825      	bhi.n	8006d54 <DisplayGui+0x3bc>
	{
		FPS = (float)displayFpsCounter*(1000.0/(millis - millisFpsCounter));
 8006d08:	4b1c      	ldr	r3, [pc, #112]	; (8006d7c <DisplayGui+0x3e4>)
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	ee07 3a90 	vmov	s15, r3
 8006d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d14:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8006d18:	4b16      	ldr	r3, [pc, #88]	; (8006d74 <DisplayGui+0x3dc>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	4b18      	ldr	r3, [pc, #96]	; (8006d80 <DisplayGui+0x3e8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	ee07 3a90 	vmov	s15, r3
 8006d26:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8006d2a:	ed9f 4b0d 	vldr	d4, [pc, #52]	; 8006d60 <DisplayGui+0x3c8>
 8006d2e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8006d32:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006d36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006d3a:	4b12      	ldr	r3, [pc, #72]	; (8006d84 <DisplayGui+0x3ec>)
 8006d3c:	edc3 7a00 	vstr	s15, [r3]
		displayFpsCounter = 0;
 8006d40:	4b0e      	ldr	r3, [pc, #56]	; (8006d7c <DisplayGui+0x3e4>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	801a      	strh	r2, [r3, #0]
		millisFpsCounter = millis;
 8006d46:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <DisplayGui+0x3dc>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a0d      	ldr	r2, [pc, #52]	; (8006d80 <DisplayGui+0x3e8>)
 8006d4c:	6013      	str	r3, [r2, #0]

			GUI_FillCircle(7, 			272 - 7, 2);
			GUI_FillCircle(480 - 7, 	272 - 7, 2);
		}
	}
}
 8006d4e:	e002      	b.n	8006d56 <DisplayGui+0x3be>
		goto DisplayGui_END;
 8006d50:	bf00      	nop
 8006d52:	e000      	b.n	8006d56 <DisplayGui+0x3be>
	DisplayGui_END:;
 8006d54:	bf00      	nop
}
 8006d56:	bf00      	nop
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	f3af 8000 	nop.w
 8006d60:	00000000 	.word	0x00000000
 8006d64:	408f4000 	.word	0x408f4000
 8006d68:	20002dbe 	.word	0x20002dbe
 8006d6c:	20000044 	.word	0x20000044
 8006d70:	20002dcc 	.word	0x20002dcc
 8006d74:	20006a98 	.word	0x20006a98
 8006d78:	20000045 	.word	0x20000045
 8006d7c:	20002dd0 	.word	0x20002dd0
 8006d80:	20002dd4 	.word	0x20002dd4
 8006d84:	20002dc0 	.word	0x20002dc0

08006d88 <DisplayGui_Acceleration>:

#define RPM_SMALL 					0  //1 = small, 2 = big whit text, other = very big


void DisplayGui_Acceleration(void)
{
 8006d88:	b590      	push	{r4, r7, lr}
 8006d8a:	b093      	sub	sp, #76	; 0x4c
 8006d8c:	af0a      	add	r7, sp, #40	; 0x28
	// Intro section BEGIN
	static uint32_t millisGuiIntro = 0;
	static uint8_t introStatus = 0;

	if(selectedGui_old != GuiAcceleration && selectedGui_old != GuiAlarm)
 8006d8e:	4b91      	ldr	r3, [pc, #580]	; (8006fd4 <DisplayGui_Acceleration+0x24c>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d00c      	beq.n	8006db0 <DisplayGui_Acceleration+0x28>
 8006d96:	4b8f      	ldr	r3, [pc, #572]	; (8006fd4 <DisplayGui_Acceleration+0x24c>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2bfe      	cmp	r3, #254	; 0xfe
 8006d9c:	d008      	beq.n	8006db0 <DisplayGui_Acceleration+0x28>
	{
		introStatus = 1;
 8006d9e:	4b8e      	ldr	r3, [pc, #568]	; (8006fd8 <DisplayGui_Acceleration+0x250>)
 8006da0:	2201      	movs	r2, #1
 8006da2:	701a      	strb	r2, [r3, #0]
		millisGuiIntro = millis;
 8006da4:	4b8d      	ldr	r3, [pc, #564]	; (8006fdc <DisplayGui_Acceleration+0x254>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a8d      	ldr	r2, [pc, #564]	; (8006fe0 <DisplayGui_Acceleration+0x258>)
 8006daa:	6013      	str	r3, [r2, #0]

		GUI_Clear();
 8006dac:	f017 f86a 	bl	801de84 <GUI_Clear>
	}

	if(introStatus == 1)
 8006db0:	4b89      	ldr	r3, [pc, #548]	; (8006fd8 <DisplayGui_Acceleration+0x250>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d110      	bne.n	8006dda <DisplayGui_Acceleration+0x52>
	{
		if(millis < millisGuiIntro + DISPLAY_GUI_INTRO_TIME)
 8006db8:	4b89      	ldr	r3, [pc, #548]	; (8006fe0 <DisplayGui_Acceleration+0x258>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 8006dc0:	4b86      	ldr	r3, [pc, #536]	; (8006fdc <DisplayGui_Acceleration+0x254>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d903      	bls.n	8006dd0 <DisplayGui_Acceleration+0x48>
		{
			DisplayGui_Acceleration_Intro();
 8006dc8:	f000 ff1c 	bl	8007c04 <DisplayGui_Acceleration_Intro>
			goto DisplayGui_Acceleration_END;
 8006dcc:	f000 beef 	b.w	8007bae <DisplayGui_Acceleration+0xe26>
		}
		else
		{
			introStatus = 0;
 8006dd0:	4b81      	ldr	r3, [pc, #516]	; (8006fd8 <DisplayGui_Acceleration+0x250>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	701a      	strb	r2, [r3, #0]
			GUI_Clear();
 8006dd6:	f017 f855 	bl	801de84 <GUI_Clear>


	//CORE FUNCTION BEGIN

	int x, y, xt, yt;
	char *string = "";
 8006dda:	4b82      	ldr	r3, [pc, #520]	; (8006fe4 <DisplayGui_Acceleration+0x25c>)
 8006ddc:	617b      	str	r3, [r7, #20]

	char *a = "";
 8006dde:	4b81      	ldr	r3, [pc, #516]	; (8006fe4 <DisplayGui_Acceleration+0x25c>)
 8006de0:	613b      	str	r3, [r7, #16]
	char *b = "";
 8006de2:	4b80      	ldr	r3, [pc, #512]	; (8006fe4 <DisplayGui_Acceleration+0x25c>)
 8006de4:	60fb      	str	r3, [r7, #12]

	static uint8_t blinkClock = 0;
	static uint32_t millisBlinkClock = 0;

	if(millis >= millisBlinkClock + 250)
 8006de6:	4b80      	ldr	r3, [pc, #512]	; (8006fe8 <DisplayGui_Acceleration+0x260>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8006dee:	4b7b      	ldr	r3, [pc, #492]	; (8006fdc <DisplayGui_Acceleration+0x254>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d80e      	bhi.n	8006e14 <DisplayGui_Acceleration+0x8c>
	{
		millisBlinkClock = millis;
 8006df6:	4b79      	ldr	r3, [pc, #484]	; (8006fdc <DisplayGui_Acceleration+0x254>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a7b      	ldr	r2, [pc, #492]	; (8006fe8 <DisplayGui_Acceleration+0x260>)
 8006dfc:	6013      	str	r3, [r2, #0]

		if(blinkClock == 0)
 8006dfe:	4b7b      	ldr	r3, [pc, #492]	; (8006fec <DisplayGui_Acceleration+0x264>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d103      	bne.n	8006e0e <DisplayGui_Acceleration+0x86>
			blinkClock = 1;
 8006e06:	4b79      	ldr	r3, [pc, #484]	; (8006fec <DisplayGui_Acceleration+0x264>)
 8006e08:	2201      	movs	r2, #1
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	e002      	b.n	8006e14 <DisplayGui_Acceleration+0x8c>
		else
			blinkClock = 0;
 8006e0e:	4b77      	ldr	r3, [pc, #476]	; (8006fec <DisplayGui_Acceleration+0x264>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	701a      	strb	r2, [r3, #0]


	static uint32_t millisDataRefresh = 0;
	static uint8_t dataRefresh = 1;

	if(millis >= millisDataRefresh + 100)
 8006e14:	4b76      	ldr	r3, [pc, #472]	; (8006ff0 <DisplayGui_Acceleration+0x268>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8006e1c:	4b6f      	ldr	r3, [pc, #444]	; (8006fdc <DisplayGui_Acceleration+0x254>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d806      	bhi.n	8006e32 <DisplayGui_Acceleration+0xaa>
	{
		millisDataRefresh = millis;
 8006e24:	4b6d      	ldr	r3, [pc, #436]	; (8006fdc <DisplayGui_Acceleration+0x254>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a71      	ldr	r2, [pc, #452]	; (8006ff0 <DisplayGui_Acceleration+0x268>)
 8006e2a:	6013      	str	r3, [r2, #0]
		dataRefresh = 1;
 8006e2c:	4b71      	ldr	r3, [pc, #452]	; (8006ff4 <DisplayGui_Acceleration+0x26c>)
 8006e2e:	2201      	movs	r2, #1
 8006e30:	701a      	strb	r2, [r3, #0]
	}

	// RPM BAR BEGIN

	Display_OldRpmBar_STD(CAR_Data.rpm.intData);
 8006e32:	4b71      	ldr	r3, [pc, #452]	; (8006ff8 <DisplayGui_Acceleration+0x270>)
 8006e34:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f009 fb7c 	bl	8010538 <Display_OldRpmBar_STD>

	// GEAR BEGIN

	static uint8_t gear_old = 0;

	if(gear_old != gear)
 8006e40:	4b6e      	ldr	r3, [pc, #440]	; (8006ffc <DisplayGui_Acceleration+0x274>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	461a      	mov	r2, r3
 8006e46:	4b6e      	ldr	r3, [pc, #440]	; (8007000 <DisplayGui_Acceleration+0x278>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d009      	beq.n	8006e62 <DisplayGui_Acceleration+0xda>
	{
		GUI_SetColor(GUI_BLACK);
 8006e4e:	2000      	movs	r0, #0
 8006e50:	f015 ff6c 	bl	801cd2c <GUI_SetColor>
		GUI_FillRect(190, 20 + GUI_Y_OFFSET, 290, 22 + 126 + GUI_Y_OFFSET + 50);
 8006e54:	23d6      	movs	r3, #214	; 0xd6
 8006e56:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006e5a:	2124      	movs	r1, #36	; 0x24
 8006e5c:	20be      	movs	r0, #190	; 0xbe
 8006e5e:	f016 f86f 	bl	801cf40 <GUI_FillRect>
			GUI_FillRect(190, 22 + GUI_Y_OFFSET, 290, 22 + 126 + GUI_Y_OFFSET + 50);

	}
#elif HQ_GEARBOX_ENABLE == 1

		switch(CAR_Data.gear.intData)
 8006e62:	4b65      	ldr	r3, [pc, #404]	; (8006ff8 <DisplayGui_Acceleration+0x270>)
 8006e64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d858      	bhi.n	8006f1e <DisplayGui_Acceleration+0x196>
 8006e6c:	a201      	add	r2, pc, #4	; (adr r2, 8006e74 <DisplayGui_Acceleration+0xec>)
 8006e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e72:	bf00      	nop
 8006e74:	08006e89 	.word	0x08006e89
 8006e78:	08006ea7 	.word	0x08006ea7
 8006e7c:	08006ec5 	.word	0x08006ec5
 8006e80:	08006ee3 	.word	0x08006ee3
 8006e84:	08006f01 	.word	0x08006f01
		{
			case 0:
				GUI_DrawBitmap(&bmGEARBOX_N_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 6, 20 + GUI_Y_OFFSET + 50);
 8006e88:	4b5e      	ldr	r3, [pc, #376]	; (8007004 <DisplayGui_Acceleration+0x27c>)
 8006e8a:	881b      	ldrh	r3, [r3, #0]
 8006e8c:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	da00      	bge.n	8006e96 <DisplayGui_Acceleration+0x10e>
 8006e94:	3301      	adds	r3, #1
 8006e96:	105b      	asrs	r3, r3, #1
 8006e98:	3306      	adds	r3, #6
 8006e9a:	2256      	movs	r2, #86	; 0x56
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	485a      	ldr	r0, [pc, #360]	; (8007008 <DisplayGui_Acceleration+0x280>)
 8006ea0:	f016 fdfc 	bl	801da9c <GUI_DrawBitmap>
				break;
 8006ea4:	e046      	b.n	8006f34 <DisplayGui_Acceleration+0x1ac>

			case 1:
				GUI_DrawBitmap(&bmGEARBOX_1_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 15, 22 + GUI_Y_OFFSET + 50);
 8006ea6:	4b57      	ldr	r3, [pc, #348]	; (8007004 <DisplayGui_Acceleration+0x27c>)
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	da00      	bge.n	8006eb4 <DisplayGui_Acceleration+0x12c>
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	105b      	asrs	r3, r3, #1
 8006eb6:	330f      	adds	r3, #15
 8006eb8:	2258      	movs	r2, #88	; 0x58
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4853      	ldr	r0, [pc, #332]	; (800700c <DisplayGui_Acceleration+0x284>)
 8006ebe:	f016 fded 	bl	801da9c <GUI_DrawBitmap>
				break;
 8006ec2:	e037      	b.n	8006f34 <DisplayGui_Acceleration+0x1ac>

			case 2:
				GUI_DrawBitmap(&bmGEARBOX_2_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 13, 22 + GUI_Y_OFFSET + 50);
 8006ec4:	4b4f      	ldr	r3, [pc, #316]	; (8007004 <DisplayGui_Acceleration+0x27c>)
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	da00      	bge.n	8006ed2 <DisplayGui_Acceleration+0x14a>
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	105b      	asrs	r3, r3, #1
 8006ed4:	330d      	adds	r3, #13
 8006ed6:	2258      	movs	r2, #88	; 0x58
 8006ed8:	4619      	mov	r1, r3
 8006eda:	484d      	ldr	r0, [pc, #308]	; (8007010 <DisplayGui_Acceleration+0x288>)
 8006edc:	f016 fdde 	bl	801da9c <GUI_DrawBitmap>
				break;
 8006ee0:	e028      	b.n	8006f34 <DisplayGui_Acceleration+0x1ac>

			case 3:
				GUI_DrawBitmap(&bmGEARBOX_3_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 15, 22 + GUI_Y_OFFSET + 50);
 8006ee2:	4b48      	ldr	r3, [pc, #288]	; (8007004 <DisplayGui_Acceleration+0x27c>)
 8006ee4:	881b      	ldrh	r3, [r3, #0]
 8006ee6:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	da00      	bge.n	8006ef0 <DisplayGui_Acceleration+0x168>
 8006eee:	3301      	adds	r3, #1
 8006ef0:	105b      	asrs	r3, r3, #1
 8006ef2:	330f      	adds	r3, #15
 8006ef4:	2258      	movs	r2, #88	; 0x58
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4846      	ldr	r0, [pc, #280]	; (8007014 <DisplayGui_Acceleration+0x28c>)
 8006efa:	f016 fdcf 	bl	801da9c <GUI_DrawBitmap>
				break;
 8006efe:	e019      	b.n	8006f34 <DisplayGui_Acceleration+0x1ac>

			case 4:
				GUI_DrawBitmap(&bmGEARBOX_4_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 9, 22 + GUI_Y_OFFSET + 50);
 8006f00:	4b40      	ldr	r3, [pc, #256]	; (8007004 <DisplayGui_Acceleration+0x27c>)
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	da00      	bge.n	8006f0e <DisplayGui_Acceleration+0x186>
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	105b      	asrs	r3, r3, #1
 8006f10:	3309      	adds	r3, #9
 8006f12:	2258      	movs	r2, #88	; 0x58
 8006f14:	4619      	mov	r1, r3
 8006f16:	4840      	ldr	r0, [pc, #256]	; (8007018 <DisplayGui_Acceleration+0x290>)
 8006f18:	f016 fdc0 	bl	801da9c <GUI_DrawBitmap>
				break;
 8006f1c:	e00a      	b.n	8006f34 <DisplayGui_Acceleration+0x1ac>

			default:
				GUI_SetColor(GUI_RED);
 8006f1e:	20ff      	movs	r0, #255	; 0xff
 8006f20:	f015 ff04 	bl	801cd2c <GUI_SetColor>
				GUI_FillRect(193, 84 + GUI_Y_OFFSET, 288, 207 + GUI_Y_OFFSET + 50);
 8006f24:	f240 1311 	movw	r3, #273	; 0x111
 8006f28:	f44f 7290 	mov.w	r2, #288	; 0x120
 8006f2c:	2164      	movs	r1, #100	; 0x64
 8006f2e:	20c1      	movs	r0, #193	; 0xc1
 8006f30:	f016 f806 	bl	801cf40 <GUI_FillRect>

		}

#endif

	gear_old = gear;
 8006f34:	4b32      	ldr	r3, [pc, #200]	; (8007000 <DisplayGui_Acceleration+0x278>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	4b30      	ldr	r3, [pc, #192]	; (8006ffc <DisplayGui_Acceleration+0x274>)
 8006f3c:	701a      	strb	r2, [r3, #0]

	// GEAR END


	GUI_AA_SetFactor(rectAAfactor);
 8006f3e:	2006      	movs	r0, #6
 8006f40:	f018 fa00 	bl	801f344 <GUI_AA_SetFactor>
	GUI_AA_EnableHiRes();
 8006f44:	f018 fa06 	bl	801f354 <GUI_AA_EnableHiRes>
	GUI_AA_SetFactor(rectAAfactor);
 8006f48:	2006      	movs	r0, #6
 8006f4a:	f018 f9fb 	bl	801f344 <GUI_AA_SetFactor>

	GUI_SetPenSize(rectThickness);
 8006f4e:	2004      	movs	r0, #4
 8006f50:	f015 ff62 	bl	801ce18 <GUI_SetPenSize>


	// 0 - 100 last acceleration time BEGIN

	xt = 34 + 70;
 8006f54:	2368      	movs	r3, #104	; 0x68
 8006f56:	61fb      	str	r3, [r7, #28]
	yt = 21 + 25 + GUI_Y_OFFSET;
 8006f58:	233e      	movs	r3, #62	; 0x3e
 8006f5a:	61bb      	str	r3, [r7, #24]

	static GUI_DrawNumAtTypeDef lastAccelerationTimeToDisplay = {0};
	lastAccelerationTimeToDisplay.number = (float)CAR_Data.lastAccelerationTime/1000;
 8006f5c:	4b26      	ldr	r3, [pc, #152]	; (8006ff8 <DisplayGui_Acceleration+0x270>)
 8006f5e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f6a:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800701c <DisplayGui_Acceleration+0x294>
 8006f6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006f76:	4b2a      	ldr	r3, [pc, #168]	; (8007020 <DisplayGui_Acceleration+0x298>)
 8006f78:	ed83 7b00 	vstr	d7, [r3]

	b = " s";
 8006f7c:	4b29      	ldr	r3, [pc, #164]	; (8007024 <DisplayGui_Acceleration+0x29c>)
 8006f7e:	60fb      	str	r3, [r7, #12]

	if(CAR_Data.lastAccelerationTime < 10000)
 8006f80:	4b1d      	ldr	r3, [pc, #116]	; (8006ff8 <DisplayGui_Acceleration+0x270>)
 8006f82:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8006f86:	f242 720f 	movw	r2, #9999	; 0x270f
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d84e      	bhi.n	800702c <DisplayGui_Acceleration+0x2a4>
		GUI_DrawNumAt(xt - 24, yt - 10, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &lastAccelerationTimeToDisplay, 1, 3, DISABLE, ENABLE, CENTER, a, b);
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	3b18      	subs	r3, #24
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	b218      	sxth	r0, r3
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3b0a      	subs	r3, #10
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	b219      	sxth	r1, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	9308      	str	r3, [sp, #32]
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	9307      	str	r3, [sp, #28]
 8006faa:	2302      	movs	r3, #2
 8006fac:	9306      	str	r3, [sp, #24]
 8006fae:	2301      	movs	r3, #1
 8006fb0:	9305      	str	r3, [sp, #20]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	9304      	str	r3, [sp, #16]
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	9303      	str	r3, [sp, #12]
 8006fba:	2301      	movs	r3, #1
 8006fbc:	9302      	str	r3, [sp, #8]
 8006fbe:	4b18      	ldr	r3, [pc, #96]	; (8007020 <DisplayGui_Acceleration+0x298>)
 8006fc0:	9301      	str	r3, [sp, #4]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8006fca:	4a17      	ldr	r2, [pc, #92]	; (8007028 <DisplayGui_Acceleration+0x2a0>)
 8006fcc:	f00e fc8c 	bl	80158e8 <GUI_DrawNumAt>
 8006fd0:	e04d      	b.n	800706e <DisplayGui_Acceleration+0x2e6>
 8006fd2:	bf00      	nop
 8006fd4:	20000044 	.word	0x20000044
 8006fd8:	20002dd8 	.word	0x20002dd8
 8006fdc:	20006a98 	.word	0x20006a98
 8006fe0:	20002ddc 	.word	0x20002ddc
 8006fe4:	08022354 	.word	0x08022354
 8006fe8:	20002de0 	.word	0x20002de0
 8006fec:	20002de4 	.word	0x20002de4
 8006ff0:	20002de8 	.word	0x20002de8
 8006ff4:	20000046 	.word	0x20000046
 8006ff8:	2000041c 	.word	0x2000041c
 8006ffc:	20002dec 	.word	0x20002dec
 8007000:	20002d34 	.word	0x20002d34
 8007004:	0802c314 	.word	0x0802c314
 8007008:	0802eea0 	.word	0x0802eea0
 800700c:	08024a3c 	.word	0x08024a3c
 8007010:	08026efc 	.word	0x08026efc
 8007014:	08029348 	.word	0x08029348
 8007018:	0802bc90 	.word	0x0802bc90
 800701c:	447a0000 	.word	0x447a0000
 8007020:	20002df0 	.word	0x20002df0
 8007024:	08022358 	.word	0x08022358
 8007028:	081249a8 	.word	0x081249a8
	else
		GUI_DrawNumAt(xt - 24, yt - 10, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &lastAccelerationTimeToDisplay, 2, 3, DISABLE, ENABLE, CENTER, a, b);
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b18      	subs	r3, #24
 8007032:	b29b      	uxth	r3, r3
 8007034:	b218      	sxth	r0, r3
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	b29b      	uxth	r3, r3
 800703a:	3b0a      	subs	r3, #10
 800703c:	b29b      	uxth	r3, r3
 800703e:	b219      	sxth	r1, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	9308      	str	r3, [sp, #32]
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	9307      	str	r3, [sp, #28]
 8007048:	2302      	movs	r3, #2
 800704a:	9306      	str	r3, [sp, #24]
 800704c:	2301      	movs	r3, #1
 800704e:	9305      	str	r3, [sp, #20]
 8007050:	2300      	movs	r3, #0
 8007052:	9304      	str	r3, [sp, #16]
 8007054:	2303      	movs	r3, #3
 8007056:	9303      	str	r3, [sp, #12]
 8007058:	2302      	movs	r3, #2
 800705a:	9302      	str	r3, [sp, #8]
 800705c:	4b76      	ldr	r3, [pc, #472]	; (8007238 <DisplayGui_Acceleration+0x4b0>)
 800705e:	9301      	str	r3, [sp, #4]
 8007060:	2300      	movs	r3, #0
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007068:	4a74      	ldr	r2, [pc, #464]	; (800723c <DisplayGui_Acceleration+0x4b4>)
 800706a:	f00e fc3d 	bl	80158e8 <GUI_DrawNumAt>

	b = "";
 800706e:	4b74      	ldr	r3, [pc, #464]	; (8007240 <DisplayGui_Acceleration+0x4b8>)
 8007070:	60fb      	str	r3, [r7, #12]

	GUI_SetColor(GUI_LIGHTGRAY);
 8007072:	4874      	ldr	r0, [pc, #464]	; (8007244 <DisplayGui_Acceleration+0x4bc>)
 8007074:	f015 fe5a 	bl	801cd2c <GUI_SetColor>

	xt = 34;
 8007078:	2322      	movs	r3, #34	; 0x22
 800707a:	61fb      	str	r3, [r7, #28]
	yt = 21 + GUI_Y_OFFSET;
 800707c:	2325      	movs	r3, #37	; 0x25
 800707e:	61bb      	str	r3, [r7, #24]
	string = "0-100 Km/h";
 8007080:	4b71      	ldr	r3, [pc, #452]	; (8007248 <DisplayGui_Acceleration+0x4c0>)
 8007082:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font20_1);
 8007084:	4871      	ldr	r0, [pc, #452]	; (800724c <DisplayGui_Acceleration+0x4c4>)
 8007086:	f015 fe23 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	69f9      	ldr	r1, [r7, #28]
 800708e:	6978      	ldr	r0, [r7, #20]
 8007090:	f016 fd2a 	bl	801dae8 <GUI_DispStringAt>

	// Traction Control "TC" BEGIN

	static uint8_t tractionControl_old = 0;

	GUI_SetColor(GUI_LIGHTGRAY);
 8007094:	486b      	ldr	r0, [pc, #428]	; (8007244 <DisplayGui_Acceleration+0x4bc>)
 8007096:	f015 fe49 	bl	801cd2c <GUI_SetColor>

	x = 20;
 800709a:	2314      	movs	r3, #20
 800709c:	60bb      	str	r3, [r7, #8]
	y = 16 + GUI_Y_OFFSET;
 800709e:	2320      	movs	r3, #32
 80070a0:	607b      	str	r3, [r7, #4]
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY) * 1.3 * rectAAfactor, rectRadius * rectAAfactor);
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	4613      	mov	r3, r2
 80070a6:	005b      	lsls	r3, r3, #1
 80070a8:	4413      	add	r3, r2
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	4618      	mov	r0, r3
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	4613      	mov	r3, r2
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	4413      	add	r3, r2
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	4619      	mov	r1, r3
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80070c0:	4613      	mov	r3, r2
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	4413      	add	r3, r2
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	461a      	mov	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3328      	adds	r3, #40	; 0x28
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070d6:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8007230 <DisplayGui_Acceleration+0x4a8>
 80070da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80070de:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80070e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80070e6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80070ea:	2348      	movs	r3, #72	; 0x48
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	ee17 3a90 	vmov	r3, s15
 80070f2:	f018 f953 	bl	801f39c <GUI_AA_DrawRoundedRect>


	xt = 40;
 80070f6:	2328      	movs	r3, #40	; 0x28
 80070f8:	61fb      	str	r3, [r7, #28]
	yt = 98 + GUI_Y_OFFSET;
 80070fa:	2372      	movs	r3, #114	; 0x72
 80070fc:	61bb      	str	r3, [r7, #24]
	string = "TC";
 80070fe:	4b54      	ldr	r3, [pc, #336]	; (8007250 <DisplayGui_Acceleration+0x4c8>)
 8007100:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font32_1);
 8007102:	484e      	ldr	r0, [pc, #312]	; (800723c <DisplayGui_Acceleration+0x4b4>)
 8007104:	f015 fde4 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	69f9      	ldr	r1, [r7, #28]
 800710c:	6978      	ldr	r0, [r7, #20]
 800710e:	f016 fceb 	bl	801dae8 <GUI_DispStringAt>


	xt += 40;
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	3328      	adds	r3, #40	; 0x28
 8007116:	61fb      	str	r3, [r7, #28]

	if(tractionControl != tractionControl_old)
 8007118:	4b4e      	ldr	r3, [pc, #312]	; (8007254 <DisplayGui_Acceleration+0x4cc>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	461a      	mov	r2, r3
 800711e:	4b4e      	ldr	r3, [pc, #312]	; (8007258 <DisplayGui_Acceleration+0x4d0>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	429a      	cmp	r2, r3
 8007124:	d00b      	beq.n	800713e <DisplayGui_Acceleration+0x3b6>
	{
		GUI_SetColor(GUI_BLACK);
 8007126:	2000      	movs	r0, #0
 8007128:	f015 fe00 	bl	801cd2c <GUI_SetColor>
		GUI_FillRect(xt, yt, xt + 58, yt + 28);
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	f103 023a 	add.w	r2, r3, #58	; 0x3a
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	331c      	adds	r3, #28
 8007136:	69b9      	ldr	r1, [r7, #24]
 8007138:	69f8      	ldr	r0, [r7, #28]
 800713a:	f015 ff01 	bl	801cf40 <GUI_FillRect>
	}

	tractionControl_old = tractionControl;
 800713e:	4b46      	ldr	r3, [pc, #280]	; (8007258 <DisplayGui_Acceleration+0x4d0>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	b2da      	uxtb	r2, r3
 8007144:	4b43      	ldr	r3, [pc, #268]	; (8007254 <DisplayGui_Acceleration+0x4cc>)
 8007146:	701a      	strb	r2, [r3, #0]

	GUI_SetFont(&GUI_Font32B_1);
 8007148:	4844      	ldr	r0, [pc, #272]	; (800725c <DisplayGui_Acceleration+0x4d4>)
 800714a:	f015 fdc1 	bl	801ccd0 <GUI_SetFont>
	GUI_SetColor(GUI_RED);
 800714e:	20ff      	movs	r0, #255	; 0xff
 8007150:	f015 fdec 	bl	801cd2c <GUI_SetColor>

	switch(tractionControl)
 8007154:	4b40      	ldr	r3, [pc, #256]	; (8007258 <DisplayGui_Acceleration+0x4d0>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b04      	cmp	r3, #4
 800715a:	d833      	bhi.n	80071c4 <DisplayGui_Acceleration+0x43c>
 800715c:	a201      	add	r2, pc, #4	; (adr r2, 8007164 <DisplayGui_Acceleration+0x3dc>)
 800715e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007162:	bf00      	nop
 8007164:	08007179 	.word	0x08007179
 8007168:	0800718d 	.word	0x0800718d
 800716c:	080071a1 	.word	0x080071a1
 8007170:	080071ad 	.word	0x080071ad
 8007174:	080071b9 	.word	0x080071b9
	{
		case 0:
			string = "OFF";
 8007178:	4b39      	ldr	r3, [pc, #228]	; (8007260 <DisplayGui_Acceleration+0x4d8>)
 800717a:	617b      	str	r3, [r7, #20]
			GUI_SetFont(&GUI_Font32_1);
 800717c:	482f      	ldr	r0, [pc, #188]	; (800723c <DisplayGui_Acceleration+0x4b4>)
 800717e:	f015 fda7 	bl	801ccd0 <GUI_SetFont>
			GUI_SetColor(GUI_GREEN);
 8007182:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8007186:	f015 fdd1 	bl	801cd2c <GUI_SetColor>
			break;
 800718a:	e023      	b.n	80071d4 <DisplayGui_Acceleration+0x44c>

		case 1:
			string = "1";
 800718c:	4b35      	ldr	r3, [pc, #212]	; (8007264 <DisplayGui_Acceleration+0x4dc>)
 800718e:	617b      	str	r3, [r7, #20]
			xt+=18;
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	3312      	adds	r3, #18
 8007194:	61fb      	str	r3, [r7, #28]
			GUI_SetColor(GUI_ORANGE);
 8007196:	f24a 50ff 	movw	r0, #42495	; 0xa5ff
 800719a:	f015 fdc7 	bl	801cd2c <GUI_SetColor>
			break;
 800719e:	e019      	b.n	80071d4 <DisplayGui_Acceleration+0x44c>

		case 2:
			string = "2";
 80071a0:	4b31      	ldr	r3, [pc, #196]	; (8007268 <DisplayGui_Acceleration+0x4e0>)
 80071a2:	617b      	str	r3, [r7, #20]
			xt+=18;
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	3312      	adds	r3, #18
 80071a8:	61fb      	str	r3, [r7, #28]
			break;
 80071aa:	e013      	b.n	80071d4 <DisplayGui_Acceleration+0x44c>

		case 3:
			string = "3";
 80071ac:	4b2f      	ldr	r3, [pc, #188]	; (800726c <DisplayGui_Acceleration+0x4e4>)
 80071ae:	617b      	str	r3, [r7, #20]
			xt+=18;
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	3312      	adds	r3, #18
 80071b4:	61fb      	str	r3, [r7, #28]
			break;
 80071b6:	e00d      	b.n	80071d4 <DisplayGui_Acceleration+0x44c>

		case 4:
			string = "4";
 80071b8:	4b2d      	ldr	r3, [pc, #180]	; (8007270 <DisplayGui_Acceleration+0x4e8>)
 80071ba:	617b      	str	r3, [r7, #20]
			xt+=18;
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	3312      	adds	r3, #18
 80071c0:	61fb      	str	r3, [r7, #28]
			break;
 80071c2:	e007      	b.n	80071d4 <DisplayGui_Acceleration+0x44c>

		default:
			GUI_SetColor(GUI_RED);
 80071c4:	20ff      	movs	r0, #255	; 0xff
 80071c6:	f015 fdb1 	bl	801cd2c <GUI_SetColor>
			string = "ERR";
 80071ca:	4b2a      	ldr	r3, [pc, #168]	; (8007274 <DisplayGui_Acceleration+0x4ec>)
 80071cc:	617b      	str	r3, [r7, #20]
			GUI_SetFont(&GUI_Font32_1);
 80071ce:	481b      	ldr	r0, [pc, #108]	; (800723c <DisplayGui_Acceleration+0x4b4>)
 80071d0:	f015 fd7e 	bl	801ccd0 <GUI_SetFont>
	}

	GUI_DispStringAt(string, xt, yt);
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	69f9      	ldr	r1, [r7, #28]
 80071d8:	6978      	ldr	r0, [r7, #20]
 80071da:	f016 fc85 	bl	801dae8 <GUI_DispStringAt>

	static uint32_t millisTractionBlink = 0;
	static uint8_t tractionBlinkStatus = 0;

	switch(tractionControl)
 80071de:	4b1e      	ldr	r3, [pc, #120]	; (8007258 <DisplayGui_Acceleration+0x4d0>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d002      	beq.n	80071ec <DisplayGui_Acceleration+0x464>
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d007      	beq.n	80071fa <DisplayGui_Acceleration+0x472>
 80071ea:	e00e      	b.n	800720a <DisplayGui_Acceleration+0x482>
	{
		case 0:
			GUI_SetColor(GUI_LIGHTGRAY);
 80071ec:	4815      	ldr	r0, [pc, #84]	; (8007244 <DisplayGui_Acceleration+0x4bc>)
 80071ee:	f015 fd9d 	bl	801cd2c <GUI_SetColor>
			tractionBlinkStatus = 0;
 80071f2:	4b21      	ldr	r3, [pc, #132]	; (8007278 <DisplayGui_Acceleration+0x4f0>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	701a      	strb	r2, [r3, #0]
			break;
 80071f8:	e00b      	b.n	8007212 <DisplayGui_Acceleration+0x48a>

		case 1:
			GUI_SetColor(GUI_ORANGE);
 80071fa:	f24a 50ff 	movw	r0, #42495	; 0xa5ff
 80071fe:	f015 fd95 	bl	801cd2c <GUI_SetColor>
			tractionBlinkStatus = 0;
 8007202:	4b1d      	ldr	r3, [pc, #116]	; (8007278 <DisplayGui_Acceleration+0x4f0>)
 8007204:	2200      	movs	r2, #0
 8007206:	701a      	strb	r2, [r3, #0]
			break;
 8007208:	e003      	b.n	8007212 <DisplayGui_Acceleration+0x48a>
		case 2:
		case 3:
		case 4:
		default:

			tractionBlinkStatus = 1;
 800720a:	4b1b      	ldr	r3, [pc, #108]	; (8007278 <DisplayGui_Acceleration+0x4f0>)
 800720c:	2201      	movs	r2, #1
 800720e:	701a      	strb	r2, [r3, #0]

			break;
 8007210:	bf00      	nop
	}

	if(tractionBlinkStatus == 1 && blinkClock == 1)
 8007212:	4b19      	ldr	r3, [pc, #100]	; (8007278 <DisplayGui_Acceleration+0x4f0>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d132      	bne.n	8007280 <DisplayGui_Acceleration+0x4f8>
 800721a:	4b18      	ldr	r3, [pc, #96]	; (800727c <DisplayGui_Acceleration+0x4f4>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d12e      	bne.n	8007280 <DisplayGui_Acceleration+0x4f8>
		GUI_SetColor(GUI_RED);
 8007222:	20ff      	movs	r0, #255	; 0xff
 8007224:	f015 fd82 	bl	801cd2c <GUI_SetColor>
 8007228:	e02d      	b.n	8007286 <DisplayGui_Acceleration+0x4fe>
 800722a:	bf00      	nop
 800722c:	f3af 8000 	nop.w
 8007230:	cccccccd 	.word	0xcccccccd
 8007234:	3ff4cccc 	.word	0x3ff4cccc
 8007238:	20002df0 	.word	0x20002df0
 800723c:	081249a8 	.word	0x081249a8
 8007240:	08022354 	.word	0x08022354
 8007244:	00d3d3d3 	.word	0x00d3d3d3
 8007248:	0802235c 	.word	0x0802235c
 800724c:	0812b6c8 	.word	0x0812b6c8
 8007250:	08022368 	.word	0x08022368
 8007254:	20002e08 	.word	0x20002e08
 8007258:	20002d40 	.word	0x20002d40
 800725c:	08127b30 	.word	0x08127b30
 8007260:	0802236c 	.word	0x0802236c
 8007264:	08022370 	.word	0x08022370
 8007268:	08022374 	.word	0x08022374
 800726c:	08022378 	.word	0x08022378
 8007270:	0802237c 	.word	0x0802237c
 8007274:	08022380 	.word	0x08022380
 8007278:	20002e09 	.word	0x20002e09
 800727c:	20002de4 	.word	0x20002de4
	else
		GUI_SetColor(GUI_LIGHTGRAY);
 8007280:	4898      	ldr	r0, [pc, #608]	; (80074e4 <DisplayGui_Acceleration+0x75c>)
 8007282:	f015 fd53 	bl	801cd2c <GUI_SetColor>

	//GUI_SetColor(GUI_LIGHTGRAY);

	y = 94 + GUI_Y_OFFSET;
 8007286:	236e      	movs	r3, #110	; 0x6e
 8007288:	607b      	str	r3, [r7, #4]
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY) * rectAAfactor, rectRadius * rectAAfactor);
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	4613      	mov	r3, r2
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	4413      	add	r3, r2
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	4618      	mov	r0, r3
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	4613      	mov	r3, r2
 800729a:	005b      	lsls	r3, r3, #1
 800729c:	4413      	add	r3, r2
 800729e:	005b      	lsls	r3, r3, #1
 80072a0:	4619      	mov	r1, r3
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80072a8:	4613      	mov	r3, r2
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	4413      	add	r3, r2
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	461c      	mov	r4, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80072b8:	4613      	mov	r3, r2
 80072ba:	005b      	lsls	r3, r3, #1
 80072bc:	4413      	add	r3, r2
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	461a      	mov	r2, r3
 80072c2:	2348      	movs	r3, #72	; 0x48
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	4613      	mov	r3, r2
 80072c8:	4622      	mov	r2, r4
 80072ca:	f018 f867 	bl	801f39c <GUI_AA_DrawRoundedRect>

	// SPEED BEGIN

	static GUI_DrawNumAtTypeDef speedTempGui;

	GUI_SetColor(GUI_LIGHTGRAY);
 80072ce:	4885      	ldr	r0, [pc, #532]	; (80074e4 <DisplayGui_Acceleration+0x75c>)
 80072d0:	f015 fd2c 	bl	801cd2c <GUI_SetColor>

	xt = 30;
 80072d4:	231e      	movs	r3, #30
 80072d6:	61fb      	str	r3, [r7, #28]
	yt = 158 + GUI_Y_OFFSET;
 80072d8:	23ae      	movs	r3, #174	; 0xae
 80072da:	61bb      	str	r3, [r7, #24]
	string = "Km/h";
 80072dc:	4b82      	ldr	r3, [pc, #520]	; (80074e8 <DisplayGui_Acceleration+0x760>)
 80072de:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font24_1);
 80072e0:	4882      	ldr	r0, [pc, #520]	; (80074ec <DisplayGui_Acceleration+0x764>)
 80072e2:	f015 fcf5 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt + 5);
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	3305      	adds	r3, #5
 80072ea:	461a      	mov	r2, r3
 80072ec:	69f9      	ldr	r1, [r7, #28]
 80072ee:	6978      	ldr	r0, [r7, #20]
 80072f0:	f016 fbfa 	bl	801dae8 <GUI_DispStringAt>

	speedTempGui.number = CAR_Data.speed.floatData;
 80072f4:	4b7e      	ldr	r3, [pc, #504]	; (80074f0 <DisplayGui_Acceleration+0x768>)
 80072f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80072fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80072fe:	4b7d      	ldr	r3, [pc, #500]	; (80074f4 <DisplayGui_Acceleration+0x76c>)
 8007300:	ed83 7b00 	vstr	d7, [r3]

	xt += 76;
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	334c      	adds	r3, #76	; 0x4c
 8007308:	61fb      	str	r3, [r7, #28]
	//yt += 2;

	a = "";
 800730a:	4b7b      	ldr	r3, [pc, #492]	; (80074f8 <DisplayGui_Acceleration+0x770>)
 800730c:	613b      	str	r3, [r7, #16]
	b = "";
 800730e:	4b7a      	ldr	r3, [pc, #488]	; (80074f8 <DisplayGui_Acceleration+0x770>)
 8007310:	60fb      	str	r3, [r7, #12]

	GUI_DrawNumAt(xt, yt, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &speedTempGui, 3, 0, DISABLE, DISABLE, CENTER, a, b);
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	b218      	sxth	r0, r3
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	b219      	sxth	r1, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	9308      	str	r3, [sp, #32]
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	9307      	str	r3, [sp, #28]
 8007322:	2302      	movs	r3, #2
 8007324:	9306      	str	r3, [sp, #24]
 8007326:	2300      	movs	r3, #0
 8007328:	9305      	str	r3, [sp, #20]
 800732a:	2300      	movs	r3, #0
 800732c:	9304      	str	r3, [sp, #16]
 800732e:	2300      	movs	r3, #0
 8007330:	9303      	str	r3, [sp, #12]
 8007332:	2303      	movs	r3, #3
 8007334:	9302      	str	r3, [sp, #8]
 8007336:	4b6f      	ldr	r3, [pc, #444]	; (80074f4 <DisplayGui_Acceleration+0x76c>)
 8007338:	9301      	str	r3, [sp, #4]
 800733a:	2300      	movs	r3, #0
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007342:	4a6e      	ldr	r2, [pc, #440]	; (80074fc <DisplayGui_Acceleration+0x774>)
 8007344:	f00e fad0 	bl	80158e8 <GUI_DrawNumAt>

	GUI_SetColor(GUI_LIGHTGRAY);
 8007348:	4866      	ldr	r0, [pc, #408]	; (80074e4 <DisplayGui_Acceleration+0x75c>)
 800734a:	f015 fcef 	bl	801cd2c <GUI_SetColor>

	y = 154 + GUI_Y_OFFSET;
 800734e:	23aa      	movs	r3, #170	; 0xaa
 8007350:	607b      	str	r3, [r7, #4]
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY) * rectAAfactor, rectRadius * rectAAfactor);
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	4613      	mov	r3, r2
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	4413      	add	r3, r2
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	4618      	mov	r0, r3
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	4613      	mov	r3, r2
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	4413      	add	r3, r2
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	4619      	mov	r1, r3
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8007370:	4613      	mov	r3, r2
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	4413      	add	r3, r2
 8007376:	005b      	lsls	r3, r3, #1
 8007378:	461c      	mov	r4, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8007380:	4613      	mov	r3, r2
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	4413      	add	r3, r2
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	461a      	mov	r2, r3
 800738a:	2348      	movs	r3, #72	; 0x48
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	4613      	mov	r3, r2
 8007390:	4622      	mov	r2, r4
 8007392:	f018 f803 	bl	801f39c <GUI_AA_DrawRoundedRect>
	// P Oil END


	// V BAT BEGIN

	xt = 54;
 8007396:	2336      	movs	r3, #54	; 0x36
 8007398:	61fb      	str	r3, [r7, #28]
	yt = 221 + GUI_Y_OFFSET;
 800739a:	23ed      	movs	r3, #237	; 0xed
 800739c:	61bb      	str	r3, [r7, #24]
	string = "V BAT";
 800739e:	4b58      	ldr	r3, [pc, #352]	; (8007500 <DisplayGui_Acceleration+0x778>)
 80073a0:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font16_1);
 80073a2:	4858      	ldr	r0, [pc, #352]	; (8007504 <DisplayGui_Acceleration+0x77c>)
 80073a4:	f015 fc94 	bl	801ccd0 <GUI_SetFont>
	GUI_SetColor(GUI_LIGHTBLUE);
 80073a8:	4857      	ldr	r0, [pc, #348]	; (8007508 <DisplayGui_Acceleration+0x780>)
 80073aa:	f015 fcbf 	bl	801cd2c <GUI_SetColor>
	GUI_DispStringAt(string, xt, yt);
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	69f9      	ldr	r1, [r7, #28]
 80073b2:	6978      	ldr	r0, [r7, #20]
 80073b4:	f016 fb98 	bl	801dae8 <GUI_DispStringAt>

	static GUI_DrawNumAtTypeDef vBatDispData = {0};

	if(dataRefresh == 1)
 80073b8:	4b54      	ldr	r3, [pc, #336]	; (800750c <DisplayGui_Acceleration+0x784>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d107      	bne.n	80073d0 <DisplayGui_Acceleration+0x648>
		vBatDispData.number = vBat;
 80073c0:	4b53      	ldr	r3, [pc, #332]	; (8007510 <DisplayGui_Acceleration+0x788>)
 80073c2:	edd3 7a00 	vldr	s15, [r3]
 80073c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80073ca:	4b52      	ldr	r3, [pc, #328]	; (8007514 <DisplayGui_Acceleration+0x78c>)
 80073cc:	ed83 7b00 	vstr	d7, [r3]

	xt += 60;
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	333c      	adds	r3, #60	; 0x3c
 80073d4:	61fb      	str	r3, [r7, #28]
	yt -= 2;
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	3b02      	subs	r3, #2
 80073da:	61bb      	str	r3, [r7, #24]

	GUI_DrawNumAt(xt, yt, &GUI_Font20_1, GUI_LIGHTGRAY, GUI_BLACK, &vBatDispData, 2, 1, DISABLE, DISABLE, CENTER, a, b);
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	b218      	sxth	r0, r3
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	b219      	sxth	r1, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	9308      	str	r3, [sp, #32]
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	9307      	str	r3, [sp, #28]
 80073ec:	2302      	movs	r3, #2
 80073ee:	9306      	str	r3, [sp, #24]
 80073f0:	2300      	movs	r3, #0
 80073f2:	9305      	str	r3, [sp, #20]
 80073f4:	2300      	movs	r3, #0
 80073f6:	9304      	str	r3, [sp, #16]
 80073f8:	2301      	movs	r3, #1
 80073fa:	9303      	str	r3, [sp, #12]
 80073fc:	2302      	movs	r3, #2
 80073fe:	9302      	str	r3, [sp, #8]
 8007400:	4b44      	ldr	r3, [pc, #272]	; (8007514 <DisplayGui_Acceleration+0x78c>)
 8007402:	9301      	str	r3, [sp, #4]
 8007404:	2300      	movs	r3, #0
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	4b36      	ldr	r3, [pc, #216]	; (80074e4 <DisplayGui_Acceleration+0x75c>)
 800740a:	4a43      	ldr	r2, [pc, #268]	; (8007518 <DisplayGui_Acceleration+0x790>)
 800740c:	f00e fa6c 	bl	80158e8 <GUI_DrawNumAt>


	y = 214 + GUI_Y_OFFSET;
 8007410:	23e6      	movs	r3, #230	; 0xe6
 8007412:	607b      	str	r3, [r7, #4]
	GUI_SetColor(GUI_LIGHTBLUE);
 8007414:	483c      	ldr	r0, [pc, #240]	; (8007508 <DisplayGui_Acceleration+0x780>)
 8007416:	f015 fc89 	bl	801cd2c <GUI_SetColor>
	GUI_AA_DrawRoundedRect((x + 24) * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY - 10) * rectAAfactor, rectRadius * rectAAfactor);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f103 0218 	add.w	r2, r3, #24
 8007420:	4613      	mov	r3, r2
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	4413      	add	r3, r2
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	4618      	mov	r0, r3
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	4613      	mov	r3, r2
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	4413      	add	r3, r2
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	4619      	mov	r1, r3
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800743c:	4613      	mov	r3, r2
 800743e:	005b      	lsls	r3, r3, #1
 8007440:	4413      	add	r3, r2
 8007442:	005b      	lsls	r3, r3, #1
 8007444:	461c      	mov	r4, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f103 021e 	add.w	r2, r3, #30
 800744c:	4613      	mov	r3, r2
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	4413      	add	r3, r2
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	461a      	mov	r2, r3
 8007456:	2348      	movs	r3, #72	; 0x48
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	4613      	mov	r3, r2
 800745c:	4622      	mov	r2, r4
 800745e:	f017 ff9d 	bl	801f39c <GUI_AA_DrawRoundedRect>

	// left rects BEGIN

	// Best 0-100 BEGIN

	xt = (480 - rectSizeX) + 65;
 8007462:	f240 13a9 	movw	r3, #425	; 0x1a9
 8007466:	61fb      	str	r3, [r7, #28]
	yt = 21 + 25 + GUI_Y_OFFSET;
 8007468:	233e      	movs	r3, #62	; 0x3e
 800746a:	61bb      	str	r3, [r7, #24]

	static GUI_DrawNumAtTypeDef bestAccelerationTimeToDisplay = {0};
	bestAccelerationTimeToDisplay.number = (float)CAR_Data.bestAccelerationTime/1000;
 800746c:	4b20      	ldr	r3, [pc, #128]	; (80074f0 <DisplayGui_Acceleration+0x768>)
 800746e:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800747a:	eddf 6a28 	vldr	s13, [pc, #160]	; 800751c <DisplayGui_Acceleration+0x794>
 800747e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007482:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007486:	4b26      	ldr	r3, [pc, #152]	; (8007520 <DisplayGui_Acceleration+0x798>)
 8007488:	ed83 7b00 	vstr	d7, [r3]

	b = " s";
 800748c:	4b25      	ldr	r3, [pc, #148]	; (8007524 <DisplayGui_Acceleration+0x79c>)
 800748e:	60fb      	str	r3, [r7, #12]

	if(CAR_Data.bestAccelerationTime < 10000)
 8007490:	4b17      	ldr	r3, [pc, #92]	; (80074f0 <DisplayGui_Acceleration+0x768>)
 8007492:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8007496:	f242 720f 	movw	r2, #9999	; 0x270f
 800749a:	4293      	cmp	r3, r2
 800749c:	d844      	bhi.n	8007528 <DisplayGui_Acceleration+0x7a0>
		GUI_DrawNumAt(xt - 24, yt - 10, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &bestAccelerationTimeToDisplay, 1, 3, DISABLE, ENABLE, CENTER, a, b);
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	3b18      	subs	r3, #24
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	b218      	sxth	r0, r3
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	3b0a      	subs	r3, #10
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	b219      	sxth	r1, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	9308      	str	r3, [sp, #32]
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	9307      	str	r3, [sp, #28]
 80074ba:	2302      	movs	r3, #2
 80074bc:	9306      	str	r3, [sp, #24]
 80074be:	2301      	movs	r3, #1
 80074c0:	9305      	str	r3, [sp, #20]
 80074c2:	2300      	movs	r3, #0
 80074c4:	9304      	str	r3, [sp, #16]
 80074c6:	2303      	movs	r3, #3
 80074c8:	9303      	str	r3, [sp, #12]
 80074ca:	2301      	movs	r3, #1
 80074cc:	9302      	str	r3, [sp, #8]
 80074ce:	4b14      	ldr	r3, [pc, #80]	; (8007520 <DisplayGui_Acceleration+0x798>)
 80074d0:	9301      	str	r3, [sp, #4]
 80074d2:	2300      	movs	r3, #0
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80074da:	4a08      	ldr	r2, [pc, #32]	; (80074fc <DisplayGui_Acceleration+0x774>)
 80074dc:	f00e fa04 	bl	80158e8 <GUI_DrawNumAt>
 80074e0:	e043      	b.n	800756a <DisplayGui_Acceleration+0x7e2>
 80074e2:	bf00      	nop
 80074e4:	00d3d3d3 	.word	0x00d3d3d3
 80074e8:	08022384 	.word	0x08022384
 80074ec:	0812a104 	.word	0x0812a104
 80074f0:	2000041c 	.word	0x2000041c
 80074f4:	20002e10 	.word	0x20002e10
 80074f8:	08022354 	.word	0x08022354
 80074fc:	081249a8 	.word	0x081249a8
 8007500:	0802238c 	.word	0x0802238c
 8007504:	0812d360 	.word	0x0812d360
 8007508:	00ff8080 	.word	0x00ff8080
 800750c:	20000046 	.word	0x20000046
 8007510:	20000008 	.word	0x20000008
 8007514:	20002e28 	.word	0x20002e28
 8007518:	0812b6c8 	.word	0x0812b6c8
 800751c:	447a0000 	.word	0x447a0000
 8007520:	20002e40 	.word	0x20002e40
 8007524:	08022358 	.word	0x08022358
	else
		GUI_DrawNumAt(xt - 24, yt - 10, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &bestAccelerationTimeToDisplay, 2, 3, DISABLE, ENABLE, CENTER, a, b);
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	b29b      	uxth	r3, r3
 800752c:	3b18      	subs	r3, #24
 800752e:	b29b      	uxth	r3, r3
 8007530:	b218      	sxth	r0, r3
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	b29b      	uxth	r3, r3
 8007536:	3b0a      	subs	r3, #10
 8007538:	b29b      	uxth	r3, r3
 800753a:	b219      	sxth	r1, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	9308      	str	r3, [sp, #32]
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	9307      	str	r3, [sp, #28]
 8007544:	2302      	movs	r3, #2
 8007546:	9306      	str	r3, [sp, #24]
 8007548:	2301      	movs	r3, #1
 800754a:	9305      	str	r3, [sp, #20]
 800754c:	2300      	movs	r3, #0
 800754e:	9304      	str	r3, [sp, #16]
 8007550:	2303      	movs	r3, #3
 8007552:	9303      	str	r3, [sp, #12]
 8007554:	2302      	movs	r3, #2
 8007556:	9302      	str	r3, [sp, #8]
 8007558:	4ba7      	ldr	r3, [pc, #668]	; (80077f8 <DisplayGui_Acceleration+0xa70>)
 800755a:	9301      	str	r3, [sp, #4]
 800755c:	2300      	movs	r3, #0
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007564:	4aa5      	ldr	r2, [pc, #660]	; (80077fc <DisplayGui_Acceleration+0xa74>)
 8007566:	f00e f9bf 	bl	80158e8 <GUI_DrawNumAt>

	b = "";
 800756a:	4ba5      	ldr	r3, [pc, #660]	; (8007800 <DisplayGui_Acceleration+0xa78>)
 800756c:	60fb      	str	r3, [r7, #12]

	GUI_SetColor(GUI_LIGHTGRAY);
 800756e:	48a5      	ldr	r0, [pc, #660]	; (8007804 <DisplayGui_Acceleration+0xa7c>)
 8007570:	f015 fbdc 	bl	801cd2c <GUI_SetColor>

	xt = (480 - rectSizeX) - 2;
 8007574:	f44f 73b3 	mov.w	r3, #358	; 0x166
 8007578:	61fb      	str	r3, [r7, #28]
	yt = 21 + GUI_Y_OFFSET;
 800757a:	2325      	movs	r3, #37	; 0x25
 800757c:	61bb      	str	r3, [r7, #24]
	string = "Best 0-100";
 800757e:	4ba2      	ldr	r3, [pc, #648]	; (8007808 <DisplayGui_Acceleration+0xa80>)
 8007580:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font20_1);
 8007582:	48a2      	ldr	r0, [pc, #648]	; (800780c <DisplayGui_Acceleration+0xa84>)
 8007584:	f015 fba4 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 8007588:	69ba      	ldr	r2, [r7, #24]
 800758a:	69f9      	ldr	r1, [r7, #28]
 800758c:	6978      	ldr	r0, [r7, #20]
 800758e:	f016 faab 	bl	801dae8 <GUI_DispStringAt>


	x = (480 - 20) - rectSizeX;
 8007592:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8007596:	60bb      	str	r3, [r7, #8]
	y = 16 + GUI_Y_OFFSET;
 8007598:	2320      	movs	r3, #32
 800759a:	607b      	str	r3, [r7, #4]
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY) * 1.3 * rectAAfactor, rectRadius * rectAAfactor);
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	4613      	mov	r3, r2
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	4413      	add	r3, r2
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	4618      	mov	r0, r3
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	4613      	mov	r3, r2
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	4413      	add	r3, r2
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	4619      	mov	r1, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80075ba:	4613      	mov	r3, r2
 80075bc:	005b      	lsls	r3, r3, #1
 80075be:	4413      	add	r3, r2
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	461a      	mov	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3328      	adds	r3, #40	; 0x28
 80075c8:	ee07 3a90 	vmov	s15, r3
 80075cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80075d0:	ed9f 6b87 	vldr	d6, [pc, #540]	; 80077f0 <DisplayGui_Acceleration+0xa68>
 80075d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075d8:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80075dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075e0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80075e4:	2348      	movs	r3, #72	; 0x48
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	ee17 3a90 	vmov	r3, s15
 80075ec:	f017 fed6 	bl	801f39c <GUI_AA_DrawRoundedRect>

	// DRS BEGIN

	static uint8_t drsStatus_old = 0;

	xt = (480 - rectSizeX) - 17;
 80075f0:	f240 1357 	movw	r3, #343	; 0x157
 80075f4:	61fb      	str	r3, [r7, #28]
	//yt = 98 + GUI_Y_OFFSET;
	yt = 158 + GUI_Y_OFFSET;
 80075f6:	23ae      	movs	r3, #174	; 0xae
 80075f8:	61bb      	str	r3, [r7, #24]
	string = "DRS";
 80075fa:	4b85      	ldr	r3, [pc, #532]	; (8007810 <DisplayGui_Acceleration+0xa88>)
 80075fc:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font32_1);
 80075fe:	487f      	ldr	r0, [pc, #508]	; (80077fc <DisplayGui_Acceleration+0xa74>)
 8007600:	f015 fb66 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	69f9      	ldr	r1, [r7, #28]
 8007608:	6978      	ldr	r0, [r7, #20]
 800760a:	f016 fa6d 	bl	801dae8 <GUI_DispStringAt>

	xt += 60;
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	333c      	adds	r3, #60	; 0x3c
 8007612:	61fb      	str	r3, [r7, #28]

	if(drsStatus != drsStatus_old)
 8007614:	4b7f      	ldr	r3, [pc, #508]	; (8007814 <DisplayGui_Acceleration+0xa8c>)
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	461a      	mov	r2, r3
 800761a:	4b7f      	ldr	r3, [pc, #508]	; (8007818 <DisplayGui_Acceleration+0xa90>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	429a      	cmp	r2, r3
 8007620:	d00b      	beq.n	800763a <DisplayGui_Acceleration+0x8b2>
	{
		GUI_SetColor(GUI_BLACK);
 8007622:	2000      	movs	r0, #0
 8007624:	f015 fb82 	bl	801cd2c <GUI_SetColor>
		GUI_FillRect(xt, yt, xt + 54, yt + 28);
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	f103 0236 	add.w	r2, r3, #54	; 0x36
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	331c      	adds	r3, #28
 8007632:	69b9      	ldr	r1, [r7, #24]
 8007634:	69f8      	ldr	r0, [r7, #28]
 8007636:	f015 fc83 	bl	801cf40 <GUI_FillRect>
	}

	drsStatus_old = drsStatus;
 800763a:	4b77      	ldr	r3, [pc, #476]	; (8007818 <DisplayGui_Acceleration+0xa90>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	b2da      	uxtb	r2, r3
 8007640:	4b74      	ldr	r3, [pc, #464]	; (8007814 <DisplayGui_Acceleration+0xa8c>)
 8007642:	701a      	strb	r2, [r3, #0]

	switch(drsStatus)
 8007644:	4b74      	ldr	r3, [pc, #464]	; (8007818 <DisplayGui_Acceleration+0xa90>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <DisplayGui_Acceleration+0x8ca>
 800764c:	2b01      	cmp	r3, #1
 800764e:	d007      	beq.n	8007660 <DisplayGui_Acceleration+0x8d8>
 8007650:	e010      	b.n	8007674 <DisplayGui_Acceleration+0x8ec>
	{
		case 0:
			GUI_SetColor(GUI_WHITE);
 8007652:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007656:	f015 fb69 	bl	801cd2c <GUI_SetColor>
			string = "OFF";
 800765a:	4b70      	ldr	r3, [pc, #448]	; (800781c <DisplayGui_Acceleration+0xa94>)
 800765c:	617b      	str	r3, [r7, #20]
			break;
 800765e:	e00f      	b.n	8007680 <DisplayGui_Acceleration+0x8f8>

		case 1:
			GUI_SetColor(GUI_GREEN);
 8007660:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8007664:	f015 fb62 	bl	801cd2c <GUI_SetColor>
			string = "ON";
 8007668:	4b6d      	ldr	r3, [pc, #436]	; (8007820 <DisplayGui_Acceleration+0xa98>)
 800766a:	617b      	str	r3, [r7, #20]
			xt+=6;
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	3306      	adds	r3, #6
 8007670:	61fb      	str	r3, [r7, #28]
			break;
 8007672:	e005      	b.n	8007680 <DisplayGui_Acceleration+0x8f8>


		default:
			GUI_SetColor(GUI_RED);
 8007674:	20ff      	movs	r0, #255	; 0xff
 8007676:	f015 fb59 	bl	801cd2c <GUI_SetColor>
			string = "ERR";
 800767a:	4b6a      	ldr	r3, [pc, #424]	; (8007824 <DisplayGui_Acceleration+0xa9c>)
 800767c:	617b      	str	r3, [r7, #20]
			break;
 800767e:	bf00      	nop
	}

	GUI_DispStringAt(string, xt, yt);
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	69f9      	ldr	r1, [r7, #28]
 8007684:	6978      	ldr	r0, [r7, #20]
 8007686:	f016 fa2f 	bl	801dae8 <GUI_DispStringAt>

	if(drsStatus == 1)
 800768a:	4b63      	ldr	r3, [pc, #396]	; (8007818 <DisplayGui_Acceleration+0xa90>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d104      	bne.n	800769c <DisplayGui_Acceleration+0x914>
		GUI_SetColor(GUI_GREEN);
 8007692:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8007696:	f015 fb49 	bl	801cd2c <GUI_SetColor>
 800769a:	e002      	b.n	80076a2 <DisplayGui_Acceleration+0x91a>
	else
		GUI_SetColor(GUI_LIGHTGRAY);
 800769c:	4859      	ldr	r0, [pc, #356]	; (8007804 <DisplayGui_Acceleration+0xa7c>)
 800769e:	f015 fb45 	bl	801cd2c <GUI_SetColor>

	//y = 94 + GUI_Y_OFFSET;
	//x = (480 - 20) - rectSizeX;

	x = (480 - 20) - rectSizeX;
 80076a2:	f44f 73aa 	mov.w	r3, #340	; 0x154
 80076a6:	60bb      	str	r3, [r7, #8]
	y = 154 + GUI_Y_OFFSET;
 80076a8:	23aa      	movs	r3, #170	; 0xaa
 80076aa:	607b      	str	r3, [r7, #4]
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY) * rectAAfactor, rectRadius * rectAAfactor);
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	4613      	mov	r3, r2
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	4413      	add	r3, r2
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	4618      	mov	r0, r3
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	4613      	mov	r3, r2
 80076bc:	005b      	lsls	r3, r3, #1
 80076be:	4413      	add	r3, r2
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	4619      	mov	r1, r3
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80076ca:	4613      	mov	r3, r2
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	4413      	add	r3, r2
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	461c      	mov	r4, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80076da:	4613      	mov	r3, r2
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	4413      	add	r3, r2
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	461a      	mov	r2, r3
 80076e4:	2348      	movs	r3, #72	; 0x48
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	4613      	mov	r3, r2
 80076ea:	4622      	mov	r2, r4
 80076ec:	f017 fe56 	bl	801f39c <GUI_AA_DrawRoundedRect>
	// MAP BEGIN

	static uint8_t map_old = 0;


	GUI_SetColor(GUI_LIGHTGRAY);
 80076f0:	4844      	ldr	r0, [pc, #272]	; (8007804 <DisplayGui_Acceleration+0xa7c>)
 80076f2:	f015 fb1b 	bl	801cd2c <GUI_SetColor>
	xt = (480 - rectSizeX) - 17;
 80076f6:	f240 1357 	movw	r3, #343	; 0x157
 80076fa:	61fb      	str	r3, [r7, #28]
	//yt = 158 + GUI_Y_OFFSET;
	yt = 98 + GUI_Y_OFFSET;
 80076fc:	2372      	movs	r3, #114	; 0x72
 80076fe:	61bb      	str	r3, [r7, #24]
	string = "MAP";
 8007700:	4b49      	ldr	r3, [pc, #292]	; (8007828 <DisplayGui_Acceleration+0xaa0>)
 8007702:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font32_1);
 8007704:	483d      	ldr	r0, [pc, #244]	; (80077fc <DisplayGui_Acceleration+0xa74>)
 8007706:	f015 fae3 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	69f9      	ldr	r1, [r7, #28]
 800770e:	6978      	ldr	r0, [r7, #20]
 8007710:	f016 f9ea 	bl	801dae8 <GUI_DispStringAt>

	xt += 60;
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	333c      	adds	r3, #60	; 0x3c
 8007718:	61fb      	str	r3, [r7, #28]
	yt += 5;
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	3305      	adds	r3, #5
 800771e:	61bb      	str	r3, [r7, #24]

	if(map != map_old)
 8007720:	4b42      	ldr	r3, [pc, #264]	; (800782c <DisplayGui_Acceleration+0xaa4>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
 8007726:	4b42      	ldr	r3, [pc, #264]	; (8007830 <DisplayGui_Acceleration+0xaa8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	429a      	cmp	r2, r3
 800772c:	d00b      	beq.n	8007746 <DisplayGui_Acceleration+0x9be>
	{
		GUI_SetColor(GUI_BLACK);
 800772e:	2000      	movs	r0, #0
 8007730:	f015 fafc 	bl	801cd2c <GUI_SetColor>
		GUI_FillRect(xt, yt, xt + 54, yt + 28);
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	f103 0236 	add.w	r2, r3, #54	; 0x36
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	331c      	adds	r3, #28
 800773e:	69b9      	ldr	r1, [r7, #24]
 8007740:	69f8      	ldr	r0, [r7, #28]
 8007742:	f015 fbfd 	bl	801cf40 <GUI_FillRect>
	}

	map_old = map;
 8007746:	4b3a      	ldr	r3, [pc, #232]	; (8007830 <DisplayGui_Acceleration+0xaa8>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	b2da      	uxtb	r2, r3
 800774c:	4b37      	ldr	r3, [pc, #220]	; (800782c <DisplayGui_Acceleration+0xaa4>)
 800774e:	701a      	strb	r2, [r3, #0]


	//GUI_SetColor(GUI_WHITE);
	GUI_SetColor(GUI_RED);
 8007750:	20ff      	movs	r0, #255	; 0xff
 8007752:	f015 faeb 	bl	801cd2c <GUI_SetColor>
	GUI_SetFont(&GUI_Font24_1);
 8007756:	4837      	ldr	r0, [pc, #220]	; (8007834 <DisplayGui_Acceleration+0xaac>)
 8007758:	f015 faba 	bl	801ccd0 <GUI_SetFont>

	switch(map)
 800775c:	4b34      	ldr	r3, [pc, #208]	; (8007830 <DisplayGui_Acceleration+0xaa8>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b03      	cmp	r3, #3
 8007762:	d81b      	bhi.n	800779c <DisplayGui_Acceleration+0xa14>
 8007764:	a201      	add	r2, pc, #4	; (adr r2, 800776c <DisplayGui_Acceleration+0x9e4>)
 8007766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776a:	bf00      	nop
 800776c:	0800777d 	.word	0x0800777d
 8007770:	0800778b 	.word	0x0800778b
 8007774:	08007791 	.word	0x08007791
 8007778:	08007797 	.word	0x08007797
	{
		case 0:
			string = "BASE";
 800777c:	4b2e      	ldr	r3, [pc, #184]	; (8007838 <DisplayGui_Acceleration+0xab0>)
 800777e:	617b      	str	r3, [r7, #20]
			GUI_SetColor(GUI_GREEN);
 8007780:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8007784:	f015 fad2 	bl	801cd2c <GUI_SetColor>
			break;
 8007788:	e013      	b.n	80077b2 <DisplayGui_Acceleration+0xa2a>

		case 1:
			string = "ECO";
 800778a:	4b2c      	ldr	r3, [pc, #176]	; (800783c <DisplayGui_Acceleration+0xab4>)
 800778c:	617b      	str	r3, [r7, #20]
			break;
 800778e:	e010      	b.n	80077b2 <DisplayGui_Acceleration+0xa2a>

		case 2:
			string = "MAP2";
 8007790:	4b2b      	ldr	r3, [pc, #172]	; (8007840 <DisplayGui_Acceleration+0xab8>)
 8007792:	617b      	str	r3, [r7, #20]
			break;
 8007794:	e00d      	b.n	80077b2 <DisplayGui_Acceleration+0xa2a>

		case 3:
			string = "MAP3";
 8007796:	4b2b      	ldr	r3, [pc, #172]	; (8007844 <DisplayGui_Acceleration+0xabc>)
 8007798:	617b      	str	r3, [r7, #20]
			break;
 800779a:	e00a      	b.n	80077b2 <DisplayGui_Acceleration+0xa2a>

		default:
			string = "ERR";
 800779c:	4b21      	ldr	r3, [pc, #132]	; (8007824 <DisplayGui_Acceleration+0xa9c>)
 800779e:	617b      	str	r3, [r7, #20]
			GUI_SetColor(GUI_RED);
 80077a0:	20ff      	movs	r0, #255	; 0xff
 80077a2:	f015 fac3 	bl	801cd2c <GUI_SetColor>
			GUI_SetFont(&GUI_Font32_1);
 80077a6:	4815      	ldr	r0, [pc, #84]	; (80077fc <DisplayGui_Acceleration+0xa74>)
 80077a8:	f015 fa92 	bl	801ccd0 <GUI_SetFont>

			yt -= 5;
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	3b05      	subs	r3, #5
 80077b0:	61bb      	str	r3, [r7, #24]
	}


	GUI_DispStringAt(string, xt, yt);
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	69f9      	ldr	r1, [r7, #28]
 80077b6:	6978      	ldr	r0, [r7, #20]
 80077b8:	f016 f996 	bl	801dae8 <GUI_DispStringAt>

	static uint32_t millisMapBlink = 0;
	static uint8_t mapBlinkStatus = 0;

	switch(map)
 80077bc:	4b1c      	ldr	r3, [pc, #112]	; (8007830 <DisplayGui_Acceleration+0xaa8>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d103      	bne.n	80077cc <DisplayGui_Acceleration+0xa44>
	{
	case 0:
		//GUI_SetColor(GUI_LIGHTGRAY);
		mapBlinkStatus = 0;
 80077c4:	4b20      	ldr	r3, [pc, #128]	; (8007848 <DisplayGui_Acceleration+0xac0>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	701a      	strb	r2, [r3, #0]
		break;
 80077ca:	e003      	b.n	80077d4 <DisplayGui_Acceleration+0xa4c>
	case 1:
	case 2:
	case 3:
	default:

		mapBlinkStatus = 1;
 80077cc:	4b1e      	ldr	r3, [pc, #120]	; (8007848 <DisplayGui_Acceleration+0xac0>)
 80077ce:	2201      	movs	r2, #1
 80077d0:	701a      	strb	r2, [r3, #0]

		break;
 80077d2:	bf00      	nop
	}


	if(mapBlinkStatus == 1 && blinkClock == 1)
 80077d4:	4b1c      	ldr	r3, [pc, #112]	; (8007848 <DisplayGui_Acceleration+0xac0>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d139      	bne.n	8007850 <DisplayGui_Acceleration+0xac8>
 80077dc:	4b1b      	ldr	r3, [pc, #108]	; (800784c <DisplayGui_Acceleration+0xac4>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d135      	bne.n	8007850 <DisplayGui_Acceleration+0xac8>
		GUI_SetColor(GUI_RED);
 80077e4:	20ff      	movs	r0, #255	; 0xff
 80077e6:	f015 faa1 	bl	801cd2c <GUI_SetColor>
 80077ea:	e034      	b.n	8007856 <DisplayGui_Acceleration+0xace>
 80077ec:	f3af 8000 	nop.w
 80077f0:	cccccccd 	.word	0xcccccccd
 80077f4:	3ff4cccc 	.word	0x3ff4cccc
 80077f8:	20002e40 	.word	0x20002e40
 80077fc:	081249a8 	.word	0x081249a8
 8007800:	08022354 	.word	0x08022354
 8007804:	00d3d3d3 	.word	0x00d3d3d3
 8007808:	08022394 	.word	0x08022394
 800780c:	0812b6c8 	.word	0x0812b6c8
 8007810:	080223a0 	.word	0x080223a0
 8007814:	20002e58 	.word	0x20002e58
 8007818:	20002d38 	.word	0x20002d38
 800781c:	0802236c 	.word	0x0802236c
 8007820:	080223a4 	.word	0x080223a4
 8007824:	08022380 	.word	0x08022380
 8007828:	080223a8 	.word	0x080223a8
 800782c:	20002e59 	.word	0x20002e59
 8007830:	20002d3c 	.word	0x20002d3c
 8007834:	0812a104 	.word	0x0812a104
 8007838:	080223ac 	.word	0x080223ac
 800783c:	080223b4 	.word	0x080223b4
 8007840:	080223b8 	.word	0x080223b8
 8007844:	080223c0 	.word	0x080223c0
 8007848:	20002e5a 	.word	0x20002e5a
 800784c:	20002de4 	.word	0x20002de4
	else
		GUI_SetColor(GUI_LIGHTGRAY);
 8007850:	48a9      	ldr	r0, [pc, #676]	; (8007af8 <DisplayGui_Acceleration+0xd70>)
 8007852:	f015 fa6b 	bl	801cd2c <GUI_SetColor>

	//GUI_SetColor(GUI_LIGHTGRAY);
	//x = (480 - 20) - rectSizeX;
	//y = 154 + GUI_Y_OFFSET;

	y = 94 + GUI_Y_OFFSET;
 8007856:	236e      	movs	r3, #110	; 0x6e
 8007858:	607b      	str	r3, [r7, #4]
	x = (480 - 20) - rectSizeX;
 800785a:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800785e:	60bb      	str	r3, [r7, #8]
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY) * rectAAfactor, rectRadius * rectAAfactor);
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	4613      	mov	r3, r2
 8007864:	005b      	lsls	r3, r3, #1
 8007866:	4413      	add	r3, r2
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	4618      	mov	r0, r3
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	4613      	mov	r3, r2
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	4413      	add	r3, r2
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	4619      	mov	r1, r3
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800787e:	4613      	mov	r3, r2
 8007880:	005b      	lsls	r3, r3, #1
 8007882:	4413      	add	r3, r2
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	461c      	mov	r4, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800788e:	4613      	mov	r3, r2
 8007890:	005b      	lsls	r3, r3, #1
 8007892:	4413      	add	r3, r2
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	461a      	mov	r2, r3
 8007898:	2348      	movs	r3, #72	; 0x48
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	4613      	mov	r3, r2
 800789e:	4622      	mov	r2, r4
 80078a0:	f017 fd7c 	bl	801f39c <GUI_AA_DrawRoundedRect>
	// MAP END


	// T oil BEGIN

	GUI_SetColor(GUI_LIGHTBLUE);
 80078a4:	4895      	ldr	r0, [pc, #596]	; (8007afc <DisplayGui_Acceleration+0xd74>)
 80078a6:	f015 fa41 	bl	801cd2c <GUI_SetColor>

	xt = (480 - rectSizeX) - 12;
 80078aa:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 80078ae:	61fb      	str	r3, [r7, #28]
	yt = 221 + GUI_Y_OFFSET;
 80078b0:	23ed      	movs	r3, #237	; 0xed
 80078b2:	61bb      	str	r3, [r7, #24]
	string = "T OIL";
 80078b4:	4b92      	ldr	r3, [pc, #584]	; (8007b00 <DisplayGui_Acceleration+0xd78>)
 80078b6:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font16_1);
 80078b8:	4892      	ldr	r0, [pc, #584]	; (8007b04 <DisplayGui_Acceleration+0xd7c>)
 80078ba:	f015 fa09 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	69f9      	ldr	r1, [r7, #28]
 80078c2:	6978      	ldr	r0, [r7, #20]
 80078c4:	f016 f910 	bl	801dae8 <GUI_DispStringAt>

	static GUI_DrawNumAtTypeDef tAirDisp = {0};

	if(dataRefresh == 1)
 80078c8:	4b8f      	ldr	r3, [pc, #572]	; (8007b08 <DisplayGui_Acceleration+0xd80>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d109      	bne.n	80078e4 <DisplayGui_Acceleration+0xb5c>
		tAirDisp.number = CAR_Data.oilTemp.floatData;
 80078d0:	4b8e      	ldr	r3, [pc, #568]	; (8007b0c <DisplayGui_Acceleration+0xd84>)
 80078d2:	f203 5324 	addw	r3, r3, #1316	; 0x524
 80078d6:	edd3 7a00 	vldr	s15, [r3]
 80078da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80078de:	4b8c      	ldr	r3, [pc, #560]	; (8007b10 <DisplayGui_Acceleration+0xd88>)
 80078e0:	ed83 7b00 	vstr	d7, [r3]

	xt+= 60;
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	333c      	adds	r3, #60	; 0x3c
 80078e8:	61fb      	str	r3, [r7, #28]
	yt-= 2;
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	3b02      	subs	r3, #2
 80078ee:	61bb      	str	r3, [r7, #24]
	GUI_DrawNumAt(xt, yt, &GUI_Font20_1, GUI_LIGHTGRAY, GUI_BLACK, &tAirDisp, 2, 1, DISABLE, DISABLE, CENTER, a, b);
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	b218      	sxth	r0, r3
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	b219      	sxth	r1, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	9308      	str	r3, [sp, #32]
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	9307      	str	r3, [sp, #28]
 8007900:	2302      	movs	r3, #2
 8007902:	9306      	str	r3, [sp, #24]
 8007904:	2300      	movs	r3, #0
 8007906:	9305      	str	r3, [sp, #20]
 8007908:	2300      	movs	r3, #0
 800790a:	9304      	str	r3, [sp, #16]
 800790c:	2301      	movs	r3, #1
 800790e:	9303      	str	r3, [sp, #12]
 8007910:	2302      	movs	r3, #2
 8007912:	9302      	str	r3, [sp, #8]
 8007914:	4b7e      	ldr	r3, [pc, #504]	; (8007b10 <DisplayGui_Acceleration+0xd88>)
 8007916:	9301      	str	r3, [sp, #4]
 8007918:	2300      	movs	r3, #0
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	4b76      	ldr	r3, [pc, #472]	; (8007af8 <DisplayGui_Acceleration+0xd70>)
 800791e:	4a7d      	ldr	r2, [pc, #500]	; (8007b14 <DisplayGui_Acceleration+0xd8c>)
 8007920:	f00d ffe2 	bl	80158e8 <GUI_DrawNumAt>

	x = (480 - 20) - rectSizeX;
 8007924:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8007928:	60bb      	str	r3, [r7, #8]
	y = 214 + GUI_Y_OFFSET;
 800792a:	23e6      	movs	r3, #230	; 0xe6
 800792c:	607b      	str	r3, [r7, #4]
	GUI_SetColor(GUI_LIGHTBLUE);
 800792e:	4873      	ldr	r0, [pc, #460]	; (8007afc <DisplayGui_Acceleration+0xd74>)
 8007930:	f015 f9fc 	bl	801cd2c <GUI_SetColor>
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX - 24) * rectAAfactor, (y + rectSizeY - 10) * rectAAfactor, rectRadius * rectAAfactor);
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	4613      	mov	r3, r2
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	4413      	add	r3, r2
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	4618      	mov	r0, r3
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	4413      	add	r3, r2
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	4619      	mov	r1, r3
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8007952:	4613      	mov	r3, r2
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	4413      	add	r3, r2
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	461c      	mov	r4, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f103 021e 	add.w	r2, r3, #30
 8007962:	4613      	mov	r3, r2
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	4413      	add	r3, r2
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	461a      	mov	r2, r3
 800796c:	2348      	movs	r3, #72	; 0x48
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	4613      	mov	r3, r2
 8007972:	4622      	mov	r2, r4
 8007974:	f017 fd12 	bl	801f39c <GUI_AA_DrawRoundedRect>

	#else			//very big rpm whitout other texts or lines

		static uint16_t rpm_old = 0;

		GUI_SetColor(GUI_LIGHTBLUE);
 8007978:	4860      	ldr	r0, [pc, #384]	; (8007afc <DisplayGui_Acceleration+0xd74>)
 800797a:	f015 f9d7 	bl	801cd2c <GUI_SetColor>


		xt = 480 / 2 - 50 + 2;
 800797e:	23c0      	movs	r3, #192	; 0xc0
 8007980:	61fb      	str	r3, [r7, #28]
		yt = 210 + GUI_Y_OFFSET - 190;
 8007982:	2324      	movs	r3, #36	; 0x24
 8007984:	61bb      	str	r3, [r7, #24]

		if(rpm_old >= 10000 && CAR_Data.rpm.intData < 10000)
 8007986:	4b64      	ldr	r3, [pc, #400]	; (8007b18 <DisplayGui_Acceleration+0xd90>)
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	f242 720f 	movw	r2, #9999	; 0x270f
 800798e:	4293      	cmp	r3, r2
 8007990:	d915      	bls.n	80079be <DisplayGui_Acceleration+0xc36>
 8007992:	4b5e      	ldr	r3, [pc, #376]	; (8007b0c <DisplayGui_Acceleration+0xd84>)
 8007994:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8007998:	f242 720f 	movw	r2, #9999	; 0x270f
 800799c:	4293      	cmp	r3, r2
 800799e:	dc0e      	bgt.n	80079be <DisplayGui_Acceleration+0xc36>
		{
			GUI_SetColor(GUI_BLACK);
 80079a0:	2000      	movs	r0, #0
 80079a2:	f015 f9c3 	bl	801cd2c <GUI_SetColor>
			GUI_FillRect(xt - 14, yt - 2, xt + 110, yt + 32);
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	f1a3 000e 	sub.w	r0, r3, #14
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	1e99      	subs	r1, r3, #2
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	3320      	adds	r3, #32
 80079ba:	f015 fac1 	bl	801cf40 <GUI_FillRect>
		}

		GUI_SetColor(GUI_WHITE);
 80079be:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80079c2:	f015 f9b3 	bl	801cd2c <GUI_SetColor>
		GUI_SetFont(&GUI_FontD32);
 80079c6:	4855      	ldr	r0, [pc, #340]	; (8007b1c <DisplayGui_Acceleration+0xd94>)
 80079c8:	f015 f982 	bl	801ccd0 <GUI_SetFont>

		switch(CAR_Data.gear.intData)
 80079cc:	4b4f      	ldr	r3, [pc, #316]	; (8007b0c <DisplayGui_Acceleration+0xd84>)
 80079ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d87d      	bhi.n	8007ad2 <DisplayGui_Acceleration+0xd4a>
 80079d6:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <DisplayGui_Acceleration+0xc54>)
 80079d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079dc:	080079ed 	.word	0x080079ed
 80079e0:	08007a13 	.word	0x08007a13
 80079e4:	08007a4f 	.word	0x08007a4f
 80079e8:	08007a89 	.word	0x08007a89
		{
			case 0:
				if(CAR_Data.rpm.intData >= 9200 && CAR_Data.rpm.intData <= 10800)		//lounch
 80079ec:	4b47      	ldr	r3, [pc, #284]	; (8007b0c <DisplayGui_Acceleration+0xd84>)
 80079ee:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80079f2:	f242 32ef 	movw	r2, #9199	; 0x23ef
 80079f6:	4293      	cmp	r3, r2
 80079f8:	dd64      	ble.n	8007ac4 <DisplayGui_Acceleration+0xd3c>
 80079fa:	4b44      	ldr	r3, [pc, #272]	; (8007b0c <DisplayGui_Acceleration+0xd84>)
 80079fc:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8007a00:	f642 2230 	movw	r2, #10800	; 0x2a30
 8007a04:	4293      	cmp	r3, r2
 8007a06:	dc5d      	bgt.n	8007ac4 <DisplayGui_Acceleration+0xd3c>
					GUI_SetColor(GUI_GREEN);
 8007a08:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8007a0c:	f015 f98e 	bl	801cd2c <GUI_SetColor>
				break;
 8007a10:	e058      	b.n	8007ac4 <DisplayGui_Acceleration+0xd3c>

			case 1:
				if(CAR_Data.rpm.intData >= 9400 && CAR_Data.rpm.intData <= 10900)
 8007a12:	4b3e      	ldr	r3, [pc, #248]	; (8007b0c <DisplayGui_Acceleration+0xd84>)
 8007a14:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8007a18:	f242 42b7 	movw	r2, #9399	; 0x24b7
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	dd0a      	ble.n	8007a36 <DisplayGui_Acceleration+0xcae>
 8007a20:	4b3a      	ldr	r3, [pc, #232]	; (8007b0c <DisplayGui_Acceleration+0xd84>)
 8007a22:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8007a26:	f642 2294 	movw	r2, #10900	; 0x2a94
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	dc03      	bgt.n	8007a36 <DisplayGui_Acceleration+0xcae>
					GUI_SetColor(GUI_GREEN);
 8007a2e:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8007a32:	f015 f97b 	bl	801cd2c <GUI_SetColor>
				if(CAR_Data.rpm.intData > 10900)
 8007a36:	4b35      	ldr	r3, [pc, #212]	; (8007b0c <DisplayGui_Acceleration+0xd84>)
 8007a38:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8007a3c:	f642 2294 	movw	r2, #10900	; 0x2a94
 8007a40:	4293      	cmp	r3, r2
 8007a42:	dd41      	ble.n	8007ac8 <DisplayGui_Acceleration+0xd40>
					GUI_SetColor(GUI_ORANGE);
 8007a44:	f24a 50ff 	movw	r0, #42495	; 0xa5ff
 8007a48:	f015 f970 	bl	801cd2c <GUI_SetColor>
				break;
 8007a4c:	e03c      	b.n	8007ac8 <DisplayGui_Acceleration+0xd40>

			case 2:
				if(CAR_Data.rpm.intData >= 9600 && CAR_Data.rpm.intData <= 10800)		//200 ms before 10500 (9600 rpm)
 8007a4e:	4b2f      	ldr	r3, [pc, #188]	; (8007b0c <DisplayGui_Acceleration+0xd84>)
 8007a50:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8007a54:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8007a58:	db0a      	blt.n	8007a70 <DisplayGui_Acceleration+0xce8>
 8007a5a:	4b2c      	ldr	r3, [pc, #176]	; (8007b0c <DisplayGui_Acceleration+0xd84>)
 8007a5c:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8007a60:	f642 2230 	movw	r2, #10800	; 0x2a30
 8007a64:	4293      	cmp	r3, r2
 8007a66:	dc03      	bgt.n	8007a70 <DisplayGui_Acceleration+0xce8>
					GUI_SetColor(GUI_GREEN);
 8007a68:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8007a6c:	f015 f95e 	bl	801cd2c <GUI_SetColor>
				if(CAR_Data.rpm.intData > 10800)
 8007a70:	4b26      	ldr	r3, [pc, #152]	; (8007b0c <DisplayGui_Acceleration+0xd84>)
 8007a72:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8007a76:	f642 2230 	movw	r2, #10800	; 0x2a30
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	dd26      	ble.n	8007acc <DisplayGui_Acceleration+0xd44>
					GUI_SetColor(GUI_ORANGE);
 8007a7e:	f24a 50ff 	movw	r0, #42495	; 0xa5ff
 8007a82:	f015 f953 	bl	801cd2c <GUI_SetColor>
				break;
 8007a86:	e021      	b.n	8007acc <DisplayGui_Acceleration+0xd44>

			case 3:
				if(CAR_Data.rpm.intData >= 10000 && CAR_Data.rpm.intData <= 10700)		//200 ms before 10500 (10000 rpm)
 8007a88:	4b20      	ldr	r3, [pc, #128]	; (8007b0c <DisplayGui_Acceleration+0xd84>)
 8007a8a:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8007a8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8007a92:	4293      	cmp	r3, r2
 8007a94:	dd0a      	ble.n	8007aac <DisplayGui_Acceleration+0xd24>
 8007a96:	4b1d      	ldr	r3, [pc, #116]	; (8007b0c <DisplayGui_Acceleration+0xd84>)
 8007a98:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8007a9c:	f642 12cc 	movw	r2, #10700	; 0x29cc
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	dc03      	bgt.n	8007aac <DisplayGui_Acceleration+0xd24>
					GUI_SetColor(GUI_GREEN);
 8007aa4:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8007aa8:	f015 f940 	bl	801cd2c <GUI_SetColor>
				if(CAR_Data.rpm.intData > 10700)
 8007aac:	4b17      	ldr	r3, [pc, #92]	; (8007b0c <DisplayGui_Acceleration+0xd84>)
 8007aae:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8007ab2:	f642 12cc 	movw	r2, #10700	; 0x29cc
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	dd0a      	ble.n	8007ad0 <DisplayGui_Acceleration+0xd48>
					GUI_SetColor(GUI_ORANGE);
 8007aba:	f24a 50ff 	movw	r0, #42495	; 0xa5ff
 8007abe:	f015 f935 	bl	801cd2c <GUI_SetColor>
				break;
 8007ac2:	e005      	b.n	8007ad0 <DisplayGui_Acceleration+0xd48>
				break;
 8007ac4:	bf00      	nop
 8007ac6:	e004      	b.n	8007ad2 <DisplayGui_Acceleration+0xd4a>
				break;
 8007ac8:	bf00      	nop
 8007aca:	e002      	b.n	8007ad2 <DisplayGui_Acceleration+0xd4a>
				break;
 8007acc:	bf00      	nop
 8007ace:	e000      	b.n	8007ad2 <DisplayGui_Acceleration+0xd4a>
				break;
 8007ad0:	bf00      	nop
		}

		if(CAR_Data.rpm.intData < 10000)
 8007ad2:	4b0e      	ldr	r3, [pc, #56]	; (8007b0c <DisplayGui_Acceleration+0xd84>)
 8007ad4:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8007ad8:	f242 720f 	movw	r2, #9999	; 0x270f
 8007adc:	4293      	cmp	r3, r2
 8007ade:	dc1f      	bgt.n	8007b20 <DisplayGui_Acceleration+0xd98>
		{
			//xt+= 48;
			GUI_DispDecAt(CAR_Data.rpm.intData, xt, yt, 4);
 8007ae0:	4b0a      	ldr	r3, [pc, #40]	; (8007b0c <DisplayGui_Acceleration+0xd84>)
 8007ae2:	f8d3 0230 	ldr.w	r0, [r3, #560]	; 0x230
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	b219      	sxth	r1, r3
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	b21a      	sxth	r2, r3
 8007aee:	2304      	movs	r3, #4
 8007af0:	f015 f82c 	bl	801cb4c <GUI_DispDecAt>
 8007af4:	e021      	b.n	8007b3a <DisplayGui_Acceleration+0xdb2>
 8007af6:	bf00      	nop
 8007af8:	00d3d3d3 	.word	0x00d3d3d3
 8007afc:	00ff8080 	.word	0x00ff8080
 8007b00:	080223c8 	.word	0x080223c8
 8007b04:	0812d360 	.word	0x0812d360
 8007b08:	20000046 	.word	0x20000046
 8007b0c:	2000041c 	.word	0x2000041c
 8007b10:	20002e60 	.word	0x20002e60
 8007b14:	0812b6c8 	.word	0x0812b6c8
 8007b18:	20002e78 	.word	0x20002e78
 8007b1c:	08120990 	.word	0x08120990
		}
		else
		{
			xt-= 12;
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	3b0c      	subs	r3, #12
 8007b24:	61fb      	str	r3, [r7, #28]
			GUI_DispDecAt(CAR_Data.rpm.intData, xt, yt, 5);
 8007b26:	4b24      	ldr	r3, [pc, #144]	; (8007bb8 <DisplayGui_Acceleration+0xe30>)
 8007b28:	f8d3 0230 	ldr.w	r0, [r3, #560]	; 0x230
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	b219      	sxth	r1, r3
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	b21a      	sxth	r2, r3
 8007b34:	2305      	movs	r3, #5
 8007b36:	f015 f809 	bl	801cb4c <GUI_DispDecAt>
		}

		rpm_old = CAR_Data.rpm.intData;
 8007b3a:	4b1f      	ldr	r3, [pc, #124]	; (8007bb8 <DisplayGui_Acceleration+0xe30>)
 8007b3c:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	4b1e      	ldr	r3, [pc, #120]	; (8007bbc <DisplayGui_Acceleration+0xe34>)
 8007b44:	801a      	strh	r2, [r3, #0]
	//GUI_DrawTimeAt(480/2, 164, &GUI_Font32_1, GUI_LIGHTGRAY, GUI_BLACK, &timeToDisplay, TIME_FORMAT_HOURS, 3, DISABLE, CENTER);


	static GUI_BarTypeDef throttleBar = {0};

	throttleBar.x = 480/2 - 140/2;
 8007b46:	4b1e      	ldr	r3, [pc, #120]	; (8007bc0 <DisplayGui_Acceleration+0xe38>)
 8007b48:	22aa      	movs	r2, #170	; 0xaa
 8007b4a:	801a      	strh	r2, [r3, #0]
	throttleBar.y = 180 + 50;
 8007b4c:	4b1c      	ldr	r3, [pc, #112]	; (8007bc0 <DisplayGui_Acceleration+0xe38>)
 8007b4e:	22e6      	movs	r2, #230	; 0xe6
 8007b50:	805a      	strh	r2, [r3, #2]
	throttleBar.size_x = 140;
 8007b52:	4b1b      	ldr	r3, [pc, #108]	; (8007bc0 <DisplayGui_Acceleration+0xe38>)
 8007b54:	228c      	movs	r2, #140	; 0x8c
 8007b56:	809a      	strh	r2, [r3, #4]
	throttleBar.size_y = 10;
 8007b58:	4b19      	ldr	r3, [pc, #100]	; (8007bc0 <DisplayGui_Acceleration+0xe38>)
 8007b5a:	220a      	movs	r2, #10
 8007b5c:	80da      	strh	r2, [r3, #6]
	throttleBar.frameSize = 1;
 8007b5e:	4b18      	ldr	r3, [pc, #96]	; (8007bc0 <DisplayGui_Acceleration+0xe38>)
 8007b60:	2201      	movs	r2, #1
 8007b62:	761a      	strb	r2, [r3, #24]
	throttleBar.frameColor = GUI_LIGHTGREEN;
 8007b64:	4b16      	ldr	r3, [pc, #88]	; (8007bc0 <DisplayGui_Acceleration+0xe38>)
 8007b66:	4a17      	ldr	r2, [pc, #92]	; (8007bc4 <DisplayGui_Acceleration+0xe3c>)
 8007b68:	61da      	str	r2, [r3, #28]
	throttleBar.backgroundColor = GUI_BLACK;
 8007b6a:	4b15      	ldr	r3, [pc, #84]	; (8007bc0 <DisplayGui_Acceleration+0xe38>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	625a      	str	r2, [r3, #36]	; 0x24
	throttleBar.barColor = GUI_GREEN;
 8007b70:	4b13      	ldr	r3, [pc, #76]	; (8007bc0 <DisplayGui_Acceleration+0xe38>)
 8007b72:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8007b76:	621a      	str	r2, [r3, #32]
	throttleBar.barMode = GUI_BAR_LTR;
 8007b78:	4b11      	ldr	r3, [pc, #68]	; (8007bc0 <DisplayGui_Acceleration+0xe38>)
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	721a      	strb	r2, [r3, #8]
	//throttleBar.maxValue = 100;
	throttleBar.maxValue = 95;
 8007b7e:	4b10      	ldr	r3, [pc, #64]	; (8007bc0 <DisplayGui_Acceleration+0xe38>)
 8007b80:	4a11      	ldr	r2, [pc, #68]	; (8007bc8 <DisplayGui_Acceleration+0xe40>)
 8007b82:	611a      	str	r2, [r3, #16]
	//throttleBar.minValue = 0;
	throttleBar.minValue = 5;
 8007b84:	4b0e      	ldr	r3, [pc, #56]	; (8007bc0 <DisplayGui_Acceleration+0xe38>)
 8007b86:	4a11      	ldr	r2, [pc, #68]	; (8007bcc <DisplayGui_Acceleration+0xe44>)
 8007b88:	615a      	str	r2, [r3, #20]

	GUI_Bar(&throttleBar, CAR_Data.pedal.intData);
 8007b8a:	4b0b      	ldr	r3, [pc, #44]	; (8007bb8 <DisplayGui_Acceleration+0xe30>)
 8007b8c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8007b90:	ee07 3a90 	vmov	s15, r3
 8007b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b98:	eeb0 0a67 	vmov.f32	s0, s15
 8007b9c:	4808      	ldr	r0, [pc, #32]	; (8007bc0 <DisplayGui_Acceleration+0xe38>)
 8007b9e:	f00d f911 	bl	8014dc4 <GUI_Bar>
	//GUI_Bar(&throttleBar, pippo);

	DisplayGui_AccelerationArmature();
 8007ba2:	f000 f817 	bl	8007bd4 <DisplayGui_AccelerationArmature>


	dataRefresh = 0;
 8007ba6:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <DisplayGui_Acceleration+0xe48>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	701a      	strb	r2, [r3, #0]

	//CORE FUNCTION END

	DisplayGui_Acceleration_END:;
}
 8007bac:	bf00      	nop
 8007bae:	bf00      	nop
 8007bb0:	3724      	adds	r7, #36	; 0x24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd90      	pop	{r4, r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	2000041c 	.word	0x2000041c
 8007bbc:	20002e78 	.word	0x20002e78
 8007bc0:	20002e7c 	.word	0x20002e7c
 8007bc4:	0080ff80 	.word	0x0080ff80
 8007bc8:	42be0000 	.word	0x42be0000
 8007bcc:	40a00000 	.word	0x40a00000
 8007bd0:	20000046 	.word	0x20000046

08007bd4 <DisplayGui_AccelerationArmature>:



void DisplayGui_AccelerationArmature(void)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	af00      	add	r7, sp, #0
	GUI_SetColor(GUI_WHITE);
 8007bd8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007bdc:	f015 f8a6 	bl	801cd2c <GUI_SetColor>

	//main rect (frame)
	GUI_DrawRect(1, 1, 479, 271);
 8007be0:	f240 130f 	movw	r3, #271	; 0x10f
 8007be4:	f240 12df 	movw	r2, #479	; 0x1df
 8007be8:	2101      	movs	r1, #1
 8007bea:	2001      	movs	r0, #1
 8007bec:	f017 f932 	bl	801ee54 <GUI_DrawRect>
	GUI_DrawRect(2, 2, 478, 270);
 8007bf0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8007bf4:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8007bf8:	2102      	movs	r1, #2
 8007bfa:	2002      	movs	r0, #2
 8007bfc:	f017 f92a 	bl	801ee54 <GUI_DrawRect>
}
 8007c00:	bf00      	nop
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <DisplayGui_Acceleration_Intro>:


void DisplayGui_Acceleration_Intro(void)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	af00      	add	r7, sp, #0
	DisplayGui_AccelerationArmature();
 8007c08:	f7ff ffe4 	bl	8007bd4 <DisplayGui_AccelerationArmature>

	GUI_SetColor(GUI_WHITE);
 8007c0c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007c10:	f015 f88c 	bl	801cd2c <GUI_SetColor>
	GUI_SetFont(&GUI_Font32B_1);
 8007c14:	4808      	ldr	r0, [pc, #32]	; (8007c38 <DisplayGui_Acceleration_Intro+0x34>)
 8007c16:	f015 f85b 	bl	801ccd0 <GUI_SetFont>

	//GUI_SetFont(&GUI_FontD80);
	//GUI_DispDecAt(2, 214, 90, 1);

	//GUI_DispStringAt("ACCELERATION", 130, 90);
	GUI_DispStringAt("ACCELERATION", 130, 100);
 8007c1a:	2264      	movs	r2, #100	; 0x64
 8007c1c:	2182      	movs	r1, #130	; 0x82
 8007c1e:	4807      	ldr	r0, [pc, #28]	; (8007c3c <DisplayGui_Acceleration_Intro+0x38>)
 8007c20:	f015 ff62 	bl	801dae8 <GUI_DispStringAt>

	GUI_SetColor(GUI_WHITE);
 8007c24:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007c28:	f015 f880 	bl	801cd2c <GUI_SetColor>
	GUI_SetBkColor(GUI_BLACK);
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	f015 f87b 	bl	801cd28 <GUI_SetBkColor>
}
 8007c32:	bf00      	nop
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	08127b30 	.word	0x08127b30
 8007c3c:	080223d0 	.word	0x080223d0

08007c40 <DisplayGui_CarSetup>:

float steerGreenPoints1[steerGreenPoints1Number] = {5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80};


void DisplayGui_CarSetup(void)
{
 8007c40:	b590      	push	{r4, r7, lr}
 8007c42:	b08b      	sub	sp, #44	; 0x2c
 8007c44:	af00      	add	r7, sp, #0
	// Intro section BEGIN
	static uint32_t millisGuiIntro = 0;
	static uint8_t introStatus = 0;

	if(selectedGui_old != GuiCarSetup)
 8007c46:	4b8e      	ldr	r3, [pc, #568]	; (8007e80 <DisplayGui_CarSetup+0x240>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	2b33      	cmp	r3, #51	; 0x33
 8007c4c:	d008      	beq.n	8007c60 <DisplayGui_CarSetup+0x20>
	{
		introStatus = 1;
 8007c4e:	4b8d      	ldr	r3, [pc, #564]	; (8007e84 <DisplayGui_CarSetup+0x244>)
 8007c50:	2201      	movs	r2, #1
 8007c52:	701a      	strb	r2, [r3, #0]
		millisGuiIntro = millis;
 8007c54:	4b8c      	ldr	r3, [pc, #560]	; (8007e88 <DisplayGui_CarSetup+0x248>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a8c      	ldr	r2, [pc, #560]	; (8007e8c <DisplayGui_CarSetup+0x24c>)
 8007c5a:	6013      	str	r3, [r2, #0]

		GUI_Clear();
 8007c5c:	f016 f912 	bl	801de84 <GUI_Clear>
	}

	if(introStatus == 1)
 8007c60:	4b88      	ldr	r3, [pc, #544]	; (8007e84 <DisplayGui_CarSetup+0x244>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d10f      	bne.n	8007c88 <DisplayGui_CarSetup+0x48>
	{
		if(millis < millisGuiIntro + DISPLAY_GUI_INTRO_TIME)
 8007c68:	4b88      	ldr	r3, [pc, #544]	; (8007e8c <DisplayGui_CarSetup+0x24c>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 8007c70:	4b85      	ldr	r3, [pc, #532]	; (8007e88 <DisplayGui_CarSetup+0x248>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d902      	bls.n	8007c7e <DisplayGui_CarSetup+0x3e>
		{
			DisplayGui_Intro();
 8007c78:	f000 fa4a 	bl	8008110 <DisplayGui_Intro>
			goto DisplayGui_END;
 8007c7c:	e229      	b.n	80080d2 <DisplayGui_CarSetup+0x492>
		}
		else
		{
			introStatus = 0;
 8007c7e:	4b81      	ldr	r3, [pc, #516]	; (8007e84 <DisplayGui_CarSetup+0x244>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	701a      	strb	r2, [r3, #0]
			GUI_Clear();
 8007c84:	f016 f8fe 	bl	801de84 <GUI_Clear>
		}
	}

	// Intro section END

	DisplayGui_DataInit();
 8007c88:	f000 fa32 	bl	80080f0 <DisplayGui_DataInit>


	static int steerAngleIntOld = 0;
	static uint8_t signOld = 0;

	int x = 8;
 8007c8c:	2308      	movs	r3, #8
 8007c8e:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 130;
 8007c90:	2382      	movs	r3, #130	; 0x82
 8007c92:	613b      	str	r3, [r7, #16]

	int xDelta = 0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	623b      	str	r3, [r7, #32]

	static int signSize = 70;
	static int signThick = 12;

	uint8_t flagDataInRandge = 0;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	77fb      	strb	r3, [r7, #31]

	float steerAngle = map_float(CAR_Data.steer.intData, steer_MIN_VALUE, steer_MAX_VALUE, -117, 117);
 8007c9c:	4b7c      	ldr	r3, [pc, #496]	; (8007e90 <DisplayGui_CarSetup+0x250>)
 8007c9e:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8007ca2:	ee07 3a90 	vmov	s15, r3
 8007ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007caa:	ed9f 2a7a 	vldr	s4, [pc, #488]	; 8007e94 <DisplayGui_CarSetup+0x254>
 8007cae:	eddf 1a7a 	vldr	s3, [pc, #488]	; 8007e98 <DisplayGui_CarSetup+0x258>
 8007cb2:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 8007e9c <DisplayGui_CarSetup+0x25c>
 8007cb6:	eddf 0a7a 	vldr	s1, [pc, #488]	; 8007ea0 <DisplayGui_CarSetup+0x260>
 8007cba:	eeb0 0a67 	vmov.f32	s0, s15
 8007cbe:	f00c fe1c 	bl	80148fa <map_float>
 8007cc2:	ed87 0a06 	vstr	s0, [r7, #24]

	//steerAngle = (float)CAR_Data.steer.intData/10;

	uint8_t sign = 0;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	75fb      	strb	r3, [r7, #23]

	if(steerAngle < 0)
 8007cca:	edd7 7a06 	vldr	s15, [r7, #24]
 8007cce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd6:	d508      	bpl.n	8007cea <DisplayGui_CarSetup+0xaa>
	{
		steerAngle *= -1;
 8007cd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8007cdc:	eef1 7a67 	vneg.f32	s15, s15
 8007ce0:	edc7 7a06 	vstr	s15, [r7, #24]
		sign = 1;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	75fb      	strb	r3, [r7, #23]
 8007ce8:	e00e      	b.n	8007d08 <DisplayGui_CarSetup+0xc8>
	}
	else if(steerAngle == 0)
 8007cea:	edd7 7a06 	vldr	s15, [r7, #24]
 8007cee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf6:	d107      	bne.n	8007d08 <DisplayGui_CarSetup+0xc8>
	{
		sign = 2;
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	75fb      	strb	r3, [r7, #23]
		xDelta = xDelta - signSize * 2;
 8007cfc:	4b69      	ldr	r3, [pc, #420]	; (8007ea4 <DisplayGui_CarSetup+0x264>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	6a3a      	ldr	r2, [r7, #32]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	623b      	str	r3, [r7, #32]
	}

	int steerAngleInt = steerAngle;
 8007d08:	edd7 7a06 	vldr	s15, [r7, #24]
 8007d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d10:	ee17 3a90 	vmov	r3, s15
 8007d14:	60fb      	str	r3, [r7, #12]
	int steerAngleDec = (steerAngle - steerAngleInt) * 100;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	ee07 3a90 	vmov	s15, r3
 8007d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d20:	ed97 7a06 	vldr	s14, [r7, #24]
 8007d24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d28:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8007ea8 <DisplayGui_CarSetup+0x268>
 8007d2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d34:	ee17 3a90 	vmov	r3, s15
 8007d38:	60bb      	str	r3, [r7, #8]


	if(
			(steerAngleIntOld 	> 99 	&& 	steerAngleInt 		<= 99) ||
 8007d3a:	4b5c      	ldr	r3, [pc, #368]	; (8007eac <DisplayGui_CarSetup+0x26c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
	if(
 8007d3e:	2b63      	cmp	r3, #99	; 0x63
 8007d40:	dd02      	ble.n	8007d48 <DisplayGui_CarSetup+0x108>
			(steerAngleIntOld 	> 99 	&& 	steerAngleInt 		<= 99) ||
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2b63      	cmp	r3, #99	; 0x63
 8007d46:	dd19      	ble.n	8007d7c <DisplayGui_CarSetup+0x13c>
			(steerAngleIntOld 	> 9  	&& 	steerAngleInt 		<= 9 ) ||
 8007d48:	4b58      	ldr	r3, [pc, #352]	; (8007eac <DisplayGui_CarSetup+0x26c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
			(steerAngleIntOld 	> 99 	&& 	steerAngleInt 		<= 99) ||
 8007d4c:	2b09      	cmp	r3, #9
 8007d4e:	dd02      	ble.n	8007d56 <DisplayGui_CarSetup+0x116>
			(steerAngleIntOld 	> 9  	&& 	steerAngleInt 		<= 9 ) ||
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2b09      	cmp	r3, #9
 8007d54:	dd12      	ble.n	8007d7c <DisplayGui_CarSetup+0x13c>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b63      	cmp	r3, #99	; 0x63
 8007d5a:	dd03      	ble.n	8007d64 <DisplayGui_CarSetup+0x124>
			(steerAngleInt 		> 99 	&& 	steerAngleIntOld 	<= 99) ||
 8007d5c:	4b53      	ldr	r3, [pc, #332]	; (8007eac <DisplayGui_CarSetup+0x26c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b63      	cmp	r3, #99	; 0x63
 8007d62:	dd0b      	ble.n	8007d7c <DisplayGui_CarSetup+0x13c>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b09      	cmp	r3, #9
 8007d68:	dd03      	ble.n	8007d72 <DisplayGui_CarSetup+0x132>
			(steerAngleInt 		> 9  	&& 	steerAngleIntOld 	<= 9 ) ||
 8007d6a:	4b50      	ldr	r3, [pc, #320]	; (8007eac <DisplayGui_CarSetup+0x26c>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b09      	cmp	r3, #9
 8007d70:	dd04      	ble.n	8007d7c <DisplayGui_CarSetup+0x13c>
			(sign != signOld)
 8007d72:	4b4f      	ldr	r3, [pc, #316]	; (8007eb0 <DisplayGui_CarSetup+0x270>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
			(steerAngleInt 		> 9  	&& 	steerAngleIntOld 	<= 9 ) ||
 8007d76:	7dfa      	ldrb	r2, [r7, #23]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d001      	beq.n	8007d80 <DisplayGui_CarSetup+0x140>
			)
	{
			GUI_Clear();
 8007d7c:	f016 f882 	bl	801de84 <GUI_Clear>
	}

	GUI_SetColor(GUI_WHITE);
 8007d80:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007d84:	f014 ffd2 	bl	801cd2c <GUI_SetColor>


	if(steerAngleInt > 99)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2b63      	cmp	r3, #99	; 0x63
 8007d8c:	dd02      	ble.n	8007d94 <DisplayGui_CarSetup+0x154>
	{
		//x = 10;
		xDelta = 0;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	623b      	str	r3, [r7, #32]
 8007d92:	e00f      	b.n	8007db4 <DisplayGui_CarSetup+0x174>
	}
	else if (steerAngleInt > 9)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b09      	cmp	r3, #9
 8007d98:	dd06      	ble.n	8007da8 <DisplayGui_CarSetup+0x168>
	{
		x += 60;
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	333c      	adds	r3, #60	; 0x3c
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24
		xDelta = -60 - 30;
 8007da0:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8007da4:	623b      	str	r3, [r7, #32]
 8007da6:	e005      	b.n	8007db4 <DisplayGui_CarSetup+0x174>
	}
	else
	{
		x += 2*60;
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	3378      	adds	r3, #120	; 0x78
 8007dac:	627b      	str	r3, [r7, #36]	; 0x24
		xDelta = -120 - 60;
 8007dae:	f06f 03b3 	mvn.w	r3, #179	; 0xb3
 8007db2:	623b      	str	r3, [r7, #32]
	}

	if(steerAngle <= 1)
 8007db4:	edd7 7a06 	vldr	s15, [r7, #24]
 8007db8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc4:	d805      	bhi.n	8007dd2 <DisplayGui_CarSetup+0x192>
	{
		GUI_SetColor(GUI_GREEN);
 8007dc6:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8007dca:	f014 ffaf 	bl	801cd2c <GUI_SetColor>
		flagDataInRandge = 1;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	77fb      	strb	r3, [r7, #31]
	}

	for(uint8_t i = 0; i < steerGreenPoints1Number; i++)
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	75bb      	strb	r3, [r7, #22]
 8007dd6:	e02c      	b.n	8007e32 <DisplayGui_CarSetup+0x1f2>
	{
		if(steerAngle <= steerGreenPoints1[i] + steerGreenDegWindow/2 && steerAngle >= steerGreenPoints1[i] - steerGreenDegWindow/2)
 8007dd8:	7dbb      	ldrb	r3, [r7, #22]
 8007dda:	4a36      	ldr	r2, [pc, #216]	; (8007eb4 <DisplayGui_CarSetup+0x274>)
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	edd3 7a00 	vldr	s15, [r3]
 8007de4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007de8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007dec:	ed97 7a06 	vldr	s14, [r7, #24]
 8007df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007df8:	d818      	bhi.n	8007e2c <DisplayGui_CarSetup+0x1ec>
 8007dfa:	7dbb      	ldrb	r3, [r7, #22]
 8007dfc:	4a2d      	ldr	r2, [pc, #180]	; (8007eb4 <DisplayGui_CarSetup+0x274>)
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	edd3 7a00 	vldr	s15, [r3]
 8007e06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e0e:	ed97 7a06 	vldr	s14, [r7, #24]
 8007e12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e1a:	db07      	blt.n	8007e2c <DisplayGui_CarSetup+0x1ec>
		{
			GUI_SetColor(GUI_GREEN);
 8007e1c:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8007e20:	f014 ff84 	bl	801cd2c <GUI_SetColor>

			flagDataInRandge = 1;
 8007e24:	2301      	movs	r3, #1
 8007e26:	77fb      	strb	r3, [r7, #31]

			i = steerGreenPoints1Number;
 8007e28:	2310      	movs	r3, #16
 8007e2a:	75bb      	strb	r3, [r7, #22]
	for(uint8_t i = 0; i < steerGreenPoints1Number; i++)
 8007e2c:	7dbb      	ldrb	r3, [r7, #22]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	75bb      	strb	r3, [r7, #22]
 8007e32:	7dbb      	ldrb	r3, [r7, #22]
 8007e34:	2b0f      	cmp	r3, #15
 8007e36:	d9cf      	bls.n	8007dd8 <DisplayGui_CarSetup+0x198>
		}
	}


	switch(sign)
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d002      	beq.n	8007e44 <DisplayGui_CarSetup+0x204>
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d03c      	beq.n	8007ebc <DisplayGui_CarSetup+0x27c>
 8007e42:	e0a7      	b.n	8007f94 <DisplayGui_CarSetup+0x354>
	{
		case 0:

			//GUI_SetColor(GUI_RED);
			GUI_FillRect(x + 30 + xDelta/2, y, x + 30 + signSize + xDelta/2, y + signThick);
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	f103 021e 	add.w	r2, r3, #30
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	da00      	bge.n	8007e52 <DisplayGui_CarSetup+0x212>
 8007e50:	3301      	adds	r3, #1
 8007e52:	105b      	asrs	r3, r3, #1
 8007e54:	18d0      	adds	r0, r2, r3
 8007e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e58:	f103 021e 	add.w	r2, r3, #30
 8007e5c:	4b11      	ldr	r3, [pc, #68]	; (8007ea4 <DisplayGui_CarSetup+0x264>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	441a      	add	r2, r3
 8007e62:	6a3b      	ldr	r3, [r7, #32]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	da00      	bge.n	8007e6a <DisplayGui_CarSetup+0x22a>
 8007e68:	3301      	adds	r3, #1
 8007e6a:	105b      	asrs	r3, r3, #1
 8007e6c:	18d1      	adds	r1, r2, r3
 8007e6e:	4b12      	ldr	r3, [pc, #72]	; (8007eb8 <DisplayGui_CarSetup+0x278>)
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	4413      	add	r3, r2
 8007e76:	460a      	mov	r2, r1
 8007e78:	6939      	ldr	r1, [r7, #16]
 8007e7a:	f015 f861 	bl	801cf40 <GUI_FillRect>

			break;
 8007e7e:	e089      	b.n	8007f94 <DisplayGui_CarSetup+0x354>
 8007e80:	20000044 	.word	0x20000044
 8007e84:	20002eb0 	.word	0x20002eb0
 8007e88:	20006a98 	.word	0x20006a98
 8007e8c:	20002eb4 	.word	0x20002eb4
 8007e90:	2000041c 	.word	0x2000041c
 8007e94:	42ea0000 	.word	0x42ea0000
 8007e98:	c2ea0000 	.word	0xc2ea0000
 8007e9c:	450a2000 	.word	0x450a2000
 8007ea0:	441b0000 	.word	0x441b0000
 8007ea4:	20000088 	.word	0x20000088
 8007ea8:	42c80000 	.word	0x42c80000
 8007eac:	20002eb8 	.word	0x20002eb8
 8007eb0:	20002ebc 	.word	0x20002ebc
 8007eb4:	20000048 	.word	0x20000048
 8007eb8:	2000008c 	.word	0x2000008c

		case 1:

			//GUI_SetColor(GUI_GREEN);
			GUI_FillRect(x + 30 + xDelta/2, y, x + 30 + signSize + xDelta/2, y + signThick);
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	f103 021e 	add.w	r2, r3, #30
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	da00      	bge.n	8007eca <DisplayGui_CarSetup+0x28a>
 8007ec8:	3301      	adds	r3, #1
 8007eca:	105b      	asrs	r3, r3, #1
 8007ecc:	18d0      	adds	r0, r2, r3
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	f103 021e 	add.w	r2, r3, #30
 8007ed4:	4b81      	ldr	r3, [pc, #516]	; (80080dc <DisplayGui_CarSetup+0x49c>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	441a      	add	r2, r3
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	da00      	bge.n	8007ee2 <DisplayGui_CarSetup+0x2a2>
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	105b      	asrs	r3, r3, #1
 8007ee4:	18d1      	adds	r1, r2, r3
 8007ee6:	4b7e      	ldr	r3, [pc, #504]	; (80080e0 <DisplayGui_CarSetup+0x4a0>)
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	4413      	add	r3, r2
 8007eee:	460a      	mov	r2, r1
 8007ef0:	6939      	ldr	r1, [r7, #16]
 8007ef2:	f015 f825 	bl	801cf40 <GUI_FillRect>
			GUI_FillRect(x + 30 + (signSize - signThick)/2 + xDelta/2, y - (signSize)/2 + signThick/2, x + 30 + (signSize - signThick)/2 + signThick + xDelta/2, y + (signSize)/2 + signThick/2);
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	f103 021e 	add.w	r2, r3, #30
 8007efc:	4b77      	ldr	r3, [pc, #476]	; (80080dc <DisplayGui_CarSetup+0x49c>)
 8007efe:	6819      	ldr	r1, [r3, #0]
 8007f00:	4b77      	ldr	r3, [pc, #476]	; (80080e0 <DisplayGui_CarSetup+0x4a0>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	1acb      	subs	r3, r1, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	da00      	bge.n	8007f0c <DisplayGui_CarSetup+0x2cc>
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	105b      	asrs	r3, r3, #1
 8007f0e:	441a      	add	r2, r3
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	da00      	bge.n	8007f18 <DisplayGui_CarSetup+0x2d8>
 8007f16:	3301      	adds	r3, #1
 8007f18:	105b      	asrs	r3, r3, #1
 8007f1a:	18d0      	adds	r0, r2, r3
 8007f1c:	4b6f      	ldr	r3, [pc, #444]	; (80080dc <DisplayGui_CarSetup+0x49c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	da00      	bge.n	8007f26 <DisplayGui_CarSetup+0x2e6>
 8007f24:	3301      	adds	r3, #1
 8007f26:	105b      	asrs	r3, r3, #1
 8007f28:	425b      	negs	r3, r3
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	441a      	add	r2, r3
 8007f30:	4b6b      	ldr	r3, [pc, #428]	; (80080e0 <DisplayGui_CarSetup+0x4a0>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	da00      	bge.n	8007f3a <DisplayGui_CarSetup+0x2fa>
 8007f38:	3301      	adds	r3, #1
 8007f3a:	105b      	asrs	r3, r3, #1
 8007f3c:	18d4      	adds	r4, r2, r3
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	f103 021e 	add.w	r2, r3, #30
 8007f44:	4b65      	ldr	r3, [pc, #404]	; (80080dc <DisplayGui_CarSetup+0x49c>)
 8007f46:	6819      	ldr	r1, [r3, #0]
 8007f48:	4b65      	ldr	r3, [pc, #404]	; (80080e0 <DisplayGui_CarSetup+0x4a0>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	1acb      	subs	r3, r1, r3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	da00      	bge.n	8007f54 <DisplayGui_CarSetup+0x314>
 8007f52:	3301      	adds	r3, #1
 8007f54:	105b      	asrs	r3, r3, #1
 8007f56:	441a      	add	r2, r3
 8007f58:	4b61      	ldr	r3, [pc, #388]	; (80080e0 <DisplayGui_CarSetup+0x4a0>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	441a      	add	r2, r3
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	da00      	bge.n	8007f66 <DisplayGui_CarSetup+0x326>
 8007f64:	3301      	adds	r3, #1
 8007f66:	105b      	asrs	r3, r3, #1
 8007f68:	18d1      	adds	r1, r2, r3
 8007f6a:	4b5c      	ldr	r3, [pc, #368]	; (80080dc <DisplayGui_CarSetup+0x49c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	da00      	bge.n	8007f74 <DisplayGui_CarSetup+0x334>
 8007f72:	3301      	adds	r3, #1
 8007f74:	105b      	asrs	r3, r3, #1
 8007f76:	461a      	mov	r2, r3
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	441a      	add	r2, r3
 8007f7c:	4b58      	ldr	r3, [pc, #352]	; (80080e0 <DisplayGui_CarSetup+0x4a0>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	da00      	bge.n	8007f86 <DisplayGui_CarSetup+0x346>
 8007f84:	3301      	adds	r3, #1
 8007f86:	105b      	asrs	r3, r3, #1
 8007f88:	4413      	add	r3, r2
 8007f8a:	460a      	mov	r2, r1
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	f014 ffd7 	bl	801cf40 <GUI_FillRect>

			break;
 8007f92:	bf00      	nop
	}

	GUI_SetFont(&GUI_FontD80);
 8007f94:	4853      	ldr	r0, [pc, #332]	; (80080e4 <DisplayGui_CarSetup+0x4a4>)
 8007f96:	f014 fe9b 	bl	801ccd0 <GUI_SetFont>

	if(steerAngleInt > 99)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2b63      	cmp	r3, #99	; 0x63
 8007f9e:	dd0e      	ble.n	8007fbe <DisplayGui_CarSetup+0x37e>
		GUI_DispDecAt(steerAngleInt, x + 100 + xDelta, 100, 3);
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	4413      	add	r3, r2
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	3364      	adds	r3, #100	; 0x64
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	b219      	sxth	r1, r3
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	2264      	movs	r2, #100	; 0x64
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f014 fdc8 	bl	801cb4c <GUI_DispDecAt>
 8007fbc:	e01f      	b.n	8007ffe <DisplayGui_CarSetup+0x3be>
	else if (steerAngleInt > 9)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2b09      	cmp	r3, #9
 8007fc2:	dd0e      	ble.n	8007fe2 <DisplayGui_CarSetup+0x3a2>
		GUI_DispDecAt(steerAngleInt, x + 100 + 60 + xDelta, 100, 2);
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	4413      	add	r3, r2
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	33a0      	adds	r3, #160	; 0xa0
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	b219      	sxth	r1, r3
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	2264      	movs	r2, #100	; 0x64
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f014 fdb6 	bl	801cb4c <GUI_DispDecAt>
 8007fe0:	e00d      	b.n	8007ffe <DisplayGui_CarSetup+0x3be>
	else
		GUI_DispDecAt(steerAngleInt, x + 100 + 2*60 + xDelta, 100, 1);
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	4413      	add	r3, r2
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	33dc      	adds	r3, #220	; 0xdc
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	b219      	sxth	r1, r3
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	2264      	movs	r2, #100	; 0x64
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f014 fda7 	bl	801cb4c <GUI_DispDecAt>


	GUI_DispDecAt(steerAngleDec, x + 100 + 30 + 3 * 60 + xDelta, 100, 2);
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	b29a      	uxth	r2, r3
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	b29b      	uxth	r3, r3
 8008006:	4413      	add	r3, r2
 8008008:	b29b      	uxth	r3, r3
 800800a:	f503 739b 	add.w	r3, r3, #310	; 0x136
 800800e:	b29b      	uxth	r3, r3
 8008010:	b219      	sxth	r1, r3
 8008012:	2302      	movs	r3, #2
 8008014:	2264      	movs	r2, #100	; 0x64
 8008016:	68b8      	ldr	r0, [r7, #8]
 8008018:	f014 fd98 	bl	801cb4c <GUI_DispDecAt>

	char point[2] = ".";
 800801c:	232e      	movs	r3, #46	; 0x2e
 800801e:	80bb      	strh	r3, [r7, #4]
	GUI_DispStringAt(point, x + 100 + 3*60 + xDelta, 100);
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	18d1      	adds	r1, r2, r3
 800802a:	1d3b      	adds	r3, r7, #4
 800802c:	2264      	movs	r2, #100	; 0x64
 800802e:	4618      	mov	r0, r3
 8008030:	f015 fd5a 	bl	801dae8 <GUI_DispStringAt>

	signOld = sign;
 8008034:	4a2c      	ldr	r2, [pc, #176]	; (80080e8 <DisplayGui_CarSetup+0x4a8>)
 8008036:	7dfb      	ldrb	r3, [r7, #23]
 8008038:	7013      	strb	r3, [r2, #0]
	steerAngleIntOld = steerAngleInt;
 800803a:	4a2c      	ldr	r2, [pc, #176]	; (80080ec <DisplayGui_CarSetup+0x4ac>)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6013      	str	r3, [r2, #0]

	GUI_DrawCircle(x + 100 + 5*60 + 44 + xDelta, y - 28, 10);
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	f503 72de 	add.w	r2, r3, #444	; 0x1bc
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	18d0      	adds	r0, r2, r3
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	3b1c      	subs	r3, #28
 800804e:	220a      	movs	r2, #10
 8008050:	4619      	mov	r1, r3
 8008052:	f016 f823 	bl	801e09c <GUI_DrawCircle>
	GUI_DrawCircle(x + 100 + 5*60 + 44 + xDelta, y - 28, 9 );
 8008056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008058:	f503 72de 	add.w	r2, r3, #444	; 0x1bc
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	18d0      	adds	r0, r2, r3
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	3b1c      	subs	r3, #28
 8008064:	2209      	movs	r2, #9
 8008066:	4619      	mov	r1, r3
 8008068:	f016 f818 	bl	801e09c <GUI_DrawCircle>
	GUI_DrawCircle(x + 100 + 5*60 + 44 + xDelta, y - 28, 8 );
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	f503 72de 	add.w	r2, r3, #444	; 0x1bc
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	18d0      	adds	r0, r2, r3
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	3b1c      	subs	r3, #28
 800807a:	2208      	movs	r2, #8
 800807c:	4619      	mov	r1, r3
 800807e:	f016 f80d 	bl	801e09c <GUI_DrawCircle>
	//GUI_DrawCircle(x + 100 + 5*60 + 44 + xDelta, y - 28, 7 );

	if(flagDataInRandge == 1)
 8008082:	7ffb      	ldrb	r3, [r7, #31]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d104      	bne.n	8008092 <DisplayGui_CarSetup+0x452>
	{
		GUI_SetColor(GUI_GREEN);
 8008088:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 800808c:	f014 fe4e 	bl	801cd2c <GUI_SetColor>
 8008090:	e002      	b.n	8008098 <DisplayGui_CarSetup+0x458>
	}
	else
	{
		GUI_SetColor(GUI_BLACK);
 8008092:	2000      	movs	r0, #0
 8008094:	f014 fe4a 	bl	801cd2c <GUI_SetColor>
	}


	for(uint8_t i = 0; i < 15; i++)
 8008098:	2300      	movs	r3, #0
 800809a:	757b      	strb	r3, [r7, #21]
 800809c:	e011      	b.n	80080c2 <DisplayGui_CarSetup+0x482>
	{
		GUI_DrawRect(3 + i, 3 + i, 477 - i, 269 - i);
 800809e:	7d7b      	ldrb	r3, [r7, #21]
 80080a0:	1cd8      	adds	r0, r3, #3
 80080a2:	7d7b      	ldrb	r3, [r7, #21]
 80080a4:	1cdc      	adds	r4, r3, #3
 80080a6:	7d7b      	ldrb	r3, [r7, #21]
 80080a8:	f240 12dd 	movw	r2, #477	; 0x1dd
 80080ac:	1ad2      	subs	r2, r2, r3
 80080ae:	7d79      	ldrb	r1, [r7, #21]
 80080b0:	f240 130d 	movw	r3, #269	; 0x10d
 80080b4:	1a5b      	subs	r3, r3, r1
 80080b6:	4621      	mov	r1, r4
 80080b8:	f016 fecc 	bl	801ee54 <GUI_DrawRect>
	for(uint8_t i = 0; i < 15; i++)
 80080bc:	7d7b      	ldrb	r3, [r7, #21]
 80080be:	3301      	adds	r3, #1
 80080c0:	757b      	strb	r3, [r7, #21]
 80080c2:	7d7b      	ldrb	r3, [r7, #21]
 80080c4:	2b0e      	cmp	r3, #14
 80080c6:	d9ea      	bls.n	800809e <DisplayGui_CarSetup+0x45e>
	}


	GUI_SetColor(GUI_WHITE);
 80080c8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80080cc:	f014 fe2e 	bl	801cd2c <GUI_SetColor>

	//CORE FUNCTION END

	DisplayGui_END:;
}
 80080d0:	bf00      	nop
 80080d2:	bf00      	nop
 80080d4:	372c      	adds	r7, #44	; 0x2c
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd90      	pop	{r4, r7, pc}
 80080da:	bf00      	nop
 80080dc:	20000088 	.word	0x20000088
 80080e0:	2000008c 	.word	0x2000008c
 80080e4:	0811e510 	.word	0x0811e510
 80080e8:	20002ebc 	.word	0x20002ebc
 80080ec:	20002eb8 	.word	0x20002eb8

080080f0 <DisplayGui_DataInit>:


void DisplayGui_DataInit(void)
{
 80080f0:	b480      	push	{r7}
 80080f2:	af00      	add	r7, sp, #0
	static uint8_t flagInit = 0;

	if(flagInit == 0)
 80080f4:	4b05      	ldr	r3, [pc, #20]	; (800810c <DisplayGui_DataInit+0x1c>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d102      	bne.n	8008102 <DisplayGui_DataInit+0x12>
	{
		flagInit = 1;
 80080fc:	4b03      	ldr	r3, [pc, #12]	; (800810c <DisplayGui_DataInit+0x1c>)
 80080fe:	2201      	movs	r2, #1
 8008100:	701a      	strb	r2, [r3, #0]

	}
}
 8008102:	bf00      	nop
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	20002ebd 	.word	0x20002ebd

08008110 <DisplayGui_Intro>:
	//GUI_SetPenSize(1);
}
*/

void DisplayGui_Intro(void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	af00      	add	r7, sp, #0
	GUI_SetTextAlign(GUI_TA_HCENTER);
 8008114:	2002      	movs	r0, #2
 8008116:	f014 fdd1 	bl	801ccbc <GUI_SetTextAlign>

	GUI_SetColor(GUI_WHITE);
 800811a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800811e:	f014 fe05 	bl	801cd2c <GUI_SetColor>

	GUI_SetFont(&GUI_Font32B_1);
 8008122:	480e      	ldr	r0, [pc, #56]	; (800815c <DisplayGui_Intro+0x4c>)
 8008124:	f014 fdd4 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt("CAR SETUP PAGE", 236, 50);
 8008128:	2232      	movs	r2, #50	; 0x32
 800812a:	21ec      	movs	r1, #236	; 0xec
 800812c:	480c      	ldr	r0, [pc, #48]	; (8008160 <DisplayGui_Intro+0x50>)
 800812e:	f015 fcdb 	bl	801dae8 <GUI_DispStringAt>

	GUI_SetFont(&GUI_FontD80);
 8008132:	480c      	ldr	r0, [pc, #48]	; (8008164 <DisplayGui_Intro+0x54>)
 8008134:	f014 fdcc 	bl	801ccd0 <GUI_SetFont>
	GUI_DispDecAt(1, 214, 90, 1);
 8008138:	2301      	movs	r3, #1
 800813a:	225a      	movs	r2, #90	; 0x5a
 800813c:	21d6      	movs	r1, #214	; 0xd6
 800813e:	2001      	movs	r0, #1
 8008140:	f014 fd04 	bl	801cb4c <GUI_DispDecAt>

	GUI_SetTextAlign(GUI_TA_LEFT);
 8008144:	2000      	movs	r0, #0
 8008146:	f014 fdb9 	bl	801ccbc <GUI_SetTextAlign>

	GUI_SetColor(GUI_WHITE);
 800814a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800814e:	f014 fded 	bl	801cd2c <GUI_SetColor>
	GUI_SetBkColor(GUI_BLACK);
 8008152:	2000      	movs	r0, #0
 8008154:	f014 fde8 	bl	801cd28 <GUI_SetBkColor>
}
 8008158:	bf00      	nop
 800815a:	bd80      	pop	{r7, pc}
 800815c:	08127b30 	.word	0x08127b30
 8008160:	080223e0 	.word	0x080223e0
 8008164:	0811e510 	.word	0x0811e510

08008168 <DisplayGui_Debug>:
#include "MDM_GUI_LIB.h"
#endif


void DisplayGui_Debug(void)
{
 8008168:	b590      	push	{r4, r7, lr}
 800816a:	b08d      	sub	sp, #52	; 0x34
 800816c:	af0a      	add	r7, sp, #40	; 0x28
	GUI_SetColor(GUI_RED);
 800816e:	20ff      	movs	r0, #255	; 0xff
 8008170:	f014 fddc 	bl	801cd2c <GUI_SetColor>
	GUI_SetFont(&GUI_Font32_1);
 8008174:	4839      	ldr	r0, [pc, #228]	; (800825c <DisplayGui_Debug+0xf4>)
 8008176:	f014 fdab 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(" Gui_Debug! ", (LCD_GetXSize()-150)/2, (LCD_GetYSize()-20)/2);
 800817a:	f013 fe19 	bl	801bdb0 <LCD_GetXSize>
 800817e:	4603      	mov	r3, r0
 8008180:	3b96      	subs	r3, #150	; 0x96
 8008182:	2b00      	cmp	r3, #0
 8008184:	da00      	bge.n	8008188 <DisplayGui_Debug+0x20>
 8008186:	3301      	adds	r3, #1
 8008188:	105b      	asrs	r3, r3, #1
 800818a:	461c      	mov	r4, r3
 800818c:	f013 fe18 	bl	801bdc0 <LCD_GetYSize>
 8008190:	4603      	mov	r3, r0
 8008192:	3b14      	subs	r3, #20
 8008194:	2b00      	cmp	r3, #0
 8008196:	da00      	bge.n	800819a <DisplayGui_Debug+0x32>
 8008198:	3301      	adds	r3, #1
 800819a:	105b      	asrs	r3, r3, #1
 800819c:	461a      	mov	r2, r3
 800819e:	4621      	mov	r1, r4
 80081a0:	482f      	ldr	r0, [pc, #188]	; (8008260 <DisplayGui_Debug+0xf8>)
 80081a2:	f015 fca1 	bl	801dae8 <GUI_DispStringAt>
	GUI_SetColor(GUI_BLUE);
 80081a6:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 80081aa:	f014 fdbf 	bl	801cd2c <GUI_SetColor>

	char* a = "";
 80081ae:	4b2d      	ldr	r3, [pc, #180]	; (8008264 <DisplayGui_Debug+0xfc>)
 80081b0:	607b      	str	r3, [r7, #4]
	char* b = "";
 80081b2:	4b2c      	ldr	r3, [pc, #176]	; (8008264 <DisplayGui_Debug+0xfc>)
 80081b4:	603b      	str	r3, [r7, #0]

	static GUI_DrawNumAtTypeDef temperatura_mcu = {0};
	temperatura_mcu.number = MCU_Temperature;
 80081b6:	4b2c      	ldr	r3, [pc, #176]	; (8008268 <DisplayGui_Debug+0x100>)
 80081b8:	edd3 7a00 	vldr	s15, [r3]
 80081bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80081c0:	4b2a      	ldr	r3, [pc, #168]	; (800826c <DisplayGui_Debug+0x104>)
 80081c2:	ed83 7b00 	vstr	d7, [r3]
	a = "MCU Temp: ";
 80081c6:	4b2a      	ldr	r3, [pc, #168]	; (8008270 <DisplayGui_Debug+0x108>)
 80081c8:	607b      	str	r3, [r7, #4]
	b = " C";
 80081ca:	4b2a      	ldr	r3, [pc, #168]	; (8008274 <DisplayGui_Debug+0x10c>)
 80081cc:	603b      	str	r3, [r7, #0]
	GUI_DrawNumAt(10, 160, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &temperatura_mcu, 2, 1, ENABLE, ENABLE, LEFT, a, b);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	9308      	str	r3, [sp, #32]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	9307      	str	r3, [sp, #28]
 80081d6:	2300      	movs	r3, #0
 80081d8:	9306      	str	r3, [sp, #24]
 80081da:	2301      	movs	r3, #1
 80081dc:	9305      	str	r3, [sp, #20]
 80081de:	2301      	movs	r3, #1
 80081e0:	9304      	str	r3, [sp, #16]
 80081e2:	2301      	movs	r3, #1
 80081e4:	9303      	str	r3, [sp, #12]
 80081e6:	2302      	movs	r3, #2
 80081e8:	9302      	str	r3, [sp, #8]
 80081ea:	4b20      	ldr	r3, [pc, #128]	; (800826c <DisplayGui_Debug+0x104>)
 80081ec:	9301      	str	r3, [sp, #4]
 80081ee:	2300      	movs	r3, #0
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80081f6:	4a19      	ldr	r2, [pc, #100]	; (800825c <DisplayGui_Debug+0xf4>)
 80081f8:	21a0      	movs	r1, #160	; 0xa0
 80081fa:	200a      	movs	r0, #10
 80081fc:	f00d fb74 	bl	80158e8 <GUI_DrawNumAt>
	b = " V";
	GUI_DrawNumAt(10, 190, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &vrefInt_mcu, 1, 3, ENABLE, ENABLE, LEFT, a, b);
	 */

	static GUI_DrawTimeAtTypeDef timeToDisplay = {0};
	timeToDisplay.time = millis;
 8008200:	4b1d      	ldr	r3, [pc, #116]	; (8008278 <DisplayGui_Debug+0x110>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	461a      	mov	r2, r3
 8008206:	4b1d      	ldr	r3, [pc, #116]	; (800827c <DisplayGui_Debug+0x114>)
 8008208:	601a      	str	r2, [r3, #0]

	GUI_DrawTimeAt((LCD_GetXSize())/2, (LCD_GetYSize())/2 - 60, &GUI_Font32_1, GUI_GREEN, GUI_BLACK, &timeToDisplay, TIME_FORMAT_HOURS, 3, DISABLE, CENTER);
 800820a:	f013 fdd1 	bl	801bdb0 <LCD_GetXSize>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	da00      	bge.n	8008216 <DisplayGui_Debug+0xae>
 8008214:	3301      	adds	r3, #1
 8008216:	105b      	asrs	r3, r3, #1
 8008218:	b21c      	sxth	r4, r3
 800821a:	f013 fdd1 	bl	801bdc0 <LCD_GetYSize>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	da00      	bge.n	8008226 <DisplayGui_Debug+0xbe>
 8008224:	3301      	adds	r3, #1
 8008226:	105b      	asrs	r3, r3, #1
 8008228:	b29b      	uxth	r3, r3
 800822a:	3b3c      	subs	r3, #60	; 0x3c
 800822c:	b29b      	uxth	r3, r3
 800822e:	b219      	sxth	r1, r3
 8008230:	2302      	movs	r3, #2
 8008232:	9305      	str	r3, [sp, #20]
 8008234:	2300      	movs	r3, #0
 8008236:	9304      	str	r3, [sp, #16]
 8008238:	2303      	movs	r3, #3
 800823a:	9303      	str	r3, [sp, #12]
 800823c:	2303      	movs	r3, #3
 800823e:	9302      	str	r3, [sp, #8]
 8008240:	4b0e      	ldr	r3, [pc, #56]	; (800827c <DisplayGui_Debug+0x114>)
 8008242:	9301      	str	r3, [sp, #4]
 8008244:	2300      	movs	r3, #0
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800824c:	4a03      	ldr	r2, [pc, #12]	; (800825c <DisplayGui_Debug+0xf4>)
 800824e:	4620      	mov	r0, r4
 8008250:	f00e fbea 	bl	8016a28 <GUI_DrawTimeAt>
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	bd90      	pop	{r4, r7, pc}
 800825c:	081249a8 	.word	0x081249a8
 8008260:	080223f0 	.word	0x080223f0
 8008264:	08022400 	.word	0x08022400
 8008268:	20002db4 	.word	0x20002db4
 800826c:	20002ec0 	.word	0x20002ec0
 8008270:	08022404 	.word	0x08022404
 8008274:	08022410 	.word	0x08022410
 8008278:	20006a98 	.word	0x20006a98
 800827c:	20002ed8 	.word	0x20002ed8

08008280 <DisplayGui_Drive1>:
//int32_t defaultDataPointed = 13;

int8_t reInitFlag = 0;

void DisplayGui_Drive1(void)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	af00      	add	r7, sp, #0
	// Intro section BEGIN
	static uint32_t millisGuiIntro = 0;
	static uint8_t introStatus = 0;

	if(selectedGui_old != GuiDrive1 && selectedGui_old != GuiAlarm)
 8008284:	4b41      	ldr	r3, [pc, #260]	; (800838c <DisplayGui_Drive1+0x10c>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b15      	cmp	r3, #21
 800828a:	d00c      	beq.n	80082a6 <DisplayGui_Drive1+0x26>
 800828c:	4b3f      	ldr	r3, [pc, #252]	; (800838c <DisplayGui_Drive1+0x10c>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	2bfe      	cmp	r3, #254	; 0xfe
 8008292:	d008      	beq.n	80082a6 <DisplayGui_Drive1+0x26>
	{
		introStatus = 1;
 8008294:	4b3e      	ldr	r3, [pc, #248]	; (8008390 <DisplayGui_Drive1+0x110>)
 8008296:	2201      	movs	r2, #1
 8008298:	701a      	strb	r2, [r3, #0]
		millisGuiIntro = millis;
 800829a:	4b3e      	ldr	r3, [pc, #248]	; (8008394 <DisplayGui_Drive1+0x114>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a3e      	ldr	r2, [pc, #248]	; (8008398 <DisplayGui_Drive1+0x118>)
 80082a0:	6013      	str	r3, [r2, #0]

		GUI_Clear();
 80082a2:	f015 fdef 	bl	801de84 <GUI_Clear>
	}

	if(introStatus == 1)
 80082a6:	4b3a      	ldr	r3, [pc, #232]	; (8008390 <DisplayGui_Drive1+0x110>)
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d112      	bne.n	80082d4 <DisplayGui_Drive1+0x54>
	{
		if(millis < millisGuiIntro + DISPLAY_GUI_INTRO_TIME)
 80082ae:	4b3a      	ldr	r3, [pc, #232]	; (8008398 <DisplayGui_Drive1+0x118>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 80082b6:	4b37      	ldr	r3, [pc, #220]	; (8008394 <DisplayGui_Drive1+0x114>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d905      	bls.n	80082ca <DisplayGui_Drive1+0x4a>
		{
			DisplayGui_Intro();
 80082be:	f000 f933 	bl	8008528 <DisplayGui_Intro>

			reInitFlag = 1;
 80082c2:	4b36      	ldr	r3, [pc, #216]	; (800839c <DisplayGui_Drive1+0x11c>)
 80082c4:	2201      	movs	r2, #1
 80082c6:	701a      	strb	r2, [r3, #0]
			goto DisplayGui_END;
 80082c8:	e05e      	b.n	8008388 <DisplayGui_Drive1+0x108>
		}
		else
		{
			introStatus = 0;
 80082ca:	4b31      	ldr	r3, [pc, #196]	; (8008390 <DisplayGui_Drive1+0x110>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	701a      	strb	r2, [r3, #0]

			GUI_Clear();
 80082d0:	f015 fdd8 	bl	801de84 <GUI_Clear>
	}

	// Intro section END


	DisplayGui_DataInit(reInitFlag);
 80082d4:	4b31      	ldr	r3, [pc, #196]	; (800839c <DisplayGui_Drive1+0x11c>)
 80082d6:	f993 3000 	ldrsb.w	r3, [r3]
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	4618      	mov	r0, r3
 80082de:	f000 f865 	bl	80083ac <DisplayGui_DataInit>

	//CORE FUNCTION BEGIN

	if(CAR_Data.rpm.intData < 2000)
 80082e2:	4b2f      	ldr	r3, [pc, #188]	; (80083a0 <DisplayGui_Drive1+0x120>)
 80082e4:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80082e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80082ec:	da1d      	bge.n	800832a <DisplayGui_Drive1+0xaa>
	{
		drive1_gui_data[4].valueControlEnable = DISABLE;			//Oil P
 80082ee:	4b2d      	ldr	r3, [pc, #180]	; (80083a4 <DisplayGui_Drive1+0x124>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
		drive1_gui_data[0].valueControlEnable = DISABLE;			//Water T
 80082f6:	4b2b      	ldr	r3, [pc, #172]	; (80083a4 <DisplayGui_Drive1+0x124>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		drive1_gui_data[1].valueControlEnable = DISABLE;			//Oil T
 80082fe:	4b29      	ldr	r3, [pc, #164]	; (80083a4 <DisplayGui_Drive1+0x124>)
 8008300:	2200      	movs	r2, #0
 8008302:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
		drive1_gui_data[5].valueControlEnable = DISABLE;			//Fuel P
 8008306:	4b27      	ldr	r3, [pc, #156]	; (80083a4 <DisplayGui_Drive1+0x124>)
 8008308:	2200      	movs	r2, #0
 800830a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

		drive1_gui_data[12].valueControlEnable = ENABLE;			//TPS
 800830e:	4b25      	ldr	r3, [pc, #148]	; (80083a4 <DisplayGui_Drive1+0x124>)
 8008310:	2201      	movs	r2, #1
 8008312:	f883 270e 	strb.w	r2, [r3, #1806]	; 0x70e

																	//Air T
		drive1_gui_data[2].blinkingOverColor = GUI_RED;
 8008316:	4b23      	ldr	r3, [pc, #140]	; (80083a4 <DisplayGui_Drive1+0x124>)
 8008318:	22ff      	movs	r2, #255	; 0xff
 800831a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
		drive1_gui_data[2].blinkingUnderColor = GUI_BLUE;
 800831e:	4b21      	ldr	r3, [pc, #132]	; (80083a4 <DisplayGui_Drive1+0x124>)
 8008320:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8008324:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
 8008328:	e025      	b.n	8008376 <DisplayGui_Drive1+0xf6>

	}
	else
	{
		drive1_gui_data[4].valueControlEnable = ENABLE;				//Oil P
 800832a:	4b1e      	ldr	r3, [pc, #120]	; (80083a4 <DisplayGui_Drive1+0x124>)
 800832c:	2201      	movs	r2, #1
 800832e:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
		drive1_gui_data[0].valueControlEnable = ENABLE;				//Water T
 8008332:	4b1c      	ldr	r3, [pc, #112]	; (80083a4 <DisplayGui_Drive1+0x124>)
 8008334:	2201      	movs	r2, #1
 8008336:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		drive1_gui_data[1].valueControlEnable = ENABLE;				//Oil T
 800833a:	4b1a      	ldr	r3, [pc, #104]	; (80083a4 <DisplayGui_Drive1+0x124>)
 800833c:	2201      	movs	r2, #1
 800833e:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
		drive1_gui_data[5].valueControlEnable = ENABLE;				//Fuel P
 8008342:	4b18      	ldr	r3, [pc, #96]	; (80083a4 <DisplayGui_Drive1+0x124>)
 8008344:	2201      	movs	r2, #1
 8008346:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

		drive1_gui_data[12].valueControlEnable = DISABLE;			//TPS
 800834a:	4b16      	ldr	r3, [pc, #88]	; (80083a4 <DisplayGui_Drive1+0x124>)
 800834c:	2200      	movs	r2, #0
 800834e:	f883 270e 	strb.w	r2, [r3, #1806]	; 0x70e

																	//Air T
		drive1_gui_data[2].blinkingDelayOver = NO_BLINK_DELAY;
 8008352:	4b14      	ldr	r3, [pc, #80]	; (80083a4 <DisplayGui_Drive1+0x124>)
 8008354:	f242 7210 	movw	r2, #10000	; 0x2710
 8008358:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
		drive1_gui_data[2].blinkingDelayUnder = NO_BLINK_DELAY;
 800835c:	4b11      	ldr	r3, [pc, #68]	; (80083a4 <DisplayGui_Drive1+0x124>)
 800835e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008362:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
		drive1_gui_data[2].blinkingOverColor = ARGB_CREATE(0, 130, 0, 0);	//GUI_RED;
 8008366:	4b0f      	ldr	r3, [pc, #60]	; (80083a4 <DisplayGui_Drive1+0x124>)
 8008368:	2282      	movs	r2, #130	; 0x82
 800836a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
		drive1_gui_data[2].blinkingUnderColor = ARGB_CREATE(0, 0, 20, 80); 	//GUI_BLUE;
 800836e:	4b0d      	ldr	r3, [pc, #52]	; (80083a4 <DisplayGui_Drive1+0x124>)
 8008370:	4a0d      	ldr	r2, [pc, #52]	; (80083a8 <DisplayGui_Drive1+0x128>)
 8008372:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	}

	//DisplayGui_DataRefresh();
	Display_DriveSTD(&drive1_gui_data[0], GUI_WHITE);
 8008376:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800837a:	480a      	ldr	r0, [pc, #40]	; (80083a4 <DisplayGui_Drive1+0x124>)
 800837c:	f006 faaa 	bl	800e8d4 <Display_DriveSTD>
	//GUI_SetTextAlign(GUI_TA_HCENTER);
	GUI_DispStringAt(test, 50, 50);
*/
	//CORE FUNCTION END

	reInitFlag = 0;
 8008380:	4b06      	ldr	r3, [pc, #24]	; (800839c <DisplayGui_Drive1+0x11c>)
 8008382:	2200      	movs	r2, #0
 8008384:	701a      	strb	r2, [r3, #0]

	DisplayGui_END:;
}
 8008386:	bf00      	nop
 8008388:	bf00      	nop
 800838a:	bd80      	pop	{r7, pc}
 800838c:	20000044 	.word	0x20000044
 8008390:	20003a21 	.word	0x20003a21
 8008394:	20006a98 	.word	0x20006a98
 8008398:	20003a24 	.word	0x20003a24
 800839c:	20003a20 	.word	0x20003a20
 80083a0:	2000041c 	.word	0x2000041c
 80083a4:	20002ee0 	.word	0x20002ee0
 80083a8:	00501400 	.word	0x00501400

080083ac <DisplayGui_DataInit>:


void DisplayGui_DataInit(uint8_t extReInitFlag)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	71fb      	strb	r3, [r7, #7]
	static uint8_t flagInit = 0;


//#pragma warning disable

	if(selectedGui_old != selectedGui || selectedGui_old != GuiDrive1 || extReInitFlag != 0)
 80083b6:	4b4b      	ldr	r3, [pc, #300]	; (80084e4 <DisplayGui_DataInit+0x138>)
 80083b8:	781a      	ldrb	r2, [r3, #0]
 80083ba:	4b4b      	ldr	r3, [pc, #300]	; (80084e8 <DisplayGui_DataInit+0x13c>)
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d106      	bne.n	80083d0 <DisplayGui_DataInit+0x24>
 80083c2:	4b48      	ldr	r3, [pc, #288]	; (80084e4 <DisplayGui_DataInit+0x138>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b15      	cmp	r3, #21
 80083c8:	d102      	bne.n	80083d0 <DisplayGui_DataInit+0x24>
 80083ca:	79fb      	ldrb	r3, [r7, #7]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d002      	beq.n	80083d6 <DisplayGui_DataInit+0x2a>
		flagInit = 0;
 80083d0:	4b46      	ldr	r3, [pc, #280]	; (80084ec <DisplayGui_DataInit+0x140>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	701a      	strb	r2, [r3, #0]

	if(flagInit == 0)
 80083d6:	4b45      	ldr	r3, [pc, #276]	; (80084ec <DisplayGui_DataInit+0x140>)
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d17e      	bne.n	80084dc <DisplayGui_DataInit+0x130>
	{
		if(Display_DriveSTD_Initialized != 0)
 80083de:	4b44      	ldr	r3, [pc, #272]	; (80084f0 <DisplayGui_DataInit+0x144>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d002      	beq.n	80083ec <DisplayGui_DataInit+0x40>
			flagInit = 1;
 80083e6:	4b41      	ldr	r3, [pc, #260]	; (80084ec <DisplayGui_DataInit+0x140>)
 80083e8:	2201      	movs	r2, #1
 80083ea:	701a      	strb	r2, [r3, #0]

//#pragma warning restore


		for(uint8_t i = 0; i < 20; i++)
 80083ec:	2300      	movs	r3, #0
 80083ee:	73fb      	strb	r3, [r7, #15]
 80083f0:	e010      	b.n	8008414 <DisplayGui_DataInit+0x68>
		{
			drive1_gui_data[i] = DriveSTD_noData;
 80083f2:	7bfa      	ldrb	r2, [r7, #15]
 80083f4:	493f      	ldr	r1, [pc, #252]	; (80084f4 <DisplayGui_DataInit+0x148>)
 80083f6:	4613      	mov	r3, r2
 80083f8:	00db      	lsls	r3, r3, #3
 80083fa:	4413      	add	r3, r2
 80083fc:	011b      	lsls	r3, r3, #4
 80083fe:	440b      	add	r3, r1
 8008400:	4a3d      	ldr	r2, [pc, #244]	; (80084f8 <DisplayGui_DataInit+0x14c>)
 8008402:	4618      	mov	r0, r3
 8008404:	4611      	mov	r1, r2
 8008406:	2390      	movs	r3, #144	; 0x90
 8008408:	461a      	mov	r2, r3
 800840a:	f019 fbfb 	bl	8021c04 <memcpy>
		for(uint8_t i = 0; i < 20; i++)
 800840e:	7bfb      	ldrb	r3, [r7, #15]
 8008410:	3301      	adds	r3, #1
 8008412:	73fb      	strb	r3, [r7, #15]
 8008414:	7bfb      	ldrb	r3, [r7, #15]
 8008416:	2b13      	cmp	r3, #19
 8008418:	d9eb      	bls.n	80083f2 <DisplayGui_DataInit+0x46>
		}


		drive1_gui_data[0] = DriveSTD_waterTemp;
 800841a:	4a36      	ldr	r2, [pc, #216]	; (80084f4 <DisplayGui_DataInit+0x148>)
 800841c:	4b37      	ldr	r3, [pc, #220]	; (80084fc <DisplayGui_DataInit+0x150>)
 800841e:	4610      	mov	r0, r2
 8008420:	4619      	mov	r1, r3
 8008422:	2390      	movs	r3, #144	; 0x90
 8008424:	461a      	mov	r2, r3
 8008426:	f019 fbed 	bl	8021c04 <memcpy>
		drive1_gui_data[1] = DriveSTD_oilTemp;
 800842a:	4b32      	ldr	r3, [pc, #200]	; (80084f4 <DisplayGui_DataInit+0x148>)
 800842c:	4a34      	ldr	r2, [pc, #208]	; (8008500 <DisplayGui_DataInit+0x154>)
 800842e:	3390      	adds	r3, #144	; 0x90
 8008430:	4611      	mov	r1, r2
 8008432:	2290      	movs	r2, #144	; 0x90
 8008434:	4618      	mov	r0, r3
 8008436:	f019 fbe5 	bl	8021c04 <memcpy>
		drive1_gui_data[2] = DriveSTD_airTemp;
 800843a:	4b2e      	ldr	r3, [pc, #184]	; (80084f4 <DisplayGui_DataInit+0x148>)
 800843c:	4a31      	ldr	r2, [pc, #196]	; (8008504 <DisplayGui_DataInit+0x158>)
 800843e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008442:	4611      	mov	r1, r2
 8008444:	2290      	movs	r2, #144	; 0x90
 8008446:	4618      	mov	r0, r3
 8008448:	f019 fbdc 	bl	8021c04 <memcpy>
		drive1_gui_data[3] = DriveSTD_batteryVoltage;
 800844c:	4b29      	ldr	r3, [pc, #164]	; (80084f4 <DisplayGui_DataInit+0x148>)
 800844e:	4a2e      	ldr	r2, [pc, #184]	; (8008508 <DisplayGui_DataInit+0x15c>)
 8008450:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8008454:	4611      	mov	r1, r2
 8008456:	2290      	movs	r2, #144	; 0x90
 8008458:	4618      	mov	r0, r3
 800845a:	f019 fbd3 	bl	8021c04 <memcpy>
		drive1_gui_data[4] = DriveSTD_oilPressure;
 800845e:	4b25      	ldr	r3, [pc, #148]	; (80084f4 <DisplayGui_DataInit+0x148>)
 8008460:	4a2a      	ldr	r2, [pc, #168]	; (800850c <DisplayGui_DataInit+0x160>)
 8008462:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8008466:	4611      	mov	r1, r2
 8008468:	2290      	movs	r2, #144	; 0x90
 800846a:	4618      	mov	r0, r3
 800846c:	f019 fbca 	bl	8021c04 <memcpy>
		drive1_gui_data[5] = DriveSTD_fuelPressure;
 8008470:	4b20      	ldr	r3, [pc, #128]	; (80084f4 <DisplayGui_DataInit+0x148>)
 8008472:	4a27      	ldr	r2, [pc, #156]	; (8008510 <DisplayGui_DataInit+0x164>)
 8008474:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8008478:	4611      	mov	r1, r2
 800847a:	2290      	movs	r2, #144	; 0x90
 800847c:	4618      	mov	r0, r3
 800847e:	f019 fbc1 	bl	8021c04 <memcpy>
		//drive1_gui_data[6] = DriveSTD_brake;

		//drive1_gui_data[7] = DriveSTD_brakeBias;
		drive1_gui_data[7] = DriveSTD_brake;
 8008482:	4b1c      	ldr	r3, [pc, #112]	; (80084f4 <DisplayGui_DataInit+0x148>)
 8008484:	4a23      	ldr	r2, [pc, #140]	; (8008514 <DisplayGui_DataInit+0x168>)
 8008486:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 800848a:	4611      	mov	r1, r2
 800848c:	2290      	movs	r2, #144	; 0x90
 800848e:	4618      	mov	r0, r3
 8008490:	f019 fbb8 	bl	8021c04 <memcpy>
		drive1_gui_data[8] = DriveSTD_map;
 8008494:	4b17      	ldr	r3, [pc, #92]	; (80084f4 <DisplayGui_DataInit+0x148>)
 8008496:	4a20      	ldr	r2, [pc, #128]	; (8008518 <DisplayGui_DataInit+0x16c>)
 8008498:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800849c:	4611      	mov	r1, r2
 800849e:	2290      	movs	r2, #144	; 0x90
 80084a0:	4618      	mov	r0, r3
 80084a2:	f019 fbaf 	bl	8021c04 <memcpy>
		drive1_gui_data[9] = DriveSTD_traction;
 80084a6:	4b13      	ldr	r3, [pc, #76]	; (80084f4 <DisplayGui_DataInit+0x148>)
 80084a8:	4a1c      	ldr	r2, [pc, #112]	; (800851c <DisplayGui_DataInit+0x170>)
 80084aa:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80084ae:	4611      	mov	r1, r2
 80084b0:	2290      	movs	r2, #144	; 0x90
 80084b2:	4618      	mov	r0, r3
 80084b4:	f019 fba6 	bl	8021c04 <memcpy>
		drive1_gui_data[10] = DriveSTD_speed;
 80084b8:	4b0e      	ldr	r3, [pc, #56]	; (80084f4 <DisplayGui_DataInit+0x148>)
 80084ba:	4a19      	ldr	r2, [pc, #100]	; (8008520 <DisplayGui_DataInit+0x174>)
 80084bc:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80084c0:	4611      	mov	r1, r2
 80084c2:	2290      	movs	r2, #144	; 0x90
 80084c4:	4618      	mov	r0, r3
 80084c6:	f019 fb9d 	bl	8021c04 <memcpy>
		//drive1_gui_data[11] = DriveSTD_drsStatus;

		drive1_gui_data[12] = DriveSTD_tps;
 80084ca:	4b0a      	ldr	r3, [pc, #40]	; (80084f4 <DisplayGui_DataInit+0x148>)
 80084cc:	4a15      	ldr	r2, [pc, #84]	; (8008524 <DisplayGui_DataInit+0x178>)
 80084ce:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80084d2:	4611      	mov	r1, r2
 80084d4:	2290      	movs	r2, #144	; 0x90
 80084d6:	4618      	mov	r0, r3
 80084d8:	f019 fb94 	bl	8021c04 <memcpy>

		drive1_gui_data[12] = DriveSTD_tps;
		*/

	}
}
 80084dc:	bf00      	nop
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	20000044 	.word	0x20000044
 80084e8:	20002dbe 	.word	0x20002dbe
 80084ec:	20003a28 	.word	0x20003a28
 80084f0:	20006998 	.word	0x20006998
 80084f4:	20002ee0 	.word	0x20002ee0
 80084f8:	20005e58 	.word	0x20005e58
 80084fc:	20005ee8 	.word	0x20005ee8
 8008500:	20005f78 	.word	0x20005f78
 8008504:	20006098 	.word	0x20006098
 8008508:	20006248 	.word	0x20006248
 800850c:	200061b8 	.word	0x200061b8
 8008510:	20006128 	.word	0x20006128
 8008514:	20006638 	.word	0x20006638
 8008518:	20006488 	.word	0x20006488
 800851c:	200063f8 	.word	0x200063f8
 8008520:	20006368 	.word	0x20006368
 8008524:	200062d8 	.word	0x200062d8

08008528 <DisplayGui_Intro>:



void DisplayGui_Intro(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	af00      	add	r7, sp, #0
	GUI_SetTextAlign(GUI_TA_HCENTER);
 800852c:	2002      	movs	r0, #2
 800852e:	f014 fbc5 	bl	801ccbc <GUI_SetTextAlign>

	GUI_SetColor(GUI_WHITE);
 8008532:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008536:	f014 fbf9 	bl	801cd2c <GUI_SetColor>

	GUI_SetFont(&GUI_FontD80);
	GUI_DispDecAt(1, 214, 90, 1);
	*/

	GUI_SetFont(&GUI_Font32B_1);
 800853a:	480a      	ldr	r0, [pc, #40]	; (8008564 <DisplayGui_Intro+0x3c>)
 800853c:	f014 fbc8 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt("ENDURANCE", 236, 50 + 50);
 8008540:	2264      	movs	r2, #100	; 0x64
 8008542:	21ec      	movs	r1, #236	; 0xec
 8008544:	4808      	ldr	r0, [pc, #32]	; (8008568 <DisplayGui_Intro+0x40>)
 8008546:	f015 facf 	bl	801dae8 <GUI_DispStringAt>

	GUI_SetTextAlign(GUI_TA_LEFT);
 800854a:	2000      	movs	r0, #0
 800854c:	f014 fbb6 	bl	801ccbc <GUI_SetTextAlign>

	GUI_SetColor(GUI_WHITE);
 8008550:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008554:	f014 fbea 	bl	801cd2c <GUI_SetColor>
	GUI_SetBkColor(GUI_BLACK);
 8008558:	2000      	movs	r0, #0
 800855a:	f014 fbe5 	bl	801cd28 <GUI_SetBkColor>
}
 800855e:	bf00      	nop
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	08127b30 	.word	0x08127b30
 8008568:	08022414 	.word	0x08022414

0800856c <DisplayGui_Drive2>:
//int32_t defaultDataPointed = 13;

int8_t reInitFlagDrive2 = 0;

void DisplayGui_Drive2(void)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	af00      	add	r7, sp, #0
	// Intro section BEGIN
	static uint32_t millisGuiIntro = 0;
	static uint8_t introStatus = 0;

	if(selectedGui_old != GuiDrive2)
 8008570:	4b3f      	ldr	r3, [pc, #252]	; (8008670 <DisplayGui_Drive2+0x104>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	2b16      	cmp	r3, #22
 8008576:	d008      	beq.n	800858a <DisplayGui_Drive2+0x1e>
	{
		introStatus = 1;
 8008578:	4b3e      	ldr	r3, [pc, #248]	; (8008674 <DisplayGui_Drive2+0x108>)
 800857a:	2201      	movs	r2, #1
 800857c:	701a      	strb	r2, [r3, #0]
		millisGuiIntro = millis;
 800857e:	4b3e      	ldr	r3, [pc, #248]	; (8008678 <DisplayGui_Drive2+0x10c>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a3e      	ldr	r2, [pc, #248]	; (800867c <DisplayGui_Drive2+0x110>)
 8008584:	6013      	str	r3, [r2, #0]

		GUI_Clear();
 8008586:	f015 fc7d 	bl	801de84 <GUI_Clear>
	}

	if(introStatus == 1)
 800858a:	4b3a      	ldr	r3, [pc, #232]	; (8008674 <DisplayGui_Drive2+0x108>)
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	2b01      	cmp	r3, #1
 8008590:	d112      	bne.n	80085b8 <DisplayGui_Drive2+0x4c>
	{
		if(millis < millisGuiIntro + DISPLAY_GUI_INTRO_TIME)
 8008592:	4b3a      	ldr	r3, [pc, #232]	; (800867c <DisplayGui_Drive2+0x110>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 800859a:	4b37      	ldr	r3, [pc, #220]	; (8008678 <DisplayGui_Drive2+0x10c>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d905      	bls.n	80085ae <DisplayGui_Drive2+0x42>
		{
			DisplayGui_Intro();
 80085a2:	f000 f947 	bl	8008834 <DisplayGui_Intro>
			reInitFlagDrive2 = 1;
 80085a6:	4b36      	ldr	r3, [pc, #216]	; (8008680 <DisplayGui_Drive2+0x114>)
 80085a8:	2201      	movs	r2, #1
 80085aa:	701a      	strb	r2, [r3, #0]
			goto DisplayGui_END;
 80085ac:	e05e      	b.n	800866c <DisplayGui_Drive2+0x100>
		}
		else
		{
			introStatus = 0;
 80085ae:	4b31      	ldr	r3, [pc, #196]	; (8008674 <DisplayGui_Drive2+0x108>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	701a      	strb	r2, [r3, #0]
			GUI_Clear();
 80085b4:	f015 fc66 	bl	801de84 <GUI_Clear>
	}

	// Intro section END


	DisplayGui_DataInit(reInitFlagDrive2);
 80085b8:	4b31      	ldr	r3, [pc, #196]	; (8008680 <DisplayGui_Drive2+0x114>)
 80085ba:	f993 3000 	ldrsb.w	r3, [r3]
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 f865 	bl	8008690 <DisplayGui_DataInit>

	//CORE FUNCTION BEGIN

	if(CAR_Data.rpm.intData < 2000)
 80085c6:	4b2f      	ldr	r3, [pc, #188]	; (8008684 <DisplayGui_Drive2+0x118>)
 80085c8:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80085cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80085d0:	da1d      	bge.n	800860e <DisplayGui_Drive2+0xa2>
	{
		drive2_gui_data[4].valueControlEnable = DISABLE;			//Oil P
 80085d2:	4b2d      	ldr	r3, [pc, #180]	; (8008688 <DisplayGui_Drive2+0x11c>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
		drive2_gui_data[0].valueControlEnable = DISABLE;			//Water T
 80085da:	4b2b      	ldr	r3, [pc, #172]	; (8008688 <DisplayGui_Drive2+0x11c>)
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		drive2_gui_data[1].valueControlEnable = DISABLE;			//Oil T
 80085e2:	4b29      	ldr	r3, [pc, #164]	; (8008688 <DisplayGui_Drive2+0x11c>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
		drive2_gui_data[5].valueControlEnable = DISABLE;			//Fuel P
 80085ea:	4b27      	ldr	r3, [pc, #156]	; (8008688 <DisplayGui_Drive2+0x11c>)
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

		drive2_gui_data[12].valueControlEnable = ENABLE;			//TPS
 80085f2:	4b25      	ldr	r3, [pc, #148]	; (8008688 <DisplayGui_Drive2+0x11c>)
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 270e 	strb.w	r2, [r3, #1806]	; 0x70e

																	//Air T
		drive2_gui_data[2].blinkingOverColor = GUI_RED;
 80085fa:	4b23      	ldr	r3, [pc, #140]	; (8008688 <DisplayGui_Drive2+0x11c>)
 80085fc:	22ff      	movs	r2, #255	; 0xff
 80085fe:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
		drive2_gui_data[2].blinkingUnderColor = GUI_BLUE;
 8008602:	4b21      	ldr	r3, [pc, #132]	; (8008688 <DisplayGui_Drive2+0x11c>)
 8008604:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8008608:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
 800860c:	e025      	b.n	800865a <DisplayGui_Drive2+0xee>

	}
	else
	{
		drive2_gui_data[4].valueControlEnable = ENABLE;				//Oil P
 800860e:	4b1e      	ldr	r3, [pc, #120]	; (8008688 <DisplayGui_Drive2+0x11c>)
 8008610:	2201      	movs	r2, #1
 8008612:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
		drive2_gui_data[0].valueControlEnable = ENABLE;				//Water T
 8008616:	4b1c      	ldr	r3, [pc, #112]	; (8008688 <DisplayGui_Drive2+0x11c>)
 8008618:	2201      	movs	r2, #1
 800861a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		drive2_gui_data[1].valueControlEnable = ENABLE;				//Oil T
 800861e:	4b1a      	ldr	r3, [pc, #104]	; (8008688 <DisplayGui_Drive2+0x11c>)
 8008620:	2201      	movs	r2, #1
 8008622:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
		drive2_gui_data[5].valueControlEnable = ENABLE;				//Fuel P
 8008626:	4b18      	ldr	r3, [pc, #96]	; (8008688 <DisplayGui_Drive2+0x11c>)
 8008628:	2201      	movs	r2, #1
 800862a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

		drive2_gui_data[12].valueControlEnable = DISABLE;			//TPS
 800862e:	4b16      	ldr	r3, [pc, #88]	; (8008688 <DisplayGui_Drive2+0x11c>)
 8008630:	2200      	movs	r2, #0
 8008632:	f883 270e 	strb.w	r2, [r3, #1806]	; 0x70e

																	//Air T
		drive2_gui_data[2].blinkingDelayOver = NO_BLINK_DELAY;
 8008636:	4b14      	ldr	r3, [pc, #80]	; (8008688 <DisplayGui_Drive2+0x11c>)
 8008638:	f242 7210 	movw	r2, #10000	; 0x2710
 800863c:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
		drive2_gui_data[2].blinkingDelayUnder = NO_BLINK_DELAY;
 8008640:	4b11      	ldr	r3, [pc, #68]	; (8008688 <DisplayGui_Drive2+0x11c>)
 8008642:	f242 7210 	movw	r2, #10000	; 0x2710
 8008646:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
		drive2_gui_data[2].blinkingOverColor = ARGB_CREATE(0, 130, 0, 0);	//GUI_RED;
 800864a:	4b0f      	ldr	r3, [pc, #60]	; (8008688 <DisplayGui_Drive2+0x11c>)
 800864c:	2282      	movs	r2, #130	; 0x82
 800864e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
		drive2_gui_data[2].blinkingUnderColor = ARGB_CREATE(0, 0, 20, 80); 	//GUI_BLUE;
 8008652:	4b0d      	ldr	r3, [pc, #52]	; (8008688 <DisplayGui_Drive2+0x11c>)
 8008654:	4a0d      	ldr	r2, [pc, #52]	; (800868c <DisplayGui_Drive2+0x120>)
 8008656:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	}

	//DisplayGui_DataRefresh();
	Display_DriveSTD(&drive2_gui_data[0], GUI_WHITE);
 800865a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800865e:	480a      	ldr	r0, [pc, #40]	; (8008688 <DisplayGui_Drive2+0x11c>)
 8008660:	f006 f938 	bl	800e8d4 <Display_DriveSTD>

	//CORE FUNCTION END

	reInitFlagDrive2 = 0;
 8008664:	4b06      	ldr	r3, [pc, #24]	; (8008680 <DisplayGui_Drive2+0x114>)
 8008666:	2200      	movs	r2, #0
 8008668:	701a      	strb	r2, [r3, #0]

	DisplayGui_END:;
}
 800866a:	bf00      	nop
 800866c:	bf00      	nop
 800866e:	bd80      	pop	{r7, pc}
 8008670:	20000044 	.word	0x20000044
 8008674:	20004571 	.word	0x20004571
 8008678:	20006a98 	.word	0x20006a98
 800867c:	20004574 	.word	0x20004574
 8008680:	20004570 	.word	0x20004570
 8008684:	2000041c 	.word	0x2000041c
 8008688:	20003a30 	.word	0x20003a30
 800868c:	00501400 	.word	0x00501400

08008690 <DisplayGui_DataInit>:


void DisplayGui_DataInit(uint8_t extReInitFlag)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	4603      	mov	r3, r0
 8008698:	71fb      	strb	r3, [r7, #7]
	static uint8_t flagInit = 0;

	if(selectedGui_old != selectedGui || selectedGui_old != GuiDrive2 || extReInitFlag != 0)
 800869a:	4b55      	ldr	r3, [pc, #340]	; (80087f0 <DisplayGui_DataInit+0x160>)
 800869c:	781a      	ldrb	r2, [r3, #0]
 800869e:	4b55      	ldr	r3, [pc, #340]	; (80087f4 <DisplayGui_DataInit+0x164>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d106      	bne.n	80086b4 <DisplayGui_DataInit+0x24>
 80086a6:	4b52      	ldr	r3, [pc, #328]	; (80087f0 <DisplayGui_DataInit+0x160>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b16      	cmp	r3, #22
 80086ac:	d102      	bne.n	80086b4 <DisplayGui_DataInit+0x24>
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d002      	beq.n	80086ba <DisplayGui_DataInit+0x2a>
		flagInit = 0;
 80086b4:	4b50      	ldr	r3, [pc, #320]	; (80087f8 <DisplayGui_DataInit+0x168>)
 80086b6:	2200      	movs	r2, #0
 80086b8:	701a      	strb	r2, [r3, #0]

	if(flagInit == 0)
 80086ba:	4b4f      	ldr	r3, [pc, #316]	; (80087f8 <DisplayGui_DataInit+0x168>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f040 8091 	bne.w	80087e6 <DisplayGui_DataInit+0x156>
	{
		if(Display_DriveSTD_Initialized != 0)
 80086c4:	4b4d      	ldr	r3, [pc, #308]	; (80087fc <DisplayGui_DataInit+0x16c>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <DisplayGui_DataInit+0x42>
			flagInit = 1;
 80086cc:	4b4a      	ldr	r3, [pc, #296]	; (80087f8 <DisplayGui_DataInit+0x168>)
 80086ce:	2201      	movs	r2, #1
 80086d0:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 20; i++)
 80086d2:	2300      	movs	r3, #0
 80086d4:	73fb      	strb	r3, [r7, #15]
 80086d6:	e010      	b.n	80086fa <DisplayGui_DataInit+0x6a>
		{
			drive2_gui_data[i] = DriveSTD_noData;
 80086d8:	7bfa      	ldrb	r2, [r7, #15]
 80086da:	4949      	ldr	r1, [pc, #292]	; (8008800 <DisplayGui_DataInit+0x170>)
 80086dc:	4613      	mov	r3, r2
 80086de:	00db      	lsls	r3, r3, #3
 80086e0:	4413      	add	r3, r2
 80086e2:	011b      	lsls	r3, r3, #4
 80086e4:	440b      	add	r3, r1
 80086e6:	4a47      	ldr	r2, [pc, #284]	; (8008804 <DisplayGui_DataInit+0x174>)
 80086e8:	4618      	mov	r0, r3
 80086ea:	4611      	mov	r1, r2
 80086ec:	2390      	movs	r3, #144	; 0x90
 80086ee:	461a      	mov	r2, r3
 80086f0:	f019 fa88 	bl	8021c04 <memcpy>
		for(uint8_t i = 0; i < 20; i++)
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
 80086f6:	3301      	adds	r3, #1
 80086f8:	73fb      	strb	r3, [r7, #15]
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
 80086fc:	2b13      	cmp	r3, #19
 80086fe:	d9eb      	bls.n	80086d8 <DisplayGui_DataInit+0x48>
		}


		drive2_gui_data[0] = DriveSTD_waterTemp;
 8008700:	4a3f      	ldr	r2, [pc, #252]	; (8008800 <DisplayGui_DataInit+0x170>)
 8008702:	4b41      	ldr	r3, [pc, #260]	; (8008808 <DisplayGui_DataInit+0x178>)
 8008704:	4610      	mov	r0, r2
 8008706:	4619      	mov	r1, r3
 8008708:	2390      	movs	r3, #144	; 0x90
 800870a:	461a      	mov	r2, r3
 800870c:	f019 fa7a 	bl	8021c04 <memcpy>
		drive2_gui_data[1] = DriveSTD_oilTemp;
 8008710:	4b3b      	ldr	r3, [pc, #236]	; (8008800 <DisplayGui_DataInit+0x170>)
 8008712:	4a3e      	ldr	r2, [pc, #248]	; (800880c <DisplayGui_DataInit+0x17c>)
 8008714:	3390      	adds	r3, #144	; 0x90
 8008716:	4611      	mov	r1, r2
 8008718:	2290      	movs	r2, #144	; 0x90
 800871a:	4618      	mov	r0, r3
 800871c:	f019 fa72 	bl	8021c04 <memcpy>
		drive2_gui_data[2] = DriveSTD_airTemp;
 8008720:	4b37      	ldr	r3, [pc, #220]	; (8008800 <DisplayGui_DataInit+0x170>)
 8008722:	4a3b      	ldr	r2, [pc, #236]	; (8008810 <DisplayGui_DataInit+0x180>)
 8008724:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008728:	4611      	mov	r1, r2
 800872a:	2290      	movs	r2, #144	; 0x90
 800872c:	4618      	mov	r0, r3
 800872e:	f019 fa69 	bl	8021c04 <memcpy>
		drive2_gui_data[3] = DriveSTD_batteryVoltage;
 8008732:	4b33      	ldr	r3, [pc, #204]	; (8008800 <DisplayGui_DataInit+0x170>)
 8008734:	4a37      	ldr	r2, [pc, #220]	; (8008814 <DisplayGui_DataInit+0x184>)
 8008736:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 800873a:	4611      	mov	r1, r2
 800873c:	2290      	movs	r2, #144	; 0x90
 800873e:	4618      	mov	r0, r3
 8008740:	f019 fa60 	bl	8021c04 <memcpy>
		drive2_gui_data[4] = DriveSTD_oilPressure;
 8008744:	4b2e      	ldr	r3, [pc, #184]	; (8008800 <DisplayGui_DataInit+0x170>)
 8008746:	4a34      	ldr	r2, [pc, #208]	; (8008818 <DisplayGui_DataInit+0x188>)
 8008748:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800874c:	4611      	mov	r1, r2
 800874e:	2290      	movs	r2, #144	; 0x90
 8008750:	4618      	mov	r0, r3
 8008752:	f019 fa57 	bl	8021c04 <memcpy>
		drive2_gui_data[5] = DriveSTD_fuelPressure;
 8008756:	4b2a      	ldr	r3, [pc, #168]	; (8008800 <DisplayGui_DataInit+0x170>)
 8008758:	4a30      	ldr	r2, [pc, #192]	; (800881c <DisplayGui_DataInit+0x18c>)
 800875a:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800875e:	4611      	mov	r1, r2
 8008760:	2290      	movs	r2, #144	; 0x90
 8008762:	4618      	mov	r0, r3
 8008764:	f019 fa4e 	bl	8021c04 <memcpy>
		drive2_gui_data[6] = DriveSTD_brake;
 8008768:	4b25      	ldr	r3, [pc, #148]	; (8008800 <DisplayGui_DataInit+0x170>)
 800876a:	4a2d      	ldr	r2, [pc, #180]	; (8008820 <DisplayGui_DataInit+0x190>)
 800876c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8008770:	4611      	mov	r1, r2
 8008772:	2290      	movs	r2, #144	; 0x90
 8008774:	4618      	mov	r0, r3
 8008776:	f019 fa45 	bl	8021c04 <memcpy>

		drive2_gui_data[7] = DriveSTD_noData;				//drive2_gui_data[7] = DriveSTD_brakeBias;
 800877a:	4b21      	ldr	r3, [pc, #132]	; (8008800 <DisplayGui_DataInit+0x170>)
 800877c:	4a21      	ldr	r2, [pc, #132]	; (8008804 <DisplayGui_DataInit+0x174>)
 800877e:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8008782:	4611      	mov	r1, r2
 8008784:	2290      	movs	r2, #144	; 0x90
 8008786:	4618      	mov	r0, r3
 8008788:	f019 fa3c 	bl	8021c04 <memcpy>
		drive2_gui_data[8] = DriveSTD_map;
 800878c:	4b1c      	ldr	r3, [pc, #112]	; (8008800 <DisplayGui_DataInit+0x170>)
 800878e:	4a25      	ldr	r2, [pc, #148]	; (8008824 <DisplayGui_DataInit+0x194>)
 8008790:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8008794:	4611      	mov	r1, r2
 8008796:	2290      	movs	r2, #144	; 0x90
 8008798:	4618      	mov	r0, r3
 800879a:	f019 fa33 	bl	8021c04 <memcpy>
		drive2_gui_data[9] = DriveSTD_traction;
 800879e:	4b18      	ldr	r3, [pc, #96]	; (8008800 <DisplayGui_DataInit+0x170>)
 80087a0:	4a21      	ldr	r2, [pc, #132]	; (8008828 <DisplayGui_DataInit+0x198>)
 80087a2:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80087a6:	4611      	mov	r1, r2
 80087a8:	2290      	movs	r2, #144	; 0x90
 80087aa:	4618      	mov	r0, r3
 80087ac:	f019 fa2a 	bl	8021c04 <memcpy>
		drive2_gui_data[10] = DriveSTD_speed;
 80087b0:	4b13      	ldr	r3, [pc, #76]	; (8008800 <DisplayGui_DataInit+0x170>)
 80087b2:	4a1e      	ldr	r2, [pc, #120]	; (800882c <DisplayGui_DataInit+0x19c>)
 80087b4:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80087b8:	4611      	mov	r1, r2
 80087ba:	2290      	movs	r2, #144	; 0x90
 80087bc:	4618      	mov	r0, r3
 80087be:	f019 fa21 	bl	8021c04 <memcpy>
		drive2_gui_data[11] = DriveSTD_noData;				//drive2_gui_data[11] = DriveSTD_brakeRear;
 80087c2:	4b0f      	ldr	r3, [pc, #60]	; (8008800 <DisplayGui_DataInit+0x170>)
 80087c4:	4a0f      	ldr	r2, [pc, #60]	; (8008804 <DisplayGui_DataInit+0x174>)
 80087c6:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 80087ca:	4611      	mov	r1, r2
 80087cc:	2290      	movs	r2, #144	; 0x90
 80087ce:	4618      	mov	r0, r3
 80087d0:	f019 fa18 	bl	8021c04 <memcpy>

		drive2_gui_data[12] = DriveSTD_tps;
 80087d4:	4b0a      	ldr	r3, [pc, #40]	; (8008800 <DisplayGui_DataInit+0x170>)
 80087d6:	4a16      	ldr	r2, [pc, #88]	; (8008830 <DisplayGui_DataInit+0x1a0>)
 80087d8:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80087dc:	4611      	mov	r1, r2
 80087de:	2290      	movs	r2, #144	; 0x90
 80087e0:	4618      	mov	r0, r3
 80087e2:	f019 fa0f 	bl	8021c04 <memcpy>
	}
}
 80087e6:	bf00      	nop
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20000044 	.word	0x20000044
 80087f4:	20002dbe 	.word	0x20002dbe
 80087f8:	20004578 	.word	0x20004578
 80087fc:	20006998 	.word	0x20006998
 8008800:	20003a30 	.word	0x20003a30
 8008804:	20005e58 	.word	0x20005e58
 8008808:	20005ee8 	.word	0x20005ee8
 800880c:	20005f78 	.word	0x20005f78
 8008810:	20006098 	.word	0x20006098
 8008814:	20006248 	.word	0x20006248
 8008818:	200061b8 	.word	0x200061b8
 800881c:	20006128 	.word	0x20006128
 8008820:	20006638 	.word	0x20006638
 8008824:	20006488 	.word	0x20006488
 8008828:	200063f8 	.word	0x200063f8
 800882c:	20006368 	.word	0x20006368
 8008830:	200062d8 	.word	0x200062d8

08008834 <DisplayGui_Intro>:



void DisplayGui_Intro(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	af00      	add	r7, sp, #0
	GUI_SetTextAlign(GUI_TA_HCENTER);
 8008838:	2002      	movs	r0, #2
 800883a:	f014 fa3f 	bl	801ccbc <GUI_SetTextAlign>

	GUI_SetColor(GUI_WHITE);
 800883e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008842:	f014 fa73 	bl	801cd2c <GUI_SetColor>

	GUI_SetFont(&GUI_Font32B_1);
 8008846:	480e      	ldr	r0, [pc, #56]	; (8008880 <DisplayGui_Intro+0x4c>)
 8008848:	f014 fa42 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt("Drive Data", 236, 50);
 800884c:	2232      	movs	r2, #50	; 0x32
 800884e:	21ec      	movs	r1, #236	; 0xec
 8008850:	480c      	ldr	r0, [pc, #48]	; (8008884 <DisplayGui_Intro+0x50>)
 8008852:	f015 f949 	bl	801dae8 <GUI_DispStringAt>

	GUI_SetFont(&GUI_FontD80);
 8008856:	480c      	ldr	r0, [pc, #48]	; (8008888 <DisplayGui_Intro+0x54>)
 8008858:	f014 fa3a 	bl	801ccd0 <GUI_SetFont>
	GUI_DispDecAt(2, 214, 90, 1);
 800885c:	2301      	movs	r3, #1
 800885e:	225a      	movs	r2, #90	; 0x5a
 8008860:	21d6      	movs	r1, #214	; 0xd6
 8008862:	2002      	movs	r0, #2
 8008864:	f014 f972 	bl	801cb4c <GUI_DispDecAt>

	GUI_SetTextAlign(GUI_TA_LEFT);
 8008868:	2000      	movs	r0, #0
 800886a:	f014 fa27 	bl	801ccbc <GUI_SetTextAlign>

	GUI_SetColor(GUI_WHITE);
 800886e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008872:	f014 fa5b 	bl	801cd2c <GUI_SetColor>
	GUI_SetBkColor(GUI_BLACK);
 8008876:	2000      	movs	r0, #0
 8008878:	f014 fa56 	bl	801cd28 <GUI_SetBkColor>
}
 800887c:	bf00      	nop
 800887e:	bd80      	pop	{r7, pc}
 8008880:	08127b30 	.word	0x08127b30
 8008884:	08022420 	.word	0x08022420
 8008888:	0811e510 	.word	0x0811e510

0800888c <DisplayGui_HandlingCurvesTest>:
uint32_t steerColor = GUI_WHITE;



void DisplayGui_HandlingCurvesTest(void)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b092      	sub	sp, #72	; 0x48
 8008890:	af0a      	add	r7, sp, #40	; 0x28
	// Intro section BEGIN
	static uint32_t millisGuiIntro = 0;
	static uint8_t introStatus = 0;

	if(selectedGui_old != GuiHandlingCurvesTest && selectedGui_old != GuiAlarm)
 8008892:	4b78      	ldr	r3, [pc, #480]	; (8008a74 <DisplayGui_HandlingCurvesTest+0x1e8>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	2b1f      	cmp	r3, #31
 8008898:	d00c      	beq.n	80088b4 <DisplayGui_HandlingCurvesTest+0x28>
 800889a:	4b76      	ldr	r3, [pc, #472]	; (8008a74 <DisplayGui_HandlingCurvesTest+0x1e8>)
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	2bfe      	cmp	r3, #254	; 0xfe
 80088a0:	d008      	beq.n	80088b4 <DisplayGui_HandlingCurvesTest+0x28>
	{
		introStatus = 1;
 80088a2:	4b75      	ldr	r3, [pc, #468]	; (8008a78 <DisplayGui_HandlingCurvesTest+0x1ec>)
 80088a4:	2201      	movs	r2, #1
 80088a6:	701a      	strb	r2, [r3, #0]
		millisGuiIntro = millis;
 80088a8:	4b74      	ldr	r3, [pc, #464]	; (8008a7c <DisplayGui_HandlingCurvesTest+0x1f0>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a74      	ldr	r2, [pc, #464]	; (8008a80 <DisplayGui_HandlingCurvesTest+0x1f4>)
 80088ae:	6013      	str	r3, [r2, #0]

		GUI_Clear();
 80088b0:	f015 fae8 	bl	801de84 <GUI_Clear>
	}

	if(introStatus == 1)
 80088b4:	4b70      	ldr	r3, [pc, #448]	; (8008a78 <DisplayGui_HandlingCurvesTest+0x1ec>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d112      	bne.n	80088e2 <DisplayGui_HandlingCurvesTest+0x56>
	{
		if(millis < millisGuiIntro + DISPLAY_GUI_INTRO_TIME * 2)
 80088bc:	4b70      	ldr	r3, [pc, #448]	; (8008a80 <DisplayGui_HandlingCurvesTest+0x1f4>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f503 7248 	add.w	r2, r3, #800	; 0x320
 80088c4:	4b6d      	ldr	r3, [pc, #436]	; (8008a7c <DisplayGui_HandlingCurvesTest+0x1f0>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d905      	bls.n	80088d8 <DisplayGui_HandlingCurvesTest+0x4c>
		{
			DisplayGui_Intro();
 80088cc:	f000 fa8c 	bl	8008de8 <DisplayGui_Intro>

			reInitFlagHandlingCurves = 1;
 80088d0:	4b6c      	ldr	r3, [pc, #432]	; (8008a84 <DisplayGui_HandlingCurvesTest+0x1f8>)
 80088d2:	2201      	movs	r2, #1
 80088d4:	701a      	strb	r2, [r3, #0]
			goto DisplayGui_END;
 80088d6:	e19e      	b.n	8008c16 <DisplayGui_HandlingCurvesTest+0x38a>
		}
		else
		{
			introStatus = 0;
 80088d8:	4b67      	ldr	r3, [pc, #412]	; (8008a78 <DisplayGui_HandlingCurvesTest+0x1ec>)
 80088da:	2200      	movs	r2, #0
 80088dc:	701a      	strb	r2, [r3, #0]

			GUI_Clear();
 80088de:	f015 fad1 	bl	801de84 <GUI_Clear>
	}

	// Intro section END


	DisplayGui_DataInit(reInitFlagHandlingCurves);
 80088e2:	4b68      	ldr	r3, [pc, #416]	; (8008a84 <DisplayGui_HandlingCurvesTest+0x1f8>)
 80088e4:	f993 3000 	ldrsb.w	r3, [r3]
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 f9a6 	bl	8008c3c <DisplayGui_DataInit>

	//CORE FUNCTION BEGIN

	if(CAR_Data.rpm.intData < 2000)
 80088f0:	4b65      	ldr	r3, [pc, #404]	; (8008a88 <DisplayGui_HandlingCurvesTest+0x1fc>)
 80088f2:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80088f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80088fa:	da1d      	bge.n	8008938 <DisplayGui_HandlingCurvesTest+0xac>
	{
		//handlingCurves_gui_data[4].valueControlEnable = DISABLE;			//Oil P
		handlingCurves_gui_data[10].valueControlEnable = DISABLE;			//Oil P
 80088fc:	4b63      	ldr	r3, [pc, #396]	; (8008a8c <DisplayGui_HandlingCurvesTest+0x200>)
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 25ee 	strb.w	r2, [r3, #1518]	; 0x5ee
		handlingCurves_gui_data[0].valueControlEnable = DISABLE;			//Water T
 8008904:	4b61      	ldr	r3, [pc, #388]	; (8008a8c <DisplayGui_HandlingCurvesTest+0x200>)
 8008906:	2200      	movs	r2, #0
 8008908:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		handlingCurves_gui_data[1].valueControlEnable = DISABLE;			//Oil T
 800890c:	4b5f      	ldr	r3, [pc, #380]	; (8008a8c <DisplayGui_HandlingCurvesTest+0x200>)
 800890e:	2200      	movs	r2, #0
 8008910:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
		//handlingCurves_gui_data[5].valueControlEnable = DISABLE;			//Fuel P
		handlingCurves_gui_data[11].valueControlEnable = DISABLE;			//Fuel P
 8008914:	4b5d      	ldr	r3, [pc, #372]	; (8008a8c <DisplayGui_HandlingCurvesTest+0x200>)
 8008916:	2200      	movs	r2, #0
 8008918:	f883 267e 	strb.w	r2, [r3, #1662]	; 0x67e

		handlingCurves_gui_data[12].valueControlEnable = ENABLE;			//TPS
 800891c:	4b5b      	ldr	r3, [pc, #364]	; (8008a8c <DisplayGui_HandlingCurvesTest+0x200>)
 800891e:	2201      	movs	r2, #1
 8008920:	f883 270e 	strb.w	r2, [r3, #1806]	; 0x70e

																	//Air T
		handlingCurves_gui_data[2].blinkingOverColor = GUI_RED;
 8008924:	4b59      	ldr	r3, [pc, #356]	; (8008a8c <DisplayGui_HandlingCurvesTest+0x200>)
 8008926:	22ff      	movs	r2, #255	; 0xff
 8008928:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
		handlingCurves_gui_data[2].blinkingUnderColor = GUI_BLUE;
 800892c:	4b57      	ldr	r3, [pc, #348]	; (8008a8c <DisplayGui_HandlingCurvesTest+0x200>)
 800892e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8008932:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
 8008936:	e025      	b.n	8008984 <DisplayGui_HandlingCurvesTest+0xf8>

	}
	else
	{
		//handlingCurves_gui_data[4].valueControlEnable = ENABLE;				//Oil P
		handlingCurves_gui_data[10].valueControlEnable = ENABLE;			//Oil P
 8008938:	4b54      	ldr	r3, [pc, #336]	; (8008a8c <DisplayGui_HandlingCurvesTest+0x200>)
 800893a:	2201      	movs	r2, #1
 800893c:	f883 25ee 	strb.w	r2, [r3, #1518]	; 0x5ee
		handlingCurves_gui_data[0].valueControlEnable = ENABLE;				//Water T
 8008940:	4b52      	ldr	r3, [pc, #328]	; (8008a8c <DisplayGui_HandlingCurvesTest+0x200>)
 8008942:	2201      	movs	r2, #1
 8008944:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		handlingCurves_gui_data[1].valueControlEnable = ENABLE;				//Oil T
 8008948:	4b50      	ldr	r3, [pc, #320]	; (8008a8c <DisplayGui_HandlingCurvesTest+0x200>)
 800894a:	2201      	movs	r2, #1
 800894c:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
		//handlingCurves_gui_data[5].valueControlEnable = ENABLE;				//Fuel P
		handlingCurves_gui_data[11].valueControlEnable = ENABLE;			//Fuel P
 8008950:	4b4e      	ldr	r3, [pc, #312]	; (8008a8c <DisplayGui_HandlingCurvesTest+0x200>)
 8008952:	2201      	movs	r2, #1
 8008954:	f883 267e 	strb.w	r2, [r3, #1662]	; 0x67e

		handlingCurves_gui_data[12].valueControlEnable = DISABLE;			//TPS
 8008958:	4b4c      	ldr	r3, [pc, #304]	; (8008a8c <DisplayGui_HandlingCurvesTest+0x200>)
 800895a:	2200      	movs	r2, #0
 800895c:	f883 270e 	strb.w	r2, [r3, #1806]	; 0x70e

																	//Air T
		handlingCurves_gui_data[2].blinkingDelayOver = NO_BLINK_DELAY;
 8008960:	4b4a      	ldr	r3, [pc, #296]	; (8008a8c <DisplayGui_HandlingCurvesTest+0x200>)
 8008962:	f242 7210 	movw	r2, #10000	; 0x2710
 8008966:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
		handlingCurves_gui_data[2].blinkingDelayUnder = NO_BLINK_DELAY;
 800896a:	4b48      	ldr	r3, [pc, #288]	; (8008a8c <DisplayGui_HandlingCurvesTest+0x200>)
 800896c:	f242 7210 	movw	r2, #10000	; 0x2710
 8008970:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
		handlingCurves_gui_data[2].blinkingOverColor = ARGB_CREATE(0, 130, 0, 0);	//GUI_RED;
 8008974:	4b45      	ldr	r3, [pc, #276]	; (8008a8c <DisplayGui_HandlingCurvesTest+0x200>)
 8008976:	2282      	movs	r2, #130	; 0x82
 8008978:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
		handlingCurves_gui_data[2].blinkingUnderColor = ARGB_CREATE(0, 0, 20, 80); 	//GUI_BLUE;
 800897c:	4b43      	ldr	r3, [pc, #268]	; (8008a8c <DisplayGui_HandlingCurvesTest+0x200>)
 800897e:	4a44      	ldr	r2, [pc, #272]	; (8008a90 <DisplayGui_HandlingCurvesTest+0x204>)
 8008980:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	}

	//DisplayGui_DataRefresh();
	Display_DriveSTD(&handlingCurves_gui_data[0], steerColor);
 8008984:	4b43      	ldr	r3, [pc, #268]	; (8008a94 <DisplayGui_HandlingCurvesTest+0x208>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4619      	mov	r1, r3
 800898a:	4840      	ldr	r0, [pc, #256]	; (8008a8c <DisplayGui_HandlingCurvesTest+0x200>)
 800898c:	f005 ffa2 	bl	800e8d4 <Display_DriveSTD>



	int y = 40 + 4;
 8008990:	232c      	movs	r3, #44	; 0x2c
 8008992:	617b      	str	r3, [r7, #20]

	char steeringTextString[10] = "Steer";
 8008994:	4a40      	ldr	r2, [pc, #256]	; (8008a98 <DisplayGui_HandlingCurvesTest+0x20c>)
 8008996:	1d3b      	adds	r3, r7, #4
 8008998:	e892 0003 	ldmia.w	r2, {r0, r1}
 800899c:	6018      	str	r0, [r3, #0]
 800899e:	3304      	adds	r3, #4
 80089a0:	8019      	strh	r1, [r3, #0]
 80089a2:	f107 030a 	add.w	r3, r7, #10
 80089a6:	2200      	movs	r2, #0
 80089a8:	601a      	str	r2, [r3, #0]

	GUI_SetFont(&GUI_Font20_1);
 80089aa:	483c      	ldr	r0, [pc, #240]	; (8008a9c <DisplayGui_HandlingCurvesTest+0x210>)
 80089ac:	f014 f990 	bl	801ccd0 <GUI_SetFont>

	GUI_SetColor(GUI_GRAY);
 80089b0:	483b      	ldr	r0, [pc, #236]	; (8008aa0 <DisplayGui_HandlingCurvesTest+0x214>)
 80089b2:	f014 f9bb 	bl	801cd2c <GUI_SetColor>
	GUI_SetTextAlign(GUI_TA_HCENTER);
 80089b6:	2002      	movs	r0, #2
 80089b8:	f014 f980 	bl	801ccbc <GUI_SetTextAlign>
	GUI_DispStringAt(steeringTextString, 480 / 2 - 95, y - 4);
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	1f1a      	subs	r2, r3, #4
 80089c0:	1d3b      	adds	r3, r7, #4
 80089c2:	2191      	movs	r1, #145	; 0x91
 80089c4:	4618      	mov	r0, r3
 80089c6:	f015 f88f 	bl	801dae8 <GUI_DispStringAt>
	GUI_SetTextAlign(GUI_TA_HCENTER);
 80089ca:	2002      	movs	r0, #2
 80089cc:	f014 f976 	bl	801ccbc <GUI_SetTextAlign>
	GUI_DispStringAt(steeringTextString, 480 / 2 + 95, y - 4);
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	1f1a      	subs	r2, r3, #4
 80089d4:	1d3b      	adds	r3, r7, #4
 80089d6:	f240 114f 	movw	r1, #335	; 0x14f
 80089da:	4618      	mov	r0, r3
 80089dc:	f015 f884 	bl	801dae8 <GUI_DispStringAt>

	strcpy(steeringTextString, "Deg");
 80089e0:	1d3b      	adds	r3, r7, #4
 80089e2:	4a30      	ldr	r2, [pc, #192]	; (8008aa4 <DisplayGui_HandlingCurvesTest+0x218>)
 80089e4:	601a      	str	r2, [r3, #0]

	GUI_SetColor(GUI_DARKGRAY);
 80089e6:	4830      	ldr	r0, [pc, #192]	; (8008aa8 <DisplayGui_HandlingCurvesTest+0x21c>)
 80089e8:	f014 f9a0 	bl	801cd2c <GUI_SetColor>
	GUI_SetTextAlign(GUI_TA_HCENTER);
 80089ec:	2002      	movs	r0, #2
 80089ee:	f014 f965 	bl	801ccbc <GUI_SetTextAlign>
	GUI_DispStringAt(steeringTextString, 480 / 2 - 95, y + 15);
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f103 020f 	add.w	r2, r3, #15
 80089f8:	1d3b      	adds	r3, r7, #4
 80089fa:	2191      	movs	r1, #145	; 0x91
 80089fc:	4618      	mov	r0, r3
 80089fe:	f015 f873 	bl	801dae8 <GUI_DispStringAt>
	GUI_SetTextAlign(GUI_TA_HCENTER);
 8008a02:	2002      	movs	r0, #2
 8008a04:	f014 f95a 	bl	801ccbc <GUI_SetTextAlign>
	GUI_DispStringAt(steeringTextString, 480 / 2 + 95, y + 15);
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	f103 020f 	add.w	r2, r3, #15
 8008a0e:	1d3b      	adds	r3, r7, #4
 8008a10:	f240 114f 	movw	r1, #335	; 0x14f
 8008a14:	4618      	mov	r0, r3
 8008a16:	f015 f867 	bl	801dae8 <GUI_DispStringAt>

	GUI_SetTextAlign(GUI_TA_LEFT);
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	f014 f94e 	bl	801ccbc <GUI_SetTextAlign>

	float steerAngle = map_float(CAR_Data.steer.intData, steer_MIN_VALUE, steer_MAX_VALUE, -117, 117);
 8008a20:	4b19      	ldr	r3, [pc, #100]	; (8008a88 <DisplayGui_HandlingCurvesTest+0x1fc>)
 8008a22:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8008a26:	ee07 3a90 	vmov	s15, r3
 8008a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a2e:	ed9f 2a1f 	vldr	s4, [pc, #124]	; 8008aac <DisplayGui_HandlingCurvesTest+0x220>
 8008a32:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8008ab0 <DisplayGui_HandlingCurvesTest+0x224>
 8008a36:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8008ab4 <DisplayGui_HandlingCurvesTest+0x228>
 8008a3a:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8008ab8 <DisplayGui_HandlingCurvesTest+0x22c>
 8008a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8008a42:	f00b ff5a 	bl	80148fa <map_float>
 8008a46:	ed87 0a07 	vstr	s0, [r7, #28]

	if(steerAngle < 0) steerAngle*=-1;
 8008a4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8008a4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a56:	d505      	bpl.n	8008a64 <DisplayGui_HandlingCurvesTest+0x1d8>
 8008a58:	edd7 7a07 	vldr	s15, [r7, #28]
 8008a5c:	eef1 7a67 	vneg.f32	s15, s15
 8008a60:	edc7 7a07 	vstr	s15, [r7, #28]

	steerColor = PAGE_TEXT_COLOR;
 8008a64:	4b0b      	ldr	r3, [pc, #44]	; (8008a94 <DisplayGui_HandlingCurvesTest+0x208>)
 8008a66:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008a6a:	601a      	str	r2, [r3, #0]

	for(uint8_t i = 0; i < steerGreenPointsNumber; i++)
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	76fb      	strb	r3, [r7, #27]
 8008a70:	e04f      	b.n	8008b12 <DisplayGui_HandlingCurvesTest+0x286>
 8008a72:	bf00      	nop
 8008a74:	20000044 	.word	0x20000044
 8008a78:	200050c1 	.word	0x200050c1
 8008a7c:	20006a98 	.word	0x20006a98
 8008a80:	200050c4 	.word	0x200050c4
 8008a84:	200050c0 	.word	0x200050c0
 8008a88:	2000041c 	.word	0x2000041c
 8008a8c:	20004580 	.word	0x20004580
 8008a90:	00501400 	.word	0x00501400
 8008a94:	200000d8 	.word	0x200000d8
 8008a98:	0802242c 	.word	0x0802242c
 8008a9c:	0812b6c8 	.word	0x0812b6c8
 8008aa0:	00808080 	.word	0x00808080
 8008aa4:	00676544 	.word	0x00676544
 8008aa8:	00404040 	.word	0x00404040
 8008aac:	42ea0000 	.word	0x42ea0000
 8008ab0:	c2ea0000 	.word	0xc2ea0000
 8008ab4:	450a2000 	.word	0x450a2000
 8008ab8:	441b0000 	.word	0x441b0000
	{
		if(steerAngle <= steerGreenPoints[i] + steerGreenDegWindow/2 && steerAngle >= steerGreenPoints[i] - steerGreenDegWindow/2)
 8008abc:	7efb      	ldrb	r3, [r7, #27]
 8008abe:	4a58      	ldr	r2, [pc, #352]	; (8008c20 <DisplayGui_HandlingCurvesTest+0x394>)
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	edd3 7a00 	vldr	s15, [r3]
 8008ac8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ad0:	ed97 7a07 	vldr	s14, [r7, #28]
 8008ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008adc:	d816      	bhi.n	8008b0c <DisplayGui_HandlingCurvesTest+0x280>
 8008ade:	7efb      	ldrb	r3, [r7, #27]
 8008ae0:	4a4f      	ldr	r2, [pc, #316]	; (8008c20 <DisplayGui_HandlingCurvesTest+0x394>)
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	edd3 7a00 	vldr	s15, [r3]
 8008aea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008af2:	ed97 7a07 	vldr	s14, [r7, #28]
 8008af6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008afe:	db05      	blt.n	8008b0c <DisplayGui_HandlingCurvesTest+0x280>
		{
			steerColor = GUI_GREEN;
 8008b00:	4b48      	ldr	r3, [pc, #288]	; (8008c24 <DisplayGui_HandlingCurvesTest+0x398>)
 8008b02:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8008b06:	601a      	str	r2, [r3, #0]

			i = steerGreenPointsNumber;
 8008b08:	2312      	movs	r3, #18
 8008b0a:	76fb      	strb	r3, [r7, #27]
	for(uint8_t i = 0; i < steerGreenPointsNumber; i++)
 8008b0c:	7efb      	ldrb	r3, [r7, #27]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	76fb      	strb	r3, [r7, #27]
 8008b12:	7efb      	ldrb	r3, [r7, #27]
 8008b14:	2b11      	cmp	r3, #17
 8008b16:	d9d1      	bls.n	8008abc <DisplayGui_HandlingCurvesTest+0x230>
		}
	}


	int x = 175;
 8008b18:	23af      	movs	r3, #175	; 0xaf
 8008b1a:	613b      	str	r3, [r7, #16]

	static GUI_DrawNumAtTypeDef steerText1 = {0};
	static GUI_DrawNumAtTypeDef steerText2 = {0};
	steerText1.number = steerAngle;
 8008b1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8008b20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008b24:	4b40      	ldr	r3, [pc, #256]	; (8008c28 <DisplayGui_HandlingCurvesTest+0x39c>)
 8008b26:	ed83 7b00 	vstr	d7, [r3]
	steerText2.number = steerAngle;
 8008b2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8008b2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008b32:	4b3e      	ldr	r3, [pc, #248]	; (8008c2c <DisplayGui_HandlingCurvesTest+0x3a0>)
 8008b34:	ed83 7b00 	vstr	d7, [r3]

	char string[2] = "";
 8008b38:	2300      	movs	r3, #0
 8008b3a:	803b      	strh	r3, [r7, #0]

	GUI_DrawNumAt(480 / 2 - x, y, &GUI_FontD32, steerColor, PAGE_BACK_COLOR, &steerText1, UNDEFINED_NINT, 1, DISABLE, DISABLE, CENTER, string, string);
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	b218      	sxth	r0, r3
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	b219      	sxth	r1, r3
 8008b4c:	4b35      	ldr	r3, [pc, #212]	; (8008c24 <DisplayGui_HandlingCurvesTest+0x398>)
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	463b      	mov	r3, r7
 8008b52:	9308      	str	r3, [sp, #32]
 8008b54:	463b      	mov	r3, r7
 8008b56:	9307      	str	r3, [sp, #28]
 8008b58:	2302      	movs	r3, #2
 8008b5a:	9306      	str	r3, [sp, #24]
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	9305      	str	r3, [sp, #20]
 8008b60:	2300      	movs	r3, #0
 8008b62:	9304      	str	r3, [sp, #16]
 8008b64:	2301      	movs	r3, #1
 8008b66:	9303      	str	r3, [sp, #12]
 8008b68:	f04f 33ff 	mov.w	r3, #4294967295
 8008b6c:	9302      	str	r3, [sp, #8]
 8008b6e:	4b2e      	ldr	r3, [pc, #184]	; (8008c28 <DisplayGui_HandlingCurvesTest+0x39c>)
 8008b70:	9301      	str	r3, [sp, #4]
 8008b72:	2300      	movs	r3, #0
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	4613      	mov	r3, r2
 8008b78:	4a2d      	ldr	r2, [pc, #180]	; (8008c30 <DisplayGui_HandlingCurvesTest+0x3a4>)
 8008b7a:	f00c feb5 	bl	80158e8 <GUI_DrawNumAt>
	GUI_DrawNumAt(480 / 2 + x, y, &GUI_FontD32, steerColor, PAGE_BACK_COLOR, &steerText2, UNDEFINED_NINT, 1, DISABLE, DISABLE, CENTER, string, string);
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	33f0      	adds	r3, #240	; 0xf0
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	b218      	sxth	r0, r3
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	b219      	sxth	r1, r3
 8008b8c:	4b25      	ldr	r3, [pc, #148]	; (8008c24 <DisplayGui_HandlingCurvesTest+0x398>)
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	463b      	mov	r3, r7
 8008b92:	9308      	str	r3, [sp, #32]
 8008b94:	463b      	mov	r3, r7
 8008b96:	9307      	str	r3, [sp, #28]
 8008b98:	2302      	movs	r3, #2
 8008b9a:	9306      	str	r3, [sp, #24]
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	9305      	str	r3, [sp, #20]
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	9304      	str	r3, [sp, #16]
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	9303      	str	r3, [sp, #12]
 8008ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bac:	9302      	str	r3, [sp, #8]
 8008bae:	4b1f      	ldr	r3, [pc, #124]	; (8008c2c <DisplayGui_HandlingCurvesTest+0x3a0>)
 8008bb0:	9301      	str	r3, [sp, #4]
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	4a1d      	ldr	r2, [pc, #116]	; (8008c30 <DisplayGui_HandlingCurvesTest+0x3a4>)
 8008bba:	f00c fe95 	bl	80158e8 <GUI_DrawNumAt>

	if(steerAngle < 100)
 8008bbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8008bc2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008c34 <DisplayGui_HandlingCurvesTest+0x3a8>
 8008bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bce:	d51a      	bpl.n	8008c06 <DisplayGui_HandlingCurvesTest+0x37a>
	{
		if(steerColor == GUI_GREEN)
 8008bd0:	4b14      	ldr	r3, [pc, #80]	; (8008c24 <DisplayGui_HandlingCurvesTest+0x398>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8008bd8:	d104      	bne.n	8008be4 <DisplayGui_HandlingCurvesTest+0x358>
			GUI_SetColor(GUI_GREEN);
 8008bda:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8008bde:	f014 f8a5 	bl	801cd2c <GUI_SetColor>
 8008be2:	e002      	b.n	8008bea <DisplayGui_HandlingCurvesTest+0x35e>
		else
			GUI_SetColor(PAGE_BACK_COLOR);
 8008be4:	2000      	movs	r0, #0
 8008be6:	f014 f8a1 	bl	801cd2c <GUI_SetColor>

		GUI_FillRect(3, 35, 3 + 15, 35 + 50);
 8008bea:	2355      	movs	r3, #85	; 0x55
 8008bec:	2212      	movs	r2, #18
 8008bee:	2123      	movs	r1, #35	; 0x23
 8008bf0:	2003      	movs	r0, #3
 8008bf2:	f014 f9a5 	bl	801cf40 <GUI_FillRect>
		GUI_FillRect(477 - 15, 35, 477, 35 + 50);
 8008bf6:	2355      	movs	r3, #85	; 0x55
 8008bf8:	f240 12dd 	movw	r2, #477	; 0x1dd
 8008bfc:	2123      	movs	r1, #35	; 0x23
 8008bfe:	f44f 70e7 	mov.w	r0, #462	; 0x1ce
 8008c02:	f014 f99d 	bl	801cf40 <GUI_FillRect>
	}


	GUI_SetColor(PAGE_TEXT_COLOR);
 8008c06:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008c0a:	f014 f88f 	bl	801cd2c <GUI_SetColor>


	//CORE FUNCTION END

	reInitFlagHandlingCurves = 0;
 8008c0e:	4b0a      	ldr	r3, [pc, #40]	; (8008c38 <DisplayGui_HandlingCurvesTest+0x3ac>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	701a      	strb	r2, [r3, #0]

	DisplayGui_END:;
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
 8008c18:	3720      	adds	r7, #32
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	20000090 	.word	0x20000090
 8008c24:	200000d8 	.word	0x200000d8
 8008c28:	200050c8 	.word	0x200050c8
 8008c2c:	200050e0 	.word	0x200050e0
 8008c30:	08120990 	.word	0x08120990
 8008c34:	42c80000 	.word	0x42c80000
 8008c38:	200050c0 	.word	0x200050c0

08008c3c <DisplayGui_DataInit>:


void DisplayGui_DataInit(uint8_t extReInitFlag)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	71fb      	strb	r3, [r7, #7]
	static uint8_t flagInit = 0;


//#pragma warning disable

	if(selectedGui_old != selectedGui || selectedGui_old != GuiHandlingCurvesTest || extReInitFlag != 0)
 8008c46:	4b55      	ldr	r3, [pc, #340]	; (8008d9c <DisplayGui_DataInit+0x160>)
 8008c48:	781a      	ldrb	r2, [r3, #0]
 8008c4a:	4b55      	ldr	r3, [pc, #340]	; (8008da0 <DisplayGui_DataInit+0x164>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d106      	bne.n	8008c60 <DisplayGui_DataInit+0x24>
 8008c52:	4b52      	ldr	r3, [pc, #328]	; (8008d9c <DisplayGui_DataInit+0x160>)
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	2b1f      	cmp	r3, #31
 8008c58:	d102      	bne.n	8008c60 <DisplayGui_DataInit+0x24>
 8008c5a:	79fb      	ldrb	r3, [r7, #7]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d002      	beq.n	8008c66 <DisplayGui_DataInit+0x2a>
		flagInit = 0;
 8008c60:	4b50      	ldr	r3, [pc, #320]	; (8008da4 <DisplayGui_DataInit+0x168>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	701a      	strb	r2, [r3, #0]

	if(flagInit == 0)
 8008c66:	4b4f      	ldr	r3, [pc, #316]	; (8008da4 <DisplayGui_DataInit+0x168>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f040 8091 	bne.w	8008d92 <DisplayGui_DataInit+0x156>
	{
		if(Display_DriveSTD_Initialized != 0)
 8008c70:	4b4d      	ldr	r3, [pc, #308]	; (8008da8 <DisplayGui_DataInit+0x16c>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d002      	beq.n	8008c7e <DisplayGui_DataInit+0x42>
			flagInit = 1;
 8008c78:	4b4a      	ldr	r3, [pc, #296]	; (8008da4 <DisplayGui_DataInit+0x168>)
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	701a      	strb	r2, [r3, #0]

//#pragma warning restore

		for(uint8_t i = 0; i < 20; i++)
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73fb      	strb	r3, [r7, #15]
 8008c82:	e010      	b.n	8008ca6 <DisplayGui_DataInit+0x6a>
		{
			handlingCurves_gui_data[i] = DriveSTD_noData;
 8008c84:	7bfa      	ldrb	r2, [r7, #15]
 8008c86:	4949      	ldr	r1, [pc, #292]	; (8008dac <DisplayGui_DataInit+0x170>)
 8008c88:	4613      	mov	r3, r2
 8008c8a:	00db      	lsls	r3, r3, #3
 8008c8c:	4413      	add	r3, r2
 8008c8e:	011b      	lsls	r3, r3, #4
 8008c90:	440b      	add	r3, r1
 8008c92:	4a47      	ldr	r2, [pc, #284]	; (8008db0 <DisplayGui_DataInit+0x174>)
 8008c94:	4618      	mov	r0, r3
 8008c96:	4611      	mov	r1, r2
 8008c98:	2390      	movs	r3, #144	; 0x90
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	f018 ffb2 	bl	8021c04 <memcpy>
		for(uint8_t i = 0; i < 20; i++)
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	73fb      	strb	r3, [r7, #15]
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	2b13      	cmp	r3, #19
 8008caa:	d9eb      	bls.n	8008c84 <DisplayGui_DataInit+0x48>
		handlingCurves_gui_data[9] = DriveSTD_traction;
		handlingCurves_gui_data[10] = DriveSTD_RR_Ty_Temp;
		handlingCurves_gui_data[11] = DriveSTD_FR_Ty_Temp;
*/

		handlingCurves_gui_data[0] = DriveSTD_waterTemp;
 8008cac:	4a3f      	ldr	r2, [pc, #252]	; (8008dac <DisplayGui_DataInit+0x170>)
 8008cae:	4b41      	ldr	r3, [pc, #260]	; (8008db4 <DisplayGui_DataInit+0x178>)
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	2390      	movs	r3, #144	; 0x90
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	f018 ffa4 	bl	8021c04 <memcpy>
		handlingCurves_gui_data[1] = DriveSTD_oilTemp;
 8008cbc:	4b3b      	ldr	r3, [pc, #236]	; (8008dac <DisplayGui_DataInit+0x170>)
 8008cbe:	4a3e      	ldr	r2, [pc, #248]	; (8008db8 <DisplayGui_DataInit+0x17c>)
 8008cc0:	3390      	adds	r3, #144	; 0x90
 8008cc2:	4611      	mov	r1, r2
 8008cc4:	2290      	movs	r2, #144	; 0x90
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f018 ff9c 	bl	8021c04 <memcpy>
		handlingCurves_gui_data[2] = DriveSTD_airTemp;
 8008ccc:	4b37      	ldr	r3, [pc, #220]	; (8008dac <DisplayGui_DataInit+0x170>)
 8008cce:	4a3b      	ldr	r2, [pc, #236]	; (8008dbc <DisplayGui_DataInit+0x180>)
 8008cd0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	2290      	movs	r2, #144	; 0x90
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f018 ff93 	bl	8021c04 <memcpy>
		handlingCurves_gui_data[3] = DriveSTD_batteryVoltage;
 8008cde:	4b33      	ldr	r3, [pc, #204]	; (8008dac <DisplayGui_DataInit+0x170>)
 8008ce0:	4a37      	ldr	r2, [pc, #220]	; (8008dc0 <DisplayGui_DataInit+0x184>)
 8008ce2:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	2290      	movs	r2, #144	; 0x90
 8008cea:	4618      	mov	r0, r3
 8008cec:	f018 ff8a 	bl	8021c04 <memcpy>
		handlingCurves_gui_data[4] = DriveSTD_RL_Ty_Temp;
 8008cf0:	4b2e      	ldr	r3, [pc, #184]	; (8008dac <DisplayGui_DataInit+0x170>)
 8008cf2:	4a34      	ldr	r2, [pc, #208]	; (8008dc4 <DisplayGui_DataInit+0x188>)
 8008cf4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8008cf8:	4611      	mov	r1, r2
 8008cfa:	2290      	movs	r2, #144	; 0x90
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f018 ff81 	bl	8021c04 <memcpy>
		handlingCurves_gui_data[5] = DriveSTD_FL_Ty_Temp;
 8008d02:	4b2a      	ldr	r3, [pc, #168]	; (8008dac <DisplayGui_DataInit+0x170>)
 8008d04:	4a30      	ldr	r2, [pc, #192]	; (8008dc8 <DisplayGui_DataInit+0x18c>)
 8008d06:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	2290      	movs	r2, #144	; 0x90
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f018 ff78 	bl	8021c04 <memcpy>
		handlingCurves_gui_data[6] = DriveSTD_FR_Ty_Temp;
 8008d14:	4b25      	ldr	r3, [pc, #148]	; (8008dac <DisplayGui_DataInit+0x170>)
 8008d16:	4a2d      	ldr	r2, [pc, #180]	; (8008dcc <DisplayGui_DataInit+0x190>)
 8008d18:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	2290      	movs	r2, #144	; 0x90
 8008d20:	4618      	mov	r0, r3
 8008d22:	f018 ff6f 	bl	8021c04 <memcpy>

		handlingCurves_gui_data[7] = DriveSTD_RR_Ty_Temp;
 8008d26:	4b21      	ldr	r3, [pc, #132]	; (8008dac <DisplayGui_DataInit+0x170>)
 8008d28:	4a29      	ldr	r2, [pc, #164]	; (8008dd0 <DisplayGui_DataInit+0x194>)
 8008d2a:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8008d2e:	4611      	mov	r1, r2
 8008d30:	2290      	movs	r2, #144	; 0x90
 8008d32:	4618      	mov	r0, r3
 8008d34:	f018 ff66 	bl	8021c04 <memcpy>
		handlingCurves_gui_data[8] = DriveSTD_speed;
 8008d38:	4b1c      	ldr	r3, [pc, #112]	; (8008dac <DisplayGui_DataInit+0x170>)
 8008d3a:	4a26      	ldr	r2, [pc, #152]	; (8008dd4 <DisplayGui_DataInit+0x198>)
 8008d3c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8008d40:	4611      	mov	r1, r2
 8008d42:	2290      	movs	r2, #144	; 0x90
 8008d44:	4618      	mov	r0, r3
 8008d46:	f018 ff5d 	bl	8021c04 <memcpy>
		handlingCurves_gui_data[9] = DriveSTD_traction;
 8008d4a:	4b18      	ldr	r3, [pc, #96]	; (8008dac <DisplayGui_DataInit+0x170>)
 8008d4c:	4a22      	ldr	r2, [pc, #136]	; (8008dd8 <DisplayGui_DataInit+0x19c>)
 8008d4e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8008d52:	4611      	mov	r1, r2
 8008d54:	2290      	movs	r2, #144	; 0x90
 8008d56:	4618      	mov	r0, r3
 8008d58:	f018 ff54 	bl	8021c04 <memcpy>
		handlingCurves_gui_data[10] = DriveSTD_oilPressure;
 8008d5c:	4b13      	ldr	r3, [pc, #76]	; (8008dac <DisplayGui_DataInit+0x170>)
 8008d5e:	4a1f      	ldr	r2, [pc, #124]	; (8008ddc <DisplayGui_DataInit+0x1a0>)
 8008d60:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8008d64:	4611      	mov	r1, r2
 8008d66:	2290      	movs	r2, #144	; 0x90
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f018 ff4b 	bl	8021c04 <memcpy>
		handlingCurves_gui_data[11] = DriveSTD_fuelPressure;
 8008d6e:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <DisplayGui_DataInit+0x170>)
 8008d70:	4a1b      	ldr	r2, [pc, #108]	; (8008de0 <DisplayGui_DataInit+0x1a4>)
 8008d72:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 8008d76:	4611      	mov	r1, r2
 8008d78:	2290      	movs	r2, #144	; 0x90
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f018 ff42 	bl	8021c04 <memcpy>


		handlingCurves_gui_data[12] = DriveSTD_tps;
 8008d80:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <DisplayGui_DataInit+0x170>)
 8008d82:	4a18      	ldr	r2, [pc, #96]	; (8008de4 <DisplayGui_DataInit+0x1a8>)
 8008d84:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8008d88:	4611      	mov	r1, r2
 8008d8a:	2290      	movs	r2, #144	; 0x90
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f018 ff39 	bl	8021c04 <memcpy>
	}
}
 8008d92:	bf00      	nop
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000044 	.word	0x20000044
 8008da0:	20002dbe 	.word	0x20002dbe
 8008da4:	200050f8 	.word	0x200050f8
 8008da8:	20006998 	.word	0x20006998
 8008dac:	20004580 	.word	0x20004580
 8008db0:	20005e58 	.word	0x20005e58
 8008db4:	20005ee8 	.word	0x20005ee8
 8008db8:	20005f78 	.word	0x20005f78
 8008dbc:	20006098 	.word	0x20006098
 8008dc0:	20006248 	.word	0x20006248
 8008dc4:	20006758 	.word	0x20006758
 8008dc8:	20006878 	.word	0x20006878
 8008dcc:	20006908 	.word	0x20006908
 8008dd0:	200067e8 	.word	0x200067e8
 8008dd4:	20006368 	.word	0x20006368
 8008dd8:	200063f8 	.word	0x200063f8
 8008ddc:	200061b8 	.word	0x200061b8
 8008de0:	20006128 	.word	0x20006128
 8008de4:	200062d8 	.word	0x200062d8

08008de8 <DisplayGui_Intro>:



void DisplayGui_Intro(void)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	af00      	add	r7, sp, #0
	GUI_SetTextAlign(GUI_TA_HCENTER);
 8008dec:	2002      	movs	r0, #2
 8008dee:	f013 ff65 	bl	801ccbc <GUI_SetTextAlign>

	GUI_SetColor(GUI_WHITE);
 8008df2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008df6:	f013 ff99 	bl	801cd2c <GUI_SetColor>

	GUI_SetFont(&GUI_FontD80);
	GUI_DispDecAt(1, 214, 90, 1);
	*/

	GUI_SetFont(&GUI_Font32B_1);
 8008dfa:	480a      	ldr	r0, [pc, #40]	; (8008e24 <DisplayGui_Intro+0x3c>)
 8008dfc:	f013 ff68 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt("SKIDPAD", 236, 50 + 50);
 8008e00:	2264      	movs	r2, #100	; 0x64
 8008e02:	21ec      	movs	r1, #236	; 0xec
 8008e04:	4808      	ldr	r0, [pc, #32]	; (8008e28 <DisplayGui_Intro+0x40>)
 8008e06:	f014 fe6f 	bl	801dae8 <GUI_DispStringAt>


	GUI_SetTextAlign(GUI_TA_LEFT);
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	f013 ff56 	bl	801ccbc <GUI_SetTextAlign>

	GUI_SetColor(GUI_WHITE);
 8008e10:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008e14:	f013 ff8a 	bl	801cd2c <GUI_SetColor>
	GUI_SetBkColor(GUI_BLACK);
 8008e18:	2000      	movs	r0, #0
 8008e1a:	f013 ff85 	bl	801cd28 <GUI_SetBkColor>
}
 8008e1e:	bf00      	nop
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	08127b30 	.word	0x08127b30
 8008e28:	08022438 	.word	0x08022438

08008e2c <DisplayGui_Logo>:
extern GUI_CONST_STORAGE GUI_BITMAP bmMMRLogo_480_265_8888;

extern LTDC_HandleTypeDef hltdc;

void DisplayGui_Logo(void)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	af00      	add	r7, sp, #0
	if(selectedGui_old != GuiLogo && DEBUG_MODE == 0)
 8008e30:	4b0e      	ldr	r3, [pc, #56]	; (8008e6c <DisplayGui_Logo+0x40>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b63      	cmp	r3, #99	; 0x63
 8008e36:	d017      	beq.n	8008e68 <DisplayGui_Logo+0x3c>
	{
		DisplayOFF();
 8008e38:	f7fd fd96 	bl	8006968 <DisplayOFF>
		GUI_SetBkColor(0x00D3D3E3);
 8008e3c:	480c      	ldr	r0, [pc, #48]	; (8008e70 <DisplayGui_Logo+0x44>)
 8008e3e:	f013 ff73 	bl	801cd28 <GUI_SetBkColor>
		GUI_Clear();
 8008e42:	f015 f81f 	bl	801de84 <GUI_Clear>

#if DEBUG_MODE == 0
		GUI_DrawBitmap(&bmMMRLogo_480_265_8888, 0, (272 - bmMMRLogo_480_265_8888.YSize) - 4);
 8008e46:	4b0b      	ldr	r3, [pc, #44]	; (8008e74 <DisplayGui_Logo+0x48>)
 8008e48:	885b      	ldrh	r3, [r3, #2]
 8008e4a:	f5c3 7386 	rsb	r3, r3, #268	; 0x10c
 8008e4e:	461a      	mov	r2, r3
 8008e50:	2100      	movs	r1, #0
 8008e52:	4808      	ldr	r0, [pc, #32]	; (8008e74 <DisplayGui_Logo+0x48>)
 8008e54:	f014 fe22 	bl	801da9c <GUI_DrawBitmap>
#endif

		GUI_SetBkColor(GUI_BLACK);
 8008e58:	2000      	movs	r0, #0
 8008e5a:	f013 ff65 	bl	801cd28 <GUI_SetBkColor>

		HAL_Delay(100);
 8008e5e:	2064      	movs	r0, #100	; 0x64
 8008e60:	f007 fc76 	bl	8010750 <HAL_Delay>

		DisplayON();
 8008e64:	f7fd fd8c 	bl	8006980 <DisplayON>
	}
}
 8008e68:	bf00      	nop
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	20000044 	.word	0x20000044
 8008e70:	00d3d3e3 	.word	0x00d3d3e3
 8008e74:	080ab234 	.word	0x080ab234

08008e78 <DisplayGui_Old1>:

#define RPM_BAR_LENGTH_OFFSET	0


void DisplayGui_Old1(void)
{
 8008e78:	b590      	push	{r4, r7, lr}
 8008e7a:	b093      	sub	sp, #76	; 0x4c
 8008e7c:	af0a      	add	r7, sp, #40	; 0x28
	// Intro section BEGIN
	static uint32_t millisGuiIntro = 0;
	static uint8_t introStatus = 0;

	if(selectedGui_old != GuiOld1 && selectedGui_old != GuiAlarm)
 8008e7e:	4ba6      	ldr	r3, [pc, #664]	; (8009118 <DisplayGui_Old1+0x2a0>)
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	2b0b      	cmp	r3, #11
 8008e84:	d00c      	beq.n	8008ea0 <DisplayGui_Old1+0x28>
 8008e86:	4ba4      	ldr	r3, [pc, #656]	; (8009118 <DisplayGui_Old1+0x2a0>)
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	2bfe      	cmp	r3, #254	; 0xfe
 8008e8c:	d008      	beq.n	8008ea0 <DisplayGui_Old1+0x28>
	{
		introStatus = 1;
 8008e8e:	4ba3      	ldr	r3, [pc, #652]	; (800911c <DisplayGui_Old1+0x2a4>)
 8008e90:	2201      	movs	r2, #1
 8008e92:	701a      	strb	r2, [r3, #0]
		millisGuiIntro = millis;
 8008e94:	4ba2      	ldr	r3, [pc, #648]	; (8009120 <DisplayGui_Old1+0x2a8>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4aa2      	ldr	r2, [pc, #648]	; (8009124 <DisplayGui_Old1+0x2ac>)
 8008e9a:	6013      	str	r3, [r2, #0]

		GUI_Clear();
 8008e9c:	f014 fff2 	bl	801de84 <GUI_Clear>
	}

	if(introStatus == 1)
 8008ea0:	4b9e      	ldr	r3, [pc, #632]	; (800911c <DisplayGui_Old1+0x2a4>)
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d110      	bne.n	8008eca <DisplayGui_Old1+0x52>
	{
		if(millis < millisGuiIntro + DISPLAY_GUI_INTRO_TIME)
 8008ea8:	4b9e      	ldr	r3, [pc, #632]	; (8009124 <DisplayGui_Old1+0x2ac>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 8008eb0:	4b9b      	ldr	r3, [pc, #620]	; (8009120 <DisplayGui_Old1+0x2a8>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d903      	bls.n	8008ec0 <DisplayGui_Old1+0x48>
		{
			DisplayGui_Old1_Intro();
 8008eb8:	f001 f810 	bl	8009edc <DisplayGui_Old1_Intro>
			goto DisplayGui_Old1_END;
 8008ebc:	f000 bfd5 	b.w	8009e6a <DisplayGui_Old1+0xff2>
		}
		else
		{
			introStatus = 0;
 8008ec0:	4b96      	ldr	r3, [pc, #600]	; (800911c <DisplayGui_Old1+0x2a4>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	701a      	strb	r2, [r3, #0]
			GUI_Clear();
 8008ec6:	f014 ffdd 	bl	801de84 <GUI_Clear>
	//CORE FUNCTION BEGIN

	//DisplayGui_Old1Armature();

	int x, y, xt, yt;
	char *string = "";
 8008eca:	4b97      	ldr	r3, [pc, #604]	; (8009128 <DisplayGui_Old1+0x2b0>)
 8008ecc:	617b      	str	r3, [r7, #20]

	char *a = "";
 8008ece:	4b96      	ldr	r3, [pc, #600]	; (8009128 <DisplayGui_Old1+0x2b0>)
 8008ed0:	60fb      	str	r3, [r7, #12]
	char *b = "";
 8008ed2:	4b95      	ldr	r3, [pc, #596]	; (8009128 <DisplayGui_Old1+0x2b0>)
 8008ed4:	60bb      	str	r3, [r7, #8]

	static uint32_t millisDataRefresh = 0;
	static uint8_t dataRefresh = 1;

	if(millis >= millisDataRefresh + 100)
 8008ed6:	4b95      	ldr	r3, [pc, #596]	; (800912c <DisplayGui_Old1+0x2b4>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8008ede:	4b90      	ldr	r3, [pc, #576]	; (8009120 <DisplayGui_Old1+0x2a8>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d806      	bhi.n	8008ef4 <DisplayGui_Old1+0x7c>
	{
		millisDataRefresh = millis;
 8008ee6:	4b8e      	ldr	r3, [pc, #568]	; (8009120 <DisplayGui_Old1+0x2a8>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a90      	ldr	r2, [pc, #576]	; (800912c <DisplayGui_Old1+0x2b4>)
 8008eec:	6013      	str	r3, [r2, #0]
		dataRefresh = 1;
 8008eee:	4b90      	ldr	r3, [pc, #576]	; (8009130 <DisplayGui_Old1+0x2b8>)
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	701a      	strb	r2, [r3, #0]
	if(vBat > 15)						vBat = 0.1;

*/
	// RPM BAR BEGIN

	Display_OldRpmBar(3 + RPM_BAR_LENGTH_OFFSET, 23, 474 - RPM_BAR_LENGTH_OFFSET*2, 20, rpm, 0, 5500, 10500, 12500);
 8008ef4:	4b8f      	ldr	r3, [pc, #572]	; (8009134 <DisplayGui_Old1+0x2bc>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8008efe:	9204      	str	r2, [sp, #16]
 8008f00:	f642 1204 	movw	r2, #10500	; 0x2904
 8008f04:	9203      	str	r2, [sp, #12]
 8008f06:	f241 527c 	movw	r2, #5500	; 0x157c
 8008f0a:	9202      	str	r2, [sp, #8]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	9201      	str	r2, [sp, #4]
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	2314      	movs	r3, #20
 8008f14:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8008f18:	2117      	movs	r1, #23
 8008f1a:	2003      	movs	r0, #3
 8008f1c:	f007 f9bc 	bl	8010298 <Display_OldRpmBar>

	// GEAR BEGIN

	static uint8_t gear_old = 0;

	if(gear_old != gear)
 8008f20:	4b85      	ldr	r3, [pc, #532]	; (8009138 <DisplayGui_Old1+0x2c0>)
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	4b85      	ldr	r3, [pc, #532]	; (800913c <DisplayGui_Old1+0x2c4>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d009      	beq.n	8008f42 <DisplayGui_Old1+0xca>
	{
		GUI_SetColor(GUI_BLACK);
 8008f2e:	2000      	movs	r0, #0
 8008f30:	f013 fefc 	bl	801cd2c <GUI_SetColor>
		GUI_FillRect(190, 20 + GUI_Y_OFFSET, 290, 22 + 126 + GUI_Y_OFFSET + 30);
 8008f34:	23c2      	movs	r3, #194	; 0xc2
 8008f36:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008f3a:	2124      	movs	r1, #36	; 0x24
 8008f3c:	20be      	movs	r0, #190	; 0xbe
 8008f3e:	f013 ffff 	bl	801cf40 <GUI_FillRect>
			GUI_FillRect(190, 22 + GUI_Y_OFFSET, 290, 22 + 126 + GUI_Y_OFFSET + 30);

	}
#elif HQ_GEARBOX_ENABLE == 1

		switch(CAR_Data.gear.intData)
 8008f42:	4b7f      	ldr	r3, [pc, #508]	; (8009140 <DisplayGui_Old1+0x2c8>)
 8008f44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	d858      	bhi.n	8008ffe <DisplayGui_Old1+0x186>
 8008f4c:	a201      	add	r2, pc, #4	; (adr r2, 8008f54 <DisplayGui_Old1+0xdc>)
 8008f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f52:	bf00      	nop
 8008f54:	08008f69 	.word	0x08008f69
 8008f58:	08008f87 	.word	0x08008f87
 8008f5c:	08008fa5 	.word	0x08008fa5
 8008f60:	08008fc3 	.word	0x08008fc3
 8008f64:	08008fe1 	.word	0x08008fe1
		{
			case 0:
				GUI_DrawBitmap(&bmGEARBOX_N_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 6, 20 + GUI_Y_OFFSET + 30);
 8008f68:	4b76      	ldr	r3, [pc, #472]	; (8009144 <DisplayGui_Old1+0x2cc>)
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	da00      	bge.n	8008f76 <DisplayGui_Old1+0xfe>
 8008f74:	3301      	adds	r3, #1
 8008f76:	105b      	asrs	r3, r3, #1
 8008f78:	3306      	adds	r3, #6
 8008f7a:	2242      	movs	r2, #66	; 0x42
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	4872      	ldr	r0, [pc, #456]	; (8009148 <DisplayGui_Old1+0x2d0>)
 8008f80:	f014 fd8c 	bl	801da9c <GUI_DrawBitmap>
				break;
 8008f84:	e045      	b.n	8009012 <DisplayGui_Old1+0x19a>

			case 1:
				GUI_DrawBitmap(&bmGEARBOX_1_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 15, 22 + GUI_Y_OFFSET + 30);
 8008f86:	4b6f      	ldr	r3, [pc, #444]	; (8009144 <DisplayGui_Old1+0x2cc>)
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	da00      	bge.n	8008f94 <DisplayGui_Old1+0x11c>
 8008f92:	3301      	adds	r3, #1
 8008f94:	105b      	asrs	r3, r3, #1
 8008f96:	330f      	adds	r3, #15
 8008f98:	2244      	movs	r2, #68	; 0x44
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	486b      	ldr	r0, [pc, #428]	; (800914c <DisplayGui_Old1+0x2d4>)
 8008f9e:	f014 fd7d 	bl	801da9c <GUI_DrawBitmap>
				break;
 8008fa2:	e036      	b.n	8009012 <DisplayGui_Old1+0x19a>

			case 2:
				GUI_DrawBitmap(&bmGEARBOX_2_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 13, 22 + GUI_Y_OFFSET + 30);
 8008fa4:	4b67      	ldr	r3, [pc, #412]	; (8009144 <DisplayGui_Old1+0x2cc>)
 8008fa6:	881b      	ldrh	r3, [r3, #0]
 8008fa8:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	da00      	bge.n	8008fb2 <DisplayGui_Old1+0x13a>
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	105b      	asrs	r3, r3, #1
 8008fb4:	330d      	adds	r3, #13
 8008fb6:	2244      	movs	r2, #68	; 0x44
 8008fb8:	4619      	mov	r1, r3
 8008fba:	4865      	ldr	r0, [pc, #404]	; (8009150 <DisplayGui_Old1+0x2d8>)
 8008fbc:	f014 fd6e 	bl	801da9c <GUI_DrawBitmap>
				break;
 8008fc0:	e027      	b.n	8009012 <DisplayGui_Old1+0x19a>

			case 3:
				GUI_DrawBitmap(&bmGEARBOX_3_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 15, 22 + GUI_Y_OFFSET + 30);
 8008fc2:	4b60      	ldr	r3, [pc, #384]	; (8009144 <DisplayGui_Old1+0x2cc>)
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	da00      	bge.n	8008fd0 <DisplayGui_Old1+0x158>
 8008fce:	3301      	adds	r3, #1
 8008fd0:	105b      	asrs	r3, r3, #1
 8008fd2:	330f      	adds	r3, #15
 8008fd4:	2244      	movs	r2, #68	; 0x44
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	485e      	ldr	r0, [pc, #376]	; (8009154 <DisplayGui_Old1+0x2dc>)
 8008fda:	f014 fd5f 	bl	801da9c <GUI_DrawBitmap>
				break;
 8008fde:	e018      	b.n	8009012 <DisplayGui_Old1+0x19a>

			case 4:
				GUI_DrawBitmap(&bmGEARBOX_4_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 9, 22 + GUI_Y_OFFSET + 30);
 8008fe0:	4b58      	ldr	r3, [pc, #352]	; (8009144 <DisplayGui_Old1+0x2cc>)
 8008fe2:	881b      	ldrh	r3, [r3, #0]
 8008fe4:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	da00      	bge.n	8008fee <DisplayGui_Old1+0x176>
 8008fec:	3301      	adds	r3, #1
 8008fee:	105b      	asrs	r3, r3, #1
 8008ff0:	3309      	adds	r3, #9
 8008ff2:	2244      	movs	r2, #68	; 0x44
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	4858      	ldr	r0, [pc, #352]	; (8009158 <DisplayGui_Old1+0x2e0>)
 8008ff8:	f014 fd50 	bl	801da9c <GUI_DrawBitmap>
				break;
 8008ffc:	e009      	b.n	8009012 <DisplayGui_Old1+0x19a>

			default:
				GUI_SetColor(GUI_RED);
 8008ffe:	20ff      	movs	r0, #255	; 0xff
 8009000:	f013 fe94 	bl	801cd2c <GUI_SetColor>
				GUI_FillRect(193, 84 + GUI_Y_OFFSET, 288, 207 + GUI_Y_OFFSET + 30);
 8009004:	23fd      	movs	r3, #253	; 0xfd
 8009006:	f44f 7290 	mov.w	r2, #288	; 0x120
 800900a:	2164      	movs	r1, #100	; 0x64
 800900c:	20c1      	movs	r0, #193	; 0xc1
 800900e:	f013 ff97 	bl	801cf40 <GUI_FillRect>

		}

#endif

	gear_old = gear;
 8009012:	4b4a      	ldr	r3, [pc, #296]	; (800913c <DisplayGui_Old1+0x2c4>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	b2da      	uxtb	r2, r3
 8009018:	4b47      	ldr	r3, [pc, #284]	; (8009138 <DisplayGui_Old1+0x2c0>)
 800901a:	701a      	strb	r2, [r3, #0]

	// GEAR END


	GUI_AA_SetFactor(rectAAfactor);
 800901c:	2006      	movs	r0, #6
 800901e:	f016 f991 	bl	801f344 <GUI_AA_SetFactor>
	GUI_AA_EnableHiRes();
 8009022:	f016 f997 	bl	801f354 <GUI_AA_EnableHiRes>
	GUI_AA_SetFactor(rectAAfactor);
 8009026:	2006      	movs	r0, #6
 8009028:	f016 f98c 	bl	801f344 <GUI_AA_SetFactor>

	GUI_SetPenSize(rectThickness);
 800902c:	2004      	movs	r0, #4
 800902e:	f013 fef3 	bl	801ce18 <GUI_SetPenSize>


	// Water Temparature BEGIN

	GUI_SetColor(GUI_WHITE);
 8009032:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009036:	f013 fe79 	bl	801cd2c <GUI_SetColor>
	GUI_SetBkColor(GUI_BLACK);
 800903a:	2000      	movs	r0, #0
 800903c:	f013 fe74 	bl	801cd28 <GUI_SetBkColor>

	xt = 48 + 56;
 8009040:	2368      	movs	r3, #104	; 0x68
 8009042:	61fb      	str	r3, [r7, #28]
	yt = 21 + 25 + GUI_Y_OFFSET;
 8009044:	233e      	movs	r3, #62	; 0x3e
 8009046:	61bb      	str	r3, [r7, #24]

	string = " C";
 8009048:	4b44      	ldr	r3, [pc, #272]	; (800915c <DisplayGui_Old1+0x2e4>)
 800904a:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font32_1);
 800904c:	4844      	ldr	r0, [pc, #272]	; (8009160 <DisplayGui_Old1+0x2e8>)
 800904e:	f013 fe3f 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt - 4, yt - 10);
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	1f19      	subs	r1, r3, #4
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	3b0a      	subs	r3, #10
 800905a:	461a      	mov	r2, r3
 800905c:	6978      	ldr	r0, [r7, #20]
 800905e:	f014 fd43 	bl	801dae8 <GUI_DispStringAt>

	GUI_SetBkColor(GUI_BLACK);
 8009062:	2000      	movs	r0, #0
 8009064:	f013 fe60 	bl	801cd28 <GUI_SetBkColor>

	//GUI_DrawNumAt();

	static GUI_DrawNumAtTypeDef tWaterTEMP;

	if(dataRefresh == 1)
 8009068:	4b31      	ldr	r3, [pc, #196]	; (8009130 <DisplayGui_Old1+0x2b8>)
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d107      	bne.n	8009080 <DisplayGui_Old1+0x208>
		tWaterTEMP.number = tWater;
 8009070:	4b3c      	ldr	r3, [pc, #240]	; (8009164 <DisplayGui_Old1+0x2ec>)
 8009072:	edd3 7a00 	vldr	s15, [r3]
 8009076:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800907a:	4b3b      	ldr	r3, [pc, #236]	; (8009168 <DisplayGui_Old1+0x2f0>)
 800907c:	ed83 7b00 	vstr	d7, [r3]

	//GUI_DrawNumAt(xt - 10, yt - 10, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &tWaterTEMP, 3, 1, DISABLE, DISABLE, RIGHT, a, b);
	GUI_DrawNumAt(xt - 40, yt - 10, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &tWaterTEMP, 3, 1, DISABLE, DISABLE, CENTER, a, b);
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	b29b      	uxth	r3, r3
 8009084:	3b28      	subs	r3, #40	; 0x28
 8009086:	b29b      	uxth	r3, r3
 8009088:	b218      	sxth	r0, r3
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	b29b      	uxth	r3, r3
 800908e:	3b0a      	subs	r3, #10
 8009090:	b29b      	uxth	r3, r3
 8009092:	b219      	sxth	r1, r3
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	9308      	str	r3, [sp, #32]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	9307      	str	r3, [sp, #28]
 800909c:	2302      	movs	r3, #2
 800909e:	9306      	str	r3, [sp, #24]
 80090a0:	2300      	movs	r3, #0
 80090a2:	9305      	str	r3, [sp, #20]
 80090a4:	2300      	movs	r3, #0
 80090a6:	9304      	str	r3, [sp, #16]
 80090a8:	2301      	movs	r3, #1
 80090aa:	9303      	str	r3, [sp, #12]
 80090ac:	2303      	movs	r3, #3
 80090ae:	9302      	str	r3, [sp, #8]
 80090b0:	4b2d      	ldr	r3, [pc, #180]	; (8009168 <DisplayGui_Old1+0x2f0>)
 80090b2:	9301      	str	r3, [sp, #4]
 80090b4:	2300      	movs	r3, #0
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80090bc:	4a28      	ldr	r2, [pc, #160]	; (8009160 <DisplayGui_Old1+0x2e8>)
 80090be:	f00c fc13 	bl	80158e8 <GUI_DrawNumAt>

	GUI_DrawCircle(xt, yt, 3);
 80090c2:	2203      	movs	r2, #3
 80090c4:	69b9      	ldr	r1, [r7, #24]
 80090c6:	69f8      	ldr	r0, [r7, #28]
 80090c8:	f014 ffe8 	bl	801e09c <GUI_DrawCircle>

	GUI_SetBkColor(GUI_BLACK);
 80090cc:	2000      	movs	r0, #0
 80090ce:	f013 fe2b 	bl	801cd28 <GUI_SetBkColor>


	if(tWaterTEMP.number >= tWater_MAX_VALUE)
 80090d2:	4b25      	ldr	r3, [pc, #148]	; (8009168 <DisplayGui_Old1+0x2f0>)
 80090d4:	ed93 7b00 	vldr	d7, [r3]
 80090d8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8009110 <DisplayGui_Old1+0x298>
 80090dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80090e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e4:	db66      	blt.n	80091b4 <DisplayGui_Old1+0x33c>
	{
		static uint32_t millis_blink = 0;
		static uint8_t color_flag = 0;

		if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag == 0)
 80090e6:	4b21      	ldr	r3, [pc, #132]	; (800916c <DisplayGui_Old1+0x2f4>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 80090ee:	4b0c      	ldr	r3, [pc, #48]	; (8009120 <DisplayGui_Old1+0x2a8>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d23e      	bcs.n	8009174 <DisplayGui_Old1+0x2fc>
 80090f6:	4b1e      	ldr	r3, [pc, #120]	; (8009170 <DisplayGui_Old1+0x2f8>)
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d13a      	bne.n	8009174 <DisplayGui_Old1+0x2fc>
		{
			color_flag = 1;
 80090fe:	4b1c      	ldr	r3, [pc, #112]	; (8009170 <DisplayGui_Old1+0x2f8>)
 8009100:	2201      	movs	r2, #1
 8009102:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 8009104:	4b06      	ldr	r3, [pc, #24]	; (8009120 <DisplayGui_Old1+0x2a8>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a18      	ldr	r2, [pc, #96]	; (800916c <DisplayGui_Old1+0x2f4>)
 800910a:	6013      	str	r3, [r2, #0]
 800910c:	e045      	b.n	800919a <DisplayGui_Old1+0x322>
 800910e:	bf00      	nop
 8009110:	00000000 	.word	0x00000000
 8009114:	405a4000 	.word	0x405a4000
 8009118:	20000044 	.word	0x20000044
 800911c:	200050f9 	.word	0x200050f9
 8009120:	20006a98 	.word	0x20006a98
 8009124:	200050fc 	.word	0x200050fc
 8009128:	08022440 	.word	0x08022440
 800912c:	20005100 	.word	0x20005100
 8009130:	200000dc 	.word	0x200000dc
 8009134:	20000020 	.word	0x20000020
 8009138:	20005104 	.word	0x20005104
 800913c:	20002d34 	.word	0x20002d34
 8009140:	2000041c 	.word	0x2000041c
 8009144:	0802c314 	.word	0x0802c314
 8009148:	0802eea0 	.word	0x0802eea0
 800914c:	08024a3c 	.word	0x08024a3c
 8009150:	08026efc 	.word	0x08026efc
 8009154:	08029348 	.word	0x08029348
 8009158:	0802bc90 	.word	0x0802bc90
 800915c:	08022444 	.word	0x08022444
 8009160:	081249a8 	.word	0x081249a8
 8009164:	20000010 	.word	0x20000010
 8009168:	20005108 	.word	0x20005108
 800916c:	20005120 	.word	0x20005120
 8009170:	20005124 	.word	0x20005124
		}
		else if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag != 0)
 8009174:	4b9e      	ldr	r3, [pc, #632]	; (80093f0 <DisplayGui_Old1+0x578>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800917c:	4b9d      	ldr	r3, [pc, #628]	; (80093f4 <DisplayGui_Old1+0x57c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	429a      	cmp	r2, r3
 8009182:	d20a      	bcs.n	800919a <DisplayGui_Old1+0x322>
 8009184:	4b9c      	ldr	r3, [pc, #624]	; (80093f8 <DisplayGui_Old1+0x580>)
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d006      	beq.n	800919a <DisplayGui_Old1+0x322>
		{
			color_flag = 0;
 800918c:	4b9a      	ldr	r3, [pc, #616]	; (80093f8 <DisplayGui_Old1+0x580>)
 800918e:	2200      	movs	r2, #0
 8009190:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 8009192:	4b98      	ldr	r3, [pc, #608]	; (80093f4 <DisplayGui_Old1+0x57c>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a96      	ldr	r2, [pc, #600]	; (80093f0 <DisplayGui_Old1+0x578>)
 8009198:	6013      	str	r3, [r2, #0]
		}

		if(color_flag == 1)
 800919a:	4b97      	ldr	r3, [pc, #604]	; (80093f8 <DisplayGui_Old1+0x580>)
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d103      	bne.n	80091aa <DisplayGui_Old1+0x332>
		{
			GUI_SetColor(GUI_RED);
 80091a2:	20ff      	movs	r0, #255	; 0xff
 80091a4:	f013 fdc2 	bl	801cd2c <GUI_SetColor>
 80091a8:	e007      	b.n	80091ba <DisplayGui_Old1+0x342>
		}
		else
		{
			GUI_SetColor(GUI_WHITE);
 80091aa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80091ae:	f013 fdbd 	bl	801cd2c <GUI_SetColor>
 80091b2:	e002      	b.n	80091ba <DisplayGui_Old1+0x342>
		}
	}
	else
	{
		GUI_SetColor(GUI_LIGHTGRAY);
 80091b4:	4891      	ldr	r0, [pc, #580]	; (80093fc <DisplayGui_Old1+0x584>)
 80091b6:	f013 fdb9 	bl	801cd2c <GUI_SetColor>
	}

	//GUI_SetColor(GUI_LIGHTGRAY);

	x = 20;
 80091ba:	2314      	movs	r3, #20
 80091bc:	607b      	str	r3, [r7, #4]
	y = 16 + GUI_Y_OFFSET;
 80091be:	2320      	movs	r3, #32
 80091c0:	603b      	str	r3, [r7, #0]
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY) * 1.3 * rectAAfactor, rectRadius * rectAAfactor);
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	4613      	mov	r3, r2
 80091c6:	005b      	lsls	r3, r3, #1
 80091c8:	4413      	add	r3, r2
 80091ca:	005b      	lsls	r3, r3, #1
 80091cc:	4618      	mov	r0, r3
 80091ce:	683a      	ldr	r2, [r7, #0]
 80091d0:	4613      	mov	r3, r2
 80091d2:	005b      	lsls	r3, r3, #1
 80091d4:	4413      	add	r3, r2
 80091d6:	005b      	lsls	r3, r3, #1
 80091d8:	4619      	mov	r1, r3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80091e0:	4613      	mov	r3, r2
 80091e2:	005b      	lsls	r3, r3, #1
 80091e4:	4413      	add	r3, r2
 80091e6:	005b      	lsls	r3, r3, #1
 80091e8:	461a      	mov	r2, r3
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	3328      	adds	r3, #40	; 0x28
 80091ee:	ee07 3a90 	vmov	s15, r3
 80091f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80091f6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80093e8 <DisplayGui_Old1+0x570>
 80091fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091fe:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8009202:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009206:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800920a:	2348      	movs	r3, #72	; 0x48
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	ee17 3a90 	vmov	r3, s15
 8009212:	f016 f8c3 	bl	801f39c <GUI_AA_DrawRoundedRect>


	xt = 48;
 8009216:	2330      	movs	r3, #48	; 0x30
 8009218:	61fb      	str	r3, [r7, #28]
	yt = 21 + GUI_Y_OFFSET;
 800921a:	2325      	movs	r3, #37	; 0x25
 800921c:	61bb      	str	r3, [r7, #24]
	string = "T water";
 800921e:	4b78      	ldr	r3, [pc, #480]	; (8009400 <DisplayGui_Old1+0x588>)
 8009220:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font20_1);
 8009222:	4878      	ldr	r0, [pc, #480]	; (8009404 <DisplayGui_Old1+0x58c>)
 8009224:	f013 fd54 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 8009228:	69ba      	ldr	r2, [r7, #24]
 800922a:	69f9      	ldr	r1, [r7, #28]
 800922c:	6978      	ldr	r0, [r7, #20]
 800922e:	f014 fc5b 	bl	801dae8 <GUI_DispStringAt>

	// Traction Control "TC" BEGIN

	static uint8_t tractionControl_old = 0;

	GUI_SetColor(GUI_LIGHTGRAY);
 8009232:	4872      	ldr	r0, [pc, #456]	; (80093fc <DisplayGui_Old1+0x584>)
 8009234:	f013 fd7a 	bl	801cd2c <GUI_SetColor>

	xt = 30;
 8009238:	231e      	movs	r3, #30
 800923a:	61fb      	str	r3, [r7, #28]
	yt = 98 + GUI_Y_OFFSET;
 800923c:	2372      	movs	r3, #114	; 0x72
 800923e:	61bb      	str	r3, [r7, #24]
	string = "TC";
 8009240:	4b71      	ldr	r3, [pc, #452]	; (8009408 <DisplayGui_Old1+0x590>)
 8009242:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font32_1);
 8009244:	4871      	ldr	r0, [pc, #452]	; (800940c <DisplayGui_Old1+0x594>)
 8009246:	f013 fd43 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 800924a:	69ba      	ldr	r2, [r7, #24]
 800924c:	69f9      	ldr	r1, [r7, #28]
 800924e:	6978      	ldr	r0, [r7, #20]
 8009250:	f014 fc4a 	bl	801dae8 <GUI_DispStringAt>


	xt += 46;
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	332e      	adds	r3, #46	; 0x2e
 8009258:	61fb      	str	r3, [r7, #28]

	if(tractionControl != tractionControl_old)
 800925a:	4b6d      	ldr	r3, [pc, #436]	; (8009410 <DisplayGui_Old1+0x598>)
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	461a      	mov	r2, r3
 8009260:	4b6c      	ldr	r3, [pc, #432]	; (8009414 <DisplayGui_Old1+0x59c>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	429a      	cmp	r2, r3
 8009266:	d00b      	beq.n	8009280 <DisplayGui_Old1+0x408>
	{
		GUI_SetColor(GUI_BLACK);
 8009268:	2000      	movs	r0, #0
 800926a:	f013 fd5f 	bl	801cd2c <GUI_SetColor>
		GUI_FillRect(xt, yt, xt + 58, yt + 28);
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	f103 023a 	add.w	r2, r3, #58	; 0x3a
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	331c      	adds	r3, #28
 8009278:	69b9      	ldr	r1, [r7, #24]
 800927a:	69f8      	ldr	r0, [r7, #28]
 800927c:	f013 fe60 	bl	801cf40 <GUI_FillRect>
	}

	tractionControl_old = tractionControl;
 8009280:	4b64      	ldr	r3, [pc, #400]	; (8009414 <DisplayGui_Old1+0x59c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	b2da      	uxtb	r2, r3
 8009286:	4b62      	ldr	r3, [pc, #392]	; (8009410 <DisplayGui_Old1+0x598>)
 8009288:	701a      	strb	r2, [r3, #0]

	GUI_SetFont(&GUI_Font32B_1);
 800928a:	4863      	ldr	r0, [pc, #396]	; (8009418 <DisplayGui_Old1+0x5a0>)
 800928c:	f013 fd20 	bl	801ccd0 <GUI_SetFont>
	GUI_SetColor(GUI_WHITE);
 8009290:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009294:	f013 fd4a 	bl	801cd2c <GUI_SetColor>

	switch(tractionControl)
 8009298:	4b5e      	ldr	r3, [pc, #376]	; (8009414 <DisplayGui_Old1+0x59c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b04      	cmp	r3, #4
 800929e:	d82b      	bhi.n	80092f8 <DisplayGui_Old1+0x480>
 80092a0:	a201      	add	r2, pc, #4	; (adr r2, 80092a8 <DisplayGui_Old1+0x430>)
 80092a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a6:	bf00      	nop
 80092a8:	080092bd 	.word	0x080092bd
 80092ac:	080092c9 	.word	0x080092c9
 80092b0:	080092d5 	.word	0x080092d5
 80092b4:	080092e1 	.word	0x080092e1
 80092b8:	080092ed 	.word	0x080092ed
	{
		case 0:
			string = "OFF";
 80092bc:	4b57      	ldr	r3, [pc, #348]	; (800941c <DisplayGui_Old1+0x5a4>)
 80092be:	617b      	str	r3, [r7, #20]
			GUI_SetFont(&GUI_Font32_1);
 80092c0:	4852      	ldr	r0, [pc, #328]	; (800940c <DisplayGui_Old1+0x594>)
 80092c2:	f013 fd05 	bl	801ccd0 <GUI_SetFont>
			break;
 80092c6:	e01f      	b.n	8009308 <DisplayGui_Old1+0x490>

		case 1:
			string = "1";
 80092c8:	4b55      	ldr	r3, [pc, #340]	; (8009420 <DisplayGui_Old1+0x5a8>)
 80092ca:	617b      	str	r3, [r7, #20]
			xt+=18;
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	3312      	adds	r3, #18
 80092d0:	61fb      	str	r3, [r7, #28]
			break;
 80092d2:	e019      	b.n	8009308 <DisplayGui_Old1+0x490>

		case 2:
			string = "2";
 80092d4:	4b53      	ldr	r3, [pc, #332]	; (8009424 <DisplayGui_Old1+0x5ac>)
 80092d6:	617b      	str	r3, [r7, #20]
			xt+=18;
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	3312      	adds	r3, #18
 80092dc:	61fb      	str	r3, [r7, #28]
			break;
 80092de:	e013      	b.n	8009308 <DisplayGui_Old1+0x490>

		case 3:
			string = "3";
 80092e0:	4b51      	ldr	r3, [pc, #324]	; (8009428 <DisplayGui_Old1+0x5b0>)
 80092e2:	617b      	str	r3, [r7, #20]
			xt+=18;
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	3312      	adds	r3, #18
 80092e8:	61fb      	str	r3, [r7, #28]
			break;
 80092ea:	e00d      	b.n	8009308 <DisplayGui_Old1+0x490>

		case 4:
			string = "4";
 80092ec:	4b4f      	ldr	r3, [pc, #316]	; (800942c <DisplayGui_Old1+0x5b4>)
 80092ee:	617b      	str	r3, [r7, #20]
			xt+=18;
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	3312      	adds	r3, #18
 80092f4:	61fb      	str	r3, [r7, #28]
			break;
 80092f6:	e007      	b.n	8009308 <DisplayGui_Old1+0x490>

		default:
			GUI_SetColor(GUI_RED);
 80092f8:	20ff      	movs	r0, #255	; 0xff
 80092fa:	f013 fd17 	bl	801cd2c <GUI_SetColor>
			string = "ERR";
 80092fe:	4b4c      	ldr	r3, [pc, #304]	; (8009430 <DisplayGui_Old1+0x5b8>)
 8009300:	617b      	str	r3, [r7, #20]
			GUI_SetFont(&GUI_Font32_1);
 8009302:	4842      	ldr	r0, [pc, #264]	; (800940c <DisplayGui_Old1+0x594>)
 8009304:	f013 fce4 	bl	801ccd0 <GUI_SetFont>
	}

	GUI_DispStringAt(string, xt, yt);
 8009308:	69ba      	ldr	r2, [r7, #24]
 800930a:	69f9      	ldr	r1, [r7, #28]
 800930c:	6978      	ldr	r0, [r7, #20]
 800930e:	f014 fbeb 	bl	801dae8 <GUI_DispStringAt>

	GUI_SetColor(GUI_LIGHTGRAY);
 8009312:	483a      	ldr	r0, [pc, #232]	; (80093fc <DisplayGui_Old1+0x584>)
 8009314:	f013 fd0a 	bl	801cd2c <GUI_SetColor>

	y = 94 + GUI_Y_OFFSET;
 8009318:	236e      	movs	r3, #110	; 0x6e
 800931a:	603b      	str	r3, [r7, #0]
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY) * rectAAfactor, rectRadius * rectAAfactor);
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	4613      	mov	r3, r2
 8009320:	005b      	lsls	r3, r3, #1
 8009322:	4413      	add	r3, r2
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	4618      	mov	r0, r3
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	4613      	mov	r3, r2
 800932c:	005b      	lsls	r3, r3, #1
 800932e:	4413      	add	r3, r2
 8009330:	005b      	lsls	r3, r3, #1
 8009332:	4619      	mov	r1, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800933a:	4613      	mov	r3, r2
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	4413      	add	r3, r2
 8009340:	005b      	lsls	r3, r3, #1
 8009342:	461c      	mov	r4, r3
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800934a:	4613      	mov	r3, r2
 800934c:	005b      	lsls	r3, r3, #1
 800934e:	4413      	add	r3, r2
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	461a      	mov	r2, r3
 8009354:	2348      	movs	r3, #72	; 0x48
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	4613      	mov	r3, r2
 800935a:	4622      	mov	r2, r4
 800935c:	f016 f81e 	bl	801f39c <GUI_AA_DrawRoundedRect>

	//static uint8_t p0_value_old = 0;

	static GUI_DrawNumAtTypeDef tOilPRESSURE;

	if(tOilPRESSURE.number <= pOil_MIN_VALUE && rpm >= 1000)
 8009360:	4b34      	ldr	r3, [pc, #208]	; (8009434 <DisplayGui_Old1+0x5bc>)
 8009362:	ed93 7b00 	vldr	d7, [r3]
 8009366:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800936a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800936e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009372:	d867      	bhi.n	8009444 <DisplayGui_Old1+0x5cc>
 8009374:	4b30      	ldr	r3, [pc, #192]	; (8009438 <DisplayGui_Old1+0x5c0>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800937c:	db62      	blt.n	8009444 <DisplayGui_Old1+0x5cc>
	{
		static uint32_t millis_blink = 0;
		static uint8_t color_flag = 0;

		if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag == 0)
 800937e:	4b2f      	ldr	r3, [pc, #188]	; (800943c <DisplayGui_Old1+0x5c4>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8009386:	4b1b      	ldr	r3, [pc, #108]	; (80093f4 <DisplayGui_Old1+0x57c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	429a      	cmp	r2, r3
 800938c:	d20b      	bcs.n	80093a6 <DisplayGui_Old1+0x52e>
 800938e:	4b2c      	ldr	r3, [pc, #176]	; (8009440 <DisplayGui_Old1+0x5c8>)
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d107      	bne.n	80093a6 <DisplayGui_Old1+0x52e>
		{
			color_flag = 1;
 8009396:	4b2a      	ldr	r3, [pc, #168]	; (8009440 <DisplayGui_Old1+0x5c8>)
 8009398:	2201      	movs	r2, #1
 800939a:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 800939c:	4b15      	ldr	r3, [pc, #84]	; (80093f4 <DisplayGui_Old1+0x57c>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a26      	ldr	r2, [pc, #152]	; (800943c <DisplayGui_Old1+0x5c4>)
 80093a2:	6013      	str	r3, [r2, #0]
 80093a4:	e012      	b.n	80093cc <DisplayGui_Old1+0x554>
		}
		else if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag != 0)
 80093a6:	4b25      	ldr	r3, [pc, #148]	; (800943c <DisplayGui_Old1+0x5c4>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 80093ae:	4b11      	ldr	r3, [pc, #68]	; (80093f4 <DisplayGui_Old1+0x57c>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d20a      	bcs.n	80093cc <DisplayGui_Old1+0x554>
 80093b6:	4b22      	ldr	r3, [pc, #136]	; (8009440 <DisplayGui_Old1+0x5c8>)
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d006      	beq.n	80093cc <DisplayGui_Old1+0x554>
		{
			color_flag = 0;
 80093be:	4b20      	ldr	r3, [pc, #128]	; (8009440 <DisplayGui_Old1+0x5c8>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 80093c4:	4b0b      	ldr	r3, [pc, #44]	; (80093f4 <DisplayGui_Old1+0x57c>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a1c      	ldr	r2, [pc, #112]	; (800943c <DisplayGui_Old1+0x5c4>)
 80093ca:	6013      	str	r3, [r2, #0]
		}

		if(color_flag == 1)
 80093cc:	4b1c      	ldr	r3, [pc, #112]	; (8009440 <DisplayGui_Old1+0x5c8>)
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d103      	bne.n	80093dc <DisplayGui_Old1+0x564>
		{
			GUI_SetColor(GUI_RED);
 80093d4:	20ff      	movs	r0, #255	; 0xff
 80093d6:	f013 fca9 	bl	801cd2c <GUI_SetColor>
	{
 80093da:	e036      	b.n	800944a <DisplayGui_Old1+0x5d2>
		}
		else
		{
			GUI_SetColor(GUI_WHITE);
 80093dc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80093e0:	f013 fca4 	bl	801cd2c <GUI_SetColor>
	{
 80093e4:	e031      	b.n	800944a <DisplayGui_Old1+0x5d2>
 80093e6:	bf00      	nop
 80093e8:	cccccccd 	.word	0xcccccccd
 80093ec:	3ff4cccc 	.word	0x3ff4cccc
 80093f0:	20005120 	.word	0x20005120
 80093f4:	20006a98 	.word	0x20006a98
 80093f8:	20005124 	.word	0x20005124
 80093fc:	00d3d3d3 	.word	0x00d3d3d3
 8009400:	08022448 	.word	0x08022448
 8009404:	0812b6c8 	.word	0x0812b6c8
 8009408:	08022450 	.word	0x08022450
 800940c:	081249a8 	.word	0x081249a8
 8009410:	20005125 	.word	0x20005125
 8009414:	20002d40 	.word	0x20002d40
 8009418:	08127b30 	.word	0x08127b30
 800941c:	08022454 	.word	0x08022454
 8009420:	08022458 	.word	0x08022458
 8009424:	0802245c 	.word	0x0802245c
 8009428:	08022460 	.word	0x08022460
 800942c:	08022464 	.word	0x08022464
 8009430:	08022468 	.word	0x08022468
 8009434:	20005128 	.word	0x20005128
 8009438:	20000020 	.word	0x20000020
 800943c:	20005140 	.word	0x20005140
 8009440:	20005144 	.word	0x20005144
		}
	}
	else
	{
		GUI_SetColor(GUI_LIGHTGRAY);
 8009444:	4884      	ldr	r0, [pc, #528]	; (8009658 <DisplayGui_Old1+0x7e0>)
 8009446:	f013 fc71 	bl	801cd2c <GUI_SetColor>
	}


	//GUI_SetColor(GUI_LIGHTGRAY);

	xt = 30;
 800944a:	231e      	movs	r3, #30
 800944c:	61fb      	str	r3, [r7, #28]
	yt = 158 + GUI_Y_OFFSET;
 800944e:	23ae      	movs	r3, #174	; 0xae
 8009450:	61bb      	str	r3, [r7, #24]
	string = "Poil";
 8009452:	4b82      	ldr	r3, [pc, #520]	; (800965c <DisplayGui_Old1+0x7e4>)
 8009454:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font32_1);
 8009456:	4882      	ldr	r0, [pc, #520]	; (8009660 <DisplayGui_Old1+0x7e8>)
 8009458:	f013 fc3a 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 800945c:	69ba      	ldr	r2, [r7, #24]
 800945e:	69f9      	ldr	r1, [r7, #28]
 8009460:	6978      	ldr	r0, [r7, #20]
 8009462:	f014 fb41 	bl	801dae8 <GUI_DispStringAt>
*/
	//p0_value_old = p0_value;

	//static GUI_DrawNumAtTypeDef tOilPRESSURE;

	if(dataRefresh == 1)
 8009466:	4b7f      	ldr	r3, [pc, #508]	; (8009664 <DisplayGui_Old1+0x7ec>)
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d107      	bne.n	800947e <DisplayGui_Old1+0x606>
		tOilPRESSURE.number = pOil;
 800946e:	4b7e      	ldr	r3, [pc, #504]	; (8009668 <DisplayGui_Old1+0x7f0>)
 8009470:	edd3 7a00 	vldr	s15, [r3]
 8009474:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009478:	4b7c      	ldr	r3, [pc, #496]	; (800966c <DisplayGui_Old1+0x7f4>)
 800947a:	ed83 7b00 	vstr	d7, [r3]

	xt += 76;
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	334c      	adds	r3, #76	; 0x4c
 8009482:	61fb      	str	r3, [r7, #28]
	//yt += 2;

	a = "";
 8009484:	4b7a      	ldr	r3, [pc, #488]	; (8009670 <DisplayGui_Old1+0x7f8>)
 8009486:	60fb      	str	r3, [r7, #12]
	b = "";
 8009488:	4b79      	ldr	r3, [pc, #484]	; (8009670 <DisplayGui_Old1+0x7f8>)
 800948a:	60bb      	str	r3, [r7, #8]

	GUI_DrawNumAt(xt, yt, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &tOilPRESSURE, 3, 1, DISABLE, DISABLE, CENTER, a, b);
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	b218      	sxth	r0, r3
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	b219      	sxth	r1, r3
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	9308      	str	r3, [sp, #32]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	9307      	str	r3, [sp, #28]
 800949c:	2302      	movs	r3, #2
 800949e:	9306      	str	r3, [sp, #24]
 80094a0:	2300      	movs	r3, #0
 80094a2:	9305      	str	r3, [sp, #20]
 80094a4:	2300      	movs	r3, #0
 80094a6:	9304      	str	r3, [sp, #16]
 80094a8:	2301      	movs	r3, #1
 80094aa:	9303      	str	r3, [sp, #12]
 80094ac:	2303      	movs	r3, #3
 80094ae:	9302      	str	r3, [sp, #8]
 80094b0:	4b6e      	ldr	r3, [pc, #440]	; (800966c <DisplayGui_Old1+0x7f4>)
 80094b2:	9301      	str	r3, [sp, #4]
 80094b4:	2300      	movs	r3, #0
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80094bc:	4a68      	ldr	r2, [pc, #416]	; (8009660 <DisplayGui_Old1+0x7e8>)
 80094be:	f00c fa13 	bl	80158e8 <GUI_DrawNumAt>


	if(tOilPRESSURE.number <= pOil_MIN_VALUE && rpm >= 1000)
 80094c2:	4b6a      	ldr	r3, [pc, #424]	; (800966c <DisplayGui_Old1+0x7f4>)
 80094c4:	ed93 7b00 	vldr	d7, [r3]
 80094c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80094cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80094d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d4:	d838      	bhi.n	8009548 <DisplayGui_Old1+0x6d0>
 80094d6:	4b67      	ldr	r3, [pc, #412]	; (8009674 <DisplayGui_Old1+0x7fc>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094de:	db33      	blt.n	8009548 <DisplayGui_Old1+0x6d0>
	{
		static uint32_t millis_blink = 0;
		static uint8_t color_flag = 0;

		if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag == 0)
 80094e0:	4b65      	ldr	r3, [pc, #404]	; (8009678 <DisplayGui_Old1+0x800>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 80094e8:	4b64      	ldr	r3, [pc, #400]	; (800967c <DisplayGui_Old1+0x804>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d20b      	bcs.n	8009508 <DisplayGui_Old1+0x690>
 80094f0:	4b63      	ldr	r3, [pc, #396]	; (8009680 <DisplayGui_Old1+0x808>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d107      	bne.n	8009508 <DisplayGui_Old1+0x690>
		{
			color_flag = 1;
 80094f8:	4b61      	ldr	r3, [pc, #388]	; (8009680 <DisplayGui_Old1+0x808>)
 80094fa:	2201      	movs	r2, #1
 80094fc:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 80094fe:	4b5f      	ldr	r3, [pc, #380]	; (800967c <DisplayGui_Old1+0x804>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a5d      	ldr	r2, [pc, #372]	; (8009678 <DisplayGui_Old1+0x800>)
 8009504:	6013      	str	r3, [r2, #0]
 8009506:	e012      	b.n	800952e <DisplayGui_Old1+0x6b6>
		}
		else if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag != 0)
 8009508:	4b5b      	ldr	r3, [pc, #364]	; (8009678 <DisplayGui_Old1+0x800>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8009510:	4b5a      	ldr	r3, [pc, #360]	; (800967c <DisplayGui_Old1+0x804>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	429a      	cmp	r2, r3
 8009516:	d20a      	bcs.n	800952e <DisplayGui_Old1+0x6b6>
 8009518:	4b59      	ldr	r3, [pc, #356]	; (8009680 <DisplayGui_Old1+0x808>)
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d006      	beq.n	800952e <DisplayGui_Old1+0x6b6>
		{
			color_flag = 0;
 8009520:	4b57      	ldr	r3, [pc, #348]	; (8009680 <DisplayGui_Old1+0x808>)
 8009522:	2200      	movs	r2, #0
 8009524:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 8009526:	4b55      	ldr	r3, [pc, #340]	; (800967c <DisplayGui_Old1+0x804>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a53      	ldr	r2, [pc, #332]	; (8009678 <DisplayGui_Old1+0x800>)
 800952c:	6013      	str	r3, [r2, #0]
		}

		if(color_flag == 1)
 800952e:	4b54      	ldr	r3, [pc, #336]	; (8009680 <DisplayGui_Old1+0x808>)
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	2b01      	cmp	r3, #1
 8009534:	d103      	bne.n	800953e <DisplayGui_Old1+0x6c6>
		{
			GUI_SetColor(GUI_RED);
 8009536:	20ff      	movs	r0, #255	; 0xff
 8009538:	f013 fbf8 	bl	801cd2c <GUI_SetColor>
	{
 800953c:	e007      	b.n	800954e <DisplayGui_Old1+0x6d6>
		}
		else
		{
			GUI_SetColor(GUI_WHITE);
 800953e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009542:	f013 fbf3 	bl	801cd2c <GUI_SetColor>
	{
 8009546:	e002      	b.n	800954e <DisplayGui_Old1+0x6d6>
		}
	}
	else
	{
		GUI_SetColor(GUI_LIGHTGRAY);
 8009548:	4843      	ldr	r0, [pc, #268]	; (8009658 <DisplayGui_Old1+0x7e0>)
 800954a:	f013 fbef 	bl	801cd2c <GUI_SetColor>
	}

	//GUI_SetColor(GUI_LIGHTGRAY);

	y = 154 + GUI_Y_OFFSET;
 800954e:	23aa      	movs	r3, #170	; 0xaa
 8009550:	603b      	str	r3, [r7, #0]
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY) * rectAAfactor, rectRadius * rectAAfactor);
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	4613      	mov	r3, r2
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	4413      	add	r3, r2
 800955a:	005b      	lsls	r3, r3, #1
 800955c:	4618      	mov	r0, r3
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	4613      	mov	r3, r2
 8009562:	005b      	lsls	r3, r3, #1
 8009564:	4413      	add	r3, r2
 8009566:	005b      	lsls	r3, r3, #1
 8009568:	4619      	mov	r1, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8009570:	4613      	mov	r3, r2
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	4413      	add	r3, r2
 8009576:	005b      	lsls	r3, r3, #1
 8009578:	461c      	mov	r4, r3
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8009580:	4613      	mov	r3, r2
 8009582:	005b      	lsls	r3, r3, #1
 8009584:	4413      	add	r3, r2
 8009586:	005b      	lsls	r3, r3, #1
 8009588:	461a      	mov	r2, r3
 800958a:	2348      	movs	r3, #72	; 0x48
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	4613      	mov	r3, r2
 8009590:	4622      	mov	r2, r4
 8009592:	f015 ff03 	bl	801f39c <GUI_AA_DrawRoundedRect>

	// V BAT BEGIN

	static GUI_DrawNumAtTypeDef vBatDispData = {0};

	if(dataRefresh == 1)
 8009596:	4b33      	ldr	r3, [pc, #204]	; (8009664 <DisplayGui_Old1+0x7ec>)
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d107      	bne.n	80095ae <DisplayGui_Old1+0x736>
		vBatDispData.number = vBat;
 800959e:	4b39      	ldr	r3, [pc, #228]	; (8009684 <DisplayGui_Old1+0x80c>)
 80095a0:	edd3 7a00 	vldr	s15, [r3]
 80095a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80095a8:	4b37      	ldr	r3, [pc, #220]	; (8009688 <DisplayGui_Old1+0x810>)
 80095aa:	ed83 7b00 	vstr	d7, [r3]

	uint32_t vBatBackColor = GUI_BLACK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	613b      	str	r3, [r7, #16]

	{
		static uint8_t blink_counter = 0;

		if(vBatDispData.number <= vBat_MIN_VALUE)
 80095b2:	4b35      	ldr	r3, [pc, #212]	; (8009688 <DisplayGui_Old1+0x810>)
 80095b4:	ed93 7b00 	vldr	d7, [r3]
 80095b8:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8009650 <DisplayGui_Old1+0x7d8>
 80095bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80095c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c4:	d868      	bhi.n	8009698 <DisplayGui_Old1+0x820>
		{
			static uint32_t millis_blink = 0;
			static uint8_t color_flag = 0;

			if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag == 0)
 80095c6:	4b31      	ldr	r3, [pc, #196]	; (800968c <DisplayGui_Old1+0x814>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 80095ce:	4b2b      	ldr	r3, [pc, #172]	; (800967c <DisplayGui_Old1+0x804>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d20b      	bcs.n	80095ee <DisplayGui_Old1+0x776>
 80095d6:	4b2e      	ldr	r3, [pc, #184]	; (8009690 <DisplayGui_Old1+0x818>)
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d107      	bne.n	80095ee <DisplayGui_Old1+0x776>
			{
				color_flag = 1;
 80095de:	4b2c      	ldr	r3, [pc, #176]	; (8009690 <DisplayGui_Old1+0x818>)
 80095e0:	2201      	movs	r2, #1
 80095e2:	701a      	strb	r2, [r3, #0]

				millis_blink = millis;
 80095e4:	4b25      	ldr	r3, [pc, #148]	; (800967c <DisplayGui_Old1+0x804>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a28      	ldr	r2, [pc, #160]	; (800968c <DisplayGui_Old1+0x814>)
 80095ea:	6013      	str	r3, [r2, #0]
 80095ec:	e012      	b.n	8009614 <DisplayGui_Old1+0x79c>
			}
			else if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag != 0)
 80095ee:	4b27      	ldr	r3, [pc, #156]	; (800968c <DisplayGui_Old1+0x814>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 80095f6:	4b21      	ldr	r3, [pc, #132]	; (800967c <DisplayGui_Old1+0x804>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d20a      	bcs.n	8009614 <DisplayGui_Old1+0x79c>
 80095fe:	4b24      	ldr	r3, [pc, #144]	; (8009690 <DisplayGui_Old1+0x818>)
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d006      	beq.n	8009614 <DisplayGui_Old1+0x79c>
			{
				color_flag = 0;
 8009606:	4b22      	ldr	r3, [pc, #136]	; (8009690 <DisplayGui_Old1+0x818>)
 8009608:	2200      	movs	r2, #0
 800960a:	701a      	strb	r2, [r3, #0]

				millis_blink = millis;
 800960c:	4b1b      	ldr	r3, [pc, #108]	; (800967c <DisplayGui_Old1+0x804>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a1e      	ldr	r2, [pc, #120]	; (800968c <DisplayGui_Old1+0x814>)
 8009612:	6013      	str	r3, [r2, #0]
			}

			if(color_flag == 1)
 8009614:	4b1e      	ldr	r3, [pc, #120]	; (8009690 <DisplayGui_Old1+0x818>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d113      	bne.n	8009644 <DisplayGui_Old1+0x7cc>
			{
				if(blink_counter >= 10)
 800961c:	4b1d      	ldr	r3, [pc, #116]	; (8009694 <DisplayGui_Old1+0x81c>)
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	2b09      	cmp	r3, #9
 8009622:	d901      	bls.n	8009628 <DisplayGui_Old1+0x7b0>
					vBatBackColor = GUI_RED;
 8009624:	23ff      	movs	r3, #255	; 0xff
 8009626:	613b      	str	r3, [r7, #16]

				blink_counter++;
 8009628:	4b1a      	ldr	r3, [pc, #104]	; (8009694 <DisplayGui_Old1+0x81c>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	3301      	adds	r3, #1
 800962e:	b2da      	uxtb	r2, r3
 8009630:	4b18      	ldr	r3, [pc, #96]	; (8009694 <DisplayGui_Old1+0x81c>)
 8009632:	701a      	strb	r2, [r3, #0]

				if(blink_counter >= 255) blink_counter = 30;
 8009634:	4b17      	ldr	r3, [pc, #92]	; (8009694 <DisplayGui_Old1+0x81c>)
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2bff      	cmp	r3, #255	; 0xff
 800963a:	d135      	bne.n	80096a8 <DisplayGui_Old1+0x830>
 800963c:	4b15      	ldr	r3, [pc, #84]	; (8009694 <DisplayGui_Old1+0x81c>)
 800963e:	221e      	movs	r2, #30
 8009640:	701a      	strb	r2, [r3, #0]
 8009642:	e031      	b.n	80096a8 <DisplayGui_Old1+0x830>
			}
			else
			{
				vBatBackColor = GUI_BLACK;
 8009644:	2300      	movs	r3, #0
 8009646:	613b      	str	r3, [r7, #16]
 8009648:	e02e      	b.n	80096a8 <DisplayGui_Old1+0x830>
 800964a:	bf00      	nop
 800964c:	f3af 8000 	nop.w
 8009650:	40000000 	.word	0x40000000
 8009654:	40273333 	.word	0x40273333
 8009658:	00d3d3d3 	.word	0x00d3d3d3
 800965c:	0802246c 	.word	0x0802246c
 8009660:	081249a8 	.word	0x081249a8
 8009664:	200000dc 	.word	0x200000dc
 8009668:	2000001c 	.word	0x2000001c
 800966c:	20005128 	.word	0x20005128
 8009670:	08022440 	.word	0x08022440
 8009674:	20000020 	.word	0x20000020
 8009678:	20005148 	.word	0x20005148
 800967c:	20006a98 	.word	0x20006a98
 8009680:	2000514c 	.word	0x2000514c
 8009684:	20000008 	.word	0x20000008
 8009688:	20005150 	.word	0x20005150
 800968c:	20005168 	.word	0x20005168
 8009690:	2000516c 	.word	0x2000516c
 8009694:	2000516d 	.word	0x2000516d
			}
		}
		else
		{
			GUI_SetColor(GUI_LIGHTBLUE);
 8009698:	4899      	ldr	r0, [pc, #612]	; (8009900 <DisplayGui_Old1+0xa88>)
 800969a:	f013 fb47 	bl	801cd2c <GUI_SetColor>
			vBatBackColor = GUI_BLACK;
 800969e:	2300      	movs	r3, #0
 80096a0:	613b      	str	r3, [r7, #16]

			blink_counter = 0;
 80096a2:	4b98      	ldr	r3, [pc, #608]	; (8009904 <DisplayGui_Old1+0xa8c>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	701a      	strb	r2, [r3, #0]
		}
	}

	xt = 54;
 80096a8:	2336      	movs	r3, #54	; 0x36
 80096aa:	61fb      	str	r3, [r7, #28]
	yt = 221 + GUI_Y_OFFSET;
 80096ac:	23ed      	movs	r3, #237	; 0xed
 80096ae:	61bb      	str	r3, [r7, #24]
	string = "V BAT";
 80096b0:	4b95      	ldr	r3, [pc, #596]	; (8009908 <DisplayGui_Old1+0xa90>)
 80096b2:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font16_1);
 80096b4:	4895      	ldr	r0, [pc, #596]	; (800990c <DisplayGui_Old1+0xa94>)
 80096b6:	f013 fb0b 	bl	801ccd0 <GUI_SetFont>
	GUI_SetBkColor(vBatBackColor);
 80096ba:	6938      	ldr	r0, [r7, #16]
 80096bc:	f013 fb34 	bl	801cd28 <GUI_SetBkColor>
	GUI_SetColor(GUI_LIGHTBLUE);
 80096c0:	488f      	ldr	r0, [pc, #572]	; (8009900 <DisplayGui_Old1+0xa88>)
 80096c2:	f013 fb33 	bl	801cd2c <GUI_SetColor>
	GUI_DispStringAt(string, xt, yt);
 80096c6:	69ba      	ldr	r2, [r7, #24]
 80096c8:	69f9      	ldr	r1, [r7, #28]
 80096ca:	6978      	ldr	r0, [r7, #20]
 80096cc:	f014 fa0c 	bl	801dae8 <GUI_DispStringAt>


	xt += 60;
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	333c      	adds	r3, #60	; 0x3c
 80096d4:	61fb      	str	r3, [r7, #28]
	yt -= 2;
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	3b02      	subs	r3, #2
 80096da:	61bb      	str	r3, [r7, #24]

	GUI_DrawNumAt(xt, yt, &GUI_Font20_1, GUI_LIGHTGRAY, vBatBackColor, &vBatDispData, 3, 1, DISABLE, DISABLE, CENTER, a, b);
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	b218      	sxth	r0, r3
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	b219      	sxth	r1, r3
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	9308      	str	r3, [sp, #32]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	9307      	str	r3, [sp, #28]
 80096ec:	2302      	movs	r3, #2
 80096ee:	9306      	str	r3, [sp, #24]
 80096f0:	2300      	movs	r3, #0
 80096f2:	9305      	str	r3, [sp, #20]
 80096f4:	2300      	movs	r3, #0
 80096f6:	9304      	str	r3, [sp, #16]
 80096f8:	2301      	movs	r3, #1
 80096fa:	9303      	str	r3, [sp, #12]
 80096fc:	2303      	movs	r3, #3
 80096fe:	9302      	str	r3, [sp, #8]
 8009700:	4b83      	ldr	r3, [pc, #524]	; (8009910 <DisplayGui_Old1+0xa98>)
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	4b82      	ldr	r3, [pc, #520]	; (8009914 <DisplayGui_Old1+0xa9c>)
 800970a:	4a83      	ldr	r2, [pc, #524]	; (8009918 <DisplayGui_Old1+0xaa0>)
 800970c:	f00c f8ec 	bl	80158e8 <GUI_DrawNumAt>
	GUI_SetBkColor(GUI_BLACK);
 8009710:	2000      	movs	r0, #0
 8009712:	f013 fb09 	bl	801cd28 <GUI_SetBkColor>

	if(vBatDispData.number <= vBat_MIN_VALUE)
 8009716:	4b7e      	ldr	r3, [pc, #504]	; (8009910 <DisplayGui_Old1+0xa98>)
 8009718:	ed93 7b00 	vldr	d7, [r3]
 800971c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80098f0 <DisplayGui_Old1+0xa78>
 8009720:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009728:	d832      	bhi.n	8009790 <DisplayGui_Old1+0x918>
	{
		static uint32_t millis_blink = 0;
		static uint8_t color_flag = 0;

		if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag == 0)
 800972a:	4b7c      	ldr	r3, [pc, #496]	; (800991c <DisplayGui_Old1+0xaa4>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8009732:	4b7b      	ldr	r3, [pc, #492]	; (8009920 <DisplayGui_Old1+0xaa8>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	429a      	cmp	r2, r3
 8009738:	d20b      	bcs.n	8009752 <DisplayGui_Old1+0x8da>
 800973a:	4b7a      	ldr	r3, [pc, #488]	; (8009924 <DisplayGui_Old1+0xaac>)
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d107      	bne.n	8009752 <DisplayGui_Old1+0x8da>
		{
			color_flag = 1;
 8009742:	4b78      	ldr	r3, [pc, #480]	; (8009924 <DisplayGui_Old1+0xaac>)
 8009744:	2201      	movs	r2, #1
 8009746:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 8009748:	4b75      	ldr	r3, [pc, #468]	; (8009920 <DisplayGui_Old1+0xaa8>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a73      	ldr	r2, [pc, #460]	; (800991c <DisplayGui_Old1+0xaa4>)
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	e012      	b.n	8009778 <DisplayGui_Old1+0x900>
		}
		else if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag != 0)
 8009752:	4b72      	ldr	r3, [pc, #456]	; (800991c <DisplayGui_Old1+0xaa4>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800975a:	4b71      	ldr	r3, [pc, #452]	; (8009920 <DisplayGui_Old1+0xaa8>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	429a      	cmp	r2, r3
 8009760:	d20a      	bcs.n	8009778 <DisplayGui_Old1+0x900>
 8009762:	4b70      	ldr	r3, [pc, #448]	; (8009924 <DisplayGui_Old1+0xaac>)
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d006      	beq.n	8009778 <DisplayGui_Old1+0x900>
		{
			color_flag = 0;
 800976a:	4b6e      	ldr	r3, [pc, #440]	; (8009924 <DisplayGui_Old1+0xaac>)
 800976c:	2200      	movs	r2, #0
 800976e:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 8009770:	4b6b      	ldr	r3, [pc, #428]	; (8009920 <DisplayGui_Old1+0xaa8>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a69      	ldr	r2, [pc, #420]	; (800991c <DisplayGui_Old1+0xaa4>)
 8009776:	6013      	str	r3, [r2, #0]
		}

		if(color_flag == 1)
 8009778:	4b6a      	ldr	r3, [pc, #424]	; (8009924 <DisplayGui_Old1+0xaac>)
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d103      	bne.n	8009788 <DisplayGui_Old1+0x910>
		{
			GUI_SetColor(GUI_RED);
 8009780:	20ff      	movs	r0, #255	; 0xff
 8009782:	f013 fad3 	bl	801cd2c <GUI_SetColor>
 8009786:	e006      	b.n	8009796 <DisplayGui_Old1+0x91e>
		}
		else
		{
			GUI_SetColor(GUI_LIGHTBLUE);
 8009788:	485d      	ldr	r0, [pc, #372]	; (8009900 <DisplayGui_Old1+0xa88>)
 800978a:	f013 facf 	bl	801cd2c <GUI_SetColor>
 800978e:	e002      	b.n	8009796 <DisplayGui_Old1+0x91e>
		}
	}
	else
	{
		GUI_SetColor(GUI_LIGHTBLUE);
 8009790:	485b      	ldr	r0, [pc, #364]	; (8009900 <DisplayGui_Old1+0xa88>)
 8009792:	f013 facb 	bl	801cd2c <GUI_SetColor>
	}

	y = 214 + GUI_Y_OFFSET;
 8009796:	23e6      	movs	r3, #230	; 0xe6
 8009798:	603b      	str	r3, [r7, #0]
	//GUI_SetColor(GUI_LIGHTBLUE);
	GUI_AA_DrawRoundedRect((x + 24) * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY - 10) * rectAAfactor, rectRadius * rectAAfactor);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f103 0218 	add.w	r2, r3, #24
 80097a0:	4613      	mov	r3, r2
 80097a2:	005b      	lsls	r3, r3, #1
 80097a4:	4413      	add	r3, r2
 80097a6:	005b      	lsls	r3, r3, #1
 80097a8:	4618      	mov	r0, r3
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	4613      	mov	r3, r2
 80097ae:	005b      	lsls	r3, r3, #1
 80097b0:	4413      	add	r3, r2
 80097b2:	005b      	lsls	r3, r3, #1
 80097b4:	4619      	mov	r1, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80097bc:	4613      	mov	r3, r2
 80097be:	005b      	lsls	r3, r3, #1
 80097c0:	4413      	add	r3, r2
 80097c2:	005b      	lsls	r3, r3, #1
 80097c4:	461c      	mov	r4, r3
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	f103 021e 	add.w	r2, r3, #30
 80097cc:	4613      	mov	r3, r2
 80097ce:	005b      	lsls	r3, r3, #1
 80097d0:	4413      	add	r3, r2
 80097d2:	005b      	lsls	r3, r3, #1
 80097d4:	461a      	mov	r2, r3
 80097d6:	2348      	movs	r3, #72	; 0x48
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	4613      	mov	r3, r2
 80097dc:	4622      	mov	r2, r4
 80097de:	f015 fddd 	bl	801f39c <GUI_AA_DrawRoundedRect>

	// left rects BEGIN

	// Oil Temparature BEGIN

	GUI_SetColor(GUI_WHITE);
 80097e2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80097e6:	f013 faa1 	bl	801cd2c <GUI_SetColor>

	xt = (480 - rectSizeX) + 65;
 80097ea:	f240 13a9 	movw	r3, #425	; 0x1a9
 80097ee:	61fb      	str	r3, [r7, #28]
	yt = 21 + 25 + GUI_Y_OFFSET;
 80097f0:	233e      	movs	r3, #62	; 0x3e
 80097f2:	61bb      	str	r3, [r7, #24]

	string = " C";
 80097f4:	4b4c      	ldr	r3, [pc, #304]	; (8009928 <DisplayGui_Old1+0xab0>)
 80097f6:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font32_1);
 80097f8:	484c      	ldr	r0, [pc, #304]	; (800992c <DisplayGui_Old1+0xab4>)
 80097fa:	f013 fa69 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt - 4, yt - 10);
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	1f19      	subs	r1, r3, #4
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	3b0a      	subs	r3, #10
 8009806:	461a      	mov	r2, r3
 8009808:	6978      	ldr	r0, [r7, #20]
 800980a:	f014 f96d 	bl	801dae8 <GUI_DispStringAt>


	static GUI_DrawNumAtTypeDef tOilTEMP;

	if(dataRefresh == 1)
 800980e:	4b48      	ldr	r3, [pc, #288]	; (8009930 <DisplayGui_Old1+0xab8>)
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	2b01      	cmp	r3, #1
 8009814:	d107      	bne.n	8009826 <DisplayGui_Old1+0x9ae>
		tOilTEMP.number = tOil;
 8009816:	4b47      	ldr	r3, [pc, #284]	; (8009934 <DisplayGui_Old1+0xabc>)
 8009818:	edd3 7a00 	vldr	s15, [r3]
 800981c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009820:	4b45      	ldr	r3, [pc, #276]	; (8009938 <DisplayGui_Old1+0xac0>)
 8009822:	ed83 7b00 	vstr	d7, [r3]

	//GUI_DrawNumAt(xt - 10, yt - 10, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &tWaterTEMP, 3, 1, DISABLE, DISABLE, RIGHT, a, b);
	GUI_DrawNumAt(xt - 40, yt - 10, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &tOilTEMP, 3, 1, DISABLE, DISABLE, CENTER, a, b);
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	b29b      	uxth	r3, r3
 800982a:	3b28      	subs	r3, #40	; 0x28
 800982c:	b29b      	uxth	r3, r3
 800982e:	b218      	sxth	r0, r3
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	b29b      	uxth	r3, r3
 8009834:	3b0a      	subs	r3, #10
 8009836:	b29b      	uxth	r3, r3
 8009838:	b219      	sxth	r1, r3
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	9308      	str	r3, [sp, #32]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	9307      	str	r3, [sp, #28]
 8009842:	2302      	movs	r3, #2
 8009844:	9306      	str	r3, [sp, #24]
 8009846:	2300      	movs	r3, #0
 8009848:	9305      	str	r3, [sp, #20]
 800984a:	2300      	movs	r3, #0
 800984c:	9304      	str	r3, [sp, #16]
 800984e:	2301      	movs	r3, #1
 8009850:	9303      	str	r3, [sp, #12]
 8009852:	2303      	movs	r3, #3
 8009854:	9302      	str	r3, [sp, #8]
 8009856:	4b38      	ldr	r3, [pc, #224]	; (8009938 <DisplayGui_Old1+0xac0>)
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	2300      	movs	r3, #0
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8009862:	4a32      	ldr	r2, [pc, #200]	; (800992c <DisplayGui_Old1+0xab4>)
 8009864:	f00c f840 	bl	80158e8 <GUI_DrawNumAt>

	GUI_DrawCircle(xt, yt, 3);
 8009868:	2203      	movs	r2, #3
 800986a:	69b9      	ldr	r1, [r7, #24]
 800986c:	69f8      	ldr	r0, [r7, #28]
 800986e:	f014 fc15 	bl	801e09c <GUI_DrawCircle>

	if(tOilTEMP.number >= tOil_MAX_VALUE)
 8009872:	4b31      	ldr	r3, [pc, #196]	; (8009938 <DisplayGui_Old1+0xac0>)
 8009874:	ed93 7b00 	vldr	d7, [r3]
 8009878:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80098f8 <DisplayGui_Old1+0xa80>
 800987c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009884:	db5e      	blt.n	8009944 <DisplayGui_Old1+0xacc>
	{
		static uint32_t millis_blink = 0;
		static uint8_t color_flag = 0;

		if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag == 0)
 8009886:	4b2d      	ldr	r3, [pc, #180]	; (800993c <DisplayGui_Old1+0xac4>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800988e:	4b24      	ldr	r3, [pc, #144]	; (8009920 <DisplayGui_Old1+0xaa8>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	429a      	cmp	r2, r3
 8009894:	d20b      	bcs.n	80098ae <DisplayGui_Old1+0xa36>
 8009896:	4b2a      	ldr	r3, [pc, #168]	; (8009940 <DisplayGui_Old1+0xac8>)
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d107      	bne.n	80098ae <DisplayGui_Old1+0xa36>
		{
			color_flag = 1;
 800989e:	4b28      	ldr	r3, [pc, #160]	; (8009940 <DisplayGui_Old1+0xac8>)
 80098a0:	2201      	movs	r2, #1
 80098a2:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 80098a4:	4b1e      	ldr	r3, [pc, #120]	; (8009920 <DisplayGui_Old1+0xaa8>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a24      	ldr	r2, [pc, #144]	; (800993c <DisplayGui_Old1+0xac4>)
 80098aa:	6013      	str	r3, [r2, #0]
 80098ac:	e012      	b.n	80098d4 <DisplayGui_Old1+0xa5c>
		}
		else if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag != 0)
 80098ae:	4b23      	ldr	r3, [pc, #140]	; (800993c <DisplayGui_Old1+0xac4>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 80098b6:	4b1a      	ldr	r3, [pc, #104]	; (8009920 <DisplayGui_Old1+0xaa8>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d20a      	bcs.n	80098d4 <DisplayGui_Old1+0xa5c>
 80098be:	4b20      	ldr	r3, [pc, #128]	; (8009940 <DisplayGui_Old1+0xac8>)
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d006      	beq.n	80098d4 <DisplayGui_Old1+0xa5c>
		{
			color_flag = 0;
 80098c6:	4b1e      	ldr	r3, [pc, #120]	; (8009940 <DisplayGui_Old1+0xac8>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 80098cc:	4b14      	ldr	r3, [pc, #80]	; (8009920 <DisplayGui_Old1+0xaa8>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a1a      	ldr	r2, [pc, #104]	; (800993c <DisplayGui_Old1+0xac4>)
 80098d2:	6013      	str	r3, [r2, #0]
		}

		if(color_flag == 1)
 80098d4:	4b1a      	ldr	r3, [pc, #104]	; (8009940 <DisplayGui_Old1+0xac8>)
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d103      	bne.n	80098e4 <DisplayGui_Old1+0xa6c>
		{
			GUI_SetColor(GUI_RED);
 80098dc:	20ff      	movs	r0, #255	; 0xff
 80098de:	f013 fa25 	bl	801cd2c <GUI_SetColor>
 80098e2:	e032      	b.n	800994a <DisplayGui_Old1+0xad2>
		}
		else
		{
			GUI_SetColor(GUI_WHITE);
 80098e4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80098e8:	f013 fa20 	bl	801cd2c <GUI_SetColor>
 80098ec:	e02d      	b.n	800994a <DisplayGui_Old1+0xad2>
 80098ee:	bf00      	nop
 80098f0:	40000000 	.word	0x40000000
 80098f4:	40273333 	.word	0x40273333
 80098f8:	00000000 	.word	0x00000000
 80098fc:	4060e000 	.word	0x4060e000
 8009900:	00ff8080 	.word	0x00ff8080
 8009904:	2000516d 	.word	0x2000516d
 8009908:	08022474 	.word	0x08022474
 800990c:	0812d360 	.word	0x0812d360
 8009910:	20005150 	.word	0x20005150
 8009914:	00d3d3d3 	.word	0x00d3d3d3
 8009918:	0812b6c8 	.word	0x0812b6c8
 800991c:	20005170 	.word	0x20005170
 8009920:	20006a98 	.word	0x20006a98
 8009924:	20005174 	.word	0x20005174
 8009928:	08022444 	.word	0x08022444
 800992c:	081249a8 	.word	0x081249a8
 8009930:	200000dc 	.word	0x200000dc
 8009934:	2000000c 	.word	0x2000000c
 8009938:	20005178 	.word	0x20005178
 800993c:	20005190 	.word	0x20005190
 8009940:	20005194 	.word	0x20005194
		}
	}
	else
	{
		GUI_SetColor(GUI_LIGHTGRAY);
 8009944:	4890      	ldr	r0, [pc, #576]	; (8009b88 <DisplayGui_Old1+0xd10>)
 8009946:	f013 f9f1 	bl	801cd2c <GUI_SetColor>
	}

	xt = (480 - rectSizeX) + 20;
 800994a:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800994e:	61fb      	str	r3, [r7, #28]
	yt = 21 + GUI_Y_OFFSET;
 8009950:	2325      	movs	r3, #37	; 0x25
 8009952:	61bb      	str	r3, [r7, #24]
	string = "T oil";
 8009954:	4b8d      	ldr	r3, [pc, #564]	; (8009b8c <DisplayGui_Old1+0xd14>)
 8009956:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font20_1);
 8009958:	488d      	ldr	r0, [pc, #564]	; (8009b90 <DisplayGui_Old1+0xd18>)
 800995a:	f013 f9b9 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 800995e:	69ba      	ldr	r2, [r7, #24]
 8009960:	69f9      	ldr	r1, [r7, #28]
 8009962:	6978      	ldr	r0, [r7, #20]
 8009964:	f014 f8c0 	bl	801dae8 <GUI_DispStringAt>

	x = (480 - 20) - rectSizeX;
 8009968:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800996c:	607b      	str	r3, [r7, #4]
	y = 16 + GUI_Y_OFFSET;
 800996e:	2320      	movs	r3, #32
 8009970:	603b      	str	r3, [r7, #0]
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY) * 1.3 * rectAAfactor, rectRadius * rectAAfactor);
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	4613      	mov	r3, r2
 8009976:	005b      	lsls	r3, r3, #1
 8009978:	4413      	add	r3, r2
 800997a:	005b      	lsls	r3, r3, #1
 800997c:	4618      	mov	r0, r3
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	4613      	mov	r3, r2
 8009982:	005b      	lsls	r3, r3, #1
 8009984:	4413      	add	r3, r2
 8009986:	005b      	lsls	r3, r3, #1
 8009988:	4619      	mov	r1, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8009990:	4613      	mov	r3, r2
 8009992:	005b      	lsls	r3, r3, #1
 8009994:	4413      	add	r3, r2
 8009996:	005b      	lsls	r3, r3, #1
 8009998:	461a      	mov	r2, r3
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	3328      	adds	r3, #40	; 0x28
 800999e:	ee07 3a90 	vmov	s15, r3
 80099a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80099a6:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8009b80 <DisplayGui_Old1+0xd08>
 80099aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80099ae:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80099b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80099b6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80099ba:	2348      	movs	r3, #72	; 0x48
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	ee17 3a90 	vmov	r3, s15
 80099c2:	f015 fceb 	bl	801f39c <GUI_AA_DrawRoundedRect>

	// DRS BEGIN

	static uint8_t drsStatus_old = 0;

	GUI_SetColor(GUI_LIGHTGRAY);
 80099c6:	4870      	ldr	r0, [pc, #448]	; (8009b88 <DisplayGui_Old1+0xd10>)
 80099c8:	f013 f9b0 	bl	801cd2c <GUI_SetColor>
	xt = (480 - rectSizeX) - 17;
 80099cc:	f240 1357 	movw	r3, #343	; 0x157
 80099d0:	61fb      	str	r3, [r7, #28]
	yt = 98 + GUI_Y_OFFSET;
 80099d2:	2372      	movs	r3, #114	; 0x72
 80099d4:	61bb      	str	r3, [r7, #24]
	string = "DRS";
 80099d6:	4b6f      	ldr	r3, [pc, #444]	; (8009b94 <DisplayGui_Old1+0xd1c>)
 80099d8:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font32_1);
 80099da:	486f      	ldr	r0, [pc, #444]	; (8009b98 <DisplayGui_Old1+0xd20>)
 80099dc:	f013 f978 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 80099e0:	69ba      	ldr	r2, [r7, #24]
 80099e2:	69f9      	ldr	r1, [r7, #28]
 80099e4:	6978      	ldr	r0, [r7, #20]
 80099e6:	f014 f87f 	bl	801dae8 <GUI_DispStringAt>

	xt += 60;
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	333c      	adds	r3, #60	; 0x3c
 80099ee:	61fb      	str	r3, [r7, #28]

	if(drsStatus != drsStatus_old)
 80099f0:	4b6a      	ldr	r3, [pc, #424]	; (8009b9c <DisplayGui_Old1+0xd24>)
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	461a      	mov	r2, r3
 80099f6:	4b6a      	ldr	r3, [pc, #424]	; (8009ba0 <DisplayGui_Old1+0xd28>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d00b      	beq.n	8009a16 <DisplayGui_Old1+0xb9e>
	{
		GUI_SetColor(GUI_BLACK);
 80099fe:	2000      	movs	r0, #0
 8009a00:	f013 f994 	bl	801cd2c <GUI_SetColor>
		GUI_FillRect(xt, yt, xt + 54, yt + 28);
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	f103 0236 	add.w	r2, r3, #54	; 0x36
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	331c      	adds	r3, #28
 8009a0e:	69b9      	ldr	r1, [r7, #24]
 8009a10:	69f8      	ldr	r0, [r7, #28]
 8009a12:	f013 fa95 	bl	801cf40 <GUI_FillRect>
	}

	drsStatus_old = drsStatus;
 8009a16:	4b62      	ldr	r3, [pc, #392]	; (8009ba0 <DisplayGui_Old1+0xd28>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	4b5f      	ldr	r3, [pc, #380]	; (8009b9c <DisplayGui_Old1+0xd24>)
 8009a1e:	701a      	strb	r2, [r3, #0]

	switch(drsStatus)
 8009a20:	4b5f      	ldr	r3, [pc, #380]	; (8009ba0 <DisplayGui_Old1+0xd28>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <DisplayGui_Old1+0xbb6>
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d007      	beq.n	8009a3c <DisplayGui_Old1+0xbc4>
 8009a2c:	e010      	b.n	8009a50 <DisplayGui_Old1+0xbd8>
	{
		case 0:
			GUI_SetColor(GUI_WHITE);
 8009a2e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009a32:	f013 f97b 	bl	801cd2c <GUI_SetColor>
			string = "OFF";
 8009a36:	4b5b      	ldr	r3, [pc, #364]	; (8009ba4 <DisplayGui_Old1+0xd2c>)
 8009a38:	617b      	str	r3, [r7, #20]
			break;
 8009a3a:	e00f      	b.n	8009a5c <DisplayGui_Old1+0xbe4>

		case 1:
			GUI_SetColor(GUI_GREEN);
 8009a3c:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8009a40:	f013 f974 	bl	801cd2c <GUI_SetColor>
			string = "ON";
 8009a44:	4b58      	ldr	r3, [pc, #352]	; (8009ba8 <DisplayGui_Old1+0xd30>)
 8009a46:	617b      	str	r3, [r7, #20]
			xt+=6;
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	3306      	adds	r3, #6
 8009a4c:	61fb      	str	r3, [r7, #28]
			break;
 8009a4e:	e005      	b.n	8009a5c <DisplayGui_Old1+0xbe4>


		default:
			GUI_SetColor(GUI_RED);
 8009a50:	20ff      	movs	r0, #255	; 0xff
 8009a52:	f013 f96b 	bl	801cd2c <GUI_SetColor>
			string = "ERR";
 8009a56:	4b55      	ldr	r3, [pc, #340]	; (8009bac <DisplayGui_Old1+0xd34>)
 8009a58:	617b      	str	r3, [r7, #20]
			break;
 8009a5a:	bf00      	nop
	}

	GUI_DispStringAt(string, xt, yt);
 8009a5c:	69ba      	ldr	r2, [r7, #24]
 8009a5e:	69f9      	ldr	r1, [r7, #28]
 8009a60:	6978      	ldr	r0, [r7, #20]
 8009a62:	f014 f841 	bl	801dae8 <GUI_DispStringAt>


	if(drsStatus == 1)			GUI_SetColor(GUI_GREEN);
 8009a66:	4b4e      	ldr	r3, [pc, #312]	; (8009ba0 <DisplayGui_Old1+0xd28>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d104      	bne.n	8009a78 <DisplayGui_Old1+0xc00>
 8009a6e:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8009a72:	f013 f95b 	bl	801cd2c <GUI_SetColor>
 8009a76:	e00a      	b.n	8009a8e <DisplayGui_Old1+0xc16>
	else if (drsStatus == 0) 	GUI_SetColor(GUI_LIGHTGRAY);
 8009a78:	4b49      	ldr	r3, [pc, #292]	; (8009ba0 <DisplayGui_Old1+0xd28>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d103      	bne.n	8009a88 <DisplayGui_Old1+0xc10>
 8009a80:	4841      	ldr	r0, [pc, #260]	; (8009b88 <DisplayGui_Old1+0xd10>)
 8009a82:	f013 f953 	bl	801cd2c <GUI_SetColor>
 8009a86:	e002      	b.n	8009a8e <DisplayGui_Old1+0xc16>
	else 						GUI_SetColor(GUI_RED);
 8009a88:	20ff      	movs	r0, #255	; 0xff
 8009a8a:	f013 f94f 	bl	801cd2c <GUI_SetColor>

	y = 94 + GUI_Y_OFFSET;
 8009a8e:	236e      	movs	r3, #110	; 0x6e
 8009a90:	603b      	str	r3, [r7, #0]
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY) * rectAAfactor, rectRadius * rectAAfactor);
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	4613      	mov	r3, r2
 8009a96:	005b      	lsls	r3, r3, #1
 8009a98:	4413      	add	r3, r2
 8009a9a:	005b      	lsls	r3, r3, #1
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	683a      	ldr	r2, [r7, #0]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	005b      	lsls	r3, r3, #1
 8009aa4:	4413      	add	r3, r2
 8009aa6:	005b      	lsls	r3, r3, #1
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	005b      	lsls	r3, r3, #1
 8009ab4:	4413      	add	r3, r2
 8009ab6:	005b      	lsls	r3, r3, #1
 8009ab8:	461c      	mov	r4, r3
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	005b      	lsls	r3, r3, #1
 8009ac4:	4413      	add	r3, r2
 8009ac6:	005b      	lsls	r3, r3, #1
 8009ac8:	461a      	mov	r2, r3
 8009aca:	2348      	movs	r3, #72	; 0x48
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	4622      	mov	r2, r4
 8009ad2:	f015 fc63 	bl	801f39c <GUI_AA_DrawRoundedRect>
	// MAP BEGIN

	static uint8_t map_old = 0;


	GUI_SetColor(GUI_LIGHTGRAY);
 8009ad6:	482c      	ldr	r0, [pc, #176]	; (8009b88 <DisplayGui_Old1+0xd10>)
 8009ad8:	f013 f928 	bl	801cd2c <GUI_SetColor>
	xt = (480 - rectSizeX) - 17;
 8009adc:	f240 1357 	movw	r3, #343	; 0x157
 8009ae0:	61fb      	str	r3, [r7, #28]
	yt = 158 + GUI_Y_OFFSET;
 8009ae2:	23ae      	movs	r3, #174	; 0xae
 8009ae4:	61bb      	str	r3, [r7, #24]
	string = "MAP";
 8009ae6:	4b32      	ldr	r3, [pc, #200]	; (8009bb0 <DisplayGui_Old1+0xd38>)
 8009ae8:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font32_1);
 8009aea:	482b      	ldr	r0, [pc, #172]	; (8009b98 <DisplayGui_Old1+0xd20>)
 8009aec:	f013 f8f0 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 8009af0:	69ba      	ldr	r2, [r7, #24]
 8009af2:	69f9      	ldr	r1, [r7, #28]
 8009af4:	6978      	ldr	r0, [r7, #20]
 8009af6:	f013 fff7 	bl	801dae8 <GUI_DispStringAt>

	xt += 60;
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	333c      	adds	r3, #60	; 0x3c
 8009afe:	61fb      	str	r3, [r7, #28]
	yt += 5;
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	3305      	adds	r3, #5
 8009b04:	61bb      	str	r3, [r7, #24]

	if(map != map_old)
 8009b06:	4b2b      	ldr	r3, [pc, #172]	; (8009bb4 <DisplayGui_Old1+0xd3c>)
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	4b2a      	ldr	r3, [pc, #168]	; (8009bb8 <DisplayGui_Old1+0xd40>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d00b      	beq.n	8009b2c <DisplayGui_Old1+0xcb4>
	{
		GUI_SetColor(GUI_BLACK);
 8009b14:	2000      	movs	r0, #0
 8009b16:	f013 f909 	bl	801cd2c <GUI_SetColor>
		GUI_FillRect(xt, yt, xt + 54, yt + 28);
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	f103 0236 	add.w	r2, r3, #54	; 0x36
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	331c      	adds	r3, #28
 8009b24:	69b9      	ldr	r1, [r7, #24]
 8009b26:	69f8      	ldr	r0, [r7, #28]
 8009b28:	f013 fa0a 	bl	801cf40 <GUI_FillRect>
	}

	map_old = map;
 8009b2c:	4b22      	ldr	r3, [pc, #136]	; (8009bb8 <DisplayGui_Old1+0xd40>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	4b20      	ldr	r3, [pc, #128]	; (8009bb4 <DisplayGui_Old1+0xd3c>)
 8009b34:	701a      	strb	r2, [r3, #0]


	GUI_SetColor(GUI_WHITE);
 8009b36:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009b3a:	f013 f8f7 	bl	801cd2c <GUI_SetColor>
	GUI_SetFont(&GUI_Font24_1);
 8009b3e:	481f      	ldr	r0, [pc, #124]	; (8009bbc <DisplayGui_Old1+0xd44>)
 8009b40:	f013 f8c6 	bl	801ccd0 <GUI_SetFont>

	switch(map)
 8009b44:	4b1c      	ldr	r3, [pc, #112]	; (8009bb8 <DisplayGui_Old1+0xd40>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b03      	cmp	r3, #3
 8009b4a:	d841      	bhi.n	8009bd0 <DisplayGui_Old1+0xd58>
 8009b4c:	a201      	add	r2, pc, #4	; (adr r2, 8009b54 <DisplayGui_Old1+0xcdc>)
 8009b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b52:	bf00      	nop
 8009b54:	08009b65 	.word	0x08009b65
 8009b58:	08009b6b 	.word	0x08009b6b
 8009b5c:	08009b71 	.word	0x08009b71
 8009b60:	08009b77 	.word	0x08009b77
	{
		case 0:
			string = "BASE";
 8009b64:	4b16      	ldr	r3, [pc, #88]	; (8009bc0 <DisplayGui_Old1+0xd48>)
 8009b66:	617b      	str	r3, [r7, #20]
			break;
 8009b68:	e03d      	b.n	8009be6 <DisplayGui_Old1+0xd6e>

		case 1:
			string = "ECO";
 8009b6a:	4b16      	ldr	r3, [pc, #88]	; (8009bc4 <DisplayGui_Old1+0xd4c>)
 8009b6c:	617b      	str	r3, [r7, #20]
			break;
 8009b6e:	e03a      	b.n	8009be6 <DisplayGui_Old1+0xd6e>

		case 2:
			string = "MAP2";
 8009b70:	4b15      	ldr	r3, [pc, #84]	; (8009bc8 <DisplayGui_Old1+0xd50>)
 8009b72:	617b      	str	r3, [r7, #20]
			break;
 8009b74:	e037      	b.n	8009be6 <DisplayGui_Old1+0xd6e>

		case 3:
			string = "MAP3";
 8009b76:	4b15      	ldr	r3, [pc, #84]	; (8009bcc <DisplayGui_Old1+0xd54>)
 8009b78:	617b      	str	r3, [r7, #20]
			break;
 8009b7a:	e034      	b.n	8009be6 <DisplayGui_Old1+0xd6e>
 8009b7c:	f3af 8000 	nop.w
 8009b80:	cccccccd 	.word	0xcccccccd
 8009b84:	3ff4cccc 	.word	0x3ff4cccc
 8009b88:	00d3d3d3 	.word	0x00d3d3d3
 8009b8c:	0802247c 	.word	0x0802247c
 8009b90:	0812b6c8 	.word	0x0812b6c8
 8009b94:	08022484 	.word	0x08022484
 8009b98:	081249a8 	.word	0x081249a8
 8009b9c:	20005195 	.word	0x20005195
 8009ba0:	20002d38 	.word	0x20002d38
 8009ba4:	08022454 	.word	0x08022454
 8009ba8:	08022488 	.word	0x08022488
 8009bac:	08022468 	.word	0x08022468
 8009bb0:	0802248c 	.word	0x0802248c
 8009bb4:	20005196 	.word	0x20005196
 8009bb8:	20002d3c 	.word	0x20002d3c
 8009bbc:	0812a104 	.word	0x0812a104
 8009bc0:	08022490 	.word	0x08022490
 8009bc4:	08022498 	.word	0x08022498
 8009bc8:	0802249c 	.word	0x0802249c
 8009bcc:	080224a4 	.word	0x080224a4

		default:
			string = "ERR";
 8009bd0:	4ba8      	ldr	r3, [pc, #672]	; (8009e74 <DisplayGui_Old1+0xffc>)
 8009bd2:	617b      	str	r3, [r7, #20]
			GUI_SetColor(GUI_RED);
 8009bd4:	20ff      	movs	r0, #255	; 0xff
 8009bd6:	f013 f8a9 	bl	801cd2c <GUI_SetColor>
			GUI_SetFont(&GUI_Font32_1);
 8009bda:	48a7      	ldr	r0, [pc, #668]	; (8009e78 <DisplayGui_Old1+0x1000>)
 8009bdc:	f013 f878 	bl	801ccd0 <GUI_SetFont>

			yt -= 5;
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	3b05      	subs	r3, #5
 8009be4:	61bb      	str	r3, [r7, #24]
	}


	GUI_DispStringAt(string, xt, yt);
 8009be6:	69ba      	ldr	r2, [r7, #24]
 8009be8:	69f9      	ldr	r1, [r7, #28]
 8009bea:	6978      	ldr	r0, [r7, #20]
 8009bec:	f013 ff7c 	bl	801dae8 <GUI_DispStringAt>

	GUI_SetColor(GUI_LIGHTGRAY);
 8009bf0:	48a2      	ldr	r0, [pc, #648]	; (8009e7c <DisplayGui_Old1+0x1004>)
 8009bf2:	f013 f89b 	bl	801cd2c <GUI_SetColor>
	y = 154 + GUI_Y_OFFSET;
 8009bf6:	23aa      	movs	r3, #170	; 0xaa
 8009bf8:	603b      	str	r3, [r7, #0]
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY) * rectAAfactor, rectRadius * rectAAfactor);
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	4413      	add	r3, r2
 8009c02:	005b      	lsls	r3, r3, #1
 8009c04:	4618      	mov	r0, r3
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	005b      	lsls	r3, r3, #1
 8009c0c:	4413      	add	r3, r2
 8009c0e:	005b      	lsls	r3, r3, #1
 8009c10:	4619      	mov	r1, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8009c18:	4613      	mov	r3, r2
 8009c1a:	005b      	lsls	r3, r3, #1
 8009c1c:	4413      	add	r3, r2
 8009c1e:	005b      	lsls	r3, r3, #1
 8009c20:	461c      	mov	r4, r3
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8009c28:	4613      	mov	r3, r2
 8009c2a:	005b      	lsls	r3, r3, #1
 8009c2c:	4413      	add	r3, r2
 8009c2e:	005b      	lsls	r3, r3, #1
 8009c30:	461a      	mov	r2, r3
 8009c32:	2348      	movs	r3, #72	; 0x48
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	4613      	mov	r3, r2
 8009c38:	4622      	mov	r2, r4
 8009c3a:	f015 fbaf 	bl	801f39c <GUI_AA_DrawRoundedRect>

	// RPM BEGIN

	static uint16_t rpm_old = 0;

	GUI_SetColor(GUI_LIGHTBLUE);
 8009c3e:	4890      	ldr	r0, [pc, #576]	; (8009e80 <DisplayGui_Old1+0x1008>)
 8009c40:	f013 f874 	bl	801cd2c <GUI_SetColor>

	xt = (480 - rectSizeX) - 12;
 8009c44:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8009c48:	61fb      	str	r3, [r7, #28]
	yt = 221 + GUI_Y_OFFSET;
 8009c4a:	23ed      	movs	r3, #237	; 0xed
 8009c4c:	61bb      	str	r3, [r7, #24]
	string = "RPM";
 8009c4e:	4b8d      	ldr	r3, [pc, #564]	; (8009e84 <DisplayGui_Old1+0x100c>)
 8009c50:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font16_1);
 8009c52:	488d      	ldr	r0, [pc, #564]	; (8009e88 <DisplayGui_Old1+0x1010>)
 8009c54:	f013 f83c 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 8009c58:	69ba      	ldr	r2, [r7, #24]
 8009c5a:	69f9      	ldr	r1, [r7, #28]
 8009c5c:	6978      	ldr	r0, [r7, #20]
 8009c5e:	f013 ff43 	bl	801dae8 <GUI_DispStringAt>

	yt-=2;
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	3b02      	subs	r3, #2
 8009c66:	61bb      	str	r3, [r7, #24]

	if(rpm_old >= 10000 && rpm < 10000)
 8009c68:	4b88      	ldr	r3, [pc, #544]	; (8009e8c <DisplayGui_Old1+0x1014>)
 8009c6a:	881b      	ldrh	r3, [r3, #0]
 8009c6c:	f242 720f 	movw	r2, #9999	; 0x270f
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d913      	bls.n	8009c9c <DisplayGui_Old1+0xe24>
 8009c74:	4b86      	ldr	r3, [pc, #536]	; (8009e90 <DisplayGui_Old1+0x1018>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f242 720f 	movw	r2, #9999	; 0x270f
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	dc0d      	bgt.n	8009c9c <DisplayGui_Old1+0xe24>
	{
		GUI_SetColor(GUI_BLACK);
 8009c80:	2000      	movs	r0, #0
 8009c82:	f013 f853 	bl	801cd2c <GUI_SetColor>
		GUI_FillRect(xt+30, yt, xt+86, yt+18);
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	f103 001e 	add.w	r0, r3, #30
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	3312      	adds	r3, #18
 8009c96:	69b9      	ldr	r1, [r7, #24]
 8009c98:	f013 f952 	bl	801cf40 <GUI_FillRect>
	}

	GUI_SetColor(GUI_LIGHTGRAY);
 8009c9c:	4877      	ldr	r0, [pc, #476]	; (8009e7c <DisplayGui_Old1+0x1004>)
 8009c9e:	f013 f845 	bl	801cd2c <GUI_SetColor>
	GUI_SetFont(&GUI_Font20_1);
 8009ca2:	487c      	ldr	r0, [pc, #496]	; (8009e94 <DisplayGui_Old1+0x101c>)
 8009ca4:	f013 f814 	bl	801ccd0 <GUI_SetFont>

	if(rpm < 10000)
 8009ca8:	4b79      	ldr	r3, [pc, #484]	; (8009e90 <DisplayGui_Old1+0x1018>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f242 720f 	movw	r2, #9999	; 0x270f
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	dc0c      	bgt.n	8009cce <DisplayGui_Old1+0xe56>
	{
		xt+= 40;
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	3328      	adds	r3, #40	; 0x28
 8009cb8:	61fb      	str	r3, [r7, #28]
		GUI_DispDecAt(rpm, xt, yt, 4);
 8009cba:	4b75      	ldr	r3, [pc, #468]	; (8009e90 <DisplayGui_Old1+0x1018>)
 8009cbc:	6818      	ldr	r0, [r3, #0]
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	b219      	sxth	r1, r3
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	b21a      	sxth	r2, r3
 8009cc6:	2304      	movs	r3, #4
 8009cc8:	f012 ff40 	bl	801cb4c <GUI_DispDecAt>
 8009ccc:	e00b      	b.n	8009ce6 <DisplayGui_Old1+0xe6e>
	}
	else
	{
		xt+= 32;
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	3320      	adds	r3, #32
 8009cd2:	61fb      	str	r3, [r7, #28]
		GUI_DispDecAt(rpm, xt, yt, 5);
 8009cd4:	4b6e      	ldr	r3, [pc, #440]	; (8009e90 <DisplayGui_Old1+0x1018>)
 8009cd6:	6818      	ldr	r0, [r3, #0]
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	b219      	sxth	r1, r3
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	b21a      	sxth	r2, r3
 8009ce0:	2305      	movs	r3, #5
 8009ce2:	f012 ff33 	bl	801cb4c <GUI_DispDecAt>
	}

	rpm_old = rpm;
 8009ce6:	4b6a      	ldr	r3, [pc, #424]	; (8009e90 <DisplayGui_Old1+0x1018>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	4b67      	ldr	r3, [pc, #412]	; (8009e8c <DisplayGui_Old1+0x1014>)
 8009cee:	801a      	strh	r2, [r3, #0]

	y = 214 + GUI_Y_OFFSET;
 8009cf0:	23e6      	movs	r3, #230	; 0xe6
 8009cf2:	603b      	str	r3, [r7, #0]
	GUI_SetColor(GUI_LIGHTBLUE);
 8009cf4:	4862      	ldr	r0, [pc, #392]	; (8009e80 <DisplayGui_Old1+0x1008>)
 8009cf6:	f013 f819 	bl	801cd2c <GUI_SetColor>
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX - 24) * rectAAfactor, (y + rectSizeY - 10) * rectAAfactor, rectRadius * rectAAfactor);
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	005b      	lsls	r3, r3, #1
 8009d00:	4413      	add	r3, r2
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	4618      	mov	r0, r3
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	4613      	mov	r3, r2
 8009d0a:	005b      	lsls	r3, r3, #1
 8009d0c:	4413      	add	r3, r2
 8009d0e:	005b      	lsls	r3, r3, #1
 8009d10:	4619      	mov	r1, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8009d18:	4613      	mov	r3, r2
 8009d1a:	005b      	lsls	r3, r3, #1
 8009d1c:	4413      	add	r3, r2
 8009d1e:	005b      	lsls	r3, r3, #1
 8009d20:	461c      	mov	r4, r3
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	f103 021e 	add.w	r2, r3, #30
 8009d28:	4613      	mov	r3, r2
 8009d2a:	005b      	lsls	r3, r3, #1
 8009d2c:	4413      	add	r3, r2
 8009d2e:	005b      	lsls	r3, r3, #1
 8009d30:	461a      	mov	r2, r3
 8009d32:	2348      	movs	r3, #72	; 0x48
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	4613      	mov	r3, r2
 8009d38:	4622      	mov	r2, r4
 8009d3a:	f015 fb2f 	bl	801f39c <GUI_AA_DrawRoundedRect>

	// TPS BEGIN

	static uint8_t tps_old = 0;

	GUI_SetColor(GUI_LIGHTBLUE);
 8009d3e:	4850      	ldr	r0, [pc, #320]	; (8009e80 <DisplayGui_Old1+0x1008>)
 8009d40:	f012 fff4 	bl	801cd2c <GUI_SetColor>

	xt = 203;
 8009d44:	23cb      	movs	r3, #203	; 0xcb
 8009d46:	61fb      	str	r3, [r7, #28]
	yt = 219 + GUI_Y_OFFSET;
 8009d48:	23eb      	movs	r3, #235	; 0xeb
 8009d4a:	61bb      	str	r3, [r7, #24]
	string = "TPS";
 8009d4c:	4b52      	ldr	r3, [pc, #328]	; (8009e98 <DisplayGui_Old1+0x1020>)
 8009d4e:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font16_1);
 8009d50:	484d      	ldr	r0, [pc, #308]	; (8009e88 <DisplayGui_Old1+0x1010>)
 8009d52:	f012 ffbd 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 8009d56:	69ba      	ldr	r2, [r7, #24]
 8009d58:	69f9      	ldr	r1, [r7, #28]
 8009d5a:	6978      	ldr	r0, [r7, #20]
 8009d5c:	f013 fec4 	bl	801dae8 <GUI_DispStringAt>

	yt-=2;
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	3b02      	subs	r3, #2
 8009d64:	61bb      	str	r3, [r7, #24]

	if(tps_old >= 10 && tps < 10)
 8009d66:	4b4d      	ldr	r3, [pc, #308]	; (8009e9c <DisplayGui_Old1+0x1024>)
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	2b09      	cmp	r3, #9
 8009d6c:	d911      	bls.n	8009d92 <DisplayGui_Old1+0xf1a>
 8009d6e:	4b4c      	ldr	r3, [pc, #304]	; (8009ea0 <DisplayGui_Old1+0x1028>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b09      	cmp	r3, #9
 8009d74:	dc0d      	bgt.n	8009d92 <DisplayGui_Old1+0xf1a>
	{
		GUI_SetColor(GUI_BLACK);
 8009d76:	2000      	movs	r0, #0
 8009d78:	f012 ffd8 	bl	801cd2c <GUI_SetColor>
		GUI_FillRect(xt+30, yt, xt+78, yt+18);
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	f103 001e 	add.w	r0, r3, #30
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	f103 024e 	add.w	r2, r3, #78	; 0x4e
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	3312      	adds	r3, #18
 8009d8c:	69b9      	ldr	r1, [r7, #24]
 8009d8e:	f013 f8d7 	bl	801cf40 <GUI_FillRect>
	}

	GUI_SetColor(GUI_LIGHTGRAY);
 8009d92:	483a      	ldr	r0, [pc, #232]	; (8009e7c <DisplayGui_Old1+0x1004>)
 8009d94:	f012 ffca 	bl	801cd2c <GUI_SetColor>
	GUI_SetFont(&GUI_Font20B_1);
 8009d98:	4842      	ldr	r0, [pc, #264]	; (8009ea4 <DisplayGui_Old1+0x102c>)
 8009d9a:	f012 ff99 	bl	801ccd0 <GUI_SetFont>

	if(tps < 10)
 8009d9e:	4b40      	ldr	r3, [pc, #256]	; (8009ea0 <DisplayGui_Old1+0x1028>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2b09      	cmp	r3, #9
 8009da4:	dc0c      	bgt.n	8009dc0 <DisplayGui_Old1+0xf48>
	{
		xt+= 48;
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	3330      	adds	r3, #48	; 0x30
 8009daa:	61fb      	str	r3, [r7, #28]
		GUI_DispDecAt(tps, xt, yt, 1);
 8009dac:	4b3c      	ldr	r3, [pc, #240]	; (8009ea0 <DisplayGui_Old1+0x1028>)
 8009dae:	6818      	ldr	r0, [r3, #0]
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	b219      	sxth	r1, r3
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	b21a      	sxth	r2, r3
 8009db8:	2301      	movs	r3, #1
 8009dba:	f012 fec7 	bl	801cb4c <GUI_DispDecAt>
 8009dbe:	e01c      	b.n	8009dfa <DisplayGui_Old1+0xf82>
	}
	else
	{
		xt+= 42;
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	332a      	adds	r3, #42	; 0x2a
 8009dc4:	61fb      	str	r3, [r7, #28]

		if(tps < 100)
 8009dc6:	4b36      	ldr	r3, [pc, #216]	; (8009ea0 <DisplayGui_Old1+0x1028>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b63      	cmp	r3, #99	; 0x63
 8009dcc:	dc09      	bgt.n	8009de2 <DisplayGui_Old1+0xf6a>
		{
			GUI_DispDecAt(tps, xt, yt, 2);
 8009dce:	4b34      	ldr	r3, [pc, #208]	; (8009ea0 <DisplayGui_Old1+0x1028>)
 8009dd0:	6818      	ldr	r0, [r3, #0]
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	b219      	sxth	r1, r3
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	b21a      	sxth	r2, r3
 8009dda:	2302      	movs	r3, #2
 8009ddc:	f012 feb6 	bl	801cb4c <GUI_DispDecAt>
 8009de0:	e00b      	b.n	8009dfa <DisplayGui_Old1+0xf82>
		}
		else
		{
			GUI_SetColor(GUI_GREEN);
 8009de2:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8009de6:	f012 ffa1 	bl	801cd2c <GUI_SetColor>
			GUI_DispDecAt(99, xt, yt, 2);
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	b219      	sxth	r1, r3
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	b21a      	sxth	r2, r3
 8009df2:	2302      	movs	r3, #2
 8009df4:	2063      	movs	r0, #99	; 0x63
 8009df6:	f012 fea9 	bl	801cb4c <GUI_DispDecAt>
		}
	}

	tps_old = tps;
 8009dfa:	4b29      	ldr	r3, [pc, #164]	; (8009ea0 <DisplayGui_Old1+0x1028>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	4b26      	ldr	r3, [pc, #152]	; (8009e9c <DisplayGui_Old1+0x1024>)
 8009e02:	701a      	strb	r2, [r3, #0]


	x = (480 - (rectSizeX - 24)) / 2;
 8009e04:	23c0      	movs	r3, #192	; 0xc0
 8009e06:	607b      	str	r3, [r7, #4]
	y = 214 - 2 + GUI_Y_OFFSET;
 8009e08:	23e4      	movs	r3, #228	; 0xe4
 8009e0a:	603b      	str	r3, [r7, #0]
	GUI_SetColor(GUI_LIGHTBLUE);
 8009e0c:	481c      	ldr	r0, [pc, #112]	; (8009e80 <DisplayGui_Old1+0x1008>)
 8009e0e:	f012 ff8d 	bl	801cd2c <GUI_SetColor>
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX - 24) * rectAAfactor, (y + rectSizeY - 10) * rectAAfactor, rectRadius * rectAAfactor);
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	4613      	mov	r3, r2
 8009e16:	005b      	lsls	r3, r3, #1
 8009e18:	4413      	add	r3, r2
 8009e1a:	005b      	lsls	r3, r3, #1
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	683a      	ldr	r2, [r7, #0]
 8009e20:	4613      	mov	r3, r2
 8009e22:	005b      	lsls	r3, r3, #1
 8009e24:	4413      	add	r3, r2
 8009e26:	005b      	lsls	r3, r3, #1
 8009e28:	4619      	mov	r1, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8009e30:	4613      	mov	r3, r2
 8009e32:	005b      	lsls	r3, r3, #1
 8009e34:	4413      	add	r3, r2
 8009e36:	005b      	lsls	r3, r3, #1
 8009e38:	461c      	mov	r4, r3
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	f103 021e 	add.w	r2, r3, #30
 8009e40:	4613      	mov	r3, r2
 8009e42:	005b      	lsls	r3, r3, #1
 8009e44:	4413      	add	r3, r2
 8009e46:	005b      	lsls	r3, r3, #1
 8009e48:	461a      	mov	r2, r3
 8009e4a:	2348      	movs	r3, #72	; 0x48
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	4622      	mov	r2, r4
 8009e52:	f015 faa3 	bl	801f39c <GUI_AA_DrawRoundedRect>

		GUI_DrawTimeAt(480/2 - 4, 164, &GUI_Font32_1, GUI_LIGHTGRAY, GUI_BLACK, &timeToDisplay, TIME_FORMAT_HOURS, 3, DISABLE, CENTER);
	}
	// Time END

	GUI_SetColor(GUI_WHITE);
 8009e56:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009e5a:	f012 ff67 	bl	801cd2c <GUI_SetColor>

	DisplayGui_Old1Armature();
 8009e5e:	f000 f825 	bl	8009eac <DisplayGui_Old1Armature>

	dataRefresh = 0;
 8009e62:	4b11      	ldr	r3, [pc, #68]	; (8009ea8 <DisplayGui_Old1+0x1030>)
 8009e64:	2200      	movs	r2, #0
 8009e66:	701a      	strb	r2, [r3, #0]

	//CORE FUNCTION END

	DisplayGui_Old1_END:;
}
 8009e68:	bf00      	nop
 8009e6a:	bf00      	nop
 8009e6c:	3724      	adds	r7, #36	; 0x24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd90      	pop	{r4, r7, pc}
 8009e72:	bf00      	nop
 8009e74:	08022468 	.word	0x08022468
 8009e78:	081249a8 	.word	0x081249a8
 8009e7c:	00d3d3d3 	.word	0x00d3d3d3
 8009e80:	00ff8080 	.word	0x00ff8080
 8009e84:	080224ac 	.word	0x080224ac
 8009e88:	0812d360 	.word	0x0812d360
 8009e8c:	20005198 	.word	0x20005198
 8009e90:	20000020 	.word	0x20000020
 8009e94:	0812b6c8 	.word	0x0812b6c8
 8009e98:	080224b0 	.word	0x080224b0
 8009e9c:	2000519a 	.word	0x2000519a
 8009ea0:	20000024 	.word	0x20000024
 8009ea4:	0812cbd8 	.word	0x0812cbd8
 8009ea8:	200000dc 	.word	0x200000dc

08009eac <DisplayGui_Old1Armature>:



void DisplayGui_Old1Armature(void)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	af00      	add	r7, sp, #0
	GUI_SetColor(GUI_WHITE);
 8009eb0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009eb4:	f012 ff3a 	bl	801cd2c <GUI_SetColor>

	//main rect (frame)
	GUI_DrawRect(1, 1, 479, 271);
 8009eb8:	f240 130f 	movw	r3, #271	; 0x10f
 8009ebc:	f240 12df 	movw	r2, #479	; 0x1df
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	2001      	movs	r0, #1
 8009ec4:	f014 ffc6 	bl	801ee54 <GUI_DrawRect>
	GUI_DrawRect(2, 2, 478, 270);
 8009ec8:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8009ecc:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8009ed0:	2102      	movs	r1, #2
 8009ed2:	2002      	movs	r0, #2
 8009ed4:	f014 ffbe 	bl	801ee54 <GUI_DrawRect>

	//GUI_AA_DisableHiRes();
	//GUI_SetPenSize(1);
}
 8009ed8:	bf00      	nop
 8009eda:	bd80      	pop	{r7, pc}

08009edc <DisplayGui_Old1_Intro>:


void DisplayGui_Old1_Intro(void)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	af00      	add	r7, sp, #0
	DisplayGui_Old1Armature();
 8009ee0:	f7ff ffe4 	bl	8009eac <DisplayGui_Old1Armature>

	GUI_SetTextAlign(GUI_TA_HCENTER);
 8009ee4:	2002      	movs	r0, #2
 8009ee6:	f012 fee9 	bl	801ccbc <GUI_SetTextAlign>
	GUI_SetColor(GUI_WHITE);
 8009eea:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009eee:	f012 ff1d 	bl	801cd2c <GUI_SetColor>

	GUI_SetFont(&GUI_FontD80);
	GUI_DispDecAt(1, 214, 90, 1);
	*/

	GUI_SetFont(&GUI_Font32B_1);
 8009ef2:	480a      	ldr	r0, [pc, #40]	; (8009f1c <DisplayGui_Old1_Intro+0x40>)
 8009ef4:	f012 feec 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt("AUTOCROSS", 236, 50 + 50);
 8009ef8:	2264      	movs	r2, #100	; 0x64
 8009efa:	21ec      	movs	r1, #236	; 0xec
 8009efc:	4808      	ldr	r0, [pc, #32]	; (8009f20 <DisplayGui_Old1_Intro+0x44>)
 8009efe:	f013 fdf3 	bl	801dae8 <GUI_DispStringAt>


	GUI_SetTextAlign(GUI_TA_LEFT);
 8009f02:	2000      	movs	r0, #0
 8009f04:	f012 feda 	bl	801ccbc <GUI_SetTextAlign>

	GUI_SetColor(GUI_WHITE);
 8009f08:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009f0c:	f012 ff0e 	bl	801cd2c <GUI_SetColor>
	GUI_SetBkColor(GUI_BLACK);
 8009f10:	2000      	movs	r0, #0
 8009f12:	f012 ff09 	bl	801cd28 <GUI_SetBkColor>
}
 8009f16:	bf00      	nop
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	08127b30 	.word	0x08127b30
 8009f20:	080224b4 	.word	0x080224b4
 8009f24:	00000000 	.word	0x00000000

08009f28 <DisplayGui_Old2>:

#define RPM_BAR_LENGTH_OFFSET	0


void DisplayGui_Old2(void)
{
 8009f28:	b590      	push	{r4, r7, lr}
 8009f2a:	b093      	sub	sp, #76	; 0x4c
 8009f2c:	af0a      	add	r7, sp, #40	; 0x28
	// Intro section BEGIN
	static uint32_t millisGuiIntro = 0;
	static uint8_t introStatus = 0;

	if(selectedGui_old != GuiOld2)
 8009f2e:	4baa      	ldr	r3, [pc, #680]	; (800a1d8 <DisplayGui_Old2+0x2b0>)
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	2b0c      	cmp	r3, #12
 8009f34:	d008      	beq.n	8009f48 <DisplayGui_Old2+0x20>
	{
		introStatus = 1;
 8009f36:	4ba9      	ldr	r3, [pc, #676]	; (800a1dc <DisplayGui_Old2+0x2b4>)
 8009f38:	2201      	movs	r2, #1
 8009f3a:	701a      	strb	r2, [r3, #0]
		millisGuiIntro = millis;
 8009f3c:	4ba8      	ldr	r3, [pc, #672]	; (800a1e0 <DisplayGui_Old2+0x2b8>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4aa8      	ldr	r2, [pc, #672]	; (800a1e4 <DisplayGui_Old2+0x2bc>)
 8009f42:	6013      	str	r3, [r2, #0]

		GUI_Clear();
 8009f44:	f013 ff9e 	bl	801de84 <GUI_Clear>
	}

	if(introStatus == 1)
 8009f48:	4ba4      	ldr	r3, [pc, #656]	; (800a1dc <DisplayGui_Old2+0x2b4>)
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d110      	bne.n	8009f72 <DisplayGui_Old2+0x4a>
	{
		if(millis < millisGuiIntro + DISPLAY_GUI_INTRO_TIME)
 8009f50:	4ba4      	ldr	r3, [pc, #656]	; (800a1e4 <DisplayGui_Old2+0x2bc>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 8009f58:	4ba1      	ldr	r3, [pc, #644]	; (800a1e0 <DisplayGui_Old2+0x2b8>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d903      	bls.n	8009f68 <DisplayGui_Old2+0x40>
		{
			DisplayGui_Old2_Intro();
 8009f60:	f000 ffa0 	bl	800aea4 <DisplayGui_Old2_Intro>
			goto DisplayGui_Old2_END;
 8009f64:	f000 bf63 	b.w	800ae2e <DisplayGui_Old2+0xf06>
		}
		else
		{
			introStatus = 0;
 8009f68:	4b9c      	ldr	r3, [pc, #624]	; (800a1dc <DisplayGui_Old2+0x2b4>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	701a      	strb	r2, [r3, #0]
			GUI_Clear();
 8009f6e:	f013 ff89 	bl	801de84 <GUI_Clear>
	//CORE FUNCTION BEGIN

	//DisplayGui_Old2Armature();

	int x, y, xt, yt;
	char *string = "";
 8009f72:	4b9d      	ldr	r3, [pc, #628]	; (800a1e8 <DisplayGui_Old2+0x2c0>)
 8009f74:	617b      	str	r3, [r7, #20]

	char *a = "";
 8009f76:	4b9c      	ldr	r3, [pc, #624]	; (800a1e8 <DisplayGui_Old2+0x2c0>)
 8009f78:	613b      	str	r3, [r7, #16]
	char *b = "";
 8009f7a:	4b9b      	ldr	r3, [pc, #620]	; (800a1e8 <DisplayGui_Old2+0x2c0>)
 8009f7c:	60fb      	str	r3, [r7, #12]


	// RPM BAR BEGIN

	Display_OldRpmBar(3 + RPM_BAR_LENGTH_OFFSET, 23, 474 - RPM_BAR_LENGTH_OFFSET*2, 20, rpm, 0, 5500, 10500, 12500);
 8009f7e:	4b9b      	ldr	r3, [pc, #620]	; (800a1ec <DisplayGui_Old2+0x2c4>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8009f88:	9204      	str	r2, [sp, #16]
 8009f8a:	f642 1204 	movw	r2, #10500	; 0x2904
 8009f8e:	9203      	str	r2, [sp, #12]
 8009f90:	f241 527c 	movw	r2, #5500	; 0x157c
 8009f94:	9202      	str	r2, [sp, #8]
 8009f96:	2200      	movs	r2, #0
 8009f98:	9201      	str	r2, [sp, #4]
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	2314      	movs	r3, #20
 8009f9e:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8009fa2:	2117      	movs	r1, #23
 8009fa4:	2003      	movs	r0, #3
 8009fa6:	f006 f977 	bl	8010298 <Display_OldRpmBar>

	// GEAR BEGIN

	static uint8_t gear_old = 0;

	if(gear_old != gear)
 8009faa:	4b91      	ldr	r3, [pc, #580]	; (800a1f0 <DisplayGui_Old2+0x2c8>)
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	4b90      	ldr	r3, [pc, #576]	; (800a1f4 <DisplayGui_Old2+0x2cc>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d009      	beq.n	8009fcc <DisplayGui_Old2+0xa4>
	{
		GUI_SetColor(GUI_BLACK);
 8009fb8:	2000      	movs	r0, #0
 8009fba:	f012 feb7 	bl	801cd2c <GUI_SetColor>
		GUI_FillRect(190, 20 + GUI_Y_OFFSET, 290, 22 + 126 + GUI_Y_OFFSET);
 8009fbe:	23a4      	movs	r3, #164	; 0xa4
 8009fc0:	f44f 7291 	mov.w	r2, #290	; 0x122
 8009fc4:	2124      	movs	r1, #36	; 0x24
 8009fc6:	20be      	movs	r0, #190	; 0xbe
 8009fc8:	f012 ffba 	bl	801cf40 <GUI_FillRect>
			GUI_FillRect(190, 22 + GUI_Y_OFFSET, 290, 22 + 126 + GUI_Y_OFFSET);

	}
#elif HQ_GEARBOX_ENABLE == 1

		switch(CAR_Data.gear.intData)
 8009fcc:	4b8a      	ldr	r3, [pc, #552]	; (800a1f8 <DisplayGui_Old2+0x2d0>)
 8009fce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	d857      	bhi.n	800a086 <DisplayGui_Old2+0x15e>
 8009fd6:	a201      	add	r2, pc, #4	; (adr r2, 8009fdc <DisplayGui_Old2+0xb4>)
 8009fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fdc:	08009ff1 	.word	0x08009ff1
 8009fe0:	0800a00f 	.word	0x0800a00f
 8009fe4:	0800a02d 	.word	0x0800a02d
 8009fe8:	0800a04b 	.word	0x0800a04b
 8009fec:	0800a069 	.word	0x0800a069
		{
			case 0:
				GUI_DrawBitmap(&bmGEARBOX_N_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 6, 20 + GUI_Y_OFFSET);
 8009ff0:	4b82      	ldr	r3, [pc, #520]	; (800a1fc <DisplayGui_Old2+0x2d4>)
 8009ff2:	881b      	ldrh	r3, [r3, #0]
 8009ff4:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	da00      	bge.n	8009ffe <DisplayGui_Old2+0xd6>
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	105b      	asrs	r3, r3, #1
 800a000:	3306      	adds	r3, #6
 800a002:	2224      	movs	r2, #36	; 0x24
 800a004:	4619      	mov	r1, r3
 800a006:	487e      	ldr	r0, [pc, #504]	; (800a200 <DisplayGui_Old2+0x2d8>)
 800a008:	f013 fd48 	bl	801da9c <GUI_DrawBitmap>
				break;
 800a00c:	e045      	b.n	800a09a <DisplayGui_Old2+0x172>

			case 1:
				GUI_DrawBitmap(&bmGEARBOX_1_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 15, 22 + GUI_Y_OFFSET);
 800a00e:	4b7b      	ldr	r3, [pc, #492]	; (800a1fc <DisplayGui_Old2+0x2d4>)
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800a016:	2b00      	cmp	r3, #0
 800a018:	da00      	bge.n	800a01c <DisplayGui_Old2+0xf4>
 800a01a:	3301      	adds	r3, #1
 800a01c:	105b      	asrs	r3, r3, #1
 800a01e:	330f      	adds	r3, #15
 800a020:	2226      	movs	r2, #38	; 0x26
 800a022:	4619      	mov	r1, r3
 800a024:	4877      	ldr	r0, [pc, #476]	; (800a204 <DisplayGui_Old2+0x2dc>)
 800a026:	f013 fd39 	bl	801da9c <GUI_DrawBitmap>
				break;
 800a02a:	e036      	b.n	800a09a <DisplayGui_Old2+0x172>

			case 2:
				GUI_DrawBitmap(&bmGEARBOX_2_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 13, 22 + GUI_Y_OFFSET);
 800a02c:	4b73      	ldr	r3, [pc, #460]	; (800a1fc <DisplayGui_Old2+0x2d4>)
 800a02e:	881b      	ldrh	r3, [r3, #0]
 800a030:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800a034:	2b00      	cmp	r3, #0
 800a036:	da00      	bge.n	800a03a <DisplayGui_Old2+0x112>
 800a038:	3301      	adds	r3, #1
 800a03a:	105b      	asrs	r3, r3, #1
 800a03c:	330d      	adds	r3, #13
 800a03e:	2226      	movs	r2, #38	; 0x26
 800a040:	4619      	mov	r1, r3
 800a042:	4871      	ldr	r0, [pc, #452]	; (800a208 <DisplayGui_Old2+0x2e0>)
 800a044:	f013 fd2a 	bl	801da9c <GUI_DrawBitmap>
				break;
 800a048:	e027      	b.n	800a09a <DisplayGui_Old2+0x172>

			case 3:
				GUI_DrawBitmap(&bmGEARBOX_3_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 15, 22 + GUI_Y_OFFSET);
 800a04a:	4b6c      	ldr	r3, [pc, #432]	; (800a1fc <DisplayGui_Old2+0x2d4>)
 800a04c:	881b      	ldrh	r3, [r3, #0]
 800a04e:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800a052:	2b00      	cmp	r3, #0
 800a054:	da00      	bge.n	800a058 <DisplayGui_Old2+0x130>
 800a056:	3301      	adds	r3, #1
 800a058:	105b      	asrs	r3, r3, #1
 800a05a:	330f      	adds	r3, #15
 800a05c:	2226      	movs	r2, #38	; 0x26
 800a05e:	4619      	mov	r1, r3
 800a060:	486a      	ldr	r0, [pc, #424]	; (800a20c <DisplayGui_Old2+0x2e4>)
 800a062:	f013 fd1b 	bl	801da9c <GUI_DrawBitmap>
				break;
 800a066:	e018      	b.n	800a09a <DisplayGui_Old2+0x172>

			case 4:
				GUI_DrawBitmap(&bmGEARBOX_4_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 9, 22 + GUI_Y_OFFSET);
 800a068:	4b64      	ldr	r3, [pc, #400]	; (800a1fc <DisplayGui_Old2+0x2d4>)
 800a06a:	881b      	ldrh	r3, [r3, #0]
 800a06c:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800a070:	2b00      	cmp	r3, #0
 800a072:	da00      	bge.n	800a076 <DisplayGui_Old2+0x14e>
 800a074:	3301      	adds	r3, #1
 800a076:	105b      	asrs	r3, r3, #1
 800a078:	3309      	adds	r3, #9
 800a07a:	2226      	movs	r2, #38	; 0x26
 800a07c:	4619      	mov	r1, r3
 800a07e:	4864      	ldr	r0, [pc, #400]	; (800a210 <DisplayGui_Old2+0x2e8>)
 800a080:	f013 fd0c 	bl	801da9c <GUI_DrawBitmap>
				break;
 800a084:	e009      	b.n	800a09a <DisplayGui_Old2+0x172>

			default:
				GUI_SetColor(GUI_RED);
 800a086:	20ff      	movs	r0, #255	; 0xff
 800a088:	f012 fe50 	bl	801cd2c <GUI_SetColor>
				GUI_FillRect(193, 84 + GUI_Y_OFFSET, 288, 207 + GUI_Y_OFFSET);
 800a08c:	23df      	movs	r3, #223	; 0xdf
 800a08e:	f44f 7290 	mov.w	r2, #288	; 0x120
 800a092:	2164      	movs	r1, #100	; 0x64
 800a094:	20c1      	movs	r0, #193	; 0xc1
 800a096:	f012 ff53 	bl	801cf40 <GUI_FillRect>

		}

#endif

	gear_old = gear;
 800a09a:	4b56      	ldr	r3, [pc, #344]	; (800a1f4 <DisplayGui_Old2+0x2cc>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	b2da      	uxtb	r2, r3
 800a0a0:	4b53      	ldr	r3, [pc, #332]	; (800a1f0 <DisplayGui_Old2+0x2c8>)
 800a0a2:	701a      	strb	r2, [r3, #0]

	// GEAR END


	GUI_AA_SetFactor(rectAAfactor);
 800a0a4:	2006      	movs	r0, #6
 800a0a6:	f015 f94d 	bl	801f344 <GUI_AA_SetFactor>
	GUI_AA_EnableHiRes();
 800a0aa:	f015 f953 	bl	801f354 <GUI_AA_EnableHiRes>
	GUI_AA_SetFactor(rectAAfactor);
 800a0ae:	2006      	movs	r0, #6
 800a0b0:	f015 f948 	bl	801f344 <GUI_AA_SetFactor>

	GUI_SetPenSize(rectThickness);
 800a0b4:	2004      	movs	r0, #4
 800a0b6:	f012 feaf 	bl	801ce18 <GUI_SetPenSize>

	// Water Temparature BEGIN

	GUI_SetColor(GUI_WHITE);
 800a0ba:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a0be:	f012 fe35 	bl	801cd2c <GUI_SetColor>
	GUI_SetBkColor(GUI_BLACK);
 800a0c2:	2000      	movs	r0, #0
 800a0c4:	f012 fe30 	bl	801cd28 <GUI_SetBkColor>

	xt = 48 + 56;
 800a0c8:	2368      	movs	r3, #104	; 0x68
 800a0ca:	61fb      	str	r3, [r7, #28]
	yt = 21 + 25 + GUI_Y_OFFSET;
 800a0cc:	233e      	movs	r3, #62	; 0x3e
 800a0ce:	61bb      	str	r3, [r7, #24]

	string = " C";
 800a0d0:	4b50      	ldr	r3, [pc, #320]	; (800a214 <DisplayGui_Old2+0x2ec>)
 800a0d2:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font32_1);
 800a0d4:	4850      	ldr	r0, [pc, #320]	; (800a218 <DisplayGui_Old2+0x2f0>)
 800a0d6:	f012 fdfb 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt - 4, yt - 10);
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	1f19      	subs	r1, r3, #4
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	3b0a      	subs	r3, #10
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	6978      	ldr	r0, [r7, #20]
 800a0e6:	f013 fcff 	bl	801dae8 <GUI_DispStringAt>

	GUI_SetBkColor(GUI_BLACK);
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	f012 fe1c 	bl	801cd28 <GUI_SetBkColor>
	//GUI_DrawNumAtAuto();

	//GUI_DrawNumAt();

	static GUI_DrawNumAtTypeDef tWaterTEMP;
	tWaterTEMP.number = tWater;
 800a0f0:	4b4a      	ldr	r3, [pc, #296]	; (800a21c <DisplayGui_Old2+0x2f4>)
 800a0f2:	edd3 7a00 	vldr	s15, [r3]
 800a0f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a0fa:	4b49      	ldr	r3, [pc, #292]	; (800a220 <DisplayGui_Old2+0x2f8>)
 800a0fc:	ed83 7b00 	vstr	d7, [r3]

	//GUI_DrawNumAt(xt - 10, yt - 10, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &tWaterTEMP, 3, 1, DISABLE, DISABLE, RIGHT, a, b);
	GUI_DrawNumAt(xt - 40, yt - 10, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &tWaterTEMP, 3, 1, DISABLE, DISABLE, CENTER, a, b);
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	b29b      	uxth	r3, r3
 800a104:	3b28      	subs	r3, #40	; 0x28
 800a106:	b29b      	uxth	r3, r3
 800a108:	b218      	sxth	r0, r3
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	3b0a      	subs	r3, #10
 800a110:	b29b      	uxth	r3, r3
 800a112:	b219      	sxth	r1, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	9308      	str	r3, [sp, #32]
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	9307      	str	r3, [sp, #28]
 800a11c:	2302      	movs	r3, #2
 800a11e:	9306      	str	r3, [sp, #24]
 800a120:	2300      	movs	r3, #0
 800a122:	9305      	str	r3, [sp, #20]
 800a124:	2300      	movs	r3, #0
 800a126:	9304      	str	r3, [sp, #16]
 800a128:	2301      	movs	r3, #1
 800a12a:	9303      	str	r3, [sp, #12]
 800a12c:	2303      	movs	r3, #3
 800a12e:	9302      	str	r3, [sp, #8]
 800a130:	4b3b      	ldr	r3, [pc, #236]	; (800a220 <DisplayGui_Old2+0x2f8>)
 800a132:	9301      	str	r3, [sp, #4]
 800a134:	2300      	movs	r3, #0
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800a13c:	4a36      	ldr	r2, [pc, #216]	; (800a218 <DisplayGui_Old2+0x2f0>)
 800a13e:	f00b fbd3 	bl	80158e8 <GUI_DrawNumAt>

	GUI_DrawCircle(xt, yt, 3);
 800a142:	2203      	movs	r2, #3
 800a144:	69b9      	ldr	r1, [r7, #24]
 800a146:	69f8      	ldr	r0, [r7, #28]
 800a148:	f013 ffa8 	bl	801e09c <GUI_DrawCircle>

	GUI_SetBkColor(GUI_BLACK);
 800a14c:	2000      	movs	r0, #0
 800a14e:	f012 fdeb 	bl	801cd28 <GUI_SetBkColor>


	if(tWaterTEMP.number >= tWater_MAX_VALUE)
 800a152:	4b33      	ldr	r3, [pc, #204]	; (800a220 <DisplayGui_Old2+0x2f8>)
 800a154:	ed93 7b00 	vldr	d7, [r3]
 800a158:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 800a1d0 <DisplayGui_Old2+0x2a8>
 800a15c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a164:	db62      	blt.n	800a22c <DisplayGui_Old2+0x304>
	{
		static uint32_t millis_blink = 0;
		static uint8_t color_flag = 0;

		if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag == 0)
 800a166:	4b2f      	ldr	r3, [pc, #188]	; (800a224 <DisplayGui_Old2+0x2fc>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800a16e:	4b1c      	ldr	r3, [pc, #112]	; (800a1e0 <DisplayGui_Old2+0x2b8>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	429a      	cmp	r2, r3
 800a174:	d20b      	bcs.n	800a18e <DisplayGui_Old2+0x266>
 800a176:	4b2c      	ldr	r3, [pc, #176]	; (800a228 <DisplayGui_Old2+0x300>)
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d107      	bne.n	800a18e <DisplayGui_Old2+0x266>
		{
			color_flag = 1;
 800a17e:	4b2a      	ldr	r3, [pc, #168]	; (800a228 <DisplayGui_Old2+0x300>)
 800a180:	2201      	movs	r2, #1
 800a182:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 800a184:	4b16      	ldr	r3, [pc, #88]	; (800a1e0 <DisplayGui_Old2+0x2b8>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a26      	ldr	r2, [pc, #152]	; (800a224 <DisplayGui_Old2+0x2fc>)
 800a18a:	6013      	str	r3, [r2, #0]
 800a18c:	e012      	b.n	800a1b4 <DisplayGui_Old2+0x28c>
		}
		else if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag != 0)
 800a18e:	4b25      	ldr	r3, [pc, #148]	; (800a224 <DisplayGui_Old2+0x2fc>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800a196:	4b12      	ldr	r3, [pc, #72]	; (800a1e0 <DisplayGui_Old2+0x2b8>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d20a      	bcs.n	800a1b4 <DisplayGui_Old2+0x28c>
 800a19e:	4b22      	ldr	r3, [pc, #136]	; (800a228 <DisplayGui_Old2+0x300>)
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d006      	beq.n	800a1b4 <DisplayGui_Old2+0x28c>
		{
			color_flag = 0;
 800a1a6:	4b20      	ldr	r3, [pc, #128]	; (800a228 <DisplayGui_Old2+0x300>)
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 800a1ac:	4b0c      	ldr	r3, [pc, #48]	; (800a1e0 <DisplayGui_Old2+0x2b8>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a1c      	ldr	r2, [pc, #112]	; (800a224 <DisplayGui_Old2+0x2fc>)
 800a1b2:	6013      	str	r3, [r2, #0]
		}

		if(color_flag == 1)
 800a1b4:	4b1c      	ldr	r3, [pc, #112]	; (800a228 <DisplayGui_Old2+0x300>)
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d103      	bne.n	800a1c4 <DisplayGui_Old2+0x29c>
		{
			GUI_SetColor(GUI_RED);
 800a1bc:	20ff      	movs	r0, #255	; 0xff
 800a1be:	f012 fdb5 	bl	801cd2c <GUI_SetColor>
 800a1c2:	e036      	b.n	800a232 <DisplayGui_Old2+0x30a>
		}
		else
		{
			GUI_SetColor(GUI_WHITE);
 800a1c4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a1c8:	f012 fdb0 	bl	801cd2c <GUI_SetColor>
 800a1cc:	e031      	b.n	800a232 <DisplayGui_Old2+0x30a>
 800a1ce:	bf00      	nop
 800a1d0:	00000000 	.word	0x00000000
 800a1d4:	405a4000 	.word	0x405a4000
 800a1d8:	20000044 	.word	0x20000044
 800a1dc:	2000519b 	.word	0x2000519b
 800a1e0:	20006a98 	.word	0x20006a98
 800a1e4:	2000519c 	.word	0x2000519c
 800a1e8:	080224c0 	.word	0x080224c0
 800a1ec:	20000020 	.word	0x20000020
 800a1f0:	200051a0 	.word	0x200051a0
 800a1f4:	20002d34 	.word	0x20002d34
 800a1f8:	2000041c 	.word	0x2000041c
 800a1fc:	0802c314 	.word	0x0802c314
 800a200:	0802eea0 	.word	0x0802eea0
 800a204:	08024a3c 	.word	0x08024a3c
 800a208:	08026efc 	.word	0x08026efc
 800a20c:	08029348 	.word	0x08029348
 800a210:	0802bc90 	.word	0x0802bc90
 800a214:	080224c4 	.word	0x080224c4
 800a218:	081249a8 	.word	0x081249a8
 800a21c:	20000010 	.word	0x20000010
 800a220:	200051a8 	.word	0x200051a8
 800a224:	200051c0 	.word	0x200051c0
 800a228:	200051c4 	.word	0x200051c4
		}
	}
	else
	{
		GUI_SetColor(GUI_LIGHTGRAY);
 800a22c:	488e      	ldr	r0, [pc, #568]	; (800a468 <DisplayGui_Old2+0x540>)
 800a22e:	f012 fd7d 	bl	801cd2c <GUI_SetColor>
	}

	//GUI_SetColor(GUI_LIGHTGRAY);

	x = 20;
 800a232:	2314      	movs	r3, #20
 800a234:	60bb      	str	r3, [r7, #8]
	y = 16 + GUI_Y_OFFSET;
 800a236:	2320      	movs	r3, #32
 800a238:	607b      	str	r3, [r7, #4]
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY) * 1.3 * rectAAfactor, rectRadius * rectAAfactor);
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	4613      	mov	r3, r2
 800a23e:	005b      	lsls	r3, r3, #1
 800a240:	4413      	add	r3, r2
 800a242:	005b      	lsls	r3, r3, #1
 800a244:	4618      	mov	r0, r3
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	4613      	mov	r3, r2
 800a24a:	005b      	lsls	r3, r3, #1
 800a24c:	4413      	add	r3, r2
 800a24e:	005b      	lsls	r3, r3, #1
 800a250:	4619      	mov	r1, r3
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800a258:	4613      	mov	r3, r2
 800a25a:	005b      	lsls	r3, r3, #1
 800a25c:	4413      	add	r3, r2
 800a25e:	005b      	lsls	r3, r3, #1
 800a260:	461a      	mov	r2, r3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	3328      	adds	r3, #40	; 0x28
 800a266:	ee07 3a90 	vmov	s15, r3
 800a26a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a26e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800a460 <DisplayGui_Old2+0x538>
 800a272:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a276:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800a27a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a27e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a282:	2348      	movs	r3, #72	; 0x48
 800a284:	9300      	str	r3, [sp, #0]
 800a286:	ee17 3a90 	vmov	r3, s15
 800a28a:	f015 f887 	bl	801f39c <GUI_AA_DrawRoundedRect>


	xt = 48;
 800a28e:	2330      	movs	r3, #48	; 0x30
 800a290:	61fb      	str	r3, [r7, #28]
	yt = 21 + GUI_Y_OFFSET;
 800a292:	2325      	movs	r3, #37	; 0x25
 800a294:	61bb      	str	r3, [r7, #24]
	string = "T water";
 800a296:	4b75      	ldr	r3, [pc, #468]	; (800a46c <DisplayGui_Old2+0x544>)
 800a298:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font20_1);
 800a29a:	4875      	ldr	r0, [pc, #468]	; (800a470 <DisplayGui_Old2+0x548>)
 800a29c:	f012 fd18 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 800a2a0:	69ba      	ldr	r2, [r7, #24]
 800a2a2:	69f9      	ldr	r1, [r7, #28]
 800a2a4:	6978      	ldr	r0, [r7, #20]
 800a2a6:	f013 fc1f 	bl	801dae8 <GUI_DispStringAt>

	// Traction Control "TC" BEGIN

	static uint8_t tractionControl_old = 0;

	GUI_SetColor(GUI_LIGHTGRAY);
 800a2aa:	486f      	ldr	r0, [pc, #444]	; (800a468 <DisplayGui_Old2+0x540>)
 800a2ac:	f012 fd3e 	bl	801cd2c <GUI_SetColor>

	xt = 40;
 800a2b0:	2328      	movs	r3, #40	; 0x28
 800a2b2:	61fb      	str	r3, [r7, #28]
	yt = 98 + GUI_Y_OFFSET;
 800a2b4:	2372      	movs	r3, #114	; 0x72
 800a2b6:	61bb      	str	r3, [r7, #24]
	string = "TC";
 800a2b8:	4b6e      	ldr	r3, [pc, #440]	; (800a474 <DisplayGui_Old2+0x54c>)
 800a2ba:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font32_1);
 800a2bc:	486e      	ldr	r0, [pc, #440]	; (800a478 <DisplayGui_Old2+0x550>)
 800a2be:	f012 fd07 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 800a2c2:	69ba      	ldr	r2, [r7, #24]
 800a2c4:	69f9      	ldr	r1, [r7, #28]
 800a2c6:	6978      	ldr	r0, [r7, #20]
 800a2c8:	f013 fc0e 	bl	801dae8 <GUI_DispStringAt>


	xt += 40;
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	3328      	adds	r3, #40	; 0x28
 800a2d0:	61fb      	str	r3, [r7, #28]

	if(tractionControl != tractionControl_old)
 800a2d2:	4b6a      	ldr	r3, [pc, #424]	; (800a47c <DisplayGui_Old2+0x554>)
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	4b69      	ldr	r3, [pc, #420]	; (800a480 <DisplayGui_Old2+0x558>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d00b      	beq.n	800a2f8 <DisplayGui_Old2+0x3d0>
	{
		GUI_SetColor(GUI_BLACK);
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	f012 fd23 	bl	801cd2c <GUI_SetColor>
		GUI_FillRect(xt, yt, xt + 58, yt + 28);
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	f103 023a 	add.w	r2, r3, #58	; 0x3a
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	331c      	adds	r3, #28
 800a2f0:	69b9      	ldr	r1, [r7, #24]
 800a2f2:	69f8      	ldr	r0, [r7, #28]
 800a2f4:	f012 fe24 	bl	801cf40 <GUI_FillRect>
	}

	tractionControl_old = tractionControl;
 800a2f8:	4b61      	ldr	r3, [pc, #388]	; (800a480 <DisplayGui_Old2+0x558>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	4b5f      	ldr	r3, [pc, #380]	; (800a47c <DisplayGui_Old2+0x554>)
 800a300:	701a      	strb	r2, [r3, #0]

	GUI_SetFont(&GUI_Font32B_1);
 800a302:	4860      	ldr	r0, [pc, #384]	; (800a484 <DisplayGui_Old2+0x55c>)
 800a304:	f012 fce4 	bl	801ccd0 <GUI_SetFont>
	GUI_SetColor(GUI_WHITE);
 800a308:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a30c:	f012 fd0e 	bl	801cd2c <GUI_SetColor>

	switch(tractionControl)
 800a310:	4b5b      	ldr	r3, [pc, #364]	; (800a480 <DisplayGui_Old2+0x558>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b04      	cmp	r3, #4
 800a316:	d82b      	bhi.n	800a370 <DisplayGui_Old2+0x448>
 800a318:	a201      	add	r2, pc, #4	; (adr r2, 800a320 <DisplayGui_Old2+0x3f8>)
 800a31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31e:	bf00      	nop
 800a320:	0800a335 	.word	0x0800a335
 800a324:	0800a341 	.word	0x0800a341
 800a328:	0800a34d 	.word	0x0800a34d
 800a32c:	0800a359 	.word	0x0800a359
 800a330:	0800a365 	.word	0x0800a365
	{
		case 0:
			string = "OFF";
 800a334:	4b54      	ldr	r3, [pc, #336]	; (800a488 <DisplayGui_Old2+0x560>)
 800a336:	617b      	str	r3, [r7, #20]
			GUI_SetFont(&GUI_Font32_1);
 800a338:	484f      	ldr	r0, [pc, #316]	; (800a478 <DisplayGui_Old2+0x550>)
 800a33a:	f012 fcc9 	bl	801ccd0 <GUI_SetFont>
			break;
 800a33e:	e01f      	b.n	800a380 <DisplayGui_Old2+0x458>

		case 1:
			string = "1";
 800a340:	4b52      	ldr	r3, [pc, #328]	; (800a48c <DisplayGui_Old2+0x564>)
 800a342:	617b      	str	r3, [r7, #20]
			xt+=18;
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	3312      	adds	r3, #18
 800a348:	61fb      	str	r3, [r7, #28]
			break;
 800a34a:	e019      	b.n	800a380 <DisplayGui_Old2+0x458>

		case 2:
			string = "2";
 800a34c:	4b50      	ldr	r3, [pc, #320]	; (800a490 <DisplayGui_Old2+0x568>)
 800a34e:	617b      	str	r3, [r7, #20]
			xt+=18;
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	3312      	adds	r3, #18
 800a354:	61fb      	str	r3, [r7, #28]
			break;
 800a356:	e013      	b.n	800a380 <DisplayGui_Old2+0x458>

		case 3:
			string = "3";
 800a358:	4b4e      	ldr	r3, [pc, #312]	; (800a494 <DisplayGui_Old2+0x56c>)
 800a35a:	617b      	str	r3, [r7, #20]
			xt+=18;
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	3312      	adds	r3, #18
 800a360:	61fb      	str	r3, [r7, #28]
			break;
 800a362:	e00d      	b.n	800a380 <DisplayGui_Old2+0x458>

		case 4:
			string = "4";
 800a364:	4b4c      	ldr	r3, [pc, #304]	; (800a498 <DisplayGui_Old2+0x570>)
 800a366:	617b      	str	r3, [r7, #20]
			xt+=18;
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	3312      	adds	r3, #18
 800a36c:	61fb      	str	r3, [r7, #28]
			break;
 800a36e:	e007      	b.n	800a380 <DisplayGui_Old2+0x458>

		default:
			GUI_SetColor(GUI_RED);
 800a370:	20ff      	movs	r0, #255	; 0xff
 800a372:	f012 fcdb 	bl	801cd2c <GUI_SetColor>
			string = "ERR";
 800a376:	4b49      	ldr	r3, [pc, #292]	; (800a49c <DisplayGui_Old2+0x574>)
 800a378:	617b      	str	r3, [r7, #20]
			GUI_SetFont(&GUI_Font32_1);
 800a37a:	483f      	ldr	r0, [pc, #252]	; (800a478 <DisplayGui_Old2+0x550>)
 800a37c:	f012 fca8 	bl	801ccd0 <GUI_SetFont>
	}

	GUI_DispStringAt(string, xt, yt);
 800a380:	69ba      	ldr	r2, [r7, #24]
 800a382:	69f9      	ldr	r1, [r7, #28]
 800a384:	6978      	ldr	r0, [r7, #20]
 800a386:	f013 fbaf 	bl	801dae8 <GUI_DispStringAt>

	GUI_SetColor(GUI_LIGHTGRAY);
 800a38a:	4837      	ldr	r0, [pc, #220]	; (800a468 <DisplayGui_Old2+0x540>)
 800a38c:	f012 fcce 	bl	801cd2c <GUI_SetColor>

	y = 94 + GUI_Y_OFFSET;
 800a390:	236e      	movs	r3, #110	; 0x6e
 800a392:	607b      	str	r3, [r7, #4]
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY) * rectAAfactor, rectRadius * rectAAfactor);
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	4613      	mov	r3, r2
 800a398:	005b      	lsls	r3, r3, #1
 800a39a:	4413      	add	r3, r2
 800a39c:	005b      	lsls	r3, r3, #1
 800a39e:	4618      	mov	r0, r3
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	005b      	lsls	r3, r3, #1
 800a3a6:	4413      	add	r3, r2
 800a3a8:	005b      	lsls	r3, r3, #1
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	005b      	lsls	r3, r3, #1
 800a3b6:	4413      	add	r3, r2
 800a3b8:	005b      	lsls	r3, r3, #1
 800a3ba:	461c      	mov	r4, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	005b      	lsls	r3, r3, #1
 800a3c6:	4413      	add	r3, r2
 800a3c8:	005b      	lsls	r3, r3, #1
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	2348      	movs	r3, #72	; 0x48
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	4622      	mov	r2, r4
 800a3d4:	f014 ffe2 	bl	801f39c <GUI_AA_DrawRoundedRect>

	//static uint8_t p0_value_old = 0;

	static GUI_DrawNumAtTypeDef tOilPRESSURE;

	if(tOilPRESSURE.number <= pOil_MIN_VALUE && rpm >= 1000)
 800a3d8:	4b31      	ldr	r3, [pc, #196]	; (800a4a0 <DisplayGui_Old2+0x578>)
 800a3da:	ed93 7b00 	vldr	d7, [r3]
 800a3de:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a3e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ea:	d863      	bhi.n	800a4b4 <DisplayGui_Old2+0x58c>
 800a3ec:	4b2d      	ldr	r3, [pc, #180]	; (800a4a4 <DisplayGui_Old2+0x57c>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3f4:	db5e      	blt.n	800a4b4 <DisplayGui_Old2+0x58c>
	{
		static uint32_t millis_blink = 0;
		static uint8_t color_flag = 0;

		if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag == 0)
 800a3f6:	4b2c      	ldr	r3, [pc, #176]	; (800a4a8 <DisplayGui_Old2+0x580>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800a3fe:	4b2b      	ldr	r3, [pc, #172]	; (800a4ac <DisplayGui_Old2+0x584>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	429a      	cmp	r2, r3
 800a404:	d20b      	bcs.n	800a41e <DisplayGui_Old2+0x4f6>
 800a406:	4b2a      	ldr	r3, [pc, #168]	; (800a4b0 <DisplayGui_Old2+0x588>)
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d107      	bne.n	800a41e <DisplayGui_Old2+0x4f6>
		{
			color_flag = 1;
 800a40e:	4b28      	ldr	r3, [pc, #160]	; (800a4b0 <DisplayGui_Old2+0x588>)
 800a410:	2201      	movs	r2, #1
 800a412:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 800a414:	4b25      	ldr	r3, [pc, #148]	; (800a4ac <DisplayGui_Old2+0x584>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a23      	ldr	r2, [pc, #140]	; (800a4a8 <DisplayGui_Old2+0x580>)
 800a41a:	6013      	str	r3, [r2, #0]
 800a41c:	e012      	b.n	800a444 <DisplayGui_Old2+0x51c>
		}
		else if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag != 0)
 800a41e:	4b22      	ldr	r3, [pc, #136]	; (800a4a8 <DisplayGui_Old2+0x580>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800a426:	4b21      	ldr	r3, [pc, #132]	; (800a4ac <DisplayGui_Old2+0x584>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d20a      	bcs.n	800a444 <DisplayGui_Old2+0x51c>
 800a42e:	4b20      	ldr	r3, [pc, #128]	; (800a4b0 <DisplayGui_Old2+0x588>)
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d006      	beq.n	800a444 <DisplayGui_Old2+0x51c>
		{
			color_flag = 0;
 800a436:	4b1e      	ldr	r3, [pc, #120]	; (800a4b0 <DisplayGui_Old2+0x588>)
 800a438:	2200      	movs	r2, #0
 800a43a:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 800a43c:	4b1b      	ldr	r3, [pc, #108]	; (800a4ac <DisplayGui_Old2+0x584>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a19      	ldr	r2, [pc, #100]	; (800a4a8 <DisplayGui_Old2+0x580>)
 800a442:	6013      	str	r3, [r2, #0]
		}

		if(color_flag == 1)
 800a444:	4b1a      	ldr	r3, [pc, #104]	; (800a4b0 <DisplayGui_Old2+0x588>)
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d103      	bne.n	800a454 <DisplayGui_Old2+0x52c>
		{
			GUI_SetColor(GUI_RED);
 800a44c:	20ff      	movs	r0, #255	; 0xff
 800a44e:	f012 fc6d 	bl	801cd2c <GUI_SetColor>
	{
 800a452:	e032      	b.n	800a4ba <DisplayGui_Old2+0x592>
		}
		else
		{
			GUI_SetColor(GUI_WHITE);
 800a454:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a458:	f012 fc68 	bl	801cd2c <GUI_SetColor>
	{
 800a45c:	e02d      	b.n	800a4ba <DisplayGui_Old2+0x592>
 800a45e:	bf00      	nop
 800a460:	cccccccd 	.word	0xcccccccd
 800a464:	3ff4cccc 	.word	0x3ff4cccc
 800a468:	00d3d3d3 	.word	0x00d3d3d3
 800a46c:	080224c8 	.word	0x080224c8
 800a470:	0812b6c8 	.word	0x0812b6c8
 800a474:	080224d0 	.word	0x080224d0
 800a478:	081249a8 	.word	0x081249a8
 800a47c:	200051c5 	.word	0x200051c5
 800a480:	20002d40 	.word	0x20002d40
 800a484:	08127b30 	.word	0x08127b30
 800a488:	080224d4 	.word	0x080224d4
 800a48c:	080224d8 	.word	0x080224d8
 800a490:	080224dc 	.word	0x080224dc
 800a494:	080224e0 	.word	0x080224e0
 800a498:	080224e4 	.word	0x080224e4
 800a49c:	080224e8 	.word	0x080224e8
 800a4a0:	200051c8 	.word	0x200051c8
 800a4a4:	20000020 	.word	0x20000020
 800a4a8:	200051e0 	.word	0x200051e0
 800a4ac:	20006a98 	.word	0x20006a98
 800a4b0:	200051e4 	.word	0x200051e4
		}
	}
	else
	{
		GUI_SetColor(GUI_LIGHTGRAY);
 800a4b4:	48a0      	ldr	r0, [pc, #640]	; (800a738 <DisplayGui_Old2+0x810>)
 800a4b6:	f012 fc39 	bl	801cd2c <GUI_SetColor>
	}


	//GUI_SetColor(GUI_LIGHTGRAY);

	xt = 30;
 800a4ba:	231e      	movs	r3, #30
 800a4bc:	61fb      	str	r3, [r7, #28]
	yt = 158 + GUI_Y_OFFSET;
 800a4be:	23ae      	movs	r3, #174	; 0xae
 800a4c0:	61bb      	str	r3, [r7, #24]
	string = "Poil";
 800a4c2:	4b9e      	ldr	r3, [pc, #632]	; (800a73c <DisplayGui_Old2+0x814>)
 800a4c4:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font32_1);
 800a4c6:	489e      	ldr	r0, [pc, #632]	; (800a740 <DisplayGui_Old2+0x818>)
 800a4c8:	f012 fc02 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 800a4cc:	69ba      	ldr	r2, [r7, #24]
 800a4ce:	69f9      	ldr	r1, [r7, #28]
 800a4d0:	6978      	ldr	r0, [r7, #20]
 800a4d2:	f013 fb09 	bl	801dae8 <GUI_DispStringAt>
	}
*/
	//p0_value_old = p0_value;

	//static GUI_DrawNumAtTypeDef tOilPRESSURE;
	tOilPRESSURE.number = pOil;
 800a4d6:	4b9b      	ldr	r3, [pc, #620]	; (800a744 <DisplayGui_Old2+0x81c>)
 800a4d8:	edd3 7a00 	vldr	s15, [r3]
 800a4dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a4e0:	4b99      	ldr	r3, [pc, #612]	; (800a748 <DisplayGui_Old2+0x820>)
 800a4e2:	ed83 7b00 	vstr	d7, [r3]

	xt += 76;
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	334c      	adds	r3, #76	; 0x4c
 800a4ea:	61fb      	str	r3, [r7, #28]
	//yt += 2;

	a = "";
 800a4ec:	4b97      	ldr	r3, [pc, #604]	; (800a74c <DisplayGui_Old2+0x824>)
 800a4ee:	613b      	str	r3, [r7, #16]
	b = "";
 800a4f0:	4b96      	ldr	r3, [pc, #600]	; (800a74c <DisplayGui_Old2+0x824>)
 800a4f2:	60fb      	str	r3, [r7, #12]

	GUI_DrawNumAt(xt, yt, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &tOilPRESSURE, 3, 1, DISABLE, DISABLE, CENTER, a, b);
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	b218      	sxth	r0, r3
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	b219      	sxth	r1, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	9308      	str	r3, [sp, #32]
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	9307      	str	r3, [sp, #28]
 800a504:	2302      	movs	r3, #2
 800a506:	9306      	str	r3, [sp, #24]
 800a508:	2300      	movs	r3, #0
 800a50a:	9305      	str	r3, [sp, #20]
 800a50c:	2300      	movs	r3, #0
 800a50e:	9304      	str	r3, [sp, #16]
 800a510:	2301      	movs	r3, #1
 800a512:	9303      	str	r3, [sp, #12]
 800a514:	2303      	movs	r3, #3
 800a516:	9302      	str	r3, [sp, #8]
 800a518:	4b8b      	ldr	r3, [pc, #556]	; (800a748 <DisplayGui_Old2+0x820>)
 800a51a:	9301      	str	r3, [sp, #4]
 800a51c:	2300      	movs	r3, #0
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800a524:	4a86      	ldr	r2, [pc, #536]	; (800a740 <DisplayGui_Old2+0x818>)
 800a526:	f00b f9df 	bl	80158e8 <GUI_DrawNumAt>


	if(tOilPRESSURE.number <= pOil_MIN_VALUE && rpm >= 1000)
 800a52a:	4b87      	ldr	r3, [pc, #540]	; (800a748 <DisplayGui_Old2+0x820>)
 800a52c:	ed93 7b00 	vldr	d7, [r3]
 800a530:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a534:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a53c:	d838      	bhi.n	800a5b0 <DisplayGui_Old2+0x688>
 800a53e:	4b84      	ldr	r3, [pc, #528]	; (800a750 <DisplayGui_Old2+0x828>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a546:	db33      	blt.n	800a5b0 <DisplayGui_Old2+0x688>
	{
		static uint32_t millis_blink = 0;
		static uint8_t color_flag = 0;

		if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag == 0)
 800a548:	4b82      	ldr	r3, [pc, #520]	; (800a754 <DisplayGui_Old2+0x82c>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800a550:	4b81      	ldr	r3, [pc, #516]	; (800a758 <DisplayGui_Old2+0x830>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	429a      	cmp	r2, r3
 800a556:	d20b      	bcs.n	800a570 <DisplayGui_Old2+0x648>
 800a558:	4b80      	ldr	r3, [pc, #512]	; (800a75c <DisplayGui_Old2+0x834>)
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d107      	bne.n	800a570 <DisplayGui_Old2+0x648>
		{
			color_flag = 1;
 800a560:	4b7e      	ldr	r3, [pc, #504]	; (800a75c <DisplayGui_Old2+0x834>)
 800a562:	2201      	movs	r2, #1
 800a564:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 800a566:	4b7c      	ldr	r3, [pc, #496]	; (800a758 <DisplayGui_Old2+0x830>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a7a      	ldr	r2, [pc, #488]	; (800a754 <DisplayGui_Old2+0x82c>)
 800a56c:	6013      	str	r3, [r2, #0]
 800a56e:	e012      	b.n	800a596 <DisplayGui_Old2+0x66e>
		}
		else if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag != 0)
 800a570:	4b78      	ldr	r3, [pc, #480]	; (800a754 <DisplayGui_Old2+0x82c>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800a578:	4b77      	ldr	r3, [pc, #476]	; (800a758 <DisplayGui_Old2+0x830>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d20a      	bcs.n	800a596 <DisplayGui_Old2+0x66e>
 800a580:	4b76      	ldr	r3, [pc, #472]	; (800a75c <DisplayGui_Old2+0x834>)
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d006      	beq.n	800a596 <DisplayGui_Old2+0x66e>
		{
			color_flag = 0;
 800a588:	4b74      	ldr	r3, [pc, #464]	; (800a75c <DisplayGui_Old2+0x834>)
 800a58a:	2200      	movs	r2, #0
 800a58c:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 800a58e:	4b72      	ldr	r3, [pc, #456]	; (800a758 <DisplayGui_Old2+0x830>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a70      	ldr	r2, [pc, #448]	; (800a754 <DisplayGui_Old2+0x82c>)
 800a594:	6013      	str	r3, [r2, #0]
		}

		if(color_flag == 1)
 800a596:	4b71      	ldr	r3, [pc, #452]	; (800a75c <DisplayGui_Old2+0x834>)
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d103      	bne.n	800a5a6 <DisplayGui_Old2+0x67e>
		{
			GUI_SetColor(GUI_RED);
 800a59e:	20ff      	movs	r0, #255	; 0xff
 800a5a0:	f012 fbc4 	bl	801cd2c <GUI_SetColor>
	{
 800a5a4:	e007      	b.n	800a5b6 <DisplayGui_Old2+0x68e>
		}
		else
		{
			GUI_SetColor(GUI_WHITE);
 800a5a6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a5aa:	f012 fbbf 	bl	801cd2c <GUI_SetColor>
	{
 800a5ae:	e002      	b.n	800a5b6 <DisplayGui_Old2+0x68e>
		}
	}
	else
	{
		GUI_SetColor(GUI_LIGHTGRAY);
 800a5b0:	4861      	ldr	r0, [pc, #388]	; (800a738 <DisplayGui_Old2+0x810>)
 800a5b2:	f012 fbbb 	bl	801cd2c <GUI_SetColor>
	}

	//GUI_SetColor(GUI_LIGHTGRAY);

	y = 154 + GUI_Y_OFFSET;
 800a5b6:	23aa      	movs	r3, #170	; 0xaa
 800a5b8:	607b      	str	r3, [r7, #4]
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY) * rectAAfactor, rectRadius * rectAAfactor);
 800a5ba:	68ba      	ldr	r2, [r7, #8]
 800a5bc:	4613      	mov	r3, r2
 800a5be:	005b      	lsls	r3, r3, #1
 800a5c0:	4413      	add	r3, r2
 800a5c2:	005b      	lsls	r3, r3, #1
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	005b      	lsls	r3, r3, #1
 800a5cc:	4413      	add	r3, r2
 800a5ce:	005b      	lsls	r3, r3, #1
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800a5d8:	4613      	mov	r3, r2
 800a5da:	005b      	lsls	r3, r3, #1
 800a5dc:	4413      	add	r3, r2
 800a5de:	005b      	lsls	r3, r3, #1
 800a5e0:	461c      	mov	r4, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	005b      	lsls	r3, r3, #1
 800a5ec:	4413      	add	r3, r2
 800a5ee:	005b      	lsls	r3, r3, #1
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	2348      	movs	r3, #72	; 0x48
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	f014 fecf 	bl	801f39c <GUI_AA_DrawRoundedRect>


	// V BAT BEGIN

	static GUI_DrawNumAtTypeDef vBatDispData = {0};
	vBatDispData.number = vBat;
 800a5fe:	4b58      	ldr	r3, [pc, #352]	; (800a760 <DisplayGui_Old2+0x838>)
 800a600:	edd3 7a00 	vldr	s15, [r3]
 800a604:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a608:	4b56      	ldr	r3, [pc, #344]	; (800a764 <DisplayGui_Old2+0x83c>)
 800a60a:	ed83 7b00 	vstr	d7, [r3]

	if(vBatDispData.number <= vBat_MIN_VALUE)
 800a60e:	4b55      	ldr	r3, [pc, #340]	; (800a764 <DisplayGui_Old2+0x83c>)
 800a610:	ed93 7b00 	vldr	d7, [r3]
 800a614:	ed9f 6b46 	vldr	d6, [pc, #280]	; 800a730 <DisplayGui_Old2+0x808>
 800a618:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a61c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a620:	d832      	bhi.n	800a688 <DisplayGui_Old2+0x760>
	{
		static uint32_t millis_blink = 0;
		static uint8_t color_flag = 0;

		if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag == 0)
 800a622:	4b51      	ldr	r3, [pc, #324]	; (800a768 <DisplayGui_Old2+0x840>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800a62a:	4b4b      	ldr	r3, [pc, #300]	; (800a758 <DisplayGui_Old2+0x830>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d20b      	bcs.n	800a64a <DisplayGui_Old2+0x722>
 800a632:	4b4e      	ldr	r3, [pc, #312]	; (800a76c <DisplayGui_Old2+0x844>)
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d107      	bne.n	800a64a <DisplayGui_Old2+0x722>
		{
			color_flag = 1;
 800a63a:	4b4c      	ldr	r3, [pc, #304]	; (800a76c <DisplayGui_Old2+0x844>)
 800a63c:	2201      	movs	r2, #1
 800a63e:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 800a640:	4b45      	ldr	r3, [pc, #276]	; (800a758 <DisplayGui_Old2+0x830>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a48      	ldr	r2, [pc, #288]	; (800a768 <DisplayGui_Old2+0x840>)
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	e012      	b.n	800a670 <DisplayGui_Old2+0x748>
		}
		else if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag != 0)
 800a64a:	4b47      	ldr	r3, [pc, #284]	; (800a768 <DisplayGui_Old2+0x840>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800a652:	4b41      	ldr	r3, [pc, #260]	; (800a758 <DisplayGui_Old2+0x830>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	429a      	cmp	r2, r3
 800a658:	d20a      	bcs.n	800a670 <DisplayGui_Old2+0x748>
 800a65a:	4b44      	ldr	r3, [pc, #272]	; (800a76c <DisplayGui_Old2+0x844>)
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d006      	beq.n	800a670 <DisplayGui_Old2+0x748>
		{
			color_flag = 0;
 800a662:	4b42      	ldr	r3, [pc, #264]	; (800a76c <DisplayGui_Old2+0x844>)
 800a664:	2200      	movs	r2, #0
 800a666:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 800a668:	4b3b      	ldr	r3, [pc, #236]	; (800a758 <DisplayGui_Old2+0x830>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a3e      	ldr	r2, [pc, #248]	; (800a768 <DisplayGui_Old2+0x840>)
 800a66e:	6013      	str	r3, [r2, #0]
		}

		if(color_flag == 1)
 800a670:	4b3e      	ldr	r3, [pc, #248]	; (800a76c <DisplayGui_Old2+0x844>)
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d103      	bne.n	800a680 <DisplayGui_Old2+0x758>
		{
			GUI_SetColor(GUI_RED);
 800a678:	20ff      	movs	r0, #255	; 0xff
 800a67a:	f012 fb57 	bl	801cd2c <GUI_SetColor>
 800a67e:	e006      	b.n	800a68e <DisplayGui_Old2+0x766>
		}
		else
		{
			GUI_SetColor(GUI_LIGHTBLUE);
 800a680:	483b      	ldr	r0, [pc, #236]	; (800a770 <DisplayGui_Old2+0x848>)
 800a682:	f012 fb53 	bl	801cd2c <GUI_SetColor>
 800a686:	e002      	b.n	800a68e <DisplayGui_Old2+0x766>
		}
	}
	else
	{
		GUI_SetColor(GUI_LIGHTBLUE);
 800a688:	4839      	ldr	r0, [pc, #228]	; (800a770 <DisplayGui_Old2+0x848>)
 800a68a:	f012 fb4f 	bl	801cd2c <GUI_SetColor>
	}

	xt = 54;
 800a68e:	2336      	movs	r3, #54	; 0x36
 800a690:	61fb      	str	r3, [r7, #28]
	yt = 221 + GUI_Y_OFFSET;
 800a692:	23ed      	movs	r3, #237	; 0xed
 800a694:	61bb      	str	r3, [r7, #24]
	string = "V BAT";
 800a696:	4b37      	ldr	r3, [pc, #220]	; (800a774 <DisplayGui_Old2+0x84c>)
 800a698:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font16_1);
 800a69a:	4837      	ldr	r0, [pc, #220]	; (800a778 <DisplayGui_Old2+0x850>)
 800a69c:	f012 fb18 	bl	801ccd0 <GUI_SetFont>
	GUI_SetColor(GUI_LIGHTBLUE);
 800a6a0:	4833      	ldr	r0, [pc, #204]	; (800a770 <DisplayGui_Old2+0x848>)
 800a6a2:	f012 fb43 	bl	801cd2c <GUI_SetColor>
	GUI_DispStringAt(string, xt, yt);
 800a6a6:	69ba      	ldr	r2, [r7, #24]
 800a6a8:	69f9      	ldr	r1, [r7, #28]
 800a6aa:	6978      	ldr	r0, [r7, #20]
 800a6ac:	f013 fa1c 	bl	801dae8 <GUI_DispStringAt>


	xt += 60;
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	333c      	adds	r3, #60	; 0x3c
 800a6b4:	61fb      	str	r3, [r7, #28]
	yt -= 2;
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	3b02      	subs	r3, #2
 800a6ba:	61bb      	str	r3, [r7, #24]

	GUI_DrawNumAt(xt, yt, &GUI_Font20_1, GUI_LIGHTGRAY, GUI_BLACK, &vBatDispData, 2, 1, DISABLE, DISABLE, CENTER, a, b);
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	b218      	sxth	r0, r3
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	b219      	sxth	r1, r3
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	9308      	str	r3, [sp, #32]
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	9307      	str	r3, [sp, #28]
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	9306      	str	r3, [sp, #24]
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	9305      	str	r3, [sp, #20]
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	9304      	str	r3, [sp, #16]
 800a6d8:	2301      	movs	r3, #1
 800a6da:	9303      	str	r3, [sp, #12]
 800a6dc:	2302      	movs	r3, #2
 800a6de:	9302      	str	r3, [sp, #8]
 800a6e0:	4b20      	ldr	r3, [pc, #128]	; (800a764 <DisplayGui_Old2+0x83c>)
 800a6e2:	9301      	str	r3, [sp, #4]
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	4b13      	ldr	r3, [pc, #76]	; (800a738 <DisplayGui_Old2+0x810>)
 800a6ea:	4a24      	ldr	r2, [pc, #144]	; (800a77c <DisplayGui_Old2+0x854>)
 800a6ec:	f00b f8fc 	bl	80158e8 <GUI_DrawNumAt>

	if(vBatDispData.number <= vBat_MIN_VALUE)
 800a6f0:	4b1c      	ldr	r3, [pc, #112]	; (800a764 <DisplayGui_Old2+0x83c>)
 800a6f2:	ed93 7b00 	vldr	d7, [r3]
 800a6f6:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 800a730 <DisplayGui_Old2+0x808>
 800a6fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a702:	d860      	bhi.n	800a7c6 <DisplayGui_Old2+0x89e>
	{
		static uint32_t millis_blink = 0;
		static uint8_t color_flag = 0;

		if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag == 0)
 800a704:	4b1e      	ldr	r3, [pc, #120]	; (800a780 <DisplayGui_Old2+0x858>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800a70c:	4b12      	ldr	r3, [pc, #72]	; (800a758 <DisplayGui_Old2+0x830>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	429a      	cmp	r2, r3
 800a712:	d239      	bcs.n	800a788 <DisplayGui_Old2+0x860>
 800a714:	4b1b      	ldr	r3, [pc, #108]	; (800a784 <DisplayGui_Old2+0x85c>)
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d135      	bne.n	800a788 <DisplayGui_Old2+0x860>
		{
			color_flag = 1;
 800a71c:	4b19      	ldr	r3, [pc, #100]	; (800a784 <DisplayGui_Old2+0x85c>)
 800a71e:	2201      	movs	r2, #1
 800a720:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 800a722:	4b0d      	ldr	r3, [pc, #52]	; (800a758 <DisplayGui_Old2+0x830>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a16      	ldr	r2, [pc, #88]	; (800a780 <DisplayGui_Old2+0x858>)
 800a728:	6013      	str	r3, [r2, #0]
 800a72a:	e040      	b.n	800a7ae <DisplayGui_Old2+0x886>
 800a72c:	f3af 8000 	nop.w
 800a730:	40000000 	.word	0x40000000
 800a734:	40273333 	.word	0x40273333
 800a738:	00d3d3d3 	.word	0x00d3d3d3
 800a73c:	080224ec 	.word	0x080224ec
 800a740:	081249a8 	.word	0x081249a8
 800a744:	2000001c 	.word	0x2000001c
 800a748:	200051c8 	.word	0x200051c8
 800a74c:	080224c0 	.word	0x080224c0
 800a750:	20000020 	.word	0x20000020
 800a754:	200051e8 	.word	0x200051e8
 800a758:	20006a98 	.word	0x20006a98
 800a75c:	200051ec 	.word	0x200051ec
 800a760:	20000008 	.word	0x20000008
 800a764:	200051f0 	.word	0x200051f0
 800a768:	20005208 	.word	0x20005208
 800a76c:	2000520c 	.word	0x2000520c
 800a770:	00ff8080 	.word	0x00ff8080
 800a774:	080224f4 	.word	0x080224f4
 800a778:	0812d360 	.word	0x0812d360
 800a77c:	0812b6c8 	.word	0x0812b6c8
 800a780:	20005210 	.word	0x20005210
 800a784:	20005214 	.word	0x20005214
		}
		else if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag != 0)
 800a788:	4bab      	ldr	r3, [pc, #684]	; (800aa38 <DisplayGui_Old2+0xb10>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800a790:	4baa      	ldr	r3, [pc, #680]	; (800aa3c <DisplayGui_Old2+0xb14>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	429a      	cmp	r2, r3
 800a796:	d20a      	bcs.n	800a7ae <DisplayGui_Old2+0x886>
 800a798:	4ba9      	ldr	r3, [pc, #676]	; (800aa40 <DisplayGui_Old2+0xb18>)
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d006      	beq.n	800a7ae <DisplayGui_Old2+0x886>
		{
			color_flag = 0;
 800a7a0:	4ba7      	ldr	r3, [pc, #668]	; (800aa40 <DisplayGui_Old2+0xb18>)
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 800a7a6:	4ba5      	ldr	r3, [pc, #660]	; (800aa3c <DisplayGui_Old2+0xb14>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4aa3      	ldr	r2, [pc, #652]	; (800aa38 <DisplayGui_Old2+0xb10>)
 800a7ac:	6013      	str	r3, [r2, #0]
		}

		if(color_flag == 1)
 800a7ae:	4ba4      	ldr	r3, [pc, #656]	; (800aa40 <DisplayGui_Old2+0xb18>)
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d103      	bne.n	800a7be <DisplayGui_Old2+0x896>
		{
			GUI_SetColor(GUI_RED);
 800a7b6:	20ff      	movs	r0, #255	; 0xff
 800a7b8:	f012 fab8 	bl	801cd2c <GUI_SetColor>
 800a7bc:	e006      	b.n	800a7cc <DisplayGui_Old2+0x8a4>
		}
		else
		{
			GUI_SetColor(GUI_LIGHTBLUE);
 800a7be:	48a1      	ldr	r0, [pc, #644]	; (800aa44 <DisplayGui_Old2+0xb1c>)
 800a7c0:	f012 fab4 	bl	801cd2c <GUI_SetColor>
 800a7c4:	e002      	b.n	800a7cc <DisplayGui_Old2+0x8a4>
		}
	}
	else
	{
		GUI_SetColor(GUI_LIGHTBLUE);
 800a7c6:	489f      	ldr	r0, [pc, #636]	; (800aa44 <DisplayGui_Old2+0xb1c>)
 800a7c8:	f012 fab0 	bl	801cd2c <GUI_SetColor>
	}

	y = 214 + GUI_Y_OFFSET;
 800a7cc:	23e6      	movs	r3, #230	; 0xe6
 800a7ce:	607b      	str	r3, [r7, #4]
	//GUI_SetColor(GUI_LIGHTBLUE);
	GUI_AA_DrawRoundedRect((x + 24) * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY - 10) * rectAAfactor, rectRadius * rectAAfactor);
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	f103 0218 	add.w	r2, r3, #24
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	005b      	lsls	r3, r3, #1
 800a7da:	4413      	add	r3, r2
 800a7dc:	005b      	lsls	r3, r3, #1
 800a7de:	4618      	mov	r0, r3
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	005b      	lsls	r3, r3, #1
 800a7e6:	4413      	add	r3, r2
 800a7e8:	005b      	lsls	r3, r3, #1
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	4413      	add	r3, r2
 800a7f8:	005b      	lsls	r3, r3, #1
 800a7fa:	461c      	mov	r4, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f103 021e 	add.w	r2, r3, #30
 800a802:	4613      	mov	r3, r2
 800a804:	005b      	lsls	r3, r3, #1
 800a806:	4413      	add	r3, r2
 800a808:	005b      	lsls	r3, r3, #1
 800a80a:	461a      	mov	r2, r3
 800a80c:	2348      	movs	r3, #72	; 0x48
 800a80e:	9300      	str	r3, [sp, #0]
 800a810:	4613      	mov	r3, r2
 800a812:	4622      	mov	r2, r4
 800a814:	f014 fdc2 	bl	801f39c <GUI_AA_DrawRoundedRect>

	// left rects BEGIN

	// Oil Temparature BEGIN

	GUI_SetColor(GUI_WHITE);
 800a818:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a81c:	f012 fa86 	bl	801cd2c <GUI_SetColor>

	xt = (480 - rectSizeX) + 65;
 800a820:	f240 13a9 	movw	r3, #425	; 0x1a9
 800a824:	61fb      	str	r3, [r7, #28]
	yt = 21 + 25 + GUI_Y_OFFSET;
 800a826:	233e      	movs	r3, #62	; 0x3e
 800a828:	61bb      	str	r3, [r7, #24]

	string = " C";
 800a82a:	4b87      	ldr	r3, [pc, #540]	; (800aa48 <DisplayGui_Old2+0xb20>)
 800a82c:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font32_1);
 800a82e:	4887      	ldr	r0, [pc, #540]	; (800aa4c <DisplayGui_Old2+0xb24>)
 800a830:	f012 fa4e 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt - 4, yt - 10);
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	1f19      	subs	r1, r3, #4
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	3b0a      	subs	r3, #10
 800a83c:	461a      	mov	r2, r3
 800a83e:	6978      	ldr	r0, [r7, #20]
 800a840:	f013 f952 	bl	801dae8 <GUI_DispStringAt>


	static GUI_DrawNumAtTypeDef tOilTEMP;
	tOilTEMP.number = tOil;
 800a844:	4b82      	ldr	r3, [pc, #520]	; (800aa50 <DisplayGui_Old2+0xb28>)
 800a846:	edd3 7a00 	vldr	s15, [r3]
 800a84a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a84e:	4b81      	ldr	r3, [pc, #516]	; (800aa54 <DisplayGui_Old2+0xb2c>)
 800a850:	ed83 7b00 	vstr	d7, [r3]

	//GUI_DrawNumAt(xt - 10, yt - 10, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &tWaterTEMP, 3, 1, DISABLE, DISABLE, RIGHT, a, b);
	GUI_DrawNumAt(xt - 40, yt - 10, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &tOilTEMP, 3, 1, DISABLE, DISABLE, CENTER, a, b);
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	b29b      	uxth	r3, r3
 800a858:	3b28      	subs	r3, #40	; 0x28
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	b218      	sxth	r0, r3
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	b29b      	uxth	r3, r3
 800a862:	3b0a      	subs	r3, #10
 800a864:	b29b      	uxth	r3, r3
 800a866:	b219      	sxth	r1, r3
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	9308      	str	r3, [sp, #32]
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	9307      	str	r3, [sp, #28]
 800a870:	2302      	movs	r3, #2
 800a872:	9306      	str	r3, [sp, #24]
 800a874:	2300      	movs	r3, #0
 800a876:	9305      	str	r3, [sp, #20]
 800a878:	2300      	movs	r3, #0
 800a87a:	9304      	str	r3, [sp, #16]
 800a87c:	2301      	movs	r3, #1
 800a87e:	9303      	str	r3, [sp, #12]
 800a880:	2303      	movs	r3, #3
 800a882:	9302      	str	r3, [sp, #8]
 800a884:	4b73      	ldr	r3, [pc, #460]	; (800aa54 <DisplayGui_Old2+0xb2c>)
 800a886:	9301      	str	r3, [sp, #4]
 800a888:	2300      	movs	r3, #0
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800a890:	4a6e      	ldr	r2, [pc, #440]	; (800aa4c <DisplayGui_Old2+0xb24>)
 800a892:	f00b f829 	bl	80158e8 <GUI_DrawNumAt>

	GUI_DrawCircle(xt, yt, 3);
 800a896:	2203      	movs	r2, #3
 800a898:	69b9      	ldr	r1, [r7, #24]
 800a89a:	69f8      	ldr	r0, [r7, #28]
 800a89c:	f013 fbfe 	bl	801e09c <GUI_DrawCircle>

	if(tOilTEMP.number >= tOil_MAX_VALUE)
 800a8a0:	4b6c      	ldr	r3, [pc, #432]	; (800aa54 <DisplayGui_Old2+0xb2c>)
 800a8a2:	ed93 7b00 	vldr	d7, [r3]
 800a8a6:	ed9f 6b60 	vldr	d6, [pc, #384]	; 800aa28 <DisplayGui_Old2+0xb00>
 800a8aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8b2:	db33      	blt.n	800a91c <DisplayGui_Old2+0x9f4>
	{
		static uint32_t millis_blink = 0;
		static uint8_t color_flag = 0;

		if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag == 0)
 800a8b4:	4b68      	ldr	r3, [pc, #416]	; (800aa58 <DisplayGui_Old2+0xb30>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800a8bc:	4b5f      	ldr	r3, [pc, #380]	; (800aa3c <DisplayGui_Old2+0xb14>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d20b      	bcs.n	800a8dc <DisplayGui_Old2+0x9b4>
 800a8c4:	4b65      	ldr	r3, [pc, #404]	; (800aa5c <DisplayGui_Old2+0xb34>)
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d107      	bne.n	800a8dc <DisplayGui_Old2+0x9b4>
		{
			color_flag = 1;
 800a8cc:	4b63      	ldr	r3, [pc, #396]	; (800aa5c <DisplayGui_Old2+0xb34>)
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 800a8d2:	4b5a      	ldr	r3, [pc, #360]	; (800aa3c <DisplayGui_Old2+0xb14>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a60      	ldr	r2, [pc, #384]	; (800aa58 <DisplayGui_Old2+0xb30>)
 800a8d8:	6013      	str	r3, [r2, #0]
 800a8da:	e012      	b.n	800a902 <DisplayGui_Old2+0x9da>
		}
		else if(millis > millis_blink + DISPLAY_GUI_WARNING_BLINK_TIME && color_flag != 0)
 800a8dc:	4b5e      	ldr	r3, [pc, #376]	; (800aa58 <DisplayGui_Old2+0xb30>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800a8e4:	4b55      	ldr	r3, [pc, #340]	; (800aa3c <DisplayGui_Old2+0xb14>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d20a      	bcs.n	800a902 <DisplayGui_Old2+0x9da>
 800a8ec:	4b5b      	ldr	r3, [pc, #364]	; (800aa5c <DisplayGui_Old2+0xb34>)
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d006      	beq.n	800a902 <DisplayGui_Old2+0x9da>
		{
			color_flag = 0;
 800a8f4:	4b59      	ldr	r3, [pc, #356]	; (800aa5c <DisplayGui_Old2+0xb34>)
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	701a      	strb	r2, [r3, #0]

			millis_blink = millis;
 800a8fa:	4b50      	ldr	r3, [pc, #320]	; (800aa3c <DisplayGui_Old2+0xb14>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a56      	ldr	r2, [pc, #344]	; (800aa58 <DisplayGui_Old2+0xb30>)
 800a900:	6013      	str	r3, [r2, #0]
		}

		if(color_flag == 1)
 800a902:	4b56      	ldr	r3, [pc, #344]	; (800aa5c <DisplayGui_Old2+0xb34>)
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	2b01      	cmp	r3, #1
 800a908:	d103      	bne.n	800a912 <DisplayGui_Old2+0x9ea>
		{
			GUI_SetColor(GUI_RED);
 800a90a:	20ff      	movs	r0, #255	; 0xff
 800a90c:	f012 fa0e 	bl	801cd2c <GUI_SetColor>
 800a910:	e007      	b.n	800a922 <DisplayGui_Old2+0x9fa>
		}
		else
		{
			GUI_SetColor(GUI_WHITE);
 800a912:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a916:	f012 fa09 	bl	801cd2c <GUI_SetColor>
 800a91a:	e002      	b.n	800a922 <DisplayGui_Old2+0x9fa>
		}
	}
	else
	{
		GUI_SetColor(GUI_LIGHTGRAY);
 800a91c:	4850      	ldr	r0, [pc, #320]	; (800aa60 <DisplayGui_Old2+0xb38>)
 800a91e:	f012 fa05 	bl	801cd2c <GUI_SetColor>
	}

	xt = (480 - rectSizeX) + 20;
 800a922:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800a926:	61fb      	str	r3, [r7, #28]
	yt = 21 + GUI_Y_OFFSET;
 800a928:	2325      	movs	r3, #37	; 0x25
 800a92a:	61bb      	str	r3, [r7, #24]
	string = "T oil";
 800a92c:	4b4d      	ldr	r3, [pc, #308]	; (800aa64 <DisplayGui_Old2+0xb3c>)
 800a92e:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font20_1);
 800a930:	484d      	ldr	r0, [pc, #308]	; (800aa68 <DisplayGui_Old2+0xb40>)
 800a932:	f012 f9cd 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 800a936:	69ba      	ldr	r2, [r7, #24]
 800a938:	69f9      	ldr	r1, [r7, #28]
 800a93a:	6978      	ldr	r0, [r7, #20]
 800a93c:	f013 f8d4 	bl	801dae8 <GUI_DispStringAt>

	x = (480 - 20) - rectSizeX;
 800a940:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800a944:	60bb      	str	r3, [r7, #8]
	y = 16 + GUI_Y_OFFSET;
 800a946:	2320      	movs	r3, #32
 800a948:	607b      	str	r3, [r7, #4]
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY) * 1.3 * rectAAfactor, rectRadius * rectAAfactor);
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	4613      	mov	r3, r2
 800a94e:	005b      	lsls	r3, r3, #1
 800a950:	4413      	add	r3, r2
 800a952:	005b      	lsls	r3, r3, #1
 800a954:	4618      	mov	r0, r3
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	4613      	mov	r3, r2
 800a95a:	005b      	lsls	r3, r3, #1
 800a95c:	4413      	add	r3, r2
 800a95e:	005b      	lsls	r3, r3, #1
 800a960:	4619      	mov	r1, r3
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800a968:	4613      	mov	r3, r2
 800a96a:	005b      	lsls	r3, r3, #1
 800a96c:	4413      	add	r3, r2
 800a96e:	005b      	lsls	r3, r3, #1
 800a970:	461a      	mov	r2, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	3328      	adds	r3, #40	; 0x28
 800a976:	ee07 3a90 	vmov	s15, r3
 800a97a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a97e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 800aa30 <DisplayGui_Old2+0xb08>
 800a982:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a986:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800a98a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a98e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a992:	2348      	movs	r3, #72	; 0x48
 800a994:	9300      	str	r3, [sp, #0]
 800a996:	ee17 3a90 	vmov	r3, s15
 800a99a:	f014 fcff 	bl	801f39c <GUI_AA_DrawRoundedRect>

	// DRS BEGIN

	static uint8_t drsStatus_old = 0;

	xt = (480 - rectSizeX) - 17;
 800a99e:	f240 1357 	movw	r3, #343	; 0x157
 800a9a2:	61fb      	str	r3, [r7, #28]
	yt = 98 + GUI_Y_OFFSET;
 800a9a4:	2372      	movs	r3, #114	; 0x72
 800a9a6:	61bb      	str	r3, [r7, #24]
	string = "DRS";
 800a9a8:	4b30      	ldr	r3, [pc, #192]	; (800aa6c <DisplayGui_Old2+0xb44>)
 800a9aa:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font32_1);
 800a9ac:	4827      	ldr	r0, [pc, #156]	; (800aa4c <DisplayGui_Old2+0xb24>)
 800a9ae:	f012 f98f 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 800a9b2:	69ba      	ldr	r2, [r7, #24]
 800a9b4:	69f9      	ldr	r1, [r7, #28]
 800a9b6:	6978      	ldr	r0, [r7, #20]
 800a9b8:	f013 f896 	bl	801dae8 <GUI_DispStringAt>

	xt += 60;
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	333c      	adds	r3, #60	; 0x3c
 800a9c0:	61fb      	str	r3, [r7, #28]

	if(drsStatus != drsStatus_old)
 800a9c2:	4b2b      	ldr	r3, [pc, #172]	; (800aa70 <DisplayGui_Old2+0xb48>)
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	4b2a      	ldr	r3, [pc, #168]	; (800aa74 <DisplayGui_Old2+0xb4c>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d00b      	beq.n	800a9e8 <DisplayGui_Old2+0xac0>
	{
		GUI_SetColor(GUI_BLACK);
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	f012 f9ab 	bl	801cd2c <GUI_SetColor>
		GUI_FillRect(xt, yt, xt + 54, yt + 28);
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	f103 0236 	add.w	r2, r3, #54	; 0x36
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	331c      	adds	r3, #28
 800a9e0:	69b9      	ldr	r1, [r7, #24]
 800a9e2:	69f8      	ldr	r0, [r7, #28]
 800a9e4:	f012 faac 	bl	801cf40 <GUI_FillRect>
	}

	drsStatus_old = drsStatus;
 800a9e8:	4b22      	ldr	r3, [pc, #136]	; (800aa74 <DisplayGui_Old2+0xb4c>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	4b20      	ldr	r3, [pc, #128]	; (800aa70 <DisplayGui_Old2+0xb48>)
 800a9f0:	701a      	strb	r2, [r3, #0]

	switch(drsStatus)
 800a9f2:	4b20      	ldr	r3, [pc, #128]	; (800aa74 <DisplayGui_Old2+0xb4c>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d002      	beq.n	800aa00 <DisplayGui_Old2+0xad8>
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d007      	beq.n	800aa0e <DisplayGui_Old2+0xae6>
 800a9fe:	e03f      	b.n	800aa80 <DisplayGui_Old2+0xb58>
	{
		case 0:
			GUI_SetColor(GUI_WHITE);
 800aa00:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800aa04:	f012 f992 	bl	801cd2c <GUI_SetColor>
			string = "OFF";
 800aa08:	4b1b      	ldr	r3, [pc, #108]	; (800aa78 <DisplayGui_Old2+0xb50>)
 800aa0a:	617b      	str	r3, [r7, #20]
			break;
 800aa0c:	e03e      	b.n	800aa8c <DisplayGui_Old2+0xb64>

		case 1:
			GUI_SetColor(GUI_GREEN);
 800aa0e:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 800aa12:	f012 f98b 	bl	801cd2c <GUI_SetColor>
			string = "ON";
 800aa16:	4b19      	ldr	r3, [pc, #100]	; (800aa7c <DisplayGui_Old2+0xb54>)
 800aa18:	617b      	str	r3, [r7, #20]
			xt+=6;
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	3306      	adds	r3, #6
 800aa1e:	61fb      	str	r3, [r7, #28]
			break;
 800aa20:	e034      	b.n	800aa8c <DisplayGui_Old2+0xb64>
 800aa22:	bf00      	nop
 800aa24:	f3af 8000 	nop.w
 800aa28:	00000000 	.word	0x00000000
 800aa2c:	4060e000 	.word	0x4060e000
 800aa30:	cccccccd 	.word	0xcccccccd
 800aa34:	3ff4cccc 	.word	0x3ff4cccc
 800aa38:	20005210 	.word	0x20005210
 800aa3c:	20006a98 	.word	0x20006a98
 800aa40:	20005214 	.word	0x20005214
 800aa44:	00ff8080 	.word	0x00ff8080
 800aa48:	080224c4 	.word	0x080224c4
 800aa4c:	081249a8 	.word	0x081249a8
 800aa50:	2000000c 	.word	0x2000000c
 800aa54:	20005218 	.word	0x20005218
 800aa58:	20005230 	.word	0x20005230
 800aa5c:	20005234 	.word	0x20005234
 800aa60:	00d3d3d3 	.word	0x00d3d3d3
 800aa64:	080224fc 	.word	0x080224fc
 800aa68:	0812b6c8 	.word	0x0812b6c8
 800aa6c:	08022504 	.word	0x08022504
 800aa70:	20005235 	.word	0x20005235
 800aa74:	20002d38 	.word	0x20002d38
 800aa78:	080224d4 	.word	0x080224d4
 800aa7c:	08022508 	.word	0x08022508


		default:
			GUI_SetColor(GUI_RED);
 800aa80:	20ff      	movs	r0, #255	; 0xff
 800aa82:	f012 f953 	bl	801cd2c <GUI_SetColor>
			string = "ERR";
 800aa86:	4b45      	ldr	r3, [pc, #276]	; (800ab9c <DisplayGui_Old2+0xc74>)
 800aa88:	617b      	str	r3, [r7, #20]
			break;
 800aa8a:	bf00      	nop
	}

	GUI_DispStringAt(string, xt, yt);
 800aa8c:	69ba      	ldr	r2, [r7, #24]
 800aa8e:	69f9      	ldr	r1, [r7, #28]
 800aa90:	6978      	ldr	r0, [r7, #20]
 800aa92:	f013 f829 	bl	801dae8 <GUI_DispStringAt>

	if(drsStatus == 1)
 800aa96:	4b42      	ldr	r3, [pc, #264]	; (800aba0 <DisplayGui_Old2+0xc78>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d104      	bne.n	800aaa8 <DisplayGui_Old2+0xb80>
		GUI_SetColor(GUI_GREEN);
 800aa9e:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 800aaa2:	f012 f943 	bl	801cd2c <GUI_SetColor>
 800aaa6:	e002      	b.n	800aaae <DisplayGui_Old2+0xb86>
	else
		GUI_SetColor(GUI_LIGHTGRAY);
 800aaa8:	483e      	ldr	r0, [pc, #248]	; (800aba4 <DisplayGui_Old2+0xc7c>)
 800aaaa:	f012 f93f 	bl	801cd2c <GUI_SetColor>

	y = 94 + GUI_Y_OFFSET;
 800aaae:	236e      	movs	r3, #110	; 0x6e
 800aab0:	607b      	str	r3, [r7, #4]
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY) * rectAAfactor, rectRadius * rectAAfactor);
 800aab2:	68ba      	ldr	r2, [r7, #8]
 800aab4:	4613      	mov	r3, r2
 800aab6:	005b      	lsls	r3, r3, #1
 800aab8:	4413      	add	r3, r2
 800aaba:	005b      	lsls	r3, r3, #1
 800aabc:	4618      	mov	r0, r3
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	4613      	mov	r3, r2
 800aac2:	005b      	lsls	r3, r3, #1
 800aac4:	4413      	add	r3, r2
 800aac6:	005b      	lsls	r3, r3, #1
 800aac8:	4619      	mov	r1, r3
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800aad0:	4613      	mov	r3, r2
 800aad2:	005b      	lsls	r3, r3, #1
 800aad4:	4413      	add	r3, r2
 800aad6:	005b      	lsls	r3, r3, #1
 800aad8:	461c      	mov	r4, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800aae0:	4613      	mov	r3, r2
 800aae2:	005b      	lsls	r3, r3, #1
 800aae4:	4413      	add	r3, r2
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	461a      	mov	r2, r3
 800aaea:	2348      	movs	r3, #72	; 0x48
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	4613      	mov	r3, r2
 800aaf0:	4622      	mov	r2, r4
 800aaf2:	f014 fc53 	bl	801f39c <GUI_AA_DrawRoundedRect>
	// MAP BEGIN

	static uint8_t map_old = 0;


	GUI_SetColor(GUI_LIGHTGRAY);
 800aaf6:	482b      	ldr	r0, [pc, #172]	; (800aba4 <DisplayGui_Old2+0xc7c>)
 800aaf8:	f012 f918 	bl	801cd2c <GUI_SetColor>
	xt = (480 - rectSizeX) - 17;
 800aafc:	f240 1357 	movw	r3, #343	; 0x157
 800ab00:	61fb      	str	r3, [r7, #28]
	yt = 158 + GUI_Y_OFFSET;
 800ab02:	23ae      	movs	r3, #174	; 0xae
 800ab04:	61bb      	str	r3, [r7, #24]
	string = "MAP";
 800ab06:	4b28      	ldr	r3, [pc, #160]	; (800aba8 <DisplayGui_Old2+0xc80>)
 800ab08:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font32_1);
 800ab0a:	4828      	ldr	r0, [pc, #160]	; (800abac <DisplayGui_Old2+0xc84>)
 800ab0c:	f012 f8e0 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 800ab10:	69ba      	ldr	r2, [r7, #24]
 800ab12:	69f9      	ldr	r1, [r7, #28]
 800ab14:	6978      	ldr	r0, [r7, #20]
 800ab16:	f012 ffe7 	bl	801dae8 <GUI_DispStringAt>

	xt += 60;
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	333c      	adds	r3, #60	; 0x3c
 800ab1e:	61fb      	str	r3, [r7, #28]
	yt += 5;
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	3305      	adds	r3, #5
 800ab24:	61bb      	str	r3, [r7, #24]

	if(map != map_old)
 800ab26:	4b22      	ldr	r3, [pc, #136]	; (800abb0 <DisplayGui_Old2+0xc88>)
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	4b21      	ldr	r3, [pc, #132]	; (800abb4 <DisplayGui_Old2+0xc8c>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d00b      	beq.n	800ab4c <DisplayGui_Old2+0xc24>
	{
		GUI_SetColor(GUI_BLACK);
 800ab34:	2000      	movs	r0, #0
 800ab36:	f012 f8f9 	bl	801cd2c <GUI_SetColor>
		GUI_FillRect(xt, yt, xt + 54, yt + 28);
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	f103 0236 	add.w	r2, r3, #54	; 0x36
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	331c      	adds	r3, #28
 800ab44:	69b9      	ldr	r1, [r7, #24]
 800ab46:	69f8      	ldr	r0, [r7, #28]
 800ab48:	f012 f9fa 	bl	801cf40 <GUI_FillRect>
	}

	map_old = map;
 800ab4c:	4b19      	ldr	r3, [pc, #100]	; (800abb4 <DisplayGui_Old2+0xc8c>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	b2da      	uxtb	r2, r3
 800ab52:	4b17      	ldr	r3, [pc, #92]	; (800abb0 <DisplayGui_Old2+0xc88>)
 800ab54:	701a      	strb	r2, [r3, #0]


	GUI_SetColor(GUI_WHITE);
 800ab56:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800ab5a:	f012 f8e7 	bl	801cd2c <GUI_SetColor>
	GUI_SetFont(&GUI_Font24_1);
 800ab5e:	4816      	ldr	r0, [pc, #88]	; (800abb8 <DisplayGui_Old2+0xc90>)
 800ab60:	f012 f8b6 	bl	801ccd0 <GUI_SetFont>

	switch(map)
 800ab64:	4b13      	ldr	r3, [pc, #76]	; (800abb4 <DisplayGui_Old2+0xc8c>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	d82f      	bhi.n	800abcc <DisplayGui_Old2+0xca4>
 800ab6c:	a201      	add	r2, pc, #4	; (adr r2, 800ab74 <DisplayGui_Old2+0xc4c>)
 800ab6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab72:	bf00      	nop
 800ab74:	0800ab85 	.word	0x0800ab85
 800ab78:	0800ab8b 	.word	0x0800ab8b
 800ab7c:	0800ab91 	.word	0x0800ab91
 800ab80:	0800ab97 	.word	0x0800ab97
	{
		case 0:
			string = "BASE";
 800ab84:	4b0d      	ldr	r3, [pc, #52]	; (800abbc <DisplayGui_Old2+0xc94>)
 800ab86:	617b      	str	r3, [r7, #20]
			break;
 800ab88:	e02b      	b.n	800abe2 <DisplayGui_Old2+0xcba>

		case 1:
			string = "MAP1";
 800ab8a:	4b0d      	ldr	r3, [pc, #52]	; (800abc0 <DisplayGui_Old2+0xc98>)
 800ab8c:	617b      	str	r3, [r7, #20]
			break;
 800ab8e:	e028      	b.n	800abe2 <DisplayGui_Old2+0xcba>

		case 2:
			string = "MAP2";
 800ab90:	4b0c      	ldr	r3, [pc, #48]	; (800abc4 <DisplayGui_Old2+0xc9c>)
 800ab92:	617b      	str	r3, [r7, #20]
			break;
 800ab94:	e025      	b.n	800abe2 <DisplayGui_Old2+0xcba>

		case 3:
			string = "MAP3";
 800ab96:	4b0c      	ldr	r3, [pc, #48]	; (800abc8 <DisplayGui_Old2+0xca0>)
 800ab98:	617b      	str	r3, [r7, #20]
			break;
 800ab9a:	e022      	b.n	800abe2 <DisplayGui_Old2+0xcba>
 800ab9c:	080224e8 	.word	0x080224e8
 800aba0:	20002d38 	.word	0x20002d38
 800aba4:	00d3d3d3 	.word	0x00d3d3d3
 800aba8:	0802250c 	.word	0x0802250c
 800abac:	081249a8 	.word	0x081249a8
 800abb0:	20005236 	.word	0x20005236
 800abb4:	20002d3c 	.word	0x20002d3c
 800abb8:	0812a104 	.word	0x0812a104
 800abbc:	08022510 	.word	0x08022510
 800abc0:	08022518 	.word	0x08022518
 800abc4:	08022520 	.word	0x08022520
 800abc8:	08022528 	.word	0x08022528

		default:
			string = "ERR";
 800abcc:	4b9a      	ldr	r3, [pc, #616]	; (800ae38 <DisplayGui_Old2+0xf10>)
 800abce:	617b      	str	r3, [r7, #20]
			GUI_SetColor(GUI_RED);
 800abd0:	20ff      	movs	r0, #255	; 0xff
 800abd2:	f012 f8ab 	bl	801cd2c <GUI_SetColor>
			GUI_SetFont(&GUI_Font32_1);
 800abd6:	4899      	ldr	r0, [pc, #612]	; (800ae3c <DisplayGui_Old2+0xf14>)
 800abd8:	f012 f87a 	bl	801ccd0 <GUI_SetFont>

			yt -= 5;
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	3b05      	subs	r3, #5
 800abe0:	61bb      	str	r3, [r7, #24]
	}


	GUI_DispStringAt(string, xt, yt);
 800abe2:	69ba      	ldr	r2, [r7, #24]
 800abe4:	69f9      	ldr	r1, [r7, #28]
 800abe6:	6978      	ldr	r0, [r7, #20]
 800abe8:	f012 ff7e 	bl	801dae8 <GUI_DispStringAt>

	GUI_SetColor(GUI_LIGHTGRAY);
 800abec:	4894      	ldr	r0, [pc, #592]	; (800ae40 <DisplayGui_Old2+0xf18>)
 800abee:	f012 f89d 	bl	801cd2c <GUI_SetColor>
	y = 154 + GUI_Y_OFFSET;
 800abf2:	23aa      	movs	r3, #170	; 0xaa
 800abf4:	607b      	str	r3, [r7, #4]
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX) * rectAAfactor, (y + rectSizeY) * rectAAfactor, rectRadius * rectAAfactor);
 800abf6:	68ba      	ldr	r2, [r7, #8]
 800abf8:	4613      	mov	r3, r2
 800abfa:	005b      	lsls	r3, r3, #1
 800abfc:	4413      	add	r3, r2
 800abfe:	005b      	lsls	r3, r3, #1
 800ac00:	4618      	mov	r0, r3
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	4613      	mov	r3, r2
 800ac06:	005b      	lsls	r3, r3, #1
 800ac08:	4413      	add	r3, r2
 800ac0a:	005b      	lsls	r3, r3, #1
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800ac14:	4613      	mov	r3, r2
 800ac16:	005b      	lsls	r3, r3, #1
 800ac18:	4413      	add	r3, r2
 800ac1a:	005b      	lsls	r3, r3, #1
 800ac1c:	461c      	mov	r4, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ac24:	4613      	mov	r3, r2
 800ac26:	005b      	lsls	r3, r3, #1
 800ac28:	4413      	add	r3, r2
 800ac2a:	005b      	lsls	r3, r3, #1
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	2348      	movs	r3, #72	; 0x48
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	4613      	mov	r3, r2
 800ac34:	4622      	mov	r2, r4
 800ac36:	f014 fbb1 	bl	801f39c <GUI_AA_DrawRoundedRect>
	// MAP END


	// T air BEGIN

	GUI_SetColor(GUI_LIGHTBLUE);
 800ac3a:	4882      	ldr	r0, [pc, #520]	; (800ae44 <DisplayGui_Old2+0xf1c>)
 800ac3c:	f012 f876 	bl	801cd2c <GUI_SetColor>

	xt = (480 - rectSizeX) - 12;
 800ac40:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 800ac44:	61fb      	str	r3, [r7, #28]
	yt = 221 + GUI_Y_OFFSET;
 800ac46:	23ed      	movs	r3, #237	; 0xed
 800ac48:	61bb      	str	r3, [r7, #24]
	string = "T AIR";
 800ac4a:	4b7f      	ldr	r3, [pc, #508]	; (800ae48 <DisplayGui_Old2+0xf20>)
 800ac4c:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font16_1);
 800ac4e:	487f      	ldr	r0, [pc, #508]	; (800ae4c <DisplayGui_Old2+0xf24>)
 800ac50:	f012 f83e 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 800ac54:	69ba      	ldr	r2, [r7, #24]
 800ac56:	69f9      	ldr	r1, [r7, #28]
 800ac58:	6978      	ldr	r0, [r7, #20]
 800ac5a:	f012 ff45 	bl	801dae8 <GUI_DispStringAt>

	static GUI_DrawNumAtTypeDef tAirDisp = {0};

	tAirDisp.number = tAir;
 800ac5e:	4b7c      	ldr	r3, [pc, #496]	; (800ae50 <DisplayGui_Old2+0xf28>)
 800ac60:	edd3 7a00 	vldr	s15, [r3]
 800ac64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ac68:	4b7a      	ldr	r3, [pc, #488]	; (800ae54 <DisplayGui_Old2+0xf2c>)
 800ac6a:	ed83 7b00 	vstr	d7, [r3]

	xt+= 60;
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	333c      	adds	r3, #60	; 0x3c
 800ac72:	61fb      	str	r3, [r7, #28]
	yt-= 2;
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	3b02      	subs	r3, #2
 800ac78:	61bb      	str	r3, [r7, #24]
	GUI_DrawNumAt(xt, yt, &GUI_Font20_1, GUI_LIGHTGRAY, GUI_BLACK, &tAirDisp, 2, 1, DISABLE, DISABLE, CENTER, a, b);
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	b218      	sxth	r0, r3
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	b219      	sxth	r1, r3
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	9308      	str	r3, [sp, #32]
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	9307      	str	r3, [sp, #28]
 800ac8a:	2302      	movs	r3, #2
 800ac8c:	9306      	str	r3, [sp, #24]
 800ac8e:	2300      	movs	r3, #0
 800ac90:	9305      	str	r3, [sp, #20]
 800ac92:	2300      	movs	r3, #0
 800ac94:	9304      	str	r3, [sp, #16]
 800ac96:	2301      	movs	r3, #1
 800ac98:	9303      	str	r3, [sp, #12]
 800ac9a:	2302      	movs	r3, #2
 800ac9c:	9302      	str	r3, [sp, #8]
 800ac9e:	4b6d      	ldr	r3, [pc, #436]	; (800ae54 <DisplayGui_Old2+0xf2c>)
 800aca0:	9301      	str	r3, [sp, #4]
 800aca2:	2300      	movs	r3, #0
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	4b66      	ldr	r3, [pc, #408]	; (800ae40 <DisplayGui_Old2+0xf18>)
 800aca8:	4a6b      	ldr	r2, [pc, #428]	; (800ae58 <DisplayGui_Old2+0xf30>)
 800acaa:	f00a fe1d 	bl	80158e8 <GUI_DrawNumAt>


	y = 214 + GUI_Y_OFFSET;
 800acae:	23e6      	movs	r3, #230	; 0xe6
 800acb0:	607b      	str	r3, [r7, #4]
	GUI_SetColor(GUI_LIGHTBLUE);
 800acb2:	4864      	ldr	r0, [pc, #400]	; (800ae44 <DisplayGui_Old2+0xf1c>)
 800acb4:	f012 f83a 	bl	801cd2c <GUI_SetColor>
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX - 24) * rectAAfactor, (y + rectSizeY - 10) * rectAAfactor, rectRadius * rectAAfactor);
 800acb8:	68ba      	ldr	r2, [r7, #8]
 800acba:	4613      	mov	r3, r2
 800acbc:	005b      	lsls	r3, r3, #1
 800acbe:	4413      	add	r3, r2
 800acc0:	005b      	lsls	r3, r3, #1
 800acc2:	4618      	mov	r0, r3
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	4613      	mov	r3, r2
 800acc8:	005b      	lsls	r3, r3, #1
 800acca:	4413      	add	r3, r2
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	4619      	mov	r1, r3
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800acd6:	4613      	mov	r3, r2
 800acd8:	005b      	lsls	r3, r3, #1
 800acda:	4413      	add	r3, r2
 800acdc:	005b      	lsls	r3, r3, #1
 800acde:	461c      	mov	r4, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f103 021e 	add.w	r2, r3, #30
 800ace6:	4613      	mov	r3, r2
 800ace8:	005b      	lsls	r3, r3, #1
 800acea:	4413      	add	r3, r2
 800acec:	005b      	lsls	r3, r3, #1
 800acee:	461a      	mov	r2, r3
 800acf0:	2348      	movs	r3, #72	; 0x48
 800acf2:	9300      	str	r3, [sp, #0]
 800acf4:	4613      	mov	r3, r2
 800acf6:	4622      	mov	r2, r4
 800acf8:	f014 fb50 	bl	801f39c <GUI_AA_DrawRoundedRect>

	// TPS BEGIN

	static uint8_t tps_old = 0;

	GUI_SetColor(GUI_LIGHTBLUE);
 800acfc:	4851      	ldr	r0, [pc, #324]	; (800ae44 <DisplayGui_Old2+0xf1c>)
 800acfe:	f012 f815 	bl	801cd2c <GUI_SetColor>

	xt = 203;
 800ad02:	23cb      	movs	r3, #203	; 0xcb
 800ad04:	61fb      	str	r3, [r7, #28]
	yt = 219 + GUI_Y_OFFSET;
 800ad06:	23eb      	movs	r3, #235	; 0xeb
 800ad08:	61bb      	str	r3, [r7, #24]
	string = "TPS";
 800ad0a:	4b54      	ldr	r3, [pc, #336]	; (800ae5c <DisplayGui_Old2+0xf34>)
 800ad0c:	617b      	str	r3, [r7, #20]
	GUI_SetFont(&GUI_Font16_1);
 800ad0e:	484f      	ldr	r0, [pc, #316]	; (800ae4c <DisplayGui_Old2+0xf24>)
 800ad10:	f011 ffde 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt(string, xt, yt);
 800ad14:	69ba      	ldr	r2, [r7, #24]
 800ad16:	69f9      	ldr	r1, [r7, #28]
 800ad18:	6978      	ldr	r0, [r7, #20]
 800ad1a:	f012 fee5 	bl	801dae8 <GUI_DispStringAt>

	yt-=2;
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	3b02      	subs	r3, #2
 800ad22:	61bb      	str	r3, [r7, #24]

	if(tps_old >= 10 && tps < 10)
 800ad24:	4b4e      	ldr	r3, [pc, #312]	; (800ae60 <DisplayGui_Old2+0xf38>)
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	2b09      	cmp	r3, #9
 800ad2a:	d911      	bls.n	800ad50 <DisplayGui_Old2+0xe28>
 800ad2c:	4b4d      	ldr	r3, [pc, #308]	; (800ae64 <DisplayGui_Old2+0xf3c>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b09      	cmp	r3, #9
 800ad32:	dc0d      	bgt.n	800ad50 <DisplayGui_Old2+0xe28>
	{
		GUI_SetColor(GUI_BLACK);
 800ad34:	2000      	movs	r0, #0
 800ad36:	f011 fff9 	bl	801cd2c <GUI_SetColor>
		GUI_FillRect(xt+30, yt, xt+78, yt+18);
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	f103 001e 	add.w	r0, r3, #30
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	f103 024e 	add.w	r2, r3, #78	; 0x4e
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	3312      	adds	r3, #18
 800ad4a:	69b9      	ldr	r1, [r7, #24]
 800ad4c:	f012 f8f8 	bl	801cf40 <GUI_FillRect>
	}

	GUI_SetColor(GUI_LIGHTGRAY);
 800ad50:	483b      	ldr	r0, [pc, #236]	; (800ae40 <DisplayGui_Old2+0xf18>)
 800ad52:	f011 ffeb 	bl	801cd2c <GUI_SetColor>
	GUI_SetFont(&GUI_Font20B_1);
 800ad56:	4844      	ldr	r0, [pc, #272]	; (800ae68 <DisplayGui_Old2+0xf40>)
 800ad58:	f011 ffba 	bl	801ccd0 <GUI_SetFont>

	if(tps < 10)
 800ad5c:	4b41      	ldr	r3, [pc, #260]	; (800ae64 <DisplayGui_Old2+0xf3c>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b09      	cmp	r3, #9
 800ad62:	dc0c      	bgt.n	800ad7e <DisplayGui_Old2+0xe56>
	{
		xt+= 48;
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	3330      	adds	r3, #48	; 0x30
 800ad68:	61fb      	str	r3, [r7, #28]
		GUI_DispDecAt(tps, xt, yt, 1);
 800ad6a:	4b3e      	ldr	r3, [pc, #248]	; (800ae64 <DisplayGui_Old2+0xf3c>)
 800ad6c:	6818      	ldr	r0, [r3, #0]
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	b219      	sxth	r1, r3
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	b21a      	sxth	r2, r3
 800ad76:	2301      	movs	r3, #1
 800ad78:	f011 fee8 	bl	801cb4c <GUI_DispDecAt>
 800ad7c:	e01c      	b.n	800adb8 <DisplayGui_Old2+0xe90>
	}
	else
	{
		xt+= 42;
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	332a      	adds	r3, #42	; 0x2a
 800ad82:	61fb      	str	r3, [r7, #28]

		if(tps < 100)
 800ad84:	4b37      	ldr	r3, [pc, #220]	; (800ae64 <DisplayGui_Old2+0xf3c>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b63      	cmp	r3, #99	; 0x63
 800ad8a:	dc09      	bgt.n	800ada0 <DisplayGui_Old2+0xe78>
		{
			GUI_DispDecAt(tps, xt, yt, 2);
 800ad8c:	4b35      	ldr	r3, [pc, #212]	; (800ae64 <DisplayGui_Old2+0xf3c>)
 800ad8e:	6818      	ldr	r0, [r3, #0]
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	b219      	sxth	r1, r3
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	b21a      	sxth	r2, r3
 800ad98:	2302      	movs	r3, #2
 800ad9a:	f011 fed7 	bl	801cb4c <GUI_DispDecAt>
 800ad9e:	e00b      	b.n	800adb8 <DisplayGui_Old2+0xe90>
		}
		else
		{
			GUI_SetColor(GUI_GREEN);
 800ada0:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 800ada4:	f011 ffc2 	bl	801cd2c <GUI_SetColor>
			GUI_DispDecAt(99, xt, yt, 2);
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	b219      	sxth	r1, r3
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	b21a      	sxth	r2, r3
 800adb0:	2302      	movs	r3, #2
 800adb2:	2063      	movs	r0, #99	; 0x63
 800adb4:	f011 feca 	bl	801cb4c <GUI_DispDecAt>
		}
	}

	tps_old = tps;
 800adb8:	4b2a      	ldr	r3, [pc, #168]	; (800ae64 <DisplayGui_Old2+0xf3c>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	b2da      	uxtb	r2, r3
 800adbe:	4b28      	ldr	r3, [pc, #160]	; (800ae60 <DisplayGui_Old2+0xf38>)
 800adc0:	701a      	strb	r2, [r3, #0]


	x = (480 - (rectSizeX - 24)) / 2;
 800adc2:	23c0      	movs	r3, #192	; 0xc0
 800adc4:	60bb      	str	r3, [r7, #8]
	y = 214 - 2 + GUI_Y_OFFSET;
 800adc6:	23e4      	movs	r3, #228	; 0xe4
 800adc8:	607b      	str	r3, [r7, #4]
	GUI_SetColor(GUI_LIGHTBLUE);
 800adca:	481e      	ldr	r0, [pc, #120]	; (800ae44 <DisplayGui_Old2+0xf1c>)
 800adcc:	f011 ffae 	bl	801cd2c <GUI_SetColor>
	GUI_AA_DrawRoundedRect(x * rectAAfactor, y * rectAAfactor, (x + rectSizeX - 24) * rectAAfactor, (y + rectSizeY - 10) * rectAAfactor, rectRadius * rectAAfactor);
 800add0:	68ba      	ldr	r2, [r7, #8]
 800add2:	4613      	mov	r3, r2
 800add4:	005b      	lsls	r3, r3, #1
 800add6:	4413      	add	r3, r2
 800add8:	005b      	lsls	r3, r3, #1
 800adda:	4618      	mov	r0, r3
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	4613      	mov	r3, r2
 800ade0:	005b      	lsls	r3, r3, #1
 800ade2:	4413      	add	r3, r2
 800ade4:	005b      	lsls	r3, r3, #1
 800ade6:	4619      	mov	r1, r3
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800adee:	4613      	mov	r3, r2
 800adf0:	005b      	lsls	r3, r3, #1
 800adf2:	4413      	add	r3, r2
 800adf4:	005b      	lsls	r3, r3, #1
 800adf6:	461c      	mov	r4, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f103 021e 	add.w	r2, r3, #30
 800adfe:	4613      	mov	r3, r2
 800ae00:	005b      	lsls	r3, r3, #1
 800ae02:	4413      	add	r3, r2
 800ae04:	005b      	lsls	r3, r3, #1
 800ae06:	461a      	mov	r2, r3
 800ae08:	2348      	movs	r3, #72	; 0x48
 800ae0a:	9300      	str	r3, [sp, #0]
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	4622      	mov	r2, r4
 800ae10:	f014 fac4 	bl	801f39c <GUI_AA_DrawRoundedRect>

	// TPS END

	// Launch Control BAR BEGIN

	GUI_LaunchControlBar(launchControlStatus);
 800ae14:	4b15      	ldr	r3, [pc, #84]	; (800ae6c <DisplayGui_Old2+0xf44>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f005 fbaa 	bl	8010574 <GUI_LaunchControlBar>


	//static GUI_DrawNumAtTypeDef speedText;
	//speedText.number = speed;

	a = "";
 800ae20:	4b13      	ldr	r3, [pc, #76]	; (800ae70 <DisplayGui_Old2+0xf48>)
 800ae22:	613b      	str	r3, [r7, #16]
	b = "";
 800ae24:	4b12      	ldr	r3, [pc, #72]	; (800ae70 <DisplayGui_Old2+0xf48>)
 800ae26:	60fb      	str	r3, [r7, #12]
	//GUI_DrawNumAt(xt - 10, yt - 10, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &tWaterTEMP, 3, 1, DISABLE, DISABLE, RIGHT, a, b);
	//GUI_DrawNumAt(480/2, 160, &GUI_Font32_1, GUI_WHITE, GUI_BLACK, &speedText, 3, 1, DISABLE, DISABLE, CENTER, a, b);


	DisplayGui_Old2Armature();
 800ae28:	f000 f824 	bl	800ae74 <DisplayGui_Old2Armature>


	//CORE FUNCTION END

	DisplayGui_Old2_END:;
}
 800ae2c:	bf00      	nop
 800ae2e:	bf00      	nop
 800ae30:	3724      	adds	r7, #36	; 0x24
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd90      	pop	{r4, r7, pc}
 800ae36:	bf00      	nop
 800ae38:	080224e8 	.word	0x080224e8
 800ae3c:	081249a8 	.word	0x081249a8
 800ae40:	00d3d3d3 	.word	0x00d3d3d3
 800ae44:	00ff8080 	.word	0x00ff8080
 800ae48:	08022530 	.word	0x08022530
 800ae4c:	0812d360 	.word	0x0812d360
 800ae50:	20000014 	.word	0x20000014
 800ae54:	20005238 	.word	0x20005238
 800ae58:	0812b6c8 	.word	0x0812b6c8
 800ae5c:	08022538 	.word	0x08022538
 800ae60:	20005250 	.word	0x20005250
 800ae64:	20000024 	.word	0x20000024
 800ae68:	0812cbd8 	.word	0x0812cbd8
 800ae6c:	20002d44 	.word	0x20002d44
 800ae70:	080224c0 	.word	0x080224c0

0800ae74 <DisplayGui_Old2Armature>:



void DisplayGui_Old2Armature(void)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	af00      	add	r7, sp, #0
	GUI_SetColor(GUI_WHITE);
 800ae78:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800ae7c:	f011 ff56 	bl	801cd2c <GUI_SetColor>

	//main rect (frame)
	GUI_DrawRect(1, 1, 479, 271);
 800ae80:	f240 130f 	movw	r3, #271	; 0x10f
 800ae84:	f240 12df 	movw	r2, #479	; 0x1df
 800ae88:	2101      	movs	r1, #1
 800ae8a:	2001      	movs	r0, #1
 800ae8c:	f013 ffe2 	bl	801ee54 <GUI_DrawRect>
	GUI_DrawRect(2, 2, 478, 270);
 800ae90:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800ae94:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 800ae98:	2102      	movs	r1, #2
 800ae9a:	2002      	movs	r0, #2
 800ae9c:	f013 ffda 	bl	801ee54 <GUI_DrawRect>

	//GUI_AA_DisableHiRes();
	//GUI_SetPenSize(1);
}
 800aea0:	bf00      	nop
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <DisplayGui_Old2_Intro>:


void DisplayGui_Old2_Intro(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	af00      	add	r7, sp, #0
	DisplayGui_Old2Armature();
 800aea8:	f7ff ffe4 	bl	800ae74 <DisplayGui_Old2Armature>

	GUI_SetTextAlign(GUI_TA_HCENTER);
 800aeac:	2002      	movs	r0, #2
 800aeae:	f011 ff05 	bl	801ccbc <GUI_SetTextAlign>

	GUI_SetColor(GUI_WHITE);
 800aeb2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800aeb6:	f011 ff39 	bl	801cd2c <GUI_SetColor>
	GUI_SetFont(&GUI_Font32B_1);
 800aeba:	480e      	ldr	r0, [pc, #56]	; (800aef4 <DisplayGui_Old2_Intro+0x50>)
 800aebc:	f011 ff08 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt("PAGE", 236, 50);
 800aec0:	2232      	movs	r2, #50	; 0x32
 800aec2:	21ec      	movs	r1, #236	; 0xec
 800aec4:	480c      	ldr	r0, [pc, #48]	; (800aef8 <DisplayGui_Old2_Intro+0x54>)
 800aec6:	f012 fe0f 	bl	801dae8 <GUI_DispStringAt>

	GUI_SetFont(&GUI_FontD80);
 800aeca:	480c      	ldr	r0, [pc, #48]	; (800aefc <DisplayGui_Old2_Intro+0x58>)
 800aecc:	f011 ff00 	bl	801ccd0 <GUI_SetFont>
	GUI_DispDecAt(2, 214, 90, 1);
 800aed0:	2301      	movs	r3, #1
 800aed2:	225a      	movs	r2, #90	; 0x5a
 800aed4:	21d6      	movs	r1, #214	; 0xd6
 800aed6:	2002      	movs	r0, #2
 800aed8:	f011 fe38 	bl	801cb4c <GUI_DispDecAt>

	GUI_SetTextAlign(GUI_TA_LEFT);
 800aedc:	2000      	movs	r0, #0
 800aede:	f011 feed 	bl	801ccbc <GUI_SetTextAlign>

	GUI_SetColor(GUI_WHITE);
 800aee2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800aee6:	f011 ff21 	bl	801cd2c <GUI_SetColor>
	GUI_SetBkColor(GUI_BLACK);
 800aeea:	2000      	movs	r0, #0
 800aeec:	f011 ff1c 	bl	801cd28 <GUI_SetBkColor>
}
 800aef0:	bf00      	nop
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	08127b30 	.word	0x08127b30
 800aef8:	0802253c 	.word	0x0802253c
 800aefc:	0811e510 	.word	0x0811e510

0800af00 <DisplayGui_PowertrainData1>:
#define DEFAULT_BLINK_DELAY_OVER		250
#define DEFAULT_BLINK_DELAY_UNDER		250


void DisplayGui_PowertrainData1(void)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	af00      	add	r7, sp, #0
	// Intro section BEGIN
	static uint32_t millisGuiIntro = 0;
	static uint8_t introStatus = 0;

	if(selectedGui_old != GuiPowertrainData1)
 800af04:	4b15      	ldr	r3, [pc, #84]	; (800af5c <DisplayGui_PowertrainData1+0x5c>)
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	2b29      	cmp	r3, #41	; 0x29
 800af0a:	d008      	beq.n	800af1e <DisplayGui_PowertrainData1+0x1e>
	{
		introStatus = 1;
 800af0c:	4b14      	ldr	r3, [pc, #80]	; (800af60 <DisplayGui_PowertrainData1+0x60>)
 800af0e:	2201      	movs	r2, #1
 800af10:	701a      	strb	r2, [r3, #0]
		millisGuiIntro = millis;
 800af12:	4b14      	ldr	r3, [pc, #80]	; (800af64 <DisplayGui_PowertrainData1+0x64>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a14      	ldr	r2, [pc, #80]	; (800af68 <DisplayGui_PowertrainData1+0x68>)
 800af18:	6013      	str	r3, [r2, #0]

		GUI_Clear();
 800af1a:	f012 ffb3 	bl	801de84 <GUI_Clear>
	}

	if(introStatus == 1)
 800af1e:	4b10      	ldr	r3, [pc, #64]	; (800af60 <DisplayGui_PowertrainData1+0x60>)
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d10f      	bne.n	800af46 <DisplayGui_PowertrainData1+0x46>
	{
		if(millis < millisGuiIntro + DISPLAY_GUI_INTRO_TIME)
 800af26:	4b10      	ldr	r3, [pc, #64]	; (800af68 <DisplayGui_PowertrainData1+0x68>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 800af2e:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <DisplayGui_PowertrainData1+0x64>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	429a      	cmp	r2, r3
 800af34:	d902      	bls.n	800af3c <DisplayGui_PowertrainData1+0x3c>
		{
			DisplayGui_Intro();
 800af36:	f001 fa3d 	bl	800c3b4 <DisplayGui_Intro>
			goto DisplayGui_END;
 800af3a:	e00d      	b.n	800af58 <DisplayGui_PowertrainData1+0x58>
		}
		else
		{
			introStatus = 0;
 800af3c:	4b08      	ldr	r3, [pc, #32]	; (800af60 <DisplayGui_PowertrainData1+0x60>)
 800af3e:	2200      	movs	r2, #0
 800af40:	701a      	strb	r2, [r3, #0]
			GUI_Clear();
 800af42:	f012 ff9f 	bl	801de84 <GUI_Clear>
	}

	// Intro section END


	DisplayGui_DataInit();
 800af46:	f000 f813 	bl	800af70 <DisplayGui_DataInit>

	//CORE FUNCTION BEGIN

	DisplayGui_DataRefresh();
 800af4a:	f001 f919 	bl	800c180 <DisplayGui_DataRefresh>
	Display_DataLog(&powertrainData_dense[0], 0);
 800af4e:	2100      	movs	r1, #0
 800af50:	4806      	ldr	r0, [pc, #24]	; (800af6c <DisplayGui_PowertrainData1+0x6c>)
 800af52:	f001 fb21 	bl	800c598 <Display_DataLog>

	//CORE FUNCTION END

	DisplayGui_END:;
}
 800af56:	bf00      	nop
 800af58:	bf00      	nop
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	20000044 	.word	0x20000044
 800af60:	20005d9c 	.word	0x20005d9c
 800af64:	20006a98 	.word	0x20006a98
 800af68:	20005da0 	.word	0x20005da0
 800af6c:	20005258 	.word	0x20005258

0800af70 <DisplayGui_DataInit>:


void DisplayGui_DataInit(void)
{
 800af70:	b480      	push	{r7}
 800af72:	af00      	add	r7, sp, #0
	static uint8_t flagInit = 0;

	if(flagInit == 0)
 800af74:	4bb4      	ldr	r3, [pc, #720]	; (800b248 <DisplayGui_DataInit+0x2d8>)
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f041 80e9 	bne.w	800c150 <DisplayGui_DataInit+0x11e0>
	{
		flagInit = 1;
 800af7e:	4bb2      	ldr	r3, [pc, #712]	; (800b248 <DisplayGui_DataInit+0x2d8>)
 800af80:	2201      	movs	r2, #1
 800af82:	701a      	strb	r2, [r3, #0]

		powertrainData_dense[0].enable = ENABLE;
 800af84:	4bb1      	ldr	r3, [pc, #708]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800af86:	2201      	movs	r2, #1
 800af88:	701a      	strb	r2, [r3, #0]

		powertrainData_dense[0].string = "Data 1";
 800af8a:	4bb0      	ldr	r3, [pc, #704]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800af8c:	4ab0      	ldr	r2, [pc, #704]	; (800b250 <DisplayGui_DataInit+0x2e0>)
 800af8e:	605a      	str	r2, [r3, #4]
		powertrainData_dense[0].intStr = "";
 800af90:	4bae      	ldr	r3, [pc, #696]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800af92:	4ab0      	ldr	r2, [pc, #704]	; (800b254 <DisplayGui_DataInit+0x2e4>)
 800af94:	609a      	str	r2, [r3, #8]
		powertrainData_dense[0].endStr = "";
 800af96:	4bad      	ldr	r3, [pc, #692]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800af98:	4aae      	ldr	r2, [pc, #696]	; (800b254 <DisplayGui_DataInit+0x2e4>)
 800af9a:	60da      	str	r2, [r3, #12]

		powertrainData_dense[0].dataLogInt.number = 123;
 800af9c:	4bab      	ldr	r3, [pc, #684]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800af9e:	227b      	movs	r2, #123	; 0x7b
 800afa0:	615a      	str	r2, [r3, #20]
		powertrainData_dense[0].dataLogFloat.number = 0;
 800afa2:	49aa      	ldr	r1, [pc, #680]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800afa4:	f04f 0200 	mov.w	r2, #0
 800afa8:	f04f 0300 	mov.w	r3, #0
 800afac:	e9c1 2308 	strd	r2, r3, [r1, #32]
		powertrainData_dense[0].decimalDigits = 2;
 800afb0:	4ba6      	ldr	r3, [pc, #664]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800afb2:	2202      	movs	r2, #2
 800afb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		powertrainData_dense[0].textColor = PowertrainData1TextColor;
 800afb8:	4ba7      	ldr	r3, [pc, #668]	; (800b258 <DisplayGui_DataInit+0x2e8>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4aa3      	ldr	r2, [pc, #652]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800afbe:	63d3      	str	r3, [r2, #60]	; 0x3c
		powertrainData_dense[0].backColor = PowertrainData1BackColor;
 800afc0:	4ba6      	ldr	r3, [pc, #664]	; (800b25c <DisplayGui_DataInit+0x2ec>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4aa1      	ldr	r2, [pc, #644]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800afc6:	6453      	str	r3, [r2, #68]	; 0x44
		powertrainData_dense[0].dataColor = PowertrainData1DataColor;
 800afc8:	4ba5      	ldr	r3, [pc, #660]	; (800b260 <DisplayGui_DataInit+0x2f0>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a9f      	ldr	r2, [pc, #636]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800afce:	6413      	str	r3, [r2, #64]	; 0x40
		powertrainData_dense[0].frameColor = PowertrainData1BackColor;
 800afd0:	4ba2      	ldr	r3, [pc, #648]	; (800b25c <DisplayGui_DataInit+0x2ec>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a9d      	ldr	r2, [pc, #628]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800afd6:	6493      	str	r3, [r2, #72]	; 0x48

		powertrainData_dense[0].dataType = DataLog_DataType_Float;
 800afd8:	4b9c      	ldr	r3, [pc, #624]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		powertrainData_dense[0].signEnable = DISABLE;
 800afe0:	4b9a      	ldr	r3, [pc, #616]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

		powertrainData_dense[0].valueControlEnable = DISABLE;
 800afe8:	4b98      	ldr	r3, [pc, #608]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800afea:	2200      	movs	r2, #0
 800afec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		powertrainData_dense[0].maxValue = 0;
 800aff0:	4b96      	ldr	r3, [pc, #600]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800aff2:	f04f 0200 	mov.w	r2, #0
 800aff6:	651a      	str	r2, [r3, #80]	; 0x50
		powertrainData_dense[0].minValue = 0;
 800aff8:	4b94      	ldr	r3, [pc, #592]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800affa:	f04f 0200 	mov.w	r2, #0
 800affe:	655a      	str	r2, [r3, #84]	; 0x54

		powertrainData_dense[0].lastExeTime = 0;
 800b000:	4b92      	ldr	r3, [pc, #584]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b002:	2200      	movs	r2, #0
 800b004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		powertrainData_dense[0].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800b008:	4b90      	ldr	r3, [pc, #576]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b00a:	22fa      	movs	r2, #250	; 0xfa
 800b00c:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		powertrainData_dense[0].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800b010:	4b8e      	ldr	r3, [pc, #568]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b012:	22fa      	movs	r2, #250	; 0xfa
 800b014:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

		powertrainData_dense[0].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800b018:	4b8c      	ldr	r3, [pc, #560]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b01a:	2204      	movs	r2, #4
 800b01c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
		powertrainData_dense[0].blinkingFrameEnable = ENABLE;
 800b020:	4b8a      	ldr	r3, [pc, #552]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b022:	2201      	movs	r2, #1
 800b024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		powertrainData_dense[0].blinkingBackEnable = DISABLE;
 800b028:	4b88      	ldr	r3, [pc, #544]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		powertrainData_dense[0].blinkingOverColor = GUI_RED;
 800b030:	4b86      	ldr	r3, [pc, #536]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b032:	22ff      	movs	r2, #255	; 0xff
 800b034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		powertrainData_dense[0].blinkingUnderColor = GUI_BLUE;
 800b038:	4b84      	ldr	r3, [pc, #528]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b03a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800b03e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88



		powertrainData_dense[1].enable = ENABLE;
 800b042:	4b82      	ldr	r3, [pc, #520]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b044:	2201      	movs	r2, #1
 800b046:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

		powertrainData_dense[1].string = "Data 2";
 800b04a:	4b80      	ldr	r3, [pc, #512]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b04c:	4a85      	ldr	r2, [pc, #532]	; (800b264 <DisplayGui_DataInit+0x2f4>)
 800b04e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		powertrainData_dense[1].intStr = "N: ";
 800b052:	4b7e      	ldr	r3, [pc, #504]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b054:	4a84      	ldr	r2, [pc, #528]	; (800b268 <DisplayGui_DataInit+0x2f8>)
 800b056:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		powertrainData_dense[1].endStr = " dec";
 800b05a:	4b7c      	ldr	r3, [pc, #496]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b05c:	4a83      	ldr	r2, [pc, #524]	; (800b26c <DisplayGui_DataInit+0x2fc>)
 800b05e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		powertrainData_dense[1].dataLogInt.number = 2;
 800b062:	4b7a      	ldr	r3, [pc, #488]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b064:	2202      	movs	r2, #2
 800b066:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		powertrainData_dense[1].dataLogFloat.number = 2;
 800b06a:	4978      	ldr	r1, [pc, #480]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b06c:	f04f 0200 	mov.w	r2, #0
 800b070:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b074:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
		powertrainData_dense[1].decimalDigits = 1;
 800b078:	4b74      	ldr	r3, [pc, #464]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b07a:	2201      	movs	r2, #1
 800b07c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

		powertrainData_dense[1].textColor = PowertrainData1TextColor;
 800b080:	4b75      	ldr	r3, [pc, #468]	; (800b258 <DisplayGui_DataInit+0x2e8>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a71      	ldr	r2, [pc, #452]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b086:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
		powertrainData_dense[1].backColor = PowertrainData1BackColor;
 800b08a:	4b74      	ldr	r3, [pc, #464]	; (800b25c <DisplayGui_DataInit+0x2ec>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a6f      	ldr	r2, [pc, #444]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b090:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
		powertrainData_dense[1].dataColor = PowertrainData1DataColor;
 800b094:	4b72      	ldr	r3, [pc, #456]	; (800b260 <DisplayGui_DataInit+0x2f0>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a6c      	ldr	r2, [pc, #432]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b09a:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
		powertrainData_dense[1].frameColor = PowertrainData1BackColor;
 800b09e:	4b6f      	ldr	r3, [pc, #444]	; (800b25c <DisplayGui_DataInit+0x2ec>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a6a      	ldr	r2, [pc, #424]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b0a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

		powertrainData_dense[1].dataType = DataLog_DataType_Int;
 800b0a8:	4b68      	ldr	r3, [pc, #416]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		powertrainData_dense[1].signEnable = DISABLE;
 800b0b0:	4b66      	ldr	r3, [pc, #408]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

		powertrainData_dense[1].valueControlEnable = DISABLE;
 800b0b8:	4b64      	ldr	r3, [pc, #400]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
		powertrainData_dense[1].maxValue = 0;
 800b0c0:	4b62      	ldr	r3, [pc, #392]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b0c2:	f04f 0200 	mov.w	r2, #0
 800b0c6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
		powertrainData_dense[1].minValue = 0;
 800b0ca:	4b60      	ldr	r3, [pc, #384]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b0cc:	f04f 0200 	mov.w	r2, #0
 800b0d0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		powertrainData_dense[1].lastExeTime = 0;
 800b0d4:	4b5d      	ldr	r3, [pc, #372]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
		powertrainData_dense[1].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800b0dc:	4b5b      	ldr	r3, [pc, #364]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b0de:	22fa      	movs	r2, #250	; 0xfa
 800b0e0:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
		powertrainData_dense[1].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800b0e4:	4b59      	ldr	r3, [pc, #356]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b0e6:	22fa      	movs	r2, #250	; 0xfa
 800b0e8:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a

		powertrainData_dense[1].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800b0ec:	4b57      	ldr	r3, [pc, #348]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b0ee:	2204      	movs	r2, #4
 800b0f0:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
		powertrainData_dense[1].blinkingFrameEnable = ENABLE;
 800b0f4:	4b55      	ldr	r3, [pc, #340]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
		powertrainData_dense[1].blinkingBackEnable = DISABLE;
 800b0fc:	4b53      	ldr	r3, [pc, #332]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
		powertrainData_dense[1].blinkingOverColor = GUI_RED;
 800b104:	4b51      	ldr	r3, [pc, #324]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b106:	22ff      	movs	r2, #255	; 0xff
 800b108:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		powertrainData_dense[1].blinkingUnderColor = GUI_BLUE;
 800b10c:	4b4f      	ldr	r3, [pc, #316]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b10e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800b112:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118



		powertrainData_dense[2].enable = ENABLE;
 800b116:	4b4d      	ldr	r3, [pc, #308]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120

		powertrainData_dense[2].string = "Data 3";
 800b11e:	4b4b      	ldr	r3, [pc, #300]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b120:	4a53      	ldr	r2, [pc, #332]	; (800b270 <DisplayGui_DataInit+0x300>)
 800b122:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		powertrainData_dense[2].intStr = "";
 800b126:	4b49      	ldr	r3, [pc, #292]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b128:	4a4a      	ldr	r2, [pc, #296]	; (800b254 <DisplayGui_DataInit+0x2e4>)
 800b12a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
		powertrainData_dense[2].endStr = "";
 800b12e:	4b47      	ldr	r3, [pc, #284]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b130:	4a48      	ldr	r2, [pc, #288]	; (800b254 <DisplayGui_DataInit+0x2e4>)
 800b132:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

		powertrainData_dense[2].dataLogInt.number = 123;
 800b136:	4b45      	ldr	r3, [pc, #276]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b138:	227b      	movs	r2, #123	; 0x7b
 800b13a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		powertrainData_dense[2].dataLogFloat.number = 1;
 800b13e:	4943      	ldr	r1, [pc, #268]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b140:	f04f 0200 	mov.w	r2, #0
 800b144:	4b4b      	ldr	r3, [pc, #300]	; (800b274 <DisplayGui_DataInit+0x304>)
 800b146:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
		powertrainData_dense[2].decimalDigits = 1;
 800b14a:	4b40      	ldr	r3, [pc, #256]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b14c:	2201      	movs	r2, #1
 800b14e:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158

		powertrainData_dense[2].textColor = PowertrainData1TextColor;
 800b152:	4b41      	ldr	r3, [pc, #260]	; (800b258 <DisplayGui_DataInit+0x2e8>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a3d      	ldr	r2, [pc, #244]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b158:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
		powertrainData_dense[2].backColor = PowertrainData1BackColor;
 800b15c:	4b3f      	ldr	r3, [pc, #252]	; (800b25c <DisplayGui_DataInit+0x2ec>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a3a      	ldr	r2, [pc, #232]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b162:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
		powertrainData_dense[2].dataColor = PowertrainData1DataColor;
 800b166:	4b3e      	ldr	r3, [pc, #248]	; (800b260 <DisplayGui_DataInit+0x2f0>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a38      	ldr	r2, [pc, #224]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b16c:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
		powertrainData_dense[2].frameColor = PowertrainData1BackColor;
 800b170:	4b3a      	ldr	r3, [pc, #232]	; (800b25c <DisplayGui_DataInit+0x2ec>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4a35      	ldr	r2, [pc, #212]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b176:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168

		powertrainData_dense[2].dataType = DataLog_DataType_Int;
 800b17a:	4b34      	ldr	r3, [pc, #208]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
		powertrainData_dense[2].signEnable = DISABLE;
 800b182:	4b32      	ldr	r3, [pc, #200]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b184:	2200      	movs	r2, #0
 800b186:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d

		powertrainData_dense[2].valueControlEnable = DISABLE;
 800b18a:	4b30      	ldr	r3, [pc, #192]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b18c:	2200      	movs	r2, #0
 800b18e:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
		powertrainData_dense[2].maxValue = 0;
 800b192:	4b2e      	ldr	r3, [pc, #184]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b194:	f04f 0200 	mov.w	r2, #0
 800b198:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
		powertrainData_dense[2].minValue = 0;
 800b19c:	4b2b      	ldr	r3, [pc, #172]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b19e:	f04f 0200 	mov.w	r2, #0
 800b1a2:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

		powertrainData_dense[2].lastExeTime = 0;
 800b1a6:	4b29      	ldr	r3, [pc, #164]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		powertrainData_dense[2].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800b1ae:	4b27      	ldr	r3, [pc, #156]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b1b0:	22fa      	movs	r2, #250	; 0xfa
 800b1b2:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
		powertrainData_dense[2].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800b1b6:	4b25      	ldr	r3, [pc, #148]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b1b8:	22fa      	movs	r2, #250	; 0xfa
 800b1ba:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a

		powertrainData_dense[2].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800b1be:	4b23      	ldr	r3, [pc, #140]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b1c0:	2204      	movs	r2, #4
 800b1c2:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
		powertrainData_dense[2].blinkingFrameEnable = ENABLE;
 800b1c6:	4b21      	ldr	r3, [pc, #132]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
		powertrainData_dense[2].blinkingBackEnable = DISABLE;
 800b1ce:	4b1f      	ldr	r3, [pc, #124]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
		powertrainData_dense[2].blinkingOverColor = GUI_RED;
 800b1d6:	4b1d      	ldr	r3, [pc, #116]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b1d8:	22ff      	movs	r2, #255	; 0xff
 800b1da:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
		powertrainData_dense[2].blinkingUnderColor = GUI_BLUE;
 800b1de:	4b1b      	ldr	r3, [pc, #108]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b1e0:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800b1e4:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8



		powertrainData_dense[3].enable = ENABLE;
 800b1e8:	4b18      	ldr	r3, [pc, #96]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0

		powertrainData_dense[3].string = "Oil Pressure";
 800b1f0:	4b16      	ldr	r3, [pc, #88]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b1f2:	4a21      	ldr	r2, [pc, #132]	; (800b278 <DisplayGui_DataInit+0x308>)
 800b1f4:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		powertrainData_dense[3].intStr = "";
 800b1f8:	4b14      	ldr	r3, [pc, #80]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b1fa:	4a16      	ldr	r2, [pc, #88]	; (800b254 <DisplayGui_DataInit+0x2e4>)
 800b1fc:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		powertrainData_dense[3].endStr = "";
 800b200:	4b12      	ldr	r3, [pc, #72]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b202:	4a14      	ldr	r2, [pc, #80]	; (800b254 <DisplayGui_DataInit+0x2e4>)
 800b204:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc

		powertrainData_dense[3].dataLogInt.number = 123;
 800b208:	4b10      	ldr	r3, [pc, #64]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b20a:	227b      	movs	r2, #123	; 0x7b
 800b20c:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		powertrainData_dense[3].dataLogFloat.number = 0.7;
 800b210:	490e      	ldr	r1, [pc, #56]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b212:	a30b      	add	r3, pc, #44	; (adr r3, 800b240 <DisplayGui_DataInit+0x2d0>)
 800b214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b218:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
		powertrainData_dense[3].decimalDigits = 1;
 800b21c:	4b0b      	ldr	r3, [pc, #44]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8

		powertrainData_dense[3].textColor = PowertrainData1TextColor;
 800b224:	4b0c      	ldr	r3, [pc, #48]	; (800b258 <DisplayGui_DataInit+0x2e8>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a08      	ldr	r2, [pc, #32]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b22a:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec
		powertrainData_dense[3].backColor = PowertrainData1BackColor;
 800b22e:	4b0b      	ldr	r3, [pc, #44]	; (800b25c <DisplayGui_DataInit+0x2ec>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a06      	ldr	r2, [pc, #24]	; (800b24c <DisplayGui_DataInit+0x2dc>)
 800b234:	f8c2 31f4 	str.w	r3, [r2, #500]	; 0x1f4
 800b238:	e020      	b.n	800b27c <DisplayGui_DataInit+0x30c>
 800b23a:	bf00      	nop
 800b23c:	f3af 8000 	nop.w
 800b240:	66666666 	.word	0x66666666
 800b244:	3fe66666 	.word	0x3fe66666
 800b248:	20005da4 	.word	0x20005da4
 800b24c:	20005258 	.word	0x20005258
 800b250:	08022544 	.word	0x08022544
 800b254:	0802254c 	.word	0x0802254c
 800b258:	200000e0 	.word	0x200000e0
 800b25c:	20005d98 	.word	0x20005d98
 800b260:	200000e4 	.word	0x200000e4
 800b264:	08022550 	.word	0x08022550
 800b268:	08022558 	.word	0x08022558
 800b26c:	0802255c 	.word	0x0802255c
 800b270:	08022564 	.word	0x08022564
 800b274:	3ff00000 	.word	0x3ff00000
 800b278:	0802256c 	.word	0x0802256c
		powertrainData_dense[3].dataColor = PowertrainData1DataColor;
 800b27c:	4bba      	ldr	r3, [pc, #744]	; (800b568 <DisplayGui_DataInit+0x5f8>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4aba      	ldr	r2, [pc, #744]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b282:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
		powertrainData_dense[3].frameColor = PowertrainData1BackColor;
 800b286:	4bba      	ldr	r3, [pc, #744]	; (800b570 <DisplayGui_DataInit+0x600>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4ab8      	ldr	r2, [pc, #736]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b28c:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8

		powertrainData_dense[3].dataType = DataLog_DataType_Float;
 800b290:	4bb6      	ldr	r3, [pc, #728]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b292:	2201      	movs	r2, #1
 800b294:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
		powertrainData_dense[3].signEnable = DISABLE;
 800b298:	4bb4      	ldr	r3, [pc, #720]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b29a:	2200      	movs	r2, #0
 800b29c:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd

		powertrainData_dense[3].valueControlEnable = ENABLE;
 800b2a0:	4bb2      	ldr	r3, [pc, #712]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
		powertrainData_dense[3].maxValue = pOil_MAX_VALUE;
 800b2a8:	4bb0      	ldr	r3, [pc, #704]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b2aa:	4ab2      	ldr	r2, [pc, #712]	; (800b574 <DisplayGui_DataInit+0x604>)
 800b2ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		powertrainData_dense[3].minValue = pOil_MIN_VALUE;
 800b2b0:	4bae      	ldr	r3, [pc, #696]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b2b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b2b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

		powertrainData_dense[3].lastExeTime = 0;
 800b2ba:	4bac      	ldr	r3, [pc, #688]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
		powertrainData_dense[3].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800b2c2:	4baa      	ldr	r3, [pc, #680]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b2c4:	22fa      	movs	r2, #250	; 0xfa
 800b2c6:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
		powertrainData_dense[3].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800b2ca:	4ba8      	ldr	r3, [pc, #672]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b2cc:	22fa      	movs	r2, #250	; 0xfa
 800b2ce:	f8a3 222a 	strh.w	r2, [r3, #554]	; 0x22a

		powertrainData_dense[3].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800b2d2:	4ba6      	ldr	r3, [pc, #664]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b2d4:	2204      	movs	r2, #4
 800b2d6:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
		powertrainData_dense[3].blinkingFrameEnable = ENABLE;
 800b2da:	4ba4      	ldr	r3, [pc, #656]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
		powertrainData_dense[3].blinkingBackEnable = ENABLE;
 800b2e2:	4ba2      	ldr	r3, [pc, #648]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
		powertrainData_dense[3].blinkingOverColor = GUI_RED;
 800b2ea:	4ba0      	ldr	r3, [pc, #640]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b2ec:	22ff      	movs	r2, #255	; 0xff
 800b2ee:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
		powertrainData_dense[3].blinkingUnderColor = GUI_RED;
 800b2f2:	4b9e      	ldr	r3, [pc, #632]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b2f4:	22ff      	movs	r2, #255	; 0xff
 800b2f6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238



		powertrainData_dense[4].enable = ENABLE;
 800b2fa:	4b9c      	ldr	r3, [pc, #624]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240

		powertrainData_dense[4].string = "Data 5";
 800b302:	4b9a      	ldr	r3, [pc, #616]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b304:	4a9c      	ldr	r2, [pc, #624]	; (800b578 <DisplayGui_DataInit+0x608>)
 800b306:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
		powertrainData_dense[4].intStr = "";
 800b30a:	4b98      	ldr	r3, [pc, #608]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b30c:	4a9b      	ldr	r2, [pc, #620]	; (800b57c <DisplayGui_DataInit+0x60c>)
 800b30e:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
		powertrainData_dense[4].endStr = "";
 800b312:	4b96      	ldr	r3, [pc, #600]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b314:	4a99      	ldr	r2, [pc, #612]	; (800b57c <DisplayGui_DataInit+0x60c>)
 800b316:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c

		powertrainData_dense[4].dataLogInt.number = 123;
 800b31a:	4b94      	ldr	r3, [pc, #592]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b31c:	227b      	movs	r2, #123	; 0x7b
 800b31e:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
		powertrainData_dense[4].dataLogFloat.number = 1;
 800b322:	4992      	ldr	r1, [pc, #584]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b324:	f04f 0200 	mov.w	r2, #0
 800b328:	4b95      	ldr	r3, [pc, #596]	; (800b580 <DisplayGui_DataInit+0x610>)
 800b32a:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
		powertrainData_dense[4].decimalDigits = 2;
 800b32e:	4b8f      	ldr	r3, [pc, #572]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b330:	2202      	movs	r2, #2
 800b332:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278

		powertrainData_dense[4].textColor = PowertrainData1TextColor;
 800b336:	4b93      	ldr	r3, [pc, #588]	; (800b584 <DisplayGui_DataInit+0x614>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a8c      	ldr	r2, [pc, #560]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b33c:	f8c2 327c 	str.w	r3, [r2, #636]	; 0x27c
		powertrainData_dense[4].backColor = PowertrainData1BackColor;
 800b340:	4b8b      	ldr	r3, [pc, #556]	; (800b570 <DisplayGui_DataInit+0x600>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a89      	ldr	r2, [pc, #548]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b346:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284
		powertrainData_dense[4].dataColor = PowertrainData1DataColor;
 800b34a:	4b87      	ldr	r3, [pc, #540]	; (800b568 <DisplayGui_DataInit+0x5f8>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a87      	ldr	r2, [pc, #540]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b350:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
		powertrainData_dense[4].frameColor = PowertrainData1BackColor;
 800b354:	4b86      	ldr	r3, [pc, #536]	; (800b570 <DisplayGui_DataInit+0x600>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a84      	ldr	r2, [pc, #528]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b35a:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288

		powertrainData_dense[4].dataType = DataLog_DataType_Float;
 800b35e:	4b83      	ldr	r3, [pc, #524]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b360:	2201      	movs	r2, #1
 800b362:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
		powertrainData_dense[4].signEnable = DISABLE;
 800b366:	4b81      	ldr	r3, [pc, #516]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d

		powertrainData_dense[4].valueControlEnable = DISABLE;
 800b36e:	4b7f      	ldr	r3, [pc, #508]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b370:	2200      	movs	r2, #0
 800b372:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
		powertrainData_dense[4].maxValue = 0;
 800b376:	4b7d      	ldr	r3, [pc, #500]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b378:	f04f 0200 	mov.w	r2, #0
 800b37c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		powertrainData_dense[4].minValue = 0;
 800b380:	4b7a      	ldr	r3, [pc, #488]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b382:	f04f 0200 	mov.w	r2, #0
 800b386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

		powertrainData_dense[4].lastExeTime = 0;
 800b38a:	4b78      	ldr	r3, [pc, #480]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b38c:	2200      	movs	r2, #0
 800b38e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
		powertrainData_dense[4].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800b392:	4b76      	ldr	r3, [pc, #472]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b394:	22fa      	movs	r2, #250	; 0xfa
 800b396:	f8a3 22b8 	strh.w	r2, [r3, #696]	; 0x2b8
		powertrainData_dense[4].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800b39a:	4b74      	ldr	r3, [pc, #464]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b39c:	22fa      	movs	r2, #250	; 0xfa
 800b39e:	f8a3 22ba 	strh.w	r2, [r3, #698]	; 0x2ba

		powertrainData_dense[4].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800b3a2:	4b72      	ldr	r3, [pc, #456]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b3a4:	2204      	movs	r2, #4
 800b3a6:	f883 22bf 	strb.w	r2, [r3, #703]	; 0x2bf
		powertrainData_dense[4].blinkingFrameEnable = ENABLE;
 800b3aa:	4b70      	ldr	r3, [pc, #448]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
		powertrainData_dense[4].blinkingBackEnable = DISABLE;
 800b3b2:	4b6e      	ldr	r3, [pc, #440]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
		powertrainData_dense[4].blinkingOverColor = GUI_RED;
 800b3ba:	4b6c      	ldr	r3, [pc, #432]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b3bc:	22ff      	movs	r2, #255	; 0xff
 800b3be:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
		powertrainData_dense[4].blinkingUnderColor = GUI_BLUE;
 800b3c2:	4b6a      	ldr	r3, [pc, #424]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b3c4:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800b3c8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8



		powertrainData_dense[5].enable = ENABLE;
 800b3cc:	4b67      	ldr	r3, [pc, #412]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0

		powertrainData_dense[5].string = "Data 6";
 800b3d4:	4b65      	ldr	r3, [pc, #404]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b3d6:	4a6c      	ldr	r2, [pc, #432]	; (800b588 <DisplayGui_DataInit+0x618>)
 800b3d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
		powertrainData_dense[5].intStr = "";
 800b3dc:	4b63      	ldr	r3, [pc, #396]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b3de:	4a67      	ldr	r2, [pc, #412]	; (800b57c <DisplayGui_DataInit+0x60c>)
 800b3e0:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
		powertrainData_dense[5].endStr = "";
 800b3e4:	4b61      	ldr	r3, [pc, #388]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b3e6:	4a65      	ldr	r2, [pc, #404]	; (800b57c <DisplayGui_DataInit+0x60c>)
 800b3e8:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc

		powertrainData_dense[5].dataLogInt.number = 123;
 800b3ec:	4b5f      	ldr	r3, [pc, #380]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b3ee:	227b      	movs	r2, #123	; 0x7b
 800b3f0:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
		powertrainData_dense[5].dataLogFloat.number = 1;
 800b3f4:	495d      	ldr	r1, [pc, #372]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b3f6:	f04f 0200 	mov.w	r2, #0
 800b3fa:	4b61      	ldr	r3, [pc, #388]	; (800b580 <DisplayGui_DataInit+0x610>)
 800b3fc:	e9c1 23bc 	strd	r2, r3, [r1, #752]	; 0x2f0
		powertrainData_dense[5].decimalDigits = 1;
 800b400:	4b5a      	ldr	r3, [pc, #360]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b402:	2201      	movs	r2, #1
 800b404:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308

		powertrainData_dense[5].textColor = PowertrainData1TextColor;
 800b408:	4b5e      	ldr	r3, [pc, #376]	; (800b584 <DisplayGui_DataInit+0x614>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a57      	ldr	r2, [pc, #348]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b40e:	f8c2 330c 	str.w	r3, [r2, #780]	; 0x30c
		powertrainData_dense[5].backColor = PowertrainData1BackColor;
 800b412:	4b57      	ldr	r3, [pc, #348]	; (800b570 <DisplayGui_DataInit+0x600>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a55      	ldr	r2, [pc, #340]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b418:	f8c2 3314 	str.w	r3, [r2, #788]	; 0x314
		powertrainData_dense[5].dataColor = PowertrainData1DataColor;
 800b41c:	4b52      	ldr	r3, [pc, #328]	; (800b568 <DisplayGui_DataInit+0x5f8>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a52      	ldr	r2, [pc, #328]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b422:	f8c2 3310 	str.w	r3, [r2, #784]	; 0x310
		powertrainData_dense[5].frameColor = PowertrainData1BackColor;
 800b426:	4b52      	ldr	r3, [pc, #328]	; (800b570 <DisplayGui_DataInit+0x600>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a50      	ldr	r2, [pc, #320]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b42c:	f8c2 3318 	str.w	r3, [r2, #792]	; 0x318

		powertrainData_dense[5].dataType = DataLog_DataType_Float;
 800b430:	4b4e      	ldr	r3, [pc, #312]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b432:	2201      	movs	r2, #1
 800b434:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
		powertrainData_dense[5].signEnable = DISABLE;
 800b438:	4b4c      	ldr	r3, [pc, #304]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b43a:	2200      	movs	r2, #0
 800b43c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

		powertrainData_dense[5].valueControlEnable = DISABLE;
 800b440:	4b4a      	ldr	r3, [pc, #296]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b442:	2200      	movs	r2, #0
 800b444:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
		powertrainData_dense[5].maxValue = 0;
 800b448:	4b48      	ldr	r3, [pc, #288]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b44a:	f04f 0200 	mov.w	r2, #0
 800b44e:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
		powertrainData_dense[5].minValue = 0;
 800b452:	4b46      	ldr	r3, [pc, #280]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b454:	f04f 0200 	mov.w	r2, #0
 800b458:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324

		powertrainData_dense[5].lastExeTime = 0;
 800b45c:	4b43      	ldr	r3, [pc, #268]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b45e:	2200      	movs	r2, #0
 800b460:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
		powertrainData_dense[5].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800b464:	4b41      	ldr	r3, [pc, #260]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b466:	22fa      	movs	r2, #250	; 0xfa
 800b468:	f8a3 2348 	strh.w	r2, [r3, #840]	; 0x348
		powertrainData_dense[5].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800b46c:	4b3f      	ldr	r3, [pc, #252]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b46e:	22fa      	movs	r2, #250	; 0xfa
 800b470:	f8a3 234a 	strh.w	r2, [r3, #842]	; 0x34a

		powertrainData_dense[5].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800b474:	4b3d      	ldr	r3, [pc, #244]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b476:	2204      	movs	r2, #4
 800b478:	f883 234f 	strb.w	r2, [r3, #847]	; 0x34f
		powertrainData_dense[5].blinkingFrameEnable = ENABLE;
 800b47c:	4b3b      	ldr	r3, [pc, #236]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
		powertrainData_dense[5].blinkingBackEnable = DISABLE;
 800b484:	4b39      	ldr	r3, [pc, #228]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b486:	2200      	movs	r2, #0
 800b488:	f883 2351 	strb.w	r2, [r3, #849]	; 0x351
		powertrainData_dense[5].blinkingOverColor = GUI_RED;
 800b48c:	4b37      	ldr	r3, [pc, #220]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b48e:	22ff      	movs	r2, #255	; 0xff
 800b490:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
		powertrainData_dense[5].blinkingUnderColor = GUI_BLUE;
 800b494:	4b35      	ldr	r3, [pc, #212]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b496:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800b49a:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358



		powertrainData_dense[6].enable = ENABLE;
 800b49e:	4b33      	ldr	r3, [pc, #204]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360

		powertrainData_dense[6].string = "Data 7";
 800b4a6:	4b31      	ldr	r3, [pc, #196]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b4a8:	4a38      	ldr	r2, [pc, #224]	; (800b58c <DisplayGui_DataInit+0x61c>)
 800b4aa:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
		powertrainData_dense[6].intStr = "";
 800b4ae:	4b2f      	ldr	r3, [pc, #188]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b4b0:	4a32      	ldr	r2, [pc, #200]	; (800b57c <DisplayGui_DataInit+0x60c>)
 800b4b2:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
		powertrainData_dense[6].endStr = "";
 800b4b6:	4b2d      	ldr	r3, [pc, #180]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b4b8:	4a30      	ldr	r2, [pc, #192]	; (800b57c <DisplayGui_DataInit+0x60c>)
 800b4ba:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c

		powertrainData_dense[6].dataLogInt.number = 123;
 800b4be:	4b2b      	ldr	r3, [pc, #172]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b4c0:	227b      	movs	r2, #123	; 0x7b
 800b4c2:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
		powertrainData_dense[6].dataLogFloat.number = 1;
 800b4c6:	4929      	ldr	r1, [pc, #164]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b4c8:	f04f 0200 	mov.w	r2, #0
 800b4cc:	4b2c      	ldr	r3, [pc, #176]	; (800b580 <DisplayGui_DataInit+0x610>)
 800b4ce:	e9c1 23e0 	strd	r2, r3, [r1, #896]	; 0x380
		powertrainData_dense[6].decimalDigits = 1;
 800b4d2:	4b26      	ldr	r3, [pc, #152]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

		powertrainData_dense[6].textColor = PowertrainData1TextColor;
 800b4da:	4b2a      	ldr	r3, [pc, #168]	; (800b584 <DisplayGui_DataInit+0x614>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a23      	ldr	r2, [pc, #140]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b4e0:	f8c2 339c 	str.w	r3, [r2, #924]	; 0x39c
		powertrainData_dense[6].backColor = PowertrainData1BackColor;
 800b4e4:	4b22      	ldr	r3, [pc, #136]	; (800b570 <DisplayGui_DataInit+0x600>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a20      	ldr	r2, [pc, #128]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b4ea:	f8c2 33a4 	str.w	r3, [r2, #932]	; 0x3a4
		powertrainData_dense[6].dataColor = PowertrainData1DataColor;
 800b4ee:	4b1e      	ldr	r3, [pc, #120]	; (800b568 <DisplayGui_DataInit+0x5f8>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a1e      	ldr	r2, [pc, #120]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b4f4:	f8c2 33a0 	str.w	r3, [r2, #928]	; 0x3a0
		powertrainData_dense[6].frameColor = PowertrainData1BackColor;
 800b4f8:	4b1d      	ldr	r3, [pc, #116]	; (800b570 <DisplayGui_DataInit+0x600>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a1b      	ldr	r2, [pc, #108]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b4fe:	f8c2 33a8 	str.w	r3, [r2, #936]	; 0x3a8

		powertrainData_dense[6].dataType = DataLog_DataType_Float;
 800b502:	4b1a      	ldr	r3, [pc, #104]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b504:	2201      	movs	r2, #1
 800b506:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
		powertrainData_dense[6].signEnable = DISABLE;
 800b50a:	4b18      	ldr	r3, [pc, #96]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b50c:	2200      	movs	r2, #0
 800b50e:	f883 23ad 	strb.w	r2, [r3, #941]	; 0x3ad

		powertrainData_dense[6].valueControlEnable = DISABLE;
 800b512:	4b16      	ldr	r3, [pc, #88]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b514:	2200      	movs	r2, #0
 800b516:	f883 23ae 	strb.w	r2, [r3, #942]	; 0x3ae
		powertrainData_dense[6].maxValue = 0;
 800b51a:	4b14      	ldr	r3, [pc, #80]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b51c:	f04f 0200 	mov.w	r2, #0
 800b520:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
		powertrainData_dense[6].minValue = 0;
 800b524:	4b11      	ldr	r3, [pc, #68]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b526:	f04f 0200 	mov.w	r2, #0
 800b52a:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4

		powertrainData_dense[6].lastExeTime = 0;
 800b52e:	4b0f      	ldr	r3, [pc, #60]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b530:	2200      	movs	r2, #0
 800b532:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
		powertrainData_dense[6].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800b536:	4b0d      	ldr	r3, [pc, #52]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b538:	22fa      	movs	r2, #250	; 0xfa
 800b53a:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
		powertrainData_dense[6].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800b53e:	4b0b      	ldr	r3, [pc, #44]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b540:	22fa      	movs	r2, #250	; 0xfa
 800b542:	f8a3 23da 	strh.w	r2, [r3, #986]	; 0x3da

		powertrainData_dense[6].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800b546:	4b09      	ldr	r3, [pc, #36]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b548:	2204      	movs	r2, #4
 800b54a:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
		powertrainData_dense[6].blinkingFrameEnable = ENABLE;
 800b54e:	4b07      	ldr	r3, [pc, #28]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b550:	2201      	movs	r2, #1
 800b552:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
		powertrainData_dense[6].blinkingBackEnable = DISABLE;
 800b556:	4b05      	ldr	r3, [pc, #20]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b558:	2200      	movs	r2, #0
 800b55a:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
		powertrainData_dense[6].blinkingOverColor = GUI_RED;
 800b55e:	4b03      	ldr	r3, [pc, #12]	; (800b56c <DisplayGui_DataInit+0x5fc>)
 800b560:	22ff      	movs	r2, #255	; 0xff
 800b562:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
 800b566:	e013      	b.n	800b590 <DisplayGui_DataInit+0x620>
 800b568:	200000e4 	.word	0x200000e4
 800b56c:	20005258 	.word	0x20005258
 800b570:	20005d98 	.word	0x20005d98
 800b574:	40a00000 	.word	0x40a00000
 800b578:	0802257c 	.word	0x0802257c
 800b57c:	0802254c 	.word	0x0802254c
 800b580:	3ff00000 	.word	0x3ff00000
 800b584:	200000e0 	.word	0x200000e0
 800b588:	08022584 	.word	0x08022584
 800b58c:	0802258c 	.word	0x0802258c
		powertrainData_dense[6].blinkingUnderColor = GUI_BLUE;
 800b590:	4bb9      	ldr	r3, [pc, #740]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b592:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800b596:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8



		powertrainData_dense[7].enable = ENABLE;
 800b59a:	4bb7      	ldr	r3, [pc, #732]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b59c:	2201      	movs	r2, #1
 800b59e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0

		powertrainData_dense[7].string = "Water Temp";
 800b5a2:	4bb5      	ldr	r3, [pc, #724]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b5a4:	4ab5      	ldr	r2, [pc, #724]	; (800b87c <DisplayGui_DataInit+0x90c>)
 800b5a6:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
		powertrainData_dense[7].intStr = "";
 800b5aa:	4bb3      	ldr	r3, [pc, #716]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b5ac:	4ab4      	ldr	r2, [pc, #720]	; (800b880 <DisplayGui_DataInit+0x910>)
 800b5ae:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
		powertrainData_dense[7].endStr = " C";
 800b5b2:	4bb1      	ldr	r3, [pc, #708]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b5b4:	4ab3      	ldr	r2, [pc, #716]	; (800b884 <DisplayGui_DataInit+0x914>)
 800b5b6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

		powertrainData_dense[7].dataLogInt.number = 123;
 800b5ba:	4baf      	ldr	r3, [pc, #700]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b5bc:	227b      	movs	r2, #123	; 0x7b
 800b5be:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
		powertrainData_dense[7].dataLogFloat.number = 64.3;
 800b5c2:	4bad      	ldr	r3, [pc, #692]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b5c4:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	a3a9      	add	r3, pc, #676	; (adr r3, 800b870 <DisplayGui_DataInit+0x900>)
 800b5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d0:	e9c1 2300 	strd	r2, r3, [r1]
		powertrainData_dense[7].decimalDigits = 1;
 800b5d4:	4ba8      	ldr	r3, [pc, #672]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

		powertrainData_dense[7].textColor = PowertrainData1TextColor;
 800b5dc:	4baa      	ldr	r3, [pc, #680]	; (800b888 <DisplayGui_DataInit+0x918>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4aa5      	ldr	r2, [pc, #660]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b5e2:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
		powertrainData_dense[7].backColor = PowertrainData1BackColor;
 800b5e6:	4ba9      	ldr	r3, [pc, #676]	; (800b88c <DisplayGui_DataInit+0x91c>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4aa3      	ldr	r2, [pc, #652]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b5ec:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
		powertrainData_dense[7].dataColor = PowertrainData1DataColor;
 800b5f0:	4ba7      	ldr	r3, [pc, #668]	; (800b890 <DisplayGui_DataInit+0x920>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4aa0      	ldr	r2, [pc, #640]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b5f6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
		powertrainData_dense[7].frameColor = PowertrainData1BackColor;
 800b5fa:	4ba4      	ldr	r3, [pc, #656]	; (800b88c <DisplayGui_DataInit+0x91c>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a9e      	ldr	r2, [pc, #632]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b600:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438

		powertrainData_dense[7].dataType = DataLog_DataType_Float;
 800b604:	4b9c      	ldr	r3, [pc, #624]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b606:	2201      	movs	r2, #1
 800b608:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		powertrainData_dense[7].signEnable = DISABLE;
 800b60c:	4b9a      	ldr	r3, [pc, #616]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b60e:	2200      	movs	r2, #0
 800b610:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

		powertrainData_dense[7].valueControlEnable = ENABLE;
 800b614:	4b98      	ldr	r3, [pc, #608]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b616:	2201      	movs	r2, #1
 800b618:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
		powertrainData_dense[7].maxValue = tWater_MAX_VALUE;
 800b61c:	4b96      	ldr	r3, [pc, #600]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b61e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b622:	4a9c      	ldr	r2, [pc, #624]	; (800b894 <DisplayGui_DataInit+0x924>)
 800b624:	601a      	str	r2, [r3, #0]
		powertrainData_dense[7].minValue = tWater_MIN_VALUE;
 800b626:	4b94      	ldr	r3, [pc, #592]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b628:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800b62c:	4a9a      	ldr	r2, [pc, #616]	; (800b898 <DisplayGui_DataInit+0x928>)
 800b62e:	601a      	str	r2, [r3, #0]

		powertrainData_dense[7].lastExeTime = 0;
 800b630:	4b91      	ldr	r3, [pc, #580]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b632:	2200      	movs	r2, #0
 800b634:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
		powertrainData_dense[7].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800b638:	4b8f      	ldr	r3, [pc, #572]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b63a:	22fa      	movs	r2, #250	; 0xfa
 800b63c:	f8a3 2468 	strh.w	r2, [r3, #1128]	; 0x468
		powertrainData_dense[7].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800b640:	4b8d      	ldr	r3, [pc, #564]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b642:	22fa      	movs	r2, #250	; 0xfa
 800b644:	f8a3 246a 	strh.w	r2, [r3, #1130]	; 0x46a

		powertrainData_dense[7].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800b648:	4b8b      	ldr	r3, [pc, #556]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b64a:	2204      	movs	r2, #4
 800b64c:	f883 246f 	strb.w	r2, [r3, #1135]	; 0x46f
		powertrainData_dense[7].blinkingFrameEnable = ENABLE;
 800b650:	4b89      	ldr	r3, [pc, #548]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b652:	2201      	movs	r2, #1
 800b654:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
		powertrainData_dense[7].blinkingBackEnable = DISABLE;
 800b658:	4b87      	ldr	r3, [pc, #540]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b65a:	2200      	movs	r2, #0
 800b65c:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
		powertrainData_dense[7].blinkingOverColor = GUI_RED;
 800b660:	4b85      	ldr	r3, [pc, #532]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b662:	22ff      	movs	r2, #255	; 0xff
 800b664:	f8c3 2474 	str.w	r2, [r3, #1140]	; 0x474
		powertrainData_dense[7].blinkingUnderColor = GUI_BLUE;
 800b668:	4b83      	ldr	r3, [pc, #524]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b66a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800b66e:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478



		powertrainData_dense[8].enable = ENABLE;
 800b672:	4b81      	ldr	r3, [pc, #516]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b674:	2201      	movs	r2, #1
 800b676:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480

		powertrainData_dense[8].string = "Data 9";
 800b67a:	4b7f      	ldr	r3, [pc, #508]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b67c:	4a87      	ldr	r2, [pc, #540]	; (800b89c <DisplayGui_DataInit+0x92c>)
 800b67e:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
		powertrainData_dense[8].intStr = "";
 800b682:	4b7d      	ldr	r3, [pc, #500]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b684:	4a7e      	ldr	r2, [pc, #504]	; (800b880 <DisplayGui_DataInit+0x910>)
 800b686:	f8c3 2488 	str.w	r2, [r3, #1160]	; 0x488
		powertrainData_dense[8].endStr = "";
 800b68a:	4b7b      	ldr	r3, [pc, #492]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b68c:	4a7c      	ldr	r2, [pc, #496]	; (800b880 <DisplayGui_DataInit+0x910>)
 800b68e:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c

		powertrainData_dense[8].dataLogInt.number = 123;
 800b692:	4b79      	ldr	r3, [pc, #484]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b694:	227b      	movs	r2, #123	; 0x7b
 800b696:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
		powertrainData_dense[8].dataLogFloat.number = 1;
 800b69a:	4b77      	ldr	r3, [pc, #476]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b69c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	f04f 0200 	mov.w	r2, #0
 800b6a6:	4b7e      	ldr	r3, [pc, #504]	; (800b8a0 <DisplayGui_DataInit+0x930>)
 800b6a8:	e9c1 2300 	strd	r2, r3, [r1]
		powertrainData_dense[8].decimalDigits = 2;
 800b6ac:	4b72      	ldr	r3, [pc, #456]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b6ae:	2202      	movs	r2, #2
 800b6b0:	f883 24b8 	strb.w	r2, [r3, #1208]	; 0x4b8

		powertrainData_dense[8].textColor = PowertrainData1TextColor;
 800b6b4:	4b74      	ldr	r3, [pc, #464]	; (800b888 <DisplayGui_DataInit+0x918>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a6f      	ldr	r2, [pc, #444]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b6ba:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
		powertrainData_dense[8].backColor = PowertrainData1BackColor;
 800b6be:	4b73      	ldr	r3, [pc, #460]	; (800b88c <DisplayGui_DataInit+0x91c>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a6d      	ldr	r2, [pc, #436]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b6c4:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
		powertrainData_dense[8].dataColor = PowertrainData1DataColor;
 800b6c8:	4b71      	ldr	r3, [pc, #452]	; (800b890 <DisplayGui_DataInit+0x920>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a6a      	ldr	r2, [pc, #424]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b6ce:	f8c2 34c0 	str.w	r3, [r2, #1216]	; 0x4c0
		powertrainData_dense[8].frameColor = PowertrainData1BackColor;
 800b6d2:	4b6e      	ldr	r3, [pc, #440]	; (800b88c <DisplayGui_DataInit+0x91c>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a68      	ldr	r2, [pc, #416]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b6d8:	f8c2 34c8 	str.w	r3, [r2, #1224]	; 0x4c8

		powertrainData_dense[8].dataType = DataLog_DataType_Float;
 800b6dc:	4b66      	ldr	r3, [pc, #408]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
		powertrainData_dense[8].signEnable = DISABLE;
 800b6e4:	4b64      	ldr	r3, [pc, #400]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f883 24cd 	strb.w	r2, [r3, #1229]	; 0x4cd

		powertrainData_dense[8].valueControlEnable = DISABLE;
 800b6ec:	4b62      	ldr	r3, [pc, #392]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 24ce 	strb.w	r2, [r3, #1230]	; 0x4ce
		powertrainData_dense[8].maxValue = 0;
 800b6f4:	4b60      	ldr	r3, [pc, #384]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b6f6:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 800b6fa:	f04f 0200 	mov.w	r2, #0
 800b6fe:	601a      	str	r2, [r3, #0]
		powertrainData_dense[8].minValue = 0;
 800b700:	4b5d      	ldr	r3, [pc, #372]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b702:	f203 43d4 	addw	r3, r3, #1236	; 0x4d4
 800b706:	f04f 0200 	mov.w	r2, #0
 800b70a:	601a      	str	r2, [r3, #0]

		powertrainData_dense[8].lastExeTime = 0;
 800b70c:	4b5a      	ldr	r3, [pc, #360]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b70e:	2200      	movs	r2, #0
 800b710:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
		powertrainData_dense[8].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800b714:	4b58      	ldr	r3, [pc, #352]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b716:	22fa      	movs	r2, #250	; 0xfa
 800b718:	f8a3 24f8 	strh.w	r2, [r3, #1272]	; 0x4f8
		powertrainData_dense[8].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800b71c:	4b56      	ldr	r3, [pc, #344]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b71e:	22fa      	movs	r2, #250	; 0xfa
 800b720:	f8a3 24fa 	strh.w	r2, [r3, #1274]	; 0x4fa

		powertrainData_dense[8].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800b724:	4b54      	ldr	r3, [pc, #336]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b726:	2204      	movs	r2, #4
 800b728:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff
		powertrainData_dense[8].blinkingFrameEnable = ENABLE;
 800b72c:	4b52      	ldr	r3, [pc, #328]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b72e:	2201      	movs	r2, #1
 800b730:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
		powertrainData_dense[8].blinkingBackEnable = DISABLE;
 800b734:	4b50      	ldr	r3, [pc, #320]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b736:	2200      	movs	r2, #0
 800b738:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
		powertrainData_dense[8].blinkingOverColor = GUI_RED;
 800b73c:	4b4e      	ldr	r3, [pc, #312]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b73e:	22ff      	movs	r2, #255	; 0xff
 800b740:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		powertrainData_dense[8].blinkingUnderColor = GUI_BLUE;
 800b744:	4b4c      	ldr	r3, [pc, #304]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b746:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800b74a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508



		powertrainData_dense[9].enable = ENABLE;
 800b74e:	4b4a      	ldr	r3, [pc, #296]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b750:	2201      	movs	r2, #1
 800b752:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510

		powertrainData_dense[9].string = "Data 10";
 800b756:	4b48      	ldr	r3, [pc, #288]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b758:	4a52      	ldr	r2, [pc, #328]	; (800b8a4 <DisplayGui_DataInit+0x934>)
 800b75a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
		powertrainData_dense[9].intStr = "";
 800b75e:	4b46      	ldr	r3, [pc, #280]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b760:	4a47      	ldr	r2, [pc, #284]	; (800b880 <DisplayGui_DataInit+0x910>)
 800b762:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
		powertrainData_dense[9].endStr = "";
 800b766:	4b44      	ldr	r3, [pc, #272]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b768:	4a45      	ldr	r2, [pc, #276]	; (800b880 <DisplayGui_DataInit+0x910>)
 800b76a:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c

		powertrainData_dense[9].dataLogInt.number = 123;
 800b76e:	4b42      	ldr	r3, [pc, #264]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b770:	227b      	movs	r2, #123	; 0x7b
 800b772:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		powertrainData_dense[9].dataLogFloat.number = 1;
 800b776:	4b40      	ldr	r3, [pc, #256]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b778:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800b77c:	4619      	mov	r1, r3
 800b77e:	f04f 0200 	mov.w	r2, #0
 800b782:	4b47      	ldr	r3, [pc, #284]	; (800b8a0 <DisplayGui_DataInit+0x930>)
 800b784:	e9c1 2300 	strd	r2, r3, [r1]
		powertrainData_dense[9].decimalDigits = 1;
 800b788:	4b3b      	ldr	r3, [pc, #236]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548

		powertrainData_dense[9].textColor = PowertrainData1TextColor;
 800b790:	4b3d      	ldr	r3, [pc, #244]	; (800b888 <DisplayGui_DataInit+0x918>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a38      	ldr	r2, [pc, #224]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b796:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
		powertrainData_dense[9].backColor = PowertrainData1BackColor;
 800b79a:	4b3c      	ldr	r3, [pc, #240]	; (800b88c <DisplayGui_DataInit+0x91c>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a36      	ldr	r2, [pc, #216]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b7a0:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
		powertrainData_dense[9].dataColor = PowertrainData1DataColor;
 800b7a4:	4b3a      	ldr	r3, [pc, #232]	; (800b890 <DisplayGui_DataInit+0x920>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a33      	ldr	r2, [pc, #204]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b7aa:	f8c2 3550 	str.w	r3, [r2, #1360]	; 0x550
		powertrainData_dense[9].frameColor = PowertrainData1BackColor;
 800b7ae:	4b37      	ldr	r3, [pc, #220]	; (800b88c <DisplayGui_DataInit+0x91c>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4a31      	ldr	r2, [pc, #196]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b7b4:	f8c2 3558 	str.w	r3, [r2, #1368]	; 0x558

		powertrainData_dense[9].dataType = DataLog_DataType_Float;
 800b7b8:	4b2f      	ldr	r3, [pc, #188]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 255c 	strb.w	r2, [r3, #1372]	; 0x55c
		powertrainData_dense[9].signEnable = DISABLE;
 800b7c0:	4b2d      	ldr	r3, [pc, #180]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 255d 	strb.w	r2, [r3, #1373]	; 0x55d

		powertrainData_dense[9].valueControlEnable = DISABLE;
 800b7c8:	4b2b      	ldr	r3, [pc, #172]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f883 255e 	strb.w	r2, [r3, #1374]	; 0x55e
		powertrainData_dense[9].maxValue = 0;
 800b7d0:	4b29      	ldr	r3, [pc, #164]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b7d2:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 800b7d6:	f04f 0200 	mov.w	r2, #0
 800b7da:	601a      	str	r2, [r3, #0]
		powertrainData_dense[9].minValue = 0;
 800b7dc:	4b26      	ldr	r3, [pc, #152]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b7de:	f203 5364 	addw	r3, r3, #1380	; 0x564
 800b7e2:	f04f 0200 	mov.w	r2, #0
 800b7e6:	601a      	str	r2, [r3, #0]

		powertrainData_dense[9].lastExeTime = 0;
 800b7e8:	4b23      	ldr	r3, [pc, #140]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f8c3 259c 	str.w	r2, [r3, #1436]	; 0x59c
		powertrainData_dense[9].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800b7f0:	4b21      	ldr	r3, [pc, #132]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b7f2:	22fa      	movs	r2, #250	; 0xfa
 800b7f4:	f8a3 2588 	strh.w	r2, [r3, #1416]	; 0x588
		powertrainData_dense[9].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800b7f8:	4b1f      	ldr	r3, [pc, #124]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b7fa:	22fa      	movs	r2, #250	; 0xfa
 800b7fc:	f8a3 258a 	strh.w	r2, [r3, #1418]	; 0x58a

		powertrainData_dense[9].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800b800:	4b1d      	ldr	r3, [pc, #116]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b802:	2204      	movs	r2, #4
 800b804:	f883 258f 	strb.w	r2, [r3, #1423]	; 0x58f
		powertrainData_dense[9].blinkingFrameEnable = ENABLE;
 800b808:	4b1b      	ldr	r3, [pc, #108]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 2590 	strb.w	r2, [r3, #1424]	; 0x590
		powertrainData_dense[9].blinkingBackEnable = DISABLE;
 800b810:	4b19      	ldr	r3, [pc, #100]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b812:	2200      	movs	r2, #0
 800b814:	f883 2591 	strb.w	r2, [r3, #1425]	; 0x591
		powertrainData_dense[9].blinkingOverColor = GUI_RED;
 800b818:	4b17      	ldr	r3, [pc, #92]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b81a:	22ff      	movs	r2, #255	; 0xff
 800b81c:	f8c3 2594 	str.w	r2, [r3, #1428]	; 0x594
		powertrainData_dense[9].blinkingUnderColor = GUI_BLUE;
 800b820:	4b15      	ldr	r3, [pc, #84]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b822:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800b826:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598



		powertrainData_dense[10].enable = ENABLE;
 800b82a:	4b13      	ldr	r3, [pc, #76]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b82c:	2201      	movs	r2, #1
 800b82e:	f883 25a0 	strb.w	r2, [r3, #1440]	; 0x5a0

		powertrainData_dense[10].string = "Data 11";
 800b832:	4b11      	ldr	r3, [pc, #68]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b834:	4a1c      	ldr	r2, [pc, #112]	; (800b8a8 <DisplayGui_DataInit+0x938>)
 800b836:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
		powertrainData_dense[10].intStr = "";
 800b83a:	4b0f      	ldr	r3, [pc, #60]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b83c:	4a10      	ldr	r2, [pc, #64]	; (800b880 <DisplayGui_DataInit+0x910>)
 800b83e:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
		powertrainData_dense[10].endStr = "";
 800b842:	4b0d      	ldr	r3, [pc, #52]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b844:	4a0e      	ldr	r2, [pc, #56]	; (800b880 <DisplayGui_DataInit+0x910>)
 800b846:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac

		powertrainData_dense[10].dataLogInt.number = 123;
 800b84a:	4b0b      	ldr	r3, [pc, #44]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b84c:	227b      	movs	r2, #123	; 0x7b
 800b84e:	f8c3 25b4 	str.w	r2, [r3, #1460]	; 0x5b4
		powertrainData_dense[10].dataLogFloat.number = 1;
 800b852:	4b09      	ldr	r3, [pc, #36]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b854:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 800b858:	4619      	mov	r1, r3
 800b85a:	f04f 0200 	mov.w	r2, #0
 800b85e:	4b10      	ldr	r3, [pc, #64]	; (800b8a0 <DisplayGui_DataInit+0x930>)
 800b860:	e9c1 2300 	strd	r2, r3, [r1]
		powertrainData_dense[10].decimalDigits = 1;
 800b864:	4b04      	ldr	r3, [pc, #16]	; (800b878 <DisplayGui_DataInit+0x908>)
 800b866:	2201      	movs	r2, #1
 800b868:	f883 25d8 	strb.w	r2, [r3, #1496]	; 0x5d8
 800b86c:	e01e      	b.n	800b8ac <DisplayGui_DataInit+0x93c>
 800b86e:	bf00      	nop
 800b870:	33333333 	.word	0x33333333
 800b874:	40501333 	.word	0x40501333
 800b878:	20005258 	.word	0x20005258
 800b87c:	08022594 	.word	0x08022594
 800b880:	0802254c 	.word	0x0802254c
 800b884:	080225a0 	.word	0x080225a0
 800b888:	200000e0 	.word	0x200000e0
 800b88c:	20005d98 	.word	0x20005d98
 800b890:	200000e4 	.word	0x200000e4
 800b894:	42d20000 	.word	0x42d20000
 800b898:	42700000 	.word	0x42700000
 800b89c:	080225a4 	.word	0x080225a4
 800b8a0:	3ff00000 	.word	0x3ff00000
 800b8a4:	080225ac 	.word	0x080225ac
 800b8a8:	080225b4 	.word	0x080225b4

		powertrainData_dense[10].textColor = PowertrainData1TextColor;
 800b8ac:	4bb8      	ldr	r3, [pc, #736]	; (800bb90 <DisplayGui_DataInit+0xc20>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4ab8      	ldr	r2, [pc, #736]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b8b2:	f8c2 35dc 	str.w	r3, [r2, #1500]	; 0x5dc
		powertrainData_dense[10].backColor = PowertrainData1BackColor;
 800b8b6:	4bb8      	ldr	r3, [pc, #736]	; (800bb98 <DisplayGui_DataInit+0xc28>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4ab6      	ldr	r2, [pc, #728]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b8bc:	f8c2 35e4 	str.w	r3, [r2, #1508]	; 0x5e4
		powertrainData_dense[10].dataColor = PowertrainData1DataColor;
 800b8c0:	4bb6      	ldr	r3, [pc, #728]	; (800bb9c <DisplayGui_DataInit+0xc2c>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4ab3      	ldr	r2, [pc, #716]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b8c6:	f8c2 35e0 	str.w	r3, [r2, #1504]	; 0x5e0
		powertrainData_dense[10].frameColor = PowertrainData1BackColor;
 800b8ca:	4bb3      	ldr	r3, [pc, #716]	; (800bb98 <DisplayGui_DataInit+0xc28>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4ab1      	ldr	r2, [pc, #708]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b8d0:	f8c2 35e8 	str.w	r3, [r2, #1512]	; 0x5e8

		powertrainData_dense[10].dataType = DataLog_DataType_Float;
 800b8d4:	4baf      	ldr	r3, [pc, #700]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	f883 25ec 	strb.w	r2, [r3, #1516]	; 0x5ec
		powertrainData_dense[10].signEnable = DISABLE;
 800b8dc:	4bad      	ldr	r3, [pc, #692]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f883 25ed 	strb.w	r2, [r3, #1517]	; 0x5ed

		powertrainData_dense[10].valueControlEnable = DISABLE;
 800b8e4:	4bab      	ldr	r3, [pc, #684]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f883 25ee 	strb.w	r2, [r3, #1518]	; 0x5ee
		powertrainData_dense[10].maxValue = 0;
 800b8ec:	4ba9      	ldr	r3, [pc, #676]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b8ee:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 800b8f2:	f04f 0200 	mov.w	r2, #0
 800b8f6:	601a      	str	r2, [r3, #0]
		powertrainData_dense[10].minValue = 0;
 800b8f8:	4ba6      	ldr	r3, [pc, #664]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b8fa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b8fe:	f04f 0200 	mov.w	r2, #0
 800b902:	601a      	str	r2, [r3, #0]

		powertrainData_dense[10].lastExeTime = 0;
 800b904:	4ba3      	ldr	r3, [pc, #652]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b906:	2200      	movs	r2, #0
 800b908:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
		powertrainData_dense[10].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800b90c:	4ba1      	ldr	r3, [pc, #644]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b90e:	22fa      	movs	r2, #250	; 0xfa
 800b910:	f8a3 2618 	strh.w	r2, [r3, #1560]	; 0x618
		powertrainData_dense[10].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800b914:	4b9f      	ldr	r3, [pc, #636]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b916:	22fa      	movs	r2, #250	; 0xfa
 800b918:	f8a3 261a 	strh.w	r2, [r3, #1562]	; 0x61a

		powertrainData_dense[10].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800b91c:	4b9d      	ldr	r3, [pc, #628]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b91e:	2204      	movs	r2, #4
 800b920:	f883 261f 	strb.w	r2, [r3, #1567]	; 0x61f
		powertrainData_dense[10].blinkingFrameEnable = ENABLE;
 800b924:	4b9b      	ldr	r3, [pc, #620]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b926:	2201      	movs	r2, #1
 800b928:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
		powertrainData_dense[10].blinkingBackEnable = DISABLE;
 800b92c:	4b99      	ldr	r3, [pc, #612]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b92e:	2200      	movs	r2, #0
 800b930:	f883 2621 	strb.w	r2, [r3, #1569]	; 0x621
		powertrainData_dense[10].blinkingOverColor = GUI_RED;
 800b934:	4b97      	ldr	r3, [pc, #604]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b936:	22ff      	movs	r2, #255	; 0xff
 800b938:	f8c3 2624 	str.w	r2, [r3, #1572]	; 0x624
		powertrainData_dense[10].blinkingUnderColor = GUI_BLUE;
 800b93c:	4b95      	ldr	r3, [pc, #596]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b93e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800b942:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628



		powertrainData_dense[11].enable = ENABLE;
 800b946:	4b93      	ldr	r3, [pc, #588]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b948:	2201      	movs	r2, #1
 800b94a:	f883 2630 	strb.w	r2, [r3, #1584]	; 0x630

		powertrainData_dense[11].string = "Data 12";
 800b94e:	4b91      	ldr	r3, [pc, #580]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b950:	4a93      	ldr	r2, [pc, #588]	; (800bba0 <DisplayGui_DataInit+0xc30>)
 800b952:	f8c3 2634 	str.w	r2, [r3, #1588]	; 0x634
		powertrainData_dense[11].intStr = "";
 800b956:	4b8f      	ldr	r3, [pc, #572]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b958:	4a92      	ldr	r2, [pc, #584]	; (800bba4 <DisplayGui_DataInit+0xc34>)
 800b95a:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
		powertrainData_dense[11].endStr = "";
 800b95e:	4b8d      	ldr	r3, [pc, #564]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b960:	4a90      	ldr	r2, [pc, #576]	; (800bba4 <DisplayGui_DataInit+0xc34>)
 800b962:	f8c3 263c 	str.w	r2, [r3, #1596]	; 0x63c

		powertrainData_dense[11].dataLogInt.number = 123;
 800b966:	4b8b      	ldr	r3, [pc, #556]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b968:	227b      	movs	r2, #123	; 0x7b
 800b96a:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
		powertrainData_dense[11].dataLogFloat.number = 1;
 800b96e:	4b89      	ldr	r3, [pc, #548]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b970:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800b974:	4619      	mov	r1, r3
 800b976:	f04f 0200 	mov.w	r2, #0
 800b97a:	4b8b      	ldr	r3, [pc, #556]	; (800bba8 <DisplayGui_DataInit+0xc38>)
 800b97c:	e9c1 2300 	strd	r2, r3, [r1]
		powertrainData_dense[11].decimalDigits = 1;
 800b980:	4b84      	ldr	r3, [pc, #528]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b982:	2201      	movs	r2, #1
 800b984:	f883 2668 	strb.w	r2, [r3, #1640]	; 0x668

		powertrainData_dense[11].textColor = PowertrainData1TextColor;
 800b988:	4b81      	ldr	r3, [pc, #516]	; (800bb90 <DisplayGui_DataInit+0xc20>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a81      	ldr	r2, [pc, #516]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b98e:	f8c2 366c 	str.w	r3, [r2, #1644]	; 0x66c
		powertrainData_dense[11].backColor = PowertrainData1BackColor;
 800b992:	4b81      	ldr	r3, [pc, #516]	; (800bb98 <DisplayGui_DataInit+0xc28>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a7f      	ldr	r2, [pc, #508]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b998:	f8c2 3674 	str.w	r3, [r2, #1652]	; 0x674
		powertrainData_dense[11].dataColor = PowertrainData1DataColor;
 800b99c:	4b7f      	ldr	r3, [pc, #508]	; (800bb9c <DisplayGui_DataInit+0xc2c>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a7c      	ldr	r2, [pc, #496]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b9a2:	f8c2 3670 	str.w	r3, [r2, #1648]	; 0x670
		powertrainData_dense[11].frameColor = PowertrainData1BackColor;
 800b9a6:	4b7c      	ldr	r3, [pc, #496]	; (800bb98 <DisplayGui_DataInit+0xc28>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a7a      	ldr	r2, [pc, #488]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b9ac:	f8c2 3678 	str.w	r3, [r2, #1656]	; 0x678

		powertrainData_dense[11].dataType = DataLog_DataType_Float;
 800b9b0:	4b78      	ldr	r3, [pc, #480]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f883 267c 	strb.w	r2, [r3, #1660]	; 0x67c
		powertrainData_dense[11].signEnable = DISABLE;
 800b9b8:	4b76      	ldr	r3, [pc, #472]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f883 267d 	strb.w	r2, [r3, #1661]	; 0x67d

		powertrainData_dense[11].valueControlEnable = DISABLE;
 800b9c0:	4b74      	ldr	r3, [pc, #464]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f883 267e 	strb.w	r2, [r3, #1662]	; 0x67e
		powertrainData_dense[11].maxValue = 0;
 800b9c8:	4b72      	ldr	r3, [pc, #456]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b9ca:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 800b9ce:	f04f 0200 	mov.w	r2, #0
 800b9d2:	601a      	str	r2, [r3, #0]
		powertrainData_dense[11].minValue = 0;
 800b9d4:	4b6f      	ldr	r3, [pc, #444]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b9d6:	f203 6384 	addw	r3, r3, #1668	; 0x684
 800b9da:	f04f 0200 	mov.w	r2, #0
 800b9de:	601a      	str	r2, [r3, #0]

		powertrainData_dense[11].lastExeTime = 0;
 800b9e0:	4b6c      	ldr	r3, [pc, #432]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f8c3 26bc 	str.w	r2, [r3, #1724]	; 0x6bc
		powertrainData_dense[11].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800b9e8:	4b6a      	ldr	r3, [pc, #424]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b9ea:	22fa      	movs	r2, #250	; 0xfa
 800b9ec:	f8a3 26a8 	strh.w	r2, [r3, #1704]	; 0x6a8
		powertrainData_dense[11].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800b9f0:	4b68      	ldr	r3, [pc, #416]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b9f2:	22fa      	movs	r2, #250	; 0xfa
 800b9f4:	f8a3 26aa 	strh.w	r2, [r3, #1706]	; 0x6aa

		powertrainData_dense[11].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800b9f8:	4b66      	ldr	r3, [pc, #408]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800b9fa:	2204      	movs	r2, #4
 800b9fc:	f883 26af 	strb.w	r2, [r3, #1711]	; 0x6af
		powertrainData_dense[11].blinkingFrameEnable = ENABLE;
 800ba00:	4b64      	ldr	r3, [pc, #400]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0
		powertrainData_dense[11].blinkingBackEnable = DISABLE;
 800ba08:	4b62      	ldr	r3, [pc, #392]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f883 26b1 	strb.w	r2, [r3, #1713]	; 0x6b1
		powertrainData_dense[11].blinkingOverColor = GUI_RED;
 800ba10:	4b60      	ldr	r3, [pc, #384]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800ba12:	22ff      	movs	r2, #255	; 0xff
 800ba14:	f8c3 26b4 	str.w	r2, [r3, #1716]	; 0x6b4
		powertrainData_dense[11].blinkingUnderColor = GUI_BLUE;
 800ba18:	4b5e      	ldr	r3, [pc, #376]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800ba1a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800ba1e:	f8c3 26b8 	str.w	r2, [r3, #1720]	; 0x6b8



		powertrainData_dense[12].enable = ENABLE;
 800ba22:	4b5c      	ldr	r3, [pc, #368]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800ba24:	2201      	movs	r2, #1
 800ba26:	f883 26c0 	strb.w	r2, [r3, #1728]	; 0x6c0

		powertrainData_dense[12].string = "Data 13";
 800ba2a:	4b5a      	ldr	r3, [pc, #360]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800ba2c:	4a5f      	ldr	r2, [pc, #380]	; (800bbac <DisplayGui_DataInit+0xc3c>)
 800ba2e:	f8c3 26c4 	str.w	r2, [r3, #1732]	; 0x6c4
		powertrainData_dense[12].intStr = "";
 800ba32:	4b58      	ldr	r3, [pc, #352]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800ba34:	4a5b      	ldr	r2, [pc, #364]	; (800bba4 <DisplayGui_DataInit+0xc34>)
 800ba36:	f8c3 26c8 	str.w	r2, [r3, #1736]	; 0x6c8
		powertrainData_dense[12].endStr = "";
 800ba3a:	4b56      	ldr	r3, [pc, #344]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800ba3c:	4a59      	ldr	r2, [pc, #356]	; (800bba4 <DisplayGui_DataInit+0xc34>)
 800ba3e:	f8c3 26cc 	str.w	r2, [r3, #1740]	; 0x6cc

		powertrainData_dense[12].dataLogInt.number = 123;
 800ba42:	4b54      	ldr	r3, [pc, #336]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800ba44:	227b      	movs	r2, #123	; 0x7b
 800ba46:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
		powertrainData_dense[12].dataLogFloat.number = 1;
 800ba4a:	4b52      	ldr	r3, [pc, #328]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800ba4c:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 800ba50:	4619      	mov	r1, r3
 800ba52:	f04f 0200 	mov.w	r2, #0
 800ba56:	4b54      	ldr	r3, [pc, #336]	; (800bba8 <DisplayGui_DataInit+0xc38>)
 800ba58:	e9c1 2300 	strd	r2, r3, [r1]
		powertrainData_dense[12].decimalDigits = 1;
 800ba5c:	4b4d      	ldr	r3, [pc, #308]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8

		powertrainData_dense[12].textColor = PowertrainData1TextColor;
 800ba64:	4b4a      	ldr	r3, [pc, #296]	; (800bb90 <DisplayGui_DataInit+0xc20>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a4a      	ldr	r2, [pc, #296]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800ba6a:	f8c2 36fc 	str.w	r3, [r2, #1788]	; 0x6fc
		powertrainData_dense[12].backColor = PowertrainData1BackColor;
 800ba6e:	4b4a      	ldr	r3, [pc, #296]	; (800bb98 <DisplayGui_DataInit+0xc28>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a48      	ldr	r2, [pc, #288]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800ba74:	f8c2 3704 	str.w	r3, [r2, #1796]	; 0x704
		powertrainData_dense[12].dataColor = PowertrainData1DataColor;
 800ba78:	4b48      	ldr	r3, [pc, #288]	; (800bb9c <DisplayGui_DataInit+0xc2c>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a45      	ldr	r2, [pc, #276]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800ba7e:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
		powertrainData_dense[12].frameColor = PowertrainData1BackColor;
 800ba82:	4b45      	ldr	r3, [pc, #276]	; (800bb98 <DisplayGui_DataInit+0xc28>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a43      	ldr	r2, [pc, #268]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800ba88:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708

		powertrainData_dense[12].dataType = DataLog_DataType_Float;
 800ba8c:	4b41      	ldr	r3, [pc, #260]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
		powertrainData_dense[12].signEnable = DISABLE;
 800ba94:	4b3f      	ldr	r3, [pc, #252]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800ba96:	2200      	movs	r2, #0
 800ba98:	f883 270d 	strb.w	r2, [r3, #1805]	; 0x70d

		powertrainData_dense[12].valueControlEnable = DISABLE;
 800ba9c:	4b3d      	ldr	r3, [pc, #244]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 270e 	strb.w	r2, [r3, #1806]	; 0x70e
		powertrainData_dense[12].maxValue = 0;
 800baa4:	4b3b      	ldr	r3, [pc, #236]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800baa6:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 800baaa:	f04f 0200 	mov.w	r2, #0
 800baae:	601a      	str	r2, [r3, #0]
		powertrainData_dense[12].minValue = 0;
 800bab0:	4b38      	ldr	r3, [pc, #224]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bab2:	f203 7314 	addw	r3, r3, #1812	; 0x714
 800bab6:	f04f 0200 	mov.w	r2, #0
 800baba:	601a      	str	r2, [r3, #0]

		powertrainData_dense[12].lastExeTime = 0;
 800babc:	4b35      	ldr	r3, [pc, #212]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800babe:	2200      	movs	r2, #0
 800bac0:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
		powertrainData_dense[12].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800bac4:	4b33      	ldr	r3, [pc, #204]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bac6:	22fa      	movs	r2, #250	; 0xfa
 800bac8:	f8a3 2738 	strh.w	r2, [r3, #1848]	; 0x738
		powertrainData_dense[12].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800bacc:	4b31      	ldr	r3, [pc, #196]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bace:	22fa      	movs	r2, #250	; 0xfa
 800bad0:	f8a3 273a 	strh.w	r2, [r3, #1850]	; 0x73a

		powertrainData_dense[12].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800bad4:	4b2f      	ldr	r3, [pc, #188]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bad6:	2204      	movs	r2, #4
 800bad8:	f883 273f 	strb.w	r2, [r3, #1855]	; 0x73f
		powertrainData_dense[12].blinkingFrameEnable = ENABLE;
 800badc:	4b2d      	ldr	r3, [pc, #180]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bade:	2201      	movs	r2, #1
 800bae0:	f883 2740 	strb.w	r2, [r3, #1856]	; 0x740
		powertrainData_dense[12].blinkingBackEnable = DISABLE;
 800bae4:	4b2b      	ldr	r3, [pc, #172]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bae6:	2200      	movs	r2, #0
 800bae8:	f883 2741 	strb.w	r2, [r3, #1857]	; 0x741
		powertrainData_dense[12].blinkingOverColor = GUI_RED;
 800baec:	4b29      	ldr	r3, [pc, #164]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800baee:	22ff      	movs	r2, #255	; 0xff
 800baf0:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744
		powertrainData_dense[12].blinkingUnderColor = GUI_BLUE;
 800baf4:	4b27      	ldr	r3, [pc, #156]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800baf6:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800bafa:	f8c3 2748 	str.w	r2, [r3, #1864]	; 0x748



		powertrainData_dense[13].enable = ENABLE;
 800bafe:	4b25      	ldr	r3, [pc, #148]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bb00:	2201      	movs	r2, #1
 800bb02:	f883 2750 	strb.w	r2, [r3, #1872]	; 0x750

		powertrainData_dense[13].string = "Data 14";
 800bb06:	4b23      	ldr	r3, [pc, #140]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bb08:	4a29      	ldr	r2, [pc, #164]	; (800bbb0 <DisplayGui_DataInit+0xc40>)
 800bb0a:	f8c3 2754 	str.w	r2, [r3, #1876]	; 0x754
		powertrainData_dense[13].intStr = "";
 800bb0e:	4b21      	ldr	r3, [pc, #132]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bb10:	4a24      	ldr	r2, [pc, #144]	; (800bba4 <DisplayGui_DataInit+0xc34>)
 800bb12:	f8c3 2758 	str.w	r2, [r3, #1880]	; 0x758
		powertrainData_dense[13].endStr = "";
 800bb16:	4b1f      	ldr	r3, [pc, #124]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bb18:	4a22      	ldr	r2, [pc, #136]	; (800bba4 <DisplayGui_DataInit+0xc34>)
 800bb1a:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c

		powertrainData_dense[13].dataLogInt.number = 123;
 800bb1e:	4b1d      	ldr	r3, [pc, #116]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bb20:	227b      	movs	r2, #123	; 0x7b
 800bb22:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
		powertrainData_dense[13].dataLogFloat.number = 1;
 800bb26:	4b1b      	ldr	r3, [pc, #108]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bb28:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	f04f 0200 	mov.w	r2, #0
 800bb32:	4b1d      	ldr	r3, [pc, #116]	; (800bba8 <DisplayGui_DataInit+0xc38>)
 800bb34:	e9c1 2300 	strd	r2, r3, [r1]
		powertrainData_dense[13].decimalDigits = 1;
 800bb38:	4b16      	ldr	r3, [pc, #88]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	f883 2788 	strb.w	r2, [r3, #1928]	; 0x788

		powertrainData_dense[13].textColor = PowertrainData1TextColor;
 800bb40:	4b13      	ldr	r3, [pc, #76]	; (800bb90 <DisplayGui_DataInit+0xc20>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4a13      	ldr	r2, [pc, #76]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bb46:	f8c2 378c 	str.w	r3, [r2, #1932]	; 0x78c
		powertrainData_dense[13].backColor = PowertrainData1BackColor;
 800bb4a:	4b13      	ldr	r3, [pc, #76]	; (800bb98 <DisplayGui_DataInit+0xc28>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	4a11      	ldr	r2, [pc, #68]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bb50:	f8c2 3794 	str.w	r3, [r2, #1940]	; 0x794
		powertrainData_dense[13].dataColor = PowertrainData1DataColor;
 800bb54:	4b11      	ldr	r3, [pc, #68]	; (800bb9c <DisplayGui_DataInit+0xc2c>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4a0e      	ldr	r2, [pc, #56]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bb5a:	f8c2 3790 	str.w	r3, [r2, #1936]	; 0x790
		powertrainData_dense[13].frameColor = PowertrainData1BackColor;
 800bb5e:	4b0e      	ldr	r3, [pc, #56]	; (800bb98 <DisplayGui_DataInit+0xc28>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a0c      	ldr	r2, [pc, #48]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bb64:	f8c2 3798 	str.w	r3, [r2, #1944]	; 0x798

		powertrainData_dense[13].dataType = DataLog_DataType_Float;
 800bb68:	4b0a      	ldr	r3, [pc, #40]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
		powertrainData_dense[13].signEnable = DISABLE;
 800bb70:	4b08      	ldr	r3, [pc, #32]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 279d 	strb.w	r2, [r3, #1949]	; 0x79d

		powertrainData_dense[13].valueControlEnable = DISABLE;
 800bb78:	4b06      	ldr	r3, [pc, #24]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 279e 	strb.w	r2, [r3, #1950]	; 0x79e
		powertrainData_dense[13].maxValue = 0;
 800bb80:	4b04      	ldr	r3, [pc, #16]	; (800bb94 <DisplayGui_DataInit+0xc24>)
 800bb82:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 800bb86:	f04f 0200 	mov.w	r2, #0
 800bb8a:	601a      	str	r2, [r3, #0]
 800bb8c:	e012      	b.n	800bbb4 <DisplayGui_DataInit+0xc44>
 800bb8e:	bf00      	nop
 800bb90:	200000e0 	.word	0x200000e0
 800bb94:	20005258 	.word	0x20005258
 800bb98:	20005d98 	.word	0x20005d98
 800bb9c:	200000e4 	.word	0x200000e4
 800bba0:	080225bc 	.word	0x080225bc
 800bba4:	0802254c 	.word	0x0802254c
 800bba8:	3ff00000 	.word	0x3ff00000
 800bbac:	080225c4 	.word	0x080225c4
 800bbb0:	080225cc 	.word	0x080225cc
		powertrainData_dense[13].minValue = 0;
 800bbb4:	4bba      	ldr	r3, [pc, #744]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bbb6:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 800bbba:	f04f 0200 	mov.w	r2, #0
 800bbbe:	601a      	str	r2, [r3, #0]

		powertrainData_dense[13].lastExeTime = 0;
 800bbc0:	4bb7      	ldr	r3, [pc, #732]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f8c3 27dc 	str.w	r2, [r3, #2012]	; 0x7dc
		powertrainData_dense[13].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800bbc8:	4bb5      	ldr	r3, [pc, #724]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bbca:	22fa      	movs	r2, #250	; 0xfa
 800bbcc:	f8a3 27c8 	strh.w	r2, [r3, #1992]	; 0x7c8
		powertrainData_dense[13].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800bbd0:	4bb3      	ldr	r3, [pc, #716]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bbd2:	22fa      	movs	r2, #250	; 0xfa
 800bbd4:	f8a3 27ca 	strh.w	r2, [r3, #1994]	; 0x7ca

		powertrainData_dense[13].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800bbd8:	4bb1      	ldr	r3, [pc, #708]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bbda:	2204      	movs	r2, #4
 800bbdc:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
		powertrainData_dense[13].blinkingFrameEnable = ENABLE;
 800bbe0:	4baf      	ldr	r3, [pc, #700]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0
		powertrainData_dense[13].blinkingBackEnable = DISABLE;
 800bbe8:	4bad      	ldr	r3, [pc, #692]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 27d1 	strb.w	r2, [r3, #2001]	; 0x7d1
		powertrainData_dense[13].blinkingOverColor = GUI_RED;
 800bbf0:	4bab      	ldr	r3, [pc, #684]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bbf2:	22ff      	movs	r2, #255	; 0xff
 800bbf4:	f8c3 27d4 	str.w	r2, [r3, #2004]	; 0x7d4
		powertrainData_dense[13].blinkingUnderColor = GUI_BLUE;
 800bbf8:	4ba9      	ldr	r3, [pc, #676]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bbfa:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800bbfe:	f8c3 27d8 	str.w	r2, [r3, #2008]	; 0x7d8



		powertrainData_dense[14].enable = ENABLE;
 800bc02:	4ba7      	ldr	r3, [pc, #668]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bc04:	2201      	movs	r2, #1
 800bc06:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0

		powertrainData_dense[14].string = "Data 15";
 800bc0a:	4ba5      	ldr	r3, [pc, #660]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bc0c:	4aa5      	ldr	r2, [pc, #660]	; (800bea4 <DisplayGui_DataInit+0xf34>)
 800bc0e:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
		powertrainData_dense[14].intStr = "";
 800bc12:	4ba3      	ldr	r3, [pc, #652]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bc14:	4aa4      	ldr	r2, [pc, #656]	; (800bea8 <DisplayGui_DataInit+0xf38>)
 800bc16:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
		powertrainData_dense[14].endStr = "";
 800bc1a:	4ba1      	ldr	r3, [pc, #644]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bc1c:	4aa2      	ldr	r2, [pc, #648]	; (800bea8 <DisplayGui_DataInit+0xf38>)
 800bc1e:	f8c3 27ec 	str.w	r2, [r3, #2028]	; 0x7ec

		powertrainData_dense[14].dataLogInt.number = 123;
 800bc22:	4b9f      	ldr	r3, [pc, #636]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bc24:	227b      	movs	r2, #123	; 0x7b
 800bc26:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
		powertrainData_dense[14].dataLogFloat.number = 1;
 800bc2a:	4b9d      	ldr	r3, [pc, #628]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bc2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc30:	4619      	mov	r1, r3
 800bc32:	f04f 0200 	mov.w	r2, #0
 800bc36:	4b9d      	ldr	r3, [pc, #628]	; (800beac <DisplayGui_DataInit+0xf3c>)
 800bc38:	e9c1 2300 	strd	r2, r3, [r1]
		powertrainData_dense[14].decimalDigits = 1;
 800bc3c:	4b98      	ldr	r3, [pc, #608]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818

		powertrainData_dense[14].textColor = PowertrainData1TextColor;
 800bc44:	4b9a      	ldr	r3, [pc, #616]	; (800beb0 <DisplayGui_DataInit+0xf40>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a95      	ldr	r2, [pc, #596]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bc4a:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
		powertrainData_dense[14].backColor = PowertrainData1BackColor;
 800bc4e:	4b99      	ldr	r3, [pc, #612]	; (800beb4 <DisplayGui_DataInit+0xf44>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4a93      	ldr	r2, [pc, #588]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bc54:	f8c2 3824 	str.w	r3, [r2, #2084]	; 0x824
		powertrainData_dense[14].dataColor = PowertrainData1DataColor;
 800bc58:	4b97      	ldr	r3, [pc, #604]	; (800beb8 <DisplayGui_DataInit+0xf48>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a90      	ldr	r2, [pc, #576]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bc5e:	f8c2 3820 	str.w	r3, [r2, #2080]	; 0x820
		powertrainData_dense[14].frameColor = PowertrainData1BackColor;
 800bc62:	4b94      	ldr	r3, [pc, #592]	; (800beb4 <DisplayGui_DataInit+0xf44>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4a8e      	ldr	r2, [pc, #568]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bc68:	f8c2 3828 	str.w	r3, [r2, #2088]	; 0x828

		powertrainData_dense[14].dataType = DataLog_DataType_Float;
 800bc6c:	4b8c      	ldr	r3, [pc, #560]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 282c 	strb.w	r2, [r3, #2092]	; 0x82c
		powertrainData_dense[14].signEnable = DISABLE;
 800bc74:	4b8a      	ldr	r3, [pc, #552]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bc76:	2200      	movs	r2, #0
 800bc78:	f883 282d 	strb.w	r2, [r3, #2093]	; 0x82d

		powertrainData_dense[14].valueControlEnable = DISABLE;
 800bc7c:	4b88      	ldr	r3, [pc, #544]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f883 282e 	strb.w	r2, [r3, #2094]	; 0x82e
		powertrainData_dense[14].maxValue = 0;
 800bc84:	4b86      	ldr	r3, [pc, #536]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bc86:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 800bc8a:	f04f 0200 	mov.w	r2, #0
 800bc8e:	601a      	str	r2, [r3, #0]
		powertrainData_dense[14].minValue = 0;
 800bc90:	4b83      	ldr	r3, [pc, #524]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bc92:	f603 0334 	addw	r3, r3, #2100	; 0x834
 800bc96:	f04f 0200 	mov.w	r2, #0
 800bc9a:	601a      	str	r2, [r3, #0]

		powertrainData_dense[14].lastExeTime = 0;
 800bc9c:	4b80      	ldr	r3, [pc, #512]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
		powertrainData_dense[14].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800bca4:	4b7e      	ldr	r3, [pc, #504]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bca6:	22fa      	movs	r2, #250	; 0xfa
 800bca8:	f8a3 2858 	strh.w	r2, [r3, #2136]	; 0x858
		powertrainData_dense[14].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800bcac:	4b7c      	ldr	r3, [pc, #496]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bcae:	22fa      	movs	r2, #250	; 0xfa
 800bcb0:	f8a3 285a 	strh.w	r2, [r3, #2138]	; 0x85a

		powertrainData_dense[14].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800bcb4:	4b7a      	ldr	r3, [pc, #488]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bcb6:	2204      	movs	r2, #4
 800bcb8:	f883 285f 	strb.w	r2, [r3, #2143]	; 0x85f
		powertrainData_dense[14].blinkingFrameEnable = ENABLE;
 800bcbc:	4b78      	ldr	r3, [pc, #480]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
		powertrainData_dense[14].blinkingBackEnable = DISABLE;
 800bcc4:	4b76      	ldr	r3, [pc, #472]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
		powertrainData_dense[14].blinkingOverColor = GUI_RED;
 800bccc:	4b74      	ldr	r3, [pc, #464]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bcce:	22ff      	movs	r2, #255	; 0xff
 800bcd0:	f8c3 2864 	str.w	r2, [r3, #2148]	; 0x864
		powertrainData_dense[14].blinkingUnderColor = GUI_BLUE;
 800bcd4:	4b72      	ldr	r3, [pc, #456]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bcd6:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800bcda:	f8c3 2868 	str.w	r2, [r3, #2152]	; 0x868



		powertrainData_dense[15].enable = ENABLE;
 800bcde:	4b70      	ldr	r3, [pc, #448]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bce0:	2201      	movs	r2, #1
 800bce2:	f883 2870 	strb.w	r2, [r3, #2160]	; 0x870

		powertrainData_dense[15].string = "Data 16";
 800bce6:	4b6e      	ldr	r3, [pc, #440]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bce8:	4a74      	ldr	r2, [pc, #464]	; (800bebc <DisplayGui_DataInit+0xf4c>)
 800bcea:	f8c3 2874 	str.w	r2, [r3, #2164]	; 0x874
		powertrainData_dense[15].intStr = "";
 800bcee:	4b6c      	ldr	r3, [pc, #432]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bcf0:	4a6d      	ldr	r2, [pc, #436]	; (800bea8 <DisplayGui_DataInit+0xf38>)
 800bcf2:	f8c3 2878 	str.w	r2, [r3, #2168]	; 0x878
		powertrainData_dense[15].endStr = "";
 800bcf6:	4b6a      	ldr	r3, [pc, #424]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bcf8:	4a6b      	ldr	r2, [pc, #428]	; (800bea8 <DisplayGui_DataInit+0xf38>)
 800bcfa:	f8c3 287c 	str.w	r2, [r3, #2172]	; 0x87c

		powertrainData_dense[15].dataLogInt.number = 123;
 800bcfe:	4b68      	ldr	r3, [pc, #416]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bd00:	227b      	movs	r2, #123	; 0x7b
 800bd02:	f8c3 2884 	str.w	r2, [r3, #2180]	; 0x884
		powertrainData_dense[15].dataLogFloat.number = 1;
 800bd06:	4b66      	ldr	r3, [pc, #408]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bd08:	f503 6309 	add.w	r3, r3, #2192	; 0x890
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	f04f 0200 	mov.w	r2, #0
 800bd12:	4b66      	ldr	r3, [pc, #408]	; (800beac <DisplayGui_DataInit+0xf3c>)
 800bd14:	e9c1 2300 	strd	r2, r3, [r1]
		powertrainData_dense[15].decimalDigits = 1;
 800bd18:	4b61      	ldr	r3, [pc, #388]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f883 28a8 	strb.w	r2, [r3, #2216]	; 0x8a8

		powertrainData_dense[15].textColor = PowertrainData1TextColor;
 800bd20:	4b63      	ldr	r3, [pc, #396]	; (800beb0 <DisplayGui_DataInit+0xf40>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a5e      	ldr	r2, [pc, #376]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bd26:	f8c2 38ac 	str.w	r3, [r2, #2220]	; 0x8ac
		powertrainData_dense[15].backColor = PowertrainData1BackColor;
 800bd2a:	4b62      	ldr	r3, [pc, #392]	; (800beb4 <DisplayGui_DataInit+0xf44>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a5c      	ldr	r2, [pc, #368]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bd30:	f8c2 38b4 	str.w	r3, [r2, #2228]	; 0x8b4
		powertrainData_dense[15].dataColor = PowertrainData1DataColor;
 800bd34:	4b60      	ldr	r3, [pc, #384]	; (800beb8 <DisplayGui_DataInit+0xf48>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a59      	ldr	r2, [pc, #356]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bd3a:	f8c2 38b0 	str.w	r3, [r2, #2224]	; 0x8b0
		powertrainData_dense[15].frameColor = PowertrainData1BackColor;
 800bd3e:	4b5d      	ldr	r3, [pc, #372]	; (800beb4 <DisplayGui_DataInit+0xf44>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a57      	ldr	r2, [pc, #348]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bd44:	f8c2 38b8 	str.w	r3, [r2, #2232]	; 0x8b8

		powertrainData_dense[15].dataType = DataLog_DataType_Float;
 800bd48:	4b55      	ldr	r3, [pc, #340]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f883 28bc 	strb.w	r2, [r3, #2236]	; 0x8bc
		powertrainData_dense[15].signEnable = DISABLE;
 800bd50:	4b53      	ldr	r3, [pc, #332]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	f883 28bd 	strb.w	r2, [r3, #2237]	; 0x8bd

		powertrainData_dense[15].valueControlEnable = DISABLE;
 800bd58:	4b51      	ldr	r3, [pc, #324]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f883 28be 	strb.w	r2, [r3, #2238]	; 0x8be
		powertrainData_dense[15].maxValue = 0;
 800bd60:	4b4f      	ldr	r3, [pc, #316]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bd62:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 800bd66:	f04f 0200 	mov.w	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]
		powertrainData_dense[15].minValue = 0;
 800bd6c:	4b4c      	ldr	r3, [pc, #304]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bd6e:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 800bd72:	f04f 0200 	mov.w	r2, #0
 800bd76:	601a      	str	r2, [r3, #0]

		powertrainData_dense[15].lastExeTime = 0;
 800bd78:	4b49      	ldr	r3, [pc, #292]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
		powertrainData_dense[15].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800bd80:	4b47      	ldr	r3, [pc, #284]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bd82:	22fa      	movs	r2, #250	; 0xfa
 800bd84:	f8a3 28e8 	strh.w	r2, [r3, #2280]	; 0x8e8
		powertrainData_dense[15].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800bd88:	4b45      	ldr	r3, [pc, #276]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bd8a:	22fa      	movs	r2, #250	; 0xfa
 800bd8c:	f8a3 28ea 	strh.w	r2, [r3, #2282]	; 0x8ea

		powertrainData_dense[15].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800bd90:	4b43      	ldr	r3, [pc, #268]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bd92:	2204      	movs	r2, #4
 800bd94:	f883 28ef 	strb.w	r2, [r3, #2287]	; 0x8ef
		powertrainData_dense[15].blinkingFrameEnable = ENABLE;
 800bd98:	4b41      	ldr	r3, [pc, #260]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	f883 28f0 	strb.w	r2, [r3, #2288]	; 0x8f0
		powertrainData_dense[15].blinkingBackEnable = DISABLE;
 800bda0:	4b3f      	ldr	r3, [pc, #252]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bda2:	2200      	movs	r2, #0
 800bda4:	f883 28f1 	strb.w	r2, [r3, #2289]	; 0x8f1
		powertrainData_dense[15].blinkingOverColor = GUI_RED;
 800bda8:	4b3d      	ldr	r3, [pc, #244]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bdaa:	22ff      	movs	r2, #255	; 0xff
 800bdac:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
		powertrainData_dense[15].blinkingUnderColor = GUI_BLUE;
 800bdb0:	4b3b      	ldr	r3, [pc, #236]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bdb2:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800bdb6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8



		powertrainData_dense[16].enable = ENABLE;
 800bdba:	4b39      	ldr	r3, [pc, #228]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900

		powertrainData_dense[16].string = "Data 17";
 800bdc2:	4b37      	ldr	r3, [pc, #220]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bdc4:	4a3e      	ldr	r2, [pc, #248]	; (800bec0 <DisplayGui_DataInit+0xf50>)
 800bdc6:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
		powertrainData_dense[16].intStr = "";
 800bdca:	4b35      	ldr	r3, [pc, #212]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bdcc:	4a36      	ldr	r2, [pc, #216]	; (800bea8 <DisplayGui_DataInit+0xf38>)
 800bdce:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
		powertrainData_dense[16].endStr = "";
 800bdd2:	4b33      	ldr	r3, [pc, #204]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bdd4:	4a34      	ldr	r2, [pc, #208]	; (800bea8 <DisplayGui_DataInit+0xf38>)
 800bdd6:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c

		powertrainData_dense[16].dataLogInt.number = 123;
 800bdda:	4b31      	ldr	r3, [pc, #196]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bddc:	227b      	movs	r2, #123	; 0x7b
 800bdde:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914
		powertrainData_dense[16].dataLogFloat.number = 1;
 800bde2:	4b2f      	ldr	r3, [pc, #188]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bde4:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 800bde8:	4619      	mov	r1, r3
 800bdea:	f04f 0200 	mov.w	r2, #0
 800bdee:	4b2f      	ldr	r3, [pc, #188]	; (800beac <DisplayGui_DataInit+0xf3c>)
 800bdf0:	e9c1 2300 	strd	r2, r3, [r1]
		powertrainData_dense[16].decimalDigits = 1;
 800bdf4:	4b2a      	ldr	r3, [pc, #168]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f883 2938 	strb.w	r2, [r3, #2360]	; 0x938

		powertrainData_dense[16].textColor = PowertrainData1TextColor;
 800bdfc:	4b2c      	ldr	r3, [pc, #176]	; (800beb0 <DisplayGui_DataInit+0xf40>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a27      	ldr	r2, [pc, #156]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800be02:	f8c2 393c 	str.w	r3, [r2, #2364]	; 0x93c
		powertrainData_dense[16].backColor = PowertrainData1BackColor;
 800be06:	4b2b      	ldr	r3, [pc, #172]	; (800beb4 <DisplayGui_DataInit+0xf44>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a25      	ldr	r2, [pc, #148]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800be0c:	f8c2 3944 	str.w	r3, [r2, #2372]	; 0x944
		powertrainData_dense[16].dataColor = PowertrainData1DataColor;
 800be10:	4b29      	ldr	r3, [pc, #164]	; (800beb8 <DisplayGui_DataInit+0xf48>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a22      	ldr	r2, [pc, #136]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800be16:	f8c2 3940 	str.w	r3, [r2, #2368]	; 0x940
		powertrainData_dense[16].frameColor = PowertrainData1BackColor;
 800be1a:	4b26      	ldr	r3, [pc, #152]	; (800beb4 <DisplayGui_DataInit+0xf44>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a20      	ldr	r2, [pc, #128]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800be20:	f8c2 3948 	str.w	r3, [r2, #2376]	; 0x948

		powertrainData_dense[16].dataType = DataLog_DataType_Float;
 800be24:	4b1e      	ldr	r3, [pc, #120]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800be26:	2201      	movs	r2, #1
 800be28:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
		powertrainData_dense[16].signEnable = DISABLE;
 800be2c:	4b1c      	ldr	r3, [pc, #112]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800be2e:	2200      	movs	r2, #0
 800be30:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d

		powertrainData_dense[16].valueControlEnable = DISABLE;
 800be34:	4b1a      	ldr	r3, [pc, #104]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800be36:	2200      	movs	r2, #0
 800be38:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
		powertrainData_dense[16].maxValue = 0;
 800be3c:	4b18      	ldr	r3, [pc, #96]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800be3e:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 800be42:	f04f 0200 	mov.w	r2, #0
 800be46:	601a      	str	r2, [r3, #0]
		powertrainData_dense[16].minValue = 0;
 800be48:	4b15      	ldr	r3, [pc, #84]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800be4a:	f603 1354 	addw	r3, r3, #2388	; 0x954
 800be4e:	f04f 0200 	mov.w	r2, #0
 800be52:	601a      	str	r2, [r3, #0]

		powertrainData_dense[16].lastExeTime = 0;
 800be54:	4b12      	ldr	r3, [pc, #72]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800be56:	2200      	movs	r2, #0
 800be58:	f8c3 298c 	str.w	r2, [r3, #2444]	; 0x98c
		powertrainData_dense[16].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800be5c:	4b10      	ldr	r3, [pc, #64]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800be5e:	22fa      	movs	r2, #250	; 0xfa
 800be60:	f8a3 2978 	strh.w	r2, [r3, #2424]	; 0x978
		powertrainData_dense[16].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800be64:	4b0e      	ldr	r3, [pc, #56]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800be66:	22fa      	movs	r2, #250	; 0xfa
 800be68:	f8a3 297a 	strh.w	r2, [r3, #2426]	; 0x97a

		powertrainData_dense[16].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800be6c:	4b0c      	ldr	r3, [pc, #48]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800be6e:	2204      	movs	r2, #4
 800be70:	f883 297f 	strb.w	r2, [r3, #2431]	; 0x97f
		powertrainData_dense[16].blinkingFrameEnable = ENABLE;
 800be74:	4b0a      	ldr	r3, [pc, #40]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800be76:	2201      	movs	r2, #1
 800be78:	f883 2980 	strb.w	r2, [r3, #2432]	; 0x980
		powertrainData_dense[16].blinkingBackEnable = DISABLE;
 800be7c:	4b08      	ldr	r3, [pc, #32]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800be7e:	2200      	movs	r2, #0
 800be80:	f883 2981 	strb.w	r2, [r3, #2433]	; 0x981
		powertrainData_dense[16].blinkingOverColor = GUI_RED;
 800be84:	4b06      	ldr	r3, [pc, #24]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800be86:	22ff      	movs	r2, #255	; 0xff
 800be88:	f8c3 2984 	str.w	r2, [r3, #2436]	; 0x984
		powertrainData_dense[16].blinkingUnderColor = GUI_BLUE;
 800be8c:	4b04      	ldr	r3, [pc, #16]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800be8e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800be92:	f8c3 2988 	str.w	r2, [r3, #2440]	; 0x988



		powertrainData_dense[17].enable = ENABLE;
 800be96:	4b02      	ldr	r3, [pc, #8]	; (800bea0 <DisplayGui_DataInit+0xf30>)
 800be98:	2201      	movs	r2, #1
 800be9a:	f883 2990 	strb.w	r2, [r3, #2448]	; 0x990
 800be9e:	e011      	b.n	800bec4 <DisplayGui_DataInit+0xf54>
 800bea0:	20005258 	.word	0x20005258
 800bea4:	080225d4 	.word	0x080225d4
 800bea8:	0802254c 	.word	0x0802254c
 800beac:	3ff00000 	.word	0x3ff00000
 800beb0:	200000e0 	.word	0x200000e0
 800beb4:	20005d98 	.word	0x20005d98
 800beb8:	200000e4 	.word	0x200000e4
 800bebc:	080225dc 	.word	0x080225dc
 800bec0:	080225e4 	.word	0x080225e4

		powertrainData_dense[17].string = "Data 18";
 800bec4:	4ba5      	ldr	r3, [pc, #660]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bec6:	4aa6      	ldr	r2, [pc, #664]	; (800c160 <DisplayGui_DataInit+0x11f0>)
 800bec8:	f8c3 2994 	str.w	r2, [r3, #2452]	; 0x994
		powertrainData_dense[17].intStr = "";
 800becc:	4ba3      	ldr	r3, [pc, #652]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bece:	4aa5      	ldr	r2, [pc, #660]	; (800c164 <DisplayGui_DataInit+0x11f4>)
 800bed0:	f8c3 2998 	str.w	r2, [r3, #2456]	; 0x998
		powertrainData_dense[17].endStr = "";
 800bed4:	4ba1      	ldr	r3, [pc, #644]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bed6:	4aa3      	ldr	r2, [pc, #652]	; (800c164 <DisplayGui_DataInit+0x11f4>)
 800bed8:	f8c3 299c 	str.w	r2, [r3, #2460]	; 0x99c

		powertrainData_dense[17].dataLogInt.number = 123;
 800bedc:	4b9f      	ldr	r3, [pc, #636]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bede:	227b      	movs	r2, #123	; 0x7b
 800bee0:	f8c3 29a4 	str.w	r2, [r3, #2468]	; 0x9a4
		powertrainData_dense[17].dataLogFloat.number = 1;
 800bee4:	4b9d      	ldr	r3, [pc, #628]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bee6:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 800beea:	4619      	mov	r1, r3
 800beec:	f04f 0200 	mov.w	r2, #0
 800bef0:	4b9d      	ldr	r3, [pc, #628]	; (800c168 <DisplayGui_DataInit+0x11f8>)
 800bef2:	e9c1 2300 	strd	r2, r3, [r1]
		powertrainData_dense[17].decimalDigits = 1;
 800bef6:	4b99      	ldr	r3, [pc, #612]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bef8:	2201      	movs	r2, #1
 800befa:	f883 29c8 	strb.w	r2, [r3, #2504]	; 0x9c8

		powertrainData_dense[17].textColor = PowertrainData1TextColor;
 800befe:	4b9b      	ldr	r3, [pc, #620]	; (800c16c <DisplayGui_DataInit+0x11fc>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a96      	ldr	r2, [pc, #600]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bf04:	f8c2 39cc 	str.w	r3, [r2, #2508]	; 0x9cc
		powertrainData_dense[17].backColor = PowertrainData1BackColor;
 800bf08:	4b99      	ldr	r3, [pc, #612]	; (800c170 <DisplayGui_DataInit+0x1200>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a93      	ldr	r2, [pc, #588]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bf0e:	f8c2 39d4 	str.w	r3, [r2, #2516]	; 0x9d4
		powertrainData_dense[17].dataColor = PowertrainData1DataColor;
 800bf12:	4b98      	ldr	r3, [pc, #608]	; (800c174 <DisplayGui_DataInit+0x1204>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a91      	ldr	r2, [pc, #580]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bf18:	f8c2 39d0 	str.w	r3, [r2, #2512]	; 0x9d0
		powertrainData_dense[17].frameColor = PowertrainData1BackColor;
 800bf1c:	4b94      	ldr	r3, [pc, #592]	; (800c170 <DisplayGui_DataInit+0x1200>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a8e      	ldr	r2, [pc, #568]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bf22:	f8c2 39d8 	str.w	r3, [r2, #2520]	; 0x9d8

		powertrainData_dense[17].dataType = DataLog_DataType_Float;
 800bf26:	4b8d      	ldr	r3, [pc, #564]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bf28:	2201      	movs	r2, #1
 800bf2a:	f883 29dc 	strb.w	r2, [r3, #2524]	; 0x9dc
		powertrainData_dense[17].signEnable = DISABLE;
 800bf2e:	4b8b      	ldr	r3, [pc, #556]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 29dd 	strb.w	r2, [r3, #2525]	; 0x9dd

		powertrainData_dense[17].valueControlEnable = DISABLE;
 800bf36:	4b89      	ldr	r3, [pc, #548]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 29de 	strb.w	r2, [r3, #2526]	; 0x9de
		powertrainData_dense[17].maxValue = 0;
 800bf3e:	4b87      	ldr	r3, [pc, #540]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bf40:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 800bf44:	f04f 0200 	mov.w	r2, #0
 800bf48:	601a      	str	r2, [r3, #0]
		powertrainData_dense[17].minValue = 0;
 800bf4a:	4b84      	ldr	r3, [pc, #528]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bf4c:	f603 13e4 	addw	r3, r3, #2532	; 0x9e4
 800bf50:	f04f 0200 	mov.w	r2, #0
 800bf54:	601a      	str	r2, [r3, #0]

		powertrainData_dense[17].lastExeTime = 0;
 800bf56:	4b81      	ldr	r3, [pc, #516]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f8c3 2a1c 	str.w	r2, [r3, #2588]	; 0xa1c
		powertrainData_dense[17].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800bf5e:	4b7f      	ldr	r3, [pc, #508]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bf60:	22fa      	movs	r2, #250	; 0xfa
 800bf62:	f8a3 2a08 	strh.w	r2, [r3, #2568]	; 0xa08
		powertrainData_dense[17].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800bf66:	4b7d      	ldr	r3, [pc, #500]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bf68:	22fa      	movs	r2, #250	; 0xfa
 800bf6a:	f8a3 2a0a 	strh.w	r2, [r3, #2570]	; 0xa0a

		powertrainData_dense[17].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800bf6e:	4b7b      	ldr	r3, [pc, #492]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bf70:	2204      	movs	r2, #4
 800bf72:	f883 2a0f 	strb.w	r2, [r3, #2575]	; 0xa0f
		powertrainData_dense[17].blinkingFrameEnable = ENABLE;
 800bf76:	4b79      	ldr	r3, [pc, #484]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bf78:	2201      	movs	r2, #1
 800bf7a:	f883 2a10 	strb.w	r2, [r3, #2576]	; 0xa10
		powertrainData_dense[17].blinkingBackEnable = DISABLE;
 800bf7e:	4b77      	ldr	r3, [pc, #476]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bf80:	2200      	movs	r2, #0
 800bf82:	f883 2a11 	strb.w	r2, [r3, #2577]	; 0xa11
		powertrainData_dense[17].blinkingOverColor = GUI_RED;
 800bf86:	4b75      	ldr	r3, [pc, #468]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bf88:	22ff      	movs	r2, #255	; 0xff
 800bf8a:	f8c3 2a14 	str.w	r2, [r3, #2580]	; 0xa14
		powertrainData_dense[17].blinkingUnderColor = GUI_BLUE;
 800bf8e:	4b73      	ldr	r3, [pc, #460]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bf90:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800bf94:	f8c3 2a18 	str.w	r2, [r3, #2584]	; 0xa18



		powertrainData_dense[18].enable = ENABLE;
 800bf98:	4b70      	ldr	r3, [pc, #448]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f883 2a20 	strb.w	r2, [r3, #2592]	; 0xa20

		powertrainData_dense[18].string = "Data 19";
 800bfa0:	4b6e      	ldr	r3, [pc, #440]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bfa2:	4a75      	ldr	r2, [pc, #468]	; (800c178 <DisplayGui_DataInit+0x1208>)
 800bfa4:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
		powertrainData_dense[18].intStr = "";
 800bfa8:	4b6c      	ldr	r3, [pc, #432]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bfaa:	4a6e      	ldr	r2, [pc, #440]	; (800c164 <DisplayGui_DataInit+0x11f4>)
 800bfac:	f8c3 2a28 	str.w	r2, [r3, #2600]	; 0xa28
		powertrainData_dense[18].endStr = "";
 800bfb0:	4b6a      	ldr	r3, [pc, #424]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bfb2:	4a6c      	ldr	r2, [pc, #432]	; (800c164 <DisplayGui_DataInit+0x11f4>)
 800bfb4:	f8c3 2a2c 	str.w	r2, [r3, #2604]	; 0xa2c

		powertrainData_dense[18].dataLogInt.number = 123;
 800bfb8:	4b68      	ldr	r3, [pc, #416]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bfba:	227b      	movs	r2, #123	; 0x7b
 800bfbc:	f8c3 2a34 	str.w	r2, [r3, #2612]	; 0xa34
		powertrainData_dense[18].dataLogFloat.number = 1;
 800bfc0:	4b66      	ldr	r3, [pc, #408]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bfc2:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	f04f 0200 	mov.w	r2, #0
 800bfcc:	4b66      	ldr	r3, [pc, #408]	; (800c168 <DisplayGui_DataInit+0x11f8>)
 800bfce:	e9c1 2300 	strd	r2, r3, [r1]
		powertrainData_dense[18].decimalDigits = 1;
 800bfd2:	4b62      	ldr	r3, [pc, #392]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	f883 2a58 	strb.w	r2, [r3, #2648]	; 0xa58

		powertrainData_dense[18].textColor = PowertrainData1TextColor;
 800bfda:	4b64      	ldr	r3, [pc, #400]	; (800c16c <DisplayGui_DataInit+0x11fc>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a5f      	ldr	r2, [pc, #380]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bfe0:	f8c2 3a5c 	str.w	r3, [r2, #2652]	; 0xa5c
		powertrainData_dense[18].backColor = PowertrainData1BackColor;
 800bfe4:	4b62      	ldr	r3, [pc, #392]	; (800c170 <DisplayGui_DataInit+0x1200>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a5c      	ldr	r2, [pc, #368]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bfea:	f8c2 3a64 	str.w	r3, [r2, #2660]	; 0xa64
		powertrainData_dense[18].dataColor = PowertrainData1DataColor;
 800bfee:	4b61      	ldr	r3, [pc, #388]	; (800c174 <DisplayGui_DataInit+0x1204>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4a5a      	ldr	r2, [pc, #360]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bff4:	f8c2 3a60 	str.w	r3, [r2, #2656]	; 0xa60
		powertrainData_dense[18].frameColor = PowertrainData1BackColor;
 800bff8:	4b5d      	ldr	r3, [pc, #372]	; (800c170 <DisplayGui_DataInit+0x1200>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a57      	ldr	r2, [pc, #348]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800bffe:	f8c2 3a68 	str.w	r3, [r2, #2664]	; 0xa68

		powertrainData_dense[18].dataType = DataLog_DataType_Float;
 800c002:	4b56      	ldr	r3, [pc, #344]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c004:	2201      	movs	r2, #1
 800c006:	f883 2a6c 	strb.w	r2, [r3, #2668]	; 0xa6c
		powertrainData_dense[18].signEnable = DISABLE;
 800c00a:	4b54      	ldr	r3, [pc, #336]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c00c:	2200      	movs	r2, #0
 800c00e:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d

		powertrainData_dense[18].valueControlEnable = DISABLE;
 800c012:	4b52      	ldr	r3, [pc, #328]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c014:	2200      	movs	r2, #0
 800c016:	f883 2a6e 	strb.w	r2, [r3, #2670]	; 0xa6e
		powertrainData_dense[18].maxValue = 0;
 800c01a:	4b50      	ldr	r3, [pc, #320]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c01c:	f503 6327 	add.w	r3, r3, #2672	; 0xa70
 800c020:	f04f 0200 	mov.w	r2, #0
 800c024:	601a      	str	r2, [r3, #0]
		powertrainData_dense[18].minValue = 0;
 800c026:	4b4d      	ldr	r3, [pc, #308]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c028:	f603 2374 	addw	r3, r3, #2676	; 0xa74
 800c02c:	f04f 0200 	mov.w	r2, #0
 800c030:	601a      	str	r2, [r3, #0]

		powertrainData_dense[18].lastExeTime = 0;
 800c032:	4b4a      	ldr	r3, [pc, #296]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c034:	2200      	movs	r2, #0
 800c036:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
		powertrainData_dense[18].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800c03a:	4b48      	ldr	r3, [pc, #288]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c03c:	22fa      	movs	r2, #250	; 0xfa
 800c03e:	f8a3 2a98 	strh.w	r2, [r3, #2712]	; 0xa98
		powertrainData_dense[18].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800c042:	4b46      	ldr	r3, [pc, #280]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c044:	22fa      	movs	r2, #250	; 0xfa
 800c046:	f8a3 2a9a 	strh.w	r2, [r3, #2714]	; 0xa9a

		powertrainData_dense[18].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800c04a:	4b44      	ldr	r3, [pc, #272]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c04c:	2204      	movs	r2, #4
 800c04e:	f883 2a9f 	strb.w	r2, [r3, #2719]	; 0xa9f
		powertrainData_dense[18].blinkingFrameEnable = ENABLE;
 800c052:	4b42      	ldr	r3, [pc, #264]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c054:	2201      	movs	r2, #1
 800c056:	f883 2aa0 	strb.w	r2, [r3, #2720]	; 0xaa0
		powertrainData_dense[18].blinkingBackEnable = DISABLE;
 800c05a:	4b40      	ldr	r3, [pc, #256]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c05c:	2200      	movs	r2, #0
 800c05e:	f883 2aa1 	strb.w	r2, [r3, #2721]	; 0xaa1
		powertrainData_dense[18].blinkingOverColor = GUI_RED;
 800c062:	4b3e      	ldr	r3, [pc, #248]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c064:	22ff      	movs	r2, #255	; 0xff
 800c066:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
		powertrainData_dense[18].blinkingUnderColor = GUI_BLUE;
 800c06a:	4b3c      	ldr	r3, [pc, #240]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c06c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800c070:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8



		powertrainData_dense[19].enable = ENABLE;
 800c074:	4b39      	ldr	r3, [pc, #228]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c076:	2201      	movs	r2, #1
 800c078:	f883 2ab0 	strb.w	r2, [r3, #2736]	; 0xab0

		powertrainData_dense[19].string = "Data 20";
 800c07c:	4b37      	ldr	r3, [pc, #220]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c07e:	4a3f      	ldr	r2, [pc, #252]	; (800c17c <DisplayGui_DataInit+0x120c>)
 800c080:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
		powertrainData_dense[19].intStr = "";
 800c084:	4b35      	ldr	r3, [pc, #212]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c086:	4a37      	ldr	r2, [pc, #220]	; (800c164 <DisplayGui_DataInit+0x11f4>)
 800c088:	f8c3 2ab8 	str.w	r2, [r3, #2744]	; 0xab8
		powertrainData_dense[19].endStr = "";
 800c08c:	4b33      	ldr	r3, [pc, #204]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c08e:	4a35      	ldr	r2, [pc, #212]	; (800c164 <DisplayGui_DataInit+0x11f4>)
 800c090:	f8c3 2abc 	str.w	r2, [r3, #2748]	; 0xabc

		powertrainData_dense[19].dataLogInt.number = 123;
 800c094:	4b31      	ldr	r3, [pc, #196]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c096:	227b      	movs	r2, #123	; 0x7b
 800c098:	f8c3 2ac4 	str.w	r2, [r3, #2756]	; 0xac4
		powertrainData_dense[19].dataLogFloat.number = 1;
 800c09c:	4b2f      	ldr	r3, [pc, #188]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c09e:	f503 632d 	add.w	r3, r3, #2768	; 0xad0
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	f04f 0200 	mov.w	r2, #0
 800c0a8:	4b2f      	ldr	r3, [pc, #188]	; (800c168 <DisplayGui_DataInit+0x11f8>)
 800c0aa:	e9c1 2300 	strd	r2, r3, [r1]
		powertrainData_dense[19].decimalDigits = 1;
 800c0ae:	4b2b      	ldr	r3, [pc, #172]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	f883 2ae8 	strb.w	r2, [r3, #2792]	; 0xae8

		powertrainData_dense[19].textColor = PowertrainData1TextColor;
 800c0b6:	4b2d      	ldr	r3, [pc, #180]	; (800c16c <DisplayGui_DataInit+0x11fc>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a28      	ldr	r2, [pc, #160]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c0bc:	f8c2 3aec 	str.w	r3, [r2, #2796]	; 0xaec
		powertrainData_dense[19].backColor = PowertrainData1BackColor;
 800c0c0:	4b2b      	ldr	r3, [pc, #172]	; (800c170 <DisplayGui_DataInit+0x1200>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a25      	ldr	r2, [pc, #148]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c0c6:	f8c2 3af4 	str.w	r3, [r2, #2804]	; 0xaf4
		powertrainData_dense[19].dataColor = PowertrainData1DataColor;
 800c0ca:	4b2a      	ldr	r3, [pc, #168]	; (800c174 <DisplayGui_DataInit+0x1204>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4a23      	ldr	r2, [pc, #140]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c0d0:	f8c2 3af0 	str.w	r3, [r2, #2800]	; 0xaf0
		powertrainData_dense[19].frameColor = PowertrainData1BackColor;
 800c0d4:	4b26      	ldr	r3, [pc, #152]	; (800c170 <DisplayGui_DataInit+0x1200>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4a20      	ldr	r2, [pc, #128]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c0da:	f8c2 3af8 	str.w	r3, [r2, #2808]	; 0xaf8

		powertrainData_dense[19].dataType = DataLog_DataType_Float;
 800c0de:	4b1f      	ldr	r3, [pc, #124]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 2afc 	strb.w	r2, [r3, #2812]	; 0xafc
		powertrainData_dense[19].signEnable = DISABLE;
 800c0e6:	4b1d      	ldr	r3, [pc, #116]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f883 2afd 	strb.w	r2, [r3, #2813]	; 0xafd

		powertrainData_dense[19].valueControlEnable = DISABLE;
 800c0ee:	4b1b      	ldr	r3, [pc, #108]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f883 2afe 	strb.w	r2, [r3, #2814]	; 0xafe
		powertrainData_dense[19].maxValue = 0;
 800c0f6:	4b19      	ldr	r3, [pc, #100]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c0f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0fc:	f04f 0200 	mov.w	r2, #0
 800c100:	601a      	str	r2, [r3, #0]
		powertrainData_dense[19].minValue = 0;
 800c102:	4b16      	ldr	r3, [pc, #88]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c104:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 800c108:	f04f 0200 	mov.w	r2, #0
 800c10c:	601a      	str	r2, [r3, #0]

		powertrainData_dense[19].lastExeTime = 0;
 800c10e:	4b13      	ldr	r3, [pc, #76]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c110:	2200      	movs	r2, #0
 800c112:	f8c3 2b3c 	str.w	r2, [r3, #2876]	; 0xb3c
		powertrainData_dense[19].blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800c116:	4b11      	ldr	r3, [pc, #68]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c118:	22fa      	movs	r2, #250	; 0xfa
 800c11a:	f8a3 2b28 	strh.w	r2, [r3, #2856]	; 0xb28
		powertrainData_dense[19].blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800c11e:	4b0f      	ldr	r3, [pc, #60]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c120:	22fa      	movs	r2, #250	; 0xfa
 800c122:	f8a3 2b2a 	strh.w	r2, [r3, #2858]	; 0xb2a

		powertrainData_dense[19].blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800c126:	4b0d      	ldr	r3, [pc, #52]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c128:	2204      	movs	r2, #4
 800c12a:	f883 2b2f 	strb.w	r2, [r3, #2863]	; 0xb2f
		powertrainData_dense[19].blinkingFrameEnable = ENABLE;
 800c12e:	4b0b      	ldr	r3, [pc, #44]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c130:	2201      	movs	r2, #1
 800c132:	f883 2b30 	strb.w	r2, [r3, #2864]	; 0xb30
		powertrainData_dense[19].blinkingBackEnable = DISABLE;
 800c136:	4b09      	ldr	r3, [pc, #36]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c138:	2200      	movs	r2, #0
 800c13a:	f883 2b31 	strb.w	r2, [r3, #2865]	; 0xb31
		powertrainData_dense[19].blinkingOverColor = GUI_RED;
 800c13e:	4b07      	ldr	r3, [pc, #28]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c140:	22ff      	movs	r2, #255	; 0xff
 800c142:	f8c3 2b34 	str.w	r2, [r3, #2868]	; 0xb34
		powertrainData_dense[19].blinkingUnderColor = GUI_BLUE;
 800c146:	4b05      	ldr	r3, [pc, #20]	; (800c15c <DisplayGui_DataInit+0x11ec>)
 800c148:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800c14c:	f8c3 2b38 	str.w	r2, [r3, #2872]	; 0xb38

	}
}
 800c150:	bf00      	nop
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	20005258 	.word	0x20005258
 800c160:	080225ec 	.word	0x080225ec
 800c164:	0802254c 	.word	0x0802254c
 800c168:	3ff00000 	.word	0x3ff00000
 800c16c:	200000e0 	.word	0x200000e0
 800c170:	20005d98 	.word	0x20005d98
 800c174:	200000e4 	.word	0x200000e4
 800c178:	080225f4 	.word	0x080225f4
 800c17c:	080225fc 	.word	0x080225fc

0800c180 <DisplayGui_DataRefresh>:


void DisplayGui_DataRefresh(void)
{
 800c180:	b480      	push	{r7}
 800c182:	af00      	add	r7, sp, #0
	powertrainData_dense[0].dataLogFloat.number = 0;
 800c184:	498a      	ldr	r1, [pc, #552]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c186:	f04f 0200 	mov.w	r2, #0
 800c18a:	f04f 0300 	mov.w	r3, #0
 800c18e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	powertrainData_dense[0].dataLogInt.number = 123;
 800c192:	4b87      	ldr	r3, [pc, #540]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c194:	227b      	movs	r2, #123	; 0x7b
 800c196:	615a      	str	r2, [r3, #20]

	powertrainData_dense[1].dataLogFloat.number = 0;
 800c198:	4985      	ldr	r1, [pc, #532]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c19a:	f04f 0200 	mov.w	r2, #0
 800c19e:	f04f 0300 	mov.w	r3, #0
 800c1a2:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
	powertrainData_dense[1].dataLogInt.number = 2;
 800c1a6:	4b82      	ldr	r3, [pc, #520]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c1a8:	2202      	movs	r2, #2
 800c1aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	powertrainData_dense[2].dataLogFloat.number = 0;
 800c1ae:	4980      	ldr	r1, [pc, #512]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c1b0:	f04f 0200 	mov.w	r2, #0
 800c1b4:	f04f 0300 	mov.w	r3, #0
 800c1b8:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
	powertrainData_dense[2].dataLogInt.number = 123;
 800c1bc:	4b7c      	ldr	r3, [pc, #496]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c1be:	227b      	movs	r2, #123	; 0x7b
 800c1c0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

	powertrainData_dense[3].dataLogFloat.number = 0.7;
 800c1c4:	497a      	ldr	r1, [pc, #488]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c1c6:	a372      	add	r3, pc, #456	; (adr r3, 800c390 <DisplayGui_DataRefresh+0x210>)
 800c1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1cc:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
	powertrainData_dense[3].dataLogInt.number = 123;
 800c1d0:	4b77      	ldr	r3, [pc, #476]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c1d2:	227b      	movs	r2, #123	; 0x7b
 800c1d4:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

	powertrainData_dense[4].dataLogFloat.number = 1.23456789;
 800c1d8:	4975      	ldr	r1, [pc, #468]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c1da:	a36f      	add	r3, pc, #444	; (adr r3, 800c398 <DisplayGui_DataRefresh+0x218>)
 800c1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e0:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
	powertrainData_dense[4].dataLogInt.number = 123;
 800c1e4:	4b72      	ldr	r3, [pc, #456]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c1e6:	227b      	movs	r2, #123	; 0x7b
 800c1e8:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254

	powertrainData_dense[5].dataLogFloat.number = 0;
 800c1ec:	4970      	ldr	r1, [pc, #448]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c1ee:	f04f 0200 	mov.w	r2, #0
 800c1f2:	f04f 0300 	mov.w	r3, #0
 800c1f6:	e9c1 23bc 	strd	r2, r3, [r1, #752]	; 0x2f0
	powertrainData_dense[5].dataLogInt.number = 123;
 800c1fa:	4b6d      	ldr	r3, [pc, #436]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c1fc:	227b      	movs	r2, #123	; 0x7b
 800c1fe:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4

	powertrainData_dense[6].dataLogFloat.number = 0;
 800c202:	496b      	ldr	r1, [pc, #428]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c204:	f04f 0200 	mov.w	r2, #0
 800c208:	f04f 0300 	mov.w	r3, #0
 800c20c:	e9c1 23e0 	strd	r2, r3, [r1, #896]	; 0x380
	powertrainData_dense[6].dataLogInt.number = 123;
 800c210:	4b67      	ldr	r3, [pc, #412]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c212:	227b      	movs	r2, #123	; 0x7b
 800c214:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374

	powertrainData_dense[7].dataLogFloat.number = 64.2;
 800c218:	4b65      	ldr	r3, [pc, #404]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c21a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800c21e:	4619      	mov	r1, r3
 800c220:	a35f      	add	r3, pc, #380	; (adr r3, 800c3a0 <DisplayGui_DataRefresh+0x220>)
 800c222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c226:	e9c1 2300 	strd	r2, r3, [r1]
	powertrainData_dense[7].dataLogInt.number = 123;
 800c22a:	4b61      	ldr	r3, [pc, #388]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c22c:	227b      	movs	r2, #123	; 0x7b
 800c22e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

	powertrainData_dense[8].dataLogFloat.number = 123.456789;
 800c232:	4b5f      	ldr	r3, [pc, #380]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c234:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800c238:	4619      	mov	r1, r3
 800c23a:	a35b      	add	r3, pc, #364	; (adr r3, 800c3a8 <DisplayGui_DataRefresh+0x228>)
 800c23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c240:	e9c1 2300 	strd	r2, r3, [r1]
	powertrainData_dense[8].dataLogInt.number = 123;
 800c244:	4b5a      	ldr	r3, [pc, #360]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c246:	227b      	movs	r2, #123	; 0x7b
 800c248:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

	powertrainData_dense[9].dataLogFloat.number = 0;
 800c24c:	4b58      	ldr	r3, [pc, #352]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c24e:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800c252:	4619      	mov	r1, r3
 800c254:	f04f 0200 	mov.w	r2, #0
 800c258:	f04f 0300 	mov.w	r3, #0
 800c25c:	e9c1 2300 	strd	r2, r3, [r1]
	powertrainData_dense[9].dataLogInt.number = 123;
 800c260:	4b53      	ldr	r3, [pc, #332]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c262:	227b      	movs	r2, #123	; 0x7b
 800c264:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524

	powertrainData_dense[10].dataLogFloat.number = 0;
 800c268:	4b51      	ldr	r3, [pc, #324]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c26a:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 800c26e:	4619      	mov	r1, r3
 800c270:	f04f 0200 	mov.w	r2, #0
 800c274:	f04f 0300 	mov.w	r3, #0
 800c278:	e9c1 2300 	strd	r2, r3, [r1]
	powertrainData_dense[10].dataLogInt.number = 123;
 800c27c:	4b4c      	ldr	r3, [pc, #304]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c27e:	227b      	movs	r2, #123	; 0x7b
 800c280:	f8c3 25b4 	str.w	r2, [r3, #1460]	; 0x5b4

	powertrainData_dense[11].dataLogFloat.number = 0;
 800c284:	4b4a      	ldr	r3, [pc, #296]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c286:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800c28a:	4619      	mov	r1, r3
 800c28c:	f04f 0200 	mov.w	r2, #0
 800c290:	f04f 0300 	mov.w	r3, #0
 800c294:	e9c1 2300 	strd	r2, r3, [r1]
	powertrainData_dense[11].dataLogInt.number = 123;
 800c298:	4b45      	ldr	r3, [pc, #276]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c29a:	227b      	movs	r2, #123	; 0x7b
 800c29c:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644

	powertrainData_dense[12].dataLogFloat.number = 0;
 800c2a0:	4b43      	ldr	r3, [pc, #268]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c2a2:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	f04f 0200 	mov.w	r2, #0
 800c2ac:	f04f 0300 	mov.w	r3, #0
 800c2b0:	e9c1 2300 	strd	r2, r3, [r1]
	powertrainData_dense[12].dataLogInt.number = 123;
 800c2b4:	4b3e      	ldr	r3, [pc, #248]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c2b6:	227b      	movs	r2, #123	; 0x7b
 800c2b8:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4

	powertrainData_dense[13].dataLogFloat.number = 0;
 800c2bc:	4b3c      	ldr	r3, [pc, #240]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c2be:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	f04f 0200 	mov.w	r2, #0
 800c2c8:	f04f 0300 	mov.w	r3, #0
 800c2cc:	e9c1 2300 	strd	r2, r3, [r1]
	powertrainData_dense[13].dataLogInt.number = 123;
 800c2d0:	4b37      	ldr	r3, [pc, #220]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c2d2:	227b      	movs	r2, #123	; 0x7b
 800c2d4:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764

	powertrainData_dense[14].dataLogFloat.number = 0;
 800c2d8:	4b35      	ldr	r3, [pc, #212]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c2da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2de:	4619      	mov	r1, r3
 800c2e0:	f04f 0200 	mov.w	r2, #0
 800c2e4:	f04f 0300 	mov.w	r3, #0
 800c2e8:	e9c1 2300 	strd	r2, r3, [r1]
	powertrainData_dense[14].dataLogInt.number = 123;
 800c2ec:	4b30      	ldr	r3, [pc, #192]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c2ee:	227b      	movs	r2, #123	; 0x7b
 800c2f0:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4

	powertrainData_dense[15].dataLogFloat.number = 0;
 800c2f4:	4b2e      	ldr	r3, [pc, #184]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c2f6:	f503 6309 	add.w	r3, r3, #2192	; 0x890
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	f04f 0200 	mov.w	r2, #0
 800c300:	f04f 0300 	mov.w	r3, #0
 800c304:	e9c1 2300 	strd	r2, r3, [r1]
	powertrainData_dense[15].dataLogInt.number = 123;
 800c308:	4b29      	ldr	r3, [pc, #164]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c30a:	227b      	movs	r2, #123	; 0x7b
 800c30c:	f8c3 2884 	str.w	r2, [r3, #2180]	; 0x884

	powertrainData_dense[16].dataLogFloat.number = 0;
 800c310:	4b27      	ldr	r3, [pc, #156]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c312:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 800c316:	4619      	mov	r1, r3
 800c318:	f04f 0200 	mov.w	r2, #0
 800c31c:	f04f 0300 	mov.w	r3, #0
 800c320:	e9c1 2300 	strd	r2, r3, [r1]
	powertrainData_dense[16].dataLogInt.number = 123;
 800c324:	4b22      	ldr	r3, [pc, #136]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c326:	227b      	movs	r2, #123	; 0x7b
 800c328:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914

	powertrainData_dense[17].dataLogFloat.number = 0;
 800c32c:	4b20      	ldr	r3, [pc, #128]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c32e:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 800c332:	4619      	mov	r1, r3
 800c334:	f04f 0200 	mov.w	r2, #0
 800c338:	f04f 0300 	mov.w	r3, #0
 800c33c:	e9c1 2300 	strd	r2, r3, [r1]
	powertrainData_dense[17].dataLogInt.number = 123;
 800c340:	4b1b      	ldr	r3, [pc, #108]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c342:	227b      	movs	r2, #123	; 0x7b
 800c344:	f8c3 29a4 	str.w	r2, [r3, #2468]	; 0x9a4

	powertrainData_dense[18].dataLogFloat.number = 0;
 800c348:	4b19      	ldr	r3, [pc, #100]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c34a:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 800c34e:	4619      	mov	r1, r3
 800c350:	f04f 0200 	mov.w	r2, #0
 800c354:	f04f 0300 	mov.w	r3, #0
 800c358:	e9c1 2300 	strd	r2, r3, [r1]
	powertrainData_dense[18].dataLogInt.number = 123;
 800c35c:	4b14      	ldr	r3, [pc, #80]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c35e:	227b      	movs	r2, #123	; 0x7b
 800c360:	f8c3 2a34 	str.w	r2, [r3, #2612]	; 0xa34

	powertrainData_dense[19].dataLogFloat.number = 0;
 800c364:	4b12      	ldr	r3, [pc, #72]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c366:	f503 632d 	add.w	r3, r3, #2768	; 0xad0
 800c36a:	4619      	mov	r1, r3
 800c36c:	f04f 0200 	mov.w	r2, #0
 800c370:	f04f 0300 	mov.w	r3, #0
 800c374:	e9c1 2300 	strd	r2, r3, [r1]
	powertrainData_dense[19].dataLogInt.number = 123;
 800c378:	4b0d      	ldr	r3, [pc, #52]	; (800c3b0 <DisplayGui_DataRefresh+0x230>)
 800c37a:	227b      	movs	r2, #123	; 0x7b
 800c37c:	f8c3 2ac4 	str.w	r2, [r3, #2756]	; 0xac4
}
 800c380:	bf00      	nop
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	f3af 8000 	nop.w
 800c390:	66666666 	.word	0x66666666
 800c394:	3fe66666 	.word	0x3fe66666
 800c398:	4283de1b 	.word	0x4283de1b
 800c39c:	3ff3c0ca 	.word	0x3ff3c0ca
 800c3a0:	cccccccd 	.word	0xcccccccd
 800c3a4:	40500ccc 	.word	0x40500ccc
 800c3a8:	07ee0b0b 	.word	0x07ee0b0b
 800c3ac:	405edd3c 	.word	0x405edd3c
 800c3b0:	20005258 	.word	0x20005258

0800c3b4 <DisplayGui_Intro>:

void DisplayGui_Intro(void)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	af00      	add	r7, sp, #0
	GUI_SetTextAlign(GUI_TA_HCENTER);
 800c3b8:	2002      	movs	r0, #2
 800c3ba:	f010 fc7f 	bl	801ccbc <GUI_SetTextAlign>

	GUI_SetColor(GUI_WHITE);
 800c3be:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c3c2:	f010 fcb3 	bl	801cd2c <GUI_SetColor>

	GUI_SetFont(&GUI_Font32B_1);
 800c3c6:	480e      	ldr	r0, [pc, #56]	; (800c400 <DisplayGui_Intro+0x4c>)
 800c3c8:	f010 fc82 	bl	801ccd0 <GUI_SetFont>
	GUI_DispStringAt("Powertrain Data", 236, 50);
 800c3cc:	2232      	movs	r2, #50	; 0x32
 800c3ce:	21ec      	movs	r1, #236	; 0xec
 800c3d0:	480c      	ldr	r0, [pc, #48]	; (800c404 <DisplayGui_Intro+0x50>)
 800c3d2:	f011 fb89 	bl	801dae8 <GUI_DispStringAt>

	GUI_SetFont(&GUI_FontD80);
 800c3d6:	480c      	ldr	r0, [pc, #48]	; (800c408 <DisplayGui_Intro+0x54>)
 800c3d8:	f010 fc7a 	bl	801ccd0 <GUI_SetFont>
	GUI_DispDecAt(1, 214, 90, 1);
 800c3dc:	2301      	movs	r3, #1
 800c3de:	225a      	movs	r2, #90	; 0x5a
 800c3e0:	21d6      	movs	r1, #214	; 0xd6
 800c3e2:	2001      	movs	r0, #1
 800c3e4:	f010 fbb2 	bl	801cb4c <GUI_DispDecAt>

	GUI_SetTextAlign(GUI_TA_LEFT);
 800c3e8:	2000      	movs	r0, #0
 800c3ea:	f010 fc67 	bl	801ccbc <GUI_SetTextAlign>

	GUI_SetColor(GUI_WHITE);
 800c3ee:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c3f2:	f010 fc9b 	bl	801cd2c <GUI_SetColor>
	GUI_SetBkColor(GUI_BLACK);
 800c3f6:	2000      	movs	r0, #0
 800c3f8:	f010 fc96 	bl	801cd28 <GUI_SetBkColor>
}
 800c3fc:	bf00      	nop
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	08127b30 	.word	0x08127b30
 800c404:	08022604 	.word	0x08022604
 800c408:	0811e510 	.word	0x0811e510

0800c40c <DisplayGui_TestDrive>:
static void DisplayGui_TestDriveArmature(void);

extern GUI_CONST_STORAGE GUI_FONT GUI_FontGearboxFont112;

void DisplayGui_TestDrive(void)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b086      	sub	sp, #24
 800c410:	af06      	add	r7, sp, #24
	//DisplayGui_TestDriveArmature();

	GUI_SetColor(GUI_WHITE);
 800c412:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c416:	f010 fc89 	bl	801cd2c <GUI_SetColor>
	GUI_SetFont(&GUI_FontGearboxFont112);
 800c41a:	482b      	ldr	r0, [pc, #172]	; (800c4c8 <DisplayGui_TestDrive+0xbc>)
 800c41c:	f010 fc58 	bl	801ccd0 <GUI_SetFont>

	static uint8_t gear = 0;
	static uint32_t timerToIncrement = 0;

	if(millis >= timerToIncrement + 1000)
 800c420:	4b2a      	ldr	r3, [pc, #168]	; (800c4cc <DisplayGui_TestDrive+0xc0>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800c428:	4b29      	ldr	r3, [pc, #164]	; (800c4d0 <DisplayGui_TestDrive+0xc4>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d809      	bhi.n	800c444 <DisplayGui_TestDrive+0x38>
	{
		gear++;
 800c430:	4b28      	ldr	r3, [pc, #160]	; (800c4d4 <DisplayGui_TestDrive+0xc8>)
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	3301      	adds	r3, #1
 800c436:	b2da      	uxtb	r2, r3
 800c438:	4b26      	ldr	r3, [pc, #152]	; (800c4d4 <DisplayGui_TestDrive+0xc8>)
 800c43a:	701a      	strb	r2, [r3, #0]
		timerToIncrement = millis;
 800c43c:	4b24      	ldr	r3, [pc, #144]	; (800c4d0 <DisplayGui_TestDrive+0xc4>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a22      	ldr	r2, [pc, #136]	; (800c4cc <DisplayGui_TestDrive+0xc0>)
 800c442:	6013      	str	r3, [r2, #0]
	}

	if(gear > 4) gear = 0;
 800c444:	4b23      	ldr	r3, [pc, #140]	; (800c4d4 <DisplayGui_TestDrive+0xc8>)
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	2b04      	cmp	r3, #4
 800c44a:	d902      	bls.n	800c452 <DisplayGui_TestDrive+0x46>
 800c44c:	4b21      	ldr	r3, [pc, #132]	; (800c4d4 <DisplayGui_TestDrive+0xc8>)
 800c44e:	2200      	movs	r2, #0
 800c450:	701a      	strb	r2, [r3, #0]

	static GUI_DrawStringAtTypeDef gearString = {0};

	intToStr(gear, gearString.string, 0);
 800c452:	4b20      	ldr	r3, [pc, #128]	; (800c4d4 <DisplayGui_TestDrive+0xc8>)
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	2200      	movs	r2, #0
 800c458:	491f      	ldr	r1, [pc, #124]	; (800c4d8 <DisplayGui_TestDrive+0xcc>)
 800c45a:	4618      	mov	r0, r3
 800c45c:	f008 fad2 	bl	8014a04 <intToStr>
	if(gear == 0)
 800c460:	4b1c      	ldr	r3, [pc, #112]	; (800c4d4 <DisplayGui_TestDrive+0xc8>)
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d105      	bne.n	800c474 <DisplayGui_TestDrive+0x68>
	{
		gearString.string[0] = 'N';
 800c468:	4b1b      	ldr	r3, [pc, #108]	; (800c4d8 <DisplayGui_TestDrive+0xcc>)
 800c46a:	224e      	movs	r2, #78	; 0x4e
 800c46c:	701a      	strb	r2, [r3, #0]
		gearString.string[1] = '\0';
 800c46e:	4b1a      	ldr	r3, [pc, #104]	; (800c4d8 <DisplayGui_TestDrive+0xcc>)
 800c470:	2200      	movs	r2, #0
 800c472:	705a      	strb	r2, [r3, #1]
	//GUI_DrawStringAt(240, 20, &GUI_FontGearboxFont112, GUI_WHITE, GUI_BLACK, &gearString, CENTER);

	//GUI_DispStringAtCEOL(gearString.string, 240, 20);

	//GUI_SetTextMode(GUI_TM_TRANS);
	GUI_SetTextAlign(GUI_TA_HCENTER);
 800c474:	2002      	movs	r0, #2
 800c476:	f010 fc21 	bl	801ccbc <GUI_SetTextAlign>
	GUI_DispStringAt(gearString.string, 240, 20);
 800c47a:	2214      	movs	r2, #20
 800c47c:	21f0      	movs	r1, #240	; 0xf0
 800c47e:	4816      	ldr	r0, [pc, #88]	; (800c4d8 <DisplayGui_TestDrive+0xcc>)
 800c480:	f011 fb32 	bl	801dae8 <GUI_DispStringAt>
	GUI_DispCEOL();
 800c484:	f011 fbbc 	bl	801dc00 <GUI_DispCEOL>
	GUI_SetTextAlign(GUI_TA_LEFT);
 800c488:	2000      	movs	r0, #0
 800c48a:	f010 fc17 	bl	801ccbc <GUI_SetTextAlign>




	static GUI_DrawTimeAtTypeDef timeToDisplay = {0};
	timeToDisplay.time = millis;
 800c48e:	4b10      	ldr	r3, [pc, #64]	; (800c4d0 <DisplayGui_TestDrive+0xc4>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	461a      	mov	r2, r3
 800c494:	4b11      	ldr	r3, [pc, #68]	; (800c4dc <DisplayGui_TestDrive+0xd0>)
 800c496:	601a      	str	r2, [r3, #0]

	GUI_DrawTimeAt(480/3 - 8, 2, &GUI_Font32_1, GUI_LIGHTGRAY, GUI_BLACK, &timeToDisplay, TIME_FORMAT_HOURS, 3, DISABLE, RIGHT);
 800c498:	2301      	movs	r3, #1
 800c49a:	9305      	str	r3, [sp, #20]
 800c49c:	2300      	movs	r3, #0
 800c49e:	9304      	str	r3, [sp, #16]
 800c4a0:	2303      	movs	r3, #3
 800c4a2:	9303      	str	r3, [sp, #12]
 800c4a4:	2303      	movs	r3, #3
 800c4a6:	9302      	str	r3, [sp, #8]
 800c4a8:	4b0c      	ldr	r3, [pc, #48]	; (800c4dc <DisplayGui_TestDrive+0xd0>)
 800c4aa:	9301      	str	r3, [sp, #4]
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	9300      	str	r3, [sp, #0]
 800c4b0:	4b0b      	ldr	r3, [pc, #44]	; (800c4e0 <DisplayGui_TestDrive+0xd4>)
 800c4b2:	4a0c      	ldr	r2, [pc, #48]	; (800c4e4 <DisplayGui_TestDrive+0xd8>)
 800c4b4:	2102      	movs	r1, #2
 800c4b6:	2098      	movs	r0, #152	; 0x98
 800c4b8:	f00a fab6 	bl	8016a28 <GUI_DrawTimeAt>


	DisplayGui_TestDriveArmature();
 800c4bc:	f000 f814 	bl	800c4e8 <DisplayGui_TestDriveArmature>
}
 800c4c0:	bf00      	nop
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	0811e478 	.word	0x0811e478
 800c4cc:	20005da8 	.word	0x20005da8
 800c4d0:	20006a98 	.word	0x20006a98
 800c4d4:	20005dac 	.word	0x20005dac
 800c4d8:	20005db0 	.word	0x20005db0
 800c4dc:	20005dd4 	.word	0x20005dd4
 800c4e0:	00d3d3d3 	.word	0x00d3d3d3
 800c4e4:	081249a8 	.word	0x081249a8

0800c4e8 <DisplayGui_TestDriveArmature>:



void DisplayGui_TestDriveArmature(void)
{
 800c4e8:	b5b0      	push	{r4, r5, r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af02      	add	r7, sp, #8
	GUI_SetColor(GUI_WHITE);
 800c4ee:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c4f2:	f010 fc1b 	bl	801cd2c <GUI_SetColor>

	//main rect (frame)
	GUI_DrawRect(0, 0, 480, 272);
 800c4f6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c4fa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c4fe:	2100      	movs	r1, #0
 800c500:	2000      	movs	r0, #0
 800c502:	f012 fca7 	bl	801ee54 <GUI_DrawRect>
	GUI_DrawRect(1, 1, 479, 271);
 800c506:	f240 130f 	movw	r3, #271	; 0x10f
 800c50a:	f240 12df 	movw	r2, #479	; 0x1df
 800c50e:	2101      	movs	r1, #1
 800c510:	2001      	movs	r0, #1
 800c512:	f012 fc9f 	bl	801ee54 <GUI_DrawRect>

	*/

	static uint8_t res = 6;

	GUI_AA_SetFactor(res);
 800c516:	4b1f      	ldr	r3, [pc, #124]	; (800c594 <DisplayGui_TestDriveArmature+0xac>)
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	4618      	mov	r0, r3
 800c51c:	f012 ff12 	bl	801f344 <GUI_AA_SetFactor>
	GUI_AA_EnableHiRes();
 800c520:	f012 ff18 	bl	801f354 <GUI_AA_EnableHiRes>
	GUI_AA_SetFactor(res);
 800c524:	4b1b      	ldr	r3, [pc, #108]	; (800c594 <DisplayGui_TestDriveArmature+0xac>)
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	4618      	mov	r0, r3
 800c52a:	f012 ff0b 	bl	801f344 <GUI_AA_SetFactor>

	GUI_SetPenSize(5);
 800c52e:	2005      	movs	r0, #5
 800c530:	f010 fc72 	bl	801ce18 <GUI_SetPenSize>
	GUI_AA_DrawRoundedRect(40*res, 40*res, 80*res, 160*res, 20*res);
 800c534:	4b17      	ldr	r3, [pc, #92]	; (800c594 <DisplayGui_TestDriveArmature+0xac>)
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	461a      	mov	r2, r3
 800c53a:	4613      	mov	r3, r2
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	4413      	add	r3, r2
 800c540:	00db      	lsls	r3, r3, #3
 800c542:	4618      	mov	r0, r3
 800c544:	4b13      	ldr	r3, [pc, #76]	; (800c594 <DisplayGui_TestDriveArmature+0xac>)
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	461a      	mov	r2, r3
 800c54a:	4613      	mov	r3, r2
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	4413      	add	r3, r2
 800c550:	00db      	lsls	r3, r3, #3
 800c552:	4619      	mov	r1, r3
 800c554:	4b0f      	ldr	r3, [pc, #60]	; (800c594 <DisplayGui_TestDriveArmature+0xac>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	461a      	mov	r2, r3
 800c55a:	4613      	mov	r3, r2
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	4413      	add	r3, r2
 800c560:	011b      	lsls	r3, r3, #4
 800c562:	461c      	mov	r4, r3
 800c564:	4b0b      	ldr	r3, [pc, #44]	; (800c594 <DisplayGui_TestDriveArmature+0xac>)
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	461a      	mov	r2, r3
 800c56a:	4613      	mov	r3, r2
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	4413      	add	r3, r2
 800c570:	015b      	lsls	r3, r3, #5
 800c572:	461d      	mov	r5, r3
 800c574:	4b07      	ldr	r3, [pc, #28]	; (800c594 <DisplayGui_TestDriveArmature+0xac>)
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	461a      	mov	r2, r3
 800c57a:	4613      	mov	r3, r2
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	4413      	add	r3, r2
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	9300      	str	r3, [sp, #0]
 800c584:	462b      	mov	r3, r5
 800c586:	4622      	mov	r2, r4
 800c588:	f012 ff08 	bl	801f39c <GUI_AA_DrawRoundedRect>


	//GUI_AA_DisableHiRes();
	//GUI_SetPenSize(1);

}
 800c58c:	bf00      	nop
 800c58e:	46bd      	mov	sp, r7
 800c590:	bdb0      	pop	{r4, r5, r7, pc}
 800c592:	bf00      	nop
 800c594:	200000e8 	.word	0x200000e8

0800c598 <Display_DataLog>:
*/



void Display_DataLog(DisplayGui_DataGuiTypeDef *data, uint8_t density)
{
 800c598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c59a:	b097      	sub	sp, #92	; 0x5c
 800c59c:	af0a      	add	r7, sp, #40	; 0x28
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	72fb      	strb	r3, [r7, #11]
	//CORE FUNCTION BEGIN

	// RPM BAR BEGIN

	Display_OldRpmBar_STD(rpm);
 800c5a4:	4ba1      	ldr	r3, [pc, #644]	; (800c82c <Display_DataLog+0x294>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f003 ffc4 	bl	8010538 <Display_OldRpmBar_STD>

	// RPM BAR END

	uint16_t x = 0;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t y = 0;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	85bb      	strh	r3, [r7, #44]	; 0x2c

	uint8_t c = 0;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	75bb      	strb	r3, [r7, #22]
	uint8_t r = 0;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	757b      	strb	r3, [r7, #21]

	int16_t data_y_offset = 0;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	857b      	strh	r3, [r7, #42]	; 0x2a
	int16_t text_y_offset = 0;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	853b      	strh	r3, [r7, #40]	; 0x28

	uint8_t debugCounter = 0;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t dataNumber = 0;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	switch(density)
 800c5d4:	7afb      	ldrb	r3, [r7, #11]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d002      	beq.n	800c5e0 <Display_DataLog+0x48>
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d004      	beq.n	800c5e8 <Display_DataLog+0x50>
 800c5de:	e007      	b.n	800c5f0 <Display_DataLog+0x58>
	{
		case 0:
			dataNumber = 12;
 800c5e0:	230c      	movs	r3, #12
 800c5e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
 800c5e6:	e006      	b.n	800c5f6 <Display_DataLog+0x5e>

		case 1:
			dataNumber = 20;
 800c5e8:	2314      	movs	r3, #20
 800c5ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
 800c5ee:	e002      	b.n	800c5f6 <Display_DataLog+0x5e>

		default:
			dataNumber = 12;
 800c5f0:	230c      	movs	r3, #12
 800c5f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	}

	uint32_t tempBackColor = 0;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	623b      	str	r3, [r7, #32]
	uint32_t tempFrameColor = 0;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	61fb      	str	r3, [r7, #28]

	uint8_t tempBackBlinkEnble = 0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	76fb      	strb	r3, [r7, #27]

	for(uint8_t i = 0; i < dataNumber; i++)
 800c602:	2300      	movs	r3, #0
 800c604:	76bb      	strb	r3, [r7, #26]
 800c606:	e3ca      	b.n	800cd9e <Display_DataLog+0x806>
	{
		if(data[i].enable == ENABLE)
 800c608:	7eba      	ldrb	r2, [r7, #26]
 800c60a:	4613      	mov	r3, r2
 800c60c:	00db      	lsls	r3, r3, #3
 800c60e:	4413      	add	r3, r2
 800c610:	011b      	lsls	r3, r3, #4
 800c612:	461a      	mov	r2, r3
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	4413      	add	r3, r2
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	f040 83b0 	bne.w	800cd80 <Display_DataLog+0x7e8>
		{
			uint8_t frameSize = data[i].blinkingFrameSize;
 800c620:	7eba      	ldrb	r2, [r7, #26]
 800c622:	4613      	mov	r3, r2
 800c624:	00db      	lsls	r3, r3, #3
 800c626:	4413      	add	r3, r2
 800c628:	011b      	lsls	r3, r3, #4
 800c62a:	461a      	mov	r2, r3
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	4413      	add	r3, r2
 800c630:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800c634:	767b      	strb	r3, [r7, #25]

			debugCounter++;
 800c636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c63a:	3301      	adds	r3, #1
 800c63c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			tempBackColor = data[i].backColor;
 800c640:	7eba      	ldrb	r2, [r7, #26]
 800c642:	4613      	mov	r3, r2
 800c644:	00db      	lsls	r3, r3, #3
 800c646:	4413      	add	r3, r2
 800c648:	011b      	lsls	r3, r3, #4
 800c64a:	461a      	mov	r2, r3
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	4413      	add	r3, r2
 800c650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c652:	623b      	str	r3, [r7, #32]
			tempFrameColor = data[i].frameColor;
 800c654:	7eba      	ldrb	r2, [r7, #26]
 800c656:	4613      	mov	r3, r2
 800c658:	00db      	lsls	r3, r3, #3
 800c65a:	4413      	add	r3, r2
 800c65c:	011b      	lsls	r3, r3, #4
 800c65e:	461a      	mov	r2, r3
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	4413      	add	r3, r2
 800c664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c666:	61fb      	str	r3, [r7, #28]

			GUI_SetColor(data[i].textColor);
 800c668:	7eba      	ldrb	r2, [r7, #26]
 800c66a:	4613      	mov	r3, r2
 800c66c:	00db      	lsls	r3, r3, #3
 800c66e:	4413      	add	r3, r2
 800c670:	011b      	lsls	r3, r3, #4
 800c672:	461a      	mov	r2, r3
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	4413      	add	r3, r2
 800c678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c67a:	4618      	mov	r0, r3
 800c67c:	f010 fb56 	bl	801cd2c <GUI_SetColor>
			GUI_SetBkColor(data[i].backColor);
 800c680:	7eba      	ldrb	r2, [r7, #26]
 800c682:	4613      	mov	r3, r2
 800c684:	00db      	lsls	r3, r3, #3
 800c686:	4413      	add	r3, r2
 800c688:	011b      	lsls	r3, r3, #4
 800c68a:	461a      	mov	r2, r3
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	4413      	add	r3, r2
 800c690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c692:	4618      	mov	r0, r3
 800c694:	f010 fb48 	bl	801cd28 <GUI_SetBkColor>

			switch(density)
 800c698:	7afb      	ldrb	r3, [r7, #11]
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d125      	bne.n	800c6ea <Display_DataLog+0x152>
					text_y_offset = 6;
					break;
					*/

				case 1:
					r = i / 4;
 800c69e:	7ebb      	ldrb	r3, [r7, #26]
 800c6a0:	089b      	lsrs	r3, r3, #2
 800c6a2:	757b      	strb	r3, [r7, #21]
					c = i - r * 4;
 800c6a4:	7d7b      	ldrb	r3, [r7, #21]
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	7eba      	ldrb	r2, [r7, #26]
 800c6ac:	1ad3      	subs	r3, r2, r3
 800c6ae:	75bb      	strb	r3, [r7, #22]

					x = 2 + c * 119;
 800c6b0:	7dbb      	ldrb	r3, [r7, #22]
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	00d2      	lsls	r2, r2, #3
 800c6b8:	1ad3      	subs	r3, r2, r3
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	0111      	lsls	r1, r2, #4
 800c6be:	461a      	mov	r2, r3
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	4413      	add	r3, r2
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	3302      	adds	r3, #2
 800c6c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
					y = 24 + r * 49;
 800c6ca:	7d7b      	ldrb	r3, [r7, #21]
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	00d2      	lsls	r2, r2, #3
 800c6d2:	1ad3      	subs	r3, r2, r3
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	00d2      	lsls	r2, r2, #3
 800c6d8:	1ad3      	subs	r3, r2, r3
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	3318      	adds	r3, #24
 800c6de:	85bb      	strh	r3, [r7, #44]	; 0x2c

					data_y_offset = 17;
 800c6e0:	2311      	movs	r3, #17
 800c6e2:	857b      	strh	r3, [r7, #42]	; 0x2a
					text_y_offset = 1;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	853b      	strh	r3, [r7, #40]	; 0x28
					break;
 800c6e8:	e024      	b.n	800c734 <Display_DataLog+0x19c>

				case 0:
				default:
					r = i / 4;
 800c6ea:	7ebb      	ldrb	r3, [r7, #26]
 800c6ec:	089b      	lsrs	r3, r3, #2
 800c6ee:	757b      	strb	r3, [r7, #21]
					c = i - r * 4;
 800c6f0:	7d7b      	ldrb	r3, [r7, #21]
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	7eba      	ldrb	r2, [r7, #26]
 800c6f8:	1ad3      	subs	r3, r2, r3
 800c6fa:	75bb      	strb	r3, [r7, #22]

					x = 2 + c * 119;
 800c6fc:	7dbb      	ldrb	r3, [r7, #22]
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	461a      	mov	r2, r3
 800c702:	00d2      	lsls	r2, r2, #3
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	461a      	mov	r2, r3
 800c708:	0111      	lsls	r1, r2, #4
 800c70a:	461a      	mov	r2, r3
 800c70c:	460b      	mov	r3, r1
 800c70e:	4413      	add	r3, r2
 800c710:	b29b      	uxth	r3, r3
 800c712:	3302      	adds	r3, #2
 800c714:	85fb      	strh	r3, [r7, #46]	; 0x2e
					y = 24 + r * 82;
 800c716:	7d7b      	ldrb	r3, [r7, #21]
 800c718:	b29b      	uxth	r3, r3
 800c71a:	461a      	mov	r2, r3
 800c71c:	0092      	lsls	r2, r2, #2
 800c71e:	441a      	add	r2, r3
 800c720:	00d2      	lsls	r2, r2, #3
 800c722:	4413      	add	r3, r2
 800c724:	005b      	lsls	r3, r3, #1
 800c726:	b29b      	uxth	r3, r3
 800c728:	3318      	adds	r3, #24
 800c72a:	85bb      	strh	r3, [r7, #44]	; 0x2c

					data_y_offset = 36;
 800c72c:	2324      	movs	r3, #36	; 0x24
 800c72e:	857b      	strh	r3, [r7, #42]	; 0x2a
					text_y_offset = 6;
 800c730:	2306      	movs	r3, #6
 800c732:	853b      	strh	r3, [r7, #40]	; 0x28
			}



			if(data[i].valueControlEnable == DISABLE)
 800c734:	7eba      	ldrb	r2, [r7, #26]
 800c736:	4613      	mov	r3, r2
 800c738:	00db      	lsls	r3, r3, #3
 800c73a:	4413      	add	r3, r2
 800c73c:	011b      	lsls	r3, r3, #4
 800c73e:	461a      	mov	r2, r3
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	4413      	add	r3, r2
 800c744:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d120      	bne.n	800c78e <Display_DataLog+0x1f6>
			{
				//GUI_SetColor(data[i].frameColor);
				tempFrameColor = data[i].frameColor;
 800c74c:	7eba      	ldrb	r2, [r7, #26]
 800c74e:	4613      	mov	r3, r2
 800c750:	00db      	lsls	r3, r3, #3
 800c752:	4413      	add	r3, r2
 800c754:	011b      	lsls	r3, r3, #4
 800c756:	461a      	mov	r2, r3
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	4413      	add	r3, r2
 800c75c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c75e:	61fb      	str	r3, [r7, #28]
				data[i].blinkingStatus = 0;
 800c760:	7eba      	ldrb	r2, [r7, #26]
 800c762:	4613      	mov	r3, r2
 800c764:	00db      	lsls	r3, r3, #3
 800c766:	4413      	add	r3, r2
 800c768:	011b      	lsls	r3, r3, #4
 800c76a:	461a      	mov	r2, r3
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	4413      	add	r3, r2
 800c770:	2200      	movs	r2, #0
 800c772:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
				data[i].blinkingState = 0;
 800c776:	7eba      	ldrb	r2, [r7, #26]
 800c778:	4613      	mov	r3, r2
 800c77a:	00db      	lsls	r3, r3, #3
 800c77c:	4413      	add	r3, r2
 800c77e:	011b      	lsls	r3, r3, #4
 800c780:	461a      	mov	r2, r3
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	4413      	add	r3, r2
 800c786:	2200      	movs	r2, #0
 800c788:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 800c78c:	e070      	b.n	800c870 <Display_DataLog+0x2d8>
			}
			else
			{
				if(data[i].dataLogFloat.number >= data[i].maxValue)
 800c78e:	7eba      	ldrb	r2, [r7, #26]
 800c790:	4613      	mov	r3, r2
 800c792:	00db      	lsls	r3, r3, #3
 800c794:	4413      	add	r3, r2
 800c796:	011b      	lsls	r3, r3, #4
 800c798:	461a      	mov	r2, r3
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	4413      	add	r3, r2
 800c79e:	ed93 6b08 	vldr	d6, [r3, #32]
 800c7a2:	7eba      	ldrb	r2, [r7, #26]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	00db      	lsls	r3, r3, #3
 800c7a8:	4413      	add	r3, r2
 800c7aa:	011b      	lsls	r3, r3, #4
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800c7b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c7ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7c2:	db0b      	blt.n	800c7dc <Display_DataLog+0x244>
				{
					data[i].blinkingStatus = 1;
 800c7c4:	7eba      	ldrb	r2, [r7, #26]
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	00db      	lsls	r3, r3, #3
 800c7ca:	4413      	add	r3, r2
 800c7cc:	011b      	lsls	r3, r3, #4
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	4413      	add	r3, r2
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800c7da:	e049      	b.n	800c870 <Display_DataLog+0x2d8>
				}
				else if(data[i].dataLogFloat.number <= data[i].minValue)
 800c7dc:	7eba      	ldrb	r2, [r7, #26]
 800c7de:	4613      	mov	r3, r2
 800c7e0:	00db      	lsls	r3, r3, #3
 800c7e2:	4413      	add	r3, r2
 800c7e4:	011b      	lsls	r3, r3, #4
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	4413      	add	r3, r2
 800c7ec:	ed93 6b08 	vldr	d6, [r3, #32]
 800c7f0:	7eba      	ldrb	r2, [r7, #26]
 800c7f2:	4613      	mov	r3, r2
 800c7f4:	00db      	lsls	r3, r3, #3
 800c7f6:	4413      	add	r3, r2
 800c7f8:	011b      	lsls	r3, r3, #4
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	4413      	add	r3, r2
 800c800:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800c804:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c808:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c810:	d80e      	bhi.n	800c830 <Display_DataLog+0x298>
				{
					data[i].blinkingStatus = 2;
 800c812:	7eba      	ldrb	r2, [r7, #26]
 800c814:	4613      	mov	r3, r2
 800c816:	00db      	lsls	r3, r3, #3
 800c818:	4413      	add	r3, r2
 800c81a:	011b      	lsls	r3, r3, #4
 800c81c:	461a      	mov	r2, r3
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	4413      	add	r3, r2
 800c822:	2202      	movs	r2, #2
 800c824:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800c828:	e022      	b.n	800c870 <Display_DataLog+0x2d8>
 800c82a:	bf00      	nop
 800c82c:	20000020 	.word	0x20000020
				}
				else
				{
					//GUI_SetColor(data[i].frameColor);
					tempFrameColor = data[i].frameColor;
 800c830:	7eba      	ldrb	r2, [r7, #26]
 800c832:	4613      	mov	r3, r2
 800c834:	00db      	lsls	r3, r3, #3
 800c836:	4413      	add	r3, r2
 800c838:	011b      	lsls	r3, r3, #4
 800c83a:	461a      	mov	r2, r3
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	4413      	add	r3, r2
 800c840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c842:	61fb      	str	r3, [r7, #28]
					data[i].blinkingStatus = 0;
 800c844:	7eba      	ldrb	r2, [r7, #26]
 800c846:	4613      	mov	r3, r2
 800c848:	00db      	lsls	r3, r3, #3
 800c84a:	4413      	add	r3, r2
 800c84c:	011b      	lsls	r3, r3, #4
 800c84e:	461a      	mov	r2, r3
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	4413      	add	r3, r2
 800c854:	2200      	movs	r2, #0
 800c856:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
					data[i].blinkingState = 0;
 800c85a:	7eba      	ldrb	r2, [r7, #26]
 800c85c:	4613      	mov	r3, r2
 800c85e:	00db      	lsls	r3, r3, #3
 800c860:	4413      	add	r3, r2
 800c862:	011b      	lsls	r3, r3, #4
 800c864:	461a      	mov	r2, r3
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	4413      	add	r3, r2
 800c86a:	2200      	movs	r2, #0
 800c86c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
				}
			}

			if(data[i].blinkingStatus != 0)
 800c870:	7eba      	ldrb	r2, [r7, #26]
 800c872:	4613      	mov	r3, r2
 800c874:	00db      	lsls	r3, r3, #3
 800c876:	4413      	add	r3, r2
 800c878:	011b      	lsls	r3, r3, #4
 800c87a:	461a      	mov	r2, r3
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	4413      	add	r3, r2
 800c880:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c884:	2b00      	cmp	r3, #0
 800c886:	d07a      	beq.n	800c97e <Display_DataLog+0x3e6>
			{
				if((millis >= data[i].blinkingMillis + data[i].blinkingDelayOver && data[i].blinkingStatus == 1)
 800c888:	7eba      	ldrb	r2, [r7, #26]
 800c88a:	4613      	mov	r3, r2
 800c88c:	00db      	lsls	r3, r3, #3
 800c88e:	4413      	add	r3, r2
 800c890:	011b      	lsls	r3, r3, #4
 800c892:	461a      	mov	r2, r3
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	4413      	add	r3, r2
 800c898:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800c89a:	7eba      	ldrb	r2, [r7, #26]
 800c89c:	4613      	mov	r3, r2
 800c89e:	00db      	lsls	r3, r3, #3
 800c8a0:	4413      	add	r3, r2
 800c8a2:	011b      	lsls	r3, r3, #4
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800c8ae:	18ca      	adds	r2, r1, r3
 800c8b0:	4ba2      	ldr	r3, [pc, #648]	; (800cb3c <Display_DataLog+0x5a4>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d80b      	bhi.n	800c8d0 <Display_DataLog+0x338>
 800c8b8:	7eba      	ldrb	r2, [r7, #26]
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	00db      	lsls	r3, r3, #3
 800c8be:	4413      	add	r3, r2
 800c8c0:	011b      	lsls	r3, r3, #4
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	4413      	add	r3, r2
 800c8c8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d023      	beq.n	800c918 <Display_DataLog+0x380>
					|| (millis >= data[i].blinkingMillis + data[i].blinkingDelayUnder && data[i].blinkingStatus == 2))
 800c8d0:	7eba      	ldrb	r2, [r7, #26]
 800c8d2:	4613      	mov	r3, r2
 800c8d4:	00db      	lsls	r3, r3, #3
 800c8d6:	4413      	add	r3, r2
 800c8d8:	011b      	lsls	r3, r3, #4
 800c8da:	461a      	mov	r2, r3
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	4413      	add	r3, r2
 800c8e0:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800c8e2:	7eba      	ldrb	r2, [r7, #26]
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	00db      	lsls	r3, r3, #3
 800c8e8:	4413      	add	r3, r2
 800c8ea:	011b      	lsls	r3, r3, #4
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800c8f6:	18ca      	adds	r2, r1, r3
 800c8f8:	4b90      	ldr	r3, [pc, #576]	; (800cb3c <Display_DataLog+0x5a4>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d83c      	bhi.n	800c97a <Display_DataLog+0x3e2>
 800c900:	7eba      	ldrb	r2, [r7, #26]
 800c902:	4613      	mov	r3, r2
 800c904:	00db      	lsls	r3, r3, #3
 800c906:	4413      	add	r3, r2
 800c908:	011b      	lsls	r3, r3, #4
 800c90a:	461a      	mov	r2, r3
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	4413      	add	r3, r2
 800c910:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c914:	2b02      	cmp	r3, #2
 800c916:	d130      	bne.n	800c97a <Display_DataLog+0x3e2>
				{
					if(data[i].blinkingState == 0)
 800c918:	7eba      	ldrb	r2, [r7, #26]
 800c91a:	4613      	mov	r3, r2
 800c91c:	00db      	lsls	r3, r3, #3
 800c91e:	4413      	add	r3, r2
 800c920:	011b      	lsls	r3, r3, #4
 800c922:	461a      	mov	r2, r3
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	4413      	add	r3, r2
 800c928:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d10b      	bne.n	800c948 <Display_DataLog+0x3b0>
						data[i].blinkingState = 1;
 800c930:	7eba      	ldrb	r2, [r7, #26]
 800c932:	4613      	mov	r3, r2
 800c934:	00db      	lsls	r3, r3, #3
 800c936:	4413      	add	r3, r2
 800c938:	011b      	lsls	r3, r3, #4
 800c93a:	461a      	mov	r2, r3
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	4413      	add	r3, r2
 800c940:	2201      	movs	r2, #1
 800c942:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 800c946:	e00a      	b.n	800c95e <Display_DataLog+0x3c6>
					else
						data[i].blinkingState = 0;
 800c948:	7eba      	ldrb	r2, [r7, #26]
 800c94a:	4613      	mov	r3, r2
 800c94c:	00db      	lsls	r3, r3, #3
 800c94e:	4413      	add	r3, r2
 800c950:	011b      	lsls	r3, r3, #4
 800c952:	461a      	mov	r2, r3
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	4413      	add	r3, r2
 800c958:	2200      	movs	r2, #0
 800c95a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

					data[i].blinkingMillis = millis;
 800c95e:	7eba      	ldrb	r2, [r7, #26]
 800c960:	4613      	mov	r3, r2
 800c962:	00db      	lsls	r3, r3, #3
 800c964:	4413      	add	r3, r2
 800c966:	011b      	lsls	r3, r3, #4
 800c968:	461a      	mov	r2, r3
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	4413      	add	r3, r2
 800c96e:	4a73      	ldr	r2, [pc, #460]	; (800cb3c <Display_DataLog+0x5a4>)
 800c970:	6812      	ldr	r2, [r2, #0]
 800c972:	675a      	str	r2, [r3, #116]	; 0x74

					tempBackBlinkEnble = 1;
 800c974:	2301      	movs	r3, #1
 800c976:	76fb      	strb	r3, [r7, #27]
 800c978:	e001      	b.n	800c97e <Display_DataLog+0x3e6>
				}
				else
				{
					tempBackBlinkEnble = 0;
 800c97a:	2300      	movs	r3, #0
 800c97c:	76fb      	strb	r3, [r7, #27]
				}
			}

			if(data[i].blinkingState == 0)
 800c97e:	7eba      	ldrb	r2, [r7, #26]
 800c980:	4613      	mov	r3, r2
 800c982:	00db      	lsls	r3, r3, #3
 800c984:	4413      	add	r3, r2
 800c986:	011b      	lsls	r3, r3, #4
 800c988:	461a      	mov	r2, r3
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	4413      	add	r3, r2
 800c98e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c992:	2b00      	cmp	r3, #0
 800c994:	d10a      	bne.n	800c9ac <Display_DataLog+0x414>
			{
				tempFrameColor = data[i].frameColor;
 800c996:	7eba      	ldrb	r2, [r7, #26]
 800c998:	4613      	mov	r3, r2
 800c99a:	00db      	lsls	r3, r3, #3
 800c99c:	4413      	add	r3, r2
 800c99e:	011b      	lsls	r3, r3, #4
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9a8:	61fb      	str	r3, [r7, #28]
 800c9aa:	e08a      	b.n	800cac2 <Display_DataLog+0x52a>
			}
			else
			{
				if(data[i].blinkingStatus == 1)
 800c9ac:	7eba      	ldrb	r2, [r7, #26]
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	00db      	lsls	r3, r3, #3
 800c9b2:	4413      	add	r3, r2
 800c9b4:	011b      	lsls	r3, r3, #4
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d139      	bne.n	800ca38 <Display_DataLog+0x4a0>
				{
					if(data[i].blinkingFrameEnable)
 800c9c4:	7eba      	ldrb	r2, [r7, #26]
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	00db      	lsls	r3, r3, #3
 800c9ca:	4413      	add	r3, r2
 800c9cc:	011b      	lsls	r3, r3, #4
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00b      	beq.n	800c9f4 <Display_DataLog+0x45c>
						tempFrameColor = data[i].blinkingOverColor;
 800c9dc:	7eba      	ldrb	r2, [r7, #26]
 800c9de:	4613      	mov	r3, r2
 800c9e0:	00db      	lsls	r3, r3, #3
 800c9e2:	4413      	add	r3, r2
 800c9e4:	011b      	lsls	r3, r3, #4
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	4413      	add	r3, r2
 800c9ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9f0:	61fb      	str	r3, [r7, #28]
 800c9f2:	e009      	b.n	800ca08 <Display_DataLog+0x470>
					else
						tempFrameColor = data[i].frameColor;
 800c9f4:	7eba      	ldrb	r2, [r7, #26]
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	00db      	lsls	r3, r3, #3
 800c9fa:	4413      	add	r3, r2
 800c9fc:	011b      	lsls	r3, r3, #4
 800c9fe:	461a      	mov	r2, r3
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	4413      	add	r3, r2
 800ca04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca06:	61fb      	str	r3, [r7, #28]

					if(data[i].blinkingBackEnable)
 800ca08:	7eba      	ldrb	r2, [r7, #26]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	00db      	lsls	r3, r3, #3
 800ca0e:	4413      	add	r3, r2
 800ca10:	011b      	lsls	r3, r3, #4
 800ca12:	461a      	mov	r2, r3
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	4413      	add	r3, r2
 800ca18:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d050      	beq.n	800cac2 <Display_DataLog+0x52a>
						tempBackColor = data[i].blinkingOverColor;
 800ca20:	7eba      	ldrb	r2, [r7, #26]
 800ca22:	4613      	mov	r3, r2
 800ca24:	00db      	lsls	r3, r3, #3
 800ca26:	4413      	add	r3, r2
 800ca28:	011b      	lsls	r3, r3, #4
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	4413      	add	r3, r2
 800ca30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca34:	623b      	str	r3, [r7, #32]
 800ca36:	e044      	b.n	800cac2 <Display_DataLog+0x52a>
				}
				else if (data[i].blinkingStatus == 2)
 800ca38:	7eba      	ldrb	r2, [r7, #26]
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	00db      	lsls	r3, r3, #3
 800ca3e:	4413      	add	r3, r2
 800ca40:	011b      	lsls	r3, r3, #4
 800ca42:	461a      	mov	r2, r3
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	4413      	add	r3, r2
 800ca48:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ca4c:	2b02      	cmp	r3, #2
 800ca4e:	d138      	bne.n	800cac2 <Display_DataLog+0x52a>
				{
					if(data[i].blinkingFrameEnable)
 800ca50:	7eba      	ldrb	r2, [r7, #26]
 800ca52:	4613      	mov	r3, r2
 800ca54:	00db      	lsls	r3, r3, #3
 800ca56:	4413      	add	r3, r2
 800ca58:	011b      	lsls	r3, r3, #4
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	4413      	add	r3, r2
 800ca60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d00b      	beq.n	800ca80 <Display_DataLog+0x4e8>
						tempFrameColor = data[i].blinkingUnderColor;
 800ca68:	7eba      	ldrb	r2, [r7, #26]
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	00db      	lsls	r3, r3, #3
 800ca6e:	4413      	add	r3, r2
 800ca70:	011b      	lsls	r3, r3, #4
 800ca72:	461a      	mov	r2, r3
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	4413      	add	r3, r2
 800ca78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca7c:	61fb      	str	r3, [r7, #28]
 800ca7e:	e009      	b.n	800ca94 <Display_DataLog+0x4fc>
					else
						tempFrameColor = data[i].frameColor;
 800ca80:	7eba      	ldrb	r2, [r7, #26]
 800ca82:	4613      	mov	r3, r2
 800ca84:	00db      	lsls	r3, r3, #3
 800ca86:	4413      	add	r3, r2
 800ca88:	011b      	lsls	r3, r3, #4
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	4413      	add	r3, r2
 800ca90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca92:	61fb      	str	r3, [r7, #28]

					if(data[i].blinkingBackEnable)
 800ca94:	7eba      	ldrb	r2, [r7, #26]
 800ca96:	4613      	mov	r3, r2
 800ca98:	00db      	lsls	r3, r3, #3
 800ca9a:	4413      	add	r3, r2
 800ca9c:	011b      	lsls	r3, r3, #4
 800ca9e:	461a      	mov	r2, r3
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	4413      	add	r3, r2
 800caa4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d00a      	beq.n	800cac2 <Display_DataLog+0x52a>
						tempBackColor = data[i].blinkingUnderColor;
 800caac:	7eba      	ldrb	r2, [r7, #26]
 800caae:	4613      	mov	r3, r2
 800cab0:	00db      	lsls	r3, r3, #3
 800cab2:	4413      	add	r3, r2
 800cab4:	011b      	lsls	r3, r3, #4
 800cab6:	461a      	mov	r2, r3
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	4413      	add	r3, r2
 800cabc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cac0:	623b      	str	r3, [r7, #32]
				}
			}

			if(data[i].blinkingBackEnable && tempBackBlinkEnble)
 800cac2:	7eba      	ldrb	r2, [r7, #26]
 800cac4:	4613      	mov	r3, r2
 800cac6:	00db      	lsls	r3, r3, #3
 800cac8:	4413      	add	r3, r2
 800caca:	011b      	lsls	r3, r3, #4
 800cacc:	461a      	mov	r2, r3
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	4413      	add	r3, r2
 800cad2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d032      	beq.n	800cb40 <Display_DataLog+0x5a8>
 800cada:	7efb      	ldrb	r3, [r7, #27]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d02f      	beq.n	800cb40 <Display_DataLog+0x5a8>
			{
				GUI_SetColor(tempBackColor);
 800cae0:	6a38      	ldr	r0, [r7, #32]
 800cae2:	f010 f923 	bl	801cd2c <GUI_SetColor>

				switch(density)
 800cae6:	7afb      	ldrb	r3, [r7, #11]
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d113      	bne.n	800cb14 <Display_DataLog+0x57c>
				{
					case 1:
						GUI_FillRect(x + frameSize, y + frameSize, x + 119 - frameSize, y + 49 - frameSize);
 800caec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800caee:	7e7b      	ldrb	r3, [r7, #25]
 800caf0:	18d0      	adds	r0, r2, r3
 800caf2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800caf4:	7e7b      	ldrb	r3, [r7, #25]
 800caf6:	18d1      	adds	r1, r2, r3
 800caf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cafa:	f103 0277 	add.w	r2, r3, #119	; 0x77
 800cafe:	7e7b      	ldrb	r3, [r7, #25]
 800cb00:	1ad4      	subs	r4, r2, r3
 800cb02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cb04:	f103 0231 	add.w	r2, r3, #49	; 0x31
 800cb08:	7e7b      	ldrb	r3, [r7, #25]
 800cb0a:	1ad3      	subs	r3, r2, r3
 800cb0c:	4622      	mov	r2, r4
 800cb0e:	f010 fa17 	bl	801cf40 <GUI_FillRect>
						break;
 800cb12:	e016      	b.n	800cb42 <Display_DataLog+0x5aa>

					case 0:
					default:
						GUI_FillRect(x + frameSize, y + frameSize, x + 119 - frameSize, y + 82 - frameSize);
 800cb14:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb16:	7e7b      	ldrb	r3, [r7, #25]
 800cb18:	18d0      	adds	r0, r2, r3
 800cb1a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800cb1c:	7e7b      	ldrb	r3, [r7, #25]
 800cb1e:	18d1      	adds	r1, r2, r3
 800cb20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb22:	f103 0277 	add.w	r2, r3, #119	; 0x77
 800cb26:	7e7b      	ldrb	r3, [r7, #25]
 800cb28:	1ad4      	subs	r4, r2, r3
 800cb2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cb2c:	f103 0252 	add.w	r2, r3, #82	; 0x52
 800cb30:	7e7b      	ldrb	r3, [r7, #25]
 800cb32:	1ad3      	subs	r3, r2, r3
 800cb34:	4622      	mov	r2, r4
 800cb36:	f010 fa03 	bl	801cf40 <GUI_FillRect>
 800cb3a:	e002      	b.n	800cb42 <Display_DataLog+0x5aa>
 800cb3c:	20006a98 	.word	0x20006a98
				}
			}
 800cb40:	bf00      	nop

			GUI_SetColor(data[i].textColor);
 800cb42:	7eba      	ldrb	r2, [r7, #26]
 800cb44:	4613      	mov	r3, r2
 800cb46:	00db      	lsls	r3, r3, #3
 800cb48:	4413      	add	r3, r2
 800cb4a:	011b      	lsls	r3, r3, #4
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	4413      	add	r3, r2
 800cb52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb54:	4618      	mov	r0, r3
 800cb56:	f010 f8e9 	bl	801cd2c <GUI_SetColor>
			//GUI_SetBkColor(data[i].backColor);
			GUI_SetBkColor(tempBackColor);
 800cb5a:	6a38      	ldr	r0, [r7, #32]
 800cb5c:	f010 f8e4 	bl	801cd28 <GUI_SetBkColor>
			GUI_SetFont(&GUI_Font20_1);
 800cb60:	489b      	ldr	r0, [pc, #620]	; (800cdd0 <Display_DataLog+0x838>)
 800cb62:	f010 f8b5 	bl	801ccd0 <GUI_SetFont>
			GUI_SetTextAlign(GUI_TA_HCENTER);
 800cb66:	2002      	movs	r0, #2
 800cb68:	f010 f8a8 	bl	801ccbc <GUI_SetTextAlign>

			GUI_DispStringAt(data[i].string, x + 59, y + text_y_offset);
 800cb6c:	7eba      	ldrb	r2, [r7, #26]
 800cb6e:	4613      	mov	r3, r2
 800cb70:	00db      	lsls	r3, r3, #3
 800cb72:	4413      	add	r3, r2
 800cb74:	011b      	lsls	r3, r3, #4
 800cb76:	461a      	mov	r2, r3
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	4413      	add	r3, r2
 800cb7c:	6858      	ldr	r0, [r3, #4]
 800cb7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb80:	f103 013b 	add.w	r1, r3, #59	; 0x3b
 800cb84:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800cb86:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800cb8a:	4413      	add	r3, r2
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	f010 ffab 	bl	801dae8 <GUI_DispStringAt>

			if(data[i].dataType == DataLog_DataType_Float)
 800cb92:	7eba      	ldrb	r2, [r7, #26]
 800cb94:	4613      	mov	r3, r2
 800cb96:	00db      	lsls	r3, r3, #3
 800cb98:	4413      	add	r3, r2
 800cb9a:	011b      	lsls	r3, r3, #4
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	4413      	add	r3, r2
 800cba2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d158      	bne.n	800cc5c <Display_DataLog+0x6c4>
				GUI_DrawNumAt(x + 57, y + data_y_offset, &GUI_Font32_1, data[i].dataColor, tempBackColor, &data[i].dataLogFloat, UNDEFINED_NINT, data[i].decimalDigits, data[i].signEnable, DISABLE, CENTER, data[i].intStr, data[i].endStr);
 800cbaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cbac:	3339      	adds	r3, #57	; 0x39
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	b21e      	sxth	r6, r3
 800cbb2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800cbb4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cbb6:	4413      	add	r3, r2
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	fa0f fc83 	sxth.w	ip, r3
 800cbbe:	7eba      	ldrb	r2, [r7, #26]
 800cbc0:	4613      	mov	r3, r2
 800cbc2:	00db      	lsls	r3, r3, #3
 800cbc4:	4413      	add	r3, r2
 800cbc6:	011b      	lsls	r3, r3, #4
 800cbc8:	461a      	mov	r2, r3
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	4413      	add	r3, r2
 800cbce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbd0:	607b      	str	r3, [r7, #4]
 800cbd2:	7eba      	ldrb	r2, [r7, #26]
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	00db      	lsls	r3, r3, #3
 800cbd8:	4413      	add	r3, r2
 800cbda:	011b      	lsls	r3, r3, #4
 800cbdc:	461a      	mov	r2, r3
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	f103 0120 	add.w	r1, r3, #32
 800cbe6:	7eba      	ldrb	r2, [r7, #26]
 800cbe8:	4613      	mov	r3, r2
 800cbea:	00db      	lsls	r3, r3, #3
 800cbec:	4413      	add	r3, r2
 800cbee:	011b      	lsls	r3, r3, #4
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	4413      	add	r3, r2
 800cbf6:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800cbfa:	7eba      	ldrb	r2, [r7, #26]
 800cbfc:	4613      	mov	r3, r2
 800cbfe:	00db      	lsls	r3, r3, #3
 800cc00:	4413      	add	r3, r2
 800cc02:	011b      	lsls	r3, r3, #4
 800cc04:	461a      	mov	r2, r3
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	4413      	add	r3, r2
 800cc0a:	f893 404d 	ldrb.w	r4, [r3, #77]	; 0x4d
 800cc0e:	7eba      	ldrb	r2, [r7, #26]
 800cc10:	4613      	mov	r3, r2
 800cc12:	00db      	lsls	r3, r3, #3
 800cc14:	4413      	add	r3, r2
 800cc16:	011b      	lsls	r3, r3, #4
 800cc18:	461a      	mov	r2, r3
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	689d      	ldr	r5, [r3, #8]
 800cc20:	7eba      	ldrb	r2, [r7, #26]
 800cc22:	4613      	mov	r3, r2
 800cc24:	00db      	lsls	r3, r3, #3
 800cc26:	4413      	add	r3, r2
 800cc28:	011b      	lsls	r3, r3, #4
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	4413      	add	r3, r2
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	9308      	str	r3, [sp, #32]
 800cc34:	9507      	str	r5, [sp, #28]
 800cc36:	2302      	movs	r3, #2
 800cc38:	9306      	str	r3, [sp, #24]
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	9305      	str	r3, [sp, #20]
 800cc3e:	9404      	str	r4, [sp, #16]
 800cc40:	9003      	str	r0, [sp, #12]
 800cc42:	f04f 33ff 	mov.w	r3, #4294967295
 800cc46:	9302      	str	r3, [sp, #8]
 800cc48:	9101      	str	r1, [sp, #4]
 800cc4a:	6a3b      	ldr	r3, [r7, #32]
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4a60      	ldr	r2, [pc, #384]	; (800cdd4 <Display_DataLog+0x83c>)
 800cc52:	4661      	mov	r1, ip
 800cc54:	4630      	mov	r0, r6
 800cc56:	f008 fe47 	bl	80158e8 <GUI_DrawNumAt>
 800cc5a:	e046      	b.n	800ccea <Display_DataLog+0x752>
			else
				GUI_DrawNumAt_Dec(x + 57, y + data_y_offset, &GUI_Font32_1, data[i].dataColor, tempBackColor, &data[i].dataLogInt, data[i].signEnable, CENTER, data[i].intStr, data[i].endStr);
 800cc5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cc5e:	3339      	adds	r3, #57	; 0x39
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	b21d      	sxth	r5, r3
 800cc64:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800cc66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cc68:	4413      	add	r3, r2
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	b21e      	sxth	r6, r3
 800cc6e:	7eba      	ldrb	r2, [r7, #26]
 800cc70:	4613      	mov	r3, r2
 800cc72:	00db      	lsls	r3, r3, #3
 800cc74:	4413      	add	r3, r2
 800cc76:	011b      	lsls	r3, r3, #4
 800cc78:	461a      	mov	r2, r3
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc80:	607b      	str	r3, [r7, #4]
 800cc82:	7eba      	ldrb	r2, [r7, #26]
 800cc84:	4613      	mov	r3, r2
 800cc86:	00db      	lsls	r3, r3, #3
 800cc88:	4413      	add	r3, r2
 800cc8a:	011b      	lsls	r3, r3, #4
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	4413      	add	r3, r2
 800cc92:	f103 0114 	add.w	r1, r3, #20
 800cc96:	7eba      	ldrb	r2, [r7, #26]
 800cc98:	4613      	mov	r3, r2
 800cc9a:	00db      	lsls	r3, r3, #3
 800cc9c:	4413      	add	r3, r2
 800cc9e:	011b      	lsls	r3, r3, #4
 800cca0:	461a      	mov	r2, r3
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	4413      	add	r3, r2
 800cca6:	f893 004d 	ldrb.w	r0, [r3, #77]	; 0x4d
 800ccaa:	7eba      	ldrb	r2, [r7, #26]
 800ccac:	4613      	mov	r3, r2
 800ccae:	00db      	lsls	r3, r3, #3
 800ccb0:	4413      	add	r3, r2
 800ccb2:	011b      	lsls	r3, r3, #4
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	4413      	add	r3, r2
 800ccba:	689c      	ldr	r4, [r3, #8]
 800ccbc:	7eba      	ldrb	r2, [r7, #26]
 800ccbe:	4613      	mov	r3, r2
 800ccc0:	00db      	lsls	r3, r3, #3
 800ccc2:	4413      	add	r3, r2
 800ccc4:	011b      	lsls	r3, r3, #4
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	4413      	add	r3, r2
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	9305      	str	r3, [sp, #20]
 800ccd0:	9404      	str	r4, [sp, #16]
 800ccd2:	2302      	movs	r3, #2
 800ccd4:	9303      	str	r3, [sp, #12]
 800ccd6:	9002      	str	r0, [sp, #8]
 800ccd8:	9101      	str	r1, [sp, #4]
 800ccda:	6a3b      	ldr	r3, [r7, #32]
 800ccdc:	9300      	str	r3, [sp, #0]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	4a3c      	ldr	r2, [pc, #240]	; (800cdd4 <Display_DataLog+0x83c>)
 800cce2:	4631      	mov	r1, r6
 800cce4:	4628      	mov	r0, r5
 800cce6:	f00a ff7b 	bl	8017be0 <GUI_DrawNumAt_Dec>


			GUI_SetColor(tempFrameColor);
 800ccea:	69f8      	ldr	r0, [r7, #28]
 800ccec:	f010 f81e 	bl	801cd2c <GUI_SetColor>

			switch(density)
 800ccf0:	7afb      	ldrb	r3, [r7, #11]
 800ccf2:	2b01      	cmp	r3, #1
 800ccf4:	d122      	bne.n	800cd3c <Display_DataLog+0x7a4>
			{
				case 1:
					if(frameSize > 5)	frameSize = 5;
 800ccf6:	7e7b      	ldrb	r3, [r7, #25]
 800ccf8:	2b05      	cmp	r3, #5
 800ccfa:	d901      	bls.n	800cd00 <Display_DataLog+0x768>
 800ccfc:	2305      	movs	r3, #5
 800ccfe:	767b      	strb	r3, [r7, #25]

					for(uint8_t f = 1; f <= frameSize; f++)
 800cd00:	2301      	movs	r3, #1
 800cd02:	763b      	strb	r3, [r7, #24]
 800cd04:	e015      	b.n	800cd32 <Display_DataLog+0x79a>
					{
						GUI_DrawRect(x + f, y + f, x + 119 - f, y + 49 - f);
 800cd06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cd08:	7e3b      	ldrb	r3, [r7, #24]
 800cd0a:	18d0      	adds	r0, r2, r3
 800cd0c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800cd0e:	7e3b      	ldrb	r3, [r7, #24]
 800cd10:	18d1      	adds	r1, r2, r3
 800cd12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cd14:	f103 0277 	add.w	r2, r3, #119	; 0x77
 800cd18:	7e3b      	ldrb	r3, [r7, #24]
 800cd1a:	1ad4      	subs	r4, r2, r3
 800cd1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cd1e:	f103 0231 	add.w	r2, r3, #49	; 0x31
 800cd22:	7e3b      	ldrb	r3, [r7, #24]
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	4622      	mov	r2, r4
 800cd28:	f012 f894 	bl	801ee54 <GUI_DrawRect>
					for(uint8_t f = 1; f <= frameSize; f++)
 800cd2c:	7e3b      	ldrb	r3, [r7, #24]
 800cd2e:	3301      	adds	r3, #1
 800cd30:	763b      	strb	r3, [r7, #24]
 800cd32:	7e3a      	ldrb	r2, [r7, #24]
 800cd34:	7e7b      	ldrb	r3, [r7, #25]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d9e5      	bls.n	800cd06 <Display_DataLog+0x76e>
					}

					break;
 800cd3a:	e021      	b.n	800cd80 <Display_DataLog+0x7e8>

				case 0:
				default:
					if(frameSize > 10)	frameSize = 10;
 800cd3c:	7e7b      	ldrb	r3, [r7, #25]
 800cd3e:	2b0a      	cmp	r3, #10
 800cd40:	d901      	bls.n	800cd46 <Display_DataLog+0x7ae>
 800cd42:	230a      	movs	r3, #10
 800cd44:	767b      	strb	r3, [r7, #25]

					for(uint8_t f = 1; f <= frameSize; f++)
 800cd46:	2301      	movs	r3, #1
 800cd48:	75fb      	strb	r3, [r7, #23]
 800cd4a:	e015      	b.n	800cd78 <Display_DataLog+0x7e0>
					{
						GUI_DrawRect(x + f, y + f, x + 119 - f, y + 82 - f);
 800cd4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cd4e:	7dfb      	ldrb	r3, [r7, #23]
 800cd50:	18d0      	adds	r0, r2, r3
 800cd52:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800cd54:	7dfb      	ldrb	r3, [r7, #23]
 800cd56:	18d1      	adds	r1, r2, r3
 800cd58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cd5a:	f103 0277 	add.w	r2, r3, #119	; 0x77
 800cd5e:	7dfb      	ldrb	r3, [r7, #23]
 800cd60:	1ad4      	subs	r4, r2, r3
 800cd62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cd64:	f103 0252 	add.w	r2, r3, #82	; 0x52
 800cd68:	7dfb      	ldrb	r3, [r7, #23]
 800cd6a:	1ad3      	subs	r3, r2, r3
 800cd6c:	4622      	mov	r2, r4
 800cd6e:	f012 f871 	bl	801ee54 <GUI_DrawRect>
					for(uint8_t f = 1; f <= frameSize; f++)
 800cd72:	7dfb      	ldrb	r3, [r7, #23]
 800cd74:	3301      	adds	r3, #1
 800cd76:	75fb      	strb	r3, [r7, #23]
 800cd78:	7dfa      	ldrb	r2, [r7, #23]
 800cd7a:	7e7b      	ldrb	r3, [r7, #25]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d9e5      	bls.n	800cd4c <Display_DataLog+0x7b4>
			}

		}


		data[i].lastExeTime = millis;
 800cd80:	7eba      	ldrb	r2, [r7, #26]
 800cd82:	4613      	mov	r3, r2
 800cd84:	00db      	lsls	r3, r3, #3
 800cd86:	4413      	add	r3, r2
 800cd88:	011b      	lsls	r3, r3, #4
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	4413      	add	r3, r2
 800cd90:	4a11      	ldr	r2, [pc, #68]	; (800cdd8 <Display_DataLog+0x840>)
 800cd92:	6812      	ldr	r2, [r2, #0]
 800cd94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	for(uint8_t i = 0; i < dataNumber; i++)
 800cd98:	7ebb      	ldrb	r3, [r7, #26]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	76bb      	strb	r3, [r7, #26]
 800cd9e:	7eba      	ldrb	r2, [r7, #26]
 800cda0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cda4:	429a      	cmp	r2, r3
 800cda6:	f4ff ac2f 	bcc.w	800c608 <Display_DataLog+0x70>
	}

	GUI_SetColor(GUI_WHITE);
 800cdaa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800cdae:	f00f ffbd 	bl	801cd2c <GUI_SetColor>

	Display_DataLogFrame();
 800cdb2:	f000 f813 	bl	800cddc <Display_DataLogFrame>

	switch(density)
 800cdb6:	7afb      	ldrb	r3, [r7, #11]
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d102      	bne.n	800cdc2 <Display_DataLog+0x82a>
	{
		case 1:
			Display_DenseDataLogArmature();
 800cdbc:	f000 f870 	bl	800cea0 <Display_DenseDataLogArmature>
			break;
 800cdc0:	e002      	b.n	800cdc8 <Display_DataLog+0x830>

		case 0:
		default:
			Display_DataLogArmature();
 800cdc2:	f000 f823 	bl	800ce0c <Display_DataLogArmature>
	}



	//CORE FUNCTION END
}
 800cdc6:	bf00      	nop
 800cdc8:	bf00      	nop
 800cdca:	3734      	adds	r7, #52	; 0x34
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdd0:	0812b6c8 	.word	0x0812b6c8
 800cdd4:	081249a8 	.word	0x081249a8
 800cdd8:	20006a98 	.word	0x20006a98

0800cddc <Display_DataLogFrame>:



void Display_DataLogFrame(void)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	af00      	add	r7, sp, #0
	GUI_SetColor(GUI_WHITE);
 800cde0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800cde4:	f00f ffa2 	bl	801cd2c <GUI_SetColor>

	//main rect (frame)
	GUI_DrawRect(1, 1, 479, 271);
 800cde8:	f240 130f 	movw	r3, #271	; 0x10f
 800cdec:	f240 12df 	movw	r2, #479	; 0x1df
 800cdf0:	2101      	movs	r1, #1
 800cdf2:	2001      	movs	r0, #1
 800cdf4:	f012 f82e 	bl	801ee54 <GUI_DrawRect>
	GUI_DrawRect(2, 2, 478, 270);
 800cdf8:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800cdfc:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 800ce00:	2102      	movs	r1, #2
 800ce02:	2002      	movs	r0, #2
 800ce04:	f012 f826 	bl	801ee54 <GUI_DrawRect>

	//GUI_AA_DisableHiRes();
	//GUI_SetPenSize(1);
}
 800ce08:	bf00      	nop
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <Display_DataLogArmature>:


void Display_DataLogArmature(void)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
	GUI_SetColor(GUI_GRAY);
 800ce12:	4822      	ldr	r0, [pc, #136]	; (800ce9c <Display_DataLogArmature+0x90>)
 800ce14:	f00f ff8a 	bl	801cd2c <GUI_SetColor>

	uint16_t y = 24;
 800ce18:	2318      	movs	r3, #24
 800ce1a:	80fb      	strh	r3, [r7, #6]
	uint16_t x = 2;
 800ce1c:	2302      	movs	r3, #2
 800ce1e:	80bb      	strh	r3, [r7, #4]

	GUI_DrawLine(3, y, 477, y);
 800ce20:	88f9      	ldrh	r1, [r7, #6]
 800ce22:	88fb      	ldrh	r3, [r7, #6]
 800ce24:	f240 12dd 	movw	r2, #477	; 0x1dd
 800ce28:	2003      	movs	r0, #3
 800ce2a:	f010 fb07 	bl	801d43c <GUI_DrawLine>
	y += 82;
 800ce2e:	88fb      	ldrh	r3, [r7, #6]
 800ce30:	3352      	adds	r3, #82	; 0x52
 800ce32:	80fb      	strh	r3, [r7, #6]
	GUI_DrawLine(3, y, 477, y);
 800ce34:	88f9      	ldrh	r1, [r7, #6]
 800ce36:	88fb      	ldrh	r3, [r7, #6]
 800ce38:	f240 12dd 	movw	r2, #477	; 0x1dd
 800ce3c:	2003      	movs	r0, #3
 800ce3e:	f010 fafd 	bl	801d43c <GUI_DrawLine>
	y += 82;
 800ce42:	88fb      	ldrh	r3, [r7, #6]
 800ce44:	3352      	adds	r3, #82	; 0x52
 800ce46:	80fb      	strh	r3, [r7, #6]
	GUI_DrawLine(3, y, 477, y);
 800ce48:	88f9      	ldrh	r1, [r7, #6]
 800ce4a:	88fb      	ldrh	r3, [r7, #6]
 800ce4c:	f240 12dd 	movw	r2, #477	; 0x1dd
 800ce50:	2003      	movs	r0, #3
 800ce52:	f010 faf3 	bl	801d43c <GUI_DrawLine>

	y = 24;
 800ce56:	2318      	movs	r3, #24
 800ce58:	80fb      	strh	r3, [r7, #6]

	x = 121;
 800ce5a:	2379      	movs	r3, #121	; 0x79
 800ce5c:	80bb      	strh	r3, [r7, #4]
	GUI_DrawLine(x, y, x, 270);
 800ce5e:	88b8      	ldrh	r0, [r7, #4]
 800ce60:	88f9      	ldrh	r1, [r7, #6]
 800ce62:	88ba      	ldrh	r2, [r7, #4]
 800ce64:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800ce68:	f010 fae8 	bl	801d43c <GUI_DrawLine>
	x += 119;
 800ce6c:	88bb      	ldrh	r3, [r7, #4]
 800ce6e:	3377      	adds	r3, #119	; 0x77
 800ce70:	80bb      	strh	r3, [r7, #4]
	GUI_DrawLine(x, y, x, 270);
 800ce72:	88b8      	ldrh	r0, [r7, #4]
 800ce74:	88f9      	ldrh	r1, [r7, #6]
 800ce76:	88ba      	ldrh	r2, [r7, #4]
 800ce78:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800ce7c:	f010 fade 	bl	801d43c <GUI_DrawLine>
	x += 119;
 800ce80:	88bb      	ldrh	r3, [r7, #4]
 800ce82:	3377      	adds	r3, #119	; 0x77
 800ce84:	80bb      	strh	r3, [r7, #4]
	GUI_DrawLine(x, y, x, 270);
 800ce86:	88b8      	ldrh	r0, [r7, #4]
 800ce88:	88f9      	ldrh	r1, [r7, #6]
 800ce8a:	88ba      	ldrh	r2, [r7, #4]
 800ce8c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800ce90:	f010 fad4 	bl	801d43c <GUI_DrawLine>
}
 800ce94:	bf00      	nop
 800ce96:	3708      	adds	r7, #8
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	00808080 	.word	0x00808080

0800cea0 <Display_DenseDataLogArmature>:


void Display_DenseDataLogArmature(void)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
	GUI_SetColor(GUI_GRAY);
 800cea6:	4820      	ldr	r0, [pc, #128]	; (800cf28 <Display_DenseDataLogArmature+0x88>)
 800cea8:	f00f ff40 	bl	801cd2c <GUI_SetColor>

	static uint16_t y = 49;		//(272-27)/5;

	for(uint8_t i = 0; i < 6; i++)
 800ceac:	2300      	movs	r3, #0
 800ceae:	71fb      	strb	r3, [r7, #7]
 800ceb0:	e016      	b.n	800cee0 <Display_DenseDataLogArmature+0x40>
	{
		GUI_DrawLine(3, 24 + y*i, 477, 24 + y*i);
 800ceb2:	4b1e      	ldr	r3, [pc, #120]	; (800cf2c <Display_DenseDataLogArmature+0x8c>)
 800ceb4:	881b      	ldrh	r3, [r3, #0]
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	79fb      	ldrb	r3, [r7, #7]
 800ceba:	fb02 f303 	mul.w	r3, r2, r3
 800cebe:	f103 0118 	add.w	r1, r3, #24
 800cec2:	4b1a      	ldr	r3, [pc, #104]	; (800cf2c <Display_DenseDataLogArmature+0x8c>)
 800cec4:	881b      	ldrh	r3, [r3, #0]
 800cec6:	461a      	mov	r2, r3
 800cec8:	79fb      	ldrb	r3, [r7, #7]
 800ceca:	fb02 f303 	mul.w	r3, r2, r3
 800cece:	3318      	adds	r3, #24
 800ced0:	f240 12dd 	movw	r2, #477	; 0x1dd
 800ced4:	2003      	movs	r0, #3
 800ced6:	f010 fab1 	bl	801d43c <GUI_DrawLine>
	for(uint8_t i = 0; i < 6; i++)
 800ceda:	79fb      	ldrb	r3, [r7, #7]
 800cedc:	3301      	adds	r3, #1
 800cede:	71fb      	strb	r3, [r7, #7]
 800cee0:	79fb      	ldrb	r3, [r7, #7]
 800cee2:	2b05      	cmp	r3, #5
 800cee4:	d9e5      	bls.n	800ceb2 <Display_DenseDataLogArmature+0x12>
	}

	static uint16_t x = 119;	//(480-4)/4;

	for(uint8_t i = 0; i < 4; i++)
 800cee6:	2300      	movs	r3, #0
 800cee8:	71bb      	strb	r3, [r7, #6]
 800ceea:	e015      	b.n	800cf18 <Display_DenseDataLogArmature+0x78>
	{
		GUI_DrawLine(2 + x*i, 24, 2 + x*i, 270);
 800ceec:	4b10      	ldr	r3, [pc, #64]	; (800cf30 <Display_DenseDataLogArmature+0x90>)
 800ceee:	881b      	ldrh	r3, [r3, #0]
 800cef0:	461a      	mov	r2, r3
 800cef2:	79bb      	ldrb	r3, [r7, #6]
 800cef4:	fb02 f303 	mul.w	r3, r2, r3
 800cef8:	1c98      	adds	r0, r3, #2
 800cefa:	4b0d      	ldr	r3, [pc, #52]	; (800cf30 <Display_DenseDataLogArmature+0x90>)
 800cefc:	881b      	ldrh	r3, [r3, #0]
 800cefe:	461a      	mov	r2, r3
 800cf00:	79bb      	ldrb	r3, [r7, #6]
 800cf02:	fb02 f303 	mul.w	r3, r2, r3
 800cf06:	1c9a      	adds	r2, r3, #2
 800cf08:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800cf0c:	2118      	movs	r1, #24
 800cf0e:	f010 fa95 	bl	801d43c <GUI_DrawLine>
	for(uint8_t i = 0; i < 4; i++)
 800cf12:	79bb      	ldrb	r3, [r7, #6]
 800cf14:	3301      	adds	r3, #1
 800cf16:	71bb      	strb	r3, [r7, #6]
 800cf18:	79bb      	ldrb	r3, [r7, #6]
 800cf1a:	2b03      	cmp	r3, #3
 800cf1c:	d9e6      	bls.n	800ceec <Display_DenseDataLogArmature+0x4c>
	}
}
 800cf1e:	bf00      	nop
 800cf20:	bf00      	nop
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	00808080 	.word	0x00808080
 800cf2c:	200000ea 	.word	0x200000ea
 800cf30:	200000ec 	.word	0x200000ec

0800cf34 <rectInitialization>:
DisplayGui_DataGuiTypeDef DriveSTD_FL_Ty_Temp 		= {0};
DisplayGui_DataGuiTypeDef DriveSTD_FR_Ty_Temp 		= {0};


void rectInitialization(void)
{
 800cf34:	b480      	push	{r7}
 800cf36:	af00      	add	r7, sp, #0
	pageRectPositions[0].xVertex1 = 3 + 0*95;
 800cf38:	4ba1      	ldr	r3, [pc, #644]	; (800d1c0 <rectInitialization+0x28c>)
 800cf3a:	2203      	movs	r2, #3
 800cf3c:	801a      	strh	r2, [r3, #0]
	pageRectPositions[0].yVertex1 = 34 + 52 + 1;
 800cf3e:	4ba0      	ldr	r3, [pc, #640]	; (800d1c0 <rectInitialization+0x28c>)
 800cf40:	2257      	movs	r2, #87	; 0x57
 800cf42:	805a      	strh	r2, [r3, #2]
	pageRectPositions[0].xVertex2 = pageRectPositions[0].xVertex1 + 95 - 2;
 800cf44:	4b9e      	ldr	r3, [pc, #632]	; (800d1c0 <rectInitialization+0x28c>)
 800cf46:	881b      	ldrh	r3, [r3, #0]
 800cf48:	335d      	adds	r3, #93	; 0x5d
 800cf4a:	b29a      	uxth	r2, r3
 800cf4c:	4b9c      	ldr	r3, [pc, #624]	; (800d1c0 <rectInitialization+0x28c>)
 800cf4e:	809a      	strh	r2, [r3, #4]
	pageRectPositions[0].yVertex2 = pageRectPositions[0].yVertex1 + 61 - 2;
 800cf50:	4b9b      	ldr	r3, [pc, #620]	; (800d1c0 <rectInitialization+0x28c>)
 800cf52:	885b      	ldrh	r3, [r3, #2]
 800cf54:	333b      	adds	r3, #59	; 0x3b
 800cf56:	b29a      	uxth	r2, r3
 800cf58:	4b99      	ldr	r3, [pc, #612]	; (800d1c0 <rectInitialization+0x28c>)
 800cf5a:	80da      	strh	r2, [r3, #6]

	pageRectPositions[1].xVertex1 = 3 + 0*95;
 800cf5c:	4b98      	ldr	r3, [pc, #608]	; (800d1c0 <rectInitialization+0x28c>)
 800cf5e:	2203      	movs	r2, #3
 800cf60:	811a      	strh	r2, [r3, #8]
	pageRectPositions[1].yVertex1 = 34 + 52 + 1*61 + 1;
 800cf62:	4b97      	ldr	r3, [pc, #604]	; (800d1c0 <rectInitialization+0x28c>)
 800cf64:	2294      	movs	r2, #148	; 0x94
 800cf66:	815a      	strh	r2, [r3, #10]
	pageRectPositions[1].xVertex2 = pageRectPositions[1].xVertex1 + 95 - 2;
 800cf68:	4b95      	ldr	r3, [pc, #596]	; (800d1c0 <rectInitialization+0x28c>)
 800cf6a:	891b      	ldrh	r3, [r3, #8]
 800cf6c:	335d      	adds	r3, #93	; 0x5d
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	4b93      	ldr	r3, [pc, #588]	; (800d1c0 <rectInitialization+0x28c>)
 800cf72:	819a      	strh	r2, [r3, #12]
	pageRectPositions[1].yVertex2 = pageRectPositions[1].yVertex1 + 61 - 2;
 800cf74:	4b92      	ldr	r3, [pc, #584]	; (800d1c0 <rectInitialization+0x28c>)
 800cf76:	895b      	ldrh	r3, [r3, #10]
 800cf78:	333b      	adds	r3, #59	; 0x3b
 800cf7a:	b29a      	uxth	r2, r3
 800cf7c:	4b90      	ldr	r3, [pc, #576]	; (800d1c0 <rectInitialization+0x28c>)
 800cf7e:	81da      	strh	r2, [r3, #14]

	pageRectPositions[2].xVertex1 = 3 + 0*95;
 800cf80:	4b8f      	ldr	r3, [pc, #572]	; (800d1c0 <rectInitialization+0x28c>)
 800cf82:	2203      	movs	r2, #3
 800cf84:	821a      	strh	r2, [r3, #16]
	pageRectPositions[2].yVertex1 = 34 + 52 + 2*61 + 1;
 800cf86:	4b8e      	ldr	r3, [pc, #568]	; (800d1c0 <rectInitialization+0x28c>)
 800cf88:	22d1      	movs	r2, #209	; 0xd1
 800cf8a:	825a      	strh	r2, [r3, #18]
	pageRectPositions[2].xVertex2 = pageRectPositions[2].xVertex1 + 95 - 2;
 800cf8c:	4b8c      	ldr	r3, [pc, #560]	; (800d1c0 <rectInitialization+0x28c>)
 800cf8e:	8a1b      	ldrh	r3, [r3, #16]
 800cf90:	335d      	adds	r3, #93	; 0x5d
 800cf92:	b29a      	uxth	r2, r3
 800cf94:	4b8a      	ldr	r3, [pc, #552]	; (800d1c0 <rectInitialization+0x28c>)
 800cf96:	829a      	strh	r2, [r3, #20]
	pageRectPositions[2].yVertex2 = pageRectPositions[2].yVertex1 + 61 - 2 + 1;
 800cf98:	4b89      	ldr	r3, [pc, #548]	; (800d1c0 <rectInitialization+0x28c>)
 800cf9a:	8a5b      	ldrh	r3, [r3, #18]
 800cf9c:	333c      	adds	r3, #60	; 0x3c
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	4b87      	ldr	r3, [pc, #540]	; (800d1c0 <rectInitialization+0x28c>)
 800cfa2:	82da      	strh	r2, [r3, #22]

	pageRectPositions[3].xVertex1 = 3 + 1*95;
 800cfa4:	4b86      	ldr	r3, [pc, #536]	; (800d1c0 <rectInitialization+0x28c>)
 800cfa6:	2262      	movs	r2, #98	; 0x62
 800cfa8:	831a      	strh	r2, [r3, #24]
	pageRectPositions[3].yVertex1 = 34 + 52 + 2*61 + 1;
 800cfaa:	4b85      	ldr	r3, [pc, #532]	; (800d1c0 <rectInitialization+0x28c>)
 800cfac:	22d1      	movs	r2, #209	; 0xd1
 800cfae:	835a      	strh	r2, [r3, #26]
	pageRectPositions[3].xVertex2 = pageRectPositions[3].xVertex1 + 95 - 2;
 800cfb0:	4b83      	ldr	r3, [pc, #524]	; (800d1c0 <rectInitialization+0x28c>)
 800cfb2:	8b1b      	ldrh	r3, [r3, #24]
 800cfb4:	335d      	adds	r3, #93	; 0x5d
 800cfb6:	b29a      	uxth	r2, r3
 800cfb8:	4b81      	ldr	r3, [pc, #516]	; (800d1c0 <rectInitialization+0x28c>)
 800cfba:	839a      	strh	r2, [r3, #28]
	pageRectPositions[3].yVertex2 = pageRectPositions[3].yVertex1 + 61 - 2 + 1;
 800cfbc:	4b80      	ldr	r3, [pc, #512]	; (800d1c0 <rectInitialization+0x28c>)
 800cfbe:	8b5b      	ldrh	r3, [r3, #26]
 800cfc0:	333c      	adds	r3, #60	; 0x3c
 800cfc2:	b29a      	uxth	r2, r3
 800cfc4:	4b7e      	ldr	r3, [pc, #504]	; (800d1c0 <rectInitialization+0x28c>)
 800cfc6:	83da      	strh	r2, [r3, #30]

	pageRectPositions[4].xVertex1 = 3 + 1*95;
 800cfc8:	4b7d      	ldr	r3, [pc, #500]	; (800d1c0 <rectInitialization+0x28c>)
 800cfca:	2262      	movs	r2, #98	; 0x62
 800cfcc:	841a      	strh	r2, [r3, #32]
	pageRectPositions[4].yVertex1 = 34 + 52 + 1*61 + 1;
 800cfce:	4b7c      	ldr	r3, [pc, #496]	; (800d1c0 <rectInitialization+0x28c>)
 800cfd0:	2294      	movs	r2, #148	; 0x94
 800cfd2:	845a      	strh	r2, [r3, #34]	; 0x22
	pageRectPositions[4].xVertex2 = pageRectPositions[4].xVertex1 + 95 - 2;
 800cfd4:	4b7a      	ldr	r3, [pc, #488]	; (800d1c0 <rectInitialization+0x28c>)
 800cfd6:	8c1b      	ldrh	r3, [r3, #32]
 800cfd8:	335d      	adds	r3, #93	; 0x5d
 800cfda:	b29a      	uxth	r2, r3
 800cfdc:	4b78      	ldr	r3, [pc, #480]	; (800d1c0 <rectInitialization+0x28c>)
 800cfde:	849a      	strh	r2, [r3, #36]	; 0x24
	pageRectPositions[4].yVertex2 = pageRectPositions[4].yVertex1 + 61 - 2;
 800cfe0:	4b77      	ldr	r3, [pc, #476]	; (800d1c0 <rectInitialization+0x28c>)
 800cfe2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cfe4:	333b      	adds	r3, #59	; 0x3b
 800cfe6:	b29a      	uxth	r2, r3
 800cfe8:	4b75      	ldr	r3, [pc, #468]	; (800d1c0 <rectInitialization+0x28c>)
 800cfea:	84da      	strh	r2, [r3, #38]	; 0x26

	pageRectPositions[5].xVertex1 = 3 + 1*95;
 800cfec:	4b74      	ldr	r3, [pc, #464]	; (800d1c0 <rectInitialization+0x28c>)
 800cfee:	2262      	movs	r2, #98	; 0x62
 800cff0:	851a      	strh	r2, [r3, #40]	; 0x28
	pageRectPositions[5].yVertex1 = 34 + 52 + 1;
 800cff2:	4b73      	ldr	r3, [pc, #460]	; (800d1c0 <rectInitialization+0x28c>)
 800cff4:	2257      	movs	r2, #87	; 0x57
 800cff6:	855a      	strh	r2, [r3, #42]	; 0x2a
	pageRectPositions[5].xVertex2 = pageRectPositions[5].xVertex1 + 95 - 2;
 800cff8:	4b71      	ldr	r3, [pc, #452]	; (800d1c0 <rectInitialization+0x28c>)
 800cffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cffc:	335d      	adds	r3, #93	; 0x5d
 800cffe:	b29a      	uxth	r2, r3
 800d000:	4b6f      	ldr	r3, [pc, #444]	; (800d1c0 <rectInitialization+0x28c>)
 800d002:	859a      	strh	r2, [r3, #44]	; 0x2c
	pageRectPositions[5].yVertex2 = pageRectPositions[5].yVertex1 + 61 - 2;
 800d004:	4b6e      	ldr	r3, [pc, #440]	; (800d1c0 <rectInitialization+0x28c>)
 800d006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d008:	333b      	adds	r3, #59	; 0x3b
 800d00a:	b29a      	uxth	r2, r3
 800d00c:	4b6c      	ldr	r3, [pc, #432]	; (800d1c0 <rectInitialization+0x28c>)
 800d00e:	85da      	strh	r2, [r3, #46]	; 0x2e


	pageRectPositions[5 + 1].xVertex1 = 4 + 3*95;
 800d010:	4b6b      	ldr	r3, [pc, #428]	; (800d1c0 <rectInitialization+0x28c>)
 800d012:	f240 1221 	movw	r2, #289	; 0x121
 800d016:	861a      	strh	r2, [r3, #48]	; 0x30
	pageRectPositions[5 + 1].yVertex1 = 34 + 52 + 1;
 800d018:	4b69      	ldr	r3, [pc, #420]	; (800d1c0 <rectInitialization+0x28c>)
 800d01a:	2257      	movs	r2, #87	; 0x57
 800d01c:	865a      	strh	r2, [r3, #50]	; 0x32
	pageRectPositions[5 + 1].xVertex2 = pageRectPositions[5 + 1].xVertex1 + 95 - 2;
 800d01e:	4b68      	ldr	r3, [pc, #416]	; (800d1c0 <rectInitialization+0x28c>)
 800d020:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d022:	335d      	adds	r3, #93	; 0x5d
 800d024:	b29a      	uxth	r2, r3
 800d026:	4b66      	ldr	r3, [pc, #408]	; (800d1c0 <rectInitialization+0x28c>)
 800d028:	869a      	strh	r2, [r3, #52]	; 0x34
	pageRectPositions[5 + 1].yVertex2 = pageRectPositions[5 + 1].yVertex1 + 61 - 2;
 800d02a:	4b65      	ldr	r3, [pc, #404]	; (800d1c0 <rectInitialization+0x28c>)
 800d02c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d02e:	333b      	adds	r3, #59	; 0x3b
 800d030:	b29a      	uxth	r2, r3
 800d032:	4b63      	ldr	r3, [pc, #396]	; (800d1c0 <rectInitialization+0x28c>)
 800d034:	86da      	strh	r2, [r3, #54]	; 0x36

	pageRectPositions[5 + 2].xVertex1 = 4 + 3*95;
 800d036:	4b62      	ldr	r3, [pc, #392]	; (800d1c0 <rectInitialization+0x28c>)
 800d038:	f240 1221 	movw	r2, #289	; 0x121
 800d03c:	871a      	strh	r2, [r3, #56]	; 0x38
	pageRectPositions[5 + 2].yVertex1 = 34 + 52 + 1*61 + 1;
 800d03e:	4b60      	ldr	r3, [pc, #384]	; (800d1c0 <rectInitialization+0x28c>)
 800d040:	2294      	movs	r2, #148	; 0x94
 800d042:	875a      	strh	r2, [r3, #58]	; 0x3a
	pageRectPositions[5 + 2].xVertex2 = pageRectPositions[5 + 2].xVertex1 + 95 - 2;
 800d044:	4b5e      	ldr	r3, [pc, #376]	; (800d1c0 <rectInitialization+0x28c>)
 800d046:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800d048:	335d      	adds	r3, #93	; 0x5d
 800d04a:	b29a      	uxth	r2, r3
 800d04c:	4b5c      	ldr	r3, [pc, #368]	; (800d1c0 <rectInitialization+0x28c>)
 800d04e:	879a      	strh	r2, [r3, #60]	; 0x3c
	pageRectPositions[5 + 2].yVertex2 = pageRectPositions[5 + 2].yVertex1 + 61 - 2;
 800d050:	4b5b      	ldr	r3, [pc, #364]	; (800d1c0 <rectInitialization+0x28c>)
 800d052:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800d054:	333b      	adds	r3, #59	; 0x3b
 800d056:	b29a      	uxth	r2, r3
 800d058:	4b59      	ldr	r3, [pc, #356]	; (800d1c0 <rectInitialization+0x28c>)
 800d05a:	87da      	strh	r2, [r3, #62]	; 0x3e

	pageRectPositions[5 + 3].xVertex1 = 4 + 3*95;
 800d05c:	4b58      	ldr	r3, [pc, #352]	; (800d1c0 <rectInitialization+0x28c>)
 800d05e:	f240 1221 	movw	r2, #289	; 0x121
 800d062:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pageRectPositions[5 + 3].yVertex1 = 34 + 52 + 2*61 + 1;
 800d066:	4b56      	ldr	r3, [pc, #344]	; (800d1c0 <rectInitialization+0x28c>)
 800d068:	22d1      	movs	r2, #209	; 0xd1
 800d06a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pageRectPositions[5 + 3].xVertex2 = pageRectPositions[5 + 3].xVertex1 + 95 - 2;
 800d06e:	4b54      	ldr	r3, [pc, #336]	; (800d1c0 <rectInitialization+0x28c>)
 800d070:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d074:	335d      	adds	r3, #93	; 0x5d
 800d076:	b29a      	uxth	r2, r3
 800d078:	4b51      	ldr	r3, [pc, #324]	; (800d1c0 <rectInitialization+0x28c>)
 800d07a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	pageRectPositions[5 + 3].yVertex2 = pageRectPositions[5 + 3].yVertex1 + 61 - 2 + 1;
 800d07e:	4b50      	ldr	r3, [pc, #320]	; (800d1c0 <rectInitialization+0x28c>)
 800d080:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800d084:	333c      	adds	r3, #60	; 0x3c
 800d086:	b29a      	uxth	r2, r3
 800d088:	4b4d      	ldr	r3, [pc, #308]	; (800d1c0 <rectInitialization+0x28c>)
 800d08a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	pageRectPositions[5 + 4].xVertex1 = 4 + 4*95;
 800d08e:	4b4c      	ldr	r3, [pc, #304]	; (800d1c0 <rectInitialization+0x28c>)
 800d090:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800d094:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	pageRectPositions[5 + 4].yVertex1 = 34 + 52 + 2*61 + 1;
 800d098:	4b49      	ldr	r3, [pc, #292]	; (800d1c0 <rectInitialization+0x28c>)
 800d09a:	22d1      	movs	r2, #209	; 0xd1
 800d09c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	pageRectPositions[5 + 4].xVertex2 = pageRectPositions[5 + 4].xVertex1 + 95 - 2;
 800d0a0:	4b47      	ldr	r3, [pc, #284]	; (800d1c0 <rectInitialization+0x28c>)
 800d0a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d0a6:	335d      	adds	r3, #93	; 0x5d
 800d0a8:	b29a      	uxth	r2, r3
 800d0aa:	4b45      	ldr	r3, [pc, #276]	; (800d1c0 <rectInitialization+0x28c>)
 800d0ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	pageRectPositions[5 + 4].yVertex2 = pageRectPositions[5 + 4].yVertex1 + 61 - 2 + 1;
 800d0b0:	4b43      	ldr	r3, [pc, #268]	; (800d1c0 <rectInitialization+0x28c>)
 800d0b2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d0b6:	333c      	adds	r3, #60	; 0x3c
 800d0b8:	b29a      	uxth	r2, r3
 800d0ba:	4b41      	ldr	r3, [pc, #260]	; (800d1c0 <rectInitialization+0x28c>)
 800d0bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	pageRectPositions[5 + 5].xVertex1 = 4 + 4*95;
 800d0c0:	4b3f      	ldr	r3, [pc, #252]	; (800d1c0 <rectInitialization+0x28c>)
 800d0c2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800d0c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	pageRectPositions[5 + 5].yVertex1 = 34 + 52 + 1*61 + 1;
 800d0ca:	4b3d      	ldr	r3, [pc, #244]	; (800d1c0 <rectInitialization+0x28c>)
 800d0cc:	2294      	movs	r2, #148	; 0x94
 800d0ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	pageRectPositions[5 + 5].xVertex2 = pageRectPositions[5 + 5].xVertex1 + 95 - 2;
 800d0d2:	4b3b      	ldr	r3, [pc, #236]	; (800d1c0 <rectInitialization+0x28c>)
 800d0d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d0d8:	335d      	adds	r3, #93	; 0x5d
 800d0da:	b29a      	uxth	r2, r3
 800d0dc:	4b38      	ldr	r3, [pc, #224]	; (800d1c0 <rectInitialization+0x28c>)
 800d0de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	pageRectPositions[5 + 5].yVertex2 = pageRectPositions[5 + 5].yVertex1 + 61 - 2;
 800d0e2:	4b37      	ldr	r3, [pc, #220]	; (800d1c0 <rectInitialization+0x28c>)
 800d0e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d0e8:	333b      	adds	r3, #59	; 0x3b
 800d0ea:	b29a      	uxth	r2, r3
 800d0ec:	4b34      	ldr	r3, [pc, #208]	; (800d1c0 <rectInitialization+0x28c>)
 800d0ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	pageRectPositions[5 + 6].xVertex1 = 4 + 4*95;
 800d0f2:	4b33      	ldr	r3, [pc, #204]	; (800d1c0 <rectInitialization+0x28c>)
 800d0f4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800d0f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	pageRectPositions[5 + 6].yVertex1 = 34 + 52 + 1;
 800d0fc:	4b30      	ldr	r3, [pc, #192]	; (800d1c0 <rectInitialization+0x28c>)
 800d0fe:	2257      	movs	r2, #87	; 0x57
 800d100:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	pageRectPositions[5 + 6].xVertex2 = pageRectPositions[5 + 6].xVertex1 + 95 - 2;
 800d104:	4b2e      	ldr	r3, [pc, #184]	; (800d1c0 <rectInitialization+0x28c>)
 800d106:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d10a:	335d      	adds	r3, #93	; 0x5d
 800d10c:	b29a      	uxth	r2, r3
 800d10e:	4b2c      	ldr	r3, [pc, #176]	; (800d1c0 <rectInitialization+0x28c>)
 800d110:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	pageRectPositions[5 + 6].yVertex2 = pageRectPositions[5 + 6].yVertex1 + 61 - 2;
 800d114:	4b2a      	ldr	r3, [pc, #168]	; (800d1c0 <rectInitialization+0x28c>)
 800d116:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d11a:	333b      	adds	r3, #59	; 0x3b
 800d11c:	b29a      	uxth	r2, r3
 800d11e:	4b28      	ldr	r3, [pc, #160]	; (800d1c0 <rectInitialization+0x28c>)
 800d120:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e


	pageRectPositions[12].xVertex1 = 3 + 2*95;
 800d124:	4b26      	ldr	r3, [pc, #152]	; (800d1c0 <rectInitialization+0x28c>)
 800d126:	22c1      	movs	r2, #193	; 0xc1
 800d128:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	pageRectPositions[12].yVertex1 = 34 + 52 + 2*61 + 1;
 800d12c:	4b24      	ldr	r3, [pc, #144]	; (800d1c0 <rectInitialization+0x28c>)
 800d12e:	22d1      	movs	r2, #209	; 0xd1
 800d130:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	pageRectPositions[12].xVertex2 = pageRectPositions[12].xVertex1 + 95 - 2 + 1;
 800d134:	4b22      	ldr	r3, [pc, #136]	; (800d1c0 <rectInitialization+0x28c>)
 800d136:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d13a:	335e      	adds	r3, #94	; 0x5e
 800d13c:	b29a      	uxth	r2, r3
 800d13e:	4b20      	ldr	r3, [pc, #128]	; (800d1c0 <rectInitialization+0x28c>)
 800d140:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	pageRectPositions[12].yVertex2 = pageRectPositions[12].yVertex1 + 61 - 2 + 1;
 800d144:	4b1e      	ldr	r3, [pc, #120]	; (800d1c0 <rectInitialization+0x28c>)
 800d146:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d14a:	333c      	adds	r3, #60	; 0x3c
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	4b1c      	ldr	r3, [pc, #112]	; (800d1c0 <rectInitialization+0x28c>)
 800d150:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66



	pageRectPositions[13].xVertex1 = 3;
 800d154:	4b1a      	ldr	r3, [pc, #104]	; (800d1c0 <rectInitialization+0x28c>)
 800d156:	2203      	movs	r2, #3
 800d158:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	pageRectPositions[13].yVertex1 = 34 + 1;
 800d15c:	4b18      	ldr	r3, [pc, #96]	; (800d1c0 <rectInitialization+0x28c>)
 800d15e:	2223      	movs	r2, #35	; 0x23
 800d160:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	pageRectPositions[13].xVertex2 = pageRectPositions[13].xVertex1 + 2*88 - 1 - 2;
 800d164:	4b16      	ldr	r3, [pc, #88]	; (800d1c0 <rectInitialization+0x28c>)
 800d166:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d16a:	33ad      	adds	r3, #173	; 0xad
 800d16c:	b29a      	uxth	r2, r3
 800d16e:	4b14      	ldr	r3, [pc, #80]	; (800d1c0 <rectInitialization+0x28c>)
 800d170:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	pageRectPositions[13].yVertex2 = pageRectPositions[13].yVertex1 + 52 - 2;
 800d174:	4b12      	ldr	r3, [pc, #72]	; (800d1c0 <rectInitialization+0x28c>)
 800d176:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d17a:	3332      	adds	r3, #50	; 0x32
 800d17c:	b29a      	uxth	r2, r3
 800d17e:	4b10      	ldr	r3, [pc, #64]	; (800d1c0 <rectInitialization+0x28c>)
 800d180:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	pageRectPositions[14].xVertex1 = 480 - 2 - 2*88 + 1 + 1;
 800d184:	4b0e      	ldr	r3, [pc, #56]	; (800d1c0 <rectInitialization+0x28c>)
 800d186:	f44f 7298 	mov.w	r2, #304	; 0x130
 800d18a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	pageRectPositions[14].yVertex1 = 34 + 1;
 800d18e:	4b0c      	ldr	r3, [pc, #48]	; (800d1c0 <rectInitialization+0x28c>)
 800d190:	2223      	movs	r2, #35	; 0x23
 800d192:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	pageRectPositions[14].xVertex2 = pageRectPositions[14].xVertex1 + 2*88 - 1 - 2;
 800d196:	4b0a      	ldr	r3, [pc, #40]	; (800d1c0 <rectInitialization+0x28c>)
 800d198:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800d19c:	33ad      	adds	r3, #173	; 0xad
 800d19e:	b29a      	uxth	r2, r3
 800d1a0:	4b07      	ldr	r3, [pc, #28]	; (800d1c0 <rectInitialization+0x28c>)
 800d1a2:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	pageRectPositions[14].yVertex2 = pageRectPositions[14].yVertex1 + 52 - 2;
 800d1a6:	4b06      	ldr	r3, [pc, #24]	; (800d1c0 <rectInitialization+0x28c>)
 800d1a8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800d1ac:	3332      	adds	r3, #50	; 0x32
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	4b03      	ldr	r3, [pc, #12]	; (800d1c0 <rectInitialization+0x28c>)
 800d1b2:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
}
 800d1b6:	bf00      	nop
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr
 800d1c0:	20005ddc 	.word	0x20005ddc
 800d1c4:	00000000 	.word	0x00000000

0800d1c8 <defaultDataInitialization>:

void defaultDataInitialization(void)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	af00      	add	r7, sp, #0
	DriveSTD_noData.enable = DISABLE;
 800d1cc:	4bac      	ldr	r3, [pc, #688]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	701a      	strb	r2, [r3, #0]

	DriveSTD_noData.string = "Data";
 800d1d2:	4bab      	ldr	r3, [pc, #684]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d1d4:	4aab      	ldr	r2, [pc, #684]	; (800d484 <defaultDataInitialization+0x2bc>)
 800d1d6:	605a      	str	r2, [r3, #4]
	DriveSTD_noData.intStr = "";
 800d1d8:	4ba9      	ldr	r3, [pc, #676]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d1da:	4aab      	ldr	r2, [pc, #684]	; (800d488 <defaultDataInitialization+0x2c0>)
 800d1dc:	609a      	str	r2, [r3, #8]
	DriveSTD_noData.endStr = "";
 800d1de:	4ba8      	ldr	r3, [pc, #672]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d1e0:	4aa9      	ldr	r2, [pc, #676]	; (800d488 <defaultDataInitialization+0x2c0>)
 800d1e2:	60da      	str	r2, [r3, #12]

	DriveSTD_noData.dataPointer = &defaultDataPointed;
 800d1e4:	4ba6      	ldr	r3, [pc, #664]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d1e6:	4aa9      	ldr	r2, [pc, #676]	; (800d48c <defaultDataInitialization+0x2c4>)
 800d1e8:	611a      	str	r2, [r3, #16]
	DriveSTD_noData.dataLogInt.number = 123;
 800d1ea:	4ba5      	ldr	r3, [pc, #660]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d1ec:	227b      	movs	r2, #123	; 0x7b
 800d1ee:	615a      	str	r2, [r3, #20]
	DriveSTD_noData.dataLogFloat.number = 0.7;
 800d1f0:	49a3      	ldr	r1, [pc, #652]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d1f2:	a3a1      	add	r3, pc, #644	; (adr r3, 800d478 <defaultDataInitialization+0x2b0>)
 800d1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f8:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_noData.decimalDigits = 1;
 800d1fc:	4ba0      	ldr	r3, [pc, #640]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d1fe:	2201      	movs	r2, #1
 800d200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_noData.textColor = PAGE_TEXT_COLOR;
 800d204:	4b9e      	ldr	r3, [pc, #632]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d206:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d20a:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_noData.dataColor = PAGE_DATA_COLOR;
 800d20c:	4b9c      	ldr	r3, [pc, #624]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d20e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d212:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_noData.backColor = PAGE_BACK_COLOR;
 800d214:	4b9a      	ldr	r3, [pc, #616]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d216:	2200      	movs	r2, #0
 800d218:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_noData.frameColor = PAGE_BACK_COLOR;
 800d21a:	4b99      	ldr	r3, [pc, #612]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d21c:	2200      	movs	r2, #0
 800d21e:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_noData.dataType = DataLog_DataType_Float;
 800d220:	4b97      	ldr	r3, [pc, #604]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d222:	2201      	movs	r2, #1
 800d224:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_noData.signEnable = SIGN_NEGATIVE;
 800d228:	4b95      	ldr	r3, [pc, #596]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d22a:	2203      	movs	r2, #3
 800d22c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_noData.valueControlEnable = DISABLE;
 800d230:	4b93      	ldr	r3, [pc, #588]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d232:	2200      	movs	r2, #0
 800d234:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_noData.maxValue = 0;
 800d238:	4b91      	ldr	r3, [pc, #580]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d23a:	f04f 0200 	mov.w	r2, #0
 800d23e:	651a      	str	r2, [r3, #80]	; 0x50
	DriveSTD_noData.minValue = 0;
 800d240:	4b8f      	ldr	r3, [pc, #572]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d242:	f04f 0200 	mov.w	r2, #0
 800d246:	655a      	str	r2, [r3, #84]	; 0x54
	DriveSTD_noData.millisValueOver = millis;
 800d248:	4b91      	ldr	r3, [pc, #580]	; (800d490 <defaultDataInitialization+0x2c8>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	4a8c      	ldr	r2, [pc, #560]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d24e:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_noData.minTimeValueOver = DEFAULT_MIN_TIME_VALUE_OVER;
 800d250:	4b8b      	ldr	r3, [pc, #556]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d252:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d256:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_noData.dataRefreshDelay = 500;
 800d25a:	4b89      	ldr	r3, [pc, #548]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d25c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d260:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_noData.dataRefreshMillis = 0;
 800d264:	4b86      	ldr	r3, [pc, #536]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d266:	2200      	movs	r2, #0
 800d268:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_noData.receivedDataControlEnable = DISABLE;
 800d26a:	4b85      	ldr	r3, [pc, #532]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d26c:	2200      	movs	r2, #0
 800d26e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	DriveSTD_noData.lastTimeData = (uint32_t*)(&defaultDataPointed);
 800d272:	4b83      	ldr	r3, [pc, #524]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d274:	4a85      	ldr	r2, [pc, #532]	; (800d48c <defaultDataInitialization+0x2c4>)
 800d276:	66da      	str	r2, [r3, #108]	; 0x6c
	DriveSTD_noData.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800d278:	4b81      	ldr	r3, [pc, #516]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d27a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d27e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_noData.blinkingMillis = 0;
 800d282:	4b7f      	ldr	r3, [pc, #508]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d284:	2200      	movs	r2, #0
 800d286:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_noData.blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800d288:	4b7d      	ldr	r3, [pc, #500]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d28a:	22fa      	movs	r2, #250	; 0xfa
 800d28c:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_noData.blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800d290:	4b7b      	ldr	r3, [pc, #492]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d292:	22fa      	movs	r2, #250	; 0xfa
 800d294:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_noData.blinkingStatus = 0;
 800d298:	4b79      	ldr	r3, [pc, #484]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d29a:	2200      	movs	r2, #0
 800d29c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_noData.blinkingState = 0;
 800d2a0:	4b77      	ldr	r3, [pc, #476]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_noData.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800d2a8:	4b75      	ldr	r3, [pc, #468]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d2aa:	2204      	movs	r2, #4
 800d2ac:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_noData.blinkingFrameEnable = DISABLE;
 800d2b0:	4b73      	ldr	r3, [pc, #460]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_noData.blinkingBackEnable = DISABLE;
 800d2b8:	4b71      	ldr	r3, [pc, #452]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_noData.blinkingOverColor = GUI_RED;
 800d2c0:	4b6f      	ldr	r3, [pc, #444]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d2c2:	22ff      	movs	r2, #255	; 0xff
 800d2c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_noData.blinkingUnderColor = GUI_RED;
 800d2c8:	4b6d      	ldr	r3, [pc, #436]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d2ca:	22ff      	movs	r2, #255	; 0xff
 800d2cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_noData.lastExeTime = 0;
 800d2d0:	4b6b      	ldr	r3, [pc, #428]	; (800d480 <defaultDataInitialization+0x2b8>)
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c




	DriveSTD_waterTemp.enable = ENABLE;
 800d2d8:	4b6e      	ldr	r3, [pc, #440]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d2da:	2201      	movs	r2, #1
 800d2dc:	701a      	strb	r2, [r3, #0]

	DriveSTD_waterTemp.string = "Water T";
 800d2de:	4b6d      	ldr	r3, [pc, #436]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d2e0:	4a6d      	ldr	r2, [pc, #436]	; (800d498 <defaultDataInitialization+0x2d0>)
 800d2e2:	605a      	str	r2, [r3, #4]
	DriveSTD_waterTemp.intStr = "";
 800d2e4:	4b6b      	ldr	r3, [pc, #428]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d2e6:	4a68      	ldr	r2, [pc, #416]	; (800d488 <defaultDataInitialization+0x2c0>)
 800d2e8:	609a      	str	r2, [r3, #8]
	DriveSTD_waterTemp.endStr = "";
 800d2ea:	4b6a      	ldr	r3, [pc, #424]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d2ec:	4a66      	ldr	r2, [pc, #408]	; (800d488 <defaultDataInitialization+0x2c0>)
 800d2ee:	60da      	str	r2, [r3, #12]

	DriveSTD_waterTemp.dataPointer = &CAR_Data.waterTemp.floatData;
 800d2f0:	4b68      	ldr	r3, [pc, #416]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d2f2:	4a6a      	ldr	r2, [pc, #424]	; (800d49c <defaultDataInitialization+0x2d4>)
 800d2f4:	611a      	str	r2, [r3, #16]
	DriveSTD_waterTemp.dataLogInt.number = 123;
 800d2f6:	4b67      	ldr	r3, [pc, #412]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d2f8:	227b      	movs	r2, #123	; 0x7b
 800d2fa:	615a      	str	r2, [r3, #20]
	DriveSTD_waterTemp.dataLogFloat.number = 0.7;
 800d2fc:	4965      	ldr	r1, [pc, #404]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d2fe:	a35e      	add	r3, pc, #376	; (adr r3, 800d478 <defaultDataInitialization+0x2b0>)
 800d300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d304:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_waterTemp.decimalDigits = 1;
 800d308:	4b62      	ldr	r3, [pc, #392]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d30a:	2201      	movs	r2, #1
 800d30c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_waterTemp.textColor = PAGE_TEXT_COLOR;
 800d310:	4b60      	ldr	r3, [pc, #384]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d312:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d316:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_waterTemp.dataColor = PAGE_DATA_COLOR;
 800d318:	4b5e      	ldr	r3, [pc, #376]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d31a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d31e:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_waterTemp.backColor = PAGE_BACK_COLOR;
 800d320:	4b5c      	ldr	r3, [pc, #368]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d322:	2200      	movs	r2, #0
 800d324:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_waterTemp.frameColor = PAGE_BACK_COLOR;
 800d326:	4b5b      	ldr	r3, [pc, #364]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d328:	2200      	movs	r2, #0
 800d32a:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_waterTemp.dataType = DataLog_DataType_Float;
 800d32c:	4b59      	ldr	r3, [pc, #356]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d32e:	2201      	movs	r2, #1
 800d330:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_waterTemp.signEnable = SIGN_NEGATIVE;
 800d334:	4b57      	ldr	r3, [pc, #348]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d336:	2203      	movs	r2, #3
 800d338:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_waterTemp.valueControlEnable = ENABLE;
 800d33c:	4b55      	ldr	r3, [pc, #340]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d33e:	2201      	movs	r2, #1
 800d340:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_waterTemp.maxValue = CAR_Data.waterTemp.maxValue;
 800d344:	4b56      	ldr	r3, [pc, #344]	; (800d4a0 <defaultDataInitialization+0x2d8>)
 800d346:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4a51      	ldr	r2, [pc, #324]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d34e:	6513      	str	r3, [r2, #80]	; 0x50
	DriveSTD_waterTemp.minValue = CAR_Data.waterTemp.minValue;
 800d350:	4b53      	ldr	r3, [pc, #332]	; (800d4a0 <defaultDataInitialization+0x2d8>)
 800d352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4a4e      	ldr	r2, [pc, #312]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d35a:	6553      	str	r3, [r2, #84]	; 0x54
	DriveSTD_waterTemp.millisValueOver = millis;
 800d35c:	4b4c      	ldr	r3, [pc, #304]	; (800d490 <defaultDataInitialization+0x2c8>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a4c      	ldr	r2, [pc, #304]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d362:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_waterTemp.minTimeValueOver = DEFAULT_MIN_TIME_VALUE_OVER;
 800d364:	4b4b      	ldr	r3, [pc, #300]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d366:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d36a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_waterTemp.dataRefreshDelay = 500;
 800d36e:	4b49      	ldr	r3, [pc, #292]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d370:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d374:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_waterTemp.dataRefreshMillis = 0;
 800d378:	4b46      	ldr	r3, [pc, #280]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d37a:	2200      	movs	r2, #0
 800d37c:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_waterTemp.receivedDataControlEnable = ENABLE;
 800d37e:	4b45      	ldr	r3, [pc, #276]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d380:	2201      	movs	r2, #1
 800d382:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	DriveSTD_waterTemp.lastTimeData = &CAR_Data.waterTemp.lastTimeData;
 800d386:	4b43      	ldr	r3, [pc, #268]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d388:	4a46      	ldr	r2, [pc, #280]	; (800d4a4 <defaultDataInitialization+0x2dc>)
 800d38a:	66da      	str	r2, [r3, #108]	; 0x6c
	DriveSTD_waterTemp.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800d38c:	4b41      	ldr	r3, [pc, #260]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d38e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d392:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_waterTemp.blinkingMillis = 0;
 800d396:	4b3f      	ldr	r3, [pc, #252]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d398:	2200      	movs	r2, #0
 800d39a:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_waterTemp.blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800d39c:	4b3d      	ldr	r3, [pc, #244]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d39e:	22fa      	movs	r2, #250	; 0xfa
 800d3a0:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_waterTemp.blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800d3a4:	4b3b      	ldr	r3, [pc, #236]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d3a6:	22fa      	movs	r2, #250	; 0xfa
 800d3a8:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_waterTemp.blinkingStatus = 0;
 800d3ac:	4b39      	ldr	r3, [pc, #228]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_waterTemp.blinkingState = 0;
 800d3b4:	4b37      	ldr	r3, [pc, #220]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_waterTemp.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800d3bc:	4b35      	ldr	r3, [pc, #212]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d3be:	2204      	movs	r2, #4
 800d3c0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_waterTemp.blinkingFrameEnable = ENABLE;
 800d3c4:	4b33      	ldr	r3, [pc, #204]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_waterTemp.blinkingBackEnable = ENABLE;
 800d3cc:	4b31      	ldr	r3, [pc, #196]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_waterTemp.blinkingOverColor = GUI_RED;
 800d3d4:	4b2f      	ldr	r3, [pc, #188]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d3d6:	22ff      	movs	r2, #255	; 0xff
 800d3d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_waterTemp.blinkingUnderColor = GUI_BLUE;
 800d3dc:	4b2d      	ldr	r3, [pc, #180]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d3de:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800d3e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_waterTemp.lastExeTime = 0;
 800d3e6:	4b2b      	ldr	r3, [pc, #172]	; (800d494 <defaultDataInitialization+0x2cc>)
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c



	DriveSTD_oilTemp.enable = ENABLE;
 800d3ee:	4b2e      	ldr	r3, [pc, #184]	; (800d4a8 <defaultDataInitialization+0x2e0>)
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	701a      	strb	r2, [r3, #0]

	DriveSTD_oilTemp.string = "Oil T";
 800d3f4:	4b2c      	ldr	r3, [pc, #176]	; (800d4a8 <defaultDataInitialization+0x2e0>)
 800d3f6:	4a2d      	ldr	r2, [pc, #180]	; (800d4ac <defaultDataInitialization+0x2e4>)
 800d3f8:	605a      	str	r2, [r3, #4]
	DriveSTD_oilTemp.intStr = "";
 800d3fa:	4b2b      	ldr	r3, [pc, #172]	; (800d4a8 <defaultDataInitialization+0x2e0>)
 800d3fc:	4a22      	ldr	r2, [pc, #136]	; (800d488 <defaultDataInitialization+0x2c0>)
 800d3fe:	609a      	str	r2, [r3, #8]
	DriveSTD_oilTemp.endStr = "";
 800d400:	4b29      	ldr	r3, [pc, #164]	; (800d4a8 <defaultDataInitialization+0x2e0>)
 800d402:	4a21      	ldr	r2, [pc, #132]	; (800d488 <defaultDataInitialization+0x2c0>)
 800d404:	60da      	str	r2, [r3, #12]

	DriveSTD_oilTemp.dataPointer = &CAR_Data.oilTemp.floatData;
 800d406:	4b28      	ldr	r3, [pc, #160]	; (800d4a8 <defaultDataInitialization+0x2e0>)
 800d408:	4a29      	ldr	r2, [pc, #164]	; (800d4b0 <defaultDataInitialization+0x2e8>)
 800d40a:	611a      	str	r2, [r3, #16]
	DriveSTD_oilTemp.dataLogInt.number = 123;
 800d40c:	4b26      	ldr	r3, [pc, #152]	; (800d4a8 <defaultDataInitialization+0x2e0>)
 800d40e:	227b      	movs	r2, #123	; 0x7b
 800d410:	615a      	str	r2, [r3, #20]
	DriveSTD_oilTemp.dataLogFloat.number = 0.7;
 800d412:	4925      	ldr	r1, [pc, #148]	; (800d4a8 <defaultDataInitialization+0x2e0>)
 800d414:	a318      	add	r3, pc, #96	; (adr r3, 800d478 <defaultDataInitialization+0x2b0>)
 800d416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_oilTemp.decimalDigits = 1;
 800d41e:	4b22      	ldr	r3, [pc, #136]	; (800d4a8 <defaultDataInitialization+0x2e0>)
 800d420:	2201      	movs	r2, #1
 800d422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_oilTemp.textColor = PAGE_TEXT_COLOR;
 800d426:	4b20      	ldr	r3, [pc, #128]	; (800d4a8 <defaultDataInitialization+0x2e0>)
 800d428:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d42c:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_oilTemp.dataColor = PAGE_DATA_COLOR;
 800d42e:	4b1e      	ldr	r3, [pc, #120]	; (800d4a8 <defaultDataInitialization+0x2e0>)
 800d430:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d434:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_oilTemp.backColor = PAGE_BACK_COLOR;
 800d436:	4b1c      	ldr	r3, [pc, #112]	; (800d4a8 <defaultDataInitialization+0x2e0>)
 800d438:	2200      	movs	r2, #0
 800d43a:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_oilTemp.frameColor = PAGE_BACK_COLOR;
 800d43c:	4b1a      	ldr	r3, [pc, #104]	; (800d4a8 <defaultDataInitialization+0x2e0>)
 800d43e:	2200      	movs	r2, #0
 800d440:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_oilTemp.dataType = DataLog_DataType_Float;
 800d442:	4b19      	ldr	r3, [pc, #100]	; (800d4a8 <defaultDataInitialization+0x2e0>)
 800d444:	2201      	movs	r2, #1
 800d446:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_oilTemp.signEnable = SIGN_NEGATIVE;
 800d44a:	4b17      	ldr	r3, [pc, #92]	; (800d4a8 <defaultDataInitialization+0x2e0>)
 800d44c:	2203      	movs	r2, #3
 800d44e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_oilTemp.valueControlEnable = ENABLE;
 800d452:	4b15      	ldr	r3, [pc, #84]	; (800d4a8 <defaultDataInitialization+0x2e0>)
 800d454:	2201      	movs	r2, #1
 800d456:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_oilTemp.maxValue = CAR_Data.oilTemp.maxValue;
 800d45a:	4b11      	ldr	r3, [pc, #68]	; (800d4a0 <defaultDataInitialization+0x2d8>)
 800d45c:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4a11      	ldr	r2, [pc, #68]	; (800d4a8 <defaultDataInitialization+0x2e0>)
 800d464:	6513      	str	r3, [r2, #80]	; 0x50
	DriveSTD_oilTemp.minValue = CAR_Data.oilTemp.minValue;
 800d466:	4b0e      	ldr	r3, [pc, #56]	; (800d4a0 <defaultDataInitialization+0x2d8>)
 800d468:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4a0e      	ldr	r2, [pc, #56]	; (800d4a8 <defaultDataInitialization+0x2e0>)
 800d470:	6553      	str	r3, [r2, #84]	; 0x54
 800d472:	e01f      	b.n	800d4b4 <defaultDataInitialization+0x2ec>
 800d474:	f3af 8000 	nop.w
 800d478:	66666666 	.word	0x66666666
 800d47c:	3fe66666 	.word	0x3fe66666
 800d480:	20005e58 	.word	0x20005e58
 800d484:	08022614 	.word	0x08022614
 800d488:	0802261c 	.word	0x0802261c
 800d48c:	20000034 	.word	0x20000034
 800d490:	20006a98 	.word	0x20006a98
 800d494:	20005ee8 	.word	0x20005ee8
 800d498:	08022620 	.word	0x08022620
 800d49c:	200008f4 	.word	0x200008f4
 800d4a0:	2000041c 	.word	0x2000041c
 800d4a4:	20000904 	.word	0x20000904
 800d4a8:	20005f78 	.word	0x20005f78
 800d4ac:	08022628 	.word	0x08022628
 800d4b0:	20000940 	.word	0x20000940
	DriveSTD_oilTemp.millisValueOver = millis;
 800d4b4:	4bb0      	ldr	r3, [pc, #704]	; (800d778 <defaultDataInitialization+0x5b0>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	4ab0      	ldr	r2, [pc, #704]	; (800d77c <defaultDataInitialization+0x5b4>)
 800d4ba:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_oilTemp.minTimeValueOver = DEFAULT_MIN_TIME_VALUE_OVER;
 800d4bc:	4baf      	ldr	r3, [pc, #700]	; (800d77c <defaultDataInitialization+0x5b4>)
 800d4be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d4c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_oilTemp.dataRefreshDelay = 500;
 800d4c6:	4bad      	ldr	r3, [pc, #692]	; (800d77c <defaultDataInitialization+0x5b4>)
 800d4c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d4cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_oilTemp.dataRefreshMillis = 0;
 800d4d0:	4baa      	ldr	r3, [pc, #680]	; (800d77c <defaultDataInitialization+0x5b4>)
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_oilTemp.receivedDataControlEnable = ENABLE;
 800d4d6:	4ba9      	ldr	r3, [pc, #676]	; (800d77c <defaultDataInitialization+0x5b4>)
 800d4d8:	2201      	movs	r2, #1
 800d4da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	DriveSTD_oilTemp.lastTimeData = &CAR_Data.oilTemp.lastTimeData;
 800d4de:	4ba7      	ldr	r3, [pc, #668]	; (800d77c <defaultDataInitialization+0x5b4>)
 800d4e0:	4aa7      	ldr	r2, [pc, #668]	; (800d780 <defaultDataInitialization+0x5b8>)
 800d4e2:	66da      	str	r2, [r3, #108]	; 0x6c
	DriveSTD_oilTemp.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800d4e4:	4ba5      	ldr	r3, [pc, #660]	; (800d77c <defaultDataInitialization+0x5b4>)
 800d4e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d4ea:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_oilTemp.blinkingMillis = 0;
 800d4ee:	4ba3      	ldr	r3, [pc, #652]	; (800d77c <defaultDataInitialization+0x5b4>)
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_oilTemp.blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800d4f4:	4ba1      	ldr	r3, [pc, #644]	; (800d77c <defaultDataInitialization+0x5b4>)
 800d4f6:	22fa      	movs	r2, #250	; 0xfa
 800d4f8:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_oilTemp.blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800d4fc:	4b9f      	ldr	r3, [pc, #636]	; (800d77c <defaultDataInitialization+0x5b4>)
 800d4fe:	22fa      	movs	r2, #250	; 0xfa
 800d500:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_oilTemp.blinkingStatus = 0;
 800d504:	4b9d      	ldr	r3, [pc, #628]	; (800d77c <defaultDataInitialization+0x5b4>)
 800d506:	2200      	movs	r2, #0
 800d508:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_oilTemp.blinkingState = 0;
 800d50c:	4b9b      	ldr	r3, [pc, #620]	; (800d77c <defaultDataInitialization+0x5b4>)
 800d50e:	2200      	movs	r2, #0
 800d510:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_oilTemp.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800d514:	4b99      	ldr	r3, [pc, #612]	; (800d77c <defaultDataInitialization+0x5b4>)
 800d516:	2204      	movs	r2, #4
 800d518:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_oilTemp.blinkingFrameEnable = ENABLE;
 800d51c:	4b97      	ldr	r3, [pc, #604]	; (800d77c <defaultDataInitialization+0x5b4>)
 800d51e:	2201      	movs	r2, #1
 800d520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_oilTemp.blinkingBackEnable = ENABLE;
 800d524:	4b95      	ldr	r3, [pc, #596]	; (800d77c <defaultDataInitialization+0x5b4>)
 800d526:	2201      	movs	r2, #1
 800d528:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_oilTemp.blinkingOverColor = GUI_RED;
 800d52c:	4b93      	ldr	r3, [pc, #588]	; (800d77c <defaultDataInitialization+0x5b4>)
 800d52e:	22ff      	movs	r2, #255	; 0xff
 800d530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_oilTemp.blinkingUnderColor = GUI_BLUE;
 800d534:	4b91      	ldr	r3, [pc, #580]	; (800d77c <defaultDataInitialization+0x5b4>)
 800d536:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800d53a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_oilTemp.lastExeTime = 0;
 800d53e:	4b8f      	ldr	r3, [pc, #572]	; (800d77c <defaultDataInitialization+0x5b4>)
 800d540:	2200      	movs	r2, #0
 800d542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c




	DriveSTD_fuelTemp.enable = ENABLE;
 800d546:	4b8f      	ldr	r3, [pc, #572]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d548:	2201      	movs	r2, #1
 800d54a:	701a      	strb	r2, [r3, #0]

	DriveSTD_fuelTemp.string = "Fuel T";
 800d54c:	4b8d      	ldr	r3, [pc, #564]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d54e:	4a8e      	ldr	r2, [pc, #568]	; (800d788 <defaultDataInitialization+0x5c0>)
 800d550:	605a      	str	r2, [r3, #4]
	DriveSTD_fuelTemp.intStr = "";
 800d552:	4b8c      	ldr	r3, [pc, #560]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d554:	4a8d      	ldr	r2, [pc, #564]	; (800d78c <defaultDataInitialization+0x5c4>)
 800d556:	609a      	str	r2, [r3, #8]
	DriveSTD_fuelTemp.endStr = "";
 800d558:	4b8a      	ldr	r3, [pc, #552]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d55a:	4a8c      	ldr	r2, [pc, #560]	; (800d78c <defaultDataInitialization+0x5c4>)
 800d55c:	60da      	str	r2, [r3, #12]

	DriveSTD_fuelTemp.dataPointer = &CAR_Data.fuelTemp.floatData;
 800d55e:	4b89      	ldr	r3, [pc, #548]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d560:	4a8b      	ldr	r2, [pc, #556]	; (800d790 <defaultDataInitialization+0x5c8>)
 800d562:	611a      	str	r2, [r3, #16]
	DriveSTD_fuelTemp.dataLogInt.number = 123;
 800d564:	4b87      	ldr	r3, [pc, #540]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d566:	227b      	movs	r2, #123	; 0x7b
 800d568:	615a      	str	r2, [r3, #20]
	DriveSTD_fuelTemp.dataLogFloat.number = 0.7;
 800d56a:	4986      	ldr	r1, [pc, #536]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d56c:	a380      	add	r3, pc, #512	; (adr r3, 800d770 <defaultDataInitialization+0x5a8>)
 800d56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d572:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_fuelTemp.decimalDigits = 1;
 800d576:	4b83      	ldr	r3, [pc, #524]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d578:	2201      	movs	r2, #1
 800d57a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_fuelTemp.textColor = PAGE_TEXT_COLOR;
 800d57e:	4b81      	ldr	r3, [pc, #516]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d580:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d584:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_fuelTemp.dataColor = PAGE_DATA_COLOR;
 800d586:	4b7f      	ldr	r3, [pc, #508]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d588:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d58c:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_fuelTemp.backColor = PAGE_BACK_COLOR;
 800d58e:	4b7d      	ldr	r3, [pc, #500]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d590:	2200      	movs	r2, #0
 800d592:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_fuelTemp.frameColor = PAGE_BACK_COLOR;
 800d594:	4b7b      	ldr	r3, [pc, #492]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d596:	2200      	movs	r2, #0
 800d598:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_fuelTemp.dataType = DataLog_DataType_Float;
 800d59a:	4b7a      	ldr	r3, [pc, #488]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d59c:	2201      	movs	r2, #1
 800d59e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_fuelTemp.signEnable = SIGN_NEGATIVE;
 800d5a2:	4b78      	ldr	r3, [pc, #480]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d5a4:	2203      	movs	r2, #3
 800d5a6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_fuelTemp.valueControlEnable = ENABLE;
 800d5aa:	4b76      	ldr	r3, [pc, #472]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_fuelTemp.maxValue = CAR_Data.fuelTemp.maxValue;
 800d5b2:	4b78      	ldr	r3, [pc, #480]	; (800d794 <defaultDataInitialization+0x5cc>)
 800d5b4:	f203 5394 	addw	r3, r3, #1428	; 0x594
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4a72      	ldr	r2, [pc, #456]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d5bc:	6513      	str	r3, [r2, #80]	; 0x50
	DriveSTD_fuelTemp.minValue = CAR_Data.fuelTemp.minValue;
 800d5be:	4b75      	ldr	r3, [pc, #468]	; (800d794 <defaultDataInitialization+0x5cc>)
 800d5c0:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4a6f      	ldr	r2, [pc, #444]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d5c8:	6553      	str	r3, [r2, #84]	; 0x54
	DriveSTD_fuelTemp.millisValueOver = millis;
 800d5ca:	4b6b      	ldr	r3, [pc, #428]	; (800d778 <defaultDataInitialization+0x5b0>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	4a6d      	ldr	r2, [pc, #436]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d5d0:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_fuelTemp.minTimeValueOver = DEFAULT_MIN_TIME_VALUE_OVER;
 800d5d2:	4b6c      	ldr	r3, [pc, #432]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d5d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d5d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_fuelTemp.dataRefreshDelay = 500;
 800d5dc:	4b69      	ldr	r3, [pc, #420]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d5de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d5e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_fuelTemp.dataRefreshMillis = 0;
 800d5e6:	4b67      	ldr	r3, [pc, #412]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_fuelTemp.receivedDataControlEnable = ENABLE;
 800d5ec:	4b65      	ldr	r3, [pc, #404]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	DriveSTD_fuelTemp.lastTimeData = &CAR_Data.fuelTemp.lastTimeData;
 800d5f4:	4b63      	ldr	r3, [pc, #396]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d5f6:	4a68      	ldr	r2, [pc, #416]	; (800d798 <defaultDataInitialization+0x5d0>)
 800d5f8:	66da      	str	r2, [r3, #108]	; 0x6c
	DriveSTD_fuelTemp.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800d5fa:	4b62      	ldr	r3, [pc, #392]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d5fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d600:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_fuelTemp.blinkingMillis = 0;
 800d604:	4b5f      	ldr	r3, [pc, #380]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d606:	2200      	movs	r2, #0
 800d608:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_fuelTemp.blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800d60a:	4b5e      	ldr	r3, [pc, #376]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d60c:	22fa      	movs	r2, #250	; 0xfa
 800d60e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_fuelTemp.blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800d612:	4b5c      	ldr	r3, [pc, #368]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d614:	22fa      	movs	r2, #250	; 0xfa
 800d616:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_fuelTemp.blinkingStatus = 0;
 800d61a:	4b5a      	ldr	r3, [pc, #360]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d61c:	2200      	movs	r2, #0
 800d61e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_fuelTemp.blinkingState = 0;
 800d622:	4b58      	ldr	r3, [pc, #352]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d624:	2200      	movs	r2, #0
 800d626:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_fuelTemp.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800d62a:	4b56      	ldr	r3, [pc, #344]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d62c:	2204      	movs	r2, #4
 800d62e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_fuelTemp.blinkingFrameEnable = ENABLE;
 800d632:	4b54      	ldr	r3, [pc, #336]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d634:	2201      	movs	r2, #1
 800d636:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_fuelTemp.blinkingBackEnable = ENABLE;
 800d63a:	4b52      	ldr	r3, [pc, #328]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d63c:	2201      	movs	r2, #1
 800d63e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_fuelTemp.blinkingOverColor = GUI_RED;
 800d642:	4b50      	ldr	r3, [pc, #320]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d644:	22ff      	movs	r2, #255	; 0xff
 800d646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_fuelTemp.blinkingUnderColor = GUI_BLUE;
 800d64a:	4b4e      	ldr	r3, [pc, #312]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d64c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800d650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_fuelTemp.lastExeTime = 0;
 800d654:	4b4b      	ldr	r3, [pc, #300]	; (800d784 <defaultDataInitialization+0x5bc>)
 800d656:	2200      	movs	r2, #0
 800d658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c




	DriveSTD_airTemp.enable = ENABLE;
 800d65c:	4b4f      	ldr	r3, [pc, #316]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d65e:	2201      	movs	r2, #1
 800d660:	701a      	strb	r2, [r3, #0]

	DriveSTD_airTemp.string = "Air T";
 800d662:	4b4e      	ldr	r3, [pc, #312]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d664:	4a4e      	ldr	r2, [pc, #312]	; (800d7a0 <defaultDataInitialization+0x5d8>)
 800d666:	605a      	str	r2, [r3, #4]
	DriveSTD_airTemp.intStr = "";
 800d668:	4b4c      	ldr	r3, [pc, #304]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d66a:	4a48      	ldr	r2, [pc, #288]	; (800d78c <defaultDataInitialization+0x5c4>)
 800d66c:	609a      	str	r2, [r3, #8]
	DriveSTD_airTemp.endStr = "";
 800d66e:	4b4b      	ldr	r3, [pc, #300]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d670:	4a46      	ldr	r2, [pc, #280]	; (800d78c <defaultDataInitialization+0x5c4>)
 800d672:	60da      	str	r2, [r3, #12]

	DriveSTD_airTemp.dataPointer = &CAR_Data.airTemp.floatData;
 800d674:	4b49      	ldr	r3, [pc, #292]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d676:	4a4b      	ldr	r2, [pc, #300]	; (800d7a4 <defaultDataInitialization+0x5dc>)
 800d678:	611a      	str	r2, [r3, #16]
	DriveSTD_airTemp.dataLogInt.number = 123;
 800d67a:	4b48      	ldr	r3, [pc, #288]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d67c:	227b      	movs	r2, #123	; 0x7b
 800d67e:	615a      	str	r2, [r3, #20]
	DriveSTD_airTemp.dataLogFloat.number = 0.7;
 800d680:	4946      	ldr	r1, [pc, #280]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d682:	a33b      	add	r3, pc, #236	; (adr r3, 800d770 <defaultDataInitialization+0x5a8>)
 800d684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d688:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_airTemp.decimalDigits = 1;
 800d68c:	4b43      	ldr	r3, [pc, #268]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d68e:	2201      	movs	r2, #1
 800d690:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_airTemp.textColor = PAGE_TEXT_COLOR;
 800d694:	4b41      	ldr	r3, [pc, #260]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d696:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d69a:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_airTemp.dataColor = PAGE_DATA_COLOR;
 800d69c:	4b3f      	ldr	r3, [pc, #252]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d69e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d6a2:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_airTemp.backColor = PAGE_BACK_COLOR;
 800d6a4:	4b3d      	ldr	r3, [pc, #244]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_airTemp.frameColor = PAGE_BACK_COLOR;
 800d6aa:	4b3c      	ldr	r3, [pc, #240]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_airTemp.dataType = DataLog_DataType_Float;
 800d6b0:	4b3a      	ldr	r3, [pc, #232]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_airTemp.signEnable = SIGN_NEGATIVE;
 800d6b8:	4b38      	ldr	r3, [pc, #224]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d6ba:	2203      	movs	r2, #3
 800d6bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_airTemp.valueControlEnable = ENABLE;
 800d6c0:	4b36      	ldr	r3, [pc, #216]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_airTemp.maxValue = tAir_MAX_VALUE;
 800d6c8:	4b34      	ldr	r3, [pc, #208]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d6ca:	4a37      	ldr	r2, [pc, #220]	; (800d7a8 <defaultDataInitialization+0x5e0>)
 800d6cc:	651a      	str	r2, [r3, #80]	; 0x50
	DriveSTD_airTemp.minValue = tAir_MIN_VALUE;
 800d6ce:	4b33      	ldr	r3, [pc, #204]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d6d0:	4a36      	ldr	r2, [pc, #216]	; (800d7ac <defaultDataInitialization+0x5e4>)
 800d6d2:	655a      	str	r2, [r3, #84]	; 0x54
	DriveSTD_airTemp.millisValueOver = millis;
 800d6d4:	4b28      	ldr	r3, [pc, #160]	; (800d778 <defaultDataInitialization+0x5b0>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a30      	ldr	r2, [pc, #192]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d6da:	6593      	str	r3, [r2, #88]	; 0x58
	//DriveSTD_airTemp.minTimeValueOver = DEFAULT_MIN_TIME_VALUE_OVER;
	DriveSTD_airTemp.minTimeValueOver = 100;
 800d6dc:	4b2f      	ldr	r3, [pc, #188]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d6de:	2264      	movs	r2, #100	; 0x64
 800d6e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_airTemp.dataRefreshDelay = 500;
 800d6e4:	4b2d      	ldr	r3, [pc, #180]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d6e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d6ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_airTemp.dataRefreshMillis = 0;
 800d6ee:	4b2b      	ldr	r3, [pc, #172]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_airTemp.receivedDataControlEnable = ENABLE;
 800d6f4:	4b29      	ldr	r3, [pc, #164]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	DriveSTD_airTemp.lastTimeData = &CAR_Data.airTemp.lastTimeData;
 800d6fc:	4b27      	ldr	r3, [pc, #156]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d6fe:	4a2c      	ldr	r2, [pc, #176]	; (800d7b0 <defaultDataInitialization+0x5e8>)
 800d700:	66da      	str	r2, [r3, #108]	; 0x6c
	DriveSTD_airTemp.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800d702:	4b26      	ldr	r3, [pc, #152]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d708:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_airTemp.blinkingMillis = 0;
 800d70c:	4b23      	ldr	r3, [pc, #140]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d70e:	2200      	movs	r2, #0
 800d710:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_airTemp.blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800d712:	4b22      	ldr	r3, [pc, #136]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d714:	22fa      	movs	r2, #250	; 0xfa
 800d716:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_airTemp.blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800d71a:	4b20      	ldr	r3, [pc, #128]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d71c:	22fa      	movs	r2, #250	; 0xfa
 800d71e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_airTemp.blinkingStatus = 0;
 800d722:	4b1e      	ldr	r3, [pc, #120]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d724:	2200      	movs	r2, #0
 800d726:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_airTemp.blinkingState = 0;
 800d72a:	4b1c      	ldr	r3, [pc, #112]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d72c:	2200      	movs	r2, #0
 800d72e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_airTemp.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800d732:	4b1a      	ldr	r3, [pc, #104]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d734:	2204      	movs	r2, #4
 800d736:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_airTemp.blinkingFrameEnable = ENABLE;
 800d73a:	4b18      	ldr	r3, [pc, #96]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d73c:	2201      	movs	r2, #1
 800d73e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_airTemp.blinkingBackEnable = ENABLE;
 800d742:	4b16      	ldr	r3, [pc, #88]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d744:	2201      	movs	r2, #1
 800d746:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_airTemp.blinkingOverColor = GUI_RED;
 800d74a:	4b14      	ldr	r3, [pc, #80]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d74c:	22ff      	movs	r2, #255	; 0xff
 800d74e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_airTemp.blinkingUnderColor = GUI_BLUE;
 800d752:	4b12      	ldr	r3, [pc, #72]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d754:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800d758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_airTemp.lastExeTime = 0;
 800d75c:	4b0f      	ldr	r3, [pc, #60]	; (800d79c <defaultDataInitialization+0x5d4>)
 800d75e:	2200      	movs	r2, #0
 800d760:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c




	DriveSTD_fuelPressure.enable = ENABLE;
 800d764:	4b13      	ldr	r3, [pc, #76]	; (800d7b4 <defaultDataInitialization+0x5ec>)
 800d766:	2201      	movs	r2, #1
 800d768:	701a      	strb	r2, [r3, #0]
 800d76a:	e025      	b.n	800d7b8 <defaultDataInitialization+0x5f0>
 800d76c:	f3af 8000 	nop.w
 800d770:	66666666 	.word	0x66666666
 800d774:	3fe66666 	.word	0x3fe66666
 800d778:	20006a98 	.word	0x20006a98
 800d77c:	20005f78 	.word	0x20005f78
 800d780:	20000950 	.word	0x20000950
 800d784:	20006008 	.word	0x20006008
 800d788:	08022630 	.word	0x08022630
 800d78c:	0802261c 	.word	0x0802261c
 800d790:	2000098c 	.word	0x2000098c
 800d794:	2000041c 	.word	0x2000041c
 800d798:	2000099c 	.word	0x2000099c
 800d79c:	20006098 	.word	0x20006098
 800d7a0:	08022638 	.word	0x08022638
 800d7a4:	20000480 	.word	0x20000480
 800d7a8:	42700000 	.word	0x42700000
 800d7ac:	40a00000 	.word	0x40a00000
 800d7b0:	20000490 	.word	0x20000490
 800d7b4:	20006128 	.word	0x20006128

	DriveSTD_fuelPressure.string = "Fuel P";
 800d7b8:	4ba9      	ldr	r3, [pc, #676]	; (800da60 <defaultDataInitialization+0x898>)
 800d7ba:	4aaa      	ldr	r2, [pc, #680]	; (800da64 <defaultDataInitialization+0x89c>)
 800d7bc:	605a      	str	r2, [r3, #4]
	DriveSTD_fuelPressure.intStr = " ";
 800d7be:	4ba8      	ldr	r3, [pc, #672]	; (800da60 <defaultDataInitialization+0x898>)
 800d7c0:	4aa9      	ldr	r2, [pc, #676]	; (800da68 <defaultDataInitialization+0x8a0>)
 800d7c2:	609a      	str	r2, [r3, #8]
	DriveSTD_fuelPressure.endStr = "";
 800d7c4:	4ba6      	ldr	r3, [pc, #664]	; (800da60 <defaultDataInitialization+0x898>)
 800d7c6:	4aa9      	ldr	r2, [pc, #676]	; (800da6c <defaultDataInitialization+0x8a4>)
 800d7c8:	60da      	str	r2, [r3, #12]

	DriveSTD_fuelPressure.dataPointer = &CAR_Data.fuelPressure.floatData;
 800d7ca:	4ba5      	ldr	r3, [pc, #660]	; (800da60 <defaultDataInitialization+0x898>)
 800d7cc:	4aa8      	ldr	r2, [pc, #672]	; (800da70 <defaultDataInitialization+0x8a8>)
 800d7ce:	611a      	str	r2, [r3, #16]
	DriveSTD_fuelPressure.dataLogInt.number = 123;
 800d7d0:	4ba3      	ldr	r3, [pc, #652]	; (800da60 <defaultDataInitialization+0x898>)
 800d7d2:	227b      	movs	r2, #123	; 0x7b
 800d7d4:	615a      	str	r2, [r3, #20]
	DriveSTD_fuelPressure.dataLogFloat.number = 0.7;
 800d7d6:	49a2      	ldr	r1, [pc, #648]	; (800da60 <defaultDataInitialization+0x898>)
 800d7d8:	a39f      	add	r3, pc, #636	; (adr r3, 800da58 <defaultDataInitialization+0x890>)
 800d7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7de:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_fuelPressure.decimalDigits = 1;
 800d7e2:	4b9f      	ldr	r3, [pc, #636]	; (800da60 <defaultDataInitialization+0x898>)
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_fuelPressure.textColor = PAGE_TEXT_COLOR;
 800d7ea:	4b9d      	ldr	r3, [pc, #628]	; (800da60 <defaultDataInitialization+0x898>)
 800d7ec:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d7f0:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_fuelPressure.dataColor = PAGE_DATA_COLOR;
 800d7f2:	4b9b      	ldr	r3, [pc, #620]	; (800da60 <defaultDataInitialization+0x898>)
 800d7f4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d7f8:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_fuelPressure.backColor = PAGE_BACK_COLOR;
 800d7fa:	4b99      	ldr	r3, [pc, #612]	; (800da60 <defaultDataInitialization+0x898>)
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_fuelPressure.frameColor = PAGE_BACK_COLOR;
 800d800:	4b97      	ldr	r3, [pc, #604]	; (800da60 <defaultDataInitialization+0x898>)
 800d802:	2200      	movs	r2, #0
 800d804:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_fuelPressure.dataType = DataLog_DataType_Float;
 800d806:	4b96      	ldr	r3, [pc, #600]	; (800da60 <defaultDataInitialization+0x898>)
 800d808:	2201      	movs	r2, #1
 800d80a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_fuelPressure.signEnable = SIGN_NEGATIVE;
 800d80e:	4b94      	ldr	r3, [pc, #592]	; (800da60 <defaultDataInitialization+0x898>)
 800d810:	2203      	movs	r2, #3
 800d812:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_fuelPressure.valueControlEnable = ENABLE;
 800d816:	4b92      	ldr	r3, [pc, #584]	; (800da60 <defaultDataInitialization+0x898>)
 800d818:	2201      	movs	r2, #1
 800d81a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_fuelPressure.maxValue = pFuel_MAX_VALUE;
 800d81e:	4b90      	ldr	r3, [pc, #576]	; (800da60 <defaultDataInitialization+0x898>)
 800d820:	4a94      	ldr	r2, [pc, #592]	; (800da74 <defaultDataInitialization+0x8ac>)
 800d822:	651a      	str	r2, [r3, #80]	; 0x50
	DriveSTD_fuelPressure.minValue = pFuel_MIN_VALUE;
 800d824:	4b8e      	ldr	r3, [pc, #568]	; (800da60 <defaultDataInitialization+0x898>)
 800d826:	4a94      	ldr	r2, [pc, #592]	; (800da78 <defaultDataInitialization+0x8b0>)
 800d828:	655a      	str	r2, [r3, #84]	; 0x54
	DriveSTD_fuelPressure.millisValueOver = millis;
 800d82a:	4b94      	ldr	r3, [pc, #592]	; (800da7c <defaultDataInitialization+0x8b4>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4a8c      	ldr	r2, [pc, #560]	; (800da60 <defaultDataInitialization+0x898>)
 800d830:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_fuelPressure.minTimeValueOver = DEFAULT_MIN_TIME_VALUE_OVER;
 800d832:	4b8b      	ldr	r3, [pc, #556]	; (800da60 <defaultDataInitialization+0x898>)
 800d834:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d838:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_fuelPressure.dataRefreshDelay = 100;
 800d83c:	4b88      	ldr	r3, [pc, #544]	; (800da60 <defaultDataInitialization+0x898>)
 800d83e:	2264      	movs	r2, #100	; 0x64
 800d840:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_fuelPressure.dataRefreshMillis = 0;
 800d844:	4b86      	ldr	r3, [pc, #536]	; (800da60 <defaultDataInitialization+0x898>)
 800d846:	2200      	movs	r2, #0
 800d848:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_fuelPressure.receivedDataControlEnable = ENABLE;
 800d84a:	4b85      	ldr	r3, [pc, #532]	; (800da60 <defaultDataInitialization+0x898>)
 800d84c:	2201      	movs	r2, #1
 800d84e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	DriveSTD_fuelPressure.lastTimeData = &CAR_Data.fuelPressure.lastTimeData;
 800d852:	4b83      	ldr	r3, [pc, #524]	; (800da60 <defaultDataInitialization+0x898>)
 800d854:	4a8a      	ldr	r2, [pc, #552]	; (800da80 <defaultDataInitialization+0x8b8>)
 800d856:	66da      	str	r2, [r3, #108]	; 0x6c
	DriveSTD_fuelPressure.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800d858:	4b81      	ldr	r3, [pc, #516]	; (800da60 <defaultDataInitialization+0x898>)
 800d85a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d85e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_fuelPressure.blinkingMillis = 0;
 800d862:	4b7f      	ldr	r3, [pc, #508]	; (800da60 <defaultDataInitialization+0x898>)
 800d864:	2200      	movs	r2, #0
 800d866:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_fuelPressure.blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800d868:	4b7d      	ldr	r3, [pc, #500]	; (800da60 <defaultDataInitialization+0x898>)
 800d86a:	22fa      	movs	r2, #250	; 0xfa
 800d86c:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_fuelPressure.blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800d870:	4b7b      	ldr	r3, [pc, #492]	; (800da60 <defaultDataInitialization+0x898>)
 800d872:	22fa      	movs	r2, #250	; 0xfa
 800d874:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_fuelPressure.blinkingStatus = 0;
 800d878:	4b79      	ldr	r3, [pc, #484]	; (800da60 <defaultDataInitialization+0x898>)
 800d87a:	2200      	movs	r2, #0
 800d87c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_fuelPressure.blinkingState = 0;
 800d880:	4b77      	ldr	r3, [pc, #476]	; (800da60 <defaultDataInitialization+0x898>)
 800d882:	2200      	movs	r2, #0
 800d884:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_fuelPressure.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800d888:	4b75      	ldr	r3, [pc, #468]	; (800da60 <defaultDataInitialization+0x898>)
 800d88a:	2204      	movs	r2, #4
 800d88c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_fuelPressure.blinkingFrameEnable = ENABLE;
 800d890:	4b73      	ldr	r3, [pc, #460]	; (800da60 <defaultDataInitialization+0x898>)
 800d892:	2201      	movs	r2, #1
 800d894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_fuelPressure.blinkingBackEnable = ENABLE;
 800d898:	4b71      	ldr	r3, [pc, #452]	; (800da60 <defaultDataInitialization+0x898>)
 800d89a:	2201      	movs	r2, #1
 800d89c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_fuelPressure.blinkingOverColor = GUI_RED;
 800d8a0:	4b6f      	ldr	r3, [pc, #444]	; (800da60 <defaultDataInitialization+0x898>)
 800d8a2:	22ff      	movs	r2, #255	; 0xff
 800d8a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_fuelPressure.blinkingUnderColor = GUI_RED;
 800d8a8:	4b6d      	ldr	r3, [pc, #436]	; (800da60 <defaultDataInitialization+0x898>)
 800d8aa:	22ff      	movs	r2, #255	; 0xff
 800d8ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_fuelPressure.lastExeTime = 0;
 800d8b0:	4b6b      	ldr	r3, [pc, #428]	; (800da60 <defaultDataInitialization+0x898>)
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c


	DriveSTD_oilPressure.enable = ENABLE;
 800d8b8:	4b72      	ldr	r3, [pc, #456]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	701a      	strb	r2, [r3, #0]

	DriveSTD_oilPressure.string = "Oil P";
 800d8be:	4b71      	ldr	r3, [pc, #452]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d8c0:	4a71      	ldr	r2, [pc, #452]	; (800da88 <defaultDataInitialization+0x8c0>)
 800d8c2:	605a      	str	r2, [r3, #4]
	DriveSTD_oilPressure.intStr = "";
 800d8c4:	4b6f      	ldr	r3, [pc, #444]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d8c6:	4a69      	ldr	r2, [pc, #420]	; (800da6c <defaultDataInitialization+0x8a4>)
 800d8c8:	609a      	str	r2, [r3, #8]
	DriveSTD_oilPressure.endStr = "";
 800d8ca:	4b6e      	ldr	r3, [pc, #440]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d8cc:	4a67      	ldr	r2, [pc, #412]	; (800da6c <defaultDataInitialization+0x8a4>)
 800d8ce:	60da      	str	r2, [r3, #12]

	//DriveSTD_oilPressure.dataPointer = &pOil;
	DriveSTD_oilPressure.dataPointer = &CAR_Data.oilPressure.floatData;
 800d8d0:	4b6c      	ldr	r3, [pc, #432]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d8d2:	4a6e      	ldr	r2, [pc, #440]	; (800da8c <defaultDataInitialization+0x8c4>)
 800d8d4:	611a      	str	r2, [r3, #16]
	DriveSTD_oilPressure.dataLogInt.number = 123;
 800d8d6:	4b6b      	ldr	r3, [pc, #428]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d8d8:	227b      	movs	r2, #123	; 0x7b
 800d8da:	615a      	str	r2, [r3, #20]
	DriveSTD_oilPressure.dataLogFloat.number = 0.7;
 800d8dc:	4969      	ldr	r1, [pc, #420]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d8de:	a35e      	add	r3, pc, #376	; (adr r3, 800da58 <defaultDataInitialization+0x890>)
 800d8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_oilPressure.decimalDigits = 1;
 800d8e8:	4b66      	ldr	r3, [pc, #408]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_oilPressure.textColor = PAGE_TEXT_COLOR;
 800d8f0:	4b64      	ldr	r3, [pc, #400]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d8f2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d8f6:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_oilPressure.dataColor = PAGE_DATA_COLOR;
 800d8f8:	4b62      	ldr	r3, [pc, #392]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d8fa:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d8fe:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_oilPressure.backColor = PAGE_BACK_COLOR;
 800d900:	4b60      	ldr	r3, [pc, #384]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d902:	2200      	movs	r2, #0
 800d904:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_oilPressure.frameColor = PAGE_BACK_COLOR;
 800d906:	4b5f      	ldr	r3, [pc, #380]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d908:	2200      	movs	r2, #0
 800d90a:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_oilPressure.dataType = DataLog_DataType_Float;
 800d90c:	4b5d      	ldr	r3, [pc, #372]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d90e:	2201      	movs	r2, #1
 800d910:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_oilPressure.signEnable = SIGN_NEGATIVE;
 800d914:	4b5b      	ldr	r3, [pc, #364]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d916:	2203      	movs	r2, #3
 800d918:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_oilPressure.valueControlEnable = ENABLE;
 800d91c:	4b59      	ldr	r3, [pc, #356]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d91e:	2201      	movs	r2, #1
 800d920:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_oilPressure.maxValue = pOil_MAX_VALUE;
 800d924:	4b57      	ldr	r3, [pc, #348]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d926:	4a53      	ldr	r2, [pc, #332]	; (800da74 <defaultDataInitialization+0x8ac>)
 800d928:	651a      	str	r2, [r3, #80]	; 0x50
	DriveSTD_oilPressure.minValue = pOil_MIN_VALUE;
 800d92a:	4b56      	ldr	r3, [pc, #344]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d92c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d930:	655a      	str	r2, [r3, #84]	; 0x54
	DriveSTD_oilPressure.millisValueOver = millis;
 800d932:	4b52      	ldr	r3, [pc, #328]	; (800da7c <defaultDataInitialization+0x8b4>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	4a53      	ldr	r2, [pc, #332]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d938:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_oilPressure.minTimeValueOver = DEFAULT_MIN_TIME_VALUE_OVER;
 800d93a:	4b52      	ldr	r3, [pc, #328]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d93c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d940:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_oilPressure.dataRefreshDelay = 100;
 800d944:	4b4f      	ldr	r3, [pc, #316]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d946:	2264      	movs	r2, #100	; 0x64
 800d948:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_oilPressure.dataRefreshMillis = 0;
 800d94c:	4b4d      	ldr	r3, [pc, #308]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d94e:	2200      	movs	r2, #0
 800d950:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_oilPressure.receivedDataControlEnable = ENABLE;
 800d952:	4b4c      	ldr	r3, [pc, #304]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d954:	2201      	movs	r2, #1
 800d956:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	DriveSTD_oilPressure.lastTimeData = &CAR_Data.oilPressure.lastTimeData;
 800d95a:	4b4a      	ldr	r3, [pc, #296]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d95c:	4a4c      	ldr	r2, [pc, #304]	; (800da90 <defaultDataInitialization+0x8c8>)
 800d95e:	66da      	str	r2, [r3, #108]	; 0x6c
	DriveSTD_oilPressure.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800d960:	4b48      	ldr	r3, [pc, #288]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d962:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d966:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_oilPressure.blinkingMillis = 0;
 800d96a:	4b46      	ldr	r3, [pc, #280]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d96c:	2200      	movs	r2, #0
 800d96e:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_oilPressure.blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800d970:	4b44      	ldr	r3, [pc, #272]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d972:	22fa      	movs	r2, #250	; 0xfa
 800d974:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_oilPressure.blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800d978:	4b42      	ldr	r3, [pc, #264]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d97a:	22fa      	movs	r2, #250	; 0xfa
 800d97c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_oilPressure.blinkingStatus = 0;
 800d980:	4b40      	ldr	r3, [pc, #256]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d982:	2200      	movs	r2, #0
 800d984:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_oilPressure.blinkingState = 0;
 800d988:	4b3e      	ldr	r3, [pc, #248]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d98a:	2200      	movs	r2, #0
 800d98c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_oilPressure.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800d990:	4b3c      	ldr	r3, [pc, #240]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d992:	2204      	movs	r2, #4
 800d994:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_oilPressure.blinkingFrameEnable = ENABLE;
 800d998:	4b3a      	ldr	r3, [pc, #232]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d99a:	2201      	movs	r2, #1
 800d99c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_oilPressure.blinkingBackEnable = ENABLE;
 800d9a0:	4b38      	ldr	r3, [pc, #224]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_oilPressure.blinkingOverColor = GUI_RED;
 800d9a8:	4b36      	ldr	r3, [pc, #216]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d9aa:	22ff      	movs	r2, #255	; 0xff
 800d9ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_oilPressure.blinkingUnderColor = GUI_RED;
 800d9b0:	4b34      	ldr	r3, [pc, #208]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d9b2:	22ff      	movs	r2, #255	; 0xff
 800d9b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_oilPressure.lastExeTime = 0;
 800d9b8:	4b32      	ldr	r3, [pc, #200]	; (800da84 <defaultDataInitialization+0x8bc>)
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c




	DriveSTD_batteryVoltage.enable = ENABLE;
 800d9c0:	4b34      	ldr	r3, [pc, #208]	; (800da94 <defaultDataInitialization+0x8cc>)
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	701a      	strb	r2, [r3, #0]

	DriveSTD_batteryVoltage.string = "Bat V";
 800d9c6:	4b33      	ldr	r3, [pc, #204]	; (800da94 <defaultDataInitialization+0x8cc>)
 800d9c8:	4a33      	ldr	r2, [pc, #204]	; (800da98 <defaultDataInitialization+0x8d0>)
 800d9ca:	605a      	str	r2, [r3, #4]
	DriveSTD_batteryVoltage.intStr = "";
 800d9cc:	4b31      	ldr	r3, [pc, #196]	; (800da94 <defaultDataInitialization+0x8cc>)
 800d9ce:	4a27      	ldr	r2, [pc, #156]	; (800da6c <defaultDataInitialization+0x8a4>)
 800d9d0:	609a      	str	r2, [r3, #8]
	DriveSTD_batteryVoltage.endStr = "";
 800d9d2:	4b30      	ldr	r3, [pc, #192]	; (800da94 <defaultDataInitialization+0x8cc>)
 800d9d4:	4a25      	ldr	r2, [pc, #148]	; (800da6c <defaultDataInitialization+0x8a4>)
 800d9d6:	60da      	str	r2, [r3, #12]

	DriveSTD_batteryVoltage.dataPointer = &CAR_Data.batteryVoltage.floatData;
 800d9d8:	4b2e      	ldr	r3, [pc, #184]	; (800da94 <defaultDataInitialization+0x8cc>)
 800d9da:	4a30      	ldr	r2, [pc, #192]	; (800da9c <defaultDataInitialization+0x8d4>)
 800d9dc:	611a      	str	r2, [r3, #16]
	DriveSTD_batteryVoltage.dataLogInt.number = 123;
 800d9de:	4b2d      	ldr	r3, [pc, #180]	; (800da94 <defaultDataInitialization+0x8cc>)
 800d9e0:	227b      	movs	r2, #123	; 0x7b
 800d9e2:	615a      	str	r2, [r3, #20]
	DriveSTD_batteryVoltage.dataLogFloat.number = 0.7;
 800d9e4:	492b      	ldr	r1, [pc, #172]	; (800da94 <defaultDataInitialization+0x8cc>)
 800d9e6:	a31c      	add	r3, pc, #112	; (adr r3, 800da58 <defaultDataInitialization+0x890>)
 800d9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ec:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_batteryVoltage.decimalDigits = 1;
 800d9f0:	4b28      	ldr	r3, [pc, #160]	; (800da94 <defaultDataInitialization+0x8cc>)
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_batteryVoltage.textColor = PAGE_TEXT_COLOR;
 800d9f8:	4b26      	ldr	r3, [pc, #152]	; (800da94 <defaultDataInitialization+0x8cc>)
 800d9fa:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d9fe:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_batteryVoltage.dataColor = PAGE_DATA_COLOR;
 800da00:	4b24      	ldr	r3, [pc, #144]	; (800da94 <defaultDataInitialization+0x8cc>)
 800da02:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800da06:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_batteryVoltage.backColor = PAGE_BACK_COLOR;
 800da08:	4b22      	ldr	r3, [pc, #136]	; (800da94 <defaultDataInitialization+0x8cc>)
 800da0a:	2200      	movs	r2, #0
 800da0c:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_batteryVoltage.frameColor = PAGE_BACK_COLOR;
 800da0e:	4b21      	ldr	r3, [pc, #132]	; (800da94 <defaultDataInitialization+0x8cc>)
 800da10:	2200      	movs	r2, #0
 800da12:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_batteryVoltage.dataType = DataLog_DataType_Float;
 800da14:	4b1f      	ldr	r3, [pc, #124]	; (800da94 <defaultDataInitialization+0x8cc>)
 800da16:	2201      	movs	r2, #1
 800da18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_batteryVoltage.signEnable = SIGN_NEGATIVE;
 800da1c:	4b1d      	ldr	r3, [pc, #116]	; (800da94 <defaultDataInitialization+0x8cc>)
 800da1e:	2203      	movs	r2, #3
 800da20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_batteryVoltage.valueControlEnable = ENABLE;
 800da24:	4b1b      	ldr	r3, [pc, #108]	; (800da94 <defaultDataInitialization+0x8cc>)
 800da26:	2201      	movs	r2, #1
 800da28:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_batteryVoltage.maxValue = vBat_MAX_VALUE;
 800da2c:	4b19      	ldr	r3, [pc, #100]	; (800da94 <defaultDataInitialization+0x8cc>)
 800da2e:	4a1c      	ldr	r2, [pc, #112]	; (800daa0 <defaultDataInitialization+0x8d8>)
 800da30:	651a      	str	r2, [r3, #80]	; 0x50
	DriveSTD_batteryVoltage.minValue = vBat_MIN_VALUE;
 800da32:	4b18      	ldr	r3, [pc, #96]	; (800da94 <defaultDataInitialization+0x8cc>)
 800da34:	4a1b      	ldr	r2, [pc, #108]	; (800daa4 <defaultDataInitialization+0x8dc>)
 800da36:	655a      	str	r2, [r3, #84]	; 0x54
	DriveSTD_batteryVoltage.millisValueOver = millis;
 800da38:	4b10      	ldr	r3, [pc, #64]	; (800da7c <defaultDataInitialization+0x8b4>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a15      	ldr	r2, [pc, #84]	; (800da94 <defaultDataInitialization+0x8cc>)
 800da3e:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_batteryVoltage.minTimeValueOver = DEFAULT_MIN_TIME_VALUE_OVER;
 800da40:	4b14      	ldr	r3, [pc, #80]	; (800da94 <defaultDataInitialization+0x8cc>)
 800da42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800da46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_batteryVoltage.dataRefreshDelay = 100;
 800da4a:	4b12      	ldr	r3, [pc, #72]	; (800da94 <defaultDataInitialization+0x8cc>)
 800da4c:	2264      	movs	r2, #100	; 0x64
 800da4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_batteryVoltage.dataRefreshMillis = 0;
 800da52:	4b10      	ldr	r3, [pc, #64]	; (800da94 <defaultDataInitialization+0x8cc>)
 800da54:	2200      	movs	r2, #0
 800da56:	e027      	b.n	800daa8 <defaultDataInitialization+0x8e0>
 800da58:	66666666 	.word	0x66666666
 800da5c:	3fe66666 	.word	0x3fe66666
 800da60:	20006128 	.word	0x20006128
 800da64:	08022640 	.word	0x08022640
 800da68:	08022648 	.word	0x08022648
 800da6c:	0802261c 	.word	0x0802261c
 800da70:	2000085c 	.word	0x2000085c
 800da74:	40a00000 	.word	0x40a00000
 800da78:	40600000 	.word	0x40600000
 800da7c:	20006a98 	.word	0x20006a98
 800da80:	2000086c 	.word	0x2000086c
 800da84:	200061b8 	.word	0x200061b8
 800da88:	0802264c 	.word	0x0802264c
 800da8c:	20000810 	.word	0x20000810
 800da90:	20000820 	.word	0x20000820
 800da94:	20006248 	.word	0x20006248
 800da98:	08022654 	.word	0x08022654
 800da9c:	20000a24 	.word	0x20000a24
 800daa0:	41600000 	.word	0x41600000
 800daa4:	4139999a 	.word	0x4139999a
 800daa8:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_batteryVoltage.receivedDataControlEnable = ENABLE;
 800daaa:	4baf      	ldr	r3, [pc, #700]	; (800dd68 <defaultDataInitialization+0xba0>)
 800daac:	2201      	movs	r2, #1
 800daae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	DriveSTD_batteryVoltage.lastTimeData = &CAR_Data.batteryVoltage.lastTimeData;
 800dab2:	4bad      	ldr	r3, [pc, #692]	; (800dd68 <defaultDataInitialization+0xba0>)
 800dab4:	4aad      	ldr	r2, [pc, #692]	; (800dd6c <defaultDataInitialization+0xba4>)
 800dab6:	66da      	str	r2, [r3, #108]	; 0x6c
	DriveSTD_batteryVoltage.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800dab8:	4bab      	ldr	r3, [pc, #684]	; (800dd68 <defaultDataInitialization+0xba0>)
 800daba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dabe:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_batteryVoltage.blinkingMillis = 0;
 800dac2:	4ba9      	ldr	r3, [pc, #676]	; (800dd68 <defaultDataInitialization+0xba0>)
 800dac4:	2200      	movs	r2, #0
 800dac6:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_batteryVoltage.blinkingDelayOver = NO_BLINK_DELAY;
 800dac8:	4ba7      	ldr	r3, [pc, #668]	; (800dd68 <defaultDataInitialization+0xba0>)
 800daca:	f242 7210 	movw	r2, #10000	; 0x2710
 800dace:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_batteryVoltage.blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800dad2:	4ba5      	ldr	r3, [pc, #660]	; (800dd68 <defaultDataInitialization+0xba0>)
 800dad4:	22fa      	movs	r2, #250	; 0xfa
 800dad6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_batteryVoltage.blinkingStatus = 0;
 800dada:	4ba3      	ldr	r3, [pc, #652]	; (800dd68 <defaultDataInitialization+0xba0>)
 800dadc:	2200      	movs	r2, #0
 800dade:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_batteryVoltage.blinkingState = 0;
 800dae2:	4ba1      	ldr	r3, [pc, #644]	; (800dd68 <defaultDataInitialization+0xba0>)
 800dae4:	2200      	movs	r2, #0
 800dae6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_batteryVoltage.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800daea:	4b9f      	ldr	r3, [pc, #636]	; (800dd68 <defaultDataInitialization+0xba0>)
 800daec:	2204      	movs	r2, #4
 800daee:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_batteryVoltage.blinkingFrameEnable = ENABLE;
 800daf2:	4b9d      	ldr	r3, [pc, #628]	; (800dd68 <defaultDataInitialization+0xba0>)
 800daf4:	2201      	movs	r2, #1
 800daf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_batteryVoltage.blinkingBackEnable = ENABLE;
 800dafa:	4b9b      	ldr	r3, [pc, #620]	; (800dd68 <defaultDataInitialization+0xba0>)
 800dafc:	2201      	movs	r2, #1
 800dafe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_batteryVoltage.blinkingOverColor = GUI_GREEN;
 800db02:	4b99      	ldr	r3, [pc, #612]	; (800dd68 <defaultDataInitialization+0xba0>)
 800db04:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800db08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_batteryVoltage.blinkingUnderColor = GUI_RED;
 800db0c:	4b96      	ldr	r3, [pc, #600]	; (800dd68 <defaultDataInitialization+0xba0>)
 800db0e:	22ff      	movs	r2, #255	; 0xff
 800db10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_batteryVoltage.lastExeTime = 0;
 800db14:	4b94      	ldr	r3, [pc, #592]	; (800dd68 <defaultDataInitialization+0xba0>)
 800db16:	2200      	movs	r2, #0
 800db18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c




	DriveSTD_tps.enable = ENABLE;
 800db1c:	4b94      	ldr	r3, [pc, #592]	; (800dd70 <defaultDataInitialization+0xba8>)
 800db1e:	2201      	movs	r2, #1
 800db20:	701a      	strb	r2, [r3, #0]

	DriveSTD_tps.string = "TPS";
 800db22:	4b93      	ldr	r3, [pc, #588]	; (800dd70 <defaultDataInitialization+0xba8>)
 800db24:	4a93      	ldr	r2, [pc, #588]	; (800dd74 <defaultDataInitialization+0xbac>)
 800db26:	605a      	str	r2, [r3, #4]
	DriveSTD_tps.intStr = "";
 800db28:	4b91      	ldr	r3, [pc, #580]	; (800dd70 <defaultDataInitialization+0xba8>)
 800db2a:	4a93      	ldr	r2, [pc, #588]	; (800dd78 <defaultDataInitialization+0xbb0>)
 800db2c:	609a      	str	r2, [r3, #8]
	DriveSTD_tps.endStr = "";
 800db2e:	4b90      	ldr	r3, [pc, #576]	; (800dd70 <defaultDataInitialization+0xba8>)
 800db30:	4a91      	ldr	r2, [pc, #580]	; (800dd78 <defaultDataInitialization+0xbb0>)
 800db32:	60da      	str	r2, [r3, #12]

	DriveSTD_tps.dataPointer = &CAR_Data.tps.intData;
 800db34:	4b8e      	ldr	r3, [pc, #568]	; (800dd70 <defaultDataInitialization+0xba8>)
 800db36:	4a91      	ldr	r2, [pc, #580]	; (800dd7c <defaultDataInitialization+0xbb4>)
 800db38:	611a      	str	r2, [r3, #16]
	DriveSTD_tps.dataLogInt.number = 123;
 800db3a:	4b8d      	ldr	r3, [pc, #564]	; (800dd70 <defaultDataInitialization+0xba8>)
 800db3c:	227b      	movs	r2, #123	; 0x7b
 800db3e:	615a      	str	r2, [r3, #20]
	DriveSTD_tps.dataLogFloat.number = 0.7;
 800db40:	498b      	ldr	r1, [pc, #556]	; (800dd70 <defaultDataInitialization+0xba8>)
 800db42:	a387      	add	r3, pc, #540	; (adr r3, 800dd60 <defaultDataInitialization+0xb98>)
 800db44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db48:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_tps.decimalDigits = 1;
 800db4c:	4b88      	ldr	r3, [pc, #544]	; (800dd70 <defaultDataInitialization+0xba8>)
 800db4e:	2201      	movs	r2, #1
 800db50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_tps.textColor = PAGE_TEXT_COLOR;
 800db54:	4b86      	ldr	r3, [pc, #536]	; (800dd70 <defaultDataInitialization+0xba8>)
 800db56:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800db5a:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_tps.dataColor = PAGE_DATA_COLOR;
 800db5c:	4b84      	ldr	r3, [pc, #528]	; (800dd70 <defaultDataInitialization+0xba8>)
 800db5e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800db62:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_tps.backColor = PAGE_BACK_COLOR;
 800db64:	4b82      	ldr	r3, [pc, #520]	; (800dd70 <defaultDataInitialization+0xba8>)
 800db66:	2200      	movs	r2, #0
 800db68:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_tps.frameColor = PAGE_BACK_COLOR;
 800db6a:	4b81      	ldr	r3, [pc, #516]	; (800dd70 <defaultDataInitialization+0xba8>)
 800db6c:	2200      	movs	r2, #0
 800db6e:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_tps.dataType = DataLog_DataType_Int;
 800db70:	4b7f      	ldr	r3, [pc, #508]	; (800dd70 <defaultDataInitialization+0xba8>)
 800db72:	2200      	movs	r2, #0
 800db74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_tps.signEnable = DISABLE;
 800db78:	4b7d      	ldr	r3, [pc, #500]	; (800dd70 <defaultDataInitialization+0xba8>)
 800db7a:	2200      	movs	r2, #0
 800db7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_tps.valueControlEnable = DISABLE;
 800db80:	4b7b      	ldr	r3, [pc, #492]	; (800dd70 <defaultDataInitialization+0xba8>)
 800db82:	2200      	movs	r2, #0
 800db84:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_tps.maxValue = 100;
 800db88:	4b79      	ldr	r3, [pc, #484]	; (800dd70 <defaultDataInitialization+0xba8>)
 800db8a:	4a7d      	ldr	r2, [pc, #500]	; (800dd80 <defaultDataInitialization+0xbb8>)
 800db8c:	651a      	str	r2, [r3, #80]	; 0x50
	DriveSTD_tps.minValue = 8;
 800db8e:	4b78      	ldr	r3, [pc, #480]	; (800dd70 <defaultDataInitialization+0xba8>)
 800db90:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800db94:	655a      	str	r2, [r3, #84]	; 0x54
	DriveSTD_tps.millisValueOver = millis;
 800db96:	4b7b      	ldr	r3, [pc, #492]	; (800dd84 <defaultDataInitialization+0xbbc>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4a75      	ldr	r2, [pc, #468]	; (800dd70 <defaultDataInitialization+0xba8>)
 800db9c:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_tps.minTimeValueOver = 100;
 800db9e:	4b74      	ldr	r3, [pc, #464]	; (800dd70 <defaultDataInitialization+0xba8>)
 800dba0:	2264      	movs	r2, #100	; 0x64
 800dba2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_tps.dataRefreshDelay = 0;
 800dba6:	4b72      	ldr	r3, [pc, #456]	; (800dd70 <defaultDataInitialization+0xba8>)
 800dba8:	2200      	movs	r2, #0
 800dbaa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_tps.dataRefreshMillis = 0;
 800dbae:	4b70      	ldr	r3, [pc, #448]	; (800dd70 <defaultDataInitialization+0xba8>)
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_tps.receivedDataControlEnable = ENABLE;
 800dbb4:	4b6e      	ldr	r3, [pc, #440]	; (800dd70 <defaultDataInitialization+0xba8>)
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	DriveSTD_tps.lastTimeData = &CAR_Data.tps.lastTimeData;
 800dbbc:	4b6c      	ldr	r3, [pc, #432]	; (800dd70 <defaultDataInitialization+0xba8>)
 800dbbe:	4a72      	ldr	r2, [pc, #456]	; (800dd88 <defaultDataInitialization+0xbc0>)
 800dbc0:	66da      	str	r2, [r3, #108]	; 0x6c
	DriveSTD_tps.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800dbc2:	4b6b      	ldr	r3, [pc, #428]	; (800dd70 <defaultDataInitialization+0xba8>)
 800dbc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dbc8:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_tps.blinkingMillis = 0;
 800dbcc:	4b68      	ldr	r3, [pc, #416]	; (800dd70 <defaultDataInitialization+0xba8>)
 800dbce:	2200      	movs	r2, #0
 800dbd0:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_tps.blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800dbd2:	4b67      	ldr	r3, [pc, #412]	; (800dd70 <defaultDataInitialization+0xba8>)
 800dbd4:	22fa      	movs	r2, #250	; 0xfa
 800dbd6:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_tps.blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800dbda:	4b65      	ldr	r3, [pc, #404]	; (800dd70 <defaultDataInitialization+0xba8>)
 800dbdc:	22fa      	movs	r2, #250	; 0xfa
 800dbde:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_tps.blinkingStatus = 0;
 800dbe2:	4b63      	ldr	r3, [pc, #396]	; (800dd70 <defaultDataInitialization+0xba8>)
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_tps.blinkingState = 0;
 800dbea:	4b61      	ldr	r3, [pc, #388]	; (800dd70 <defaultDataInitialization+0xba8>)
 800dbec:	2200      	movs	r2, #0
 800dbee:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_tps.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800dbf2:	4b5f      	ldr	r3, [pc, #380]	; (800dd70 <defaultDataInitialization+0xba8>)
 800dbf4:	2204      	movs	r2, #4
 800dbf6:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_tps.blinkingFrameEnable = ENABLE;
 800dbfa:	4b5d      	ldr	r3, [pc, #372]	; (800dd70 <defaultDataInitialization+0xba8>)
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_tps.blinkingBackEnable = ENABLE;
 800dc02:	4b5b      	ldr	r3, [pc, #364]	; (800dd70 <defaultDataInitialization+0xba8>)
 800dc04:	2201      	movs	r2, #1
 800dc06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_tps.blinkingOverColor = GUI_RED;
 800dc0a:	4b59      	ldr	r3, [pc, #356]	; (800dd70 <defaultDataInitialization+0xba8>)
 800dc0c:	22ff      	movs	r2, #255	; 0xff
 800dc0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_tps.blinkingUnderColor = GUI_RED;
 800dc12:	4b57      	ldr	r3, [pc, #348]	; (800dd70 <defaultDataInitialization+0xba8>)
 800dc14:	22ff      	movs	r2, #255	; 0xff
 800dc16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_tps.lastExeTime = 0;
 800dc1a:	4b55      	ldr	r3, [pc, #340]	; (800dd70 <defaultDataInitialization+0xba8>)
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c




	DriveSTD_speed.enable = ENABLE;
 800dc22:	4b5a      	ldr	r3, [pc, #360]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dc24:	2201      	movs	r2, #1
 800dc26:	701a      	strb	r2, [r3, #0]

	DriveSTD_speed.string = "Speed";
 800dc28:	4b58      	ldr	r3, [pc, #352]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dc2a:	4a59      	ldr	r2, [pc, #356]	; (800dd90 <defaultDataInitialization+0xbc8>)
 800dc2c:	605a      	str	r2, [r3, #4]
	DriveSTD_speed.intStr = "";
 800dc2e:	4b57      	ldr	r3, [pc, #348]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dc30:	4a51      	ldr	r2, [pc, #324]	; (800dd78 <defaultDataInitialization+0xbb0>)
 800dc32:	609a      	str	r2, [r3, #8]
	DriveSTD_speed.endStr = "";
 800dc34:	4b55      	ldr	r3, [pc, #340]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dc36:	4a50      	ldr	r2, [pc, #320]	; (800dd78 <defaultDataInitialization+0xbb0>)
 800dc38:	60da      	str	r2, [r3, #12]

	DriveSTD_speed.dataPointer = &CAR_Data.speed.floatData;
 800dc3a:	4b54      	ldr	r3, [pc, #336]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dc3c:	4a55      	ldr	r2, [pc, #340]	; (800dd94 <defaultDataInitialization+0xbcc>)
 800dc3e:	611a      	str	r2, [r3, #16]
	DriveSTD_speed.dataLogInt.number = 123;
 800dc40:	4b52      	ldr	r3, [pc, #328]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dc42:	227b      	movs	r2, #123	; 0x7b
 800dc44:	615a      	str	r2, [r3, #20]
	DriveSTD_speed.dataLogFloat.number = 0.7;
 800dc46:	4951      	ldr	r1, [pc, #324]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dc48:	a345      	add	r3, pc, #276	; (adr r3, 800dd60 <defaultDataInitialization+0xb98>)
 800dc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_speed.decimalDigits = 0;
 800dc52:	4b4e      	ldr	r3, [pc, #312]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dc54:	2200      	movs	r2, #0
 800dc56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_speed.textColor = PAGE_TEXT_COLOR;
 800dc5a:	4b4c      	ldr	r3, [pc, #304]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dc5c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800dc60:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_speed.dataColor = PAGE_DATA_COLOR;
 800dc62:	4b4a      	ldr	r3, [pc, #296]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dc64:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800dc68:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_speed.backColor = PAGE_BACK_COLOR;
 800dc6a:	4b48      	ldr	r3, [pc, #288]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_speed.frameColor = PAGE_BACK_COLOR;
 800dc70:	4b46      	ldr	r3, [pc, #280]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dc72:	2200      	movs	r2, #0
 800dc74:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_speed.dataType = DataLog_DataType_Float;
 800dc76:	4b45      	ldr	r3, [pc, #276]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dc78:	2201      	movs	r2, #1
 800dc7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_speed.signEnable = SIGN_NEGATIVE;
 800dc7e:	4b43      	ldr	r3, [pc, #268]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dc80:	2203      	movs	r2, #3
 800dc82:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_speed.valueControlEnable = DISABLE;
 800dc86:	4b41      	ldr	r3, [pc, #260]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dc88:	2200      	movs	r2, #0
 800dc8a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_speed.maxValue = 0;
 800dc8e:	4b3f      	ldr	r3, [pc, #252]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dc90:	f04f 0200 	mov.w	r2, #0
 800dc94:	651a      	str	r2, [r3, #80]	; 0x50
	DriveSTD_speed.minValue = 0;
 800dc96:	4b3d      	ldr	r3, [pc, #244]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dc98:	f04f 0200 	mov.w	r2, #0
 800dc9c:	655a      	str	r2, [r3, #84]	; 0x54
	DriveSTD_speed.millisValueOver = millis;
 800dc9e:	4b39      	ldr	r3, [pc, #228]	; (800dd84 <defaultDataInitialization+0xbbc>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4a3a      	ldr	r2, [pc, #232]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dca4:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_speed.minTimeValueOver = DEFAULT_MIN_TIME_VALUE_OVER;
 800dca6:	4b39      	ldr	r3, [pc, #228]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dca8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dcac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_speed.dataRefreshDelay = 0;
 800dcb0:	4b36      	ldr	r3, [pc, #216]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_speed.dataRefreshMillis = 0;
 800dcb8:	4b34      	ldr	r3, [pc, #208]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dcba:	2200      	movs	r2, #0
 800dcbc:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_speed.receivedDataControlEnable = ENABLE;
 800dcbe:	4b33      	ldr	r3, [pc, #204]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	DriveSTD_speed.lastTimeData = &CAR_Data.speed.lastTimeData;
 800dcc6:	4b31      	ldr	r3, [pc, #196]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dcc8:	4a33      	ldr	r2, [pc, #204]	; (800dd98 <defaultDataInitialization+0xbd0>)
 800dcca:	66da      	str	r2, [r3, #108]	; 0x6c
	DriveSTD_speed.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800dccc:	4b2f      	ldr	r3, [pc, #188]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dcce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dcd2:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_speed.blinkingMillis = 0;
 800dcd6:	4b2d      	ldr	r3, [pc, #180]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dcd8:	2200      	movs	r2, #0
 800dcda:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_speed.blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800dcdc:	4b2b      	ldr	r3, [pc, #172]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dcde:	22fa      	movs	r2, #250	; 0xfa
 800dce0:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_speed.blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800dce4:	4b29      	ldr	r3, [pc, #164]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dce6:	22fa      	movs	r2, #250	; 0xfa
 800dce8:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_speed.blinkingStatus = 0;
 800dcec:	4b27      	ldr	r3, [pc, #156]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_speed.blinkingState = 0;
 800dcf4:	4b25      	ldr	r3, [pc, #148]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_speed.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800dcfc:	4b23      	ldr	r3, [pc, #140]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dcfe:	2204      	movs	r2, #4
 800dd00:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_speed.blinkingFrameEnable = DISABLE;
 800dd04:	4b21      	ldr	r3, [pc, #132]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dd06:	2200      	movs	r2, #0
 800dd08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_speed.blinkingBackEnable = DISABLE;
 800dd0c:	4b1f      	ldr	r3, [pc, #124]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dd0e:	2200      	movs	r2, #0
 800dd10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_speed.blinkingOverColor = GUI_RED;
 800dd14:	4b1d      	ldr	r3, [pc, #116]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dd16:	22ff      	movs	r2, #255	; 0xff
 800dd18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_speed.blinkingUnderColor = GUI_RED;
 800dd1c:	4b1b      	ldr	r3, [pc, #108]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dd1e:	22ff      	movs	r2, #255	; 0xff
 800dd20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_speed.lastExeTime = 0;
 800dd24:	4b19      	ldr	r3, [pc, #100]	; (800dd8c <defaultDataInitialization+0xbc4>)
 800dd26:	2200      	movs	r2, #0
 800dd28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c




	DriveSTD_traction.enable = ENABLE;
 800dd2c:	4b1b      	ldr	r3, [pc, #108]	; (800dd9c <defaultDataInitialization+0xbd4>)
 800dd2e:	2201      	movs	r2, #1
 800dd30:	701a      	strb	r2, [r3, #0]

	DriveSTD_traction.string = "Traction";
 800dd32:	4b1a      	ldr	r3, [pc, #104]	; (800dd9c <defaultDataInitialization+0xbd4>)
 800dd34:	4a1a      	ldr	r2, [pc, #104]	; (800dda0 <defaultDataInitialization+0xbd8>)
 800dd36:	605a      	str	r2, [r3, #4]
	DriveSTD_traction.intStr = "";
 800dd38:	4b18      	ldr	r3, [pc, #96]	; (800dd9c <defaultDataInitialization+0xbd4>)
 800dd3a:	4a0f      	ldr	r2, [pc, #60]	; (800dd78 <defaultDataInitialization+0xbb0>)
 800dd3c:	609a      	str	r2, [r3, #8]
	DriveSTD_traction.endStr = "";
 800dd3e:	4b17      	ldr	r3, [pc, #92]	; (800dd9c <defaultDataInitialization+0xbd4>)
 800dd40:	4a0d      	ldr	r2, [pc, #52]	; (800dd78 <defaultDataInitialization+0xbb0>)
 800dd42:	60da      	str	r2, [r3, #12]

	DriveSTD_traction.dataPointer = &CAR_Data.tractionControl.intData;
 800dd44:	4b15      	ldr	r3, [pc, #84]	; (800dd9c <defaultDataInitialization+0xbd4>)
 800dd46:	4a17      	ldr	r2, [pc, #92]	; (800dda4 <defaultDataInitialization+0xbdc>)
 800dd48:	611a      	str	r2, [r3, #16]
	DriveSTD_traction.dataLogInt.number = 123;
 800dd4a:	4b14      	ldr	r3, [pc, #80]	; (800dd9c <defaultDataInitialization+0xbd4>)
 800dd4c:	227b      	movs	r2, #123	; 0x7b
 800dd4e:	615a      	str	r2, [r3, #20]
	DriveSTD_traction.dataLogFloat.number = 0.7;
 800dd50:	4912      	ldr	r1, [pc, #72]	; (800dd9c <defaultDataInitialization+0xbd4>)
 800dd52:	a303      	add	r3, pc, #12	; (adr r3, 800dd60 <defaultDataInitialization+0xb98>)
 800dd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd58:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800dd5c:	e024      	b.n	800dda8 <defaultDataInitialization+0xbe0>
 800dd5e:	bf00      	nop
 800dd60:	66666666 	.word	0x66666666
 800dd64:	3fe66666 	.word	0x3fe66666
 800dd68:	20006248 	.word	0x20006248
 800dd6c:	20000a34 	.word	0x20000a34
 800dd70:	200062d8 	.word	0x200062d8
 800dd74:	0802265c 	.word	0x0802265c
 800dd78:	0802261c 	.word	0x0802261c
 800dd7c:	200008ac 	.word	0x200008ac
 800dd80:	42c80000 	.word	0x42c80000
 800dd84:	20006a98 	.word	0x20006a98
 800dd88:	200008b8 	.word	0x200008b8
 800dd8c:	20006368 	.word	0x20006368
 800dd90:	08022660 	.word	0x08022660
 800dd94:	20000434 	.word	0x20000434
 800dd98:	20000444 	.word	0x20000444
 800dd9c:	200063f8 	.word	0x200063f8
 800dda0:	08022668 	.word	0x08022668
 800dda4:	20000730 	.word	0x20000730
	DriveSTD_traction.decimalDigits = 1;
 800dda8:	4bb1      	ldr	r3, [pc, #708]	; (800e070 <defaultDataInitialization+0xea8>)
 800ddaa:	2201      	movs	r2, #1
 800ddac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_traction.textColor = PAGE_TEXT_COLOR;
 800ddb0:	4baf      	ldr	r3, [pc, #700]	; (800e070 <defaultDataInitialization+0xea8>)
 800ddb2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800ddb6:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_traction.dataColor = PAGE_DATA_COLOR;
 800ddb8:	4bad      	ldr	r3, [pc, #692]	; (800e070 <defaultDataInitialization+0xea8>)
 800ddba:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800ddbe:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_traction.backColor = PAGE_BACK_COLOR;
 800ddc0:	4bab      	ldr	r3, [pc, #684]	; (800e070 <defaultDataInitialization+0xea8>)
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_traction.frameColor = PAGE_BACK_COLOR;
 800ddc6:	4baa      	ldr	r3, [pc, #680]	; (800e070 <defaultDataInitialization+0xea8>)
 800ddc8:	2200      	movs	r2, #0
 800ddca:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_traction.dataType = DataLog_DataType_Int;
 800ddcc:	4ba8      	ldr	r3, [pc, #672]	; (800e070 <defaultDataInitialization+0xea8>)
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_traction.signEnable = DISABLE;
 800ddd4:	4ba6      	ldr	r3, [pc, #664]	; (800e070 <defaultDataInitialization+0xea8>)
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_traction.valueControlEnable = DISABLE;
 800dddc:	4ba4      	ldr	r3, [pc, #656]	; (800e070 <defaultDataInitialization+0xea8>)
 800ddde:	2200      	movs	r2, #0
 800dde0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_traction.maxValue = 0;
 800dde4:	4ba2      	ldr	r3, [pc, #648]	; (800e070 <defaultDataInitialization+0xea8>)
 800dde6:	f04f 0200 	mov.w	r2, #0
 800ddea:	651a      	str	r2, [r3, #80]	; 0x50
	DriveSTD_traction.minValue = 0;
 800ddec:	4ba0      	ldr	r3, [pc, #640]	; (800e070 <defaultDataInitialization+0xea8>)
 800ddee:	f04f 0200 	mov.w	r2, #0
 800ddf2:	655a      	str	r2, [r3, #84]	; 0x54
	DriveSTD_traction.millisValueOver = millis;
 800ddf4:	4b9f      	ldr	r3, [pc, #636]	; (800e074 <defaultDataInitialization+0xeac>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a9d      	ldr	r2, [pc, #628]	; (800e070 <defaultDataInitialization+0xea8>)
 800ddfa:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_traction.minTimeValueOver = DEFAULT_MIN_TIME_VALUE_OVER;
 800ddfc:	4b9c      	ldr	r3, [pc, #624]	; (800e070 <defaultDataInitialization+0xea8>)
 800ddfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800de02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_traction.dataRefreshDelay = 0;
 800de06:	4b9a      	ldr	r3, [pc, #616]	; (800e070 <defaultDataInitialization+0xea8>)
 800de08:	2200      	movs	r2, #0
 800de0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_traction.dataRefreshMillis = 0;
 800de0e:	4b98      	ldr	r3, [pc, #608]	; (800e070 <defaultDataInitialization+0xea8>)
 800de10:	2200      	movs	r2, #0
 800de12:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_traction.receivedDataControlEnable = DISABLE;
 800de14:	4b96      	ldr	r3, [pc, #600]	; (800e070 <defaultDataInitialization+0xea8>)
 800de16:	2200      	movs	r2, #0
 800de18:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	//DriveSTD_traction.lastTimeData = &;
	DriveSTD_traction.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800de1c:	4b94      	ldr	r3, [pc, #592]	; (800e070 <defaultDataInitialization+0xea8>)
 800de1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800de22:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_traction.blinkingMillis = 0;
 800de26:	4b92      	ldr	r3, [pc, #584]	; (800e070 <defaultDataInitialization+0xea8>)
 800de28:	2200      	movs	r2, #0
 800de2a:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_traction.blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800de2c:	4b90      	ldr	r3, [pc, #576]	; (800e070 <defaultDataInitialization+0xea8>)
 800de2e:	22fa      	movs	r2, #250	; 0xfa
 800de30:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_traction.blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800de34:	4b8e      	ldr	r3, [pc, #568]	; (800e070 <defaultDataInitialization+0xea8>)
 800de36:	22fa      	movs	r2, #250	; 0xfa
 800de38:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_traction.blinkingStatus = 0;
 800de3c:	4b8c      	ldr	r3, [pc, #560]	; (800e070 <defaultDataInitialization+0xea8>)
 800de3e:	2200      	movs	r2, #0
 800de40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_traction.blinkingState = 0;
 800de44:	4b8a      	ldr	r3, [pc, #552]	; (800e070 <defaultDataInitialization+0xea8>)
 800de46:	2200      	movs	r2, #0
 800de48:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_traction.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800de4c:	4b88      	ldr	r3, [pc, #544]	; (800e070 <defaultDataInitialization+0xea8>)
 800de4e:	2204      	movs	r2, #4
 800de50:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_traction.blinkingFrameEnable = DISABLE;
 800de54:	4b86      	ldr	r3, [pc, #536]	; (800e070 <defaultDataInitialization+0xea8>)
 800de56:	2200      	movs	r2, #0
 800de58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_traction.blinkingBackEnable = DISABLE;
 800de5c:	4b84      	ldr	r3, [pc, #528]	; (800e070 <defaultDataInitialization+0xea8>)
 800de5e:	2200      	movs	r2, #0
 800de60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_traction.blinkingOverColor = GUI_RED;
 800de64:	4b82      	ldr	r3, [pc, #520]	; (800e070 <defaultDataInitialization+0xea8>)
 800de66:	22ff      	movs	r2, #255	; 0xff
 800de68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_traction.blinkingUnderColor = GUI_RED;
 800de6c:	4b80      	ldr	r3, [pc, #512]	; (800e070 <defaultDataInitialization+0xea8>)
 800de6e:	22ff      	movs	r2, #255	; 0xff
 800de70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_traction.lastExeTime = 0;
 800de74:	4b7e      	ldr	r3, [pc, #504]	; (800e070 <defaultDataInitialization+0xea8>)
 800de76:	2200      	movs	r2, #0
 800de78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c




	DriveSTD_map.enable = ENABLE;
 800de7c:	4b7e      	ldr	r3, [pc, #504]	; (800e078 <defaultDataInitialization+0xeb0>)
 800de7e:	2201      	movs	r2, #1
 800de80:	701a      	strb	r2, [r3, #0]

	DriveSTD_map.string = "MAP";
 800de82:	4b7d      	ldr	r3, [pc, #500]	; (800e078 <defaultDataInitialization+0xeb0>)
 800de84:	4a7d      	ldr	r2, [pc, #500]	; (800e07c <defaultDataInitialization+0xeb4>)
 800de86:	605a      	str	r2, [r3, #4]
	DriveSTD_map.intStr = "";
 800de88:	4b7b      	ldr	r3, [pc, #492]	; (800e078 <defaultDataInitialization+0xeb0>)
 800de8a:	4a7d      	ldr	r2, [pc, #500]	; (800e080 <defaultDataInitialization+0xeb8>)
 800de8c:	609a      	str	r2, [r3, #8]
	DriveSTD_map.endStr = "";
 800de8e:	4b7a      	ldr	r3, [pc, #488]	; (800e078 <defaultDataInitialization+0xeb0>)
 800de90:	4a7b      	ldr	r2, [pc, #492]	; (800e080 <defaultDataInitialization+0xeb8>)
 800de92:	60da      	str	r2, [r3, #12]

	//DriveSTD_map.dataPointer = &map_pp;
	DriveSTD_map.dataPointer = &CAR_Data.map.intData;
 800de94:	4b78      	ldr	r3, [pc, #480]	; (800e078 <defaultDataInitialization+0xeb0>)
 800de96:	4a7b      	ldr	r2, [pc, #492]	; (800e084 <defaultDataInitialization+0xebc>)
 800de98:	611a      	str	r2, [r3, #16]
	DriveSTD_map.dataLogInt.number = 123;
 800de9a:	4b77      	ldr	r3, [pc, #476]	; (800e078 <defaultDataInitialization+0xeb0>)
 800de9c:	227b      	movs	r2, #123	; 0x7b
 800de9e:	615a      	str	r2, [r3, #20]
	DriveSTD_map.dataLogFloat.number = 0.7;
 800dea0:	4975      	ldr	r1, [pc, #468]	; (800e078 <defaultDataInitialization+0xeb0>)
 800dea2:	a371      	add	r3, pc, #452	; (adr r3, 800e068 <defaultDataInitialization+0xea0>)
 800dea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea8:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_map.decimalDigits = 1;
 800deac:	4b72      	ldr	r3, [pc, #456]	; (800e078 <defaultDataInitialization+0xeb0>)
 800deae:	2201      	movs	r2, #1
 800deb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_map.textColor = PAGE_TEXT_COLOR;
 800deb4:	4b70      	ldr	r3, [pc, #448]	; (800e078 <defaultDataInitialization+0xeb0>)
 800deb6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800deba:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_map.dataColor = PAGE_DATA_COLOR;
 800debc:	4b6e      	ldr	r3, [pc, #440]	; (800e078 <defaultDataInitialization+0xeb0>)
 800debe:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800dec2:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_map.backColor = PAGE_BACK_COLOR;
 800dec4:	4b6c      	ldr	r3, [pc, #432]	; (800e078 <defaultDataInitialization+0xeb0>)
 800dec6:	2200      	movs	r2, #0
 800dec8:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_map.frameColor = PAGE_BACK_COLOR;
 800deca:	4b6b      	ldr	r3, [pc, #428]	; (800e078 <defaultDataInitialization+0xeb0>)
 800decc:	2200      	movs	r2, #0
 800dece:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_map.dataType = DataLog_DataType_Int;
 800ded0:	4b69      	ldr	r3, [pc, #420]	; (800e078 <defaultDataInitialization+0xeb0>)
 800ded2:	2200      	movs	r2, #0
 800ded4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_map.signEnable = DISABLE;
 800ded8:	4b67      	ldr	r3, [pc, #412]	; (800e078 <defaultDataInitialization+0xeb0>)
 800deda:	2200      	movs	r2, #0
 800dedc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_map.valueControlEnable = DISABLE;
 800dee0:	4b65      	ldr	r3, [pc, #404]	; (800e078 <defaultDataInitialization+0xeb0>)
 800dee2:	2200      	movs	r2, #0
 800dee4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_map.maxValue = 0;
 800dee8:	4b63      	ldr	r3, [pc, #396]	; (800e078 <defaultDataInitialization+0xeb0>)
 800deea:	f04f 0200 	mov.w	r2, #0
 800deee:	651a      	str	r2, [r3, #80]	; 0x50
	DriveSTD_map.minValue = 0;
 800def0:	4b61      	ldr	r3, [pc, #388]	; (800e078 <defaultDataInitialization+0xeb0>)
 800def2:	f04f 0200 	mov.w	r2, #0
 800def6:	655a      	str	r2, [r3, #84]	; 0x54
	DriveSTD_map.millisValueOver = millis;
 800def8:	4b5e      	ldr	r3, [pc, #376]	; (800e074 <defaultDataInitialization+0xeac>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4a5e      	ldr	r2, [pc, #376]	; (800e078 <defaultDataInitialization+0xeb0>)
 800defe:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_map.minTimeValueOver = DEFAULT_MIN_TIME_VALUE_OVER;
 800df00:	4b5d      	ldr	r3, [pc, #372]	; (800e078 <defaultDataInitialization+0xeb0>)
 800df02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800df06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_map.dataRefreshDelay = 0;
 800df0a:	4b5b      	ldr	r3, [pc, #364]	; (800e078 <defaultDataInitialization+0xeb0>)
 800df0c:	2200      	movs	r2, #0
 800df0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_map.dataRefreshMillis = 0;
 800df12:	4b59      	ldr	r3, [pc, #356]	; (800e078 <defaultDataInitialization+0xeb0>)
 800df14:	2200      	movs	r2, #0
 800df16:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_map.receivedDataControlEnable = DISABLE;
 800df18:	4b57      	ldr	r3, [pc, #348]	; (800e078 <defaultDataInitialization+0xeb0>)
 800df1a:	2200      	movs	r2, #0
 800df1c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	//DriveSTD_map.lastTimeData = &;
	DriveSTD_map.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800df20:	4b55      	ldr	r3, [pc, #340]	; (800e078 <defaultDataInitialization+0xeb0>)
 800df22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800df26:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_map.blinkingMillis = 0;
 800df2a:	4b53      	ldr	r3, [pc, #332]	; (800e078 <defaultDataInitialization+0xeb0>)
 800df2c:	2200      	movs	r2, #0
 800df2e:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_map.blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800df30:	4b51      	ldr	r3, [pc, #324]	; (800e078 <defaultDataInitialization+0xeb0>)
 800df32:	22fa      	movs	r2, #250	; 0xfa
 800df34:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_map.blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800df38:	4b4f      	ldr	r3, [pc, #316]	; (800e078 <defaultDataInitialization+0xeb0>)
 800df3a:	22fa      	movs	r2, #250	; 0xfa
 800df3c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_map.blinkingStatus = 0;
 800df40:	4b4d      	ldr	r3, [pc, #308]	; (800e078 <defaultDataInitialization+0xeb0>)
 800df42:	2200      	movs	r2, #0
 800df44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_map.blinkingState = 0;
 800df48:	4b4b      	ldr	r3, [pc, #300]	; (800e078 <defaultDataInitialization+0xeb0>)
 800df4a:	2200      	movs	r2, #0
 800df4c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_map.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800df50:	4b49      	ldr	r3, [pc, #292]	; (800e078 <defaultDataInitialization+0xeb0>)
 800df52:	2204      	movs	r2, #4
 800df54:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_map.blinkingFrameEnable = DISABLE;
 800df58:	4b47      	ldr	r3, [pc, #284]	; (800e078 <defaultDataInitialization+0xeb0>)
 800df5a:	2200      	movs	r2, #0
 800df5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_map.blinkingBackEnable = DISABLE;
 800df60:	4b45      	ldr	r3, [pc, #276]	; (800e078 <defaultDataInitialization+0xeb0>)
 800df62:	2200      	movs	r2, #0
 800df64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_map.blinkingOverColor = GUI_RED;
 800df68:	4b43      	ldr	r3, [pc, #268]	; (800e078 <defaultDataInitialization+0xeb0>)
 800df6a:	22ff      	movs	r2, #255	; 0xff
 800df6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_map.blinkingUnderColor = GUI_RED;
 800df70:	4b41      	ldr	r3, [pc, #260]	; (800e078 <defaultDataInitialization+0xeb0>)
 800df72:	22ff      	movs	r2, #255	; 0xff
 800df74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_map.lastExeTime = 0;
 800df78:	4b3f      	ldr	r3, [pc, #252]	; (800e078 <defaultDataInitialization+0xeb0>)
 800df7a:	2200      	movs	r2, #0
 800df7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c




	DriveSTD_drsStatus.enable = ENABLE;
 800df80:	4b41      	ldr	r3, [pc, #260]	; (800e088 <defaultDataInitialization+0xec0>)
 800df82:	2201      	movs	r2, #1
 800df84:	701a      	strb	r2, [r3, #0]

	DriveSTD_drsStatus.string = "DRS";
 800df86:	4b40      	ldr	r3, [pc, #256]	; (800e088 <defaultDataInitialization+0xec0>)
 800df88:	4a40      	ldr	r2, [pc, #256]	; (800e08c <defaultDataInitialization+0xec4>)
 800df8a:	605a      	str	r2, [r3, #4]
	DriveSTD_drsStatus.intStr = "";
 800df8c:	4b3e      	ldr	r3, [pc, #248]	; (800e088 <defaultDataInitialization+0xec0>)
 800df8e:	4a3c      	ldr	r2, [pc, #240]	; (800e080 <defaultDataInitialization+0xeb8>)
 800df90:	609a      	str	r2, [r3, #8]
	DriveSTD_drsStatus.endStr = "";
 800df92:	4b3d      	ldr	r3, [pc, #244]	; (800e088 <defaultDataInitialization+0xec0>)
 800df94:	4a3a      	ldr	r2, [pc, #232]	; (800e080 <defaultDataInitialization+0xeb8>)
 800df96:	60da      	str	r2, [r3, #12]

	DriveSTD_drsStatus.dataPointer = &CAR_Data.drsStatus.intData;
 800df98:	4b3b      	ldr	r3, [pc, #236]	; (800e088 <defaultDataInitialization+0xec0>)
 800df9a:	4a3d      	ldr	r2, [pc, #244]	; (800e090 <defaultDataInitialization+0xec8>)
 800df9c:	611a      	str	r2, [r3, #16]
	DriveSTD_drsStatus.dataLogInt.number = 123;
 800df9e:	4b3a      	ldr	r3, [pc, #232]	; (800e088 <defaultDataInitialization+0xec0>)
 800dfa0:	227b      	movs	r2, #123	; 0x7b
 800dfa2:	615a      	str	r2, [r3, #20]
	DriveSTD_drsStatus.dataLogFloat.number = 0.7;
 800dfa4:	4938      	ldr	r1, [pc, #224]	; (800e088 <defaultDataInitialization+0xec0>)
 800dfa6:	a330      	add	r3, pc, #192	; (adr r3, 800e068 <defaultDataInitialization+0xea0>)
 800dfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfac:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_drsStatus.decimalDigits = 1;
 800dfb0:	4b35      	ldr	r3, [pc, #212]	; (800e088 <defaultDataInitialization+0xec0>)
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_drsStatus.textColor = PAGE_TEXT_COLOR;
 800dfb8:	4b33      	ldr	r3, [pc, #204]	; (800e088 <defaultDataInitialization+0xec0>)
 800dfba:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800dfbe:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_drsStatus.dataColor = PAGE_DATA_COLOR;
 800dfc0:	4b31      	ldr	r3, [pc, #196]	; (800e088 <defaultDataInitialization+0xec0>)
 800dfc2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800dfc6:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_drsStatus.backColor = PAGE_BACK_COLOR;
 800dfc8:	4b2f      	ldr	r3, [pc, #188]	; (800e088 <defaultDataInitialization+0xec0>)
 800dfca:	2200      	movs	r2, #0
 800dfcc:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_drsStatus.frameColor = PAGE_BACK_COLOR;
 800dfce:	4b2e      	ldr	r3, [pc, #184]	; (800e088 <defaultDataInitialization+0xec0>)
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_drsStatus.dataType = DataLog_DataType_Int;
 800dfd4:	4b2c      	ldr	r3, [pc, #176]	; (800e088 <defaultDataInitialization+0xec0>)
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_drsStatus.signEnable = DISABLE;
 800dfdc:	4b2a      	ldr	r3, [pc, #168]	; (800e088 <defaultDataInitialization+0xec0>)
 800dfde:	2200      	movs	r2, #0
 800dfe0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_drsStatus.valueControlEnable = ENABLE;
 800dfe4:	4b28      	ldr	r3, [pc, #160]	; (800e088 <defaultDataInitialization+0xec0>)
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_drsStatus.maxValue = drsStatus_max;
 800dfec:	4b26      	ldr	r3, [pc, #152]	; (800e088 <defaultDataInitialization+0xec0>)
 800dfee:	f04f 0200 	mov.w	r2, #0
 800dff2:	651a      	str	r2, [r3, #80]	; 0x50
	DriveSTD_drsStatus.minValue = drsStatus_min;
 800dff4:	4b24      	ldr	r3, [pc, #144]	; (800e088 <defaultDataInitialization+0xec0>)
 800dff6:	4a27      	ldr	r2, [pc, #156]	; (800e094 <defaultDataInitialization+0xecc>)
 800dff8:	655a      	str	r2, [r3, #84]	; 0x54
	DriveSTD_drsStatus.millisValueOver = millis;
 800dffa:	4b1e      	ldr	r3, [pc, #120]	; (800e074 <defaultDataInitialization+0xeac>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	4a22      	ldr	r2, [pc, #136]	; (800e088 <defaultDataInitialization+0xec0>)
 800e000:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_drsStatus.minTimeValueOver = 100;
 800e002:	4b21      	ldr	r3, [pc, #132]	; (800e088 <defaultDataInitialization+0xec0>)
 800e004:	2264      	movs	r2, #100	; 0x64
 800e006:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_drsStatus.dataRefreshDelay = 0;
 800e00a:	4b1f      	ldr	r3, [pc, #124]	; (800e088 <defaultDataInitialization+0xec0>)
 800e00c:	2200      	movs	r2, #0
 800e00e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_drsStatus.dataRefreshMillis = 0;
 800e012:	4b1d      	ldr	r3, [pc, #116]	; (800e088 <defaultDataInitialization+0xec0>)
 800e014:	2200      	movs	r2, #0
 800e016:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_drsStatus.receivedDataControlEnable = ENABLE;
 800e018:	4b1b      	ldr	r3, [pc, #108]	; (800e088 <defaultDataInitialization+0xec0>)
 800e01a:	2201      	movs	r2, #1
 800e01c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	DriveSTD_drsStatus.lastTimeData = &CAR_Data.drsStatus.lastTimeData;
 800e020:	4b19      	ldr	r3, [pc, #100]	; (800e088 <defaultDataInitialization+0xec0>)
 800e022:	4a1d      	ldr	r2, [pc, #116]	; (800e098 <defaultDataInitialization+0xed0>)
 800e024:	66da      	str	r2, [r3, #108]	; 0x6c
	DriveSTD_drsStatus.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800e026:	4b18      	ldr	r3, [pc, #96]	; (800e088 <defaultDataInitialization+0xec0>)
 800e028:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e02c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_drsStatus.blinkingMillis = 0;
 800e030:	4b15      	ldr	r3, [pc, #84]	; (800e088 <defaultDataInitialization+0xec0>)
 800e032:	2200      	movs	r2, #0
 800e034:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_drsStatus.blinkingDelayOver = NO_BLINK_DELAY;
 800e036:	4b14      	ldr	r3, [pc, #80]	; (800e088 <defaultDataInitialization+0xec0>)
 800e038:	f242 7210 	movw	r2, #10000	; 0x2710
 800e03c:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_drsStatus.blinkingDelayUnder = NO_BLINK_DELAY;
 800e040:	4b11      	ldr	r3, [pc, #68]	; (800e088 <defaultDataInitialization+0xec0>)
 800e042:	f242 7210 	movw	r2, #10000	; 0x2710
 800e046:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_drsStatus.blinkingStatus = 0;
 800e04a:	4b0f      	ldr	r3, [pc, #60]	; (800e088 <defaultDataInitialization+0xec0>)
 800e04c:	2200      	movs	r2, #0
 800e04e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_drsStatus.blinkingState = 0;
 800e052:	4b0d      	ldr	r3, [pc, #52]	; (800e088 <defaultDataInitialization+0xec0>)
 800e054:	2200      	movs	r2, #0
 800e056:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_drsStatus.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800e05a:	4b0b      	ldr	r3, [pc, #44]	; (800e088 <defaultDataInitialization+0xec0>)
 800e05c:	2204      	movs	r2, #4
 800e05e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800e062:	e01b      	b.n	800e09c <defaultDataInitialization+0xed4>
 800e064:	f3af 8000 	nop.w
 800e068:	66666666 	.word	0x66666666
 800e06c:	3fe66666 	.word	0x3fe66666
 800e070:	200063f8 	.word	0x200063f8
 800e074:	20006a98 	.word	0x20006a98
 800e078:	20006488 	.word	0x20006488
 800e07c:	08022674 	.word	0x08022674
 800e080:	0802261c 	.word	0x0802261c
 800e084:	200007c8 	.word	0x200007c8
 800e088:	20006518 	.word	0x20006518
 800e08c:	08022678 	.word	0x08022678
 800e090:	20000698 	.word	0x20000698
 800e094:	bf800000 	.word	0xbf800000
 800e098:	200006a4 	.word	0x200006a4
	DriveSTD_drsStatus.blinkingFrameEnable = ENABLE;
 800e09c:	4bae      	ldr	r3, [pc, #696]	; (800e358 <defaultDataInitialization+0x1190>)
 800e09e:	2201      	movs	r2, #1
 800e0a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_drsStatus.blinkingBackEnable = ENABLE;
 800e0a4:	4bac      	ldr	r3, [pc, #688]	; (800e358 <defaultDataInitialization+0x1190>)
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_drsStatus.blinkingOverColor = GUI_GREEN;
 800e0ac:	4baa      	ldr	r3, [pc, #680]	; (800e358 <defaultDataInitialization+0x1190>)
 800e0ae:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800e0b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_drsStatus.blinkingUnderColor = GUI_RED;
 800e0b6:	4ba8      	ldr	r3, [pc, #672]	; (800e358 <defaultDataInitialization+0x1190>)
 800e0b8:	22ff      	movs	r2, #255	; 0xff
 800e0ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_drsStatus.lastExeTime = 0;
 800e0be:	4ba6      	ldr	r3, [pc, #664]	; (800e358 <defaultDataInitialization+0x1190>)
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c




	DriveSTD_brakeBias.enable = ENABLE;
 800e0c6:	4ba5      	ldr	r3, [pc, #660]	; (800e35c <defaultDataInitialization+0x1194>)
 800e0c8:	2201      	movs	r2, #1
 800e0ca:	701a      	strb	r2, [r3, #0]

	DriveSTD_brakeBias.string = "Brake Bal";
 800e0cc:	4ba3      	ldr	r3, [pc, #652]	; (800e35c <defaultDataInitialization+0x1194>)
 800e0ce:	4aa4      	ldr	r2, [pc, #656]	; (800e360 <defaultDataInitialization+0x1198>)
 800e0d0:	605a      	str	r2, [r3, #4]
	DriveSTD_brakeBias.intStr = "";
 800e0d2:	4ba2      	ldr	r3, [pc, #648]	; (800e35c <defaultDataInitialization+0x1194>)
 800e0d4:	4aa3      	ldr	r2, [pc, #652]	; (800e364 <defaultDataInitialization+0x119c>)
 800e0d6:	609a      	str	r2, [r3, #8]
	DriveSTD_brakeBias.endStr = " %";
 800e0d8:	4ba0      	ldr	r3, [pc, #640]	; (800e35c <defaultDataInitialization+0x1194>)
 800e0da:	4aa3      	ldr	r2, [pc, #652]	; (800e368 <defaultDataInitialization+0x11a0>)
 800e0dc:	60da      	str	r2, [r3, #12]

	DriveSTD_brakeBias.dataPointer = &CAR_Data.brakeBias.floatData;
 800e0de:	4b9f      	ldr	r3, [pc, #636]	; (800e35c <defaultDataInitialization+0x1194>)
 800e0e0:	4aa2      	ldr	r2, [pc, #648]	; (800e36c <defaultDataInitialization+0x11a4>)
 800e0e2:	611a      	str	r2, [r3, #16]
	DriveSTD_brakeBias.dataLogInt.number = 123;
 800e0e4:	4b9d      	ldr	r3, [pc, #628]	; (800e35c <defaultDataInitialization+0x1194>)
 800e0e6:	227b      	movs	r2, #123	; 0x7b
 800e0e8:	615a      	str	r2, [r3, #20]
	DriveSTD_brakeBias.dataLogFloat.number = 0.7;
 800e0ea:	499c      	ldr	r1, [pc, #624]	; (800e35c <defaultDataInitialization+0x1194>)
 800e0ec:	a398      	add	r3, pc, #608	; (adr r3, 800e350 <defaultDataInitialization+0x1188>)
 800e0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_brakeBias.decimalDigits = 0;
 800e0f6:	4b99      	ldr	r3, [pc, #612]	; (800e35c <defaultDataInitialization+0x1194>)
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_brakeBias.textColor = PAGE_TEXT_COLOR;
 800e0fe:	4b97      	ldr	r3, [pc, #604]	; (800e35c <defaultDataInitialization+0x1194>)
 800e100:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800e104:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_brakeBias.dataColor = PAGE_DATA_COLOR;
 800e106:	4b95      	ldr	r3, [pc, #596]	; (800e35c <defaultDataInitialization+0x1194>)
 800e108:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800e10c:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_brakeBias.backColor = PAGE_BACK_COLOR;
 800e10e:	4b93      	ldr	r3, [pc, #588]	; (800e35c <defaultDataInitialization+0x1194>)
 800e110:	2200      	movs	r2, #0
 800e112:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_brakeBias.frameColor = PAGE_BACK_COLOR;
 800e114:	4b91      	ldr	r3, [pc, #580]	; (800e35c <defaultDataInitialization+0x1194>)
 800e116:	2200      	movs	r2, #0
 800e118:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_brakeBias.dataType = DataLog_DataType_Float;
 800e11a:	4b90      	ldr	r3, [pc, #576]	; (800e35c <defaultDataInitialization+0x1194>)
 800e11c:	2201      	movs	r2, #1
 800e11e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_brakeBias.signEnable = DISABLE;
 800e122:	4b8e      	ldr	r3, [pc, #568]	; (800e35c <defaultDataInitialization+0x1194>)
 800e124:	2200      	movs	r2, #0
 800e126:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_brakeBias.valueControlEnable = DISABLE;
 800e12a:	4b8c      	ldr	r3, [pc, #560]	; (800e35c <defaultDataInitialization+0x1194>)
 800e12c:	2200      	movs	r2, #0
 800e12e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_brakeBias.maxValue = 0;
 800e132:	4b8a      	ldr	r3, [pc, #552]	; (800e35c <defaultDataInitialization+0x1194>)
 800e134:	f04f 0200 	mov.w	r2, #0
 800e138:	651a      	str	r2, [r3, #80]	; 0x50
	DriveSTD_brakeBias.minValue = 0;
 800e13a:	4b88      	ldr	r3, [pc, #544]	; (800e35c <defaultDataInitialization+0x1194>)
 800e13c:	f04f 0200 	mov.w	r2, #0
 800e140:	655a      	str	r2, [r3, #84]	; 0x54
	DriveSTD_brakeBias.millisValueOver = millis;
 800e142:	4b8b      	ldr	r3, [pc, #556]	; (800e370 <defaultDataInitialization+0x11a8>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4a85      	ldr	r2, [pc, #532]	; (800e35c <defaultDataInitialization+0x1194>)
 800e148:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_brakeBias.minTimeValueOver = DEFAULT_MIN_TIME_VALUE_OVER;
 800e14a:	4b84      	ldr	r3, [pc, #528]	; (800e35c <defaultDataInitialization+0x1194>)
 800e14c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e150:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_brakeBias.dataRefreshDelay = 0;
 800e154:	4b81      	ldr	r3, [pc, #516]	; (800e35c <defaultDataInitialization+0x1194>)
 800e156:	2200      	movs	r2, #0
 800e158:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_brakeBias.dataRefreshMillis = 0;
 800e15c:	4b7f      	ldr	r3, [pc, #508]	; (800e35c <defaultDataInitialization+0x1194>)
 800e15e:	2200      	movs	r2, #0
 800e160:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_brakeBias.receivedDataControlEnable = ENABLE;
 800e162:	4b7e      	ldr	r3, [pc, #504]	; (800e35c <defaultDataInitialization+0x1194>)
 800e164:	2201      	movs	r2, #1
 800e166:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	DriveSTD_brakeBias.lastTimeData = &CAR_Data.brakeBias.lastTimeData;
 800e16a:	4b7c      	ldr	r3, [pc, #496]	; (800e35c <defaultDataInitialization+0x1194>)
 800e16c:	4a81      	ldr	r2, [pc, #516]	; (800e374 <defaultDataInitialization+0x11ac>)
 800e16e:	66da      	str	r2, [r3, #108]	; 0x6c
	DriveSTD_brakeBias.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800e170:	4b7a      	ldr	r3, [pc, #488]	; (800e35c <defaultDataInitialization+0x1194>)
 800e172:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e176:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_brakeBias.blinkingMillis = 0;
 800e17a:	4b78      	ldr	r3, [pc, #480]	; (800e35c <defaultDataInitialization+0x1194>)
 800e17c:	2200      	movs	r2, #0
 800e17e:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_brakeBias.blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800e180:	4b76      	ldr	r3, [pc, #472]	; (800e35c <defaultDataInitialization+0x1194>)
 800e182:	22fa      	movs	r2, #250	; 0xfa
 800e184:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_brakeBias.blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800e188:	4b74      	ldr	r3, [pc, #464]	; (800e35c <defaultDataInitialization+0x1194>)
 800e18a:	22fa      	movs	r2, #250	; 0xfa
 800e18c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_brakeBias.blinkingStatus = 0;
 800e190:	4b72      	ldr	r3, [pc, #456]	; (800e35c <defaultDataInitialization+0x1194>)
 800e192:	2200      	movs	r2, #0
 800e194:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_brakeBias.blinkingState = 0;
 800e198:	4b70      	ldr	r3, [pc, #448]	; (800e35c <defaultDataInitialization+0x1194>)
 800e19a:	2200      	movs	r2, #0
 800e19c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_brakeBias.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800e1a0:	4b6e      	ldr	r3, [pc, #440]	; (800e35c <defaultDataInitialization+0x1194>)
 800e1a2:	2204      	movs	r2, #4
 800e1a4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_brakeBias.blinkingFrameEnable = DISABLE;
 800e1a8:	4b6c      	ldr	r3, [pc, #432]	; (800e35c <defaultDataInitialization+0x1194>)
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_brakeBias.blinkingBackEnable = DISABLE;
 800e1b0:	4b6a      	ldr	r3, [pc, #424]	; (800e35c <defaultDataInitialization+0x1194>)
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_brakeBias.blinkingOverColor = GUI_RED;
 800e1b8:	4b68      	ldr	r3, [pc, #416]	; (800e35c <defaultDataInitialization+0x1194>)
 800e1ba:	22ff      	movs	r2, #255	; 0xff
 800e1bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_brakeBias.blinkingUnderColor = GUI_RED;
 800e1c0:	4b66      	ldr	r3, [pc, #408]	; (800e35c <defaultDataInitialization+0x1194>)
 800e1c2:	22ff      	movs	r2, #255	; 0xff
 800e1c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_brakeBias.lastExeTime = 0;
 800e1c8:	4b64      	ldr	r3, [pc, #400]	; (800e35c <defaultDataInitialization+0x1194>)
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c




	DriveSTD_brake.enable = ENABLE;
 800e1d0:	4b69      	ldr	r3, [pc, #420]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	701a      	strb	r2, [r3, #0]

	DriveSTD_brake.string = "Brake PF";
 800e1d6:	4b68      	ldr	r3, [pc, #416]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e1d8:	4a68      	ldr	r2, [pc, #416]	; (800e37c <defaultDataInitialization+0x11b4>)
 800e1da:	605a      	str	r2, [r3, #4]
	DriveSTD_brake.intStr = "";
 800e1dc:	4b66      	ldr	r3, [pc, #408]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e1de:	4a61      	ldr	r2, [pc, #388]	; (800e364 <defaultDataInitialization+0x119c>)
 800e1e0:	609a      	str	r2, [r3, #8]
	DriveSTD_brake.endStr = "";
 800e1e2:	4b65      	ldr	r3, [pc, #404]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e1e4:	4a5f      	ldr	r2, [pc, #380]	; (800e364 <defaultDataInitialization+0x119c>)
 800e1e6:	60da      	str	r2, [r3, #12]

	DriveSTD_brake.dataPointer = &CAR_Data.brake.intData;
 800e1e8:	4b63      	ldr	r3, [pc, #396]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e1ea:	4a65      	ldr	r2, [pc, #404]	; (800e380 <defaultDataInitialization+0x11b8>)
 800e1ec:	611a      	str	r2, [r3, #16]
	DriveSTD_brake.dataLogInt.number = 123;
 800e1ee:	4b62      	ldr	r3, [pc, #392]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e1f0:	227b      	movs	r2, #123	; 0x7b
 800e1f2:	615a      	str	r2, [r3, #20]
	DriveSTD_brake.dataLogFloat.number = 0.7;
 800e1f4:	4960      	ldr	r1, [pc, #384]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e1f6:	a356      	add	r3, pc, #344	; (adr r3, 800e350 <defaultDataInitialization+0x1188>)
 800e1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fc:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_brake.decimalDigits = 0;
 800e200:	4b5d      	ldr	r3, [pc, #372]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e202:	2200      	movs	r2, #0
 800e204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_brake.textColor = PAGE_TEXT_COLOR;
 800e208:	4b5b      	ldr	r3, [pc, #364]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e20a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800e20e:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_brake.dataColor = PAGE_DATA_COLOR;
 800e210:	4b59      	ldr	r3, [pc, #356]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e212:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800e216:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_brake.backColor = PAGE_BACK_COLOR;
 800e218:	4b57      	ldr	r3, [pc, #348]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e21a:	2200      	movs	r2, #0
 800e21c:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_brake.frameColor = PAGE_BACK_COLOR;
 800e21e:	4b56      	ldr	r3, [pc, #344]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e220:	2200      	movs	r2, #0
 800e222:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_brake.dataType = DataLog_DataType_Int;
 800e224:	4b54      	ldr	r3, [pc, #336]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e226:	2200      	movs	r2, #0
 800e228:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_brake.signEnable = SIGN_NEGATIVE;
 800e22c:	4b52      	ldr	r3, [pc, #328]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e22e:	2203      	movs	r2, #3
 800e230:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_brake.valueControlEnable = DISABLE;
 800e234:	4b50      	ldr	r3, [pc, #320]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e236:	2200      	movs	r2, #0
 800e238:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_brake.maxValue = 0;
 800e23c:	4b4e      	ldr	r3, [pc, #312]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e23e:	f04f 0200 	mov.w	r2, #0
 800e242:	651a      	str	r2, [r3, #80]	; 0x50
	DriveSTD_brake.minValue = 0;
 800e244:	4b4c      	ldr	r3, [pc, #304]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e246:	f04f 0200 	mov.w	r2, #0
 800e24a:	655a      	str	r2, [r3, #84]	; 0x54
	DriveSTD_brake.millisValueOver = millis;
 800e24c:	4b48      	ldr	r3, [pc, #288]	; (800e370 <defaultDataInitialization+0x11a8>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a49      	ldr	r2, [pc, #292]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e252:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_brake.minTimeValueOver = DEFAULT_MIN_TIME_VALUE_OVER;
 800e254:	4b48      	ldr	r3, [pc, #288]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e25a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_brake.dataRefreshDelay = 0;
 800e25e:	4b46      	ldr	r3, [pc, #280]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e260:	2200      	movs	r2, #0
 800e262:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_brake.dataRefreshMillis = 0;
 800e266:	4b44      	ldr	r3, [pc, #272]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e268:	2200      	movs	r2, #0
 800e26a:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_brake.receivedDataControlEnable = ENABLE;
 800e26c:	4b42      	ldr	r3, [pc, #264]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e26e:	2201      	movs	r2, #1
 800e270:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	DriveSTD_brake.lastTimeData = &CAR_Data.brake.lastTimeData;
 800e274:	4b40      	ldr	r3, [pc, #256]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e276:	4a43      	ldr	r2, [pc, #268]	; (800e384 <defaultDataInitialization+0x11bc>)
 800e278:	66da      	str	r2, [r3, #108]	; 0x6c
	DriveSTD_brake.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800e27a:	4b3f      	ldr	r3, [pc, #252]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e27c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e280:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_brake.blinkingMillis = 0;
 800e284:	4b3c      	ldr	r3, [pc, #240]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e286:	2200      	movs	r2, #0
 800e288:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_brake.blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800e28a:	4b3b      	ldr	r3, [pc, #236]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e28c:	22fa      	movs	r2, #250	; 0xfa
 800e28e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_brake.blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800e292:	4b39      	ldr	r3, [pc, #228]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e294:	22fa      	movs	r2, #250	; 0xfa
 800e296:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_brake.blinkingStatus = 0;
 800e29a:	4b37      	ldr	r3, [pc, #220]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e29c:	2200      	movs	r2, #0
 800e29e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_brake.blinkingState = 0;
 800e2a2:	4b35      	ldr	r3, [pc, #212]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_brake.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800e2aa:	4b33      	ldr	r3, [pc, #204]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e2ac:	2204      	movs	r2, #4
 800e2ae:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_brake.blinkingFrameEnable = ENABLE;
 800e2b2:	4b31      	ldr	r3, [pc, #196]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_brake.blinkingBackEnable = ENABLE;
 800e2ba:	4b2f      	ldr	r3, [pc, #188]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e2bc:	2201      	movs	r2, #1
 800e2be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_brake.blinkingOverColor = GUI_RED;
 800e2c2:	4b2d      	ldr	r3, [pc, #180]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e2c4:	22ff      	movs	r2, #255	; 0xff
 800e2c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_brake.blinkingUnderColor = GUI_RED;
 800e2ca:	4b2b      	ldr	r3, [pc, #172]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e2cc:	22ff      	movs	r2, #255	; 0xff
 800e2ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_brake.lastExeTime = 0;
 800e2d2:	4b29      	ldr	r3, [pc, #164]	; (800e378 <defaultDataInitialization+0x11b0>)
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c




	DriveSTD_brakeRear.enable = ENABLE;
 800e2da:	4b2b      	ldr	r3, [pc, #172]	; (800e388 <defaultDataInitialization+0x11c0>)
 800e2dc:	2201      	movs	r2, #1
 800e2de:	701a      	strb	r2, [r3, #0]

	DriveSTD_brakeRear.string = "Brake PR";
 800e2e0:	4b29      	ldr	r3, [pc, #164]	; (800e388 <defaultDataInitialization+0x11c0>)
 800e2e2:	4a2a      	ldr	r2, [pc, #168]	; (800e38c <defaultDataInitialization+0x11c4>)
 800e2e4:	605a      	str	r2, [r3, #4]
	DriveSTD_brakeRear.intStr = "";
 800e2e6:	4b28      	ldr	r3, [pc, #160]	; (800e388 <defaultDataInitialization+0x11c0>)
 800e2e8:	4a1e      	ldr	r2, [pc, #120]	; (800e364 <defaultDataInitialization+0x119c>)
 800e2ea:	609a      	str	r2, [r3, #8]
	DriveSTD_brakeRear.endStr = "";
 800e2ec:	4b26      	ldr	r3, [pc, #152]	; (800e388 <defaultDataInitialization+0x11c0>)
 800e2ee:	4a1d      	ldr	r2, [pc, #116]	; (800e364 <defaultDataInitialization+0x119c>)
 800e2f0:	60da      	str	r2, [r3, #12]

	DriveSTD_brakeRear.dataPointer = &CAR_Data.brakeRear.intData;
 800e2f2:	4b25      	ldr	r3, [pc, #148]	; (800e388 <defaultDataInitialization+0x11c0>)
 800e2f4:	4a26      	ldr	r2, [pc, #152]	; (800e390 <defaultDataInitialization+0x11c8>)
 800e2f6:	611a      	str	r2, [r3, #16]
	DriveSTD_brakeRear.dataLogInt.number = 123;
 800e2f8:	4b23      	ldr	r3, [pc, #140]	; (800e388 <defaultDataInitialization+0x11c0>)
 800e2fa:	227b      	movs	r2, #123	; 0x7b
 800e2fc:	615a      	str	r2, [r3, #20]
	DriveSTD_brakeRear.dataLogFloat.number = 0.7;
 800e2fe:	4922      	ldr	r1, [pc, #136]	; (800e388 <defaultDataInitialization+0x11c0>)
 800e300:	a313      	add	r3, pc, #76	; (adr r3, 800e350 <defaultDataInitialization+0x1188>)
 800e302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e306:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_brakeRear.decimalDigits = 0;
 800e30a:	4b1f      	ldr	r3, [pc, #124]	; (800e388 <defaultDataInitialization+0x11c0>)
 800e30c:	2200      	movs	r2, #0
 800e30e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_brakeRear.textColor = PAGE_TEXT_COLOR;
 800e312:	4b1d      	ldr	r3, [pc, #116]	; (800e388 <defaultDataInitialization+0x11c0>)
 800e314:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800e318:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_brakeRear.dataColor = PAGE_DATA_COLOR;
 800e31a:	4b1b      	ldr	r3, [pc, #108]	; (800e388 <defaultDataInitialization+0x11c0>)
 800e31c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800e320:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_brakeRear.backColor = PAGE_BACK_COLOR;
 800e322:	4b19      	ldr	r3, [pc, #100]	; (800e388 <defaultDataInitialization+0x11c0>)
 800e324:	2200      	movs	r2, #0
 800e326:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_brakeRear.frameColor = PAGE_BACK_COLOR;
 800e328:	4b17      	ldr	r3, [pc, #92]	; (800e388 <defaultDataInitialization+0x11c0>)
 800e32a:	2200      	movs	r2, #0
 800e32c:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_brakeRear.dataType = DataLog_DataType_Int;
 800e32e:	4b16      	ldr	r3, [pc, #88]	; (800e388 <defaultDataInitialization+0x11c0>)
 800e330:	2200      	movs	r2, #0
 800e332:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_brakeRear.signEnable = SIGN_NEGATIVE;
 800e336:	4b14      	ldr	r3, [pc, #80]	; (800e388 <defaultDataInitialization+0x11c0>)
 800e338:	2203      	movs	r2, #3
 800e33a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_brakeRear.valueControlEnable = DISABLE;
 800e33e:	4b12      	ldr	r3, [pc, #72]	; (800e388 <defaultDataInitialization+0x11c0>)
 800e340:	2200      	movs	r2, #0
 800e342:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_brakeRear.maxValue = 0;
 800e346:	4b10      	ldr	r3, [pc, #64]	; (800e388 <defaultDataInitialization+0x11c0>)
 800e348:	f04f 0200 	mov.w	r2, #0
 800e34c:	e022      	b.n	800e394 <defaultDataInitialization+0x11cc>
 800e34e:	bf00      	nop
 800e350:	66666666 	.word	0x66666666
 800e354:	3fe66666 	.word	0x3fe66666
 800e358:	20006518 	.word	0x20006518
 800e35c:	200065a8 	.word	0x200065a8
 800e360:	0802267c 	.word	0x0802267c
 800e364:	0802261c 	.word	0x0802261c
 800e368:	08022688 	.word	0x08022688
 800e36c:	200006e0 	.word	0x200006e0
 800e370:	20006a98 	.word	0x20006a98
 800e374:	200006f0 	.word	0x200006f0
 800e378:	20006638 	.word	0x20006638
 800e37c:	0802268c 	.word	0x0802268c
 800e380:	2000051c 	.word	0x2000051c
 800e384:	20000528 	.word	0x20000528
 800e388:	200066c8 	.word	0x200066c8
 800e38c:	08022698 	.word	0x08022698
 800e390:	20000568 	.word	0x20000568
 800e394:	651a      	str	r2, [r3, #80]	; 0x50
	DriveSTD_brakeRear.minValue = 0;
 800e396:	4bb0      	ldr	r3, [pc, #704]	; (800e658 <defaultDataInitialization+0x1490>)
 800e398:	f04f 0200 	mov.w	r2, #0
 800e39c:	655a      	str	r2, [r3, #84]	; 0x54
	DriveSTD_brakeRear.millisValueOver = millis;
 800e39e:	4baf      	ldr	r3, [pc, #700]	; (800e65c <defaultDataInitialization+0x1494>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	4aad      	ldr	r2, [pc, #692]	; (800e658 <defaultDataInitialization+0x1490>)
 800e3a4:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_brakeRear.minTimeValueOver = DEFAULT_MIN_TIME_VALUE_OVER;
 800e3a6:	4bac      	ldr	r3, [pc, #688]	; (800e658 <defaultDataInitialization+0x1490>)
 800e3a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e3ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_brakeRear.dataRefreshDelay = 0;
 800e3b0:	4ba9      	ldr	r3, [pc, #676]	; (800e658 <defaultDataInitialization+0x1490>)
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_brakeRear.dataRefreshMillis = 0;
 800e3b8:	4ba7      	ldr	r3, [pc, #668]	; (800e658 <defaultDataInitialization+0x1490>)
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_brakeRear.receivedDataControlEnable = ENABLE;
 800e3be:	4ba6      	ldr	r3, [pc, #664]	; (800e658 <defaultDataInitialization+0x1490>)
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	DriveSTD_brakeRear.lastTimeData = &CAR_Data.brake.lastTimeData;
 800e3c6:	4ba4      	ldr	r3, [pc, #656]	; (800e658 <defaultDataInitialization+0x1490>)
 800e3c8:	4aa5      	ldr	r2, [pc, #660]	; (800e660 <defaultDataInitialization+0x1498>)
 800e3ca:	66da      	str	r2, [r3, #108]	; 0x6c
	DriveSTD_brakeRear.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800e3cc:	4ba2      	ldr	r3, [pc, #648]	; (800e658 <defaultDataInitialization+0x1490>)
 800e3ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e3d2:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_brakeRear.blinkingMillis = 0;
 800e3d6:	4ba0      	ldr	r3, [pc, #640]	; (800e658 <defaultDataInitialization+0x1490>)
 800e3d8:	2200      	movs	r2, #0
 800e3da:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_brakeRear.blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800e3dc:	4b9e      	ldr	r3, [pc, #632]	; (800e658 <defaultDataInitialization+0x1490>)
 800e3de:	22fa      	movs	r2, #250	; 0xfa
 800e3e0:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_brakeRear.blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800e3e4:	4b9c      	ldr	r3, [pc, #624]	; (800e658 <defaultDataInitialization+0x1490>)
 800e3e6:	22fa      	movs	r2, #250	; 0xfa
 800e3e8:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_brakeRear.blinkingStatus = 0;
 800e3ec:	4b9a      	ldr	r3, [pc, #616]	; (800e658 <defaultDataInitialization+0x1490>)
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_brakeRear.blinkingState = 0;
 800e3f4:	4b98      	ldr	r3, [pc, #608]	; (800e658 <defaultDataInitialization+0x1490>)
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_brakeRear.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800e3fc:	4b96      	ldr	r3, [pc, #600]	; (800e658 <defaultDataInitialization+0x1490>)
 800e3fe:	2204      	movs	r2, #4
 800e400:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_brakeRear.blinkingFrameEnable = ENABLE;
 800e404:	4b94      	ldr	r3, [pc, #592]	; (800e658 <defaultDataInitialization+0x1490>)
 800e406:	2201      	movs	r2, #1
 800e408:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_brakeRear.blinkingBackEnable = ENABLE;
 800e40c:	4b92      	ldr	r3, [pc, #584]	; (800e658 <defaultDataInitialization+0x1490>)
 800e40e:	2201      	movs	r2, #1
 800e410:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_brakeRear.blinkingOverColor = GUI_RED;
 800e414:	4b90      	ldr	r3, [pc, #576]	; (800e658 <defaultDataInitialization+0x1490>)
 800e416:	22ff      	movs	r2, #255	; 0xff
 800e418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_brakeRear.blinkingUnderColor = GUI_RED;
 800e41c:	4b8e      	ldr	r3, [pc, #568]	; (800e658 <defaultDataInitialization+0x1490>)
 800e41e:	22ff      	movs	r2, #255	; 0xff
 800e420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_brakeRear.lastExeTime = 0;
 800e424:	4b8c      	ldr	r3, [pc, #560]	; (800e658 <defaultDataInitialization+0x1490>)
 800e426:	2200      	movs	r2, #0
 800e428:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c





	DriveSTD_RL_Ty_Temp.enable = ENABLE;
 800e42c:	4b8d      	ldr	r3, [pc, #564]	; (800e664 <defaultDataInitialization+0x149c>)
 800e42e:	2201      	movs	r2, #1
 800e430:	701a      	strb	r2, [r3, #0]

	DriveSTD_RL_Ty_Temp.string = "RL Ty T";
 800e432:	4b8c      	ldr	r3, [pc, #560]	; (800e664 <defaultDataInitialization+0x149c>)
 800e434:	4a8c      	ldr	r2, [pc, #560]	; (800e668 <defaultDataInitialization+0x14a0>)
 800e436:	605a      	str	r2, [r3, #4]
	DriveSTD_RL_Ty_Temp.intStr = "";
 800e438:	4b8a      	ldr	r3, [pc, #552]	; (800e664 <defaultDataInitialization+0x149c>)
 800e43a:	4a8c      	ldr	r2, [pc, #560]	; (800e66c <defaultDataInitialization+0x14a4>)
 800e43c:	609a      	str	r2, [r3, #8]
	DriveSTD_RL_Ty_Temp.endStr = "";
 800e43e:	4b89      	ldr	r3, [pc, #548]	; (800e664 <defaultDataInitialization+0x149c>)
 800e440:	4a8a      	ldr	r2, [pc, #552]	; (800e66c <defaultDataInitialization+0x14a4>)
 800e442:	60da      	str	r2, [r3, #12]

	DriveSTD_RL_Ty_Temp.dataPointer = &CAR_Data.tyresTemp[RL].floatData;
 800e444:	4b87      	ldr	r3, [pc, #540]	; (800e664 <defaultDataInitialization+0x149c>)
 800e446:	4a8a      	ldr	r2, [pc, #552]	; (800e670 <defaultDataInitialization+0x14a8>)
 800e448:	611a      	str	r2, [r3, #16]
	DriveSTD_RL_Ty_Temp.dataLogInt.number = 123;
 800e44a:	4b86      	ldr	r3, [pc, #536]	; (800e664 <defaultDataInitialization+0x149c>)
 800e44c:	227b      	movs	r2, #123	; 0x7b
 800e44e:	615a      	str	r2, [r3, #20]
	DriveSTD_RL_Ty_Temp.dataLogFloat.number = 0.7;
 800e450:	4984      	ldr	r1, [pc, #528]	; (800e664 <defaultDataInitialization+0x149c>)
 800e452:	a37f      	add	r3, pc, #508	; (adr r3, 800e650 <defaultDataInitialization+0x1488>)
 800e454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e458:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_RL_Ty_Temp.decimalDigits = 1;
 800e45c:	4b81      	ldr	r3, [pc, #516]	; (800e664 <defaultDataInitialization+0x149c>)
 800e45e:	2201      	movs	r2, #1
 800e460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_RL_Ty_Temp.textColor = PAGE_TEXT_COLOR;
 800e464:	4b7f      	ldr	r3, [pc, #508]	; (800e664 <defaultDataInitialization+0x149c>)
 800e466:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800e46a:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_RL_Ty_Temp.dataColor = PAGE_DATA_COLOR;
 800e46c:	4b7d      	ldr	r3, [pc, #500]	; (800e664 <defaultDataInitialization+0x149c>)
 800e46e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800e472:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_RL_Ty_Temp.backColor = PAGE_BACK_COLOR;
 800e474:	4b7b      	ldr	r3, [pc, #492]	; (800e664 <defaultDataInitialization+0x149c>)
 800e476:	2200      	movs	r2, #0
 800e478:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_RL_Ty_Temp.frameColor = PAGE_BACK_COLOR;
 800e47a:	4b7a      	ldr	r3, [pc, #488]	; (800e664 <defaultDataInitialization+0x149c>)
 800e47c:	2200      	movs	r2, #0
 800e47e:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_RL_Ty_Temp.dataType = DataLog_DataType_Float;
 800e480:	4b78      	ldr	r3, [pc, #480]	; (800e664 <defaultDataInitialization+0x149c>)
 800e482:	2201      	movs	r2, #1
 800e484:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_RL_Ty_Temp.signEnable = DISABLE;
 800e488:	4b76      	ldr	r3, [pc, #472]	; (800e664 <defaultDataInitialization+0x149c>)
 800e48a:	2200      	movs	r2, #0
 800e48c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_RL_Ty_Temp.valueControlEnable = DISABLE;
 800e490:	4b74      	ldr	r3, [pc, #464]	; (800e664 <defaultDataInitialization+0x149c>)
 800e492:	2200      	movs	r2, #0
 800e494:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_RL_Ty_Temp.maxValue = 0;
 800e498:	4b72      	ldr	r3, [pc, #456]	; (800e664 <defaultDataInitialization+0x149c>)
 800e49a:	f04f 0200 	mov.w	r2, #0
 800e49e:	651a      	str	r2, [r3, #80]	; 0x50
	DriveSTD_RL_Ty_Temp.minValue = 0;
 800e4a0:	4b70      	ldr	r3, [pc, #448]	; (800e664 <defaultDataInitialization+0x149c>)
 800e4a2:	f04f 0200 	mov.w	r2, #0
 800e4a6:	655a      	str	r2, [r3, #84]	; 0x54
	DriveSTD_RL_Ty_Temp.millisValueOver = millis;
 800e4a8:	4b6c      	ldr	r3, [pc, #432]	; (800e65c <defaultDataInitialization+0x1494>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4a6d      	ldr	r2, [pc, #436]	; (800e664 <defaultDataInitialization+0x149c>)
 800e4ae:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_RL_Ty_Temp.minTimeValueOver = DEFAULT_MIN_TIME_VALUE_OVER;
 800e4b0:	4b6c      	ldr	r3, [pc, #432]	; (800e664 <defaultDataInitialization+0x149c>)
 800e4b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e4b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_RL_Ty_Temp.dataRefreshDelay = 0;
 800e4ba:	4b6a      	ldr	r3, [pc, #424]	; (800e664 <defaultDataInitialization+0x149c>)
 800e4bc:	2200      	movs	r2, #0
 800e4be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_RL_Ty_Temp.dataRefreshMillis = 0;
 800e4c2:	4b68      	ldr	r3, [pc, #416]	; (800e664 <defaultDataInitialization+0x149c>)
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_RL_Ty_Temp.receivedDataControlEnable = ENABLE;
 800e4c8:	4b66      	ldr	r3, [pc, #408]	; (800e664 <defaultDataInitialization+0x149c>)
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	DriveSTD_RL_Ty_Temp.lastTimeData = &CAR_Data.tyresTemp[RL].lastTimeData;
 800e4d0:	4b64      	ldr	r3, [pc, #400]	; (800e664 <defaultDataInitialization+0x149c>)
 800e4d2:	4a68      	ldr	r2, [pc, #416]	; (800e674 <defaultDataInitialization+0x14ac>)
 800e4d4:	66da      	str	r2, [r3, #108]	; 0x6c
	DriveSTD_RL_Ty_Temp.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800e4d6:	4b63      	ldr	r3, [pc, #396]	; (800e664 <defaultDataInitialization+0x149c>)
 800e4d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e4dc:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_RL_Ty_Temp.blinkingMillis = 0;
 800e4e0:	4b60      	ldr	r3, [pc, #384]	; (800e664 <defaultDataInitialization+0x149c>)
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_RL_Ty_Temp.blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800e4e6:	4b5f      	ldr	r3, [pc, #380]	; (800e664 <defaultDataInitialization+0x149c>)
 800e4e8:	22fa      	movs	r2, #250	; 0xfa
 800e4ea:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_RL_Ty_Temp.blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800e4ee:	4b5d      	ldr	r3, [pc, #372]	; (800e664 <defaultDataInitialization+0x149c>)
 800e4f0:	22fa      	movs	r2, #250	; 0xfa
 800e4f2:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_RL_Ty_Temp.blinkingStatus = 0;
 800e4f6:	4b5b      	ldr	r3, [pc, #364]	; (800e664 <defaultDataInitialization+0x149c>)
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_RL_Ty_Temp.blinkingState = 0;
 800e4fe:	4b59      	ldr	r3, [pc, #356]	; (800e664 <defaultDataInitialization+0x149c>)
 800e500:	2200      	movs	r2, #0
 800e502:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_RL_Ty_Temp.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800e506:	4b57      	ldr	r3, [pc, #348]	; (800e664 <defaultDataInitialization+0x149c>)
 800e508:	2204      	movs	r2, #4
 800e50a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_RL_Ty_Temp.blinkingFrameEnable = 1;
 800e50e:	4b55      	ldr	r3, [pc, #340]	; (800e664 <defaultDataInitialization+0x149c>)
 800e510:	2201      	movs	r2, #1
 800e512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_RL_Ty_Temp.blinkingBackEnable = 1;
 800e516:	4b53      	ldr	r3, [pc, #332]	; (800e664 <defaultDataInitialization+0x149c>)
 800e518:	2201      	movs	r2, #1
 800e51a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_RL_Ty_Temp.blinkingOverColor = GUI_RED;
 800e51e:	4b51      	ldr	r3, [pc, #324]	; (800e664 <defaultDataInitialization+0x149c>)
 800e520:	22ff      	movs	r2, #255	; 0xff
 800e522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_RL_Ty_Temp.blinkingUnderColor = GUI_RED;
 800e526:	4b4f      	ldr	r3, [pc, #316]	; (800e664 <defaultDataInitialization+0x149c>)
 800e528:	22ff      	movs	r2, #255	; 0xff
 800e52a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_RL_Ty_Temp.lastExeTime = 0;
 800e52e:	4b4d      	ldr	r3, [pc, #308]	; (800e664 <defaultDataInitialization+0x149c>)
 800e530:	2200      	movs	r2, #0
 800e532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c




	DriveSTD_RR_Ty_Temp.enable = ENABLE;
 800e536:	4b50      	ldr	r3, [pc, #320]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e538:	2201      	movs	r2, #1
 800e53a:	701a      	strb	r2, [r3, #0]

	DriveSTD_RR_Ty_Temp.string = "RR Ty T";
 800e53c:	4b4e      	ldr	r3, [pc, #312]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e53e:	4a4f      	ldr	r2, [pc, #316]	; (800e67c <defaultDataInitialization+0x14b4>)
 800e540:	605a      	str	r2, [r3, #4]
	DriveSTD_RR_Ty_Temp.intStr = "";
 800e542:	4b4d      	ldr	r3, [pc, #308]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e544:	4a49      	ldr	r2, [pc, #292]	; (800e66c <defaultDataInitialization+0x14a4>)
 800e546:	609a      	str	r2, [r3, #8]
	DriveSTD_RR_Ty_Temp.endStr = "";
 800e548:	4b4b      	ldr	r3, [pc, #300]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e54a:	4a48      	ldr	r2, [pc, #288]	; (800e66c <defaultDataInitialization+0x14a4>)
 800e54c:	60da      	str	r2, [r3, #12]

	DriveSTD_RR_Ty_Temp.dataPointer = &CAR_Data.tyresTemp[RR].floatData;
 800e54e:	4b4a      	ldr	r3, [pc, #296]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e550:	4a4b      	ldr	r2, [pc, #300]	; (800e680 <defaultDataInitialization+0x14b8>)
 800e552:	611a      	str	r2, [r3, #16]
	DriveSTD_RR_Ty_Temp.dataLogInt.number = 123;
 800e554:	4b48      	ldr	r3, [pc, #288]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e556:	227b      	movs	r2, #123	; 0x7b
 800e558:	615a      	str	r2, [r3, #20]
	DriveSTD_RR_Ty_Temp.dataLogFloat.number = 0.7;
 800e55a:	4947      	ldr	r1, [pc, #284]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e55c:	a33c      	add	r3, pc, #240	; (adr r3, 800e650 <defaultDataInitialization+0x1488>)
 800e55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e562:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_RR_Ty_Temp.decimalDigits = 1;
 800e566:	4b44      	ldr	r3, [pc, #272]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e568:	2201      	movs	r2, #1
 800e56a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_RR_Ty_Temp.textColor = PAGE_TEXT_COLOR;
 800e56e:	4b42      	ldr	r3, [pc, #264]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e570:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800e574:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_RR_Ty_Temp.dataColor = PAGE_DATA_COLOR;
 800e576:	4b40      	ldr	r3, [pc, #256]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e578:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800e57c:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_RR_Ty_Temp.backColor = PAGE_BACK_COLOR;
 800e57e:	4b3e      	ldr	r3, [pc, #248]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e580:	2200      	movs	r2, #0
 800e582:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_RR_Ty_Temp.frameColor = PAGE_BACK_COLOR;
 800e584:	4b3c      	ldr	r3, [pc, #240]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e586:	2200      	movs	r2, #0
 800e588:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_RR_Ty_Temp.dataType = DataLog_DataType_Float;
 800e58a:	4b3b      	ldr	r3, [pc, #236]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e58c:	2201      	movs	r2, #1
 800e58e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_RR_Ty_Temp.signEnable = DISABLE;
 800e592:	4b39      	ldr	r3, [pc, #228]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e594:	2200      	movs	r2, #0
 800e596:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_RR_Ty_Temp.valueControlEnable = DISABLE;
 800e59a:	4b37      	ldr	r3, [pc, #220]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e59c:	2200      	movs	r2, #0
 800e59e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_RR_Ty_Temp.maxValue = 0;
 800e5a2:	4b35      	ldr	r3, [pc, #212]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e5a4:	f04f 0200 	mov.w	r2, #0
 800e5a8:	651a      	str	r2, [r3, #80]	; 0x50
	DriveSTD_RR_Ty_Temp.minValue = 0;
 800e5aa:	4b33      	ldr	r3, [pc, #204]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e5ac:	f04f 0200 	mov.w	r2, #0
 800e5b0:	655a      	str	r2, [r3, #84]	; 0x54
	DriveSTD_RR_Ty_Temp.millisValueOver = millis;
 800e5b2:	4b2a      	ldr	r3, [pc, #168]	; (800e65c <defaultDataInitialization+0x1494>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	4a30      	ldr	r2, [pc, #192]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e5b8:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_RR_Ty_Temp.minTimeValueOver = DEFAULT_MIN_TIME_VALUE_OVER;
 800e5ba:	4b2f      	ldr	r3, [pc, #188]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e5bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e5c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_RR_Ty_Temp.dataRefreshDelay = 0;
 800e5c4:	4b2c      	ldr	r3, [pc, #176]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_RR_Ty_Temp.dataRefreshMillis = 0;
 800e5cc:	4b2a      	ldr	r3, [pc, #168]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_RR_Ty_Temp.receivedDataControlEnable = ENABLE;
 800e5d2:	4b29      	ldr	r3, [pc, #164]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	DriveSTD_RR_Ty_Temp.lastTimeData = &CAR_Data.tyresTemp[RR].lastTimeData;
 800e5da:	4b27      	ldr	r3, [pc, #156]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e5dc:	4a29      	ldr	r2, [pc, #164]	; (800e684 <defaultDataInitialization+0x14bc>)
 800e5de:	66da      	str	r2, [r3, #108]	; 0x6c
	DriveSTD_RR_Ty_Temp.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800e5e0:	4b25      	ldr	r3, [pc, #148]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e5e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e5e6:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_RR_Ty_Temp.blinkingMillis = 0;
 800e5ea:	4b23      	ldr	r3, [pc, #140]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_RR_Ty_Temp.blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800e5f0:	4b21      	ldr	r3, [pc, #132]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e5f2:	22fa      	movs	r2, #250	; 0xfa
 800e5f4:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_RR_Ty_Temp.blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800e5f8:	4b1f      	ldr	r3, [pc, #124]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e5fa:	22fa      	movs	r2, #250	; 0xfa
 800e5fc:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_RR_Ty_Temp.blinkingStatus = 0;
 800e600:	4b1d      	ldr	r3, [pc, #116]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e602:	2200      	movs	r2, #0
 800e604:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_RR_Ty_Temp.blinkingState = 0;
 800e608:	4b1b      	ldr	r3, [pc, #108]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e60a:	2200      	movs	r2, #0
 800e60c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_RR_Ty_Temp.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800e610:	4b19      	ldr	r3, [pc, #100]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e612:	2204      	movs	r2, #4
 800e614:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_RR_Ty_Temp.blinkingFrameEnable = 1;
 800e618:	4b17      	ldr	r3, [pc, #92]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e61a:	2201      	movs	r2, #1
 800e61c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_RR_Ty_Temp.blinkingBackEnable = 1;
 800e620:	4b15      	ldr	r3, [pc, #84]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e622:	2201      	movs	r2, #1
 800e624:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_RR_Ty_Temp.blinkingOverColor = GUI_RED;
 800e628:	4b13      	ldr	r3, [pc, #76]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e62a:	22ff      	movs	r2, #255	; 0xff
 800e62c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_RR_Ty_Temp.blinkingUnderColor = GUI_RED;
 800e630:	4b11      	ldr	r3, [pc, #68]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e632:	22ff      	movs	r2, #255	; 0xff
 800e634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_RR_Ty_Temp.lastExeTime = 0;
 800e638:	4b0f      	ldr	r3, [pc, #60]	; (800e678 <defaultDataInitialization+0x14b0>)
 800e63a:	2200      	movs	r2, #0
 800e63c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c




	DriveSTD_FL_Ty_Temp.enable = ENABLE;
 800e640:	4b11      	ldr	r3, [pc, #68]	; (800e688 <defaultDataInitialization+0x14c0>)
 800e642:	2201      	movs	r2, #1
 800e644:	701a      	strb	r2, [r3, #0]

	DriveSTD_FL_Ty_Temp.string = "FL Ty T";
 800e646:	4b10      	ldr	r3, [pc, #64]	; (800e688 <defaultDataInitialization+0x14c0>)
 800e648:	4a10      	ldr	r2, [pc, #64]	; (800e68c <defaultDataInitialization+0x14c4>)
 800e64a:	605a      	str	r2, [r3, #4]
	DriveSTD_FL_Ty_Temp.intStr = "";
 800e64c:	4b0e      	ldr	r3, [pc, #56]	; (800e688 <defaultDataInitialization+0x14c0>)
 800e64e:	e01f      	b.n	800e690 <defaultDataInitialization+0x14c8>
 800e650:	66666666 	.word	0x66666666
 800e654:	3fe66666 	.word	0x3fe66666
 800e658:	200066c8 	.word	0x200066c8
 800e65c:	20006a98 	.word	0x20006a98
 800e660:	20000528 	.word	0x20000528
 800e664:	20006758 	.word	0x20006758
 800e668:	080226a4 	.word	0x080226a4
 800e66c:	0802261c 	.word	0x0802261c
 800e670:	20000a70 	.word	0x20000a70
 800e674:	20000a80 	.word	0x20000a80
 800e678:	200067e8 	.word	0x200067e8
 800e67c:	080226ac 	.word	0x080226ac
 800e680:	20000abc 	.word	0x20000abc
 800e684:	20000acc 	.word	0x20000acc
 800e688:	20006878 	.word	0x20006878
 800e68c:	080226b4 	.word	0x080226b4
 800e690:	4a87      	ldr	r2, [pc, #540]	; (800e8b0 <defaultDataInitialization+0x16e8>)
 800e692:	609a      	str	r2, [r3, #8]
	DriveSTD_FL_Ty_Temp.endStr = "";
 800e694:	4b87      	ldr	r3, [pc, #540]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e696:	4a86      	ldr	r2, [pc, #536]	; (800e8b0 <defaultDataInitialization+0x16e8>)
 800e698:	60da      	str	r2, [r3, #12]

	DriveSTD_FL_Ty_Temp.dataPointer = &CAR_Data.tyresTemp[FL].floatData;
 800e69a:	4b86      	ldr	r3, [pc, #536]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e69c:	4a86      	ldr	r2, [pc, #536]	; (800e8b8 <defaultDataInitialization+0x16f0>)
 800e69e:	611a      	str	r2, [r3, #16]
	DriveSTD_FL_Ty_Temp.dataLogInt.number = 123;
 800e6a0:	4b84      	ldr	r3, [pc, #528]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e6a2:	227b      	movs	r2, #123	; 0x7b
 800e6a4:	615a      	str	r2, [r3, #20]
	DriveSTD_FL_Ty_Temp.dataLogFloat.number = 0.7;
 800e6a6:	4983      	ldr	r1, [pc, #524]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e6a8:	a37f      	add	r3, pc, #508	; (adr r3, 800e8a8 <defaultDataInitialization+0x16e0>)
 800e6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ae:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_FL_Ty_Temp.decimalDigits = 1;
 800e6b2:	4b80      	ldr	r3, [pc, #512]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_FL_Ty_Temp.textColor = PAGE_TEXT_COLOR;
 800e6ba:	4b7e      	ldr	r3, [pc, #504]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e6bc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800e6c0:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_FL_Ty_Temp.dataColor = PAGE_DATA_COLOR;
 800e6c2:	4b7c      	ldr	r3, [pc, #496]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e6c4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800e6c8:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_FL_Ty_Temp.backColor = PAGE_BACK_COLOR;
 800e6ca:	4b7a      	ldr	r3, [pc, #488]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_FL_Ty_Temp.frameColor = PAGE_BACK_COLOR;
 800e6d0:	4b78      	ldr	r3, [pc, #480]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_FL_Ty_Temp.dataType = DataLog_DataType_Float;
 800e6d6:	4b77      	ldr	r3, [pc, #476]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e6d8:	2201      	movs	r2, #1
 800e6da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_FL_Ty_Temp.signEnable = DISABLE;
 800e6de:	4b75      	ldr	r3, [pc, #468]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_FL_Ty_Temp.valueControlEnable = DISABLE;
 800e6e6:	4b73      	ldr	r3, [pc, #460]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_FL_Ty_Temp.maxValue = 0;
 800e6ee:	4b71      	ldr	r3, [pc, #452]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e6f0:	f04f 0200 	mov.w	r2, #0
 800e6f4:	651a      	str	r2, [r3, #80]	; 0x50
	DriveSTD_FL_Ty_Temp.minValue = 0;
 800e6f6:	4b6f      	ldr	r3, [pc, #444]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e6f8:	f04f 0200 	mov.w	r2, #0
 800e6fc:	655a      	str	r2, [r3, #84]	; 0x54
	DriveSTD_FL_Ty_Temp.millisValueOver = millis;
 800e6fe:	4b6f      	ldr	r3, [pc, #444]	; (800e8bc <defaultDataInitialization+0x16f4>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	4a6c      	ldr	r2, [pc, #432]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e704:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_FL_Ty_Temp.minTimeValueOver = DEFAULT_MIN_TIME_VALUE_OVER;
 800e706:	4b6b      	ldr	r3, [pc, #428]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e70c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_FL_Ty_Temp.dataRefreshDelay = 0;
 800e710:	4b68      	ldr	r3, [pc, #416]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e712:	2200      	movs	r2, #0
 800e714:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_FL_Ty_Temp.dataRefreshMillis = 0;
 800e718:	4b66      	ldr	r3, [pc, #408]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e71a:	2200      	movs	r2, #0
 800e71c:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_FL_Ty_Temp.receivedDataControlEnable = ENABLE;
 800e71e:	4b65      	ldr	r3, [pc, #404]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e720:	2201      	movs	r2, #1
 800e722:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	DriveSTD_FL_Ty_Temp.lastTimeData = &CAR_Data.tyresTemp[FL].lastTimeData;
 800e726:	4b63      	ldr	r3, [pc, #396]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e728:	4a65      	ldr	r2, [pc, #404]	; (800e8c0 <defaultDataInitialization+0x16f8>)
 800e72a:	66da      	str	r2, [r3, #108]	; 0x6c
	DriveSTD_FL_Ty_Temp.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800e72c:	4b61      	ldr	r3, [pc, #388]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e72e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e732:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_FL_Ty_Temp.blinkingMillis = 0;
 800e736:	4b5f      	ldr	r3, [pc, #380]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e738:	2200      	movs	r2, #0
 800e73a:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_FL_Ty_Temp.blinkingDelayOver = DEFAULT_BLINK_DELAY_OVER;
 800e73c:	4b5d      	ldr	r3, [pc, #372]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e73e:	22fa      	movs	r2, #250	; 0xfa
 800e740:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_FL_Ty_Temp.blinkingDelayUnder = DEFAULT_BLINK_DELAY_UNDER;
 800e744:	4b5b      	ldr	r3, [pc, #364]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e746:	22fa      	movs	r2, #250	; 0xfa
 800e748:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_FL_Ty_Temp.blinkingStatus = 0;
 800e74c:	4b59      	ldr	r3, [pc, #356]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e74e:	2200      	movs	r2, #0
 800e750:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_FL_Ty_Temp.blinkingState = 0;
 800e754:	4b57      	ldr	r3, [pc, #348]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e756:	2200      	movs	r2, #0
 800e758:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_FL_Ty_Temp.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800e75c:	4b55      	ldr	r3, [pc, #340]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e75e:	2204      	movs	r2, #4
 800e760:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_FL_Ty_Temp.blinkingFrameEnable = 1;
 800e764:	4b53      	ldr	r3, [pc, #332]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e766:	2201      	movs	r2, #1
 800e768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_FL_Ty_Temp.blinkingBackEnable = 1;
 800e76c:	4b51      	ldr	r3, [pc, #324]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e76e:	2201      	movs	r2, #1
 800e770:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_FL_Ty_Temp.blinkingOverColor = GUI_RED;
 800e774:	4b4f      	ldr	r3, [pc, #316]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e776:	22ff      	movs	r2, #255	; 0xff
 800e778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_FL_Ty_Temp.blinkingUnderColor = GUI_RED;
 800e77c:	4b4d      	ldr	r3, [pc, #308]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e77e:	22ff      	movs	r2, #255	; 0xff
 800e780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_FL_Ty_Temp.lastExeTime = 0;
 800e784:	4b4b      	ldr	r3, [pc, #300]	; (800e8b4 <defaultDataInitialization+0x16ec>)
 800e786:	2200      	movs	r2, #0
 800e788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c




	DriveSTD_FR_Ty_Temp.enable = ENABLE;
 800e78c:	4b4d      	ldr	r3, [pc, #308]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e78e:	2201      	movs	r2, #1
 800e790:	701a      	strb	r2, [r3, #0]

	DriveSTD_FR_Ty_Temp.string = "FR Ty T";
 800e792:	4b4c      	ldr	r3, [pc, #304]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e794:	4a4c      	ldr	r2, [pc, #304]	; (800e8c8 <defaultDataInitialization+0x1700>)
 800e796:	605a      	str	r2, [r3, #4]
	DriveSTD_FR_Ty_Temp.intStr = "";
 800e798:	4b4a      	ldr	r3, [pc, #296]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e79a:	4a45      	ldr	r2, [pc, #276]	; (800e8b0 <defaultDataInitialization+0x16e8>)
 800e79c:	609a      	str	r2, [r3, #8]
	DriveSTD_FR_Ty_Temp.endStr = "";
 800e79e:	4b49      	ldr	r3, [pc, #292]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e7a0:	4a43      	ldr	r2, [pc, #268]	; (800e8b0 <defaultDataInitialization+0x16e8>)
 800e7a2:	60da      	str	r2, [r3, #12]

	DriveSTD_FR_Ty_Temp.dataPointer = &CAR_Data.tyresTemp[FR].floatData;
 800e7a4:	4b47      	ldr	r3, [pc, #284]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e7a6:	4a49      	ldr	r2, [pc, #292]	; (800e8cc <defaultDataInitialization+0x1704>)
 800e7a8:	611a      	str	r2, [r3, #16]
	DriveSTD_FR_Ty_Temp.dataLogInt.number = 123;
 800e7aa:	4b46      	ldr	r3, [pc, #280]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e7ac:	227b      	movs	r2, #123	; 0x7b
 800e7ae:	615a      	str	r2, [r3, #20]
	DriveSTD_FR_Ty_Temp.dataLogFloat.number = 0.7;
 800e7b0:	4944      	ldr	r1, [pc, #272]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e7b2:	a33d      	add	r3, pc, #244	; (adr r3, 800e8a8 <defaultDataInitialization+0x16e0>)
 800e7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b8:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DriveSTD_FR_Ty_Temp.decimalDigits = 1;
 800e7bc:	4b41      	ldr	r3, [pc, #260]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e7be:	2201      	movs	r2, #1
 800e7c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DriveSTD_FR_Ty_Temp.textColor = PAGE_TEXT_COLOR;
 800e7c4:	4b3f      	ldr	r3, [pc, #252]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e7c6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800e7ca:	63da      	str	r2, [r3, #60]	; 0x3c
	DriveSTD_FR_Ty_Temp.dataColor = PAGE_DATA_COLOR;
 800e7cc:	4b3d      	ldr	r3, [pc, #244]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e7ce:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800e7d2:	641a      	str	r2, [r3, #64]	; 0x40
	DriveSTD_FR_Ty_Temp.backColor = PAGE_BACK_COLOR;
 800e7d4:	4b3b      	ldr	r3, [pc, #236]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	645a      	str	r2, [r3, #68]	; 0x44
	DriveSTD_FR_Ty_Temp.frameColor = PAGE_BACK_COLOR;
 800e7da:	4b3a      	ldr	r3, [pc, #232]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e7dc:	2200      	movs	r2, #0
 800e7de:	649a      	str	r2, [r3, #72]	; 0x48

	DriveSTD_FR_Ty_Temp.dataType = DataLog_DataType_Float;
 800e7e0:	4b38      	ldr	r3, [pc, #224]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	DriveSTD_FR_Ty_Temp.signEnable = DISABLE;
 800e7e8:	4b36      	ldr	r3, [pc, #216]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	DriveSTD_FR_Ty_Temp.valueControlEnable = DISABLE;
 800e7f0:	4b34      	ldr	r3, [pc, #208]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	DriveSTD_FR_Ty_Temp.maxValue = 0;
 800e7f8:	4b32      	ldr	r3, [pc, #200]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e7fa:	f04f 0200 	mov.w	r2, #0
 800e7fe:	651a      	str	r2, [r3, #80]	; 0x50
	DriveSTD_FR_Ty_Temp.minValue = 0;
 800e800:	4b30      	ldr	r3, [pc, #192]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e802:	f04f 0200 	mov.w	r2, #0
 800e806:	655a      	str	r2, [r3, #84]	; 0x54
	DriveSTD_FR_Ty_Temp.millisValueOver = millis;
 800e808:	4b2c      	ldr	r3, [pc, #176]	; (800e8bc <defaultDataInitialization+0x16f4>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	4a2d      	ldr	r2, [pc, #180]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e80e:	6593      	str	r3, [r2, #88]	; 0x58
	DriveSTD_FR_Ty_Temp.minTimeValueOver = DEFAULT_MIN_TIME_VALUE_OVER;
 800e810:	4b2c      	ldr	r3, [pc, #176]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e812:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e816:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	DriveSTD_FR_Ty_Temp.dataRefreshDelay = 0;
 800e81a:	4b2a      	ldr	r3, [pc, #168]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e81c:	2200      	movs	r2, #0
 800e81e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DriveSTD_FR_Ty_Temp.dataRefreshMillis = 0;
 800e822:	4b28      	ldr	r3, [pc, #160]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e824:	2200      	movs	r2, #0
 800e826:	665a      	str	r2, [r3, #100]	; 0x64

	DriveSTD_FR_Ty_Temp.receivedDataControlEnable = ENABLE;
 800e828:	4b26      	ldr	r3, [pc, #152]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e82a:	2201      	movs	r2, #1
 800e82c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	DriveSTD_FR_Ty_Temp.lastTimeData = &CAR_Data.tyresTemp[FR].lastTimeData;
 800e830:	4b24      	ldr	r3, [pc, #144]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e832:	4a27      	ldr	r2, [pc, #156]	; (800e8d0 <defaultDataInitialization+0x1708>)
 800e834:	66da      	str	r2, [r3, #108]	; 0x6c
	DriveSTD_FR_Ty_Temp.noDataErrorTimerValue = DEFAULT_NO_DATA_ERROR_DELAY;
 800e836:	4b23      	ldr	r3, [pc, #140]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e838:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e83c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	DriveSTD_FR_Ty_Temp.blinkingMillis = 0;
 800e840:	4b20      	ldr	r3, [pc, #128]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e842:	2200      	movs	r2, #0
 800e844:	675a      	str	r2, [r3, #116]	; 0x74
	DriveSTD_FR_Ty_Temp.blinkingDelayOver = NO_BLINK_DELAY;
 800e846:	4b1f      	ldr	r3, [pc, #124]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e848:	f242 7210 	movw	r2, #10000	; 0x2710
 800e84c:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	DriveSTD_FR_Ty_Temp.blinkingDelayUnder = NO_BLINK_DELAY;
 800e850:	4b1c      	ldr	r3, [pc, #112]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e852:	f242 7210 	movw	r2, #10000	; 0x2710
 800e856:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	DriveSTD_FR_Ty_Temp.blinkingStatus = 0;
 800e85a:	4b1a      	ldr	r3, [pc, #104]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e85c:	2200      	movs	r2, #0
 800e85e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DriveSTD_FR_Ty_Temp.blinkingState = 0;
 800e862:	4b18      	ldr	r3, [pc, #96]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e864:	2200      	movs	r2, #0
 800e866:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	DriveSTD_FR_Ty_Temp.blinkingFrameSize = DEFAULT_BLINKING_FRAME_SIZE;
 800e86a:	4b16      	ldr	r3, [pc, #88]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e86c:	2204      	movs	r2, #4
 800e86e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	DriveSTD_FR_Ty_Temp.blinkingFrameEnable = 1;
 800e872:	4b14      	ldr	r3, [pc, #80]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e874:	2201      	movs	r2, #1
 800e876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	DriveSTD_FR_Ty_Temp.blinkingBackEnable = 1;
 800e87a:	4b12      	ldr	r3, [pc, #72]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e87c:	2201      	movs	r2, #1
 800e87e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	DriveSTD_FR_Ty_Temp.blinkingOverColor = GUI_GREEN;
 800e882:	4b10      	ldr	r3, [pc, #64]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e884:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800e888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	DriveSTD_FR_Ty_Temp.blinkingUnderColor = GUI_RED;
 800e88c:	4b0d      	ldr	r3, [pc, #52]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e88e:	22ff      	movs	r2, #255	; 0xff
 800e890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	DriveSTD_FR_Ty_Temp.lastExeTime = 0;
 800e894:	4b0b      	ldr	r3, [pc, #44]	; (800e8c4 <defaultDataInitialization+0x16fc>)
 800e896:	2200      	movs	r2, #0
 800e898:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 800e89c:	bf00      	nop
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a4:	4770      	bx	lr
 800e8a6:	bf00      	nop
 800e8a8:	66666666 	.word	0x66666666
 800e8ac:	3fe66666 	.word	0x3fe66666
 800e8b0:	0802261c 	.word	0x0802261c
 800e8b4:	20006878 	.word	0x20006878
 800e8b8:	20000b08 	.word	0x20000b08
 800e8bc:	20006a98 	.word	0x20006a98
 800e8c0:	20000b18 	.word	0x20000b18
 800e8c4:	20006908 	.word	0x20006908
 800e8c8:	080226bc 	.word	0x080226bc
 800e8cc:	20000b54 	.word	0x20000b54
 800e8d0:	20000b64 	.word	0x20000b64

0800e8d4 <Display_DriveSTD>:


uint8_t Display_DriveSTD_Initialized = 0;

void Display_DriveSTD(DisplayGui_DataGuiTypeDef *data, uint32_t frameColor)
{
 800e8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8d6:	b09f      	sub	sp, #124	; 0x7c
 800e8d8:	af0a      	add	r7, sp, #40	; 0x28
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	60b9      	str	r1, [r7, #8]
	static uint32_t guiLastMillis = 0;

	static uint32_t millisBlinkClock = 0;
	static uint8_t  blinkClockState = 0;

	if(initializationFlag == 0)
 800e8de:	4bb0      	ldr	r3, [pc, #704]	; (800eba0 <Display_DriveSTD+0x2cc>)
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d109      	bne.n	800e8fa <Display_DriveSTD+0x26>
	{
		rectInitialization();
 800e8e6:	f7fe fb25 	bl	800cf34 <rectInitialization>
		defaultDataInitialization();
 800e8ea:	f7fe fc6d 	bl	800d1c8 <defaultDataInitialization>

		initializationFlag = 1;
 800e8ee:	4bac      	ldr	r3, [pc, #688]	; (800eba0 <Display_DriveSTD+0x2cc>)
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	701a      	strb	r2, [r3, #0]
		Display_DriveSTD_Initialized = 1;
 800e8f4:	4bab      	ldr	r3, [pc, #684]	; (800eba4 <Display_DriveSTD+0x2d0>)
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	701a      	strb	r2, [r3, #0]
	}


	if(millis >= millisBlinkClock + blinkColckPeriod)
 800e8fa:	4bab      	ldr	r3, [pc, #684]	; (800eba8 <Display_DriveSTD+0x2d4>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800e902:	4baa      	ldr	r3, [pc, #680]	; (800ebac <Display_DriveSTD+0x2d8>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	429a      	cmp	r2, r3
 800e908:	d80f      	bhi.n	800e92a <Display_DriveSTD+0x56>
	{
		millisBlinkClock += blinkColckPeriod;
 800e90a:	4ba7      	ldr	r3, [pc, #668]	; (800eba8 <Display_DriveSTD+0x2d4>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	33fa      	adds	r3, #250	; 0xfa
 800e910:	4aa5      	ldr	r2, [pc, #660]	; (800eba8 <Display_DriveSTD+0x2d4>)
 800e912:	6013      	str	r3, [r2, #0]

		if(blinkClockState != 0)
 800e914:	4ba6      	ldr	r3, [pc, #664]	; (800ebb0 <Display_DriveSTD+0x2dc>)
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d003      	beq.n	800e924 <Display_DriveSTD+0x50>
			blinkClockState = 0;
 800e91c:	4ba4      	ldr	r3, [pc, #656]	; (800ebb0 <Display_DriveSTD+0x2dc>)
 800e91e:	2200      	movs	r2, #0
 800e920:	701a      	strb	r2, [r3, #0]
 800e922:	e002      	b.n	800e92a <Display_DriveSTD+0x56>
		else
			blinkClockState = 1;
 800e924:	4ba2      	ldr	r3, [pc, #648]	; (800ebb0 <Display_DriveSTD+0x2dc>)
 800e926:	2201      	movs	r2, #1
 800e928:	701a      	strb	r2, [r3, #0]
	}

//CORE FUNCTION BEGIN

	int xt = 0;
 800e92a:	2300      	movs	r3, #0
 800e92c:	633b      	str	r3, [r7, #48]	; 0x30
	int yt = 0 ;
 800e92e:	2300      	movs	r3, #0
 800e930:	62fb      	str	r3, [r7, #44]	; 0x2c


	// RPM BAR BEGIN

	//Display_OldRpmBar_STD(CAR_Data.rpm.intData);
	Display_OldRpmBar(3, 23 + 10, 474, 20 + 10, CAR_Data.rpm.intData, 0, 5500, 10500, 12500);
 800e932:	4ba0      	ldr	r3, [pc, #640]	; (800ebb4 <Display_DriveSTD+0x2e0>)
 800e934:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800e938:	b29b      	uxth	r3, r3
 800e93a:	f243 02d4 	movw	r2, #12500	; 0x30d4
 800e93e:	9204      	str	r2, [sp, #16]
 800e940:	f642 1204 	movw	r2, #10500	; 0x2904
 800e944:	9203      	str	r2, [sp, #12]
 800e946:	f241 527c 	movw	r2, #5500	; 0x157c
 800e94a:	9202      	str	r2, [sp, #8]
 800e94c:	2200      	movs	r2, #0
 800e94e:	9201      	str	r2, [sp, #4]
 800e950:	9300      	str	r3, [sp, #0]
 800e952:	231e      	movs	r3, #30
 800e954:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 800e958:	2121      	movs	r1, #33	; 0x21
 800e95a:	2003      	movs	r0, #3
 800e95c:	f001 fc9c 	bl	8010298 <Display_OldRpmBar>

	// GEAR BEGIN

	static uint8_t gear_old = 0;

	if(millis - guiLastMillis >= 100 || gear_old != CAR_Data.gear.intData)// || (CAR_Data.rpm.intData >= RPM_GREEN_MIN && CAR_Data.rpm.intData <= RPM_GREEN_MAX) || CAR_Data.rpm.intData > RPM_RED)
 800e960:	4b92      	ldr	r3, [pc, #584]	; (800ebac <Display_DriveSTD+0x2d8>)
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	4b94      	ldr	r3, [pc, #592]	; (800ebb8 <Display_DriveSTD+0x2e4>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	1ad3      	subs	r3, r2, r3
 800e96a:	2b63      	cmp	r3, #99	; 0x63
 800e96c:	d808      	bhi.n	800e980 <Display_DriveSTD+0xac>
 800e96e:	4b93      	ldr	r3, [pc, #588]	; (800ebbc <Display_DriveSTD+0x2e8>)
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	461a      	mov	r2, r3
 800e974:	4b8f      	ldr	r3, [pc, #572]	; (800ebb4 <Display_DriveSTD+0x2e0>)
 800e976:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e97a:	429a      	cmp	r2, r3
 800e97c:	f000 809a 	beq.w	800eab4 <Display_DriveSTD+0x1e0>
	{
		int16_t gearOffsetY = 0;
 800e980:	2300      	movs	r3, #0
 800e982:	857b      	strh	r3, [r7, #42]	; 0x2a

		if(gear_old != CAR_Data.gear.intData && (GEARBOX_COLOR_ENABLE == 0))
 800e984:	4b8d      	ldr	r3, [pc, #564]	; (800ebbc <Display_DriveSTD+0x2e8>)
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	461a      	mov	r2, r3
 800e98a:	4b8a      	ldr	r3, [pc, #552]	; (800ebb4 <Display_DriveSTD+0x2e0>)
 800e98c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e990:	429a      	cmp	r2, r3
 800e992:	d00e      	beq.n	800e9b2 <Display_DriveSTD+0xde>
		{
			GUI_SetColor(GUI_BLACK);
 800e994:	2000      	movs	r0, #0
 800e996:	f00e f9c9 	bl	801cd2c <GUI_SetColor>
			GUI_FillRect(193, 87 + gearOffsetY, 288, 207 + gearOffsetY);
 800e99a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e99e:	f103 0157 	add.w	r1, r3, #87	; 0x57
 800e9a2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e9a6:	33cf      	adds	r3, #207	; 0xcf
 800e9a8:	f44f 7290 	mov.w	r2, #288	; 0x120
 800e9ac:	20c1      	movs	r0, #193	; 0xc1
 800e9ae:	f00e fac7 	bl	801cf40 <GUI_FillRect>

		}

#elif HQ_GEARBOX_ENABLE == 1 && GEARBOX_COLOR_ENABLE == 0

		switch(CAR_Data.gear.intData)
 800e9b2:	4b80      	ldr	r3, [pc, #512]	; (800ebb4 <Display_DriveSTD+0x2e0>)
 800e9b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e9b8:	2b04      	cmp	r3, #4
 800e9ba:	d866      	bhi.n	800ea8a <Display_DriveSTD+0x1b6>
 800e9bc:	a201      	add	r2, pc, #4	; (adr r2, 800e9c4 <Display_DriveSTD+0xf0>)
 800e9be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9c2:	bf00      	nop
 800e9c4:	0800e9d9 	.word	0x0800e9d9
 800e9c8:	0800e9fb 	.word	0x0800e9fb
 800e9cc:	0800ea1f 	.word	0x0800ea1f
 800e9d0:	0800ea43 	.word	0x0800ea43
 800e9d4:	0800ea67 	.word	0x0800ea67
		{
			case 0:
				GUI_DrawBitmap(&bmGEARBOX_N_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 6, 88 + gearOffsetY);
 800e9d8:	4b79      	ldr	r3, [pc, #484]	; (800ebc0 <Display_DriveSTD+0x2ec>)
 800e9da:	881b      	ldrh	r3, [r3, #0]
 800e9dc:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	da00      	bge.n	800e9e6 <Display_DriveSTD+0x112>
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	105b      	asrs	r3, r3, #1
 800e9e8:	1d99      	adds	r1, r3, #6
 800e9ea:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e9ee:	3358      	adds	r3, #88	; 0x58
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	4874      	ldr	r0, [pc, #464]	; (800ebc4 <Display_DriveSTD+0x2f0>)
 800e9f4:	f00f f852 	bl	801da9c <GUI_DrawBitmap>
				break;
 800e9f8:	e056      	b.n	800eaa8 <Display_DriveSTD+0x1d4>

			case 1:
				GUI_DrawBitmap(&bmGEARBOX_1_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 15, 90 + gearOffsetY);
 800e9fa:	4b71      	ldr	r3, [pc, #452]	; (800ebc0 <Display_DriveSTD+0x2ec>)
 800e9fc:	881b      	ldrh	r3, [r3, #0]
 800e9fe:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	da00      	bge.n	800ea08 <Display_DriveSTD+0x134>
 800ea06:	3301      	adds	r3, #1
 800ea08:	105b      	asrs	r3, r3, #1
 800ea0a:	f103 010f 	add.w	r1, r3, #15
 800ea0e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800ea12:	335a      	adds	r3, #90	; 0x5a
 800ea14:	461a      	mov	r2, r3
 800ea16:	486c      	ldr	r0, [pc, #432]	; (800ebc8 <Display_DriveSTD+0x2f4>)
 800ea18:	f00f f840 	bl	801da9c <GUI_DrawBitmap>
				break;
 800ea1c:	e044      	b.n	800eaa8 <Display_DriveSTD+0x1d4>

			case 2:
				GUI_DrawBitmap(&bmGEARBOX_2_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 13, 90 + gearOffsetY);
 800ea1e:	4b68      	ldr	r3, [pc, #416]	; (800ebc0 <Display_DriveSTD+0x2ec>)
 800ea20:	881b      	ldrh	r3, [r3, #0]
 800ea22:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	da00      	bge.n	800ea2c <Display_DriveSTD+0x158>
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	105b      	asrs	r3, r3, #1
 800ea2e:	f103 010d 	add.w	r1, r3, #13
 800ea32:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800ea36:	335a      	adds	r3, #90	; 0x5a
 800ea38:	461a      	mov	r2, r3
 800ea3a:	4864      	ldr	r0, [pc, #400]	; (800ebcc <Display_DriveSTD+0x2f8>)
 800ea3c:	f00f f82e 	bl	801da9c <GUI_DrawBitmap>
				break;
 800ea40:	e032      	b.n	800eaa8 <Display_DriveSTD+0x1d4>

			case 3:
				GUI_DrawBitmap(&bmGEARBOX_3_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 15, 90 + gearOffsetY);
 800ea42:	4b5f      	ldr	r3, [pc, #380]	; (800ebc0 <Display_DriveSTD+0x2ec>)
 800ea44:	881b      	ldrh	r3, [r3, #0]
 800ea46:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	da00      	bge.n	800ea50 <Display_DriveSTD+0x17c>
 800ea4e:	3301      	adds	r3, #1
 800ea50:	105b      	asrs	r3, r3, #1
 800ea52:	f103 010f 	add.w	r1, r3, #15
 800ea56:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800ea5a:	335a      	adds	r3, #90	; 0x5a
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	485c      	ldr	r0, [pc, #368]	; (800ebd0 <Display_DriveSTD+0x2fc>)
 800ea60:	f00f f81c 	bl	801da9c <GUI_DrawBitmap>
				break;
 800ea64:	e020      	b.n	800eaa8 <Display_DriveSTD+0x1d4>

			case 4:
				GUI_DrawBitmap(&bmGEARBOX_4_116_Gray255, (480 - bmGEARBOX_N.XSize)/2 + 9, 90 + gearOffsetY);
 800ea66:	4b56      	ldr	r3, [pc, #344]	; (800ebc0 <Display_DriveSTD+0x2ec>)
 800ea68:	881b      	ldrh	r3, [r3, #0]
 800ea6a:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	da00      	bge.n	800ea74 <Display_DriveSTD+0x1a0>
 800ea72:	3301      	adds	r3, #1
 800ea74:	105b      	asrs	r3, r3, #1
 800ea76:	f103 0109 	add.w	r1, r3, #9
 800ea7a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800ea7e:	335a      	adds	r3, #90	; 0x5a
 800ea80:	461a      	mov	r2, r3
 800ea82:	4854      	ldr	r0, [pc, #336]	; (800ebd4 <Display_DriveSTD+0x300>)
 800ea84:	f00f f80a 	bl	801da9c <GUI_DrawBitmap>
				break;
 800ea88:	e00e      	b.n	800eaa8 <Display_DriveSTD+0x1d4>

			default:
				GUI_SetColor(GUI_RED);
 800ea8a:	20ff      	movs	r0, #255	; 0xff
 800ea8c:	f00e f94e 	bl	801cd2c <GUI_SetColor>
				GUI_FillRect(193, 87 + gearOffsetY, 288, 207 + gearOffsetY);
 800ea90:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800ea94:	f103 0157 	add.w	r1, r3, #87	; 0x57
 800ea98:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800ea9c:	33cf      	adds	r3, #207	; 0xcf
 800ea9e:	f44f 7290 	mov.w	r2, #288	; 0x120
 800eaa2:	20c1      	movs	r0, #193	; 0xc1
 800eaa4:	f00e fa4c 	bl	801cf40 <GUI_FillRect>

#endif

		//GUI_SetBkColor(GUI_BLACK);

		gear_old = CAR_Data.gear.intData;
 800eaa8:	4b42      	ldr	r3, [pc, #264]	; (800ebb4 <Display_DriveSTD+0x2e0>)
 800eaaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800eaae:	b2da      	uxtb	r2, r3
 800eab0:	4b42      	ldr	r3, [pc, #264]	; (800ebbc <Display_DriveSTD+0x2e8>)
 800eab2:	701a      	strb	r2, [r3, #0]
	// RPM BEGIN

	static uint16_t rpm_old = 0;
	static uint8_t pageCall = 0;		//used to avoid a bag showing six zero at the rpm number

	xt = 480 / 2 - 50 + 2;
 800eab4:	23c0      	movs	r3, #192	; 0xc0
 800eab6:	633b      	str	r3, [r7, #48]	; 0x30
	yt = 40 + 4;
 800eab8:	232c      	movs	r3, #44	; 0x2c
 800eaba:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(rpm_old >= 10000 && CAR_Data.rpm.intData < 10000)
 800eabc:	4b46      	ldr	r3, [pc, #280]	; (800ebd8 <Display_DriveSTD+0x304>)
 800eabe:	881b      	ldrh	r3, [r3, #0]
 800eac0:	f242 720f 	movw	r2, #9999	; 0x270f
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d915      	bls.n	800eaf4 <Display_DriveSTD+0x220>
 800eac8:	4b3a      	ldr	r3, [pc, #232]	; (800ebb4 <Display_DriveSTD+0x2e0>)
 800eaca:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800eace:	f242 720f 	movw	r2, #9999	; 0x270f
 800ead2:	4293      	cmp	r3, r2
 800ead4:	dc0e      	bgt.n	800eaf4 <Display_DriveSTD+0x220>
	{
		GUI_SetColor(GUI_BLACK);
 800ead6:	2000      	movs	r0, #0
 800ead8:	f00e f928 	bl	801cd2c <GUI_SetColor>
		GUI_FillRect(xt - 14, yt - 2, xt + 110, yt + 32);
 800eadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eade:	f1a3 000e 	sub.w	r0, r3, #14
 800eae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae4:	1e99      	subs	r1, r3, #2
 800eae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae8:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 800eaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaee:	3320      	adds	r3, #32
 800eaf0:	f00e fa26 	bl	801cf40 <GUI_FillRect>
	}

	GUI_SetColor(GUI_WHITE);
 800eaf4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800eaf8:	f00e f918 	bl	801cd2c <GUI_SetColor>
	GUI_SetFont(&GUI_FontD32);
 800eafc:	4837      	ldr	r0, [pc, #220]	; (800ebdc <Display_DriveSTD+0x308>)
 800eafe:	f00e f8e7 	bl	801ccd0 <GUI_SetFont>


	if(CAR_Data.rpm.intData >= RPM_GREEN_MIN && CAR_Data.rpm.intData <= RPM_GREEN_MAX)
 800eb02:	4b2c      	ldr	r3, [pc, #176]	; (800ebb4 <Display_DriveSTD+0x2e0>)
 800eb04:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800eb08:	f642 22f7 	movw	r2, #10999	; 0x2af7
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	dd0b      	ble.n	800eb28 <Display_DriveSTD+0x254>
 800eb10:	4b28      	ldr	r3, [pc, #160]	; (800ebb4 <Display_DriveSTD+0x2e0>)
 800eb12:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800eb16:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	dc04      	bgt.n	800eb28 <Display_DriveSTD+0x254>
		GUI_SetColor(GUI_GREEN);
 800eb1e:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 800eb22:	f00e f903 	bl	801cd2c <GUI_SetColor>
 800eb26:	e009      	b.n	800eb3c <Display_DriveSTD+0x268>
	else if (CAR_Data.rpm.intData >= RPM_GREEN_MAX)
 800eb28:	4b22      	ldr	r3, [pc, #136]	; (800ebb4 <Display_DriveSTD+0x2e0>)
 800eb2a:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800eb2e:	f642 62df 	movw	r2, #11999	; 0x2edf
 800eb32:	4293      	cmp	r3, r2
 800eb34:	dd02      	ble.n	800eb3c <Display_DriveSTD+0x268>
		GUI_SetColor(GUI_RED);
 800eb36:	20ff      	movs	r0, #255	; 0xff
 800eb38:	f00e f8f8 	bl	801cd2c <GUI_SetColor>

	if(pageCall > 1)					//used to avoid a bag showing six zero at the rpm number
 800eb3c:	4b28      	ldr	r3, [pc, #160]	; (800ebe0 <Display_DriveSTD+0x30c>)
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d95d      	bls.n	800ec00 <Display_DriveSTD+0x32c>
	{
		if(CAR_Data.rpm.intData < 10000)
 800eb44:	4b1b      	ldr	r3, [pc, #108]	; (800ebb4 <Display_DriveSTD+0x2e0>)
 800eb46:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800eb4a:	f242 720f 	movw	r2, #9999	; 0x270f
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	dc48      	bgt.n	800ebe4 <Display_DriveSTD+0x310>
		{
			if(millis - CAR_Data.rpm.lastTimeData > 500)
 800eb52:	4b16      	ldr	r3, [pc, #88]	; (800ebac <Display_DriveSTD+0x2d8>)
 800eb54:	681a      	ldr	r2, [r3, #0]
 800eb56:	4b17      	ldr	r3, [pc, #92]	; (800ebb4 <Display_DriveSTD+0x2e0>)
 800eb58:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 800eb5c:	1ad3      	subs	r3, r2, r3
 800eb5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800eb62:	d912      	bls.n	800eb8a <Display_DriveSTD+0x2b6>
			{
				GUI_SetColor(GUI_RED);
 800eb64:	20ff      	movs	r0, #255	; 0xff
 800eb66:	f00e f8e1 	bl	801cd2c <GUI_SetColor>
				xt-= 12;
 800eb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6c:	3b0c      	subs	r3, #12
 800eb6e:	633b      	str	r3, [r7, #48]	; 0x30
				GUI_DispDecAt(0, xt, yt, 5);
 800eb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb72:	b219      	sxth	r1, r3
 800eb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb76:	b21a      	sxth	r2, r3
 800eb78:	2305      	movs	r3, #5
 800eb7a:	2000      	movs	r0, #0
 800eb7c:	f00d ffe6 	bl	801cb4c <GUI_DispDecAt>
				rpm_old = rpm_max * 2;
 800eb80:	4b15      	ldr	r3, [pc, #84]	; (800ebd8 <Display_DriveSTD+0x304>)
 800eb82:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800eb86:	801a      	strh	r2, [r3, #0]
 800eb88:	e040      	b.n	800ec0c <Display_DriveSTD+0x338>
			}
			else
				GUI_DispDecAt(CAR_Data.rpm.intData, xt, yt, 4);
 800eb8a:	4b0a      	ldr	r3, [pc, #40]	; (800ebb4 <Display_DriveSTD+0x2e0>)
 800eb8c:	f8d3 0230 	ldr.w	r0, [r3, #560]	; 0x230
 800eb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb92:	b219      	sxth	r1, r3
 800eb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb96:	b21a      	sxth	r2, r3
 800eb98:	2304      	movs	r3, #4
 800eb9a:	f00d ffd7 	bl	801cb4c <GUI_DispDecAt>
 800eb9e:	e035      	b.n	800ec0c <Display_DriveSTD+0x338>
 800eba0:	20006999 	.word	0x20006999
 800eba4:	20006998 	.word	0x20006998
 800eba8:	2000699c 	.word	0x2000699c
 800ebac:	20006a98 	.word	0x20006a98
 800ebb0:	200069a0 	.word	0x200069a0
 800ebb4:	2000041c 	.word	0x2000041c
 800ebb8:	200069a4 	.word	0x200069a4
 800ebbc:	200069a8 	.word	0x200069a8
 800ebc0:	0802c314 	.word	0x0802c314
 800ebc4:	0802eea0 	.word	0x0802eea0
 800ebc8:	08024a3c 	.word	0x08024a3c
 800ebcc:	08026efc 	.word	0x08026efc
 800ebd0:	08029348 	.word	0x08029348
 800ebd4:	0802bc90 	.word	0x0802bc90
 800ebd8:	200069aa 	.word	0x200069aa
 800ebdc:	08120990 	.word	0x08120990
 800ebe0:	200069ac 	.word	0x200069ac
		}
		else
		{
			xt-= 14;
 800ebe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe6:	3b0e      	subs	r3, #14
 800ebe8:	633b      	str	r3, [r7, #48]	; 0x30
			GUI_DispDecAt(CAR_Data.rpm.intData, xt, yt, 5);
 800ebea:	4bb4      	ldr	r3, [pc, #720]	; (800eebc <Display_DriveSTD+0x5e8>)
 800ebec:	f8d3 0230 	ldr.w	r0, [r3, #560]	; 0x230
 800ebf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf2:	b219      	sxth	r1, r3
 800ebf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf6:	b21a      	sxth	r2, r3
 800ebf8:	2305      	movs	r3, #5
 800ebfa:	f00d ffa7 	bl	801cb4c <GUI_DispDecAt>
 800ebfe:	e005      	b.n	800ec0c <Display_DriveSTD+0x338>
		}
	}
	else
	{
		pageCall++;
 800ec00:	4baf      	ldr	r3, [pc, #700]	; (800eec0 <Display_DriveSTD+0x5ec>)
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	3301      	adds	r3, #1
 800ec06:	b2da      	uxtb	r2, r3
 800ec08:	4bad      	ldr	r3, [pc, #692]	; (800eec0 <Display_DriveSTD+0x5ec>)
 800ec0a:	701a      	strb	r2, [r3, #0]
	}

	rpm_old = CAR_Data.rpm.intData;
 800ec0c:	4bab      	ldr	r3, [pc, #684]	; (800eebc <Display_DriveSTD+0x5e8>)
 800ec0e:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800ec12:	b29a      	uxth	r2, r3
 800ec14:	4bab      	ldr	r3, [pc, #684]	; (800eec4 <Display_DriveSTD+0x5f0>)
 800ec16:	801a      	strh	r2, [r3, #0]

	// RPM END

	//data test begin

	GUI_SetColor(GUI_WHITE);
 800ec18:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800ec1c:	f00e f886 	bl	801cd2c <GUI_SetColor>
	GUI_SetBkColor(GUI_BLACK);
 800ec20:	2000      	movs	r0, #0
 800ec22:	f00e f881 	bl	801cd28 <GUI_SetBkColor>
	GUI_SetFont(&DriveSTD_TextFont);
 800ec26:	48a8      	ldr	r0, [pc, #672]	; (800eec8 <Display_DriveSTD+0x5f4>)
 800ec28:	f00e f852 	bl	801ccd0 <GUI_SetFont>
	GUI_SetTextAlign(GUI_TA_HCENTER);
 800ec2c:	2002      	movs	r0, #2
 800ec2e:	f00e f845 	bl	801ccbc <GUI_SetTextAlign>
	//data test end

	static uint8_t noDataDetectedClear[20] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};


	for(uint8_t rect = 0; rect < 13; rect++)
 800ec32:	2300      	movs	r3, #0
 800ec34:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ec38:	f001 ba9d 	b.w	8010176 <Display_DriveSTD+0x18a2>
	{
		if(data[rect].enable != ENABLE)
 800ec3c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ec40:	4613      	mov	r3, r2
 800ec42:	00db      	lsls	r3, r3, #3
 800ec44:	4413      	add	r3, r2
 800ec46:	011b      	lsls	r3, r3, #4
 800ec48:	461a      	mov	r2, r3
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	4413      	add	r3, r2
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	f041 828a 	bne.w	801016a <Display_DriveSTD+0x1896>
			goto END_OF_FOR;

		uint16_t x = pageRectPositions[rect].xVertex1 + (pageRectPositions[rect].xVertex2 - pageRectPositions[rect].xVertex1)/2;
 800ec56:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ec5a:	4a9c      	ldr	r2, [pc, #624]	; (800eecc <Display_DriveSTD+0x5f8>)
 800ec5c:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 800ec60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ec64:	4999      	ldr	r1, [pc, #612]	; (800eecc <Display_DriveSTD+0x5f8>)
 800ec66:	00db      	lsls	r3, r3, #3
 800ec68:	440b      	add	r3, r1
 800ec6a:	889b      	ldrh	r3, [r3, #4]
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ec72:	4996      	ldr	r1, [pc, #600]	; (800eecc <Display_DriveSTD+0x5f8>)
 800ec74:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800ec78:	1ac3      	subs	r3, r0, r3
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	da00      	bge.n	800ec80 <Display_DriveSTD+0x3ac>
 800ec7e:	3301      	adds	r3, #1
 800ec80:	105b      	asrs	r3, r3, #1
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	4413      	add	r3, r2
 800ec86:	853b      	strh	r3, [r7, #40]	; 0x28
		uint16_t y = pageRectPositions[rect].yVertex1 + 4;//(pageRectPositions[rect].yVertex2 - pageRectPositions[rect].yVertex1)/4;
 800ec88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ec8c:	4a8f      	ldr	r2, [pc, #572]	; (800eecc <Display_DriveSTD+0x5f8>)
 800ec8e:	00db      	lsls	r3, r3, #3
 800ec90:	4413      	add	r3, r2
 800ec92:	885b      	ldrh	r3, [r3, #2]
 800ec94:	3304      	adds	r3, #4
 800ec96:	84fb      	strh	r3, [r7, #38]	; 0x26

		if(data[rect].receivedDataControlEnable == ENABLE)
 800ec98:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ec9c:	4613      	mov	r3, r2
 800ec9e:	00db      	lsls	r3, r3, #3
 800eca0:	4413      	add	r3, r2
 800eca2:	011b      	lsls	r3, r3, #4
 800eca4:	461a      	mov	r2, r3
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	4413      	add	r3, r2
 800ecaa:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800ecae:	2b01      	cmp	r3, #1
 800ecb0:	f040 8114 	bne.w	800eedc <Display_DriveSTD+0x608>
		{
			if(millis - *data[rect].lastTimeData > data[rect].noDataErrorTimerValue)
 800ecb4:	4b86      	ldr	r3, [pc, #536]	; (800eed0 <Display_DriveSTD+0x5fc>)
 800ecb6:	6819      	ldr	r1, [r3, #0]
 800ecb8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ecbc:	4613      	mov	r3, r2
 800ecbe:	00db      	lsls	r3, r3, #3
 800ecc0:	4413      	add	r3, r2
 800ecc2:	011b      	lsls	r3, r3, #4
 800ecc4:	461a      	mov	r2, r3
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	4413      	add	r3, r2
 800ecca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	1ac9      	subs	r1, r1, r3
 800ecd0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ecd4:	4613      	mov	r3, r2
 800ecd6:	00db      	lsls	r3, r3, #3
 800ecd8:	4413      	add	r3, r2
 800ecda:	011b      	lsls	r3, r3, #4
 800ecdc:	461a      	mov	r2, r3
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	4413      	add	r3, r2
 800ece2:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800ece6:	4299      	cmp	r1, r3
 800ece8:	f240 80f8 	bls.w	800eedc <Display_DriveSTD+0x608>
			{
				GUI_SetColor(data[rect].backColor);
 800ecec:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	00db      	lsls	r3, r3, #3
 800ecf4:	4413      	add	r3, r2
 800ecf6:	011b      	lsls	r3, r3, #4
 800ecf8:	461a      	mov	r2, r3
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	4413      	add	r3, r2
 800ecfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed00:	4618      	mov	r0, r3
 800ed02:	f00e f813 	bl	801cd2c <GUI_SetColor>

				if(data[rect].blinkingBackEnable && (data[rect].blinkingState != 0  || data[rect].blinkingStateOld != 0))
 800ed06:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ed0a:	4613      	mov	r3, r2
 800ed0c:	00db      	lsls	r3, r3, #3
 800ed0e:	4413      	add	r3, r2
 800ed10:	011b      	lsls	r3, r3, #4
 800ed12:	461a      	mov	r2, r3
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	4413      	add	r3, r2
 800ed18:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d04e      	beq.n	800edbe <Display_DriveSTD+0x4ea>
 800ed20:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ed24:	4613      	mov	r3, r2
 800ed26:	00db      	lsls	r3, r3, #3
 800ed28:	4413      	add	r3, r2
 800ed2a:	011b      	lsls	r3, r3, #4
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	4413      	add	r3, r2
 800ed32:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d10c      	bne.n	800ed54 <Display_DriveSTD+0x480>
 800ed3a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ed3e:	4613      	mov	r3, r2
 800ed40:	00db      	lsls	r3, r3, #3
 800ed42:	4413      	add	r3, r2
 800ed44:	011b      	lsls	r3, r3, #4
 800ed46:	461a      	mov	r2, r3
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	4413      	add	r3, r2
 800ed4c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d034      	beq.n	800edbe <Display_DriveSTD+0x4ea>
				{
					//GUI_SetColor(data[rect].backColor);
					GUI_FillRect(pageRectPositions[rect].xVertex1, pageRectPositions[rect].yVertex1, pageRectPositions[rect].xVertex2, pageRectPositions[rect].yVertex2);
 800ed54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed58:	4a5c      	ldr	r2, [pc, #368]	; (800eecc <Display_DriveSTD+0x5f8>)
 800ed5a:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed64:	4a59      	ldr	r2, [pc, #356]	; (800eecc <Display_DriveSTD+0x5f8>)
 800ed66:	00db      	lsls	r3, r3, #3
 800ed68:	4413      	add	r3, r2
 800ed6a:	885b      	ldrh	r3, [r3, #2]
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed72:	4a56      	ldr	r2, [pc, #344]	; (800eecc <Display_DriveSTD+0x5f8>)
 800ed74:	00db      	lsls	r3, r3, #3
 800ed76:	4413      	add	r3, r2
 800ed78:	889b      	ldrh	r3, [r3, #4]
 800ed7a:	461c      	mov	r4, r3
 800ed7c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed80:	4a52      	ldr	r2, [pc, #328]	; (800eecc <Display_DriveSTD+0x5f8>)
 800ed82:	00db      	lsls	r3, r3, #3
 800ed84:	4413      	add	r3, r2
 800ed86:	88db      	ldrh	r3, [r3, #6]
 800ed88:	4622      	mov	r2, r4
 800ed8a:	f00e f8d9 	bl	801cf40 <GUI_FillRect>

					data[rect].blinkingState = 0;
 800ed8e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ed92:	4613      	mov	r3, r2
 800ed94:	00db      	lsls	r3, r3, #3
 800ed96:	4413      	add	r3, r2
 800ed98:	011b      	lsls	r3, r3, #4
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	4413      	add	r3, r2
 800eda0:	2200      	movs	r2, #0
 800eda2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
					data[rect].blinkingStateOld = 0;
 800eda6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800edaa:	4613      	mov	r3, r2
 800edac:	00db      	lsls	r3, r3, #3
 800edae:	4413      	add	r3, r2
 800edb0:	011b      	lsls	r3, r3, #4
 800edb2:	461a      	mov	r2, r3
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	4413      	add	r3, r2
 800edb8:	2200      	movs	r2, #0
 800edba:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
				}

				//GUI_SetColor(data[rect].backColor);
				GUI_FillRect(x - 46, y + 18, x + 46, y + 24);
 800edbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800edc0:	f1a3 002e 	sub.w	r0, r3, #46	; 0x2e
 800edc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800edc6:	f103 0112 	add.w	r1, r3, #18
 800edca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800edcc:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 800edd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800edd2:	3318      	adds	r3, #24
 800edd4:	f00e f8b4 	bl	801cf40 <GUI_FillRect>
				GUI_FillRect(x - 46, y + 44, x + 46, y + 55);
 800edd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800edda:	f1a3 002e 	sub.w	r0, r3, #46	; 0x2e
 800edde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ede0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800ede4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ede6:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 800edea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800edec:	3337      	adds	r3, #55	; 0x37
 800edee:	f00e f8a7 	bl	801cf40 <GUI_FillRect>

				GUI_SetColor(data[rect].textColor);
 800edf2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800edf6:	4613      	mov	r3, r2
 800edf8:	00db      	lsls	r3, r3, #3
 800edfa:	4413      	add	r3, r2
 800edfc:	011b      	lsls	r3, r3, #4
 800edfe:	461a      	mov	r2, r3
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	4413      	add	r3, r2
 800ee04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee06:	4618      	mov	r0, r3
 800ee08:	f00d ff90 	bl	801cd2c <GUI_SetColor>
				GUI_SetBkColor(data[rect].backColor);
 800ee0c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ee10:	4613      	mov	r3, r2
 800ee12:	00db      	lsls	r3, r3, #3
 800ee14:	4413      	add	r3, r2
 800ee16:	011b      	lsls	r3, r3, #4
 800ee18:	461a      	mov	r2, r3
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	4413      	add	r3, r2
 800ee1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee20:	4618      	mov	r0, r3
 800ee22:	f00d ff81 	bl	801cd28 <GUI_SetBkColor>
				GUI_SetFont(&DriveSTD_TextFont);
 800ee26:	4828      	ldr	r0, [pc, #160]	; (800eec8 <Display_DriveSTD+0x5f4>)
 800ee28:	f00d ff52 	bl	801ccd0 <GUI_SetFont>
				GUI_SetTextAlign(GUI_TA_HCENTER);
 800ee2c:	2002      	movs	r0, #2
 800ee2e:	f00d ff45 	bl	801ccbc <GUI_SetTextAlign>

				GUI_DispStringAt(data[rect].string, x, y);
 800ee32:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ee36:	4613      	mov	r3, r2
 800ee38:	00db      	lsls	r3, r3, #3
 800ee3a:	4413      	add	r3, r2
 800ee3c:	011b      	lsls	r3, r3, #4
 800ee3e:	461a      	mov	r2, r3
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	4413      	add	r3, r2
 800ee44:	685b      	ldr	r3, [r3, #4]
 800ee46:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800ee48:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f00e fe4c 	bl	801dae8 <GUI_DispStringAt>


				if(data[rect].backColor == GUI_RED)
 800ee50:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ee54:	4613      	mov	r3, r2
 800ee56:	00db      	lsls	r3, r3, #3
 800ee58:	4413      	add	r3, r2
 800ee5a:	011b      	lsls	r3, r3, #4
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	4413      	add	r3, r2
 800ee62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee64:	2bff      	cmp	r3, #255	; 0xff
 800ee66:	d104      	bne.n	800ee72 <Display_DriveSTD+0x59e>
					GUI_SetColor(GUI_GREEN);
 800ee68:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 800ee6c:	f00d ff5e 	bl	801cd2c <GUI_SetColor>
 800ee70:	e002      	b.n	800ee78 <Display_DriveSTD+0x5a4>
				else
					GUI_SetColor(GUI_RED);
 800ee72:	20ff      	movs	r0, #255	; 0xff
 800ee74:	f00d ff5a 	bl	801cd2c <GUI_SetColor>

				GUI_SetBkColor(data[rect].backColor);
 800ee78:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ee7c:	4613      	mov	r3, r2
 800ee7e:	00db      	lsls	r3, r3, #3
 800ee80:	4413      	add	r3, r2
 800ee82:	011b      	lsls	r3, r3, #4
 800ee84:	461a      	mov	r2, r3
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	4413      	add	r3, r2
 800ee8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f00d ff4b 	bl	801cd28 <GUI_SetBkColor>
				GUI_SetFont(&DriveSTD_BigTextFont);
 800ee92:	480d      	ldr	r0, [pc, #52]	; (800eec8 <Display_DriveSTD+0x5f4>)
 800ee94:	f00d ff1c 	bl	801ccd0 <GUI_SetFont>
				GUI_SetTextAlign(GUI_TA_HCENTER);
 800ee98:	2002      	movs	r0, #2
 800ee9a:	f00d ff0f 	bl	801ccbc <GUI_SetTextAlign>

				GUI_DispStringAt("NO DATA", x, y + 25);
 800ee9e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800eea0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eea2:	3319      	adds	r3, #25
 800eea4:	461a      	mov	r2, r3
 800eea6:	480b      	ldr	r0, [pc, #44]	; (800eed4 <Display_DriveSTD+0x600>)
 800eea8:	f00e fe1e 	bl	801dae8 <GUI_DispStringAt>

				noDataDetectedClear[rect] = 1;
 800eeac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eeb0:	4a09      	ldr	r2, [pc, #36]	; (800eed8 <Display_DriveSTD+0x604>)
 800eeb2:	2101      	movs	r1, #1
 800eeb4:	54d1      	strb	r1, [r2, r3]

				goto END_OF_FOR;
 800eeb6:	f001 b959 	b.w	801016c <Display_DriveSTD+0x1898>
 800eeba:	bf00      	nop
 800eebc:	2000041c 	.word	0x2000041c
 800eec0:	200069ac 	.word	0x200069ac
 800eec4:	200069aa 	.word	0x200069aa
 800eec8:	080db4e0 	.word	0x080db4e0
 800eecc:	20005ddc 	.word	0x20005ddc
 800eed0:	20006a98 	.word	0x20006a98
 800eed4:	080226c4 	.word	0x080226c4
 800eed8:	200069b0 	.word	0x200069b0
			}
		}

		if(noDataDetectedClear[rect] != 0)
 800eedc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eee0:	4a92      	ldr	r2, [pc, #584]	; (800f12c <Display_DriveSTD+0x858>)
 800eee2:	5cd3      	ldrb	r3, [r2, r3]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d02e      	beq.n	800ef46 <Display_DriveSTD+0x672>
		{
			GUI_SetColor(data[rect].backColor);
 800eee8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800eeec:	4613      	mov	r3, r2
 800eeee:	00db      	lsls	r3, r3, #3
 800eef0:	4413      	add	r3, r2
 800eef2:	011b      	lsls	r3, r3, #4
 800eef4:	461a      	mov	r2, r3
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	4413      	add	r3, r2
 800eefa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eefc:	4618      	mov	r0, r3
 800eefe:	f00d ff15 	bl	801cd2c <GUI_SetColor>
			GUI_FillRect(pageRectPositions[rect].xVertex1, pageRectPositions[rect].yVertex1, pageRectPositions[rect].xVertex2, pageRectPositions[rect].yVertex2);
 800ef02:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef06:	4a8a      	ldr	r2, [pc, #552]	; (800f130 <Display_DriveSTD+0x85c>)
 800ef08:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef12:	4a87      	ldr	r2, [pc, #540]	; (800f130 <Display_DriveSTD+0x85c>)
 800ef14:	00db      	lsls	r3, r3, #3
 800ef16:	4413      	add	r3, r2
 800ef18:	885b      	ldrh	r3, [r3, #2]
 800ef1a:	4619      	mov	r1, r3
 800ef1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef20:	4a83      	ldr	r2, [pc, #524]	; (800f130 <Display_DriveSTD+0x85c>)
 800ef22:	00db      	lsls	r3, r3, #3
 800ef24:	4413      	add	r3, r2
 800ef26:	889b      	ldrh	r3, [r3, #4]
 800ef28:	461c      	mov	r4, r3
 800ef2a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef2e:	4a80      	ldr	r2, [pc, #512]	; (800f130 <Display_DriveSTD+0x85c>)
 800ef30:	00db      	lsls	r3, r3, #3
 800ef32:	4413      	add	r3, r2
 800ef34:	88db      	ldrh	r3, [r3, #6]
 800ef36:	4622      	mov	r2, r4
 800ef38:	f00e f802 	bl	801cf40 <GUI_FillRect>

			noDataDetectedClear[rect] = 0;
 800ef3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef40:	4a7a      	ldr	r2, [pc, #488]	; (800f12c <Display_DriveSTD+0x858>)
 800ef42:	2100      	movs	r1, #0
 800ef44:	54d1      	strb	r1, [r2, r3]
		}

		uint8_t dataError = 0;
 800ef46:	2300      	movs	r3, #0
 800ef48:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

		uint8_t dataInRange = 1;
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


		uint32_t textColor = data[rect].textColor;
 800ef52:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ef56:	4613      	mov	r3, r2
 800ef58:	00db      	lsls	r3, r3, #3
 800ef5a:	4413      	add	r3, r2
 800ef5c:	011b      	lsls	r3, r3, #4
 800ef5e:	461a      	mov	r2, r3
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	4413      	add	r3, r2
 800ef64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef66:	64bb      	str	r3, [r7, #72]	; 0x48
		uint32_t dataColor = data[rect].dataColor;
 800ef68:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ef6c:	4613      	mov	r3, r2
 800ef6e:	00db      	lsls	r3, r3, #3
 800ef70:	4413      	add	r3, r2
 800ef72:	011b      	lsls	r3, r3, #4
 800ef74:	461a      	mov	r2, r3
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	4413      	add	r3, r2
 800ef7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef7c:	623b      	str	r3, [r7, #32]
		uint32_t backColor = data[rect].backColor;
 800ef7e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ef82:	4613      	mov	r3, r2
 800ef84:	00db      	lsls	r3, r3, #3
 800ef86:	4413      	add	r3, r2
 800ef88:	011b      	lsls	r3, r3, #4
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	4413      	add	r3, r2
 800ef90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef92:	647b      	str	r3, [r7, #68]	; 0x44
		uint32_t frameColor = data[rect].frameColor;
 800ef94:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ef98:	4613      	mov	r3, r2
 800ef9a:	00db      	lsls	r3, r3, #3
 800ef9c:	4413      	add	r3, r2
 800ef9e:	011b      	lsls	r3, r3, #4
 800efa0:	461a      	mov	r2, r3
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	4413      	add	r3, r2
 800efa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efa8:	643b      	str	r3, [r7, #64]	; 0x40

		if(textColor == backColor || dataColor == backColor)
 800efaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800efac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efae:	429a      	cmp	r2, r3
 800efb0:	d003      	beq.n	800efba <Display_DriveSTD+0x6e6>
 800efb2:	6a3a      	ldr	r2, [r7, #32]
 800efb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d102      	bne.n	800efc0 <Display_DriveSTD+0x6ec>
			dataError = 1;
 800efba:	2301      	movs	r3, #1
 800efbc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e


		//data in range check
		if(data[rect].valueControlEnable) //&& data[rect].maxValue != data[rect].minValue)
 800efc0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800efc4:	4613      	mov	r3, r2
 800efc6:	00db      	lsls	r3, r3, #3
 800efc8:	4413      	add	r3, r2
 800efca:	011b      	lsls	r3, r3, #4
 800efcc:	461a      	mov	r2, r3
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	4413      	add	r3, r2
 800efd2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	f000 8145 	beq.w	800f266 <Display_DriveSTD+0x992>
		{
			float tempDatacheck;

			if(data[rect].dataType == DataLog_DataType_Int)
 800efdc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800efe0:	4613      	mov	r3, r2
 800efe2:	00db      	lsls	r3, r3, #3
 800efe4:	4413      	add	r3, r2
 800efe6:	011b      	lsls	r3, r3, #4
 800efe8:	461a      	mov	r2, r3
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	4413      	add	r3, r2
 800efee:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d149      	bne.n	800f08a <Display_DriveSTD+0x7b6>
			{
				if(data[rect].dataRefreshDelay == 0 || millis >= data[rect].dataRefreshMillis + data[rect].dataRefreshDelay)
 800eff6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800effa:	4613      	mov	r3, r2
 800effc:	00db      	lsls	r3, r3, #3
 800effe:	4413      	add	r3, r2
 800f000:	011b      	lsls	r3, r3, #4
 800f002:	461a      	mov	r2, r3
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	4413      	add	r3, r2
 800f008:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d019      	beq.n	800f044 <Display_DriveSTD+0x770>
 800f010:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f014:	4613      	mov	r3, r2
 800f016:	00db      	lsls	r3, r3, #3
 800f018:	4413      	add	r3, r2
 800f01a:	011b      	lsls	r3, r3, #4
 800f01c:	461a      	mov	r2, r3
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	4413      	add	r3, r2
 800f022:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800f024:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f028:	4613      	mov	r3, r2
 800f02a:	00db      	lsls	r3, r3, #3
 800f02c:	4413      	add	r3, r2
 800f02e:	011b      	lsls	r3, r3, #4
 800f030:	461a      	mov	r2, r3
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	4413      	add	r3, r2
 800f036:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f03a:	18ca      	adds	r2, r1, r3
 800f03c:	4b3d      	ldr	r3, [pc, #244]	; (800f134 <Display_DriveSTD+0x860>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	429a      	cmp	r2, r3
 800f042:	d811      	bhi.n	800f068 <Display_DriveSTD+0x794>
					tempDatacheck = *((int32_t*) data[rect].dataPointer);
 800f044:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f048:	4613      	mov	r3, r2
 800f04a:	00db      	lsls	r3, r3, #3
 800f04c:	4413      	add	r3, r2
 800f04e:	011b      	lsls	r3, r3, #4
 800f050:	461a      	mov	r2, r3
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	4413      	add	r3, r2
 800f056:	691b      	ldr	r3, [r3, #16]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	ee07 3a90 	vmov	s15, r3
 800f05e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f062:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800f066:	e06a      	b.n	800f13e <Display_DriveSTD+0x86a>
				else
					tempDatacheck = data[rect].dataLogInt.number;
 800f068:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f06c:	4613      	mov	r3, r2
 800f06e:	00db      	lsls	r3, r3, #3
 800f070:	4413      	add	r3, r2
 800f072:	011b      	lsls	r3, r3, #4
 800f074:	461a      	mov	r2, r3
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	4413      	add	r3, r2
 800f07a:	695b      	ldr	r3, [r3, #20]
 800f07c:	ee07 3a90 	vmov	s15, r3
 800f080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f084:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800f088:	e059      	b.n	800f13e <Display_DriveSTD+0x86a>
			}
			else if(data[rect].dataType == DataLog_DataType_Float)
 800f08a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f08e:	4613      	mov	r3, r2
 800f090:	00db      	lsls	r3, r3, #3
 800f092:	4413      	add	r3, r2
 800f094:	011b      	lsls	r3, r3, #4
 800f096:	461a      	mov	r2, r3
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	4413      	add	r3, r2
 800f09c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f0a0:	2b01      	cmp	r3, #1
 800f0a2:	d149      	bne.n	800f138 <Display_DriveSTD+0x864>
			{
				if(data[rect].dataRefreshDelay == 0 || millis >= data[rect].dataRefreshMillis + data[rect].dataRefreshDelay)
 800f0a4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f0a8:	4613      	mov	r3, r2
 800f0aa:	00db      	lsls	r3, r3, #3
 800f0ac:	4413      	add	r3, r2
 800f0ae:	011b      	lsls	r3, r3, #4
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	4413      	add	r3, r2
 800f0b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d019      	beq.n	800f0f2 <Display_DriveSTD+0x81e>
 800f0be:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f0c2:	4613      	mov	r3, r2
 800f0c4:	00db      	lsls	r3, r3, #3
 800f0c6:	4413      	add	r3, r2
 800f0c8:	011b      	lsls	r3, r3, #4
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	4413      	add	r3, r2
 800f0d0:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800f0d2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f0d6:	4613      	mov	r3, r2
 800f0d8:	00db      	lsls	r3, r3, #3
 800f0da:	4413      	add	r3, r2
 800f0dc:	011b      	lsls	r3, r3, #4
 800f0de:	461a      	mov	r2, r3
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	4413      	add	r3, r2
 800f0e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0e8:	18ca      	adds	r2, r1, r3
 800f0ea:	4b12      	ldr	r3, [pc, #72]	; (800f134 <Display_DriveSTD+0x860>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d80c      	bhi.n	800f10c <Display_DriveSTD+0x838>
					tempDatacheck = *((float*) data[rect].dataPointer);
 800f0f2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f0f6:	4613      	mov	r3, r2
 800f0f8:	00db      	lsls	r3, r3, #3
 800f0fa:	4413      	add	r3, r2
 800f0fc:	011b      	lsls	r3, r3, #4
 800f0fe:	461a      	mov	r2, r3
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	4413      	add	r3, r2
 800f104:	691b      	ldr	r3, [r3, #16]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f10a:	e018      	b.n	800f13e <Display_DriveSTD+0x86a>
				else
					tempDatacheck = data[rect].dataLogFloat.number;
 800f10c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f110:	4613      	mov	r3, r2
 800f112:	00db      	lsls	r3, r3, #3
 800f114:	4413      	add	r3, r2
 800f116:	011b      	lsls	r3, r3, #4
 800f118:	461a      	mov	r2, r3
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	4413      	add	r3, r2
 800f11e:	ed93 7b08 	vldr	d7, [r3, #32]
 800f122:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f126:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800f12a:	e008      	b.n	800f13e <Display_DriveSTD+0x86a>
 800f12c:	200069b0 	.word	0x200069b0
 800f130:	20005ddc 	.word	0x20005ddc
 800f134:	20006a98 	.word	0x20006a98
			}
			else
				dataError = 1;
 800f138:	2301      	movs	r3, #1
 800f13a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e


			if(tempDatacheck < data[rect].maxValue && tempDatacheck > data[rect].minValue)
 800f13e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f142:	4613      	mov	r3, r2
 800f144:	00db      	lsls	r3, r3, #3
 800f146:	4413      	add	r3, r2
 800f148:	011b      	lsls	r3, r3, #4
 800f14a:	461a      	mov	r2, r3
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	4413      	add	r3, r2
 800f150:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800f154:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f158:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f160:	d51d      	bpl.n	800f19e <Display_DriveSTD+0x8ca>
 800f162:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f166:	4613      	mov	r3, r2
 800f168:	00db      	lsls	r3, r3, #3
 800f16a:	4413      	add	r3, r2
 800f16c:	011b      	lsls	r3, r3, #4
 800f16e:	461a      	mov	r2, r3
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	4413      	add	r3, r2
 800f174:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800f178:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f17c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f184:	dd0b      	ble.n	800f19e <Display_DriveSTD+0x8ca>
			{
				data[rect].millisValueOver = millis;
 800f186:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f18a:	4613      	mov	r3, r2
 800f18c:	00db      	lsls	r3, r3, #3
 800f18e:	4413      	add	r3, r2
 800f190:	011b      	lsls	r3, r3, #4
 800f192:	461a      	mov	r2, r3
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	4413      	add	r3, r2
 800f198:	4acf      	ldr	r2, [pc, #828]	; (800f4d8 <Display_DriveSTD+0xc04>)
 800f19a:	6812      	ldr	r2, [r2, #0]
 800f19c:	659a      	str	r2, [r3, #88]	; 0x58
			}

			if(millis >= data[rect].millisValueOver + data[rect].minTimeValueOver || data[rect].minTimeValueOver == 0 || data[rect].blinkingStatus == 1)
 800f19e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f1a2:	4613      	mov	r3, r2
 800f1a4:	00db      	lsls	r3, r3, #3
 800f1a6:	4413      	add	r3, r2
 800f1a8:	011b      	lsls	r3, r3, #4
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	4413      	add	r3, r2
 800f1b0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800f1b2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f1b6:	4613      	mov	r3, r2
 800f1b8:	00db      	lsls	r3, r3, #3
 800f1ba:	4413      	add	r3, r2
 800f1bc:	011b      	lsls	r3, r3, #4
 800f1be:	461a      	mov	r2, r3
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	4413      	add	r3, r2
 800f1c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f1c8:	18ca      	adds	r2, r1, r3
 800f1ca:	4bc3      	ldr	r3, [pc, #780]	; (800f4d8 <Display_DriveSTD+0xc04>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d919      	bls.n	800f206 <Display_DriveSTD+0x932>
 800f1d2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f1d6:	4613      	mov	r3, r2
 800f1d8:	00db      	lsls	r3, r3, #3
 800f1da:	4413      	add	r3, r2
 800f1dc:	011b      	lsls	r3, r3, #4
 800f1de:	461a      	mov	r2, r3
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	4413      	add	r3, r2
 800f1e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d00c      	beq.n	800f206 <Display_DriveSTD+0x932>
 800f1ec:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f1f0:	4613      	mov	r3, r2
 800f1f2:	00db      	lsls	r3, r3, #3
 800f1f4:	4413      	add	r3, r2
 800f1f6:	011b      	lsls	r3, r3, #4
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	4413      	add	r3, r2
 800f1fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f202:	2b01      	cmp	r3, #1
 800f204:	d132      	bne.n	800f26c <Display_DriveSTD+0x998>
			{
				if(tempDatacheck > data[rect].maxValue)
 800f206:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f20a:	4613      	mov	r3, r2
 800f20c:	00db      	lsls	r3, r3, #3
 800f20e:	4413      	add	r3, r2
 800f210:	011b      	lsls	r3, r3, #4
 800f212:	461a      	mov	r2, r3
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	4413      	add	r3, r2
 800f218:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800f21c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f228:	dd03      	ble.n	800f232 <Display_DriveSTD+0x95e>
					dataInRange = 2;
 800f22a:	2302      	movs	r3, #2
 800f22c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800f230:	e01c      	b.n	800f26c <Display_DriveSTD+0x998>
				else if(tempDatacheck < data[rect].minValue)
 800f232:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f236:	4613      	mov	r3, r2
 800f238:	00db      	lsls	r3, r3, #3
 800f23a:	4413      	add	r3, r2
 800f23c:	011b      	lsls	r3, r3, #4
 800f23e:	461a      	mov	r2, r3
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	4413      	add	r3, r2
 800f244:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800f248:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f24c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f254:	d503      	bpl.n	800f25e <Display_DriveSTD+0x98a>
					dataInRange = 0;
 800f256:	2300      	movs	r3, #0
 800f258:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800f25c:	e006      	b.n	800f26c <Display_DriveSTD+0x998>
				else
					dataInRange = 1;
 800f25e:	2301      	movs	r3, #1
 800f260:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800f264:	e002      	b.n	800f26c <Display_DriveSTD+0x998>
			}
		}
		else
			dataInRange = 1;
 800f266:	2301      	movs	r3, #1
 800f268:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


		//blinking state

		uint8_t fixBlinkStateUnder = 0;
 800f26c:	2300      	movs	r3, #0
 800f26e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		uint8_t fixBlinkStateOver = 0;
 800f272:	2300      	movs	r3, #0
 800f274:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

		if(data[rect].blinkingDelayUnder > 5000)
 800f278:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f27c:	4613      	mov	r3, r2
 800f27e:	00db      	lsls	r3, r3, #3
 800f280:	4413      	add	r3, r2
 800f282:	011b      	lsls	r3, r3, #4
 800f284:	461a      	mov	r2, r3
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	4413      	add	r3, r2
 800f28a:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800f28e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f292:	4293      	cmp	r3, r2
 800f294:	d902      	bls.n	800f29c <Display_DriveSTD+0x9c8>
			fixBlinkStateUnder = 1;
 800f296:	2301      	movs	r3, #1
 800f298:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			//fixBlinkStateOver = 1;

		if(data[rect].blinkingDelayOver > 5000)
 800f29c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f2a0:	4613      	mov	r3, r2
 800f2a2:	00db      	lsls	r3, r3, #3
 800f2a4:	4413      	add	r3, r2
 800f2a6:	011b      	lsls	r3, r3, #4
 800f2a8:	461a      	mov	r2, r3
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	4413      	add	r3, r2
 800f2ae:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800f2b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d902      	bls.n	800f2c0 <Display_DriveSTD+0x9ec>
			fixBlinkStateOver = 1;
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			//fixBlinkStateUnder = 1;


		if(data[rect].blinkingDelayUnder < blinkColckPeriod && !fixBlinkStateUnder)
 800f2c0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f2c4:	4613      	mov	r3, r2
 800f2c6:	00db      	lsls	r3, r3, #3
 800f2c8:	4413      	add	r3, r2
 800f2ca:	011b      	lsls	r3, r3, #4
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800f2d6:	2bf9      	cmp	r3, #249	; 0xf9
 800f2d8:	d80f      	bhi.n	800f2fa <Display_DriveSTD+0xa26>
 800f2da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d10b      	bne.n	800f2fa <Display_DriveSTD+0xa26>
			data[rect].blinkingDelayUnder = blinkColckPeriod;
 800f2e2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f2e6:	4613      	mov	r3, r2
 800f2e8:	00db      	lsls	r3, r3, #3
 800f2ea:	4413      	add	r3, r2
 800f2ec:	011b      	lsls	r3, r3, #4
 800f2ee:	461a      	mov	r2, r3
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	4413      	add	r3, r2
 800f2f4:	22fa      	movs	r2, #250	; 0xfa
 800f2f6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

		if(data[rect].blinkingDelayOver < blinkColckPeriod && !fixBlinkStateOver)
 800f2fa:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f2fe:	4613      	mov	r3, r2
 800f300:	00db      	lsls	r3, r3, #3
 800f302:	4413      	add	r3, r2
 800f304:	011b      	lsls	r3, r3, #4
 800f306:	461a      	mov	r2, r3
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	4413      	add	r3, r2
 800f30c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800f310:	2bf9      	cmp	r3, #249	; 0xf9
 800f312:	d80f      	bhi.n	800f334 <Display_DriveSTD+0xa60>
 800f314:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d10b      	bne.n	800f334 <Display_DriveSTD+0xa60>
			data[rect].blinkingDelayOver = blinkColckPeriod;
 800f31c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f320:	4613      	mov	r3, r2
 800f322:	00db      	lsls	r3, r3, #3
 800f324:	4413      	add	r3, r2
 800f326:	011b      	lsls	r3, r3, #4
 800f328:	461a      	mov	r2, r3
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	4413      	add	r3, r2
 800f32e:	22fa      	movs	r2, #250	; 0xfa
 800f330:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78


		switch(dataInRange)
 800f334:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d01a      	beq.n	800f372 <Display_DriveSTD+0xa9e>
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d16a      	bne.n	800f416 <Display_DriveSTD+0xb42>
		{
			case 1:						//value in range
				data[rect].blinkingStatus = 0;
 800f340:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f344:	4613      	mov	r3, r2
 800f346:	00db      	lsls	r3, r3, #3
 800f348:	4413      	add	r3, r2
 800f34a:	011b      	lsls	r3, r3, #4
 800f34c:	461a      	mov	r2, r3
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	4413      	add	r3, r2
 800f352:	2200      	movs	r2, #0
 800f354:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
				data[rect].blinkingState = 0;
 800f358:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f35c:	4613      	mov	r3, r2
 800f35e:	00db      	lsls	r3, r3, #3
 800f360:	4413      	add	r3, r2
 800f362:	011b      	lsls	r3, r3, #4
 800f364:	461a      	mov	r2, r3
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	4413      	add	r3, r2
 800f36a:	2200      	movs	r2, #0
 800f36c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
				break;
 800f370:	e0b9      	b.n	800f4e6 <Display_DriveSTD+0xc12>

			case 0:						//too low value

				data[rect].blinkingStatus = 1;
 800f372:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f376:	4613      	mov	r3, r2
 800f378:	00db      	lsls	r3, r3, #3
 800f37a:	4413      	add	r3, r2
 800f37c:	011b      	lsls	r3, r3, #4
 800f37e:	461a      	mov	r2, r3
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	4413      	add	r3, r2
 800f384:	2201      	movs	r2, #1
 800f386:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

				if(millisBlinkClock >= data[rect].blinkingMillis + data[rect].blinkingDelayUnder)
 800f38a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f38e:	4613      	mov	r3, r2
 800f390:	00db      	lsls	r3, r3, #3
 800f392:	4413      	add	r3, r2
 800f394:	011b      	lsls	r3, r3, #4
 800f396:	461a      	mov	r2, r3
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	4413      	add	r3, r2
 800f39c:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800f39e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f3a2:	4613      	mov	r3, r2
 800f3a4:	00db      	lsls	r3, r3, #3
 800f3a6:	4413      	add	r3, r2
 800f3a8:	011b      	lsls	r3, r3, #4
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800f3b4:	18ca      	adds	r2, r1, r3
 800f3b6:	4b49      	ldr	r3, [pc, #292]	; (800f4dc <Display_DriveSTD+0xc08>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	f200 8089 	bhi.w	800f4d2 <Display_DriveSTD+0xbfe>
				{
					if(fixBlinkStateUnder == 1)
 800f3c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	d10c      	bne.n	800f3e2 <Display_DriveSTD+0xb0e>
						data[rect].blinkingState = 1;
 800f3c8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f3cc:	4613      	mov	r3, r2
 800f3ce:	00db      	lsls	r3, r3, #3
 800f3d0:	4413      	add	r3, r2
 800f3d2:	011b      	lsls	r3, r3, #4
 800f3d4:	461a      	mov	r2, r3
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	4413      	add	r3, r2
 800f3da:	2201      	movs	r2, #1
 800f3dc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 800f3e0:	e00c      	b.n	800f3fc <Display_DriveSTD+0xb28>
					else
						data[rect].blinkingState = blinkClockState;
 800f3e2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f3e6:	4613      	mov	r3, r2
 800f3e8:	00db      	lsls	r3, r3, #3
 800f3ea:	4413      	add	r3, r2
 800f3ec:	011b      	lsls	r3, r3, #4
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	4413      	add	r3, r2
 800f3f4:	4a3a      	ldr	r2, [pc, #232]	; (800f4e0 <Display_DriveSTD+0xc0c>)
 800f3f6:	7812      	ldrb	r2, [r2, #0]
 800f3f8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

					data[rect].blinkingMillis = millisBlinkClock;
 800f3fc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f400:	4613      	mov	r3, r2
 800f402:	00db      	lsls	r3, r3, #3
 800f404:	4413      	add	r3, r2
 800f406:	011b      	lsls	r3, r3, #4
 800f408:	461a      	mov	r2, r3
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	4413      	add	r3, r2
 800f40e:	4a33      	ldr	r2, [pc, #204]	; (800f4dc <Display_DriveSTD+0xc08>)
 800f410:	6812      	ldr	r2, [r2, #0]
 800f412:	675a      	str	r2, [r3, #116]	; 0x74
				}

				break;
 800f414:	e05d      	b.n	800f4d2 <Display_DriveSTD+0xbfe>


			case 2:						//too high value
			default:

				data[rect].blinkingStatus = 1;
 800f416:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f41a:	4613      	mov	r3, r2
 800f41c:	00db      	lsls	r3, r3, #3
 800f41e:	4413      	add	r3, r2
 800f420:	011b      	lsls	r3, r3, #4
 800f422:	461a      	mov	r2, r3
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	4413      	add	r3, r2
 800f428:	2201      	movs	r2, #1
 800f42a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

				if(millisBlinkClock >= data[rect].blinkingMillis + data[rect].blinkingDelayOver || data[rect].minTimeValueOver < blinkColckPeriod)
 800f42e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f432:	4613      	mov	r3, r2
 800f434:	00db      	lsls	r3, r3, #3
 800f436:	4413      	add	r3, r2
 800f438:	011b      	lsls	r3, r3, #4
 800f43a:	461a      	mov	r2, r3
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	4413      	add	r3, r2
 800f440:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800f442:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f446:	4613      	mov	r3, r2
 800f448:	00db      	lsls	r3, r3, #3
 800f44a:	4413      	add	r3, r2
 800f44c:	011b      	lsls	r3, r3, #4
 800f44e:	461a      	mov	r2, r3
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	4413      	add	r3, r2
 800f454:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800f458:	18ca      	adds	r2, r1, r3
 800f45a:	4b20      	ldr	r3, [pc, #128]	; (800f4dc <Display_DriveSTD+0xc08>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d90c      	bls.n	800f47c <Display_DriveSTD+0xba8>
 800f462:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f466:	4613      	mov	r3, r2
 800f468:	00db      	lsls	r3, r3, #3
 800f46a:	4413      	add	r3, r2
 800f46c:	011b      	lsls	r3, r3, #4
 800f46e:	461a      	mov	r2, r3
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	4413      	add	r3, r2
 800f474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f478:	2bf9      	cmp	r3, #249	; 0xf9
 800f47a:	d833      	bhi.n	800f4e4 <Display_DriveSTD+0xc10>
				{
					if(fixBlinkStateOver == 1)
 800f47c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800f480:	2b01      	cmp	r3, #1
 800f482:	d10c      	bne.n	800f49e <Display_DriveSTD+0xbca>
						data[rect].blinkingState = 1;
 800f484:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f488:	4613      	mov	r3, r2
 800f48a:	00db      	lsls	r3, r3, #3
 800f48c:	4413      	add	r3, r2
 800f48e:	011b      	lsls	r3, r3, #4
 800f490:	461a      	mov	r2, r3
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	4413      	add	r3, r2
 800f496:	2201      	movs	r2, #1
 800f498:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 800f49c:	e00c      	b.n	800f4b8 <Display_DriveSTD+0xbe4>
					else
						data[rect].blinkingState = blinkClockState;
 800f49e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f4a2:	4613      	mov	r3, r2
 800f4a4:	00db      	lsls	r3, r3, #3
 800f4a6:	4413      	add	r3, r2
 800f4a8:	011b      	lsls	r3, r3, #4
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	4413      	add	r3, r2
 800f4b0:	4a0b      	ldr	r2, [pc, #44]	; (800f4e0 <Display_DriveSTD+0xc0c>)
 800f4b2:	7812      	ldrb	r2, [r2, #0]
 800f4b4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

					data[rect].blinkingMillis = millisBlinkClock;
 800f4b8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f4bc:	4613      	mov	r3, r2
 800f4be:	00db      	lsls	r3, r3, #3
 800f4c0:	4413      	add	r3, r2
 800f4c2:	011b      	lsls	r3, r3, #4
 800f4c4:	461a      	mov	r2, r3
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	4413      	add	r3, r2
 800f4ca:	4a04      	ldr	r2, [pc, #16]	; (800f4dc <Display_DriveSTD+0xc08>)
 800f4cc:	6812      	ldr	r2, [r2, #0]
 800f4ce:	675a      	str	r2, [r3, #116]	; 0x74
				}

				break;
 800f4d0:	e008      	b.n	800f4e4 <Display_DriveSTD+0xc10>
				break;
 800f4d2:	bf00      	nop
 800f4d4:	e007      	b.n	800f4e6 <Display_DriveSTD+0xc12>
 800f4d6:	bf00      	nop
 800f4d8:	20006a98 	.word	0x20006a98
 800f4dc:	2000699c 	.word	0x2000699c
 800f4e0:	200069a0 	.word	0x200069a0
				break;
 800f4e4:	bf00      	nop

		}


		//color management
		if(data[rect].blinkingBackEnable)
 800f4e6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f4ea:	4613      	mov	r3, r2
 800f4ec:	00db      	lsls	r3, r3, #3
 800f4ee:	4413      	add	r3, r2
 800f4f0:	011b      	lsls	r3, r3, #4
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	4413      	add	r3, r2
 800f4f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d05e      	beq.n	800f5be <Display_DriveSTD+0xcea>
		{
			if(dataInRange == 0 && data[rect].blinkingState)
 800f500:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800f504:	2b00      	cmp	r3, #0
 800f506:	d119      	bne.n	800f53c <Display_DriveSTD+0xc68>
 800f508:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f50c:	4613      	mov	r3, r2
 800f50e:	00db      	lsls	r3, r3, #3
 800f510:	4413      	add	r3, r2
 800f512:	011b      	lsls	r3, r3, #4
 800f514:	461a      	mov	r2, r3
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	4413      	add	r3, r2
 800f51a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d00c      	beq.n	800f53c <Display_DriveSTD+0xc68>
			{
				//frameColor = data[rect].blinkingUnderColor;
				backColor = data[rect].blinkingUnderColor;
 800f522:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f526:	4613      	mov	r3, r2
 800f528:	00db      	lsls	r3, r3, #3
 800f52a:	4413      	add	r3, r2
 800f52c:	011b      	lsls	r3, r3, #4
 800f52e:	461a      	mov	r2, r3
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	4413      	add	r3, r2
 800f534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f538:	647b      	str	r3, [r7, #68]	; 0x44
 800f53a:	e028      	b.n	800f58e <Display_DriveSTD+0xcba>
			}
			else if(dataInRange == 2 && data[rect].blinkingState)
 800f53c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800f540:	2b02      	cmp	r3, #2
 800f542:	d119      	bne.n	800f578 <Display_DriveSTD+0xca4>
 800f544:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f548:	4613      	mov	r3, r2
 800f54a:	00db      	lsls	r3, r3, #3
 800f54c:	4413      	add	r3, r2
 800f54e:	011b      	lsls	r3, r3, #4
 800f550:	461a      	mov	r2, r3
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	4413      	add	r3, r2
 800f556:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d00c      	beq.n	800f578 <Display_DriveSTD+0xca4>
			{
				//frameColor = data[rect].blinkingOverColor;
				backColor = data[rect].blinkingOverColor;
 800f55e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f562:	4613      	mov	r3, r2
 800f564:	00db      	lsls	r3, r3, #3
 800f566:	4413      	add	r3, r2
 800f568:	011b      	lsls	r3, r3, #4
 800f56a:	461a      	mov	r2, r3
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	4413      	add	r3, r2
 800f570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f574:	647b      	str	r3, [r7, #68]	; 0x44
 800f576:	e00a      	b.n	800f58e <Display_DriveSTD+0xcba>
			}
			else
				backColor = data[rect].backColor;
 800f578:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f57c:	4613      	mov	r3, r2
 800f57e:	00db      	lsls	r3, r3, #3
 800f580:	4413      	add	r3, r2
 800f582:	011b      	lsls	r3, r3, #4
 800f584:	461a      	mov	r2, r3
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	4413      	add	r3, r2
 800f58a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f58c:	647b      	str	r3, [r7, #68]	; 0x44

			if(data[rect].blinkingState == 0)
 800f58e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f592:	4613      	mov	r3, r2
 800f594:	00db      	lsls	r3, r3, #3
 800f596:	4413      	add	r3, r2
 800f598:	011b      	lsls	r3, r3, #4
 800f59a:	461a      	mov	r2, r3
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	4413      	add	r3, r2
 800f5a0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d10a      	bne.n	800f5be <Display_DriveSTD+0xcea>
			{
				//frameColor = backColor;
				backColor = data[rect].backColor;
 800f5a8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f5ac:	4613      	mov	r3, r2
 800f5ae:	00db      	lsls	r3, r3, #3
 800f5b0:	4413      	add	r3, r2
 800f5b2:	011b      	lsls	r3, r3, #4
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	4413      	add	r3, r2
 800f5ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5bc:	647b      	str	r3, [r7, #68]	; 0x44
			}
		}

		if(data[rect].blinkingFrameEnable)
 800f5be:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f5c2:	4613      	mov	r3, r2
 800f5c4:	00db      	lsls	r3, r3, #3
 800f5c6:	4413      	add	r3, r2
 800f5c8:	011b      	lsls	r3, r3, #4
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	4413      	add	r3, r2
 800f5d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d051      	beq.n	800f67c <Display_DriveSTD+0xda8>
		{
			if(dataInRange == 0)
 800f5d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d10c      	bne.n	800f5fa <Display_DriveSTD+0xd26>
				frameColor = data[rect].blinkingUnderColor;
 800f5e0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f5e4:	4613      	mov	r3, r2
 800f5e6:	00db      	lsls	r3, r3, #3
 800f5e8:	4413      	add	r3, r2
 800f5ea:	011b      	lsls	r3, r3, #4
 800f5ec:	461a      	mov	r2, r3
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	4413      	add	r3, r2
 800f5f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5f6:	643b      	str	r3, [r7, #64]	; 0x40
 800f5f8:	e01b      	b.n	800f632 <Display_DriveSTD+0xd5e>
			else if(dataInRange == 2)
 800f5fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800f5fe:	2b02      	cmp	r3, #2
 800f600:	d10c      	bne.n	800f61c <Display_DriveSTD+0xd48>
				frameColor = data[rect].blinkingOverColor;
 800f602:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f606:	4613      	mov	r3, r2
 800f608:	00db      	lsls	r3, r3, #3
 800f60a:	4413      	add	r3, r2
 800f60c:	011b      	lsls	r3, r3, #4
 800f60e:	461a      	mov	r2, r3
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	4413      	add	r3, r2
 800f614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f618:	643b      	str	r3, [r7, #64]	; 0x40
 800f61a:	e00a      	b.n	800f632 <Display_DriveSTD+0xd5e>
			else
				frameColor = data[rect].frameColor;
 800f61c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f620:	4613      	mov	r3, r2
 800f622:	00db      	lsls	r3, r3, #3
 800f624:	4413      	add	r3, r2
 800f626:	011b      	lsls	r3, r3, #4
 800f628:	461a      	mov	r2, r3
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	4413      	add	r3, r2
 800f62e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f630:	643b      	str	r3, [r7, #64]	; 0x40

			if(data[rect].blinkingStatus != 0 && data[rect].blinkingState == 0)
 800f632:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f636:	4613      	mov	r3, r2
 800f638:	00db      	lsls	r3, r3, #3
 800f63a:	4413      	add	r3, r2
 800f63c:	011b      	lsls	r3, r3, #4
 800f63e:	461a      	mov	r2, r3
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	4413      	add	r3, r2
 800f644:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d017      	beq.n	800f67c <Display_DriveSTD+0xda8>
 800f64c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f650:	4613      	mov	r3, r2
 800f652:	00db      	lsls	r3, r3, #3
 800f654:	4413      	add	r3, r2
 800f656:	011b      	lsls	r3, r3, #4
 800f658:	461a      	mov	r2, r3
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	4413      	add	r3, r2
 800f65e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800f662:	2b00      	cmp	r3, #0
 800f664:	d10a      	bne.n	800f67c <Display_DriveSTD+0xda8>
				frameColor = data[rect].frameColor;
 800f666:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f66a:	4613      	mov	r3, r2
 800f66c:	00db      	lsls	r3, r3, #3
 800f66e:	4413      	add	r3, r2
 800f670:	011b      	lsls	r3, r3, #4
 800f672:	461a      	mov	r2, r3
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	4413      	add	r3, r2
 800f678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f67a:	643b      	str	r3, [r7, #64]	; 0x40
		}


		if(!data[rect].blinkingBackEnable && !data[rect].blinkingFrameEnable)
 800f67c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f680:	4613      	mov	r3, r2
 800f682:	00db      	lsls	r3, r3, #3
 800f684:	4413      	add	r3, r2
 800f686:	011b      	lsls	r3, r3, #4
 800f688:	461a      	mov	r2, r3
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	4413      	add	r3, r2
 800f68e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f692:	2b00      	cmp	r3, #0
 800f694:	d15e      	bne.n	800f754 <Display_DriveSTD+0xe80>
 800f696:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f69a:	4613      	mov	r3, r2
 800f69c:	00db      	lsls	r3, r3, #3
 800f69e:	4413      	add	r3, r2
 800f6a0:	011b      	lsls	r3, r3, #4
 800f6a2:	461a      	mov	r2, r3
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	4413      	add	r3, r2
 800f6a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d151      	bne.n	800f754 <Display_DriveSTD+0xe80>
		{
			if(dataInRange == 0)
 800f6b0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d10c      	bne.n	800f6d2 <Display_DriveSTD+0xdfe>
				textColor = data[rect].blinkingUnderColor;
 800f6b8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f6bc:	4613      	mov	r3, r2
 800f6be:	00db      	lsls	r3, r3, #3
 800f6c0:	4413      	add	r3, r2
 800f6c2:	011b      	lsls	r3, r3, #4
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	4413      	add	r3, r2
 800f6ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800f6d0:	e01b      	b.n	800f70a <Display_DriveSTD+0xe36>
			else if(dataInRange == 2)
 800f6d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800f6d6:	2b02      	cmp	r3, #2
 800f6d8:	d10c      	bne.n	800f6f4 <Display_DriveSTD+0xe20>
				textColor = data[rect].blinkingOverColor;
 800f6da:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f6de:	4613      	mov	r3, r2
 800f6e0:	00db      	lsls	r3, r3, #3
 800f6e2:	4413      	add	r3, r2
 800f6e4:	011b      	lsls	r3, r3, #4
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	4413      	add	r3, r2
 800f6ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f6f2:	e00a      	b.n	800f70a <Display_DriveSTD+0xe36>
			else
				textColor = data[rect].textColor;
 800f6f4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f6f8:	4613      	mov	r3, r2
 800f6fa:	00db      	lsls	r3, r3, #3
 800f6fc:	4413      	add	r3, r2
 800f6fe:	011b      	lsls	r3, r3, #4
 800f700:	461a      	mov	r2, r3
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	4413      	add	r3, r2
 800f706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f708:	64bb      	str	r3, [r7, #72]	; 0x48

			if(data[rect].blinkingStatus != 0 && data[rect].blinkingState == 0)
 800f70a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f70e:	4613      	mov	r3, r2
 800f710:	00db      	lsls	r3, r3, #3
 800f712:	4413      	add	r3, r2
 800f714:	011b      	lsls	r3, r3, #4
 800f716:	461a      	mov	r2, r3
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	4413      	add	r3, r2
 800f71c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f720:	2b00      	cmp	r3, #0
 800f722:	d017      	beq.n	800f754 <Display_DriveSTD+0xe80>
 800f724:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f728:	4613      	mov	r3, r2
 800f72a:	00db      	lsls	r3, r3, #3
 800f72c:	4413      	add	r3, r2
 800f72e:	011b      	lsls	r3, r3, #4
 800f730:	461a      	mov	r2, r3
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	4413      	add	r3, r2
 800f736:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d10a      	bne.n	800f754 <Display_DriveSTD+0xe80>
				textColor = data[rect].backColor;
 800f73e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f742:	4613      	mov	r3, r2
 800f744:	00db      	lsls	r3, r3, #3
 800f746:	4413      	add	r3, r2
 800f748:	011b      	lsls	r3, r3, #4
 800f74a:	461a      	mov	r2, r3
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	4413      	add	r3, r2
 800f750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f752:	64bb      	str	r3, [r7, #72]	; 0x48
		}


		if((data[rect].blinkingBackEnable && data[rect].blinkingState != data[rect].blinkingStateOld) || data[rect].oldValueStatus != dataInRange)
 800f754:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f758:	4613      	mov	r3, r2
 800f75a:	00db      	lsls	r3, r3, #3
 800f75c:	4413      	add	r3, r2
 800f75e:	011b      	lsls	r3, r3, #4
 800f760:	461a      	mov	r2, r3
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	4413      	add	r3, r2
 800f766:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d017      	beq.n	800f79e <Display_DriveSTD+0xeca>
 800f76e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f772:	4613      	mov	r3, r2
 800f774:	00db      	lsls	r3, r3, #3
 800f776:	4413      	add	r3, r2
 800f778:	011b      	lsls	r3, r3, #4
 800f77a:	461a      	mov	r2, r3
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	4413      	add	r3, r2
 800f780:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 800f784:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f788:	4613      	mov	r3, r2
 800f78a:	00db      	lsls	r3, r3, #3
 800f78c:	4413      	add	r3, r2
 800f78e:	011b      	lsls	r3, r3, #4
 800f790:	461a      	mov	r2, r3
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	4413      	add	r3, r2
 800f796:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800f79a:	4299      	cmp	r1, r3
 800f79c:	d10e      	bne.n	800f7bc <Display_DriveSTD+0xee8>
 800f79e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f7a2:	4613      	mov	r3, r2
 800f7a4:	00db      	lsls	r3, r3, #3
 800f7a6:	4413      	add	r3, r2
 800f7a8:	011b      	lsls	r3, r3, #4
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	4413      	add	r3, r2
 800f7b0:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800f7b4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d050      	beq.n	800f85e <Display_DriveSTD+0xf8a>
		{
			GUI_SetColor(backColor);
 800f7bc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f7be:	f00d fab5 	bl	801cd2c <GUI_SetColor>

			GUI_FillRect(pageRectPositions[rect].xVertex1 + data[rect].blinkingFrameSize, pageRectPositions[rect].yVertex1 + data[rect].blinkingFrameSize, pageRectPositions[rect].xVertex2 - data[rect].blinkingFrameSize, pageRectPositions[rect].yVertex2 - data[rect].blinkingFrameSize);
 800f7c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f7c6:	4ad0      	ldr	r2, [pc, #832]	; (800fb08 <Display_DriveSTD+0x1234>)
 800f7c8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f7d2:	4613      	mov	r3, r2
 800f7d4:	00db      	lsls	r3, r3, #3
 800f7d6:	4413      	add	r3, r2
 800f7d8:	011b      	lsls	r3, r3, #4
 800f7da:	461a      	mov	r2, r3
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	4413      	add	r3, r2
 800f7e0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800f7e4:	18c8      	adds	r0, r1, r3
 800f7e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f7ea:	4ac7      	ldr	r2, [pc, #796]	; (800fb08 <Display_DriveSTD+0x1234>)
 800f7ec:	00db      	lsls	r3, r3, #3
 800f7ee:	4413      	add	r3, r2
 800f7f0:	885b      	ldrh	r3, [r3, #2]
 800f7f2:	4619      	mov	r1, r3
 800f7f4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f7f8:	4613      	mov	r3, r2
 800f7fa:	00db      	lsls	r3, r3, #3
 800f7fc:	4413      	add	r3, r2
 800f7fe:	011b      	lsls	r3, r3, #4
 800f800:	461a      	mov	r2, r3
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	4413      	add	r3, r2
 800f806:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800f80a:	4419      	add	r1, r3
 800f80c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f810:	4abd      	ldr	r2, [pc, #756]	; (800fb08 <Display_DriveSTD+0x1234>)
 800f812:	00db      	lsls	r3, r3, #3
 800f814:	4413      	add	r3, r2
 800f816:	889b      	ldrh	r3, [r3, #4]
 800f818:	461c      	mov	r4, r3
 800f81a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f81e:	4613      	mov	r3, r2
 800f820:	00db      	lsls	r3, r3, #3
 800f822:	4413      	add	r3, r2
 800f824:	011b      	lsls	r3, r3, #4
 800f826:	461a      	mov	r2, r3
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	4413      	add	r3, r2
 800f82c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800f830:	1ae4      	subs	r4, r4, r3
 800f832:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f836:	4ab4      	ldr	r2, [pc, #720]	; (800fb08 <Display_DriveSTD+0x1234>)
 800f838:	00db      	lsls	r3, r3, #3
 800f83a:	4413      	add	r3, r2
 800f83c:	88db      	ldrh	r3, [r3, #6]
 800f83e:	461d      	mov	r5, r3
 800f840:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f844:	4613      	mov	r3, r2
 800f846:	00db      	lsls	r3, r3, #3
 800f848:	4413      	add	r3, r2
 800f84a:	011b      	lsls	r3, r3, #4
 800f84c:	461a      	mov	r2, r3
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	4413      	add	r3, r2
 800f852:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800f856:	1aeb      	subs	r3, r5, r3
 800f858:	4622      	mov	r2, r4
 800f85a:	f00d fb71 	bl	801cf40 <GUI_FillRect>
		}

		if(!data[rect].blinkingBackEnable && data[rect].blinkingState && data[rect].blinkingStateOld != data[rect].blinkingState)
 800f85e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f862:	4613      	mov	r3, r2
 800f864:	00db      	lsls	r3, r3, #3
 800f866:	4413      	add	r3, r2
 800f868:	011b      	lsls	r3, r3, #4
 800f86a:	461a      	mov	r2, r3
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	4413      	add	r3, r2
 800f870:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f874:	2b00      	cmp	r3, #0
 800f876:	f040 808b 	bne.w	800f990 <Display_DriveSTD+0x10bc>
 800f87a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f87e:	4613      	mov	r3, r2
 800f880:	00db      	lsls	r3, r3, #3
 800f882:	4413      	add	r3, r2
 800f884:	011b      	lsls	r3, r3, #4
 800f886:	461a      	mov	r2, r3
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	4413      	add	r3, r2
 800f88c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800f890:	2b00      	cmp	r3, #0
 800f892:	d07d      	beq.n	800f990 <Display_DriveSTD+0x10bc>
 800f894:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f898:	4613      	mov	r3, r2
 800f89a:	00db      	lsls	r3, r3, #3
 800f89c:	4413      	add	r3, r2
 800f89e:	011b      	lsls	r3, r3, #4
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	4413      	add	r3, r2
 800f8a6:	f893 107e 	ldrb.w	r1, [r3, #126]	; 0x7e
 800f8aa:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f8ae:	4613      	mov	r3, r2
 800f8b0:	00db      	lsls	r3, r3, #3
 800f8b2:	4413      	add	r3, r2
 800f8b4:	011b      	lsls	r3, r3, #4
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	4413      	add	r3, r2
 800f8bc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800f8c0:	4299      	cmp	r1, r3
 800f8c2:	d065      	beq.n	800f990 <Display_DriveSTD+0x10bc>
		{
			GUI_SetColor(data[rect].backColor);
 800f8c4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f8c8:	4613      	mov	r3, r2
 800f8ca:	00db      	lsls	r3, r3, #3
 800f8cc:	4413      	add	r3, r2
 800f8ce:	011b      	lsls	r3, r3, #4
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	4413      	add	r3, r2
 800f8d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f00d fa27 	bl	801cd2c <GUI_SetColor>
			backColor = data[rect].backColor;
 800f8de:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f8e2:	4613      	mov	r3, r2
 800f8e4:	00db      	lsls	r3, r3, #3
 800f8e6:	4413      	add	r3, r2
 800f8e8:	011b      	lsls	r3, r3, #4
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	4413      	add	r3, r2
 800f8f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8f2:	647b      	str	r3, [r7, #68]	; 0x44

			GUI_FillRect(pageRectPositions[rect].xVertex1 + data[rect].blinkingFrameSize, pageRectPositions[rect].yVertex1 + data[rect].blinkingFrameSize, pageRectPositions[rect].xVertex2 - data[rect].blinkingFrameSize, pageRectPositions[rect].yVertex2 - data[rect].blinkingFrameSize);
 800f8f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f8f8:	4a83      	ldr	r2, [pc, #524]	; (800fb08 <Display_DriveSTD+0x1234>)
 800f8fa:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800f8fe:	4619      	mov	r1, r3
 800f900:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f904:	4613      	mov	r3, r2
 800f906:	00db      	lsls	r3, r3, #3
 800f908:	4413      	add	r3, r2
 800f90a:	011b      	lsls	r3, r3, #4
 800f90c:	461a      	mov	r2, r3
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	4413      	add	r3, r2
 800f912:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800f916:	18c8      	adds	r0, r1, r3
 800f918:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f91c:	4a7a      	ldr	r2, [pc, #488]	; (800fb08 <Display_DriveSTD+0x1234>)
 800f91e:	00db      	lsls	r3, r3, #3
 800f920:	4413      	add	r3, r2
 800f922:	885b      	ldrh	r3, [r3, #2]
 800f924:	4619      	mov	r1, r3
 800f926:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f92a:	4613      	mov	r3, r2
 800f92c:	00db      	lsls	r3, r3, #3
 800f92e:	4413      	add	r3, r2
 800f930:	011b      	lsls	r3, r3, #4
 800f932:	461a      	mov	r2, r3
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	4413      	add	r3, r2
 800f938:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800f93c:	4419      	add	r1, r3
 800f93e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f942:	4a71      	ldr	r2, [pc, #452]	; (800fb08 <Display_DriveSTD+0x1234>)
 800f944:	00db      	lsls	r3, r3, #3
 800f946:	4413      	add	r3, r2
 800f948:	889b      	ldrh	r3, [r3, #4]
 800f94a:	461c      	mov	r4, r3
 800f94c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f950:	4613      	mov	r3, r2
 800f952:	00db      	lsls	r3, r3, #3
 800f954:	4413      	add	r3, r2
 800f956:	011b      	lsls	r3, r3, #4
 800f958:	461a      	mov	r2, r3
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	4413      	add	r3, r2
 800f95e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800f962:	1ae4      	subs	r4, r4, r3
 800f964:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f968:	4a67      	ldr	r2, [pc, #412]	; (800fb08 <Display_DriveSTD+0x1234>)
 800f96a:	00db      	lsls	r3, r3, #3
 800f96c:	4413      	add	r3, r2
 800f96e:	88db      	ldrh	r3, [r3, #6]
 800f970:	461d      	mov	r5, r3
 800f972:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f976:	4613      	mov	r3, r2
 800f978:	00db      	lsls	r3, r3, #3
 800f97a:	4413      	add	r3, r2
 800f97c:	011b      	lsls	r3, r3, #4
 800f97e:	461a      	mov	r2, r3
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	4413      	add	r3, r2
 800f984:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800f988:	1aeb      	subs	r3, r5, r3
 800f98a:	4622      	mov	r2, r4
 800f98c:	f00d fad8 	bl	801cf40 <GUI_FillRect>
		}

		data[rect].blinkingStateOld = data[rect].blinkingState;
 800f990:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f994:	4613      	mov	r3, r2
 800f996:	00db      	lsls	r3, r3, #3
 800f998:	4413      	add	r3, r2
 800f99a:	011b      	lsls	r3, r3, #4
 800f99c:	461a      	mov	r2, r3
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	1899      	adds	r1, r3, r2
 800f9a2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f9a6:	4613      	mov	r3, r2
 800f9a8:	00db      	lsls	r3, r3, #3
 800f9aa:	4413      	add	r3, r2
 800f9ac:	011b      	lsls	r3, r3, #4
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	4413      	add	r3, r2
 800f9b4:	f891 207d 	ldrb.w	r2, [r1, #125]	; 0x7d
 800f9b8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e



		GUI_SetColor(frameColor);
 800f9bc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f9be:	f00d f9b5 	bl	801cd2c <GUI_SetColor>

		//GUI_SetColor(GUI_GREEN);

		for(uint8_t size = 0; size < data[rect].blinkingFrameSize; size ++)
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800f9c8:	e02d      	b.n	800fa26 <Display_DriveSTD+0x1152>
		{
			GUI_DrawRect(pageRectPositions[rect].xVertex1 + size, pageRectPositions[rect].yVertex1 + size, pageRectPositions[rect].xVertex2 - size, pageRectPositions[rect].yVertex2 - size);
 800f9ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f9ce:	4a4e      	ldr	r2, [pc, #312]	; (800fb08 <Display_DriveSTD+0x1234>)
 800f9d0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f9da:	18d0      	adds	r0, r2, r3
 800f9dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f9e0:	4a49      	ldr	r2, [pc, #292]	; (800fb08 <Display_DriveSTD+0x1234>)
 800f9e2:	00db      	lsls	r3, r3, #3
 800f9e4:	4413      	add	r3, r2
 800f9e6:	885b      	ldrh	r3, [r3, #2]
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f9ee:	18d1      	adds	r1, r2, r3
 800f9f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f9f4:	4a44      	ldr	r2, [pc, #272]	; (800fb08 <Display_DriveSTD+0x1234>)
 800f9f6:	00db      	lsls	r3, r3, #3
 800f9f8:	4413      	add	r3, r2
 800f9fa:	889b      	ldrh	r3, [r3, #4]
 800f9fc:	461a      	mov	r2, r3
 800f9fe:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800fa02:	1ad2      	subs	r2, r2, r3
 800fa04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fa08:	4c3f      	ldr	r4, [pc, #252]	; (800fb08 <Display_DriveSTD+0x1234>)
 800fa0a:	00db      	lsls	r3, r3, #3
 800fa0c:	4423      	add	r3, r4
 800fa0e:	88db      	ldrh	r3, [r3, #6]
 800fa10:	461c      	mov	r4, r3
 800fa12:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800fa16:	1ae3      	subs	r3, r4, r3
 800fa18:	f00f fa1c 	bl	801ee54 <GUI_DrawRect>
		for(uint8_t size = 0; size < data[rect].blinkingFrameSize; size ++)
 800fa1c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800fa20:	3301      	adds	r3, #1
 800fa22:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800fa26:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fa2a:	4613      	mov	r3, r2
 800fa2c:	00db      	lsls	r3, r3, #3
 800fa2e:	4413      	add	r3, r2
 800fa30:	011b      	lsls	r3, r3, #4
 800fa32:	461a      	mov	r2, r3
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	4413      	add	r3, r2
 800fa38:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800fa3c:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d3c2      	bcc.n	800f9ca <Display_DriveSTD+0x10f6>
		}


		if(dataError == 0)
 800fa44:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f040 835c 	bne.w	8010106 <Display_DriveSTD+0x1832>
		{
			uint8_t particularDataDetected = 0;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

			GUI_SetColor(textColor);
 800fa54:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800fa56:	f00d f969 	bl	801cd2c <GUI_SetColor>
			GUI_SetBkColor(backColor);
 800fa5a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fa5c:	f00d f964 	bl	801cd28 <GUI_SetBkColor>
			GUI_SetFont(&DriveSTD_TextFont);
 800fa60:	482a      	ldr	r0, [pc, #168]	; (800fb0c <Display_DriveSTD+0x1238>)
 800fa62:	f00d f935 	bl	801ccd0 <GUI_SetFont>
			GUI_SetTextAlign(GUI_TA_HCENTER);
 800fa66:	2002      	movs	r0, #2
 800fa68:	f00d f928 	bl	801ccbc <GUI_SetTextAlign>

			GUI_DispStringAt(data[rect].string, x, y);
 800fa6c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fa70:	4613      	mov	r3, r2
 800fa72:	00db      	lsls	r3, r3, #3
 800fa74:	4413      	add	r3, r2
 800fa76:	011b      	lsls	r3, r3, #4
 800fa78:	461a      	mov	r2, r3
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	4413      	add	r3, r2
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800fa82:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fa84:	4618      	mov	r0, r3
 800fa86:	f00e f82f 	bl	801dae8 <GUI_DispStringAt>

			if(data[rect].dataPointer == &CAR_Data.drsStatus.intData)
 800fa8a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fa8e:	4613      	mov	r3, r2
 800fa90:	00db      	lsls	r3, r3, #3
 800fa92:	4413      	add	r3, r2
 800fa94:	011b      	lsls	r3, r3, #4
 800fa96:	461a      	mov	r2, r3
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	4413      	add	r3, r2
 800fa9c:	691b      	ldr	r3, [r3, #16]
 800fa9e:	4a1c      	ldr	r2, [pc, #112]	; (800fb10 <Display_DriveSTD+0x123c>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d14d      	bne.n	800fb40 <Display_DriveSTD+0x126c>
			{
				particularDataDetected = 1;
 800faa4:	2301      	movs	r3, #1
 800faa6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

				GUI_SetColor(data[rect].dataColor);
 800faaa:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800faae:	4613      	mov	r3, r2
 800fab0:	00db      	lsls	r3, r3, #3
 800fab2:	4413      	add	r3, r2
 800fab4:	011b      	lsls	r3, r3, #4
 800fab6:	461a      	mov	r2, r3
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	4413      	add	r3, r2
 800fabc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fabe:	4618      	mov	r0, r3
 800fac0:	f00d f934 	bl	801cd2c <GUI_SetColor>
				GUI_SetBkColor(backColor);
 800fac4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fac6:	f00d f92f 	bl	801cd28 <GUI_SetBkColor>
				//GUI_SetFont(&GUI_Font32B_1);
				GUI_SetFont(&HQ_TEXT_DATA_FONT);
 800faca:	4812      	ldr	r0, [pc, #72]	; (800fb14 <Display_DriveSTD+0x1240>)
 800facc:	f00d f900 	bl	801ccd0 <GUI_SetFont>

				char pString[4] = "OFF";
 800fad0:	4b11      	ldr	r3, [pc, #68]	; (800fb18 <Display_DriveSTD+0x1244>)
 800fad2:	61fb      	str	r3, [r7, #28]
				GUI_SetTextAlign(GUI_TA_HCENTER);
 800fad4:	2002      	movs	r0, #2
 800fad6:	f00d f8f1 	bl	801ccbc <GUI_SetTextAlign>

				if(*((int32_t*) data[rect].dataPointer) == 0)
 800fada:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fade:	4613      	mov	r3, r2
 800fae0:	00db      	lsls	r3, r3, #3
 800fae2:	4413      	add	r3, r2
 800fae4:	011b      	lsls	r3, r3, #4
 800fae6:	461a      	mov	r2, r3
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	4413      	add	r3, r2
 800faec:	691b      	ldr	r3, [r3, #16]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d113      	bne.n	800fb1c <Display_DriveSTD+0x1248>
					GUI_DispStringAt(pString, x, y + 20 + DriveSTD_DataOffset_y);
 800faf4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800faf6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800faf8:	f103 0216 	add.w	r2, r3, #22
 800fafc:	f107 031c 	add.w	r3, r7, #28
 800fb00:	4618      	mov	r0, r3
 800fb02:	f00d fff1 	bl	801dae8 <GUI_DispStringAt>
 800fb06:	e01b      	b.n	800fb40 <Display_DriveSTD+0x126c>
 800fb08:	20005ddc 	.word	0x20005ddc
 800fb0c:	080db4e0 	.word	0x080db4e0
 800fb10:	20000698 	.word	0x20000698
 800fb14:	080e180c 	.word	0x080e180c
 800fb18:	0046464f 	.word	0x0046464f
				else
				{
					strcpy(pString, "ON");
 800fb1c:	f107 031c 	add.w	r3, r7, #28
 800fb20:	4a83      	ldr	r2, [pc, #524]	; (800fd30 <Display_DriveSTD+0x145c>)
 800fb22:	6812      	ldr	r2, [r2, #0]
 800fb24:	4611      	mov	r1, r2
 800fb26:	8019      	strh	r1, [r3, #0]
 800fb28:	3302      	adds	r3, #2
 800fb2a:	0c12      	lsrs	r2, r2, #16
 800fb2c:	701a      	strb	r2, [r3, #0]
					GUI_DispStringAt(pString, x, y + 20 + DriveSTD_DataOffset_y);
 800fb2e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800fb30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb32:	f103 0216 	add.w	r2, r3, #22
 800fb36:	f107 031c 	add.w	r3, r7, #28
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f00d ffd4 	bl	801dae8 <GUI_DispStringAt>
				}
			}

			if(data[rect].dataPointer == &CAR_Data.map.intData)
 800fb40:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fb44:	4613      	mov	r3, r2
 800fb46:	00db      	lsls	r3, r3, #3
 800fb48:	4413      	add	r3, r2
 800fb4a:	011b      	lsls	r3, r3, #4
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	4413      	add	r3, r2
 800fb52:	691b      	ldr	r3, [r3, #16]
 800fb54:	4a77      	ldr	r2, [pc, #476]	; (800fd34 <Display_DriveSTD+0x1460>)
 800fb56:	4293      	cmp	r3, r2
 800fb58:	d162      	bne.n	800fc20 <Display_DriveSTD+0x134c>
			{
				particularDataDetected = 1;
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

				GUI_SetColor(data[rect].dataColor);
 800fb60:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fb64:	4613      	mov	r3, r2
 800fb66:	00db      	lsls	r3, r3, #3
 800fb68:	4413      	add	r3, r2
 800fb6a:	011b      	lsls	r3, r3, #4
 800fb6c:	461a      	mov	r2, r3
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	4413      	add	r3, r2
 800fb72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb74:	4618      	mov	r0, r3
 800fb76:	f00d f8d9 	bl	801cd2c <GUI_SetColor>
				GUI_SetBkColor(backColor);
 800fb7a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fb7c:	f00d f8d4 	bl	801cd28 <GUI_SetBkColor>
				//GUI_SetFont(&GUI_Font32B_1);
				GUI_SetFont(&HQ_TEXT_DATA_FONT);
 800fb80:	486d      	ldr	r0, [pc, #436]	; (800fd38 <Display_DriveSTD+0x1464>)
 800fb82:	f00d f8a5 	bl	801ccd0 <GUI_SetFont>

				char pString[5] = "BASE";
 800fb86:	4a6d      	ldr	r2, [pc, #436]	; (800fd3c <Display_DriveSTD+0x1468>)
 800fb88:	f107 0314 	add.w	r3, r7, #20
 800fb8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb90:	6018      	str	r0, [r3, #0]
 800fb92:	3304      	adds	r3, #4
 800fb94:	7019      	strb	r1, [r3, #0]
				GUI_SetTextAlign(GUI_TA_HCENTER);
 800fb96:	2002      	movs	r0, #2
 800fb98:	f00d f890 	bl	801ccbc <GUI_SetTextAlign>

				if(*((int32_t*) data[rect].dataPointer) == 0)
 800fb9c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fba0:	4613      	mov	r3, r2
 800fba2:	00db      	lsls	r3, r3, #3
 800fba4:	4413      	add	r3, r2
 800fba6:	011b      	lsls	r3, r3, #4
 800fba8:	461a      	mov	r2, r3
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	4413      	add	r3, r2
 800fbae:	691b      	ldr	r3, [r3, #16]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d109      	bne.n	800fbca <Display_DriveSTD+0x12f6>
					GUI_DispStringAt(pString, x, y + 20 + DriveSTD_DataOffset_y);
 800fbb6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800fbb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbba:	f103 0216 	add.w	r2, r3, #22
 800fbbe:	f107 0314 	add.w	r3, r7, #20
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f00d ff90 	bl	801dae8 <GUI_DispStringAt>
 800fbc8:	e02a      	b.n	800fc20 <Display_DriveSTD+0x134c>
				else if(*((int32_t*) data[rect].dataPointer) == 1)
 800fbca:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fbce:	4613      	mov	r3, r2
 800fbd0:	00db      	lsls	r3, r3, #3
 800fbd2:	4413      	add	r3, r2
 800fbd4:	011b      	lsls	r3, r3, #4
 800fbd6:	461a      	mov	r2, r3
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	4413      	add	r3, r2
 800fbdc:	691b      	ldr	r3, [r3, #16]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	2b01      	cmp	r3, #1
 800fbe2:	d10d      	bne.n	800fc00 <Display_DriveSTD+0x132c>
				{
					strcpy(pString, "ECO");
 800fbe4:	f107 0314 	add.w	r3, r7, #20
 800fbe8:	4a55      	ldr	r2, [pc, #340]	; (800fd40 <Display_DriveSTD+0x146c>)
 800fbea:	601a      	str	r2, [r3, #0]
					GUI_DispStringAt(pString, x, y + 20 + DriveSTD_DataOffset_y);
 800fbec:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800fbee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbf0:	f103 0216 	add.w	r2, r3, #22
 800fbf4:	f107 0314 	add.w	r3, r7, #20
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f00d ff75 	bl	801dae8 <GUI_DispStringAt>
 800fbfe:	e00f      	b.n	800fc20 <Display_DriveSTD+0x134c>
				}
				else
				{
					GUI_SetColor(GUI_RED);
 800fc00:	20ff      	movs	r0, #255	; 0xff
 800fc02:	f00d f893 	bl	801cd2c <GUI_SetColor>
					strcpy(pString, "ERR");
 800fc06:	f107 0314 	add.w	r3, r7, #20
 800fc0a:	4a4e      	ldr	r2, [pc, #312]	; (800fd44 <Display_DriveSTD+0x1470>)
 800fc0c:	601a      	str	r2, [r3, #0]
					GUI_DispStringAt(pString, x, y + 20 + DriveSTD_DataOffset_y);
 800fc0e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800fc10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc12:	f103 0216 	add.w	r2, r3, #22
 800fc16:	f107 0314 	add.w	r3, r7, #20
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f00d ff64 	bl	801dae8 <GUI_DispStringAt>
				}
			}

			if(data[rect].dataPointer == &CAR_Data.tractionControl.intData)// && *((int32_t*) data[rect].dataPointer) == 0)
 800fc20:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fc24:	4613      	mov	r3, r2
 800fc26:	00db      	lsls	r3, r3, #3
 800fc28:	4413      	add	r3, r2
 800fc2a:	011b      	lsls	r3, r3, #4
 800fc2c:	461a      	mov	r2, r3
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	4413      	add	r3, r2
 800fc32:	691b      	ldr	r3, [r3, #16]
 800fc34:	4a44      	ldr	r2, [pc, #272]	; (800fd48 <Display_DriveSTD+0x1474>)
 800fc36:	4293      	cmp	r3, r2
 800fc38:	f040 80f6 	bne.w	800fe28 <Display_DriveSTD+0x1554>
			{
				particularDataDetected = 1;
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				GUI_SetTextAlign(GUI_TA_HCENTER);

				GUI_DispStringAt(pString, x, y + 20);
				*/

				if(data[rect].dataRefreshDelay == 0 || millis >= data[rect].dataRefreshMillis + data[rect].dataRefreshDelay)
 800fc42:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fc46:	4613      	mov	r3, r2
 800fc48:	00db      	lsls	r3, r3, #3
 800fc4a:	4413      	add	r3, r2
 800fc4c:	011b      	lsls	r3, r3, #4
 800fc4e:	461a      	mov	r2, r3
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	4413      	add	r3, r2
 800fc54:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d019      	beq.n	800fc90 <Display_DriveSTD+0x13bc>
 800fc5c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fc60:	4613      	mov	r3, r2
 800fc62:	00db      	lsls	r3, r3, #3
 800fc64:	4413      	add	r3, r2
 800fc66:	011b      	lsls	r3, r3, #4
 800fc68:	461a      	mov	r2, r3
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	4413      	add	r3, r2
 800fc6e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800fc70:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fc74:	4613      	mov	r3, r2
 800fc76:	00db      	lsls	r3, r3, #3
 800fc78:	4413      	add	r3, r2
 800fc7a:	011b      	lsls	r3, r3, #4
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	4413      	add	r3, r2
 800fc82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc86:	18ca      	adds	r2, r1, r3
 800fc88:	4b30      	ldr	r3, [pc, #192]	; (800fd4c <Display_DriveSTD+0x1478>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d820      	bhi.n	800fcd2 <Display_DriveSTD+0x13fe>
				{
					data[rect].dataLogInt.number = *((int32_t*) data[rect].dataPointer);
 800fc90:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fc94:	4613      	mov	r3, r2
 800fc96:	00db      	lsls	r3, r3, #3
 800fc98:	4413      	add	r3, r2
 800fc9a:	011b      	lsls	r3, r3, #4
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	4413      	add	r3, r2
 800fca2:	6919      	ldr	r1, [r3, #16]
 800fca4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fca8:	4613      	mov	r3, r2
 800fcaa:	00db      	lsls	r3, r3, #3
 800fcac:	4413      	add	r3, r2
 800fcae:	011b      	lsls	r3, r3, #4
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	4413      	add	r3, r2
 800fcb6:	680a      	ldr	r2, [r1, #0]
 800fcb8:	615a      	str	r2, [r3, #20]
					data[rect].dataRefreshMillis = millis;
 800fcba:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fcbe:	4613      	mov	r3, r2
 800fcc0:	00db      	lsls	r3, r3, #3
 800fcc2:	4413      	add	r3, r2
 800fcc4:	011b      	lsls	r3, r3, #4
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	4413      	add	r3, r2
 800fccc:	4a1f      	ldr	r2, [pc, #124]	; (800fd4c <Display_DriveSTD+0x1478>)
 800fcce:	6812      	ldr	r2, [r2, #0]
 800fcd0:	665a      	str	r2, [r3, #100]	; 0x64
				}

				static int32_t oldData = 0;

				if(*((int32_t*) data[rect].dataPointer) == 0)
 800fcd2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fcd6:	4613      	mov	r3, r2
 800fcd8:	00db      	lsls	r3, r3, #3
 800fcda:	4413      	add	r3, r2
 800fcdc:	011b      	lsls	r3, r3, #4
 800fcde:	461a      	mov	r2, r3
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	4413      	add	r3, r2
 800fce4:	691b      	ldr	r3, [r3, #16]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d133      	bne.n	800fd54 <Display_DriveSTD+0x1480>
				{
					GUI_SetColor(data[rect].dataColor);
 800fcec:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fcf0:	4613      	mov	r3, r2
 800fcf2:	00db      	lsls	r3, r3, #3
 800fcf4:	4413      	add	r3, r2
 800fcf6:	011b      	lsls	r3, r3, #4
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd00:	4618      	mov	r0, r3
 800fd02:	f00d f813 	bl	801cd2c <GUI_SetColor>
					GUI_SetBkColor(backColor);
 800fd06:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fd08:	f00d f80e 	bl	801cd28 <GUI_SetBkColor>
					GUI_SetFont(&HQ_TEXT_DATA_FONT);
 800fd0c:	480a      	ldr	r0, [pc, #40]	; (800fd38 <Display_DriveSTD+0x1464>)
 800fd0e:	f00c ffdf 	bl	801ccd0 <GUI_SetFont>

					char pString[4] = "OFF";
 800fd12:	4b0f      	ldr	r3, [pc, #60]	; (800fd50 <Display_DriveSTD+0x147c>)
 800fd14:	613b      	str	r3, [r7, #16]
					GUI_SetTextAlign(GUI_TA_HCENTER);
 800fd16:	2002      	movs	r0, #2
 800fd18:	f00c ffd0 	bl	801ccbc <GUI_SetTextAlign>

					GUI_DispStringAt(pString, x, y + 20 + DriveSTD_DataOffset_y);
 800fd1c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800fd1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd20:	f103 0216 	add.w	r2, r3, #22
 800fd24:	f107 0310 	add.w	r3, r7, #16
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f00d fedd 	bl	801dae8 <GUI_DispStringAt>
 800fd2e:	e06e      	b.n	800fe0e <Display_DriveSTD+0x153a>
 800fd30:	080226cc 	.word	0x080226cc
 800fd34:	200007c8 	.word	0x200007c8
 800fd38:	080e180c 	.word	0x080e180c
 800fd3c:	080226d4 	.word	0x080226d4
 800fd40:	004f4345 	.word	0x004f4345
 800fd44:	00525245 	.word	0x00525245
 800fd48:	20000730 	.word	0x20000730
 800fd4c:	20006a98 	.word	0x20006a98
 800fd50:	0046464f 	.word	0x0046464f
				}
				else
				{
					if(oldData == 0)
 800fd54:	4b97      	ldr	r3, [pc, #604]	; (800ffb4 <Display_DriveSTD+0x16e0>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d10f      	bne.n	800fd7c <Display_DriveSTD+0x14a8>
					{
						GUI_SetColor(backColor);
 800fd5c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fd5e:	f00c ffe5 	bl	801cd2c <GUI_SetColor>
						//GUI_SetColor(GUI_GREEN);
						GUI_FillRect(x - 36, y + 20, x + 36, y + 48);
 800fd62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fd64:	f1a3 0024 	sub.w	r0, r3, #36	; 0x24
 800fd68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd6a:	f103 0114 	add.w	r1, r3, #20
 800fd6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fd70:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800fd74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd76:	3330      	adds	r3, #48	; 0x30
 800fd78:	f00d f8e2 	bl	801cf40 <GUI_FillRect>
					}

					GUI_DrawNumAt_Dec(x, y + 20 + DriveSTD_DataOffset_y, &DriveSTD_DataFont, data[rect].dataColor, backColor, &data[rect].dataLogInt, data[rect].signEnable, CENTER, data[rect].intStr, data[rect].endStr);
 800fd7c:	f9b7 5028 	ldrsh.w	r5, [r7, #40]	; 0x28
 800fd80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd82:	3316      	adds	r3, #22
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	b21e      	sxth	r6, r3
 800fd88:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fd8c:	4613      	mov	r3, r2
 800fd8e:	00db      	lsls	r3, r3, #3
 800fd90:	4413      	add	r3, r2
 800fd92:	011b      	lsls	r3, r3, #4
 800fd94:	461a      	mov	r2, r3
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	4413      	add	r3, r2
 800fd9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd9c:	607b      	str	r3, [r7, #4]
 800fd9e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fda2:	4613      	mov	r3, r2
 800fda4:	00db      	lsls	r3, r3, #3
 800fda6:	4413      	add	r3, r2
 800fda8:	011b      	lsls	r3, r3, #4
 800fdaa:	461a      	mov	r2, r3
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	4413      	add	r3, r2
 800fdb0:	f103 0114 	add.w	r1, r3, #20
 800fdb4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fdb8:	4613      	mov	r3, r2
 800fdba:	00db      	lsls	r3, r3, #3
 800fdbc:	4413      	add	r3, r2
 800fdbe:	011b      	lsls	r3, r3, #4
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	4413      	add	r3, r2
 800fdc6:	f893 004d 	ldrb.w	r0, [r3, #77]	; 0x4d
 800fdca:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fdce:	4613      	mov	r3, r2
 800fdd0:	00db      	lsls	r3, r3, #3
 800fdd2:	4413      	add	r3, r2
 800fdd4:	011b      	lsls	r3, r3, #4
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	4413      	add	r3, r2
 800fddc:	689c      	ldr	r4, [r3, #8]
 800fdde:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fde2:	4613      	mov	r3, r2
 800fde4:	00db      	lsls	r3, r3, #3
 800fde6:	4413      	add	r3, r2
 800fde8:	011b      	lsls	r3, r3, #4
 800fdea:	461a      	mov	r2, r3
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	4413      	add	r3, r2
 800fdf0:	68db      	ldr	r3, [r3, #12]
 800fdf2:	9305      	str	r3, [sp, #20]
 800fdf4:	9404      	str	r4, [sp, #16]
 800fdf6:	2302      	movs	r3, #2
 800fdf8:	9303      	str	r3, [sp, #12]
 800fdfa:	9002      	str	r0, [sp, #8]
 800fdfc:	9101      	str	r1, [sp, #4]
 800fdfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe00:	9300      	str	r3, [sp, #0]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	4a6c      	ldr	r2, [pc, #432]	; (800ffb8 <Display_DriveSTD+0x16e4>)
 800fe06:	4631      	mov	r1, r6
 800fe08:	4628      	mov	r0, r5
 800fe0a:	f007 fee9 	bl	8017be0 <GUI_DrawNumAt_Dec>
				}

				oldData = *((int32_t*) data[rect].dataPointer);
 800fe0e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fe12:	4613      	mov	r3, r2
 800fe14:	00db      	lsls	r3, r3, #3
 800fe16:	4413      	add	r3, r2
 800fe18:	011b      	lsls	r3, r3, #4
 800fe1a:	461a      	mov	r2, r3
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	4413      	add	r3, r2
 800fe20:	691b      	ldr	r3, [r3, #16]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	4a63      	ldr	r2, [pc, #396]	; (800ffb4 <Display_DriveSTD+0x16e0>)
 800fe26:	6013      	str	r3, [r2, #0]
			}


			if(particularDataDetected == 0)
 800fe28:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	f040 816a 	bne.w	8010106 <Display_DriveSTD+0x1832>
			{
				if(data[rect].dataType == DataLog_DataType_Float)
 800fe32:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fe36:	4613      	mov	r3, r2
 800fe38:	00db      	lsls	r3, r3, #3
 800fe3a:	4413      	add	r3, r2
 800fe3c:	011b      	lsls	r3, r3, #4
 800fe3e:	461a      	mov	r2, r3
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	4413      	add	r3, r2
 800fe44:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800fe48:	2b01      	cmp	r3, #1
 800fe4a:	f040 80b9 	bne.w	800ffc0 <Display_DriveSTD+0x16ec>
				{
					uint8_t decimalDigit = data[rect].decimalDigits;
 800fe4e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fe52:	4613      	mov	r3, r2
 800fe54:	00db      	lsls	r3, r3, #3
 800fe56:	4413      	add	r3, r2
 800fe58:	011b      	lsls	r3, r3, #4
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	4413      	add	r3, r2
 800fe60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fe64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

					if(decimalDigit > 3)
 800fe68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe6c:	2b03      	cmp	r3, #3
 800fe6e:	d902      	bls.n	800fe76 <Display_DriveSTD+0x15a2>
						decimalDigit = 3;
 800fe70:	2303      	movs	r3, #3
 800fe72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

					if(data[rect].dataRefreshDelay == 0 || millis >= data[rect].dataRefreshMillis + data[rect].dataRefreshDelay)
 800fe76:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fe7a:	4613      	mov	r3, r2
 800fe7c:	00db      	lsls	r3, r3, #3
 800fe7e:	4413      	add	r3, r2
 800fe80:	011b      	lsls	r3, r3, #4
 800fe82:	461a      	mov	r2, r3
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	4413      	add	r3, r2
 800fe88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d019      	beq.n	800fec4 <Display_DriveSTD+0x15f0>
 800fe90:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fe94:	4613      	mov	r3, r2
 800fe96:	00db      	lsls	r3, r3, #3
 800fe98:	4413      	add	r3, r2
 800fe9a:	011b      	lsls	r3, r3, #4
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	4413      	add	r3, r2
 800fea2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800fea4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fea8:	4613      	mov	r3, r2
 800feaa:	00db      	lsls	r3, r3, #3
 800feac:	4413      	add	r3, r2
 800feae:	011b      	lsls	r3, r3, #4
 800feb0:	461a      	mov	r2, r3
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	4413      	add	r3, r2
 800feb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800feba:	18ca      	adds	r2, r1, r3
 800febc:	4b3f      	ldr	r3, [pc, #252]	; (800ffbc <Display_DriveSTD+0x16e8>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d824      	bhi.n	800ff0e <Display_DriveSTD+0x163a>
					{
						data[rect].dataLogFloat.number = *((float*) data[rect].dataPointer);
 800fec4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fec8:	4613      	mov	r3, r2
 800feca:	00db      	lsls	r3, r3, #3
 800fecc:	4413      	add	r3, r2
 800fece:	011b      	lsls	r3, r3, #4
 800fed0:	461a      	mov	r2, r3
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	4413      	add	r3, r2
 800fed6:	691b      	ldr	r3, [r3, #16]
 800fed8:	edd3 7a00 	vldr	s15, [r3]
 800fedc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fee0:	4613      	mov	r3, r2
 800fee2:	00db      	lsls	r3, r3, #3
 800fee4:	4413      	add	r3, r2
 800fee6:	011b      	lsls	r3, r3, #4
 800fee8:	461a      	mov	r2, r3
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	4413      	add	r3, r2
 800feee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fef2:	ed83 7b08 	vstr	d7, [r3, #32]
						data[rect].dataRefreshMillis = millis;
 800fef6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fefa:	4613      	mov	r3, r2
 800fefc:	00db      	lsls	r3, r3, #3
 800fefe:	4413      	add	r3, r2
 800ff00:	011b      	lsls	r3, r3, #4
 800ff02:	461a      	mov	r2, r3
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	4413      	add	r3, r2
 800ff08:	4a2c      	ldr	r2, [pc, #176]	; (800ffbc <Display_DriveSTD+0x16e8>)
 800ff0a:	6812      	ldr	r2, [r2, #0]
 800ff0c:	665a      	str	r2, [r3, #100]	; 0x64
					}

					GUI_DrawNumAt(x, y + 20 + DriveSTD_DataOffset_y, &DriveSTD_DataFont, data[rect].dataColor, backColor, &data[rect].dataLogFloat, UNDEFINED_NINT, decimalDigit, data[rect].signEnable, DISABLE, CENTER, data[rect].intStr, data[rect].endStr);
 800ff0e:	f9b7 5028 	ldrsh.w	r5, [r7, #40]	; 0x28
 800ff12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ff14:	3316      	adds	r3, #22
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	b21e      	sxth	r6, r3
 800ff1a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ff1e:	4613      	mov	r3, r2
 800ff20:	00db      	lsls	r3, r3, #3
 800ff22:	4413      	add	r3, r2
 800ff24:	011b      	lsls	r3, r3, #4
 800ff26:	461a      	mov	r2, r3
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	4413      	add	r3, r2
 800ff2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff2e:	607b      	str	r3, [r7, #4]
 800ff30:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ff34:	4613      	mov	r3, r2
 800ff36:	00db      	lsls	r3, r3, #3
 800ff38:	4413      	add	r3, r2
 800ff3a:	011b      	lsls	r3, r3, #4
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	4413      	add	r3, r2
 800ff42:	f103 0120 	add.w	r1, r3, #32
 800ff46:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ff4a:	4613      	mov	r3, r2
 800ff4c:	00db      	lsls	r3, r3, #3
 800ff4e:	4413      	add	r3, r2
 800ff50:	011b      	lsls	r3, r3, #4
 800ff52:	461a      	mov	r2, r3
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	4413      	add	r3, r2
 800ff58:	f893 004d 	ldrb.w	r0, [r3, #77]	; 0x4d
 800ff5c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ff60:	4613      	mov	r3, r2
 800ff62:	00db      	lsls	r3, r3, #3
 800ff64:	4413      	add	r3, r2
 800ff66:	011b      	lsls	r3, r3, #4
 800ff68:	461a      	mov	r2, r3
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	689c      	ldr	r4, [r3, #8]
 800ff70:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ff74:	4613      	mov	r3, r2
 800ff76:	00db      	lsls	r3, r3, #3
 800ff78:	4413      	add	r3, r2
 800ff7a:	011b      	lsls	r3, r3, #4
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	4413      	add	r3, r2
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	9308      	str	r3, [sp, #32]
 800ff86:	9407      	str	r4, [sp, #28]
 800ff88:	2302      	movs	r3, #2
 800ff8a:	9306      	str	r3, [sp, #24]
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	9305      	str	r3, [sp, #20]
 800ff90:	9004      	str	r0, [sp, #16]
 800ff92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff96:	9303      	str	r3, [sp, #12]
 800ff98:	f04f 33ff 	mov.w	r3, #4294967295
 800ff9c:	9302      	str	r3, [sp, #8]
 800ff9e:	9101      	str	r1, [sp, #4]
 800ffa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffa2:	9300      	str	r3, [sp, #0]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	4a04      	ldr	r2, [pc, #16]	; (800ffb8 <Display_DriveSTD+0x16e4>)
 800ffa8:	4631      	mov	r1, r6
 800ffaa:	4628      	mov	r0, r5
 800ffac:	f005 fc9c 	bl	80158e8 <GUI_DrawNumAt>
 800ffb0:	e0a9      	b.n	8010106 <Display_DriveSTD+0x1832>
 800ffb2:	bf00      	nop
 800ffb4:	200069c4 	.word	0x200069c4
 800ffb8:	080e180c 	.word	0x080e180c
 800ffbc:	20006a98 	.word	0x20006a98
				}
				else if(data[rect].dataType == DataLog_DataType_Int)
 800ffc0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ffc4:	4613      	mov	r3, r2
 800ffc6:	00db      	lsls	r3, r3, #3
 800ffc8:	4413      	add	r3, r2
 800ffca:	011b      	lsls	r3, r3, #4
 800ffcc:	461a      	mov	r2, r3
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	4413      	add	r3, r2
 800ffd2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	f040 8092 	bne.w	8010100 <Display_DriveSTD+0x182c>
				{
					if(data[rect].dataRefreshDelay == 0 || millis >= data[rect].dataRefreshMillis + data[rect].dataRefreshDelay)
 800ffdc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ffe0:	4613      	mov	r3, r2
 800ffe2:	00db      	lsls	r3, r3, #3
 800ffe4:	4413      	add	r3, r2
 800ffe6:	011b      	lsls	r3, r3, #4
 800ffe8:	461a      	mov	r2, r3
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	4413      	add	r3, r2
 800ffee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d019      	beq.n	801002a <Display_DriveSTD+0x1756>
 800fff6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fffa:	4613      	mov	r3, r2
 800fffc:	00db      	lsls	r3, r3, #3
 800fffe:	4413      	add	r3, r2
 8010000:	011b      	lsls	r3, r3, #4
 8010002:	461a      	mov	r2, r3
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	4413      	add	r3, r2
 8010008:	6e59      	ldr	r1, [r3, #100]	; 0x64
 801000a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 801000e:	4613      	mov	r3, r2
 8010010:	00db      	lsls	r3, r3, #3
 8010012:	4413      	add	r3, r2
 8010014:	011b      	lsls	r3, r3, #4
 8010016:	461a      	mov	r2, r3
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	4413      	add	r3, r2
 801001c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010020:	18ca      	adds	r2, r1, r3
 8010022:	4b5e      	ldr	r3, [pc, #376]	; (801019c <Display_DriveSTD+0x18c8>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	429a      	cmp	r2, r3
 8010028:	d820      	bhi.n	801006c <Display_DriveSTD+0x1798>
					{
						data[rect].dataLogInt.number = *((int32_t*) data[rect].dataPointer);
 801002a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 801002e:	4613      	mov	r3, r2
 8010030:	00db      	lsls	r3, r3, #3
 8010032:	4413      	add	r3, r2
 8010034:	011b      	lsls	r3, r3, #4
 8010036:	461a      	mov	r2, r3
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	4413      	add	r3, r2
 801003c:	6919      	ldr	r1, [r3, #16]
 801003e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8010042:	4613      	mov	r3, r2
 8010044:	00db      	lsls	r3, r3, #3
 8010046:	4413      	add	r3, r2
 8010048:	011b      	lsls	r3, r3, #4
 801004a:	461a      	mov	r2, r3
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	4413      	add	r3, r2
 8010050:	680a      	ldr	r2, [r1, #0]
 8010052:	615a      	str	r2, [r3, #20]
						data[rect].dataRefreshMillis = millis;
 8010054:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8010058:	4613      	mov	r3, r2
 801005a:	00db      	lsls	r3, r3, #3
 801005c:	4413      	add	r3, r2
 801005e:	011b      	lsls	r3, r3, #4
 8010060:	461a      	mov	r2, r3
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	4413      	add	r3, r2
 8010066:	4a4d      	ldr	r2, [pc, #308]	; (801019c <Display_DriveSTD+0x18c8>)
 8010068:	6812      	ldr	r2, [r2, #0]
 801006a:	665a      	str	r2, [r3, #100]	; 0x64
					}

					GUI_DrawNumAt_Dec(x, y + 20 + DriveSTD_DataOffset_y, &DriveSTD_DataFont, data[rect].dataColor, backColor, &data[rect].dataLogInt, data[rect].signEnable, CENTER, data[rect].intStr, data[rect].endStr);
 801006c:	f9b7 5028 	ldrsh.w	r5, [r7, #40]	; 0x28
 8010070:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010072:	3316      	adds	r3, #22
 8010074:	b29b      	uxth	r3, r3
 8010076:	b21e      	sxth	r6, r3
 8010078:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 801007c:	4613      	mov	r3, r2
 801007e:	00db      	lsls	r3, r3, #3
 8010080:	4413      	add	r3, r2
 8010082:	011b      	lsls	r3, r3, #4
 8010084:	461a      	mov	r2, r3
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	4413      	add	r3, r2
 801008a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801008c:	607b      	str	r3, [r7, #4]
 801008e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8010092:	4613      	mov	r3, r2
 8010094:	00db      	lsls	r3, r3, #3
 8010096:	4413      	add	r3, r2
 8010098:	011b      	lsls	r3, r3, #4
 801009a:	461a      	mov	r2, r3
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	4413      	add	r3, r2
 80100a0:	f103 0114 	add.w	r1, r3, #20
 80100a4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80100a8:	4613      	mov	r3, r2
 80100aa:	00db      	lsls	r3, r3, #3
 80100ac:	4413      	add	r3, r2
 80100ae:	011b      	lsls	r3, r3, #4
 80100b0:	461a      	mov	r2, r3
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	4413      	add	r3, r2
 80100b6:	f893 004d 	ldrb.w	r0, [r3, #77]	; 0x4d
 80100ba:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80100be:	4613      	mov	r3, r2
 80100c0:	00db      	lsls	r3, r3, #3
 80100c2:	4413      	add	r3, r2
 80100c4:	011b      	lsls	r3, r3, #4
 80100c6:	461a      	mov	r2, r3
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	4413      	add	r3, r2
 80100cc:	689c      	ldr	r4, [r3, #8]
 80100ce:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80100d2:	4613      	mov	r3, r2
 80100d4:	00db      	lsls	r3, r3, #3
 80100d6:	4413      	add	r3, r2
 80100d8:	011b      	lsls	r3, r3, #4
 80100da:	461a      	mov	r2, r3
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	4413      	add	r3, r2
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	9305      	str	r3, [sp, #20]
 80100e4:	9404      	str	r4, [sp, #16]
 80100e6:	2302      	movs	r3, #2
 80100e8:	9303      	str	r3, [sp, #12]
 80100ea:	9002      	str	r0, [sp, #8]
 80100ec:	9101      	str	r1, [sp, #4]
 80100ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100f0:	9300      	str	r3, [sp, #0]
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	4a2a      	ldr	r2, [pc, #168]	; (80101a0 <Display_DriveSTD+0x18cc>)
 80100f6:	4631      	mov	r1, r6
 80100f8:	4628      	mov	r0, r5
 80100fa:	f007 fd71 	bl	8017be0 <GUI_DrawNumAt_Dec>
 80100fe:	e002      	b.n	8010106 <Display_DriveSTD+0x1832>
				}
				else dataError = 1;
 8010100:	2301      	movs	r3, #1
 8010102:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			}

		}

		if(dataError != 0)
 8010106:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 801010a:	2b00      	cmp	r3, #0
 801010c:	d012      	beq.n	8010134 <Display_DriveSTD+0x1860>
		{

			GUI_SetColor(GUI_RED);
 801010e:	20ff      	movs	r0, #255	; 0xff
 8010110:	f00c fe0c 	bl	801cd2c <GUI_SetColor>
			GUI_SetBkColor(GUI_BLACK);
 8010114:	2000      	movs	r0, #0
 8010116:	f00c fe07 	bl	801cd28 <GUI_SetBkColor>
			GUI_SetFont(&DriveSTD_TextFont);
 801011a:	4822      	ldr	r0, [pc, #136]	; (80101a4 <Display_DriveSTD+0x18d0>)
 801011c:	f00c fdd8 	bl	801ccd0 <GUI_SetFont>
			GUI_SetTextAlign(GUI_TA_HCENTER);
 8010120:	2002      	movs	r0, #2
 8010122:	f00c fdcb 	bl	801ccbc <GUI_SetTextAlign>

			GUI_DispStringAt("ERR", x, y + 14);
 8010126:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8010128:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801012a:	330e      	adds	r3, #14
 801012c:	461a      	mov	r2, r3
 801012e:	481e      	ldr	r0, [pc, #120]	; (80101a8 <Display_DriveSTD+0x18d4>)
 8010130:	f00d fcda 	bl	801dae8 <GUI_DispStringAt>
		}


		data[rect].oldValueStatus = dataInRange;
 8010134:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8010138:	4613      	mov	r3, r2
 801013a:	00db      	lsls	r3, r3, #3
 801013c:	4413      	add	r3, r2
 801013e:	011b      	lsls	r3, r3, #4
 8010140:	461a      	mov	r2, r3
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	4413      	add	r3, r2
 8010146:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 801014a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

		data[rect].lastExeTime = millis;
 801014e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8010152:	4613      	mov	r3, r2
 8010154:	00db      	lsls	r3, r3, #3
 8010156:	4413      	add	r3, r2
 8010158:	011b      	lsls	r3, r3, #4
 801015a:	461a      	mov	r2, r3
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	4413      	add	r3, r2
 8010160:	4a0e      	ldr	r2, [pc, #56]	; (801019c <Display_DriveSTD+0x18c8>)
 8010162:	6812      	ldr	r2, [r2, #0]
 8010164:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8010168:	e000      	b.n	801016c <Display_DriveSTD+0x1898>
			goto END_OF_FOR;
 801016a:	bf00      	nop
	for(uint8_t rect = 0; rect < 13; rect++)
 801016c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010170:	3301      	adds	r3, #1
 8010172:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010176:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801017a:	2b0c      	cmp	r3, #12
 801017c:	f67e ad5e 	bls.w	800ec3c <Display_DriveSTD+0x368>



//CORE FUNCTION END

	Display_Frame(frameColor);
 8010180:	68b8      	ldr	r0, [r7, #8]
 8010182:	f000 f815 	bl	80101b0 <Display_Frame>
	Display_Armature();
 8010186:	f000 f82e 	bl	80101e6 <Display_Armature>

	guiLastMillis = millis;
 801018a:	4b04      	ldr	r3, [pc, #16]	; (801019c <Display_DriveSTD+0x18c8>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	4a07      	ldr	r2, [pc, #28]	; (80101ac <Display_DriveSTD+0x18d8>)
 8010190:	6013      	str	r3, [r2, #0]
}
 8010192:	bf00      	nop
 8010194:	3754      	adds	r7, #84	; 0x54
 8010196:	46bd      	mov	sp, r7
 8010198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801019a:	bf00      	nop
 801019c:	20006a98 	.word	0x20006a98
 80101a0:	080e180c 	.word	0x080e180c
 80101a4:	080db4e0 	.word	0x080db4e0
 80101a8:	080226d0 	.word	0x080226d0
 80101ac:	200069a4 	.word	0x200069a4

080101b0 <Display_Frame>:



void Display_Frame(uint32_t color)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
	GUI_SetColor(color);
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f00c fdb7 	bl	801cd2c <GUI_SetColor>

	//main rect (frame)
	GUI_DrawRect(1, 1, 479, 271);
 80101be:	f240 130f 	movw	r3, #271	; 0x10f
 80101c2:	f240 12df 	movw	r2, #479	; 0x1df
 80101c6:	2101      	movs	r1, #1
 80101c8:	2001      	movs	r0, #1
 80101ca:	f00e fe43 	bl	801ee54 <GUI_DrawRect>
	GUI_DrawRect(2, 2, 478, 270);
 80101ce:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80101d2:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80101d6:	2102      	movs	r1, #2
 80101d8:	2002      	movs	r0, #2
 80101da:	f00e fe3b 	bl	801ee54 <GUI_DrawRect>

	//GUI_AA_DisableHiRes();
	//GUI_SetPenSize(1);
}
 80101de:	bf00      	nop
 80101e0:	3708      	adds	r7, #8
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}

080101e6 <Display_Armature>:


void Display_Armature(void)
{
 80101e6:	b580      	push	{r7, lr}
 80101e8:	af00      	add	r7, sp, #0
	//GUI_SetColor(GUI_GREEN);
	GUI_SetColor(GUI_WHITE);
 80101ea:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80101ee:	f00c fd9d 	bl	801cd2c <GUI_SetColor>

	//Horizontal lines
	GUI_DrawLine(3, 				34, 				477, 				34);
 80101f2:	2322      	movs	r3, #34	; 0x22
 80101f4:	f240 12dd 	movw	r2, #477	; 0x1dd
 80101f8:	2122      	movs	r1, #34	; 0x22
 80101fa:	2003      	movs	r0, #3
 80101fc:	f00d f91e 	bl	801d43c <GUI_DrawLine>
	GUI_DrawLine(3, 				34 + 52, 			477, 				34 + 52);
 8010200:	2356      	movs	r3, #86	; 0x56
 8010202:	f240 12dd 	movw	r2, #477	; 0x1dd
 8010206:	2156      	movs	r1, #86	; 0x56
 8010208:	2003      	movs	r0, #3
 801020a:	f00d f917 	bl	801d43c <GUI_DrawLine>

	GUI_DrawLine(3, 				34 + 52 + 1*61, 	2 + 2*95, 			34 + 52 + 1*61);
 801020e:	2393      	movs	r3, #147	; 0x93
 8010210:	22c0      	movs	r2, #192	; 0xc0
 8010212:	2193      	movs	r1, #147	; 0x93
 8010214:	2003      	movs	r0, #3
 8010216:	f00d f911 	bl	801d43c <GUI_DrawLine>
	GUI_DrawLine(3 + 3*95, 			34 + 52 + 1*61, 	477, 				34 + 52 + 1*61);
 801021a:	2393      	movs	r3, #147	; 0x93
 801021c:	f240 12dd 	movw	r2, #477	; 0x1dd
 8010220:	2193      	movs	r1, #147	; 0x93
 8010222:	f44f 7090 	mov.w	r0, #288	; 0x120
 8010226:	f00d f909 	bl	801d43c <GUI_DrawLine>

	GUI_DrawLine(3, 				34 + 52 + 2*61, 	477, 				34 + 52 + 2*61);
 801022a:	23d0      	movs	r3, #208	; 0xd0
 801022c:	f240 12dd 	movw	r2, #477	; 0x1dd
 8010230:	21d0      	movs	r1, #208	; 0xd0
 8010232:	2003      	movs	r0, #3
 8010234:	f00d f902 	bl	801d43c <GUI_DrawLine>

	//Vertical lines
	GUI_DrawLine(2 + 2*88 - 1,	 	25 + 9, 			2 + 2*88 - 1, 			25 + 9 + 52);
 8010238:	2356      	movs	r3, #86	; 0x56
 801023a:	22b1      	movs	r2, #177	; 0xb1
 801023c:	2122      	movs	r1, #34	; 0x22
 801023e:	20b1      	movs	r0, #177	; 0xb1
 8010240:	f00d f8fc 	bl	801d43c <GUI_DrawLine>
	GUI_DrawLine(480 - 2 - 2*88 + 1,25 + 9, 			480 - 2 - 2*88 + 1, 	25 + 9 + 52);
 8010244:	2356      	movs	r3, #86	; 0x56
 8010246:	f240 122f 	movw	r2, #303	; 0x12f
 801024a:	2122      	movs	r1, #34	; 0x22
 801024c:	f240 102f 	movw	r0, #303	; 0x12f
 8010250:	f00d f8f4 	bl	801d43c <GUI_DrawLine>

	GUI_DrawLine(2 + 1*95, 			25 + 9 + 52, 		2 + 1*95, 			270);
 8010254:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8010258:	2261      	movs	r2, #97	; 0x61
 801025a:	2156      	movs	r1, #86	; 0x56
 801025c:	2061      	movs	r0, #97	; 0x61
 801025e:	f00d f8ed 	bl	801d43c <GUI_DrawLine>
	GUI_DrawLine(2 + 2*95, 			25 + 9 + 52, 		2 + 2*95, 			270);
 8010262:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8010266:	22c0      	movs	r2, #192	; 0xc0
 8010268:	2156      	movs	r1, #86	; 0x56
 801026a:	20c0      	movs	r0, #192	; 0xc0
 801026c:	f00d f8e6 	bl	801d43c <GUI_DrawLine>
	GUI_DrawLine(2 + 3*95 + 1, 		25 + 9 + 52, 		2 + 3*95 + 1, 		270);
 8010270:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8010274:	f44f 7290 	mov.w	r2, #288	; 0x120
 8010278:	2156      	movs	r1, #86	; 0x56
 801027a:	f44f 7090 	mov.w	r0, #288	; 0x120
 801027e:	f00d f8dd 	bl	801d43c <GUI_DrawLine>
	GUI_DrawLine(2 + 4*95 + 1, 		25 + 9 + 52, 		2 + 4*95 + 1, 		270);
 8010282:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8010286:	f240 127f 	movw	r2, #383	; 0x17f
 801028a:	2156      	movs	r1, #86	; 0x56
 801028c:	f240 107f 	movw	r0, #383	; 0x17f
 8010290:	f00d f8d4 	bl	801d43c <GUI_DrawLine>
}
 8010294:	bf00      	nop
 8010296:	bd80      	pop	{r7, pc}

08010298 <Display_OldRpmBar>:
#endif



void Display_OldRpmBar(uint16_t x, uint16_t y, uint16_t sizeX, uint16_t sizeY, uint16_t rpm, uint16_t minRpm, uint16_t rpm1, uint16_t rpm2, uint16_t maxRpm)
{
 8010298:	b590      	push	{r4, r7, lr}
 801029a:	b085      	sub	sp, #20
 801029c:	af00      	add	r7, sp, #0
 801029e:	4604      	mov	r4, r0
 80102a0:	4608      	mov	r0, r1
 80102a2:	4611      	mov	r1, r2
 80102a4:	461a      	mov	r2, r3
 80102a6:	4623      	mov	r3, r4
 80102a8:	80fb      	strh	r3, [r7, #6]
 80102aa:	4603      	mov	r3, r0
 80102ac:	80bb      	strh	r3, [r7, #4]
 80102ae:	460b      	mov	r3, r1
 80102b0:	807b      	strh	r3, [r7, #2]
 80102b2:	4613      	mov	r3, r2
 80102b4:	803b      	strh	r3, [r7, #0]
*/
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_LR(void)
{
  register uint32_t result;

  __ASM volatile ("MOV %0, LR\n" : "=r" (result) );
 80102b6:	4673      	mov	r3, lr
 80102b8:	461c      	mov	r4, r3
  return(result);
 80102ba:	4623      	mov	r3, r4
	static GUI_BarTypeDef rpmBar3 = {0};

	static uint8_t refreshFlag = 0;
	static uint32_t callerAddressOld = 0;

	uint32_t callerAddress = __get_LR();
 80102bc:	60fb      	str	r3, [r7, #12]


	if(refreshFlag == 0 || callerAddress != callerAddressOld)
 80102be:	4b97      	ldr	r3, [pc, #604]	; (801051c <Display_OldRpmBar+0x284>)
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d005      	beq.n	80102d2 <Display_OldRpmBar+0x3a>
 80102c6:	4b96      	ldr	r3, [pc, #600]	; (8010520 <Display_OldRpmBar+0x288>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	68fa      	ldr	r2, [r7, #12]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	f000 80c2 	beq.w	8010456 <Display_OldRpmBar+0x1be>
	{
		rpmBar1.x = x;
 80102d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80102d6:	4b93      	ldr	r3, [pc, #588]	; (8010524 <Display_OldRpmBar+0x28c>)
 80102d8:	801a      	strh	r2, [r3, #0]
		rpmBar1.y = y;
 80102da:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80102de:	4b91      	ldr	r3, [pc, #580]	; (8010524 <Display_OldRpmBar+0x28c>)
 80102e0:	805a      	strh	r2, [r3, #2]
		rpmBar1.size_x = sizeX * (rpm1 - minRpm) / (maxRpm - minRpm);
 80102e2:	887b      	ldrh	r3, [r7, #2]
 80102e4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80102e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80102e8:	1a8a      	subs	r2, r1, r2
 80102ea:	fb03 f202 	mul.w	r2, r3, r2
 80102ee:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80102f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102f2:	1acb      	subs	r3, r1, r3
 80102f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80102f8:	b29a      	uxth	r2, r3
 80102fa:	4b8a      	ldr	r3, [pc, #552]	; (8010524 <Display_OldRpmBar+0x28c>)
 80102fc:	809a      	strh	r2, [r3, #4]
		rpmBar1.size_y = sizeY;
 80102fe:	4a89      	ldr	r2, [pc, #548]	; (8010524 <Display_OldRpmBar+0x28c>)
 8010300:	883b      	ldrh	r3, [r7, #0]
 8010302:	80d3      	strh	r3, [r2, #6]
		rpmBar1.frameSize = 2;
 8010304:	4b87      	ldr	r3, [pc, #540]	; (8010524 <Display_OldRpmBar+0x28c>)
 8010306:	2202      	movs	r2, #2
 8010308:	761a      	strb	r2, [r3, #24]
		rpmBar1.frameColor = GUI_DARKBLUE;
 801030a:	4b86      	ldr	r3, [pc, #536]	; (8010524 <Display_OldRpmBar+0x28c>)
 801030c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8010310:	61da      	str	r2, [r3, #28]
		rpmBar1.backgroundColor = GUI_BLACK;
 8010312:	4b84      	ldr	r3, [pc, #528]	; (8010524 <Display_OldRpmBar+0x28c>)
 8010314:	2200      	movs	r2, #0
 8010316:	625a      	str	r2, [r3, #36]	; 0x24
		rpmBar1.barColor = GUI_BLUE;
 8010318:	4b82      	ldr	r3, [pc, #520]	; (8010524 <Display_OldRpmBar+0x28c>)
 801031a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 801031e:	621a      	str	r2, [r3, #32]
		rpmBar1.barMode = GUI_BAR_LTR;
 8010320:	4b80      	ldr	r3, [pc, #512]	; (8010524 <Display_OldRpmBar+0x28c>)
 8010322:	2202      	movs	r2, #2
 8010324:	721a      	strb	r2, [r3, #8]
		rpmBar1.maxValue = rpm1;
 8010326:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010328:	ee07 3a90 	vmov	s15, r3
 801032c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010330:	4b7c      	ldr	r3, [pc, #496]	; (8010524 <Display_OldRpmBar+0x28c>)
 8010332:	edc3 7a04 	vstr	s15, [r3, #16]
		rpmBar1.minValue = minRpm;
 8010336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010338:	ee07 3a90 	vmov	s15, r3
 801033c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010340:	4b78      	ldr	r3, [pc, #480]	; (8010524 <Display_OldRpmBar+0x28c>)
 8010342:	edc3 7a05 	vstr	s15, [r3, #20]


		rpmBar2.x = x + rpmBar1.size_x + 1;
 8010346:	4b77      	ldr	r3, [pc, #476]	; (8010524 <Display_OldRpmBar+0x28c>)
 8010348:	889a      	ldrh	r2, [r3, #4]
 801034a:	88fb      	ldrh	r3, [r7, #6]
 801034c:	4413      	add	r3, r2
 801034e:	b29b      	uxth	r3, r3
 8010350:	3301      	adds	r3, #1
 8010352:	b29b      	uxth	r3, r3
 8010354:	b21a      	sxth	r2, r3
 8010356:	4b74      	ldr	r3, [pc, #464]	; (8010528 <Display_OldRpmBar+0x290>)
 8010358:	801a      	strh	r2, [r3, #0]
		rpmBar2.y = y;
 801035a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801035e:	4b72      	ldr	r3, [pc, #456]	; (8010528 <Display_OldRpmBar+0x290>)
 8010360:	805a      	strh	r2, [r3, #2]
		rpmBar2.size_x = sizeX * (rpm2 - rpm1) / (maxRpm - minRpm);
 8010362:	887b      	ldrh	r3, [r7, #2]
 8010364:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8010366:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010368:	1a8a      	subs	r2, r1, r2
 801036a:	fb03 f202 	mul.w	r2, r3, r2
 801036e:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8010370:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010372:	1acb      	subs	r3, r1, r3
 8010374:	fb92 f3f3 	sdiv	r3, r2, r3
 8010378:	b29a      	uxth	r2, r3
 801037a:	4b6b      	ldr	r3, [pc, #428]	; (8010528 <Display_OldRpmBar+0x290>)
 801037c:	809a      	strh	r2, [r3, #4]
		rpmBar2.size_y = sizeY;
 801037e:	4a6a      	ldr	r2, [pc, #424]	; (8010528 <Display_OldRpmBar+0x290>)
 8010380:	883b      	ldrh	r3, [r7, #0]
 8010382:	80d3      	strh	r3, [r2, #6]
		rpmBar2.frameSize = 2;
 8010384:	4b68      	ldr	r3, [pc, #416]	; (8010528 <Display_OldRpmBar+0x290>)
 8010386:	2202      	movs	r2, #2
 8010388:	761a      	strb	r2, [r3, #24]
		rpmBar2.frameColor = GUI_DARKYELLOW;
 801038a:	4b67      	ldr	r3, [pc, #412]	; (8010528 <Display_OldRpmBar+0x290>)
 801038c:	f248 0280 	movw	r2, #32896	; 0x8080
 8010390:	61da      	str	r2, [r3, #28]
		rpmBar2.backgroundColor = GUI_BLACK;
 8010392:	4b65      	ldr	r3, [pc, #404]	; (8010528 <Display_OldRpmBar+0x290>)
 8010394:	2200      	movs	r2, #0
 8010396:	625a      	str	r2, [r3, #36]	; 0x24
		rpmBar2.barColor = GUI_YELLOW;
 8010398:	4b63      	ldr	r3, [pc, #396]	; (8010528 <Display_OldRpmBar+0x290>)
 801039a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801039e:	621a      	str	r2, [r3, #32]
		rpmBar2.barMode = GUI_BAR_LTR;
 80103a0:	4b61      	ldr	r3, [pc, #388]	; (8010528 <Display_OldRpmBar+0x290>)
 80103a2:	2202      	movs	r2, #2
 80103a4:	721a      	strb	r2, [r3, #8]
		rpmBar2.maxValue = rpm2;
 80103a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80103a8:	ee07 3a90 	vmov	s15, r3
 80103ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103b0:	4b5d      	ldr	r3, [pc, #372]	; (8010528 <Display_OldRpmBar+0x290>)
 80103b2:	edc3 7a04 	vstr	s15, [r3, #16]
		rpmBar2.minValue = rpm1;
 80103b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80103b8:	ee07 3a90 	vmov	s15, r3
 80103bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103c0:	4b59      	ldr	r3, [pc, #356]	; (8010528 <Display_OldRpmBar+0x290>)
 80103c2:	edc3 7a05 	vstr	s15, [r3, #20]


		rpmBar3.x = x + rpmBar1.size_x + rpmBar2.size_x + 2;
 80103c6:	4b57      	ldr	r3, [pc, #348]	; (8010524 <Display_OldRpmBar+0x28c>)
 80103c8:	889a      	ldrh	r2, [r3, #4]
 80103ca:	88fb      	ldrh	r3, [r7, #6]
 80103cc:	4413      	add	r3, r2
 80103ce:	b29a      	uxth	r2, r3
 80103d0:	4b55      	ldr	r3, [pc, #340]	; (8010528 <Display_OldRpmBar+0x290>)
 80103d2:	889b      	ldrh	r3, [r3, #4]
 80103d4:	4413      	add	r3, r2
 80103d6:	b29b      	uxth	r3, r3
 80103d8:	3302      	adds	r3, #2
 80103da:	b29b      	uxth	r3, r3
 80103dc:	b21a      	sxth	r2, r3
 80103de:	4b53      	ldr	r3, [pc, #332]	; (801052c <Display_OldRpmBar+0x294>)
 80103e0:	801a      	strh	r2, [r3, #0]
		rpmBar3.y = y;
 80103e2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80103e6:	4b51      	ldr	r3, [pc, #324]	; (801052c <Display_OldRpmBar+0x294>)
 80103e8:	805a      	strh	r2, [r3, #2]
		rpmBar3.size_x = sizeX * (maxRpm - rpm2) / (maxRpm - minRpm);
 80103ea:	887b      	ldrh	r3, [r7, #2]
 80103ec:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80103ee:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80103f0:	1a8a      	subs	r2, r1, r2
 80103f2:	fb03 f202 	mul.w	r2, r3, r2
 80103f6:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80103f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80103fa:	1acb      	subs	r3, r1, r3
 80103fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8010400:	b29a      	uxth	r2, r3
 8010402:	4b4a      	ldr	r3, [pc, #296]	; (801052c <Display_OldRpmBar+0x294>)
 8010404:	809a      	strh	r2, [r3, #4]
		rpmBar3.size_y = sizeY;
 8010406:	4a49      	ldr	r2, [pc, #292]	; (801052c <Display_OldRpmBar+0x294>)
 8010408:	883b      	ldrh	r3, [r7, #0]
 801040a:	80d3      	strh	r3, [r2, #6]
		rpmBar3.frameSize = 2;
 801040c:	4b47      	ldr	r3, [pc, #284]	; (801052c <Display_OldRpmBar+0x294>)
 801040e:	2202      	movs	r2, #2
 8010410:	761a      	strb	r2, [r3, #24]
		rpmBar3.frameColor = GUI_DARKRED;
 8010412:	4b46      	ldr	r3, [pc, #280]	; (801052c <Display_OldRpmBar+0x294>)
 8010414:	2280      	movs	r2, #128	; 0x80
 8010416:	61da      	str	r2, [r3, #28]
		rpmBar3.backgroundColor = GUI_BLACK;
 8010418:	4b44      	ldr	r3, [pc, #272]	; (801052c <Display_OldRpmBar+0x294>)
 801041a:	2200      	movs	r2, #0
 801041c:	625a      	str	r2, [r3, #36]	; 0x24
		rpmBar3.barColor = GUI_RED;
 801041e:	4b43      	ldr	r3, [pc, #268]	; (801052c <Display_OldRpmBar+0x294>)
 8010420:	22ff      	movs	r2, #255	; 0xff
 8010422:	621a      	str	r2, [r3, #32]
		rpmBar3.barMode = GUI_BAR_LTR;
 8010424:	4b41      	ldr	r3, [pc, #260]	; (801052c <Display_OldRpmBar+0x294>)
 8010426:	2202      	movs	r2, #2
 8010428:	721a      	strb	r2, [r3, #8]
		rpmBar3.maxValue = maxRpm;
 801042a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801042c:	ee07 3a90 	vmov	s15, r3
 8010430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010434:	4b3d      	ldr	r3, [pc, #244]	; (801052c <Display_OldRpmBar+0x294>)
 8010436:	edc3 7a04 	vstr	s15, [r3, #16]
		rpmBar3.minValue = rpm2;
 801043a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801043c:	ee07 3a90 	vmov	s15, r3
 8010440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010444:	4b39      	ldr	r3, [pc, #228]	; (801052c <Display_OldRpmBar+0x294>)
 8010446:	edc3 7a05 	vstr	s15, [r3, #20]

		refreshFlag = 1;
 801044a:	4b34      	ldr	r3, [pc, #208]	; (801051c <Display_OldRpmBar+0x284>)
 801044c:	2201      	movs	r2, #1
 801044e:	701a      	strb	r2, [r3, #0]



		callerAddressOld = callerAddress;
 8010450:	4a33      	ldr	r2, [pc, #204]	; (8010520 <Display_OldRpmBar+0x288>)
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	6013      	str	r3, [r2, #0]
	}

	if(rpm < 100)
 8010456:	8c3b      	ldrh	r3, [r7, #32]
 8010458:	2b63      	cmp	r3, #99	; 0x63
 801045a:	d818      	bhi.n	801048e <Display_OldRpmBar+0x1f6>
	{
		rpm = maxRpm;
 801045c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801045e:	843b      	strh	r3, [r7, #32]

		rpmBar1.frameColor = GUI_BLUE;
 8010460:	4b30      	ldr	r3, [pc, #192]	; (8010524 <Display_OldRpmBar+0x28c>)
 8010462:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8010466:	61da      	str	r2, [r3, #28]
		rpmBar1.barColor = GUI_DARKBLUE;
 8010468:	4b2e      	ldr	r3, [pc, #184]	; (8010524 <Display_OldRpmBar+0x28c>)
 801046a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801046e:	621a      	str	r2, [r3, #32]

		rpmBar2.frameColor = GUI_YELLOW;
 8010470:	4b2d      	ldr	r3, [pc, #180]	; (8010528 <Display_OldRpmBar+0x290>)
 8010472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010476:	61da      	str	r2, [r3, #28]
		rpmBar2.barColor = GUI_DARKYELLOW;
 8010478:	4b2b      	ldr	r3, [pc, #172]	; (8010528 <Display_OldRpmBar+0x290>)
 801047a:	f248 0280 	movw	r2, #32896	; 0x8080
 801047e:	621a      	str	r2, [r3, #32]

		rpmBar3.frameColor = GUI_RED;
 8010480:	4b2a      	ldr	r3, [pc, #168]	; (801052c <Display_OldRpmBar+0x294>)
 8010482:	22ff      	movs	r2, #255	; 0xff
 8010484:	61da      	str	r2, [r3, #28]
		rpmBar3.barColor = GUI_DARKRED;
 8010486:	4b29      	ldr	r3, [pc, #164]	; (801052c <Display_OldRpmBar+0x294>)
 8010488:	2280      	movs	r2, #128	; 0x80
 801048a:	621a      	str	r2, [r3, #32]
 801048c:	e015      	b.n	80104ba <Display_OldRpmBar+0x222>
	}
	else
	{
		rpmBar1.frameColor = GUI_DARKBLUE;
 801048e:	4b25      	ldr	r3, [pc, #148]	; (8010524 <Display_OldRpmBar+0x28c>)
 8010490:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8010494:	61da      	str	r2, [r3, #28]
		rpmBar1.barColor = GUI_BLUE;
 8010496:	4b23      	ldr	r3, [pc, #140]	; (8010524 <Display_OldRpmBar+0x28c>)
 8010498:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 801049c:	621a      	str	r2, [r3, #32]

		rpmBar2.frameColor = GUI_DARKYELLOW;
 801049e:	4b22      	ldr	r3, [pc, #136]	; (8010528 <Display_OldRpmBar+0x290>)
 80104a0:	f248 0280 	movw	r2, #32896	; 0x8080
 80104a4:	61da      	str	r2, [r3, #28]
		rpmBar2.barColor = GUI_YELLOW;
 80104a6:	4b20      	ldr	r3, [pc, #128]	; (8010528 <Display_OldRpmBar+0x290>)
 80104a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104ac:	621a      	str	r2, [r3, #32]

		rpmBar3.frameColor = GUI_DARKRED;
 80104ae:	4b1f      	ldr	r3, [pc, #124]	; (801052c <Display_OldRpmBar+0x294>)
 80104b0:	2280      	movs	r2, #128	; 0x80
 80104b2:	61da      	str	r2, [r3, #28]
		rpmBar3.barColor = GUI_RED;
 80104b4:	4b1d      	ldr	r3, [pc, #116]	; (801052c <Display_OldRpmBar+0x294>)
 80104b6:	22ff      	movs	r2, #255	; 0xff
 80104b8:	621a      	str	r2, [r3, #32]
	}


	GUI_Bar(&rpmBar1, (float) rpm);
 80104ba:	8c3b      	ldrh	r3, [r7, #32]
 80104bc:	ee07 3a90 	vmov	s15, r3
 80104c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104c4:	eeb0 0a67 	vmov.f32	s0, s15
 80104c8:	4816      	ldr	r0, [pc, #88]	; (8010524 <Display_OldRpmBar+0x28c>)
 80104ca:	f004 fc7b 	bl	8014dc4 <GUI_Bar>
	GUI_Bar(&rpmBar2, (float) rpm);
 80104ce:	8c3b      	ldrh	r3, [r7, #32]
 80104d0:	ee07 3a90 	vmov	s15, r3
 80104d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104d8:	eeb0 0a67 	vmov.f32	s0, s15
 80104dc:	4812      	ldr	r0, [pc, #72]	; (8010528 <Display_OldRpmBar+0x290>)
 80104de:	f004 fc71 	bl	8014dc4 <GUI_Bar>
	GUI_Bar(&rpmBar3, (float) rpm);
 80104e2:	8c3b      	ldrh	r3, [r7, #32]
 80104e4:	ee07 3a90 	vmov	s15, r3
 80104e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104ec:	eeb0 0a67 	vmov.f32	s0, s15
 80104f0:	480e      	ldr	r0, [pc, #56]	; (801052c <Display_OldRpmBar+0x294>)
 80104f2:	f004 fc67 	bl	8014dc4 <GUI_Bar>


	static uint32_t millisRefresh = 0;

	if (millis >= millisRefresh + 2000)
 80104f6:	4b0e      	ldr	r3, [pc, #56]	; (8010530 <Display_OldRpmBar+0x298>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80104fe:	4b0d      	ldr	r3, [pc, #52]	; (8010534 <Display_OldRpmBar+0x29c>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	429a      	cmp	r2, r3
 8010504:	d806      	bhi.n	8010514 <Display_OldRpmBar+0x27c>
	{
		refreshFlag = 0;
 8010506:	4b05      	ldr	r3, [pc, #20]	; (801051c <Display_OldRpmBar+0x284>)
 8010508:	2200      	movs	r2, #0
 801050a:	701a      	strb	r2, [r3, #0]
		millisRefresh = millis;
 801050c:	4b09      	ldr	r3, [pc, #36]	; (8010534 <Display_OldRpmBar+0x29c>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	4a07      	ldr	r2, [pc, #28]	; (8010530 <Display_OldRpmBar+0x298>)
 8010512:	6013      	str	r3, [r2, #0]
	}

}
 8010514:	bf00      	nop
 8010516:	3714      	adds	r7, #20
 8010518:	46bd      	mov	sp, r7
 801051a:	bd90      	pop	{r4, r7, pc}
 801051c:	200069c8 	.word	0x200069c8
 8010520:	200069cc 	.word	0x200069cc
 8010524:	200069d0 	.word	0x200069d0
 8010528:	20006a04 	.word	0x20006a04
 801052c:	20006a38 	.word	0x20006a38
 8010530:	20006a6c 	.word	0x20006a6c
 8010534:	20006a98 	.word	0x20006a98

08010538 <Display_OldRpmBar_STD>:


#define RPM_BAR_LENGTH_OFFSET	0

void Display_OldRpmBar_STD(uint16_t rpm)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b088      	sub	sp, #32
 801053c:	af06      	add	r7, sp, #24
 801053e:	4603      	mov	r3, r0
 8010540:	80fb      	strh	r3, [r7, #6]
	Display_OldRpmBar(3 + RPM_BAR_LENGTH_OFFSET, 23, 474 - RPM_BAR_LENGTH_OFFSET*2, 20, rpm, 0, 5500, 10500, 12500);
 8010542:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8010546:	9304      	str	r3, [sp, #16]
 8010548:	f642 1304 	movw	r3, #10500	; 0x2904
 801054c:	9303      	str	r3, [sp, #12]
 801054e:	f241 537c 	movw	r3, #5500	; 0x157c
 8010552:	9302      	str	r3, [sp, #8]
 8010554:	2300      	movs	r3, #0
 8010556:	9301      	str	r3, [sp, #4]
 8010558:	88fb      	ldrh	r3, [r7, #6]
 801055a:	9300      	str	r3, [sp, #0]
 801055c:	2314      	movs	r3, #20
 801055e:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8010562:	2117      	movs	r1, #23
 8010564:	2003      	movs	r0, #3
 8010566:	f7ff fe97 	bl	8010298 <Display_OldRpmBar>
}
 801056a:	bf00      	nop
 801056c:	3708      	adds	r7, #8
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
	...

08010574 <GUI_LaunchControlBar>:
#define BAR_X_SIZE		140
#define BAR_Y			198
#define BAR_Y_SIZE		20

void GUI_LaunchControlBar(uint8_t launchControlActived)
{
 8010574:	b590      	push	{r4, r7, lr}
 8010576:	b087      	sub	sp, #28
 8010578:	af04      	add	r7, sp, #16
 801057a:	4603      	mov	r3, r0
 801057c:	71fb      	strb	r3, [r7, #7]

	static uint8_t launchControlActivedOld = 99; //must be different of any possible value of launchControlActived
	static uint32_t millisRefresh = 0;

	static GUI_DrawStringAtTypeDef stringBar = {0};
	strcpy(stringBar.string, "Launch Control");
 801057e:	4a38      	ldr	r2, [pc, #224]	; (8010660 <GUI_LaunchControlBar+0xec>)
 8010580:	4b38      	ldr	r3, [pc, #224]	; (8010664 <GUI_LaunchControlBar+0xf0>)
 8010582:	4614      	mov	r4, r2
 8010584:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010586:	c407      	stmia	r4!, {r0, r1, r2}
 8010588:	8023      	strh	r3, [r4, #0]
 801058a:	3402      	adds	r4, #2
 801058c:	0c1b      	lsrs	r3, r3, #16
 801058e:	7023      	strb	r3, [r4, #0]


	if(millis - millisRefresh > 200)
 8010590:	4b35      	ldr	r3, [pc, #212]	; (8010668 <GUI_LaunchControlBar+0xf4>)
 8010592:	681a      	ldr	r2, [r3, #0]
 8010594:	4b35      	ldr	r3, [pc, #212]	; (801066c <GUI_LaunchControlBar+0xf8>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	1ad3      	subs	r3, r2, r3
 801059a:	2bc8      	cmp	r3, #200	; 0xc8
 801059c:	d905      	bls.n	80105aa <GUI_LaunchControlBar+0x36>
	{
		millisRefresh = 0;
 801059e:	4b33      	ldr	r3, [pc, #204]	; (801066c <GUI_LaunchControlBar+0xf8>)
 80105a0:	2200      	movs	r2, #0
 80105a2:	601a      	str	r2, [r3, #0]
		launchControlActivedOld = 99; //must be different from any possible value of launchControlActived
 80105a4:	4b32      	ldr	r3, [pc, #200]	; (8010670 <GUI_LaunchControlBar+0xfc>)
 80105a6:	2263      	movs	r2, #99	; 0x63
 80105a8:	701a      	strb	r2, [r3, #0]
	}


	if(launchControlActived != launchControlActivedOld || (millis > millisRefresh + delayRefresh))
 80105aa:	4b31      	ldr	r3, [pc, #196]	; (8010670 <GUI_LaunchControlBar+0xfc>)
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	79fa      	ldrb	r2, [r7, #7]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d108      	bne.n	80105c6 <GUI_LaunchControlBar+0x52>
 80105b4:	4b2d      	ldr	r3, [pc, #180]	; (801066c <GUI_LaunchControlBar+0xf8>)
 80105b6:	681a      	ldr	r2, [r3, #0]
 80105b8:	f242 7310 	movw	r3, #10000	; 0x2710
 80105bc:	4413      	add	r3, r2
 80105be:	4a2a      	ldr	r2, [pc, #168]	; (8010668 <GUI_LaunchControlBar+0xf4>)
 80105c0:	6812      	ldr	r2, [r2, #0]
 80105c2:	4293      	cmp	r3, r2
 80105c4:	d247      	bcs.n	8010656 <GUI_LaunchControlBar+0xe2>
	{
		if(launchControlActived)
 80105c6:	79fb      	ldrb	r3, [r7, #7]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d019      	beq.n	8010600 <GUI_LaunchControlBar+0x8c>
		{
			GUI_SetColor(GUI_GREEN);
 80105cc:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 80105d0:	f00c fbac 	bl	801cd2c <GUI_SetColor>
			GUI_FillRect(BAR_X, BAR_Y, BAR_X + BAR_X_SIZE, BAR_Y + BAR_Y_SIZE);
 80105d4:	23da      	movs	r3, #218	; 0xda
 80105d6:	f44f 729b 	mov.w	r2, #310	; 0x136
 80105da:	21c6      	movs	r1, #198	; 0xc6
 80105dc:	20aa      	movs	r0, #170	; 0xaa
 80105de:	f00c fcaf 	bl	801cf40 <GUI_FillRect>

			GUI_DrawStringAt(239, BAR_Y, &GUI_Font20_ASCII, GUI_WHITE, GUI_GREEN, &stringBar, CENTER);
 80105e2:	2302      	movs	r3, #2
 80105e4:	9302      	str	r3, [sp, #8]
 80105e6:	4b1e      	ldr	r3, [pc, #120]	; (8010660 <GUI_LaunchControlBar+0xec>)
 80105e8:	9301      	str	r3, [sp, #4]
 80105ea:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80105ee:	9300      	str	r3, [sp, #0]
 80105f0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80105f4:	4a1f      	ldr	r2, [pc, #124]	; (8010674 <GUI_LaunchControlBar+0x100>)
 80105f6:	21c6      	movs	r1, #198	; 0xc6
 80105f8:	20ef      	movs	r0, #239	; 0xef
 80105fa:	f007 fdc1 	bl	8018180 <GUI_DrawStringAt>
 80105fe:	e018      	b.n	8010632 <GUI_LaunchControlBar+0xbe>
		}
		else
		{
			GUI_SetColor(GUI_ORANGE);
 8010600:	f24a 50ff 	movw	r0, #42495	; 0xa5ff
 8010604:	f00c fb92 	bl	801cd2c <GUI_SetColor>
			GUI_FillRect(BAR_X, BAR_Y, BAR_X + BAR_X_SIZE, BAR_Y + BAR_Y_SIZE);
 8010608:	23da      	movs	r3, #218	; 0xda
 801060a:	f44f 729b 	mov.w	r2, #310	; 0x136
 801060e:	21c6      	movs	r1, #198	; 0xc6
 8010610:	20aa      	movs	r0, #170	; 0xaa
 8010612:	f00c fc95 	bl	801cf40 <GUI_FillRect>

			GUI_DrawStringAt(239, BAR_Y, &GUI_Font20_ASCII, GUI_WHITE, GUI_ORANGE, &stringBar, CENTER);
 8010616:	2302      	movs	r3, #2
 8010618:	9302      	str	r3, [sp, #8]
 801061a:	4b11      	ldr	r3, [pc, #68]	; (8010660 <GUI_LaunchControlBar+0xec>)
 801061c:	9301      	str	r3, [sp, #4]
 801061e:	f24a 53ff 	movw	r3, #42495	; 0xa5ff
 8010622:	9300      	str	r3, [sp, #0]
 8010624:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010628:	4a12      	ldr	r2, [pc, #72]	; (8010674 <GUI_LaunchControlBar+0x100>)
 801062a:	21c6      	movs	r1, #198	; 0xc6
 801062c:	20ef      	movs	r0, #239	; 0xef
 801062e:	f007 fda7 	bl	8018180 <GUI_DrawStringAt>
		}

		GUI_SetColor(GUI_WHITE);
 8010632:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010636:	f00c fb79 	bl	801cd2c <GUI_SetColor>
		GUI_SetBkColor(GUI_BLACK);
 801063a:	2000      	movs	r0, #0
 801063c:	f00c fb74 	bl	801cd28 <GUI_SetBkColor>

		launchControlActivedOld = launchControlActived;
 8010640:	4a0b      	ldr	r2, [pc, #44]	; (8010670 <GUI_LaunchControlBar+0xfc>)
 8010642:	79fb      	ldrb	r3, [r7, #7]
 8010644:	7013      	strb	r3, [r2, #0]
		millisRefresh = millis;
 8010646:	4b08      	ldr	r3, [pc, #32]	; (8010668 <GUI_LaunchControlBar+0xf4>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	4a08      	ldr	r2, [pc, #32]	; (801066c <GUI_LaunchControlBar+0xf8>)
 801064c:	6013      	str	r3, [r2, #0]
		GUI_SetColor(GUI_WHITE);
 801064e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010652:	f00c fb6b 	bl	801cd2c <GUI_SetColor>
	}
}
 8010656:	bf00      	nop
 8010658:	370c      	adds	r7, #12
 801065a:	46bd      	mov	sp, r7
 801065c:	bd90      	pop	{r4, r7, pc}
 801065e:	bf00      	nop
 8010660:	20006a70 	.word	0x20006a70
 8010664:	080226dc 	.word	0x080226dc
 8010668:	20006a98 	.word	0x20006a98
 801066c:	20006a94 	.word	0x20006a94
 8010670:	200000ee 	.word	0x200000ee
 8010674:	0812ab58 	.word	0x0812ab58

08010678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 801067c:	4b0b      	ldr	r3, [pc, #44]	; (80106ac <HAL_Init+0x34>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	4a0a      	ldr	r2, [pc, #40]	; (80106ac <HAL_Init+0x34>)
 8010682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010686:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010688:	4b08      	ldr	r3, [pc, #32]	; (80106ac <HAL_Init+0x34>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	4a07      	ldr	r2, [pc, #28]	; (80106ac <HAL_Init+0x34>)
 801068e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010694:	2003      	movs	r0, #3
 8010696:	f001 fbeb 	bl	8011e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801069a:	2000      	movs	r0, #0
 801069c:	f000 f808 	bl	80106b0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80106a0:	f7f6 f8ba 	bl	8006818 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80106a4:	2300      	movs	r3, #0
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	bd80      	pop	{r7, pc}
 80106aa:	bf00      	nop
 80106ac:	40023c00 	.word	0x40023c00

080106b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b082      	sub	sp, #8
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80106b8:	4b12      	ldr	r3, [pc, #72]	; (8010704 <HAL_InitTick+0x54>)
 80106ba:	681a      	ldr	r2, [r3, #0]
 80106bc:	4b12      	ldr	r3, [pc, #72]	; (8010708 <HAL_InitTick+0x58>)
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	4619      	mov	r1, r3
 80106c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80106c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80106ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80106ce:	4618      	mov	r0, r3
 80106d0:	f001 fc03 	bl	8011eda <HAL_SYSTICK_Config>
 80106d4:	4603      	mov	r3, r0
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d001      	beq.n	80106de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80106da:	2301      	movs	r3, #1
 80106dc:	e00e      	b.n	80106fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2b0f      	cmp	r3, #15
 80106e2:	d80a      	bhi.n	80106fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80106e4:	2200      	movs	r2, #0
 80106e6:	6879      	ldr	r1, [r7, #4]
 80106e8:	f04f 30ff 	mov.w	r0, #4294967295
 80106ec:	f001 fbcb 	bl	8011e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80106f0:	4a06      	ldr	r2, [pc, #24]	; (801070c <HAL_InitTick+0x5c>)
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80106f6:	2300      	movs	r3, #0
 80106f8:	e000      	b.n	80106fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80106fa:	2301      	movs	r3, #1
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3708      	adds	r7, #8
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}
 8010704:	20000040 	.word	0x20000040
 8010708:	200000f4 	.word	0x200000f4
 801070c:	200000f0 	.word	0x200000f0

08010710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010710:	b480      	push	{r7}
 8010712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010714:	4b06      	ldr	r3, [pc, #24]	; (8010730 <HAL_IncTick+0x20>)
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	461a      	mov	r2, r3
 801071a:	4b06      	ldr	r3, [pc, #24]	; (8010734 <HAL_IncTick+0x24>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	4413      	add	r3, r2
 8010720:	4a04      	ldr	r2, [pc, #16]	; (8010734 <HAL_IncTick+0x24>)
 8010722:	6013      	str	r3, [r2, #0]
}
 8010724:	bf00      	nop
 8010726:	46bd      	mov	sp, r7
 8010728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072c:	4770      	bx	lr
 801072e:	bf00      	nop
 8010730:	200000f4 	.word	0x200000f4
 8010734:	20006a98 	.word	0x20006a98

08010738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010738:	b480      	push	{r7}
 801073a:	af00      	add	r7, sp, #0
  return uwTick;
 801073c:	4b03      	ldr	r3, [pc, #12]	; (801074c <HAL_GetTick+0x14>)
 801073e:	681b      	ldr	r3, [r3, #0]
}
 8010740:	4618      	mov	r0, r3
 8010742:	46bd      	mov	sp, r7
 8010744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010748:	4770      	bx	lr
 801074a:	bf00      	nop
 801074c:	20006a98 	.word	0x20006a98

08010750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b084      	sub	sp, #16
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010758:	f7ff ffee 	bl	8010738 <HAL_GetTick>
 801075c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010768:	d005      	beq.n	8010776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801076a:	4b0a      	ldr	r3, [pc, #40]	; (8010794 <HAL_Delay+0x44>)
 801076c:	781b      	ldrb	r3, [r3, #0]
 801076e:	461a      	mov	r2, r3
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	4413      	add	r3, r2
 8010774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8010776:	bf00      	nop
 8010778:	f7ff ffde 	bl	8010738 <HAL_GetTick>
 801077c:	4602      	mov	r2, r0
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	1ad3      	subs	r3, r2, r3
 8010782:	68fa      	ldr	r2, [r7, #12]
 8010784:	429a      	cmp	r2, r3
 8010786:	d8f7      	bhi.n	8010778 <HAL_Delay+0x28>
  {
  }
}
 8010788:	bf00      	nop
 801078a:	bf00      	nop
 801078c:	3710      	adds	r7, #16
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	200000f4 	.word	0x200000f4

08010798 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b084      	sub	sp, #16
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80107a0:	2300      	movs	r3, #0
 80107a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d101      	bne.n	80107ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80107aa:	2301      	movs	r3, #1
 80107ac:	e031      	b.n	8010812 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d109      	bne.n	80107ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f7f4 f9fc 	bl	8004bb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2200      	movs	r2, #0
 80107c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2200      	movs	r2, #0
 80107c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ce:	f003 0310 	and.w	r3, r3, #16
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d116      	bne.n	8010804 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80107da:	4b10      	ldr	r3, [pc, #64]	; (801081c <HAL_ADC_Init+0x84>)
 80107dc:	4013      	ands	r3, r2
 80107de:	f043 0202 	orr.w	r2, r3, #2
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f000 fafe 	bl	8010de8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2200      	movs	r2, #0
 80107f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107f6:	f023 0303 	bic.w	r3, r3, #3
 80107fa:	f043 0201 	orr.w	r2, r3, #1
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	641a      	str	r2, [r3, #64]	; 0x40
 8010802:	e001      	b.n	8010808 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8010804:	2301      	movs	r3, #1
 8010806:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2200      	movs	r2, #0
 801080c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8010810:	7bfb      	ldrb	r3, [r7, #15]
}
 8010812:	4618      	mov	r0, r3
 8010814:	3710      	adds	r7, #16
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
 801081a:	bf00      	nop
 801081c:	ffffeefd 	.word	0xffffeefd

08010820 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8010820:	b480      	push	{r7}
 8010822:	b085      	sub	sp, #20
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8010828:	2300      	movs	r3, #0
 801082a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010832:	2b01      	cmp	r3, #1
 8010834:	d101      	bne.n	801083a <HAL_ADC_Start+0x1a>
 8010836:	2302      	movs	r3, #2
 8010838:	e0ad      	b.n	8010996 <HAL_ADC_Start+0x176>
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2201      	movs	r2, #1
 801083e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	689b      	ldr	r3, [r3, #8]
 8010848:	f003 0301 	and.w	r3, r3, #1
 801084c:	2b01      	cmp	r3, #1
 801084e:	d018      	beq.n	8010882 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	689a      	ldr	r2, [r3, #8]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	f042 0201 	orr.w	r2, r2, #1
 801085e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8010860:	4b50      	ldr	r3, [pc, #320]	; (80109a4 <HAL_ADC_Start+0x184>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	4a50      	ldr	r2, [pc, #320]	; (80109a8 <HAL_ADC_Start+0x188>)
 8010866:	fba2 2303 	umull	r2, r3, r2, r3
 801086a:	0c9a      	lsrs	r2, r3, #18
 801086c:	4613      	mov	r3, r2
 801086e:	005b      	lsls	r3, r3, #1
 8010870:	4413      	add	r3, r2
 8010872:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8010874:	e002      	b.n	801087c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	3b01      	subs	r3, #1
 801087a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d1f9      	bne.n	8010876 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	689b      	ldr	r3, [r3, #8]
 8010888:	f003 0301 	and.w	r3, r3, #1
 801088c:	2b01      	cmp	r3, #1
 801088e:	d175      	bne.n	801097c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010894:	4b45      	ldr	r3, [pc, #276]	; (80109ac <HAL_ADC_Start+0x18c>)
 8010896:	4013      	ands	r3, r2
 8010898:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	685b      	ldr	r3, [r3, #4]
 80108a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d007      	beq.n	80108be <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80108b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80108c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80108ca:	d106      	bne.n	80108da <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108d0:	f023 0206 	bic.w	r2, r3, #6
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	645a      	str	r2, [r3, #68]	; 0x44
 80108d8:	e002      	b.n	80108e0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2200      	movs	r2, #0
 80108de:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2200      	movs	r2, #0
 80108e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80108f0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80108f2:	4b2f      	ldr	r3, [pc, #188]	; (80109b0 <HAL_ADC_Start+0x190>)
 80108f4:	685b      	ldr	r3, [r3, #4]
 80108f6:	f003 031f 	and.w	r3, r3, #31
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d10f      	bne.n	801091e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	689b      	ldr	r3, [r3, #8]
 8010904:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010908:	2b00      	cmp	r3, #0
 801090a:	d143      	bne.n	8010994 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	689a      	ldr	r2, [r3, #8]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801091a:	609a      	str	r2, [r3, #8]
 801091c:	e03a      	b.n	8010994 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	4a24      	ldr	r2, [pc, #144]	; (80109b4 <HAL_ADC_Start+0x194>)
 8010924:	4293      	cmp	r3, r2
 8010926:	d10e      	bne.n	8010946 <HAL_ADC_Start+0x126>
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	689b      	ldr	r3, [r3, #8]
 801092e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010932:	2b00      	cmp	r3, #0
 8010934:	d107      	bne.n	8010946 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	689a      	ldr	r2, [r3, #8]
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8010944:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8010946:	4b1a      	ldr	r3, [pc, #104]	; (80109b0 <HAL_ADC_Start+0x190>)
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	f003 0310 	and.w	r3, r3, #16
 801094e:	2b00      	cmp	r3, #0
 8010950:	d120      	bne.n	8010994 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	4a18      	ldr	r2, [pc, #96]	; (80109b8 <HAL_ADC_Start+0x198>)
 8010958:	4293      	cmp	r3, r2
 801095a:	d11b      	bne.n	8010994 <HAL_ADC_Start+0x174>
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	689b      	ldr	r3, [r3, #8]
 8010962:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010966:	2b00      	cmp	r3, #0
 8010968:	d114      	bne.n	8010994 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	689a      	ldr	r2, [r3, #8]
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8010978:	609a      	str	r2, [r3, #8]
 801097a:	e00b      	b.n	8010994 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010980:	f043 0210 	orr.w	r2, r3, #16
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801098c:	f043 0201 	orr.w	r2, r3, #1
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8010994:	2300      	movs	r3, #0
}
 8010996:	4618      	mov	r0, r3
 8010998:	3714      	adds	r7, #20
 801099a:	46bd      	mov	sp, r7
 801099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a0:	4770      	bx	lr
 80109a2:	bf00      	nop
 80109a4:	20000040 	.word	0x20000040
 80109a8:	431bde83 	.word	0x431bde83
 80109ac:	fffff8fe 	.word	0xfffff8fe
 80109b0:	40012300 	.word	0x40012300
 80109b4:	40012000 	.word	0x40012000
 80109b8:	40012200 	.word	0x40012200

080109bc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80109bc:	b480      	push	{r7}
 80109be:	b083      	sub	sp, #12
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80109ca:	2b01      	cmp	r3, #1
 80109cc:	d101      	bne.n	80109d2 <HAL_ADC_Stop+0x16>
 80109ce:	2302      	movs	r3, #2
 80109d0:	e01f      	b.n	8010a12 <HAL_ADC_Stop+0x56>
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2201      	movs	r2, #1
 80109d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	689a      	ldr	r2, [r3, #8]
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f022 0201 	bic.w	r2, r2, #1
 80109e8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	689b      	ldr	r3, [r3, #8]
 80109f0:	f003 0301 	and.w	r3, r3, #1
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d107      	bne.n	8010a08 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80109fc:	4b08      	ldr	r3, [pc, #32]	; (8010a20 <HAL_ADC_Stop+0x64>)
 80109fe:	4013      	ands	r3, r2
 8010a00:	f043 0201 	orr.w	r2, r3, #1
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8010a10:	2300      	movs	r3, #0
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	370c      	adds	r7, #12
 8010a16:	46bd      	mov	sp, r7
 8010a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1c:	4770      	bx	lr
 8010a1e:	bf00      	nop
 8010a20:	ffffeefe 	.word	0xffffeefe

08010a24 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b084      	sub	sp, #16
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	689b      	ldr	r3, [r3, #8]
 8010a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a40:	d113      	bne.n	8010a6a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	689b      	ldr	r3, [r3, #8]
 8010a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8010a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a50:	d10b      	bne.n	8010a6a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a56:	f043 0220 	orr.w	r2, r3, #32
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2200      	movs	r2, #0
 8010a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8010a66:	2301      	movs	r3, #1
 8010a68:	e063      	b.n	8010b32 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8010a6a:	f7ff fe65 	bl	8010738 <HAL_GetTick>
 8010a6e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8010a70:	e021      	b.n	8010ab6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a78:	d01d      	beq.n	8010ab6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d007      	beq.n	8010a90 <HAL_ADC_PollForConversion+0x6c>
 8010a80:	f7ff fe5a 	bl	8010738 <HAL_GetTick>
 8010a84:	4602      	mov	r2, r0
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	1ad3      	subs	r3, r2, r3
 8010a8a:	683a      	ldr	r2, [r7, #0]
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d212      	bcs.n	8010ab6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	f003 0302 	and.w	r3, r3, #2
 8010a9a:	2b02      	cmp	r3, #2
 8010a9c:	d00b      	beq.n	8010ab6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aa2:	f043 0204 	orr.w	r2, r3, #4
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2200      	movs	r2, #0
 8010aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8010ab2:	2303      	movs	r3, #3
 8010ab4:	e03d      	b.n	8010b32 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	f003 0302 	and.w	r3, r3, #2
 8010ac0:	2b02      	cmp	r3, #2
 8010ac2:	d1d6      	bne.n	8010a72 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	f06f 0212 	mvn.w	r2, #18
 8010acc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ad2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	689b      	ldr	r3, [r3, #8]
 8010ae0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d123      	bne.n	8010b30 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d11f      	bne.n	8010b30 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010af6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d006      	beq.n	8010b0c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	689b      	ldr	r3, [r3, #8]
 8010b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d111      	bne.n	8010b30 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d105      	bne.n	8010b30 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b28:	f043 0201 	orr.w	r2, r3, #1
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8010b30:	2300      	movs	r3, #0
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3710      	adds	r7, #16
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}

08010b3a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8010b3a:	b480      	push	{r7}
 8010b3c:	b083      	sub	sp, #12
 8010b3e:	af00      	add	r7, sp, #0
 8010b40:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	370c      	adds	r7, #12
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr

08010b54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8010b54:	b480      	push	{r7}
 8010b56:	b085      	sub	sp, #20
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010b68:	2b01      	cmp	r3, #1
 8010b6a:	d101      	bne.n	8010b70 <HAL_ADC_ConfigChannel+0x1c>
 8010b6c:	2302      	movs	r3, #2
 8010b6e:	e12a      	b.n	8010dc6 <HAL_ADC_ConfigChannel+0x272>
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2201      	movs	r2, #1
 8010b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	2b09      	cmp	r3, #9
 8010b7e:	d93a      	bls.n	8010bf6 <HAL_ADC_ConfigChannel+0xa2>
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010b88:	d035      	beq.n	8010bf6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	68d9      	ldr	r1, [r3, #12]
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	b29b      	uxth	r3, r3
 8010b96:	461a      	mov	r2, r3
 8010b98:	4613      	mov	r3, r2
 8010b9a:	005b      	lsls	r3, r3, #1
 8010b9c:	4413      	add	r3, r2
 8010b9e:	3b1e      	subs	r3, #30
 8010ba0:	2207      	movs	r2, #7
 8010ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8010ba6:	43da      	mvns	r2, r3
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	400a      	ands	r2, r1
 8010bae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	4a87      	ldr	r2, [pc, #540]	; (8010dd4 <HAL_ADC_ConfigChannel+0x280>)
 8010bb6:	4293      	cmp	r3, r2
 8010bb8:	d10a      	bne.n	8010bd0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	68d9      	ldr	r1, [r3, #12]
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	689b      	ldr	r3, [r3, #8]
 8010bc4:	061a      	lsls	r2, r3, #24
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	430a      	orrs	r2, r1
 8010bcc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010bce:	e035      	b.n	8010c3c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	68d9      	ldr	r1, [r3, #12]
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	689a      	ldr	r2, [r3, #8]
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	4618      	mov	r0, r3
 8010be2:	4603      	mov	r3, r0
 8010be4:	005b      	lsls	r3, r3, #1
 8010be6:	4403      	add	r3, r0
 8010be8:	3b1e      	subs	r3, #30
 8010bea:	409a      	lsls	r2, r3
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	430a      	orrs	r2, r1
 8010bf2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010bf4:	e022      	b.n	8010c3c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	6919      	ldr	r1, [r3, #16]
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	b29b      	uxth	r3, r3
 8010c02:	461a      	mov	r2, r3
 8010c04:	4613      	mov	r3, r2
 8010c06:	005b      	lsls	r3, r3, #1
 8010c08:	4413      	add	r3, r2
 8010c0a:	2207      	movs	r2, #7
 8010c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8010c10:	43da      	mvns	r2, r3
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	400a      	ands	r2, r1
 8010c18:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	6919      	ldr	r1, [r3, #16]
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	689a      	ldr	r2, [r3, #8]
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	b29b      	uxth	r3, r3
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	005b      	lsls	r3, r3, #1
 8010c30:	4403      	add	r3, r0
 8010c32:	409a      	lsls	r2, r3
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	430a      	orrs	r2, r1
 8010c3a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	2b06      	cmp	r3, #6
 8010c42:	d824      	bhi.n	8010c8e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	685a      	ldr	r2, [r3, #4]
 8010c4e:	4613      	mov	r3, r2
 8010c50:	009b      	lsls	r3, r3, #2
 8010c52:	4413      	add	r3, r2
 8010c54:	3b05      	subs	r3, #5
 8010c56:	221f      	movs	r2, #31
 8010c58:	fa02 f303 	lsl.w	r3, r2, r3
 8010c5c:	43da      	mvns	r2, r3
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	400a      	ands	r2, r1
 8010c64:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	4618      	mov	r0, r3
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	685a      	ldr	r2, [r3, #4]
 8010c78:	4613      	mov	r3, r2
 8010c7a:	009b      	lsls	r3, r3, #2
 8010c7c:	4413      	add	r3, r2
 8010c7e:	3b05      	subs	r3, #5
 8010c80:	fa00 f203 	lsl.w	r2, r0, r3
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	430a      	orrs	r2, r1
 8010c8a:	635a      	str	r2, [r3, #52]	; 0x34
 8010c8c:	e04c      	b.n	8010d28 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	685b      	ldr	r3, [r3, #4]
 8010c92:	2b0c      	cmp	r3, #12
 8010c94:	d824      	bhi.n	8010ce0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	685a      	ldr	r2, [r3, #4]
 8010ca0:	4613      	mov	r3, r2
 8010ca2:	009b      	lsls	r3, r3, #2
 8010ca4:	4413      	add	r3, r2
 8010ca6:	3b23      	subs	r3, #35	; 0x23
 8010ca8:	221f      	movs	r2, #31
 8010caa:	fa02 f303 	lsl.w	r3, r2, r3
 8010cae:	43da      	mvns	r2, r3
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	400a      	ands	r2, r1
 8010cb6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	b29b      	uxth	r3, r3
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	685a      	ldr	r2, [r3, #4]
 8010cca:	4613      	mov	r3, r2
 8010ccc:	009b      	lsls	r3, r3, #2
 8010cce:	4413      	add	r3, r2
 8010cd0:	3b23      	subs	r3, #35	; 0x23
 8010cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	430a      	orrs	r2, r1
 8010cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8010cde:	e023      	b.n	8010d28 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	685a      	ldr	r2, [r3, #4]
 8010cea:	4613      	mov	r3, r2
 8010cec:	009b      	lsls	r3, r3, #2
 8010cee:	4413      	add	r3, r2
 8010cf0:	3b41      	subs	r3, #65	; 0x41
 8010cf2:	221f      	movs	r2, #31
 8010cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8010cf8:	43da      	mvns	r2, r3
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	400a      	ands	r2, r1
 8010d00:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	b29b      	uxth	r3, r3
 8010d0e:	4618      	mov	r0, r3
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	685a      	ldr	r2, [r3, #4]
 8010d14:	4613      	mov	r3, r2
 8010d16:	009b      	lsls	r3, r3, #2
 8010d18:	4413      	add	r3, r2
 8010d1a:	3b41      	subs	r3, #65	; 0x41
 8010d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	430a      	orrs	r2, r1
 8010d26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	4a2a      	ldr	r2, [pc, #168]	; (8010dd8 <HAL_ADC_ConfigChannel+0x284>)
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	d10a      	bne.n	8010d48 <HAL_ADC_ConfigChannel+0x1f4>
 8010d32:	683b      	ldr	r3, [r7, #0]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010d3a:	d105      	bne.n	8010d48 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8010d3c:	4b27      	ldr	r3, [pc, #156]	; (8010ddc <HAL_ADC_ConfigChannel+0x288>)
 8010d3e:	685b      	ldr	r3, [r3, #4]
 8010d40:	4a26      	ldr	r2, [pc, #152]	; (8010ddc <HAL_ADC_ConfigChannel+0x288>)
 8010d42:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8010d46:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	4a22      	ldr	r2, [pc, #136]	; (8010dd8 <HAL_ADC_ConfigChannel+0x284>)
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	d109      	bne.n	8010d66 <HAL_ADC_ConfigChannel+0x212>
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	2b12      	cmp	r3, #18
 8010d58:	d105      	bne.n	8010d66 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8010d5a:	4b20      	ldr	r3, [pc, #128]	; (8010ddc <HAL_ADC_ConfigChannel+0x288>)
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	4a1f      	ldr	r2, [pc, #124]	; (8010ddc <HAL_ADC_ConfigChannel+0x288>)
 8010d60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010d64:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	4a1b      	ldr	r2, [pc, #108]	; (8010dd8 <HAL_ADC_ConfigChannel+0x284>)
 8010d6c:	4293      	cmp	r3, r2
 8010d6e:	d125      	bne.n	8010dbc <HAL_ADC_ConfigChannel+0x268>
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	4a17      	ldr	r2, [pc, #92]	; (8010dd4 <HAL_ADC_ConfigChannel+0x280>)
 8010d76:	4293      	cmp	r3, r2
 8010d78:	d003      	beq.n	8010d82 <HAL_ADC_ConfigChannel+0x22e>
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	2b11      	cmp	r3, #17
 8010d80:	d11c      	bne.n	8010dbc <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8010d82:	4b16      	ldr	r3, [pc, #88]	; (8010ddc <HAL_ADC_ConfigChannel+0x288>)
 8010d84:	685b      	ldr	r3, [r3, #4]
 8010d86:	4a15      	ldr	r2, [pc, #84]	; (8010ddc <HAL_ADC_ConfigChannel+0x288>)
 8010d88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010d8c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	4a10      	ldr	r2, [pc, #64]	; (8010dd4 <HAL_ADC_ConfigChannel+0x280>)
 8010d94:	4293      	cmp	r3, r2
 8010d96:	d111      	bne.n	8010dbc <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8010d98:	4b11      	ldr	r3, [pc, #68]	; (8010de0 <HAL_ADC_ConfigChannel+0x28c>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	4a11      	ldr	r2, [pc, #68]	; (8010de4 <HAL_ADC_ConfigChannel+0x290>)
 8010d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8010da2:	0c9a      	lsrs	r2, r3, #18
 8010da4:	4613      	mov	r3, r2
 8010da6:	009b      	lsls	r3, r3, #2
 8010da8:	4413      	add	r3, r2
 8010daa:	005b      	lsls	r3, r3, #1
 8010dac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8010dae:	e002      	b.n	8010db6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	3b01      	subs	r3, #1
 8010db4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d1f9      	bne.n	8010db0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8010dc4:	2300      	movs	r3, #0
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3714      	adds	r7, #20
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd0:	4770      	bx	lr
 8010dd2:	bf00      	nop
 8010dd4:	10000012 	.word	0x10000012
 8010dd8:	40012000 	.word	0x40012000
 8010ddc:	40012300 	.word	0x40012300
 8010de0:	20000040 	.word	0x20000040
 8010de4:	431bde83 	.word	0x431bde83

08010de8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010de8:	b480      	push	{r7}
 8010dea:	b083      	sub	sp, #12
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8010df0:	4b78      	ldr	r3, [pc, #480]	; (8010fd4 <ADC_Init+0x1ec>)
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	4a77      	ldr	r2, [pc, #476]	; (8010fd4 <ADC_Init+0x1ec>)
 8010df6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8010dfa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8010dfc:	4b75      	ldr	r3, [pc, #468]	; (8010fd4 <ADC_Init+0x1ec>)
 8010dfe:	685a      	ldr	r2, [r3, #4]
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	685b      	ldr	r3, [r3, #4]
 8010e04:	4973      	ldr	r1, [pc, #460]	; (8010fd4 <ADC_Init+0x1ec>)
 8010e06:	4313      	orrs	r3, r2
 8010e08:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	685a      	ldr	r2, [r3, #4]
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010e18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	6859      	ldr	r1, [r3, #4]
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	691b      	ldr	r3, [r3, #16]
 8010e24:	021a      	lsls	r2, r3, #8
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	430a      	orrs	r2, r1
 8010e2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	685a      	ldr	r2, [r3, #4]
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8010e3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	6859      	ldr	r1, [r3, #4]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	689a      	ldr	r2, [r3, #8]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	430a      	orrs	r2, r1
 8010e4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	689a      	ldr	r2, [r3, #8]
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010e5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	6899      	ldr	r1, [r3, #8]
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	68da      	ldr	r2, [r3, #12]
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	430a      	orrs	r2, r1
 8010e70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e76:	4a58      	ldr	r2, [pc, #352]	; (8010fd8 <ADC_Init+0x1f0>)
 8010e78:	4293      	cmp	r3, r2
 8010e7a:	d022      	beq.n	8010ec2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	689a      	ldr	r2, [r3, #8]
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010e8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	6899      	ldr	r1, [r3, #8]
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	430a      	orrs	r2, r1
 8010e9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	689a      	ldr	r2, [r3, #8]
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010eac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	6899      	ldr	r1, [r3, #8]
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	430a      	orrs	r2, r1
 8010ebe:	609a      	str	r2, [r3, #8]
 8010ec0:	e00f      	b.n	8010ee2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	689a      	ldr	r2, [r3, #8]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010ed0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	689a      	ldr	r2, [r3, #8]
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010ee0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	689a      	ldr	r2, [r3, #8]
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	f022 0202 	bic.w	r2, r2, #2
 8010ef0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	6899      	ldr	r1, [r3, #8]
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	699b      	ldr	r3, [r3, #24]
 8010efc:	005a      	lsls	r2, r3, #1
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	430a      	orrs	r2, r1
 8010f04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d01b      	beq.n	8010f48 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	685a      	ldr	r2, [r3, #4]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010f1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	685a      	ldr	r2, [r3, #4]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8010f2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	6859      	ldr	r1, [r3, #4]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f3a:	3b01      	subs	r3, #1
 8010f3c:	035a      	lsls	r2, r3, #13
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	430a      	orrs	r2, r1
 8010f44:	605a      	str	r2, [r3, #4]
 8010f46:	e007      	b.n	8010f58 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	685a      	ldr	r2, [r3, #4]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010f56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8010f66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	69db      	ldr	r3, [r3, #28]
 8010f72:	3b01      	subs	r3, #1
 8010f74:	051a      	lsls	r2, r3, #20
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	430a      	orrs	r2, r1
 8010f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	689a      	ldr	r2, [r3, #8]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010f8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	6899      	ldr	r1, [r3, #8]
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f9a:	025a      	lsls	r2, r3, #9
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	430a      	orrs	r2, r1
 8010fa2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	689a      	ldr	r2, [r3, #8]
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010fb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	6899      	ldr	r1, [r3, #8]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	695b      	ldr	r3, [r3, #20]
 8010fbe:	029a      	lsls	r2, r3, #10
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	430a      	orrs	r2, r1
 8010fc6:	609a      	str	r2, [r3, #8]
}
 8010fc8:	bf00      	nop
 8010fca:	370c      	adds	r7, #12
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd2:	4770      	bx	lr
 8010fd4:	40012300 	.word	0x40012300
 8010fd8:	0f000001 	.word	0x0f000001

08010fdc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b084      	sub	sp, #16
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d101      	bne.n	8010fee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8010fea:	2301      	movs	r3, #1
 8010fec:	e0ed      	b.n	80111ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ff4:	b2db      	uxtb	r3, r3
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d102      	bne.n	8011000 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f7f3 fec8 	bl	8004d90 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	681a      	ldr	r2, [r3, #0]
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f022 0202 	bic.w	r2, r2, #2
 801100e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011010:	f7ff fb92 	bl	8010738 <HAL_GetTick>
 8011014:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8011016:	e012      	b.n	801103e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8011018:	f7ff fb8e 	bl	8010738 <HAL_GetTick>
 801101c:	4602      	mov	r2, r0
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	1ad3      	subs	r3, r2, r3
 8011022:	2b0a      	cmp	r3, #10
 8011024:	d90b      	bls.n	801103e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801102a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2205      	movs	r2, #5
 8011036:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 801103a:	2301      	movs	r3, #1
 801103c:	e0c5      	b.n	80111ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	685b      	ldr	r3, [r3, #4]
 8011044:	f003 0302 	and.w	r3, r3, #2
 8011048:	2b00      	cmp	r3, #0
 801104a:	d1e5      	bne.n	8011018 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	681a      	ldr	r2, [r3, #0]
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	f042 0201 	orr.w	r2, r2, #1
 801105a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801105c:	f7ff fb6c 	bl	8010738 <HAL_GetTick>
 8011060:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8011062:	e012      	b.n	801108a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8011064:	f7ff fb68 	bl	8010738 <HAL_GetTick>
 8011068:	4602      	mov	r2, r0
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	1ad3      	subs	r3, r2, r3
 801106e:	2b0a      	cmp	r3, #10
 8011070:	d90b      	bls.n	801108a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011076:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2205      	movs	r2, #5
 8011082:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8011086:	2301      	movs	r3, #1
 8011088:	e09f      	b.n	80111ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	685b      	ldr	r3, [r3, #4]
 8011090:	f003 0301 	and.w	r3, r3, #1
 8011094:	2b00      	cmp	r3, #0
 8011096:	d0e5      	beq.n	8011064 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	7e1b      	ldrb	r3, [r3, #24]
 801109c:	2b01      	cmp	r3, #1
 801109e:	d108      	bne.n	80110b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	681a      	ldr	r2, [r3, #0]
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80110ae:	601a      	str	r2, [r3, #0]
 80110b0:	e007      	b.n	80110c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80110c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	7e5b      	ldrb	r3, [r3, #25]
 80110c6:	2b01      	cmp	r3, #1
 80110c8:	d108      	bne.n	80110dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	681a      	ldr	r2, [r3, #0]
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80110d8:	601a      	str	r2, [r3, #0]
 80110da:	e007      	b.n	80110ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	681a      	ldr	r2, [r3, #0]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80110ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	7e9b      	ldrb	r3, [r3, #26]
 80110f0:	2b01      	cmp	r3, #1
 80110f2:	d108      	bne.n	8011106 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	681a      	ldr	r2, [r3, #0]
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	f042 0220 	orr.w	r2, r2, #32
 8011102:	601a      	str	r2, [r3, #0]
 8011104:	e007      	b.n	8011116 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	681a      	ldr	r2, [r3, #0]
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	f022 0220 	bic.w	r2, r2, #32
 8011114:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	7edb      	ldrb	r3, [r3, #27]
 801111a:	2b01      	cmp	r3, #1
 801111c:	d108      	bne.n	8011130 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	681a      	ldr	r2, [r3, #0]
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	f022 0210 	bic.w	r2, r2, #16
 801112c:	601a      	str	r2, [r3, #0]
 801112e:	e007      	b.n	8011140 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	681a      	ldr	r2, [r3, #0]
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	f042 0210 	orr.w	r2, r2, #16
 801113e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	7f1b      	ldrb	r3, [r3, #28]
 8011144:	2b01      	cmp	r3, #1
 8011146:	d108      	bne.n	801115a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	681a      	ldr	r2, [r3, #0]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	f042 0208 	orr.w	r2, r2, #8
 8011156:	601a      	str	r2, [r3, #0]
 8011158:	e007      	b.n	801116a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	681a      	ldr	r2, [r3, #0]
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	f022 0208 	bic.w	r2, r2, #8
 8011168:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	7f5b      	ldrb	r3, [r3, #29]
 801116e:	2b01      	cmp	r3, #1
 8011170:	d108      	bne.n	8011184 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	681a      	ldr	r2, [r3, #0]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	f042 0204 	orr.w	r2, r2, #4
 8011180:	601a      	str	r2, [r3, #0]
 8011182:	e007      	b.n	8011194 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	681a      	ldr	r2, [r3, #0]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	f022 0204 	bic.w	r2, r2, #4
 8011192:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	689a      	ldr	r2, [r3, #8]
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	68db      	ldr	r3, [r3, #12]
 801119c:	431a      	orrs	r2, r3
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	691b      	ldr	r3, [r3, #16]
 80111a2:	431a      	orrs	r2, r3
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	695b      	ldr	r3, [r3, #20]
 80111a8:	ea42 0103 	orr.w	r1, r2, r3
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	685b      	ldr	r3, [r3, #4]
 80111b0:	1e5a      	subs	r2, r3, #1
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	430a      	orrs	r2, r1
 80111b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2200      	movs	r2, #0
 80111be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2201      	movs	r2, #1
 80111c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80111c8:	2300      	movs	r3, #0
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	3710      	adds	r7, #16
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}
	...

080111d4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b087      	sub	sp, #28
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80111ea:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80111ec:	7cfb      	ldrb	r3, [r7, #19]
 80111ee:	2b01      	cmp	r3, #1
 80111f0:	d003      	beq.n	80111fa <HAL_CAN_ConfigFilter+0x26>
 80111f2:	7cfb      	ldrb	r3, [r7, #19]
 80111f4:	2b02      	cmp	r3, #2
 80111f6:	f040 80c7 	bne.w	8011388 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	4a69      	ldr	r2, [pc, #420]	; (80113a4 <HAL_CAN_ConfigFilter+0x1d0>)
 8011200:	4293      	cmp	r3, r2
 8011202:	d001      	beq.n	8011208 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8011204:	4b68      	ldr	r3, [pc, #416]	; (80113a8 <HAL_CAN_ConfigFilter+0x1d4>)
 8011206:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8011208:	697b      	ldr	r3, [r7, #20]
 801120a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801120e:	f043 0201 	orr.w	r2, r3, #1
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8011218:	697b      	ldr	r3, [r7, #20]
 801121a:	4a63      	ldr	r2, [pc, #396]	; (80113a8 <HAL_CAN_ConfigFilter+0x1d4>)
 801121c:	4293      	cmp	r3, r2
 801121e:	d111      	bne.n	8011244 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8011220:	697b      	ldr	r3, [r7, #20]
 8011222:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011226:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8011230:	697b      	ldr	r3, [r7, #20]
 8011232:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801123a:	021b      	lsls	r3, r3, #8
 801123c:	431a      	orrs	r2, r3
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	695b      	ldr	r3, [r3, #20]
 8011248:	f003 031f 	and.w	r3, r3, #31
 801124c:	2201      	movs	r2, #1
 801124e:	fa02 f303 	lsl.w	r3, r2, r3
 8011252:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	43db      	mvns	r3, r3
 801125e:	401a      	ands	r2, r3
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	69db      	ldr	r3, [r3, #28]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d123      	bne.n	80112b6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 801126e:	697b      	ldr	r3, [r7, #20]
 8011270:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	43db      	mvns	r3, r3
 8011278:	401a      	ands	r2, r3
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	68db      	ldr	r3, [r3, #12]
 8011284:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	685b      	ldr	r3, [r3, #4]
 801128a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801128c:	683a      	ldr	r2, [r7, #0]
 801128e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8011290:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8011292:	697b      	ldr	r3, [r7, #20]
 8011294:	3248      	adds	r2, #72	; 0x48
 8011296:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	689b      	ldr	r3, [r3, #8]
 801129e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80112aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80112ac:	6979      	ldr	r1, [r7, #20]
 80112ae:	3348      	adds	r3, #72	; 0x48
 80112b0:	00db      	lsls	r3, r3, #3
 80112b2:	440b      	add	r3, r1
 80112b4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	69db      	ldr	r3, [r3, #28]
 80112ba:	2b01      	cmp	r3, #1
 80112bc:	d122      	bne.n	8011304 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	431a      	orrs	r2, r3
 80112c8:	697b      	ldr	r3, [r7, #20]
 80112ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80112ce:	683b      	ldr	r3, [r7, #0]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80112d4:	683b      	ldr	r3, [r7, #0]
 80112d6:	685b      	ldr	r3, [r3, #4]
 80112d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80112da:	683a      	ldr	r2, [r7, #0]
 80112dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80112de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	3248      	adds	r2, #72	; 0x48
 80112e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	689b      	ldr	r3, [r3, #8]
 80112ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	68db      	ldr	r3, [r3, #12]
 80112f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80112f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80112fa:	6979      	ldr	r1, [r7, #20]
 80112fc:	3348      	adds	r3, #72	; 0x48
 80112fe:	00db      	lsls	r3, r3, #3
 8011300:	440b      	add	r3, r1
 8011302:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	699b      	ldr	r3, [r3, #24]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d109      	bne.n	8011320 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	43db      	mvns	r3, r3
 8011316:	401a      	ands	r2, r3
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 801131e:	e007      	b.n	8011330 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	431a      	orrs	r2, r3
 801132a:	697b      	ldr	r3, [r7, #20]
 801132c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	691b      	ldr	r3, [r3, #16]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d109      	bne.n	801134c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8011338:	697b      	ldr	r3, [r7, #20]
 801133a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	43db      	mvns	r3, r3
 8011342:	401a      	ands	r2, r3
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 801134a:	e007      	b.n	801135c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	431a      	orrs	r2, r3
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	6a1b      	ldr	r3, [r3, #32]
 8011360:	2b01      	cmp	r3, #1
 8011362:	d107      	bne.n	8011374 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	431a      	orrs	r2, r3
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8011374:	697b      	ldr	r3, [r7, #20]
 8011376:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801137a:	f023 0201 	bic.w	r2, r3, #1
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8011384:	2300      	movs	r3, #0
 8011386:	e006      	b.n	8011396 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801138c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011394:	2301      	movs	r3, #1
  }
}
 8011396:	4618      	mov	r0, r3
 8011398:	371c      	adds	r7, #28
 801139a:	46bd      	mov	sp, r7
 801139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a0:	4770      	bx	lr
 80113a2:	bf00      	nop
 80113a4:	40003400 	.word	0x40003400
 80113a8:	40006400 	.word	0x40006400

080113ac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b084      	sub	sp, #16
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80113ba:	b2db      	uxtb	r3, r3
 80113bc:	2b01      	cmp	r3, #1
 80113be:	d12e      	bne.n	801141e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2202      	movs	r2, #2
 80113c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	681a      	ldr	r2, [r3, #0]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	f022 0201 	bic.w	r2, r2, #1
 80113d6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80113d8:	f7ff f9ae 	bl	8010738 <HAL_GetTick>
 80113dc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80113de:	e012      	b.n	8011406 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80113e0:	f7ff f9aa 	bl	8010738 <HAL_GetTick>
 80113e4:	4602      	mov	r2, r0
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	1ad3      	subs	r3, r2, r3
 80113ea:	2b0a      	cmp	r3, #10
 80113ec:	d90b      	bls.n	8011406 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2205      	movs	r2, #5
 80113fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8011402:	2301      	movs	r3, #1
 8011404:	e012      	b.n	801142c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	f003 0301 	and.w	r3, r3, #1
 8011410:	2b00      	cmp	r3, #0
 8011412:	d1e5      	bne.n	80113e0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2200      	movs	r2, #0
 8011418:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 801141a:	2300      	movs	r3, #0
 801141c:	e006      	b.n	801142c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011422:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801142a:	2301      	movs	r3, #1
  }
}
 801142c:	4618      	mov	r0, r3
 801142e:	3710      	adds	r7, #16
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}

08011434 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8011434:	b480      	push	{r7}
 8011436:	b089      	sub	sp, #36	; 0x24
 8011438:	af00      	add	r7, sp, #0
 801143a:	60f8      	str	r0, [r7, #12]
 801143c:	60b9      	str	r1, [r7, #8]
 801143e:	607a      	str	r2, [r7, #4]
 8011440:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011448:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	689b      	ldr	r3, [r3, #8]
 8011450:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8011452:	7ffb      	ldrb	r3, [r7, #31]
 8011454:	2b01      	cmp	r3, #1
 8011456:	d003      	beq.n	8011460 <HAL_CAN_AddTxMessage+0x2c>
 8011458:	7ffb      	ldrb	r3, [r7, #31]
 801145a:	2b02      	cmp	r3, #2
 801145c:	f040 80b8 	bne.w	80115d0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8011460:	69bb      	ldr	r3, [r7, #24]
 8011462:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011466:	2b00      	cmp	r3, #0
 8011468:	d10a      	bne.n	8011480 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 801146a:	69bb      	ldr	r3, [r7, #24]
 801146c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8011470:	2b00      	cmp	r3, #0
 8011472:	d105      	bne.n	8011480 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8011474:	69bb      	ldr	r3, [r7, #24]
 8011476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 801147a:	2b00      	cmp	r3, #0
 801147c:	f000 80a0 	beq.w	80115c0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8011480:	69bb      	ldr	r3, [r7, #24]
 8011482:	0e1b      	lsrs	r3, r3, #24
 8011484:	f003 0303 	and.w	r3, r3, #3
 8011488:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	2b02      	cmp	r3, #2
 801148e:	d907      	bls.n	80114a0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011494:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801149c:	2301      	movs	r3, #1
 801149e:	e09e      	b.n	80115de <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80114a0:	2201      	movs	r2, #1
 80114a2:	697b      	ldr	r3, [r7, #20]
 80114a4:	409a      	lsls	r2, r3
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	689b      	ldr	r3, [r3, #8]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d10d      	bne.n	80114ce <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80114bc:	68f9      	ldr	r1, [r7, #12]
 80114be:	6809      	ldr	r1, [r1, #0]
 80114c0:	431a      	orrs	r2, r3
 80114c2:	697b      	ldr	r3, [r7, #20]
 80114c4:	3318      	adds	r3, #24
 80114c6:	011b      	lsls	r3, r3, #4
 80114c8:	440b      	add	r3, r1
 80114ca:	601a      	str	r2, [r3, #0]
 80114cc:	e00f      	b.n	80114ee <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	685b      	ldr	r3, [r3, #4]
 80114d2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80114d8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80114de:	68f9      	ldr	r1, [r7, #12]
 80114e0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80114e2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	3318      	adds	r3, #24
 80114e8:	011b      	lsls	r3, r3, #4
 80114ea:	440b      	add	r3, r1
 80114ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	6819      	ldr	r1, [r3, #0]
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	691a      	ldr	r2, [r3, #16]
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	3318      	adds	r3, #24
 80114fa:	011b      	lsls	r3, r3, #4
 80114fc:	440b      	add	r3, r1
 80114fe:	3304      	adds	r3, #4
 8011500:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	7d1b      	ldrb	r3, [r3, #20]
 8011506:	2b01      	cmp	r3, #1
 8011508:	d111      	bne.n	801152e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	681a      	ldr	r2, [r3, #0]
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	3318      	adds	r3, #24
 8011512:	011b      	lsls	r3, r3, #4
 8011514:	4413      	add	r3, r2
 8011516:	3304      	adds	r3, #4
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	68fa      	ldr	r2, [r7, #12]
 801151c:	6811      	ldr	r1, [r2, #0]
 801151e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	3318      	adds	r3, #24
 8011526:	011b      	lsls	r3, r3, #4
 8011528:	440b      	add	r3, r1
 801152a:	3304      	adds	r3, #4
 801152c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	3307      	adds	r3, #7
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	061a      	lsls	r2, r3, #24
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	3306      	adds	r3, #6
 801153a:	781b      	ldrb	r3, [r3, #0]
 801153c:	041b      	lsls	r3, r3, #16
 801153e:	431a      	orrs	r2, r3
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	3305      	adds	r3, #5
 8011544:	781b      	ldrb	r3, [r3, #0]
 8011546:	021b      	lsls	r3, r3, #8
 8011548:	4313      	orrs	r3, r2
 801154a:	687a      	ldr	r2, [r7, #4]
 801154c:	3204      	adds	r2, #4
 801154e:	7812      	ldrb	r2, [r2, #0]
 8011550:	4610      	mov	r0, r2
 8011552:	68fa      	ldr	r2, [r7, #12]
 8011554:	6811      	ldr	r1, [r2, #0]
 8011556:	ea43 0200 	orr.w	r2, r3, r0
 801155a:	697b      	ldr	r3, [r7, #20]
 801155c:	011b      	lsls	r3, r3, #4
 801155e:	440b      	add	r3, r1
 8011560:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8011564:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	3303      	adds	r3, #3
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	061a      	lsls	r2, r3, #24
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	3302      	adds	r3, #2
 8011572:	781b      	ldrb	r3, [r3, #0]
 8011574:	041b      	lsls	r3, r3, #16
 8011576:	431a      	orrs	r2, r3
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	3301      	adds	r3, #1
 801157c:	781b      	ldrb	r3, [r3, #0]
 801157e:	021b      	lsls	r3, r3, #8
 8011580:	4313      	orrs	r3, r2
 8011582:	687a      	ldr	r2, [r7, #4]
 8011584:	7812      	ldrb	r2, [r2, #0]
 8011586:	4610      	mov	r0, r2
 8011588:	68fa      	ldr	r2, [r7, #12]
 801158a:	6811      	ldr	r1, [r2, #0]
 801158c:	ea43 0200 	orr.w	r2, r3, r0
 8011590:	697b      	ldr	r3, [r7, #20]
 8011592:	011b      	lsls	r3, r3, #4
 8011594:	440b      	add	r3, r1
 8011596:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 801159a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	681a      	ldr	r2, [r3, #0]
 80115a0:	697b      	ldr	r3, [r7, #20]
 80115a2:	3318      	adds	r3, #24
 80115a4:	011b      	lsls	r3, r3, #4
 80115a6:	4413      	add	r3, r2
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	68fa      	ldr	r2, [r7, #12]
 80115ac:	6811      	ldr	r1, [r2, #0]
 80115ae:	f043 0201 	orr.w	r2, r3, #1
 80115b2:	697b      	ldr	r3, [r7, #20]
 80115b4:	3318      	adds	r3, #24
 80115b6:	011b      	lsls	r3, r3, #4
 80115b8:	440b      	add	r3, r1
 80115ba:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80115bc:	2300      	movs	r3, #0
 80115be:	e00e      	b.n	80115de <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80115cc:	2301      	movs	r3, #1
 80115ce:	e006      	b.n	80115de <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80115dc:	2301      	movs	r3, #1
  }
}
 80115de:	4618      	mov	r0, r3
 80115e0:	3724      	adds	r7, #36	; 0x24
 80115e2:	46bd      	mov	sp, r7
 80115e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e8:	4770      	bx	lr

080115ea <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80115ea:	b480      	push	{r7}
 80115ec:	b087      	sub	sp, #28
 80115ee:	af00      	add	r7, sp, #0
 80115f0:	60f8      	str	r0, [r7, #12]
 80115f2:	60b9      	str	r1, [r7, #8]
 80115f4:	607a      	str	r2, [r7, #4]
 80115f6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80115fe:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8011600:	7dfb      	ldrb	r3, [r7, #23]
 8011602:	2b01      	cmp	r3, #1
 8011604:	d003      	beq.n	801160e <HAL_CAN_GetRxMessage+0x24>
 8011606:	7dfb      	ldrb	r3, [r7, #23]
 8011608:	2b02      	cmp	r3, #2
 801160a:	f040 80f3 	bne.w	80117f4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d10e      	bne.n	8011632 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	68db      	ldr	r3, [r3, #12]
 801161a:	f003 0303 	and.w	r3, r3, #3
 801161e:	2b00      	cmp	r3, #0
 8011620:	d116      	bne.n	8011650 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011626:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801162e:	2301      	movs	r3, #1
 8011630:	e0e7      	b.n	8011802 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	691b      	ldr	r3, [r3, #16]
 8011638:	f003 0303 	and.w	r3, r3, #3
 801163c:	2b00      	cmp	r3, #0
 801163e:	d107      	bne.n	8011650 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011644:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801164c:	2301      	movs	r3, #1
 801164e:	e0d8      	b.n	8011802 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	681a      	ldr	r2, [r3, #0]
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	331b      	adds	r3, #27
 8011658:	011b      	lsls	r3, r3, #4
 801165a:	4413      	add	r3, r2
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f003 0204 	and.w	r2, r3, #4
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	689b      	ldr	r3, [r3, #8]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d10c      	bne.n	8011688 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	681a      	ldr	r2, [r3, #0]
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	331b      	adds	r3, #27
 8011676:	011b      	lsls	r3, r3, #4
 8011678:	4413      	add	r3, r2
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	0d5b      	lsrs	r3, r3, #21
 801167e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	601a      	str	r2, [r3, #0]
 8011686:	e00b      	b.n	80116a0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	68bb      	ldr	r3, [r7, #8]
 801168e:	331b      	adds	r3, #27
 8011690:	011b      	lsls	r3, r3, #4
 8011692:	4413      	add	r3, r2
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	08db      	lsrs	r3, r3, #3
 8011698:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	681a      	ldr	r2, [r3, #0]
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	331b      	adds	r3, #27
 80116a8:	011b      	lsls	r3, r3, #4
 80116aa:	4413      	add	r3, r2
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	f003 0202 	and.w	r2, r3, #2
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	681a      	ldr	r2, [r3, #0]
 80116ba:	68bb      	ldr	r3, [r7, #8]
 80116bc:	331b      	adds	r3, #27
 80116be:	011b      	lsls	r3, r3, #4
 80116c0:	4413      	add	r3, r2
 80116c2:	3304      	adds	r3, #4
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	f003 020f 	and.w	r2, r3, #15
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	681a      	ldr	r2, [r3, #0]
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	331b      	adds	r3, #27
 80116d6:	011b      	lsls	r3, r3, #4
 80116d8:	4413      	add	r3, r2
 80116da:	3304      	adds	r3, #4
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	0a1b      	lsrs	r3, r3, #8
 80116e0:	b2da      	uxtb	r2, r3
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	681a      	ldr	r2, [r3, #0]
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	331b      	adds	r3, #27
 80116ee:	011b      	lsls	r3, r3, #4
 80116f0:	4413      	add	r3, r2
 80116f2:	3304      	adds	r3, #4
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	0c1b      	lsrs	r3, r3, #16
 80116f8:	b29a      	uxth	r2, r3
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	011b      	lsls	r3, r3, #4
 8011706:	4413      	add	r3, r2
 8011708:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	b2da      	uxtb	r2, r3
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	681a      	ldr	r2, [r3, #0]
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	011b      	lsls	r3, r3, #4
 801171c:	4413      	add	r3, r2
 801171e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	0a1a      	lsrs	r2, r3, #8
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	3301      	adds	r3, #1
 801172a:	b2d2      	uxtb	r2, r2
 801172c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	681a      	ldr	r2, [r3, #0]
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	011b      	lsls	r3, r3, #4
 8011736:	4413      	add	r3, r2
 8011738:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	0c1a      	lsrs	r2, r3, #16
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	3302      	adds	r3, #2
 8011744:	b2d2      	uxtb	r2, r2
 8011746:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	011b      	lsls	r3, r3, #4
 8011750:	4413      	add	r3, r2
 8011752:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	0e1a      	lsrs	r2, r3, #24
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	3303      	adds	r3, #3
 801175e:	b2d2      	uxtb	r2, r2
 8011760:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	681a      	ldr	r2, [r3, #0]
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	011b      	lsls	r3, r3, #4
 801176a:	4413      	add	r3, r2
 801176c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011770:	681a      	ldr	r2, [r3, #0]
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	3304      	adds	r3, #4
 8011776:	b2d2      	uxtb	r2, r2
 8011778:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	681a      	ldr	r2, [r3, #0]
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	011b      	lsls	r3, r3, #4
 8011782:	4413      	add	r3, r2
 8011784:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	0a1a      	lsrs	r2, r3, #8
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	3305      	adds	r3, #5
 8011790:	b2d2      	uxtb	r2, r2
 8011792:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	681a      	ldr	r2, [r3, #0]
 8011798:	68bb      	ldr	r3, [r7, #8]
 801179a:	011b      	lsls	r3, r3, #4
 801179c:	4413      	add	r3, r2
 801179e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	0c1a      	lsrs	r2, r3, #16
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	3306      	adds	r3, #6
 80117aa:	b2d2      	uxtb	r2, r2
 80117ac:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	681a      	ldr	r2, [r3, #0]
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	011b      	lsls	r3, r3, #4
 80117b6:	4413      	add	r3, r2
 80117b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	0e1a      	lsrs	r2, r3, #24
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	3307      	adds	r3, #7
 80117c4:	b2d2      	uxtb	r2, r2
 80117c6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d108      	bne.n	80117e0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	68da      	ldr	r2, [r3, #12]
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	f042 0220 	orr.w	r2, r2, #32
 80117dc:	60da      	str	r2, [r3, #12]
 80117de:	e007      	b.n	80117f0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	691a      	ldr	r2, [r3, #16]
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	f042 0220 	orr.w	r2, r2, #32
 80117ee:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80117f0:	2300      	movs	r3, #0
 80117f2:	e006      	b.n	8011802 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011800:	2301      	movs	r3, #1
  }
}
 8011802:	4618      	mov	r0, r3
 8011804:	371c      	adds	r7, #28
 8011806:	46bd      	mov	sp, r7
 8011808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180c:	4770      	bx	lr

0801180e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 801180e:	b480      	push	{r7}
 8011810:	b085      	sub	sp, #20
 8011812:	af00      	add	r7, sp, #0
 8011814:	6078      	str	r0, [r7, #4]
 8011816:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8011818:	2300      	movs	r3, #0
 801181a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011822:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8011824:	7afb      	ldrb	r3, [r7, #11]
 8011826:	2b01      	cmp	r3, #1
 8011828:	d002      	beq.n	8011830 <HAL_CAN_GetRxFifoFillLevel+0x22>
 801182a:	7afb      	ldrb	r3, [r7, #11]
 801182c:	2b02      	cmp	r3, #2
 801182e:	d10f      	bne.n	8011850 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d106      	bne.n	8011844 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	68db      	ldr	r3, [r3, #12]
 801183c:	f003 0303 	and.w	r3, r3, #3
 8011840:	60fb      	str	r3, [r7, #12]
 8011842:	e005      	b.n	8011850 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	691b      	ldr	r3, [r3, #16]
 801184a:	f003 0303 	and.w	r3, r3, #3
 801184e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8011850:	68fb      	ldr	r3, [r7, #12]
}
 8011852:	4618      	mov	r0, r3
 8011854:	3714      	adds	r7, #20
 8011856:	46bd      	mov	sp, r7
 8011858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185c:	4770      	bx	lr

0801185e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 801185e:	b580      	push	{r7, lr}
 8011860:	b08a      	sub	sp, #40	; 0x28
 8011862:	af00      	add	r7, sp, #0
 8011864:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8011866:	2300      	movs	r3, #0
 8011868:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	695b      	ldr	r3, [r3, #20]
 8011870:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	689b      	ldr	r3, [r3, #8]
 8011880:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	68db      	ldr	r3, [r3, #12]
 8011888:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	691b      	ldr	r3, [r3, #16]
 8011890:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	699b      	ldr	r3, [r3, #24]
 8011898:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 801189a:	6a3b      	ldr	r3, [r7, #32]
 801189c:	f003 0301 	and.w	r3, r3, #1
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d07c      	beq.n	801199e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80118a4:	69bb      	ldr	r3, [r7, #24]
 80118a6:	f003 0301 	and.w	r3, r3, #1
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d023      	beq.n	80118f6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	2201      	movs	r2, #1
 80118b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80118b6:	69bb      	ldr	r3, [r7, #24]
 80118b8:	f003 0302 	and.w	r3, r3, #2
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d003      	beq.n	80118c8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f000 f983 	bl	8011bcc <HAL_CAN_TxMailbox0CompleteCallback>
 80118c6:	e016      	b.n	80118f6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80118c8:	69bb      	ldr	r3, [r7, #24]
 80118ca:	f003 0304 	and.w	r3, r3, #4
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d004      	beq.n	80118dc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80118d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80118d8:	627b      	str	r3, [r7, #36]	; 0x24
 80118da:	e00c      	b.n	80118f6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80118dc:	69bb      	ldr	r3, [r7, #24]
 80118de:	f003 0308 	and.w	r3, r3, #8
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d004      	beq.n	80118f0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80118e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80118ec:	627b      	str	r3, [r7, #36]	; 0x24
 80118ee:	e002      	b.n	80118f6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f000 f989 	bl	8011c08 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80118f6:	69bb      	ldr	r3, [r7, #24]
 80118f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d024      	beq.n	801194a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011908:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 801190a:	69bb      	ldr	r3, [r7, #24]
 801190c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011910:	2b00      	cmp	r3, #0
 8011912:	d003      	beq.n	801191c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8011914:	6878      	ldr	r0, [r7, #4]
 8011916:	f000 f963 	bl	8011be0 <HAL_CAN_TxMailbox1CompleteCallback>
 801191a:	e016      	b.n	801194a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 801191c:	69bb      	ldr	r3, [r7, #24]
 801191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011922:	2b00      	cmp	r3, #0
 8011924:	d004      	beq.n	8011930 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8011926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011928:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801192c:	627b      	str	r3, [r7, #36]	; 0x24
 801192e:	e00c      	b.n	801194a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8011930:	69bb      	ldr	r3, [r7, #24]
 8011932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011936:	2b00      	cmp	r3, #0
 8011938:	d004      	beq.n	8011944 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 801193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801193c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011940:	627b      	str	r3, [r7, #36]	; 0x24
 8011942:	e002      	b.n	801194a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f000 f969 	bl	8011c1c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 801194a:	69bb      	ldr	r3, [r7, #24]
 801194c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011950:	2b00      	cmp	r3, #0
 8011952:	d024      	beq.n	801199e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801195c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 801195e:	69bb      	ldr	r3, [r7, #24]
 8011960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011964:	2b00      	cmp	r3, #0
 8011966:	d003      	beq.n	8011970 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f000 f943 	bl	8011bf4 <HAL_CAN_TxMailbox2CompleteCallback>
 801196e:	e016      	b.n	801199e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8011970:	69bb      	ldr	r3, [r7, #24]
 8011972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011976:	2b00      	cmp	r3, #0
 8011978:	d004      	beq.n	8011984 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 801197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801197c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011980:	627b      	str	r3, [r7, #36]	; 0x24
 8011982:	e00c      	b.n	801199e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8011984:	69bb      	ldr	r3, [r7, #24]
 8011986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801198a:	2b00      	cmp	r3, #0
 801198c:	d004      	beq.n	8011998 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 801198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011994:	627b      	str	r3, [r7, #36]	; 0x24
 8011996:	e002      	b.n	801199e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f000 f949 	bl	8011c30 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 801199e:	6a3b      	ldr	r3, [r7, #32]
 80119a0:	f003 0308 	and.w	r3, r3, #8
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d00c      	beq.n	80119c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	f003 0310 	and.w	r3, r3, #16
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d007      	beq.n	80119c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80119b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80119b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	2210      	movs	r2, #16
 80119c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80119c2:	6a3b      	ldr	r3, [r7, #32]
 80119c4:	f003 0304 	and.w	r3, r3, #4
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d00b      	beq.n	80119e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	f003 0308 	and.w	r3, r3, #8
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d006      	beq.n	80119e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	2208      	movs	r2, #8
 80119dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80119de:	6878      	ldr	r0, [r7, #4]
 80119e0:	f000 f93a 	bl	8011c58 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80119e4:	6a3b      	ldr	r3, [r7, #32]
 80119e6:	f003 0302 	and.w	r3, r3, #2
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d009      	beq.n	8011a02 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	68db      	ldr	r3, [r3, #12]
 80119f4:	f003 0303 	and.w	r3, r3, #3
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d002      	beq.n	8011a02 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	f000 f921 	bl	8011c44 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8011a02:	6a3b      	ldr	r3, [r7, #32]
 8011a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d00c      	beq.n	8011a26 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	f003 0310 	and.w	r3, r3, #16
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d007      	beq.n	8011a26 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8011a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011a1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	2210      	movs	r2, #16
 8011a24:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8011a26:	6a3b      	ldr	r3, [r7, #32]
 8011a28:	f003 0320 	and.w	r3, r3, #32
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d00b      	beq.n	8011a48 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	f003 0308 	and.w	r3, r3, #8
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d006      	beq.n	8011a48 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	2208      	movs	r2, #8
 8011a40:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f000 f91c 	bl	8011c80 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8011a48:	6a3b      	ldr	r3, [r7, #32]
 8011a4a:	f003 0310 	and.w	r3, r3, #16
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d009      	beq.n	8011a66 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	691b      	ldr	r3, [r3, #16]
 8011a58:	f003 0303 	and.w	r3, r3, #3
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d002      	beq.n	8011a66 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f000 f903 	bl	8011c6c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8011a66:	6a3b      	ldr	r3, [r7, #32]
 8011a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d00b      	beq.n	8011a88 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8011a70:	69fb      	ldr	r3, [r7, #28]
 8011a72:	f003 0310 	and.w	r3, r3, #16
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d006      	beq.n	8011a88 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	2210      	movs	r2, #16
 8011a80:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8011a82:	6878      	ldr	r0, [r7, #4]
 8011a84:	f000 f906 	bl	8011c94 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8011a88:	6a3b      	ldr	r3, [r7, #32]
 8011a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d00b      	beq.n	8011aaa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8011a92:	69fb      	ldr	r3, [r7, #28]
 8011a94:	f003 0308 	and.w	r3, r3, #8
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d006      	beq.n	8011aaa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	2208      	movs	r2, #8
 8011aa2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f000 f8ff 	bl	8011ca8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8011aaa:	6a3b      	ldr	r3, [r7, #32]
 8011aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d07b      	beq.n	8011bac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8011ab4:	69fb      	ldr	r3, [r7, #28]
 8011ab6:	f003 0304 	and.w	r3, r3, #4
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d072      	beq.n	8011ba4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8011abe:	6a3b      	ldr	r3, [r7, #32]
 8011ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d008      	beq.n	8011ada <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d003      	beq.n	8011ada <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8011ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad4:	f043 0301 	orr.w	r3, r3, #1
 8011ad8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8011ada:	6a3b      	ldr	r3, [r7, #32]
 8011adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d008      	beq.n	8011af6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d003      	beq.n	8011af6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8011aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af0:	f043 0302 	orr.w	r3, r3, #2
 8011af4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8011af6:	6a3b      	ldr	r3, [r7, #32]
 8011af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d008      	beq.n	8011b12 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d003      	beq.n	8011b12 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8011b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b0c:	f043 0304 	orr.w	r3, r3, #4
 8011b10:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8011b12:	6a3b      	ldr	r3, [r7, #32]
 8011b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d043      	beq.n	8011ba4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d03e      	beq.n	8011ba4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011b2c:	2b60      	cmp	r3, #96	; 0x60
 8011b2e:	d02b      	beq.n	8011b88 <HAL_CAN_IRQHandler+0x32a>
 8011b30:	2b60      	cmp	r3, #96	; 0x60
 8011b32:	d82e      	bhi.n	8011b92 <HAL_CAN_IRQHandler+0x334>
 8011b34:	2b50      	cmp	r3, #80	; 0x50
 8011b36:	d022      	beq.n	8011b7e <HAL_CAN_IRQHandler+0x320>
 8011b38:	2b50      	cmp	r3, #80	; 0x50
 8011b3a:	d82a      	bhi.n	8011b92 <HAL_CAN_IRQHandler+0x334>
 8011b3c:	2b40      	cmp	r3, #64	; 0x40
 8011b3e:	d019      	beq.n	8011b74 <HAL_CAN_IRQHandler+0x316>
 8011b40:	2b40      	cmp	r3, #64	; 0x40
 8011b42:	d826      	bhi.n	8011b92 <HAL_CAN_IRQHandler+0x334>
 8011b44:	2b30      	cmp	r3, #48	; 0x30
 8011b46:	d010      	beq.n	8011b6a <HAL_CAN_IRQHandler+0x30c>
 8011b48:	2b30      	cmp	r3, #48	; 0x30
 8011b4a:	d822      	bhi.n	8011b92 <HAL_CAN_IRQHandler+0x334>
 8011b4c:	2b10      	cmp	r3, #16
 8011b4e:	d002      	beq.n	8011b56 <HAL_CAN_IRQHandler+0x2f8>
 8011b50:	2b20      	cmp	r3, #32
 8011b52:	d005      	beq.n	8011b60 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8011b54:	e01d      	b.n	8011b92 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8011b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b58:	f043 0308 	orr.w	r3, r3, #8
 8011b5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011b5e:	e019      	b.n	8011b94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8011b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b62:	f043 0310 	orr.w	r3, r3, #16
 8011b66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011b68:	e014      	b.n	8011b94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8011b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b6c:	f043 0320 	orr.w	r3, r3, #32
 8011b70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011b72:	e00f      	b.n	8011b94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8011b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011b7c:	e00a      	b.n	8011b94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8011b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011b86:	e005      	b.n	8011b94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8011b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011b8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011b90:	e000      	b.n	8011b94 <HAL_CAN_IRQHandler+0x336>
            break;
 8011b92:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	699a      	ldr	r2, [r3, #24]
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8011ba2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	2204      	movs	r2, #4
 8011baa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8011bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d008      	beq.n	8011bc4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb8:	431a      	orrs	r2, r3
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	f000 f87c 	bl	8011cbc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8011bc4:	bf00      	nop
 8011bc6:	3728      	adds	r7, #40	; 0x28
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}

08011bcc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8011bcc:	b480      	push	{r7}
 8011bce:	b083      	sub	sp, #12
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8011bd4:	bf00      	nop
 8011bd6:	370c      	adds	r7, #12
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bde:	4770      	bx	lr

08011be0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8011be0:	b480      	push	{r7}
 8011be2:	b083      	sub	sp, #12
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8011be8:	bf00      	nop
 8011bea:	370c      	adds	r7, #12
 8011bec:	46bd      	mov	sp, r7
 8011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf2:	4770      	bx	lr

08011bf4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8011bf4:	b480      	push	{r7}
 8011bf6:	b083      	sub	sp, #12
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8011bfc:	bf00      	nop
 8011bfe:	370c      	adds	r7, #12
 8011c00:	46bd      	mov	sp, r7
 8011c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c06:	4770      	bx	lr

08011c08 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011c08:	b480      	push	{r7}
 8011c0a:	b083      	sub	sp, #12
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8011c10:	bf00      	nop
 8011c12:	370c      	adds	r7, #12
 8011c14:	46bd      	mov	sp, r7
 8011c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1a:	4770      	bx	lr

08011c1c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	b083      	sub	sp, #12
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8011c24:	bf00      	nop
 8011c26:	370c      	adds	r7, #12
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2e:	4770      	bx	lr

08011c30 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011c30:	b480      	push	{r7}
 8011c32:	b083      	sub	sp, #12
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8011c38:	bf00      	nop
 8011c3a:	370c      	adds	r7, #12
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c42:	4770      	bx	lr

08011c44 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8011c44:	b480      	push	{r7}
 8011c46:	b083      	sub	sp, #12
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8011c4c:	bf00      	nop
 8011c4e:	370c      	adds	r7, #12
 8011c50:	46bd      	mov	sp, r7
 8011c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c56:	4770      	bx	lr

08011c58 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b083      	sub	sp, #12
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8011c60:	bf00      	nop
 8011c62:	370c      	adds	r7, #12
 8011c64:	46bd      	mov	sp, r7
 8011c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6a:	4770      	bx	lr

08011c6c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b083      	sub	sp, #12
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8011c74:	bf00      	nop
 8011c76:	370c      	adds	r7, #12
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7e:	4770      	bx	lr

08011c80 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8011c80:	b480      	push	{r7}
 8011c82:	b083      	sub	sp, #12
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8011c88:	bf00      	nop
 8011c8a:	370c      	adds	r7, #12
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c92:	4770      	bx	lr

08011c94 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8011c94:	b480      	push	{r7}
 8011c96:	b083      	sub	sp, #12
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8011c9c:	bf00      	nop
 8011c9e:	370c      	adds	r7, #12
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca6:	4770      	bx	lr

08011ca8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8011ca8:	b480      	push	{r7}
 8011caa:	b083      	sub	sp, #12
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8011cb0:	bf00      	nop
 8011cb2:	370c      	adds	r7, #12
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cba:	4770      	bx	lr

08011cbc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	b083      	sub	sp, #12
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8011cc4:	bf00      	nop
 8011cc6:	370c      	adds	r7, #12
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cce:	4770      	bx	lr

08011cd0 <__NVIC_SetPriorityGrouping>:
{
 8011cd0:	b480      	push	{r7}
 8011cd2:	b085      	sub	sp, #20
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f003 0307 	and.w	r3, r3, #7
 8011cde:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011ce0:	4b0b      	ldr	r3, [pc, #44]	; (8011d10 <__NVIC_SetPriorityGrouping+0x40>)
 8011ce2:	68db      	ldr	r3, [r3, #12]
 8011ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011ce6:	68ba      	ldr	r2, [r7, #8]
 8011ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011cec:	4013      	ands	r3, r2
 8011cee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8011cf8:	4b06      	ldr	r3, [pc, #24]	; (8011d14 <__NVIC_SetPriorityGrouping+0x44>)
 8011cfa:	4313      	orrs	r3, r2
 8011cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011cfe:	4a04      	ldr	r2, [pc, #16]	; (8011d10 <__NVIC_SetPriorityGrouping+0x40>)
 8011d00:	68bb      	ldr	r3, [r7, #8]
 8011d02:	60d3      	str	r3, [r2, #12]
}
 8011d04:	bf00      	nop
 8011d06:	3714      	adds	r7, #20
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0e:	4770      	bx	lr
 8011d10:	e000ed00 	.word	0xe000ed00
 8011d14:	05fa0000 	.word	0x05fa0000

08011d18 <__NVIC_GetPriorityGrouping>:
{
 8011d18:	b480      	push	{r7}
 8011d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011d1c:	4b04      	ldr	r3, [pc, #16]	; (8011d30 <__NVIC_GetPriorityGrouping+0x18>)
 8011d1e:	68db      	ldr	r3, [r3, #12]
 8011d20:	0a1b      	lsrs	r3, r3, #8
 8011d22:	f003 0307 	and.w	r3, r3, #7
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2e:	4770      	bx	lr
 8011d30:	e000ed00 	.word	0xe000ed00

08011d34 <__NVIC_EnableIRQ>:
{
 8011d34:	b480      	push	{r7}
 8011d36:	b083      	sub	sp, #12
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	db0b      	blt.n	8011d5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011d46:	79fb      	ldrb	r3, [r7, #7]
 8011d48:	f003 021f 	and.w	r2, r3, #31
 8011d4c:	4907      	ldr	r1, [pc, #28]	; (8011d6c <__NVIC_EnableIRQ+0x38>)
 8011d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d52:	095b      	lsrs	r3, r3, #5
 8011d54:	2001      	movs	r0, #1
 8011d56:	fa00 f202 	lsl.w	r2, r0, r2
 8011d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011d5e:	bf00      	nop
 8011d60:	370c      	adds	r7, #12
 8011d62:	46bd      	mov	sp, r7
 8011d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d68:	4770      	bx	lr
 8011d6a:	bf00      	nop
 8011d6c:	e000e100 	.word	0xe000e100

08011d70 <__NVIC_SetPriority>:
{
 8011d70:	b480      	push	{r7}
 8011d72:	b083      	sub	sp, #12
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	4603      	mov	r3, r0
 8011d78:	6039      	str	r1, [r7, #0]
 8011d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	db0a      	blt.n	8011d9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	b2da      	uxtb	r2, r3
 8011d88:	490c      	ldr	r1, [pc, #48]	; (8011dbc <__NVIC_SetPriority+0x4c>)
 8011d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d8e:	0112      	lsls	r2, r2, #4
 8011d90:	b2d2      	uxtb	r2, r2
 8011d92:	440b      	add	r3, r1
 8011d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011d98:	e00a      	b.n	8011db0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	b2da      	uxtb	r2, r3
 8011d9e:	4908      	ldr	r1, [pc, #32]	; (8011dc0 <__NVIC_SetPriority+0x50>)
 8011da0:	79fb      	ldrb	r3, [r7, #7]
 8011da2:	f003 030f 	and.w	r3, r3, #15
 8011da6:	3b04      	subs	r3, #4
 8011da8:	0112      	lsls	r2, r2, #4
 8011daa:	b2d2      	uxtb	r2, r2
 8011dac:	440b      	add	r3, r1
 8011dae:	761a      	strb	r2, [r3, #24]
}
 8011db0:	bf00      	nop
 8011db2:	370c      	adds	r7, #12
 8011db4:	46bd      	mov	sp, r7
 8011db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dba:	4770      	bx	lr
 8011dbc:	e000e100 	.word	0xe000e100
 8011dc0:	e000ed00 	.word	0xe000ed00

08011dc4 <NVIC_EncodePriority>:
{
 8011dc4:	b480      	push	{r7}
 8011dc6:	b089      	sub	sp, #36	; 0x24
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	60f8      	str	r0, [r7, #12]
 8011dcc:	60b9      	str	r1, [r7, #8]
 8011dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	f003 0307 	and.w	r3, r3, #7
 8011dd6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011dd8:	69fb      	ldr	r3, [r7, #28]
 8011dda:	f1c3 0307 	rsb	r3, r3, #7
 8011dde:	2b04      	cmp	r3, #4
 8011de0:	bf28      	it	cs
 8011de2:	2304      	movcs	r3, #4
 8011de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011de6:	69fb      	ldr	r3, [r7, #28]
 8011de8:	3304      	adds	r3, #4
 8011dea:	2b06      	cmp	r3, #6
 8011dec:	d902      	bls.n	8011df4 <NVIC_EncodePriority+0x30>
 8011dee:	69fb      	ldr	r3, [r7, #28]
 8011df0:	3b03      	subs	r3, #3
 8011df2:	e000      	b.n	8011df6 <NVIC_EncodePriority+0x32>
 8011df4:	2300      	movs	r3, #0
 8011df6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011df8:	f04f 32ff 	mov.w	r2, #4294967295
 8011dfc:	69bb      	ldr	r3, [r7, #24]
 8011dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8011e02:	43da      	mvns	r2, r3
 8011e04:	68bb      	ldr	r3, [r7, #8]
 8011e06:	401a      	ands	r2, r3
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8011e10:	697b      	ldr	r3, [r7, #20]
 8011e12:	fa01 f303 	lsl.w	r3, r1, r3
 8011e16:	43d9      	mvns	r1, r3
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011e1c:	4313      	orrs	r3, r2
}
 8011e1e:	4618      	mov	r0, r3
 8011e20:	3724      	adds	r7, #36	; 0x24
 8011e22:	46bd      	mov	sp, r7
 8011e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e28:	4770      	bx	lr
	...

08011e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b082      	sub	sp, #8
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	3b01      	subs	r3, #1
 8011e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011e3c:	d301      	bcc.n	8011e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8011e3e:	2301      	movs	r3, #1
 8011e40:	e00f      	b.n	8011e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011e42:	4a0a      	ldr	r2, [pc, #40]	; (8011e6c <SysTick_Config+0x40>)
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	3b01      	subs	r3, #1
 8011e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011e4a:	210f      	movs	r1, #15
 8011e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e50:	f7ff ff8e 	bl	8011d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011e54:	4b05      	ldr	r3, [pc, #20]	; (8011e6c <SysTick_Config+0x40>)
 8011e56:	2200      	movs	r2, #0
 8011e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011e5a:	4b04      	ldr	r3, [pc, #16]	; (8011e6c <SysTick_Config+0x40>)
 8011e5c:	2207      	movs	r2, #7
 8011e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011e60:	2300      	movs	r3, #0
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3708      	adds	r7, #8
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}
 8011e6a:	bf00      	nop
 8011e6c:	e000e010 	.word	0xe000e010

08011e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b082      	sub	sp, #8
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f7ff ff29 	bl	8011cd0 <__NVIC_SetPriorityGrouping>
}
 8011e7e:	bf00      	nop
 8011e80:	3708      	adds	r7, #8
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}

08011e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011e86:	b580      	push	{r7, lr}
 8011e88:	b086      	sub	sp, #24
 8011e8a:	af00      	add	r7, sp, #0
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	60b9      	str	r1, [r7, #8]
 8011e90:	607a      	str	r2, [r7, #4]
 8011e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8011e94:	2300      	movs	r3, #0
 8011e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011e98:	f7ff ff3e 	bl	8011d18 <__NVIC_GetPriorityGrouping>
 8011e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011e9e:	687a      	ldr	r2, [r7, #4]
 8011ea0:	68b9      	ldr	r1, [r7, #8]
 8011ea2:	6978      	ldr	r0, [r7, #20]
 8011ea4:	f7ff ff8e 	bl	8011dc4 <NVIC_EncodePriority>
 8011ea8:	4602      	mov	r2, r0
 8011eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011eae:	4611      	mov	r1, r2
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7ff ff5d 	bl	8011d70 <__NVIC_SetPriority>
}
 8011eb6:	bf00      	nop
 8011eb8:	3718      	adds	r7, #24
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}

08011ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011ebe:	b580      	push	{r7, lr}
 8011ec0:	b082      	sub	sp, #8
 8011ec2:	af00      	add	r7, sp, #0
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7ff ff31 	bl	8011d34 <__NVIC_EnableIRQ>
}
 8011ed2:	bf00      	nop
 8011ed4:	3708      	adds	r7, #8
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}

08011eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011eda:	b580      	push	{r7, lr}
 8011edc:	b082      	sub	sp, #8
 8011ede:	af00      	add	r7, sp, #0
 8011ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	f7ff ffa2 	bl	8011e2c <SysTick_Config>
 8011ee8:	4603      	mov	r3, r0
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	3708      	adds	r7, #8
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd80      	pop	{r7, pc}
	...

08011ef4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b082      	sub	sp, #8
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d101      	bne.n	8011f06 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8011f02:	2301      	movs	r3, #1
 8011f04:	e054      	b.n	8011fb0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	7f5b      	ldrb	r3, [r3, #29]
 8011f0a:	b2db      	uxtb	r3, r3
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d105      	bne.n	8011f1c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2200      	movs	r2, #0
 8011f14:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f7f3 f882 	bl	8005020 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2202      	movs	r2, #2
 8011f20:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	791b      	ldrb	r3, [r3, #4]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d10c      	bne.n	8011f44 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	4a22      	ldr	r2, [pc, #136]	; (8011fb8 <HAL_CRC_Init+0xc4>)
 8011f30:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	689a      	ldr	r2, [r3, #8]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	f022 0218 	bic.w	r2, r2, #24
 8011f40:	609a      	str	r2, [r3, #8]
 8011f42:	e00c      	b.n	8011f5e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	6899      	ldr	r1, [r3, #8]
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	68db      	ldr	r3, [r3, #12]
 8011f4c:	461a      	mov	r2, r3
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f000 f834 	bl	8011fbc <HAL_CRCEx_Polynomial_Set>
 8011f54:	4603      	mov	r3, r0
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d001      	beq.n	8011f5e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	e028      	b.n	8011fb0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	795b      	ldrb	r3, [r3, #5]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d105      	bne.n	8011f72 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f6e:	611a      	str	r2, [r3, #16]
 8011f70:	e004      	b.n	8011f7c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	687a      	ldr	r2, [r7, #4]
 8011f78:	6912      	ldr	r2, [r2, #16]
 8011f7a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	689b      	ldr	r3, [r3, #8]
 8011f82:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	695a      	ldr	r2, [r3, #20]
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	430a      	orrs	r2, r1
 8011f90:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	689b      	ldr	r3, [r3, #8]
 8011f98:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	699a      	ldr	r2, [r3, #24]
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	430a      	orrs	r2, r1
 8011fa6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2201      	movs	r2, #1
 8011fac:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8011fae:	2300      	movs	r3, #0
}
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	3708      	adds	r7, #8
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd80      	pop	{r7, pc}
 8011fb8:	04c11db7 	.word	0x04c11db7

08011fbc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b087      	sub	sp, #28
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	60f8      	str	r0, [r7, #12]
 8011fc4:	60b9      	str	r1, [r7, #8]
 8011fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011fc8:	2300      	movs	r3, #0
 8011fca:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8011fcc:	231f      	movs	r3, #31
 8011fce:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8011fd0:	bf00      	nop
 8011fd2:	693b      	ldr	r3, [r7, #16]
 8011fd4:	1e5a      	subs	r2, r3, #1
 8011fd6:	613a      	str	r2, [r7, #16]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d009      	beq.n	8011ff0 <HAL_CRCEx_Polynomial_Set+0x34>
 8011fdc:	693b      	ldr	r3, [r7, #16]
 8011fde:	f003 031f 	and.w	r3, r3, #31
 8011fe2:	68ba      	ldr	r2, [r7, #8]
 8011fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8011fe8:	f003 0301 	and.w	r3, r3, #1
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d0f0      	beq.n	8011fd2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2b18      	cmp	r3, #24
 8011ff4:	d846      	bhi.n	8012084 <HAL_CRCEx_Polynomial_Set+0xc8>
 8011ff6:	a201      	add	r2, pc, #4	; (adr r2, 8011ffc <HAL_CRCEx_Polynomial_Set+0x40>)
 8011ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ffc:	0801208b 	.word	0x0801208b
 8012000:	08012085 	.word	0x08012085
 8012004:	08012085 	.word	0x08012085
 8012008:	08012085 	.word	0x08012085
 801200c:	08012085 	.word	0x08012085
 8012010:	08012085 	.word	0x08012085
 8012014:	08012085 	.word	0x08012085
 8012018:	08012085 	.word	0x08012085
 801201c:	08012079 	.word	0x08012079
 8012020:	08012085 	.word	0x08012085
 8012024:	08012085 	.word	0x08012085
 8012028:	08012085 	.word	0x08012085
 801202c:	08012085 	.word	0x08012085
 8012030:	08012085 	.word	0x08012085
 8012034:	08012085 	.word	0x08012085
 8012038:	08012085 	.word	0x08012085
 801203c:	0801206d 	.word	0x0801206d
 8012040:	08012085 	.word	0x08012085
 8012044:	08012085 	.word	0x08012085
 8012048:	08012085 	.word	0x08012085
 801204c:	08012085 	.word	0x08012085
 8012050:	08012085 	.word	0x08012085
 8012054:	08012085 	.word	0x08012085
 8012058:	08012085 	.word	0x08012085
 801205c:	08012061 	.word	0x08012061
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	2b06      	cmp	r3, #6
 8012064:	d913      	bls.n	801208e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8012066:	2301      	movs	r3, #1
 8012068:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801206a:	e010      	b.n	801208e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 801206c:	693b      	ldr	r3, [r7, #16]
 801206e:	2b07      	cmp	r3, #7
 8012070:	d90f      	bls.n	8012092 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8012072:	2301      	movs	r3, #1
 8012074:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8012076:	e00c      	b.n	8012092 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8012078:	693b      	ldr	r3, [r7, #16]
 801207a:	2b0f      	cmp	r3, #15
 801207c:	d90b      	bls.n	8012096 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 801207e:	2301      	movs	r3, #1
 8012080:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8012082:	e008      	b.n	8012096 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8012084:	2301      	movs	r3, #1
 8012086:	75fb      	strb	r3, [r7, #23]
      break;
 8012088:	e006      	b.n	8012098 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 801208a:	bf00      	nop
 801208c:	e004      	b.n	8012098 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 801208e:	bf00      	nop
 8012090:	e002      	b.n	8012098 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8012092:	bf00      	nop
 8012094:	e000      	b.n	8012098 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8012096:	bf00      	nop
  }
  if (status == HAL_OK)
 8012098:	7dfb      	ldrb	r3, [r7, #23]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d10d      	bne.n	80120ba <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	68ba      	ldr	r2, [r7, #8]
 80120a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	689b      	ldr	r3, [r3, #8]
 80120ac:	f023 0118 	bic.w	r1, r3, #24
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	687a      	ldr	r2, [r7, #4]
 80120b6:	430a      	orrs	r2, r1
 80120b8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80120ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80120bc:	4618      	mov	r0, r3
 80120be:	371c      	adds	r7, #28
 80120c0:	46bd      	mov	sp, r7
 80120c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c6:	4770      	bx	lr

080120c8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d101      	bne.n	80120da <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80120d6:	2301      	movs	r3, #1
 80120d8:	e049      	b.n	801216e <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80120e0:	b2db      	uxtb	r3, r3
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d106      	bne.n	80120f4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2200      	movs	r2, #0
 80120ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	f7f2 ffee 	bl	80050d0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2202      	movs	r2, #2
 80120f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	685a      	ldr	r2, [r3, #4]
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	430a      	orrs	r2, r1
 8012110:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012118:	f023 0107 	bic.w	r1, r3, #7
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	689a      	ldr	r2, [r3, #8]
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	430a      	orrs	r2, r1
 8012126:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801212e:	4b12      	ldr	r3, [pc, #72]	; (8012178 <HAL_DMA2D_Init+0xb0>)
 8012130:	4013      	ands	r3, r2
 8012132:	687a      	ldr	r2, [r7, #4]
 8012134:	68d1      	ldr	r1, [r2, #12]
 8012136:	687a      	ldr	r2, [r7, #4]
 8012138:	6812      	ldr	r2, [r2, #0]
 801213a:	430b      	orrs	r3, r1
 801213c:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012144:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	691b      	ldr	r3, [r3, #16]
 801214c:	051a      	lsls	r2, r3, #20
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	695b      	ldr	r3, [r3, #20]
 8012152:	055b      	lsls	r3, r3, #21
 8012154:	431a      	orrs	r2, r3
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	430a      	orrs	r2, r1
 801215c:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2200      	movs	r2, #0
 8012162:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2201      	movs	r2, #1
 8012168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801216c:	2300      	movs	r3, #0
}
 801216e:	4618      	mov	r0, r3
 8012170:	3708      	adds	r7, #8
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	ffffc000 	.word	0xffffc000

0801217c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 801217c:	b480      	push	{r7}
 801217e:	b087      	sub	sp, #28
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
 8012184:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	685b      	ldr	r3, [r3, #4]
 801218a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012194:	2b01      	cmp	r3, #1
 8012196:	d101      	bne.n	801219c <HAL_DMA2D_ConfigLayer+0x20>
 8012198:	2302      	movs	r3, #2
 801219a:	e084      	b.n	80122a6 <HAL_DMA2D_ConfigLayer+0x12a>
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	2201      	movs	r2, #1
 80121a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2202      	movs	r2, #2
 80121a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80121ac:	683a      	ldr	r2, [r7, #0]
 80121ae:	4613      	mov	r3, r2
 80121b0:	005b      	lsls	r3, r3, #1
 80121b2:	4413      	add	r3, r2
 80121b4:	00db      	lsls	r3, r3, #3
 80121b6:	3320      	adds	r3, #32
 80121b8:	687a      	ldr	r2, [r7, #4]
 80121ba:	4413      	add	r3, r2
 80121bc:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80121be:	693b      	ldr	r3, [r7, #16]
 80121c0:	685a      	ldr	r2, [r3, #4]
 80121c2:	693b      	ldr	r3, [r7, #16]
 80121c4:	689b      	ldr	r3, [r3, #8]
 80121c6:	041b      	lsls	r3, r3, #16
 80121c8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80121ca:	693b      	ldr	r3, [r7, #16]
 80121cc:	691b      	ldr	r3, [r3, #16]
 80121ce:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80121d0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80121d2:	693b      	ldr	r3, [r7, #16]
 80121d4:	695b      	ldr	r3, [r3, #20]
 80121d6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80121d8:	4313      	orrs	r3, r2
 80121da:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80121dc:	4b35      	ldr	r3, [pc, #212]	; (80122b4 <HAL_DMA2D_ConfigLayer+0x138>)
 80121de:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80121e0:	693b      	ldr	r3, [r7, #16]
 80121e2:	685b      	ldr	r3, [r3, #4]
 80121e4:	2b0a      	cmp	r3, #10
 80121e6:	d003      	beq.n	80121f0 <HAL_DMA2D_ConfigLayer+0x74>
 80121e8:	693b      	ldr	r3, [r7, #16]
 80121ea:	685b      	ldr	r3, [r3, #4]
 80121ec:	2b09      	cmp	r3, #9
 80121ee:	d107      	bne.n	8012200 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80121f0:	693b      	ldr	r3, [r7, #16]
 80121f2:	68db      	ldr	r3, [r3, #12]
 80121f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80121f8:	697a      	ldr	r2, [r7, #20]
 80121fa:	4313      	orrs	r3, r2
 80121fc:	617b      	str	r3, [r7, #20]
 80121fe:	e005      	b.n	801220c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	68db      	ldr	r3, [r3, #12]
 8012204:	061b      	lsls	r3, r3, #24
 8012206:	697a      	ldr	r2, [r7, #20]
 8012208:	4313      	orrs	r3, r2
 801220a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d120      	bne.n	8012254 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	43db      	mvns	r3, r3
 801221c:	ea02 0103 	and.w	r1, r2, r3
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	697a      	ldr	r2, [r7, #20]
 8012226:	430a      	orrs	r2, r1
 8012228:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	693a      	ldr	r2, [r7, #16]
 8012230:	6812      	ldr	r2, [r2, #0]
 8012232:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8012234:	693b      	ldr	r3, [r7, #16]
 8012236:	685b      	ldr	r3, [r3, #4]
 8012238:	2b0a      	cmp	r3, #10
 801223a:	d003      	beq.n	8012244 <HAL_DMA2D_ConfigLayer+0xc8>
 801223c:	693b      	ldr	r3, [r7, #16]
 801223e:	685b      	ldr	r3, [r3, #4]
 8012240:	2b09      	cmp	r3, #9
 8012242:	d127      	bne.n	8012294 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8012244:	693b      	ldr	r3, [r7, #16]
 8012246:	68da      	ldr	r2, [r3, #12]
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8012250:	629a      	str	r2, [r3, #40]	; 0x28
 8012252:	e01f      	b.n	8012294 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	69da      	ldr	r2, [r3, #28]
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	43db      	mvns	r3, r3
 801225e:	ea02 0103 	and.w	r1, r2, r3
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	697a      	ldr	r2, [r7, #20]
 8012268:	430a      	orrs	r2, r1
 801226a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	693a      	ldr	r2, [r7, #16]
 8012272:	6812      	ldr	r2, [r2, #0]
 8012274:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	685b      	ldr	r3, [r3, #4]
 801227a:	2b0a      	cmp	r3, #10
 801227c:	d003      	beq.n	8012286 <HAL_DMA2D_ConfigLayer+0x10a>
 801227e:	693b      	ldr	r3, [r7, #16]
 8012280:	685b      	ldr	r3, [r3, #4]
 8012282:	2b09      	cmp	r3, #9
 8012284:	d106      	bne.n	8012294 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8012286:	693b      	ldr	r3, [r7, #16]
 8012288:	68da      	ldr	r2, [r3, #12]
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8012292:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	2201      	movs	r2, #1
 8012298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2200      	movs	r2, #0
 80122a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80122a4:	2300      	movs	r3, #0
}
 80122a6:	4618      	mov	r0, r3
 80122a8:	371c      	adds	r7, #28
 80122aa:	46bd      	mov	sp, r7
 80122ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b0:	4770      	bx	lr
 80122b2:	bf00      	nop
 80122b4:	ff33000f 	.word	0xff33000f

080122b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80122b8:	b480      	push	{r7}
 80122ba:	b089      	sub	sp, #36	; 0x24
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
 80122c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80122c2:	2300      	movs	r3, #0
 80122c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80122c6:	2300      	movs	r3, #0
 80122c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80122ca:	2300      	movs	r3, #0
 80122cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80122ce:	2300      	movs	r3, #0
 80122d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80122d2:	2300      	movs	r3, #0
 80122d4:	61fb      	str	r3, [r7, #28]
 80122d6:	e175      	b.n	80125c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80122d8:	2201      	movs	r2, #1
 80122da:	69fb      	ldr	r3, [r7, #28]
 80122dc:	fa02 f303 	lsl.w	r3, r2, r3
 80122e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	697a      	ldr	r2, [r7, #20]
 80122e8:	4013      	ands	r3, r2
 80122ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80122ec:	693a      	ldr	r2, [r7, #16]
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	429a      	cmp	r2, r3
 80122f2:	f040 8164 	bne.w	80125be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	685b      	ldr	r3, [r3, #4]
 80122fa:	2b01      	cmp	r3, #1
 80122fc:	d00b      	beq.n	8012316 <HAL_GPIO_Init+0x5e>
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	685b      	ldr	r3, [r3, #4]
 8012302:	2b02      	cmp	r3, #2
 8012304:	d007      	beq.n	8012316 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801230a:	2b11      	cmp	r3, #17
 801230c:	d003      	beq.n	8012316 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	685b      	ldr	r3, [r3, #4]
 8012312:	2b12      	cmp	r3, #18
 8012314:	d130      	bne.n	8012378 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	689b      	ldr	r3, [r3, #8]
 801231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801231c:	69fb      	ldr	r3, [r7, #28]
 801231e:	005b      	lsls	r3, r3, #1
 8012320:	2203      	movs	r2, #3
 8012322:	fa02 f303 	lsl.w	r3, r2, r3
 8012326:	43db      	mvns	r3, r3
 8012328:	69ba      	ldr	r2, [r7, #24]
 801232a:	4013      	ands	r3, r2
 801232c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	68da      	ldr	r2, [r3, #12]
 8012332:	69fb      	ldr	r3, [r7, #28]
 8012334:	005b      	lsls	r3, r3, #1
 8012336:	fa02 f303 	lsl.w	r3, r2, r3
 801233a:	69ba      	ldr	r2, [r7, #24]
 801233c:	4313      	orrs	r3, r2
 801233e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	69ba      	ldr	r2, [r7, #24]
 8012344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	685b      	ldr	r3, [r3, #4]
 801234a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801234c:	2201      	movs	r2, #1
 801234e:	69fb      	ldr	r3, [r7, #28]
 8012350:	fa02 f303 	lsl.w	r3, r2, r3
 8012354:	43db      	mvns	r3, r3
 8012356:	69ba      	ldr	r2, [r7, #24]
 8012358:	4013      	ands	r3, r2
 801235a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	685b      	ldr	r3, [r3, #4]
 8012360:	091b      	lsrs	r3, r3, #4
 8012362:	f003 0201 	and.w	r2, r3, #1
 8012366:	69fb      	ldr	r3, [r7, #28]
 8012368:	fa02 f303 	lsl.w	r3, r2, r3
 801236c:	69ba      	ldr	r2, [r7, #24]
 801236e:	4313      	orrs	r3, r2
 8012370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	69ba      	ldr	r2, [r7, #24]
 8012376:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	68db      	ldr	r3, [r3, #12]
 801237c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 801237e:	69fb      	ldr	r3, [r7, #28]
 8012380:	005b      	lsls	r3, r3, #1
 8012382:	2203      	movs	r2, #3
 8012384:	fa02 f303 	lsl.w	r3, r2, r3
 8012388:	43db      	mvns	r3, r3
 801238a:	69ba      	ldr	r2, [r7, #24]
 801238c:	4013      	ands	r3, r2
 801238e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	689a      	ldr	r2, [r3, #8]
 8012394:	69fb      	ldr	r3, [r7, #28]
 8012396:	005b      	lsls	r3, r3, #1
 8012398:	fa02 f303 	lsl.w	r3, r2, r3
 801239c:	69ba      	ldr	r2, [r7, #24]
 801239e:	4313      	orrs	r3, r2
 80123a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	69ba      	ldr	r2, [r7, #24]
 80123a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	685b      	ldr	r3, [r3, #4]
 80123ac:	2b02      	cmp	r3, #2
 80123ae:	d003      	beq.n	80123b8 <HAL_GPIO_Init+0x100>
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	685b      	ldr	r3, [r3, #4]
 80123b4:	2b12      	cmp	r3, #18
 80123b6:	d123      	bne.n	8012400 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80123b8:	69fb      	ldr	r3, [r7, #28]
 80123ba:	08da      	lsrs	r2, r3, #3
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	3208      	adds	r2, #8
 80123c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80123c6:	69fb      	ldr	r3, [r7, #28]
 80123c8:	f003 0307 	and.w	r3, r3, #7
 80123cc:	009b      	lsls	r3, r3, #2
 80123ce:	220f      	movs	r2, #15
 80123d0:	fa02 f303 	lsl.w	r3, r2, r3
 80123d4:	43db      	mvns	r3, r3
 80123d6:	69ba      	ldr	r2, [r7, #24]
 80123d8:	4013      	ands	r3, r2
 80123da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	691a      	ldr	r2, [r3, #16]
 80123e0:	69fb      	ldr	r3, [r7, #28]
 80123e2:	f003 0307 	and.w	r3, r3, #7
 80123e6:	009b      	lsls	r3, r3, #2
 80123e8:	fa02 f303 	lsl.w	r3, r2, r3
 80123ec:	69ba      	ldr	r2, [r7, #24]
 80123ee:	4313      	orrs	r3, r2
 80123f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80123f2:	69fb      	ldr	r3, [r7, #28]
 80123f4:	08da      	lsrs	r2, r3, #3
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	3208      	adds	r2, #8
 80123fa:	69b9      	ldr	r1, [r7, #24]
 80123fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8012406:	69fb      	ldr	r3, [r7, #28]
 8012408:	005b      	lsls	r3, r3, #1
 801240a:	2203      	movs	r2, #3
 801240c:	fa02 f303 	lsl.w	r3, r2, r3
 8012410:	43db      	mvns	r3, r3
 8012412:	69ba      	ldr	r2, [r7, #24]
 8012414:	4013      	ands	r3, r2
 8012416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	685b      	ldr	r3, [r3, #4]
 801241c:	f003 0203 	and.w	r2, r3, #3
 8012420:	69fb      	ldr	r3, [r7, #28]
 8012422:	005b      	lsls	r3, r3, #1
 8012424:	fa02 f303 	lsl.w	r3, r2, r3
 8012428:	69ba      	ldr	r2, [r7, #24]
 801242a:	4313      	orrs	r3, r2
 801242c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	69ba      	ldr	r2, [r7, #24]
 8012432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	685b      	ldr	r3, [r3, #4]
 8012438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801243c:	2b00      	cmp	r3, #0
 801243e:	f000 80be 	beq.w	80125be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012442:	4b66      	ldr	r3, [pc, #408]	; (80125dc <HAL_GPIO_Init+0x324>)
 8012444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012446:	4a65      	ldr	r2, [pc, #404]	; (80125dc <HAL_GPIO_Init+0x324>)
 8012448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801244c:	6453      	str	r3, [r2, #68]	; 0x44
 801244e:	4b63      	ldr	r3, [pc, #396]	; (80125dc <HAL_GPIO_Init+0x324>)
 8012450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012456:	60fb      	str	r3, [r7, #12]
 8012458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 801245a:	4a61      	ldr	r2, [pc, #388]	; (80125e0 <HAL_GPIO_Init+0x328>)
 801245c:	69fb      	ldr	r3, [r7, #28]
 801245e:	089b      	lsrs	r3, r3, #2
 8012460:	3302      	adds	r3, #2
 8012462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012466:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8012468:	69fb      	ldr	r3, [r7, #28]
 801246a:	f003 0303 	and.w	r3, r3, #3
 801246e:	009b      	lsls	r3, r3, #2
 8012470:	220f      	movs	r2, #15
 8012472:	fa02 f303 	lsl.w	r3, r2, r3
 8012476:	43db      	mvns	r3, r3
 8012478:	69ba      	ldr	r2, [r7, #24]
 801247a:	4013      	ands	r3, r2
 801247c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	4a58      	ldr	r2, [pc, #352]	; (80125e4 <HAL_GPIO_Init+0x32c>)
 8012482:	4293      	cmp	r3, r2
 8012484:	d037      	beq.n	80124f6 <HAL_GPIO_Init+0x23e>
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	4a57      	ldr	r2, [pc, #348]	; (80125e8 <HAL_GPIO_Init+0x330>)
 801248a:	4293      	cmp	r3, r2
 801248c:	d031      	beq.n	80124f2 <HAL_GPIO_Init+0x23a>
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	4a56      	ldr	r2, [pc, #344]	; (80125ec <HAL_GPIO_Init+0x334>)
 8012492:	4293      	cmp	r3, r2
 8012494:	d02b      	beq.n	80124ee <HAL_GPIO_Init+0x236>
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	4a55      	ldr	r2, [pc, #340]	; (80125f0 <HAL_GPIO_Init+0x338>)
 801249a:	4293      	cmp	r3, r2
 801249c:	d025      	beq.n	80124ea <HAL_GPIO_Init+0x232>
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	4a54      	ldr	r2, [pc, #336]	; (80125f4 <HAL_GPIO_Init+0x33c>)
 80124a2:	4293      	cmp	r3, r2
 80124a4:	d01f      	beq.n	80124e6 <HAL_GPIO_Init+0x22e>
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	4a53      	ldr	r2, [pc, #332]	; (80125f8 <HAL_GPIO_Init+0x340>)
 80124aa:	4293      	cmp	r3, r2
 80124ac:	d019      	beq.n	80124e2 <HAL_GPIO_Init+0x22a>
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	4a52      	ldr	r2, [pc, #328]	; (80125fc <HAL_GPIO_Init+0x344>)
 80124b2:	4293      	cmp	r3, r2
 80124b4:	d013      	beq.n	80124de <HAL_GPIO_Init+0x226>
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	4a51      	ldr	r2, [pc, #324]	; (8012600 <HAL_GPIO_Init+0x348>)
 80124ba:	4293      	cmp	r3, r2
 80124bc:	d00d      	beq.n	80124da <HAL_GPIO_Init+0x222>
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	4a50      	ldr	r2, [pc, #320]	; (8012604 <HAL_GPIO_Init+0x34c>)
 80124c2:	4293      	cmp	r3, r2
 80124c4:	d007      	beq.n	80124d6 <HAL_GPIO_Init+0x21e>
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	4a4f      	ldr	r2, [pc, #316]	; (8012608 <HAL_GPIO_Init+0x350>)
 80124ca:	4293      	cmp	r3, r2
 80124cc:	d101      	bne.n	80124d2 <HAL_GPIO_Init+0x21a>
 80124ce:	2309      	movs	r3, #9
 80124d0:	e012      	b.n	80124f8 <HAL_GPIO_Init+0x240>
 80124d2:	230a      	movs	r3, #10
 80124d4:	e010      	b.n	80124f8 <HAL_GPIO_Init+0x240>
 80124d6:	2308      	movs	r3, #8
 80124d8:	e00e      	b.n	80124f8 <HAL_GPIO_Init+0x240>
 80124da:	2307      	movs	r3, #7
 80124dc:	e00c      	b.n	80124f8 <HAL_GPIO_Init+0x240>
 80124de:	2306      	movs	r3, #6
 80124e0:	e00a      	b.n	80124f8 <HAL_GPIO_Init+0x240>
 80124e2:	2305      	movs	r3, #5
 80124e4:	e008      	b.n	80124f8 <HAL_GPIO_Init+0x240>
 80124e6:	2304      	movs	r3, #4
 80124e8:	e006      	b.n	80124f8 <HAL_GPIO_Init+0x240>
 80124ea:	2303      	movs	r3, #3
 80124ec:	e004      	b.n	80124f8 <HAL_GPIO_Init+0x240>
 80124ee:	2302      	movs	r3, #2
 80124f0:	e002      	b.n	80124f8 <HAL_GPIO_Init+0x240>
 80124f2:	2301      	movs	r3, #1
 80124f4:	e000      	b.n	80124f8 <HAL_GPIO_Init+0x240>
 80124f6:	2300      	movs	r3, #0
 80124f8:	69fa      	ldr	r2, [r7, #28]
 80124fa:	f002 0203 	and.w	r2, r2, #3
 80124fe:	0092      	lsls	r2, r2, #2
 8012500:	4093      	lsls	r3, r2
 8012502:	69ba      	ldr	r2, [r7, #24]
 8012504:	4313      	orrs	r3, r2
 8012506:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8012508:	4935      	ldr	r1, [pc, #212]	; (80125e0 <HAL_GPIO_Init+0x328>)
 801250a:	69fb      	ldr	r3, [r7, #28]
 801250c:	089b      	lsrs	r3, r3, #2
 801250e:	3302      	adds	r3, #2
 8012510:	69ba      	ldr	r2, [r7, #24]
 8012512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012516:	4b3d      	ldr	r3, [pc, #244]	; (801260c <HAL_GPIO_Init+0x354>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801251c:	693b      	ldr	r3, [r7, #16]
 801251e:	43db      	mvns	r3, r3
 8012520:	69ba      	ldr	r2, [r7, #24]
 8012522:	4013      	ands	r3, r2
 8012524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8012526:	683b      	ldr	r3, [r7, #0]
 8012528:	685b      	ldr	r3, [r3, #4]
 801252a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801252e:	2b00      	cmp	r3, #0
 8012530:	d003      	beq.n	801253a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8012532:	69ba      	ldr	r2, [r7, #24]
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	4313      	orrs	r3, r2
 8012538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801253a:	4a34      	ldr	r2, [pc, #208]	; (801260c <HAL_GPIO_Init+0x354>)
 801253c:	69bb      	ldr	r3, [r7, #24]
 801253e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012540:	4b32      	ldr	r3, [pc, #200]	; (801260c <HAL_GPIO_Init+0x354>)
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012546:	693b      	ldr	r3, [r7, #16]
 8012548:	43db      	mvns	r3, r3
 801254a:	69ba      	ldr	r2, [r7, #24]
 801254c:	4013      	ands	r3, r2
 801254e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	685b      	ldr	r3, [r3, #4]
 8012554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012558:	2b00      	cmp	r3, #0
 801255a:	d003      	beq.n	8012564 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 801255c:	69ba      	ldr	r2, [r7, #24]
 801255e:	693b      	ldr	r3, [r7, #16]
 8012560:	4313      	orrs	r3, r2
 8012562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012564:	4a29      	ldr	r2, [pc, #164]	; (801260c <HAL_GPIO_Init+0x354>)
 8012566:	69bb      	ldr	r3, [r7, #24]
 8012568:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801256a:	4b28      	ldr	r3, [pc, #160]	; (801260c <HAL_GPIO_Init+0x354>)
 801256c:	689b      	ldr	r3, [r3, #8]
 801256e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012570:	693b      	ldr	r3, [r7, #16]
 8012572:	43db      	mvns	r3, r3
 8012574:	69ba      	ldr	r2, [r7, #24]
 8012576:	4013      	ands	r3, r2
 8012578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801257a:	683b      	ldr	r3, [r7, #0]
 801257c:	685b      	ldr	r3, [r3, #4]
 801257e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012582:	2b00      	cmp	r3, #0
 8012584:	d003      	beq.n	801258e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8012586:	69ba      	ldr	r2, [r7, #24]
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	4313      	orrs	r3, r2
 801258c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801258e:	4a1f      	ldr	r2, [pc, #124]	; (801260c <HAL_GPIO_Init+0x354>)
 8012590:	69bb      	ldr	r3, [r7, #24]
 8012592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012594:	4b1d      	ldr	r3, [pc, #116]	; (801260c <HAL_GPIO_Init+0x354>)
 8012596:	68db      	ldr	r3, [r3, #12]
 8012598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801259a:	693b      	ldr	r3, [r7, #16]
 801259c:	43db      	mvns	r3, r3
 801259e:	69ba      	ldr	r2, [r7, #24]
 80125a0:	4013      	ands	r3, r2
 80125a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80125a4:	683b      	ldr	r3, [r7, #0]
 80125a6:	685b      	ldr	r3, [r3, #4]
 80125a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d003      	beq.n	80125b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80125b0:	69ba      	ldr	r2, [r7, #24]
 80125b2:	693b      	ldr	r3, [r7, #16]
 80125b4:	4313      	orrs	r3, r2
 80125b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80125b8:	4a14      	ldr	r2, [pc, #80]	; (801260c <HAL_GPIO_Init+0x354>)
 80125ba:	69bb      	ldr	r3, [r7, #24]
 80125bc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80125be:	69fb      	ldr	r3, [r7, #28]
 80125c0:	3301      	adds	r3, #1
 80125c2:	61fb      	str	r3, [r7, #28]
 80125c4:	69fb      	ldr	r3, [r7, #28]
 80125c6:	2b0f      	cmp	r3, #15
 80125c8:	f67f ae86 	bls.w	80122d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80125cc:	bf00      	nop
 80125ce:	bf00      	nop
 80125d0:	3724      	adds	r7, #36	; 0x24
 80125d2:	46bd      	mov	sp, r7
 80125d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d8:	4770      	bx	lr
 80125da:	bf00      	nop
 80125dc:	40023800 	.word	0x40023800
 80125e0:	40013800 	.word	0x40013800
 80125e4:	40020000 	.word	0x40020000
 80125e8:	40020400 	.word	0x40020400
 80125ec:	40020800 	.word	0x40020800
 80125f0:	40020c00 	.word	0x40020c00
 80125f4:	40021000 	.word	0x40021000
 80125f8:	40021400 	.word	0x40021400
 80125fc:	40021800 	.word	0x40021800
 8012600:	40021c00 	.word	0x40021c00
 8012604:	40022000 	.word	0x40022000
 8012608:	40022400 	.word	0x40022400
 801260c:	40013c00 	.word	0x40013c00

08012610 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8012610:	b480      	push	{r7}
 8012612:	b087      	sub	sp, #28
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 801261a:	2300      	movs	r3, #0
 801261c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 801261e:	2300      	movs	r3, #0
 8012620:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8012622:	2300      	movs	r3, #0
 8012624:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8012626:	2300      	movs	r3, #0
 8012628:	617b      	str	r3, [r7, #20]
 801262a:	e0d9      	b.n	80127e0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 801262c:	2201      	movs	r2, #1
 801262e:	697b      	ldr	r3, [r7, #20]
 8012630:	fa02 f303 	lsl.w	r3, r2, r3
 8012634:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8012636:	683a      	ldr	r2, [r7, #0]
 8012638:	693b      	ldr	r3, [r7, #16]
 801263a:	4013      	ands	r3, r2
 801263c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801263e:	68fa      	ldr	r2, [r7, #12]
 8012640:	693b      	ldr	r3, [r7, #16]
 8012642:	429a      	cmp	r2, r3
 8012644:	f040 80c9 	bne.w	80127da <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8012648:	4a6b      	ldr	r2, [pc, #428]	; (80127f8 <HAL_GPIO_DeInit+0x1e8>)
 801264a:	697b      	ldr	r3, [r7, #20]
 801264c:	089b      	lsrs	r3, r3, #2
 801264e:	3302      	adds	r3, #2
 8012650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012654:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	f003 0303 	and.w	r3, r3, #3
 801265c:	009b      	lsls	r3, r3, #2
 801265e:	220f      	movs	r2, #15
 8012660:	fa02 f303 	lsl.w	r3, r2, r3
 8012664:	68ba      	ldr	r2, [r7, #8]
 8012666:	4013      	ands	r3, r2
 8012668:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	4a63      	ldr	r2, [pc, #396]	; (80127fc <HAL_GPIO_DeInit+0x1ec>)
 801266e:	4293      	cmp	r3, r2
 8012670:	d037      	beq.n	80126e2 <HAL_GPIO_DeInit+0xd2>
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	4a62      	ldr	r2, [pc, #392]	; (8012800 <HAL_GPIO_DeInit+0x1f0>)
 8012676:	4293      	cmp	r3, r2
 8012678:	d031      	beq.n	80126de <HAL_GPIO_DeInit+0xce>
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	4a61      	ldr	r2, [pc, #388]	; (8012804 <HAL_GPIO_DeInit+0x1f4>)
 801267e:	4293      	cmp	r3, r2
 8012680:	d02b      	beq.n	80126da <HAL_GPIO_DeInit+0xca>
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	4a60      	ldr	r2, [pc, #384]	; (8012808 <HAL_GPIO_DeInit+0x1f8>)
 8012686:	4293      	cmp	r3, r2
 8012688:	d025      	beq.n	80126d6 <HAL_GPIO_DeInit+0xc6>
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	4a5f      	ldr	r2, [pc, #380]	; (801280c <HAL_GPIO_DeInit+0x1fc>)
 801268e:	4293      	cmp	r3, r2
 8012690:	d01f      	beq.n	80126d2 <HAL_GPIO_DeInit+0xc2>
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	4a5e      	ldr	r2, [pc, #376]	; (8012810 <HAL_GPIO_DeInit+0x200>)
 8012696:	4293      	cmp	r3, r2
 8012698:	d019      	beq.n	80126ce <HAL_GPIO_DeInit+0xbe>
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	4a5d      	ldr	r2, [pc, #372]	; (8012814 <HAL_GPIO_DeInit+0x204>)
 801269e:	4293      	cmp	r3, r2
 80126a0:	d013      	beq.n	80126ca <HAL_GPIO_DeInit+0xba>
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	4a5c      	ldr	r2, [pc, #368]	; (8012818 <HAL_GPIO_DeInit+0x208>)
 80126a6:	4293      	cmp	r3, r2
 80126a8:	d00d      	beq.n	80126c6 <HAL_GPIO_DeInit+0xb6>
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	4a5b      	ldr	r2, [pc, #364]	; (801281c <HAL_GPIO_DeInit+0x20c>)
 80126ae:	4293      	cmp	r3, r2
 80126b0:	d007      	beq.n	80126c2 <HAL_GPIO_DeInit+0xb2>
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	4a5a      	ldr	r2, [pc, #360]	; (8012820 <HAL_GPIO_DeInit+0x210>)
 80126b6:	4293      	cmp	r3, r2
 80126b8:	d101      	bne.n	80126be <HAL_GPIO_DeInit+0xae>
 80126ba:	2309      	movs	r3, #9
 80126bc:	e012      	b.n	80126e4 <HAL_GPIO_DeInit+0xd4>
 80126be:	230a      	movs	r3, #10
 80126c0:	e010      	b.n	80126e4 <HAL_GPIO_DeInit+0xd4>
 80126c2:	2308      	movs	r3, #8
 80126c4:	e00e      	b.n	80126e4 <HAL_GPIO_DeInit+0xd4>
 80126c6:	2307      	movs	r3, #7
 80126c8:	e00c      	b.n	80126e4 <HAL_GPIO_DeInit+0xd4>
 80126ca:	2306      	movs	r3, #6
 80126cc:	e00a      	b.n	80126e4 <HAL_GPIO_DeInit+0xd4>
 80126ce:	2305      	movs	r3, #5
 80126d0:	e008      	b.n	80126e4 <HAL_GPIO_DeInit+0xd4>
 80126d2:	2304      	movs	r3, #4
 80126d4:	e006      	b.n	80126e4 <HAL_GPIO_DeInit+0xd4>
 80126d6:	2303      	movs	r3, #3
 80126d8:	e004      	b.n	80126e4 <HAL_GPIO_DeInit+0xd4>
 80126da:	2302      	movs	r3, #2
 80126dc:	e002      	b.n	80126e4 <HAL_GPIO_DeInit+0xd4>
 80126de:	2301      	movs	r3, #1
 80126e0:	e000      	b.n	80126e4 <HAL_GPIO_DeInit+0xd4>
 80126e2:	2300      	movs	r3, #0
 80126e4:	697a      	ldr	r2, [r7, #20]
 80126e6:	f002 0203 	and.w	r2, r2, #3
 80126ea:	0092      	lsls	r2, r2, #2
 80126ec:	4093      	lsls	r3, r2
 80126ee:	68ba      	ldr	r2, [r7, #8]
 80126f0:	429a      	cmp	r2, r3
 80126f2:	d132      	bne.n	801275a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80126f4:	4b4b      	ldr	r3, [pc, #300]	; (8012824 <HAL_GPIO_DeInit+0x214>)
 80126f6:	681a      	ldr	r2, [r3, #0]
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	43db      	mvns	r3, r3
 80126fc:	4949      	ldr	r1, [pc, #292]	; (8012824 <HAL_GPIO_DeInit+0x214>)
 80126fe:	4013      	ands	r3, r2
 8012700:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8012702:	4b48      	ldr	r3, [pc, #288]	; (8012824 <HAL_GPIO_DeInit+0x214>)
 8012704:	685a      	ldr	r2, [r3, #4]
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	43db      	mvns	r3, r3
 801270a:	4946      	ldr	r1, [pc, #280]	; (8012824 <HAL_GPIO_DeInit+0x214>)
 801270c:	4013      	ands	r3, r2
 801270e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8012710:	4b44      	ldr	r3, [pc, #272]	; (8012824 <HAL_GPIO_DeInit+0x214>)
 8012712:	689a      	ldr	r2, [r3, #8]
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	43db      	mvns	r3, r3
 8012718:	4942      	ldr	r1, [pc, #264]	; (8012824 <HAL_GPIO_DeInit+0x214>)
 801271a:	4013      	ands	r3, r2
 801271c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801271e:	4b41      	ldr	r3, [pc, #260]	; (8012824 <HAL_GPIO_DeInit+0x214>)
 8012720:	68da      	ldr	r2, [r3, #12]
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	43db      	mvns	r3, r3
 8012726:	493f      	ldr	r1, [pc, #252]	; (8012824 <HAL_GPIO_DeInit+0x214>)
 8012728:	4013      	ands	r3, r2
 801272a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	f003 0303 	and.w	r3, r3, #3
 8012732:	009b      	lsls	r3, r3, #2
 8012734:	220f      	movs	r2, #15
 8012736:	fa02 f303 	lsl.w	r3, r2, r3
 801273a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 801273c:	4a2e      	ldr	r2, [pc, #184]	; (80127f8 <HAL_GPIO_DeInit+0x1e8>)
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	089b      	lsrs	r3, r3, #2
 8012742:	3302      	adds	r3, #2
 8012744:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	43da      	mvns	r2, r3
 801274c:	482a      	ldr	r0, [pc, #168]	; (80127f8 <HAL_GPIO_DeInit+0x1e8>)
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	089b      	lsrs	r3, r3, #2
 8012752:	400a      	ands	r2, r1
 8012754:	3302      	adds	r3, #2
 8012756:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	697b      	ldr	r3, [r7, #20]
 8012760:	005b      	lsls	r3, r3, #1
 8012762:	2103      	movs	r1, #3
 8012764:	fa01 f303 	lsl.w	r3, r1, r3
 8012768:	43db      	mvns	r3, r3
 801276a:	401a      	ands	r2, r3
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8012770:	697b      	ldr	r3, [r7, #20]
 8012772:	08da      	lsrs	r2, r3, #3
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	3208      	adds	r2, #8
 8012778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	f003 0307 	and.w	r3, r3, #7
 8012782:	009b      	lsls	r3, r3, #2
 8012784:	220f      	movs	r2, #15
 8012786:	fa02 f303 	lsl.w	r3, r2, r3
 801278a:	43db      	mvns	r3, r3
 801278c:	697a      	ldr	r2, [r7, #20]
 801278e:	08d2      	lsrs	r2, r2, #3
 8012790:	4019      	ands	r1, r3
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	3208      	adds	r2, #8
 8012796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	68da      	ldr	r2, [r3, #12]
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	005b      	lsls	r3, r3, #1
 80127a2:	2103      	movs	r1, #3
 80127a4:	fa01 f303 	lsl.w	r3, r1, r3
 80127a8:	43db      	mvns	r3, r3
 80127aa:	401a      	ands	r2, r3
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	685a      	ldr	r2, [r3, #4]
 80127b4:	2101      	movs	r1, #1
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	fa01 f303 	lsl.w	r3, r1, r3
 80127bc:	43db      	mvns	r3, r3
 80127be:	401a      	ands	r2, r3
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	689a      	ldr	r2, [r3, #8]
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	005b      	lsls	r3, r3, #1
 80127cc:	2103      	movs	r1, #3
 80127ce:	fa01 f303 	lsl.w	r3, r1, r3
 80127d2:	43db      	mvns	r3, r3
 80127d4:	401a      	ands	r2, r3
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80127da:	697b      	ldr	r3, [r7, #20]
 80127dc:	3301      	adds	r3, #1
 80127de:	617b      	str	r3, [r7, #20]
 80127e0:	697b      	ldr	r3, [r7, #20]
 80127e2:	2b0f      	cmp	r3, #15
 80127e4:	f67f af22 	bls.w	801262c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80127e8:	bf00      	nop
 80127ea:	bf00      	nop
 80127ec:	371c      	adds	r7, #28
 80127ee:	46bd      	mov	sp, r7
 80127f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f4:	4770      	bx	lr
 80127f6:	bf00      	nop
 80127f8:	40013800 	.word	0x40013800
 80127fc:	40020000 	.word	0x40020000
 8012800:	40020400 	.word	0x40020400
 8012804:	40020800 	.word	0x40020800
 8012808:	40020c00 	.word	0x40020c00
 801280c:	40021000 	.word	0x40021000
 8012810:	40021400 	.word	0x40021400
 8012814:	40021800 	.word	0x40021800
 8012818:	40021c00 	.word	0x40021c00
 801281c:	40022000 	.word	0x40022000
 8012820:	40022400 	.word	0x40022400
 8012824:	40013c00 	.word	0x40013c00

08012828 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8012828:	b480      	push	{r7}
 801282a:	b085      	sub	sp, #20
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
 8012830:	460b      	mov	r3, r1
 8012832:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	691a      	ldr	r2, [r3, #16]
 8012838:	887b      	ldrh	r3, [r7, #2]
 801283a:	4013      	ands	r3, r2
 801283c:	2b00      	cmp	r3, #0
 801283e:	d002      	beq.n	8012846 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012840:	2301      	movs	r3, #1
 8012842:	73fb      	strb	r3, [r7, #15]
 8012844:	e001      	b.n	801284a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8012846:	2300      	movs	r3, #0
 8012848:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801284a:	7bfb      	ldrb	r3, [r7, #15]
}
 801284c:	4618      	mov	r0, r3
 801284e:	3714      	adds	r7, #20
 8012850:	46bd      	mov	sp, r7
 8012852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012856:	4770      	bx	lr

08012858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012858:	b480      	push	{r7}
 801285a:	b083      	sub	sp, #12
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
 8012860:	460b      	mov	r3, r1
 8012862:	807b      	strh	r3, [r7, #2]
 8012864:	4613      	mov	r3, r2
 8012866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012868:	787b      	ldrb	r3, [r7, #1]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d003      	beq.n	8012876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801286e:	887a      	ldrh	r2, [r7, #2]
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8012874:	e003      	b.n	801287e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8012876:	887b      	ldrh	r3, [r7, #2]
 8012878:	041a      	lsls	r2, r3, #16
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	619a      	str	r2, [r3, #24]
}
 801287e:	bf00      	nop
 8012880:	370c      	adds	r7, #12
 8012882:	46bd      	mov	sp, r7
 8012884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012888:	4770      	bx	lr

0801288a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801288a:	b480      	push	{r7}
 801288c:	b085      	sub	sp, #20
 801288e:	af00      	add	r7, sp, #0
 8012890:	6078      	str	r0, [r7, #4]
 8012892:	460b      	mov	r3, r1
 8012894:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	695b      	ldr	r3, [r3, #20]
 801289a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801289c:	887a      	ldrh	r2, [r7, #2]
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	4013      	ands	r3, r2
 80128a2:	041a      	lsls	r2, r3, #16
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	43d9      	mvns	r1, r3
 80128a8:	887b      	ldrh	r3, [r7, #2]
 80128aa:	400b      	ands	r3, r1
 80128ac:	431a      	orrs	r2, r3
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	619a      	str	r2, [r3, #24]
}
 80128b2:	bf00      	nop
 80128b4:	3714      	adds	r7, #20
 80128b6:	46bd      	mov	sp, r7
 80128b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128bc:	4770      	bx	lr

080128be <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80128be:	b580      	push	{r7, lr}
 80128c0:	b084      	sub	sp, #16
 80128c2:	af00      	add	r7, sp, #0
 80128c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d101      	bne.n	80128d0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80128cc:	2301      	movs	r3, #1
 80128ce:	e041      	b.n	8012954 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80128d8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	f245 5255 	movw	r2, #21845	; 0x5555
 80128e2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	687a      	ldr	r2, [r7, #4]
 80128ea:	6852      	ldr	r2, [r2, #4]
 80128ec:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	687a      	ldr	r2, [r7, #4]
 80128f4:	6892      	ldr	r2, [r2, #8]
 80128f6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80128f8:	f7fd ff1e 	bl	8010738 <HAL_GetTick>
 80128fc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80128fe:	e00f      	b.n	8012920 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8012900:	f7fd ff1a 	bl	8010738 <HAL_GetTick>
 8012904:	4602      	mov	r2, r0
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	1ad3      	subs	r3, r2, r3
 801290a:	2b30      	cmp	r3, #48	; 0x30
 801290c:	d908      	bls.n	8012920 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	68db      	ldr	r3, [r3, #12]
 8012914:	f003 0307 	and.w	r3, r3, #7
 8012918:	2b00      	cmp	r3, #0
 801291a:	d001      	beq.n	8012920 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 801291c:	2303      	movs	r3, #3
 801291e:	e019      	b.n	8012954 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	68db      	ldr	r3, [r3, #12]
 8012926:	f003 0307 	and.w	r3, r3, #7
 801292a:	2b00      	cmp	r3, #0
 801292c:	d1e8      	bne.n	8012900 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	691a      	ldr	r2, [r3, #16]
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	68db      	ldr	r3, [r3, #12]
 8012938:	429a      	cmp	r2, r3
 801293a:	d005      	beq.n	8012948 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	687a      	ldr	r2, [r7, #4]
 8012942:	68d2      	ldr	r2, [r2, #12]
 8012944:	611a      	str	r2, [r3, #16]
 8012946:	e004      	b.n	8012952 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8012950:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012952:	2300      	movs	r3, #0
}
 8012954:	4618      	mov	r0, r3
 8012956:	3710      	adds	r7, #16
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}

0801295c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b084      	sub	sp, #16
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d101      	bne.n	801296e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 801296a:	2301      	movs	r3, #1
 801296c:	e0bf      	b.n	8012aee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8012974:	b2db      	uxtb	r3, r3
 8012976:	2b00      	cmp	r3, #0
 8012978:	d106      	bne.n	8012988 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	2200      	movs	r2, #0
 801297e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f7f2 ff7a 	bl	800587c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2202      	movs	r2, #2
 801298c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	699a      	ldr	r2, [r3, #24]
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 801299e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	6999      	ldr	r1, [r3, #24]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	685a      	ldr	r2, [r3, #4]
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	689b      	ldr	r3, [r3, #8]
 80129ae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80129b4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	691b      	ldr	r3, [r3, #16]
 80129ba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	430a      	orrs	r2, r1
 80129c2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	6899      	ldr	r1, [r3, #8]
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681a      	ldr	r2, [r3, #0]
 80129ce:	4b4a      	ldr	r3, [pc, #296]	; (8012af8 <HAL_LTDC_Init+0x19c>)
 80129d0:	400b      	ands	r3, r1
 80129d2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	695b      	ldr	r3, [r3, #20]
 80129d8:	041b      	lsls	r3, r3, #16
 80129da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	6899      	ldr	r1, [r3, #8]
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	699a      	ldr	r2, [r3, #24]
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	431a      	orrs	r2, r3
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	430a      	orrs	r2, r1
 80129f0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	68d9      	ldr	r1, [r3, #12]
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681a      	ldr	r2, [r3, #0]
 80129fc:	4b3e      	ldr	r3, [pc, #248]	; (8012af8 <HAL_LTDC_Init+0x19c>)
 80129fe:	400b      	ands	r3, r1
 8012a00:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	69db      	ldr	r3, [r3, #28]
 8012a06:	041b      	lsls	r3, r3, #16
 8012a08:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	68d9      	ldr	r1, [r3, #12]
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6a1a      	ldr	r2, [r3, #32]
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	431a      	orrs	r2, r3
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	430a      	orrs	r2, r1
 8012a1e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	6919      	ldr	r1, [r3, #16]
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	681a      	ldr	r2, [r3, #0]
 8012a2a:	4b33      	ldr	r3, [pc, #204]	; (8012af8 <HAL_LTDC_Init+0x19c>)
 8012a2c:	400b      	ands	r3, r1
 8012a2e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a34:	041b      	lsls	r3, r3, #16
 8012a36:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	6919      	ldr	r1, [r3, #16]
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	431a      	orrs	r2, r3
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	430a      	orrs	r2, r1
 8012a4c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	6959      	ldr	r1, [r3, #20]
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681a      	ldr	r2, [r3, #0]
 8012a58:	4b27      	ldr	r3, [pc, #156]	; (8012af8 <HAL_LTDC_Init+0x19c>)
 8012a5a:	400b      	ands	r3, r1
 8012a5c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a62:	041b      	lsls	r3, r3, #16
 8012a64:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	6959      	ldr	r1, [r3, #20]
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	431a      	orrs	r2, r3
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	430a      	orrs	r2, r1
 8012a7a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012a82:	021b      	lsls	r3, r3, #8
 8012a84:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012a8c:	041b      	lsls	r3, r3, #16
 8012a8e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8012a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012aa6:	68ba      	ldr	r2, [r7, #8]
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	4313      	orrs	r3, r2
 8012aac:	687a      	ldr	r2, [r7, #4]
 8012aae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8012ab2:	431a      	orrs	r2, r3
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	430a      	orrs	r2, r1
 8012aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	f042 0206 	orr.w	r2, r2, #6
 8012aca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	699a      	ldr	r2, [r3, #24]
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	f042 0201 	orr.w	r2, r2, #1
 8012ada:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2200      	movs	r2, #0
 8012ae0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	2201      	movs	r2, #1
 8012ae8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8012aec:	2300      	movs	r3, #0
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3710      	adds	r7, #16
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}
 8012af6:	bf00      	nop
 8012af8:	f000f800 	.word	0xf000f800

08012afc <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b082      	sub	sp, #8
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f7f3 f865 	bl	8005bd4 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2200      	movs	r2, #0
 8012b16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8012b22:	2300      	movs	r3, #0
}
 8012b24:	4618      	mov	r0, r3
 8012b26:	3708      	adds	r7, #8
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}

08012b2c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8012b2c:	b5b0      	push	{r4, r5, r7, lr}
 8012b2e:	b084      	sub	sp, #16
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	60f8      	str	r0, [r7, #12]
 8012b34:	60b9      	str	r1, [r7, #8]
 8012b36:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8012b3e:	2b01      	cmp	r3, #1
 8012b40:	d101      	bne.n	8012b46 <HAL_LTDC_ConfigLayer+0x1a>
 8012b42:	2302      	movs	r3, #2
 8012b44:	e02c      	b.n	8012ba0 <HAL_LTDC_ConfigLayer+0x74>
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	2201      	movs	r2, #1
 8012b4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	2202      	movs	r2, #2
 8012b52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8012b56:	68fa      	ldr	r2, [r7, #12]
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2134      	movs	r1, #52	; 0x34
 8012b5c:	fb01 f303 	mul.w	r3, r1, r3
 8012b60:	4413      	add	r3, r2
 8012b62:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	4614      	mov	r4, r2
 8012b6a:	461d      	mov	r5, r3
 8012b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b78:	682b      	ldr	r3, [r5, #0]
 8012b7a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8012b7c:	687a      	ldr	r2, [r7, #4]
 8012b7e:	68b9      	ldr	r1, [r7, #8]
 8012b80:	68f8      	ldr	r0, [r7, #12]
 8012b82:	f000 fa83 	bl	801308c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	2201      	movs	r2, #1
 8012b8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	2201      	movs	r2, #1
 8012b92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	2200      	movs	r2, #0
 8012b9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8012b9e:	2300      	movs	r3, #0
}
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	3710      	adds	r7, #16
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bdb0      	pop	{r4, r5, r7, pc}

08012ba8 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8012ba8:	b480      	push	{r7}
 8012baa:	b085      	sub	sp, #20
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	60f8      	str	r0, [r7, #12]
 8012bb0:	60b9      	str	r1, [r7, #8]
 8012bb2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8012bba:	2b01      	cmp	r3, #1
 8012bbc:	d101      	bne.n	8012bc2 <HAL_LTDC_ConfigColorKeying+0x1a>
 8012bbe:	2302      	movs	r3, #2
 8012bc0:	e030      	b.n	8012c24 <HAL_LTDC_ConfigColorKeying+0x7c>
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	2201      	movs	r2, #1
 8012bc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	2202      	movs	r2, #2
 8012bce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	461a      	mov	r2, r3
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	01db      	lsls	r3, r3, #7
 8012bdc:	4413      	add	r3, r2
 8012bde:	3384      	adds	r3, #132	; 0x84
 8012be0:	68db      	ldr	r3, [r3, #12]
 8012be2:	68fa      	ldr	r2, [r7, #12]
 8012be4:	6812      	ldr	r2, [r2, #0]
 8012be6:	4611      	mov	r1, r2
 8012be8:	687a      	ldr	r2, [r7, #4]
 8012bea:	01d2      	lsls	r2, r2, #7
 8012bec:	440a      	add	r2, r1
 8012bee:	3284      	adds	r2, #132	; 0x84
 8012bf0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012bf4:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	461a      	mov	r2, r3
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	01db      	lsls	r3, r3, #7
 8012c00:	4413      	add	r3, r2
 8012c02:	3384      	adds	r3, #132	; 0x84
 8012c04:	461a      	mov	r2, r3
 8012c06:	68bb      	ldr	r3, [r7, #8]
 8012c08:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	2201      	movs	r2, #1
 8012c10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	2201      	movs	r2, #1
 8012c16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8012c22:	2300      	movs	r3, #0
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3714      	adds	r7, #20
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2e:	4770      	bx	lr

08012c30 <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 8012c30:	b480      	push	{r7}
 8012c32:	b089      	sub	sp, #36	; 0x24
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	60f8      	str	r0, [r7, #12]
 8012c38:	60b9      	str	r1, [r7, #8]
 8012c3a:	607a      	str	r2, [r7, #4]
 8012c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmp;
  uint32_t counter;
  uint32_t *pcolorlut = pCLUT;
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8012c48:	2b01      	cmp	r3, #1
 8012c4a:	d101      	bne.n	8012c50 <HAL_LTDC_ConfigCLUT+0x20>
 8012c4c:	2302      	movs	r3, #2
 8012c4e:	e057      	b.n	8012d00 <HAL_LTDC_ConfigCLUT+0xd0>
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	2201      	movs	r2, #1
 8012c54:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	2202      	movs	r2, #2
 8012c5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  for (counter = 0U; (counter < CLUTSize); counter++)
 8012c60:	2300      	movs	r3, #0
 8012c62:	61bb      	str	r3, [r7, #24]
 8012c64:	e03f      	b.n	8012ce6 <HAL_LTDC_ConfigCLUT+0xb6>
  {
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8012c66:	68fa      	ldr	r2, [r7, #12]
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	2134      	movs	r1, #52	; 0x34
 8012c6c:	fb01 f303 	mul.w	r3, r1, r3
 8012c70:	4413      	add	r3, r2
 8012c72:	3348      	adds	r3, #72	; 0x48
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	2b06      	cmp	r3, #6
 8012c78:	d114      	bne.n	8012ca4 <HAL_LTDC_ConfigCLUT+0x74>
    {
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8012c7a:	69ba      	ldr	r2, [r7, #24]
 8012c7c:	4613      	mov	r3, r2
 8012c7e:	011b      	lsls	r3, r3, #4
 8012c80:	4413      	add	r3, r2
 8012c82:	061a      	lsls	r2, r3, #24
 8012c84:	697b      	ldr	r3, [r7, #20]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	b2db      	uxtb	r3, r3
 8012c8a:	431a      	orrs	r2, r3
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012c94:	431a      	orrs	r2, r3
 8012c96:	697b      	ldr	r3, [r7, #20]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012c9e:	4313      	orrs	r3, r2
 8012ca0:	61fb      	str	r3, [r7, #28]
 8012ca2:	e010      	b.n	8012cc6 <HAL_LTDC_ConfigCLUT+0x96>
    }
    else
    {
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8012ca4:	69bb      	ldr	r3, [r7, #24]
 8012ca6:	061a      	lsls	r2, r3, #24
 8012ca8:	697b      	ldr	r3, [r7, #20]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	b2db      	uxtb	r3, r3
 8012cae:	431a      	orrs	r2, r3
 8012cb0:	697b      	ldr	r3, [r7, #20]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012cb8:	431a      	orrs	r2, r3
 8012cba:	697b      	ldr	r3, [r7, #20]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012cc2:	4313      	orrs	r3, r2
 8012cc4:	61fb      	str	r3, [r7, #28]
    }

    pcolorlut++;
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	3304      	adds	r3, #4
 8012cca:	617b      	str	r3, [r7, #20]

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	683b      	ldr	r3, [r7, #0]
 8012cd4:	01db      	lsls	r3, r3, #7
 8012cd6:	4413      	add	r3, r2
 8012cd8:	3384      	adds	r3, #132	; 0x84
 8012cda:	461a      	mov	r2, r3
 8012cdc:	69fb      	ldr	r3, [r7, #28]
 8012cde:	6413      	str	r3, [r2, #64]	; 0x40
  for (counter = 0U; (counter < CLUTSize); counter++)
 8012ce0:	69bb      	ldr	r3, [r7, #24]
 8012ce2:	3301      	adds	r3, #1
 8012ce4:	61bb      	str	r3, [r7, #24]
 8012ce6:	69ba      	ldr	r2, [r7, #24]
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	429a      	cmp	r2, r3
 8012cec:	d3bb      	bcc.n	8012c66 <HAL_LTDC_ConfigCLUT+0x36>
  }

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	2201      	movs	r2, #1
 8012cf2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8012cfe:	2300      	movs	r3, #0
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	3724      	adds	r7, #36	; 0x24
 8012d04:	46bd      	mov	sp, r7
 8012d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0a:	4770      	bx	lr

08012d0c <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8012d0c:	b480      	push	{r7}
 8012d0e:	b083      	sub	sp, #12
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
 8012d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8012d1c:	2b01      	cmp	r3, #1
 8012d1e:	d101      	bne.n	8012d24 <HAL_LTDC_EnableColorKeying+0x18>
 8012d20:	2302      	movs	r3, #2
 8012d22:	e026      	b.n	8012d72 <HAL_LTDC_EnableColorKeying+0x66>
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2201      	movs	r2, #1
 8012d28:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2202      	movs	r2, #2
 8012d30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	461a      	mov	r2, r3
 8012d3a:	683b      	ldr	r3, [r7, #0]
 8012d3c:	01db      	lsls	r3, r3, #7
 8012d3e:	4413      	add	r3, r2
 8012d40:	3384      	adds	r3, #132	; 0x84
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	687a      	ldr	r2, [r7, #4]
 8012d46:	6812      	ldr	r2, [r2, #0]
 8012d48:	4611      	mov	r1, r2
 8012d4a:	683a      	ldr	r2, [r7, #0]
 8012d4c:	01d2      	lsls	r2, r2, #7
 8012d4e:	440a      	add	r2, r1
 8012d50:	3284      	adds	r2, #132	; 0x84
 8012d52:	f043 0302 	orr.w	r3, r3, #2
 8012d56:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	2201      	movs	r2, #1
 8012d5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2201      	movs	r2, #1
 8012d64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8012d70:	2300      	movs	r3, #0
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	370c      	adds	r7, #12
 8012d76:	46bd      	mov	sp, r7
 8012d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7c:	4770      	bx	lr

08012d7e <HAL_LTDC_DisableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8012d7e:	b480      	push	{r7}
 8012d80:	b083      	sub	sp, #12
 8012d82:	af00      	add	r7, sp, #0
 8012d84:	6078      	str	r0, [r7, #4]
 8012d86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8012d8e:	2b01      	cmp	r3, #1
 8012d90:	d101      	bne.n	8012d96 <HAL_LTDC_DisableColorKeying+0x18>
 8012d92:	2302      	movs	r3, #2
 8012d94:	e026      	b.n	8012de4 <HAL_LTDC_DisableColorKeying+0x66>
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2201      	movs	r2, #1
 8012d9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	2202      	movs	r2, #2
 8012da2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	461a      	mov	r2, r3
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	01db      	lsls	r3, r3, #7
 8012db0:	4413      	add	r3, r2
 8012db2:	3384      	adds	r3, #132	; 0x84
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	687a      	ldr	r2, [r7, #4]
 8012db8:	6812      	ldr	r2, [r2, #0]
 8012dba:	4611      	mov	r1, r2
 8012dbc:	683a      	ldr	r2, [r7, #0]
 8012dbe:	01d2      	lsls	r2, r2, #7
 8012dc0:	440a      	add	r2, r1
 8012dc2:	3284      	adds	r2, #132	; 0x84
 8012dc4:	f023 0302 	bic.w	r3, r3, #2
 8012dc8:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	2201      	movs	r2, #1
 8012dd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2201      	movs	r2, #1
 8012dd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2200      	movs	r2, #0
 8012dde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8012de2:	2300      	movs	r3, #0
}
 8012de4:	4618      	mov	r0, r3
 8012de6:	370c      	adds	r7, #12
 8012de8:	46bd      	mov	sp, r7
 8012dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dee:	4770      	bx	lr

08012df0 <HAL_LTDC_EnableCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8012df0:	b480      	push	{r7}
 8012df2:	b083      	sub	sp, #12
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
 8012df8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8012e00:	2b01      	cmp	r3, #1
 8012e02:	d101      	bne.n	8012e08 <HAL_LTDC_EnableCLUT+0x18>
 8012e04:	2302      	movs	r3, #2
 8012e06:	e026      	b.n	8012e56 <HAL_LTDC_EnableCLUT+0x66>
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	2201      	movs	r2, #1
 8012e0c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2202      	movs	r2, #2
 8012e14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	461a      	mov	r2, r3
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	01db      	lsls	r3, r3, #7
 8012e22:	4413      	add	r3, r2
 8012e24:	3384      	adds	r3, #132	; 0x84
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	687a      	ldr	r2, [r7, #4]
 8012e2a:	6812      	ldr	r2, [r2, #0]
 8012e2c:	4611      	mov	r1, r2
 8012e2e:	683a      	ldr	r2, [r7, #0]
 8012e30:	01d2      	lsls	r2, r2, #7
 8012e32:	440a      	add	r2, r1
 8012e34:	3284      	adds	r2, #132	; 0x84
 8012e36:	f043 0310 	orr.w	r3, r3, #16
 8012e3a:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	2201      	movs	r2, #1
 8012e42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	2201      	movs	r2, #1
 8012e48:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2200      	movs	r2, #0
 8012e50:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8012e54:	2300      	movs	r3, #0
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	370c      	adds	r7, #12
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e60:	4770      	bx	lr
	...

08012e64 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8012e64:	b480      	push	{r7}
 8012e66:	b083      	sub	sp, #12
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8012e72:	2b01      	cmp	r3, #1
 8012e74:	d101      	bne.n	8012e7a <HAL_LTDC_EnableDither+0x16>
 8012e76:	2302      	movs	r3, #2
 8012e78:	e016      	b.n	8012ea8 <HAL_LTDC_EnableDither+0x44>
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	2201      	movs	r2, #1
 8012e7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2202      	movs	r2, #2
 8012e86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8012e8a:	4b0a      	ldr	r3, [pc, #40]	; (8012eb4 <HAL_LTDC_EnableDither+0x50>)
 8012e8c:	699b      	ldr	r3, [r3, #24]
 8012e8e:	4a09      	ldr	r2, [pc, #36]	; (8012eb4 <HAL_LTDC_EnableDither+0x50>)
 8012e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012e94:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	2201      	movs	r2, #1
 8012e9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8012ea6:	2300      	movs	r3, #0
}
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	370c      	adds	r7, #12
 8012eac:	46bd      	mov	sp, r7
 8012eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb2:	4770      	bx	lr
 8012eb4:	40016800 	.word	0x40016800

08012eb8 <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b086      	sub	sp, #24
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	60f8      	str	r0, [r7, #12]
 8012ec0:	60b9      	str	r1, [r7, #8]
 8012ec2:	607a      	str	r2, [r7, #4]
 8012ec4:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8012ecc:	2b01      	cmp	r3, #1
 8012ece:	d101      	bne.n	8012ed4 <HAL_LTDC_SetWindowPosition+0x1c>
 8012ed0:	2302      	movs	r3, #2
 8012ed2:	e033      	b.n	8012f3c <HAL_LTDC_SetWindowPosition+0x84>
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	2201      	movs	r2, #1
 8012ed8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	2202      	movs	r2, #2
 8012ee0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	2234      	movs	r2, #52	; 0x34
 8012ee8:	fb02 f303 	mul.w	r3, r2, r3
 8012eec:	3338      	adds	r3, #56	; 0x38
 8012eee:	68fa      	ldr	r2, [r7, #12]
 8012ef0:	4413      	add	r3, r2
 8012ef2:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	68ba      	ldr	r2, [r7, #8]
 8012ef8:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	441a      	add	r2, r3
 8012f02:	697b      	ldr	r3, [r7, #20]
 8012f04:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	687a      	ldr	r2, [r7, #4]
 8012f0a:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8012f0c:	697b      	ldr	r3, [r7, #20]
 8012f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	441a      	add	r2, r3
 8012f14:	697b      	ldr	r3, [r7, #20]
 8012f16:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8012f18:	683a      	ldr	r2, [r7, #0]
 8012f1a:	6979      	ldr	r1, [r7, #20]
 8012f1c:	68f8      	ldr	r0, [r7, #12]
 8012f1e:	f000 f8b5 	bl	801308c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	2201      	movs	r2, #1
 8012f28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	2201      	movs	r2, #1
 8012f2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	2200      	movs	r2, #0
 8012f36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8012f3a:	2300      	movs	r3, #0
}
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	3718      	adds	r7, #24
 8012f40:	46bd      	mov	sp, r7
 8012f42:	bd80      	pop	{r7, pc}

08012f44 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b086      	sub	sp, #24
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	60f8      	str	r0, [r7, #12]
 8012f4c:	60b9      	str	r1, [r7, #8]
 8012f4e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8012f56:	2b01      	cmp	r3, #1
 8012f58:	d101      	bne.n	8012f5e <HAL_LTDC_SetAlpha+0x1a>
 8012f5a:	2302      	movs	r3, #2
 8012f5c:	e024      	b.n	8012fa8 <HAL_LTDC_SetAlpha+0x64>
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	2201      	movs	r2, #1
 8012f62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2202      	movs	r2, #2
 8012f6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	2234      	movs	r2, #52	; 0x34
 8012f72:	fb02 f303 	mul.w	r3, r2, r3
 8012f76:	3338      	adds	r3, #56	; 0x38
 8012f78:	68fa      	ldr	r2, [r7, #12]
 8012f7a:	4413      	add	r3, r2
 8012f7c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8012f7e:	697b      	ldr	r3, [r7, #20]
 8012f80:	68ba      	ldr	r2, [r7, #8]
 8012f82:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8012f84:	687a      	ldr	r2, [r7, #4]
 8012f86:	6979      	ldr	r1, [r7, #20]
 8012f88:	68f8      	ldr	r0, [r7, #12]
 8012f8a:	f000 f87f 	bl	801308c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	2201      	movs	r2, #1
 8012f94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	2201      	movs	r2, #1
 8012f9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8012fa6:	2300      	movs	r3, #0
}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	3718      	adds	r7, #24
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd80      	pop	{r7, pc}

08012fb0 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b086      	sub	sp, #24
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	60f8      	str	r0, [r7, #12]
 8012fb8:	60b9      	str	r1, [r7, #8]
 8012fba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8012fc2:	2b01      	cmp	r3, #1
 8012fc4:	d101      	bne.n	8012fca <HAL_LTDC_SetAddress+0x1a>
 8012fc6:	2302      	movs	r3, #2
 8012fc8:	e024      	b.n	8013014 <HAL_LTDC_SetAddress+0x64>
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	2201      	movs	r2, #1
 8012fce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	2202      	movs	r2, #2
 8012fd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2234      	movs	r2, #52	; 0x34
 8012fde:	fb02 f303 	mul.w	r3, r2, r3
 8012fe2:	3338      	adds	r3, #56	; 0x38
 8012fe4:	68fa      	ldr	r2, [r7, #12]
 8012fe6:	4413      	add	r3, r2
 8012fe8:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8012fea:	697b      	ldr	r3, [r7, #20]
 8012fec:	68ba      	ldr	r2, [r7, #8]
 8012fee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8012ff0:	687a      	ldr	r2, [r7, #4]
 8012ff2:	6979      	ldr	r1, [r7, #20]
 8012ff4:	68f8      	ldr	r0, [r7, #12]
 8012ff6:	f000 f849 	bl	801308c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	2201      	movs	r2, #1
 8013000:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	2201      	movs	r2, #1
 8013006:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	2200      	movs	r2, #0
 801300e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8013012:	2300      	movs	r3, #0
}
 8013014:	4618      	mov	r0, r3
 8013016:	3718      	adds	r7, #24
 8013018:	46bd      	mov	sp, r7
 801301a:	bd80      	pop	{r7, pc}

0801301c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 801301c:	b480      	push	{r7}
 801301e:	b083      	sub	sp, #12
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
 8013024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801302c:	2b01      	cmp	r3, #1
 801302e:	d101      	bne.n	8013034 <HAL_LTDC_ProgramLineEvent+0x18>
 8013030:	2302      	movs	r3, #2
 8013032:	e023      	b.n	801307c <HAL_LTDC_ProgramLineEvent+0x60>
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	2201      	movs	r2, #1
 8013038:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	2202      	movs	r2, #2
 8013040:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	f022 0201 	bic.w	r2, r2, #1
 8013052:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8013054:	4a0c      	ldr	r2, [pc, #48]	; (8013088 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	f042 0201 	orr.w	r2, r2, #1
 8013068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	2201      	movs	r2, #1
 801306e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	2200      	movs	r2, #0
 8013076:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 801307a:	2300      	movs	r3, #0
}
 801307c:	4618      	mov	r0, r3
 801307e:	370c      	adds	r7, #12
 8013080:	46bd      	mov	sp, r7
 8013082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013086:	4770      	bx	lr
 8013088:	40016800 	.word	0x40016800

0801308c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 801308c:	b480      	push	{r7}
 801308e:	b089      	sub	sp, #36	; 0x24
 8013090:	af00      	add	r7, sp, #0
 8013092:	60f8      	str	r0, [r7, #12]
 8013094:	60b9      	str	r1, [r7, #8]
 8013096:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8013098:	68bb      	ldr	r3, [r7, #8]
 801309a:	685a      	ldr	r2, [r3, #4]
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	68db      	ldr	r3, [r3, #12]
 80130a2:	0c1b      	lsrs	r3, r3, #16
 80130a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80130a8:	4413      	add	r3, r2
 80130aa:	041b      	lsls	r3, r3, #16
 80130ac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	461a      	mov	r2, r3
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	01db      	lsls	r3, r3, #7
 80130b8:	4413      	add	r3, r2
 80130ba:	3384      	adds	r3, #132	; 0x84
 80130bc:	685b      	ldr	r3, [r3, #4]
 80130be:	68fa      	ldr	r2, [r7, #12]
 80130c0:	6812      	ldr	r2, [r2, #0]
 80130c2:	4611      	mov	r1, r2
 80130c4:	687a      	ldr	r2, [r7, #4]
 80130c6:	01d2      	lsls	r2, r2, #7
 80130c8:	440a      	add	r2, r1
 80130ca:	3284      	adds	r2, #132	; 0x84
 80130cc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80130d0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80130d2:	68bb      	ldr	r3, [r7, #8]
 80130d4:	681a      	ldr	r2, [r3, #0]
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	68db      	ldr	r3, [r3, #12]
 80130dc:	0c1b      	lsrs	r3, r3, #16
 80130de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80130e2:	4413      	add	r3, r2
 80130e4:	1c5a      	adds	r2, r3, #1
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	4619      	mov	r1, r3
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	01db      	lsls	r3, r3, #7
 80130f0:	440b      	add	r3, r1
 80130f2:	3384      	adds	r3, #132	; 0x84
 80130f4:	4619      	mov	r1, r3
 80130f6:	69fb      	ldr	r3, [r7, #28]
 80130f8:	4313      	orrs	r3, r2
 80130fa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80130fc:	68bb      	ldr	r3, [r7, #8]
 80130fe:	68da      	ldr	r2, [r3, #12]
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	68db      	ldr	r3, [r3, #12]
 8013106:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801310a:	4413      	add	r3, r2
 801310c:	041b      	lsls	r3, r3, #16
 801310e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	461a      	mov	r2, r3
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	01db      	lsls	r3, r3, #7
 801311a:	4413      	add	r3, r2
 801311c:	3384      	adds	r3, #132	; 0x84
 801311e:	689b      	ldr	r3, [r3, #8]
 8013120:	68fa      	ldr	r2, [r7, #12]
 8013122:	6812      	ldr	r2, [r2, #0]
 8013124:	4611      	mov	r1, r2
 8013126:	687a      	ldr	r2, [r7, #4]
 8013128:	01d2      	lsls	r2, r2, #7
 801312a:	440a      	add	r2, r1
 801312c:	3284      	adds	r2, #132	; 0x84
 801312e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8013132:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	689a      	ldr	r2, [r3, #8]
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	68db      	ldr	r3, [r3, #12]
 801313e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013142:	4413      	add	r3, r2
 8013144:	1c5a      	adds	r2, r3, #1
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	4619      	mov	r1, r3
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	01db      	lsls	r3, r3, #7
 8013150:	440b      	add	r3, r1
 8013152:	3384      	adds	r3, #132	; 0x84
 8013154:	4619      	mov	r1, r3
 8013156:	69fb      	ldr	r3, [r7, #28]
 8013158:	4313      	orrs	r3, r2
 801315a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	461a      	mov	r2, r3
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	01db      	lsls	r3, r3, #7
 8013166:	4413      	add	r3, r2
 8013168:	3384      	adds	r3, #132	; 0x84
 801316a:	691b      	ldr	r3, [r3, #16]
 801316c:	68fa      	ldr	r2, [r7, #12]
 801316e:	6812      	ldr	r2, [r2, #0]
 8013170:	4611      	mov	r1, r2
 8013172:	687a      	ldr	r2, [r7, #4]
 8013174:	01d2      	lsls	r2, r2, #7
 8013176:	440a      	add	r2, r1
 8013178:	3284      	adds	r2, #132	; 0x84
 801317a:	f023 0307 	bic.w	r3, r3, #7
 801317e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	461a      	mov	r2, r3
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	01db      	lsls	r3, r3, #7
 801318a:	4413      	add	r3, r2
 801318c:	3384      	adds	r3, #132	; 0x84
 801318e:	461a      	mov	r2, r3
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	691b      	ldr	r3, [r3, #16]
 8013194:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8013196:	68bb      	ldr	r3, [r7, #8]
 8013198:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801319c:	021b      	lsls	r3, r3, #8
 801319e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80131a0:	68bb      	ldr	r3, [r7, #8]
 80131a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80131a6:	041b      	lsls	r3, r3, #16
 80131a8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	699b      	ldr	r3, [r3, #24]
 80131ae:	061b      	lsls	r3, r3, #24
 80131b0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	461a      	mov	r2, r3
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	01db      	lsls	r3, r3, #7
 80131bc:	4413      	add	r3, r2
 80131be:	3384      	adds	r3, #132	; 0x84
 80131c0:	699b      	ldr	r3, [r3, #24]
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	461a      	mov	r2, r3
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	01db      	lsls	r3, r3, #7
 80131cc:	4413      	add	r3, r2
 80131ce:	3384      	adds	r3, #132	; 0x84
 80131d0:	461a      	mov	r2, r3
 80131d2:	2300      	movs	r3, #0
 80131d4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80131d6:	68bb      	ldr	r3, [r7, #8]
 80131d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80131dc:	461a      	mov	r2, r3
 80131de:	69fb      	ldr	r3, [r7, #28]
 80131e0:	431a      	orrs	r2, r3
 80131e2:	69bb      	ldr	r3, [r7, #24]
 80131e4:	431a      	orrs	r2, r3
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	4619      	mov	r1, r3
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	01db      	lsls	r3, r3, #7
 80131f0:	440b      	add	r3, r1
 80131f2:	3384      	adds	r3, #132	; 0x84
 80131f4:	4619      	mov	r1, r3
 80131f6:	697b      	ldr	r3, [r7, #20]
 80131f8:	4313      	orrs	r3, r2
 80131fa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	461a      	mov	r2, r3
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	01db      	lsls	r3, r3, #7
 8013206:	4413      	add	r3, r2
 8013208:	3384      	adds	r3, #132	; 0x84
 801320a:	695b      	ldr	r3, [r3, #20]
 801320c:	68fa      	ldr	r2, [r7, #12]
 801320e:	6812      	ldr	r2, [r2, #0]
 8013210:	4611      	mov	r1, r2
 8013212:	687a      	ldr	r2, [r7, #4]
 8013214:	01d2      	lsls	r2, r2, #7
 8013216:	440a      	add	r2, r1
 8013218:	3284      	adds	r2, #132	; 0x84
 801321a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801321e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	461a      	mov	r2, r3
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	01db      	lsls	r3, r3, #7
 801322a:	4413      	add	r3, r2
 801322c:	3384      	adds	r3, #132	; 0x84
 801322e:	461a      	mov	r2, r3
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	695b      	ldr	r3, [r3, #20]
 8013234:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	461a      	mov	r2, r3
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	01db      	lsls	r3, r3, #7
 8013240:	4413      	add	r3, r2
 8013242:	3384      	adds	r3, #132	; 0x84
 8013244:	69da      	ldr	r2, [r3, #28]
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	4619      	mov	r1, r3
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	01db      	lsls	r3, r3, #7
 8013250:	440b      	add	r3, r1
 8013252:	3384      	adds	r3, #132	; 0x84
 8013254:	4619      	mov	r1, r3
 8013256:	4b58      	ldr	r3, [pc, #352]	; (80133b8 <LTDC_SetConfig+0x32c>)
 8013258:	4013      	ands	r3, r2
 801325a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 801325c:	68bb      	ldr	r3, [r7, #8]
 801325e:	69da      	ldr	r2, [r3, #28]
 8013260:	68bb      	ldr	r3, [r7, #8]
 8013262:	6a1b      	ldr	r3, [r3, #32]
 8013264:	68f9      	ldr	r1, [r7, #12]
 8013266:	6809      	ldr	r1, [r1, #0]
 8013268:	4608      	mov	r0, r1
 801326a:	6879      	ldr	r1, [r7, #4]
 801326c:	01c9      	lsls	r1, r1, #7
 801326e:	4401      	add	r1, r0
 8013270:	3184      	adds	r1, #132	; 0x84
 8013272:	4313      	orrs	r3, r2
 8013274:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	461a      	mov	r2, r3
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	01db      	lsls	r3, r3, #7
 8013280:	4413      	add	r3, r2
 8013282:	3384      	adds	r3, #132	; 0x84
 8013284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	461a      	mov	r2, r3
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	01db      	lsls	r3, r3, #7
 8013290:	4413      	add	r3, r2
 8013292:	3384      	adds	r3, #132	; 0x84
 8013294:	461a      	mov	r2, r3
 8013296:	2300      	movs	r3, #0
 8013298:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	461a      	mov	r2, r3
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	01db      	lsls	r3, r3, #7
 80132a4:	4413      	add	r3, r2
 80132a6:	3384      	adds	r3, #132	; 0x84
 80132a8:	461a      	mov	r2, r3
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132ae:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	691b      	ldr	r3, [r3, #16]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d102      	bne.n	80132be <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80132b8:	2304      	movs	r3, #4
 80132ba:	61fb      	str	r3, [r7, #28]
 80132bc:	e01b      	b.n	80132f6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80132be:	68bb      	ldr	r3, [r7, #8]
 80132c0:	691b      	ldr	r3, [r3, #16]
 80132c2:	2b01      	cmp	r3, #1
 80132c4:	d102      	bne.n	80132cc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80132c6:	2303      	movs	r3, #3
 80132c8:	61fb      	str	r3, [r7, #28]
 80132ca:	e014      	b.n	80132f6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	691b      	ldr	r3, [r3, #16]
 80132d0:	2b04      	cmp	r3, #4
 80132d2:	d00b      	beq.n	80132ec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80132d4:	68bb      	ldr	r3, [r7, #8]
 80132d6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80132d8:	2b02      	cmp	r3, #2
 80132da:	d007      	beq.n	80132ec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80132dc:	68bb      	ldr	r3, [r7, #8]
 80132de:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80132e0:	2b03      	cmp	r3, #3
 80132e2:	d003      	beq.n	80132ec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80132e8:	2b07      	cmp	r3, #7
 80132ea:	d102      	bne.n	80132f2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80132ec:	2302      	movs	r3, #2
 80132ee:	61fb      	str	r3, [r7, #28]
 80132f0:	e001      	b.n	80132f6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80132f2:	2301      	movs	r3, #1
 80132f4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	461a      	mov	r2, r3
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	01db      	lsls	r3, r3, #7
 8013300:	4413      	add	r3, r2
 8013302:	3384      	adds	r3, #132	; 0x84
 8013304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013306:	68fa      	ldr	r2, [r7, #12]
 8013308:	6812      	ldr	r2, [r2, #0]
 801330a:	4611      	mov	r1, r2
 801330c:	687a      	ldr	r2, [r7, #4]
 801330e:	01d2      	lsls	r2, r2, #7
 8013310:	440a      	add	r2, r1
 8013312:	3284      	adds	r2, #132	; 0x84
 8013314:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8013318:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 801331a:	68bb      	ldr	r3, [r7, #8]
 801331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801331e:	69fa      	ldr	r2, [r7, #28]
 8013320:	fb02 f303 	mul.w	r3, r2, r3
 8013324:	041a      	lsls	r2, r3, #16
 8013326:	68bb      	ldr	r3, [r7, #8]
 8013328:	6859      	ldr	r1, [r3, #4]
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	1acb      	subs	r3, r1, r3
 8013330:	69f9      	ldr	r1, [r7, #28]
 8013332:	fb01 f303 	mul.w	r3, r1, r3
 8013336:	3303      	adds	r3, #3
 8013338:	68f9      	ldr	r1, [r7, #12]
 801333a:	6809      	ldr	r1, [r1, #0]
 801333c:	4608      	mov	r0, r1
 801333e:	6879      	ldr	r1, [r7, #4]
 8013340:	01c9      	lsls	r1, r1, #7
 8013342:	4401      	add	r1, r0
 8013344:	3184      	adds	r1, #132	; 0x84
 8013346:	4313      	orrs	r3, r2
 8013348:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	461a      	mov	r2, r3
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	01db      	lsls	r3, r3, #7
 8013354:	4413      	add	r3, r2
 8013356:	3384      	adds	r3, #132	; 0x84
 8013358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	4619      	mov	r1, r3
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	01db      	lsls	r3, r3, #7
 8013364:	440b      	add	r3, r1
 8013366:	3384      	adds	r3, #132	; 0x84
 8013368:	4619      	mov	r1, r3
 801336a:	4b14      	ldr	r3, [pc, #80]	; (80133bc <LTDC_SetConfig+0x330>)
 801336c:	4013      	ands	r3, r2
 801336e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	461a      	mov	r2, r3
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	01db      	lsls	r3, r3, #7
 801337a:	4413      	add	r3, r2
 801337c:	3384      	adds	r3, #132	; 0x84
 801337e:	461a      	mov	r2, r3
 8013380:	68bb      	ldr	r3, [r7, #8]
 8013382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013384:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	461a      	mov	r2, r3
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	01db      	lsls	r3, r3, #7
 8013390:	4413      	add	r3, r2
 8013392:	3384      	adds	r3, #132	; 0x84
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	68fa      	ldr	r2, [r7, #12]
 8013398:	6812      	ldr	r2, [r2, #0]
 801339a:	4611      	mov	r1, r2
 801339c:	687a      	ldr	r2, [r7, #4]
 801339e:	01d2      	lsls	r2, r2, #7
 80133a0:	440a      	add	r2, r1
 80133a2:	3284      	adds	r2, #132	; 0x84
 80133a4:	f043 0301 	orr.w	r3, r3, #1
 80133a8:	6013      	str	r3, [r2, #0]
}
 80133aa:	bf00      	nop
 80133ac:	3724      	adds	r7, #36	; 0x24
 80133ae:	46bd      	mov	sp, r7
 80133b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b4:	4770      	bx	lr
 80133b6:	bf00      	nop
 80133b8:	fffff8f8 	.word	0xfffff8f8
 80133bc:	fffff800 	.word	0xfffff800

080133c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b082      	sub	sp, #8
 80133c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80133c6:	2300      	movs	r3, #0
 80133c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80133ca:	4b23      	ldr	r3, [pc, #140]	; (8013458 <HAL_PWREx_EnableOverDrive+0x98>)
 80133cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133ce:	4a22      	ldr	r2, [pc, #136]	; (8013458 <HAL_PWREx_EnableOverDrive+0x98>)
 80133d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80133d4:	6413      	str	r3, [r2, #64]	; 0x40
 80133d6:	4b20      	ldr	r3, [pc, #128]	; (8013458 <HAL_PWREx_EnableOverDrive+0x98>)
 80133d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80133de:	603b      	str	r3, [r7, #0]
 80133e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80133e2:	4b1e      	ldr	r3, [pc, #120]	; (801345c <HAL_PWREx_EnableOverDrive+0x9c>)
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	4a1d      	ldr	r2, [pc, #116]	; (801345c <HAL_PWREx_EnableOverDrive+0x9c>)
 80133e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80133ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80133ee:	f7fd f9a3 	bl	8010738 <HAL_GetTick>
 80133f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80133f4:	e009      	b.n	801340a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80133f6:	f7fd f99f 	bl	8010738 <HAL_GetTick>
 80133fa:	4602      	mov	r2, r0
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	1ad3      	subs	r3, r2, r3
 8013400:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013404:	d901      	bls.n	801340a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8013406:	2303      	movs	r3, #3
 8013408:	e022      	b.n	8013450 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801340a:	4b14      	ldr	r3, [pc, #80]	; (801345c <HAL_PWREx_EnableOverDrive+0x9c>)
 801340c:	685b      	ldr	r3, [r3, #4]
 801340e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013416:	d1ee      	bne.n	80133f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8013418:	4b10      	ldr	r3, [pc, #64]	; (801345c <HAL_PWREx_EnableOverDrive+0x9c>)
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	4a0f      	ldr	r2, [pc, #60]	; (801345c <HAL_PWREx_EnableOverDrive+0x9c>)
 801341e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013422:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8013424:	f7fd f988 	bl	8010738 <HAL_GetTick>
 8013428:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801342a:	e009      	b.n	8013440 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801342c:	f7fd f984 	bl	8010738 <HAL_GetTick>
 8013430:	4602      	mov	r2, r0
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	1ad3      	subs	r3, r2, r3
 8013436:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801343a:	d901      	bls.n	8013440 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 801343c:	2303      	movs	r3, #3
 801343e:	e007      	b.n	8013450 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8013440:	4b06      	ldr	r3, [pc, #24]	; (801345c <HAL_PWREx_EnableOverDrive+0x9c>)
 8013442:	685b      	ldr	r3, [r3, #4]
 8013444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801344c:	d1ee      	bne.n	801342c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 801344e:	2300      	movs	r3, #0
}
 8013450:	4618      	mov	r0, r3
 8013452:	3708      	adds	r7, #8
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}
 8013458:	40023800 	.word	0x40023800
 801345c:	40007000 	.word	0x40007000

08013460 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b086      	sub	sp, #24
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8013468:	2300      	movs	r3, #0
 801346a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d101      	bne.n	8013476 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8013472:	2301      	movs	r3, #1
 8013474:	e29b      	b.n	80139ae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	f003 0301 	and.w	r3, r3, #1
 801347e:	2b00      	cmp	r3, #0
 8013480:	f000 8087 	beq.w	8013592 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8013484:	4b96      	ldr	r3, [pc, #600]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 8013486:	689b      	ldr	r3, [r3, #8]
 8013488:	f003 030c 	and.w	r3, r3, #12
 801348c:	2b04      	cmp	r3, #4
 801348e:	d00c      	beq.n	80134aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013490:	4b93      	ldr	r3, [pc, #588]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 8013492:	689b      	ldr	r3, [r3, #8]
 8013494:	f003 030c 	and.w	r3, r3, #12
 8013498:	2b08      	cmp	r3, #8
 801349a:	d112      	bne.n	80134c2 <HAL_RCC_OscConfig+0x62>
 801349c:	4b90      	ldr	r3, [pc, #576]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 801349e:	685b      	ldr	r3, [r3, #4]
 80134a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80134a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80134a8:	d10b      	bne.n	80134c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80134aa:	4b8d      	ldr	r3, [pc, #564]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d06c      	beq.n	8013590 <HAL_RCC_OscConfig+0x130>
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	685b      	ldr	r3, [r3, #4]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d168      	bne.n	8013590 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80134be:	2301      	movs	r3, #1
 80134c0:	e275      	b.n	80139ae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	685b      	ldr	r3, [r3, #4]
 80134c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80134ca:	d106      	bne.n	80134da <HAL_RCC_OscConfig+0x7a>
 80134cc:	4b84      	ldr	r3, [pc, #528]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	4a83      	ldr	r2, [pc, #524]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 80134d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80134d6:	6013      	str	r3, [r2, #0]
 80134d8:	e02e      	b.n	8013538 <HAL_RCC_OscConfig+0xd8>
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	685b      	ldr	r3, [r3, #4]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d10c      	bne.n	80134fc <HAL_RCC_OscConfig+0x9c>
 80134e2:	4b7f      	ldr	r3, [pc, #508]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	4a7e      	ldr	r2, [pc, #504]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 80134e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80134ec:	6013      	str	r3, [r2, #0]
 80134ee:	4b7c      	ldr	r3, [pc, #496]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	4a7b      	ldr	r2, [pc, #492]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 80134f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80134f8:	6013      	str	r3, [r2, #0]
 80134fa:	e01d      	b.n	8013538 <HAL_RCC_OscConfig+0xd8>
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	685b      	ldr	r3, [r3, #4]
 8013500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013504:	d10c      	bne.n	8013520 <HAL_RCC_OscConfig+0xc0>
 8013506:	4b76      	ldr	r3, [pc, #472]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	4a75      	ldr	r2, [pc, #468]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 801350c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013510:	6013      	str	r3, [r2, #0]
 8013512:	4b73      	ldr	r3, [pc, #460]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	4a72      	ldr	r2, [pc, #456]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 8013518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801351c:	6013      	str	r3, [r2, #0]
 801351e:	e00b      	b.n	8013538 <HAL_RCC_OscConfig+0xd8>
 8013520:	4b6f      	ldr	r3, [pc, #444]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	4a6e      	ldr	r2, [pc, #440]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 8013526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801352a:	6013      	str	r3, [r2, #0]
 801352c:	4b6c      	ldr	r3, [pc, #432]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	4a6b      	ldr	r2, [pc, #428]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 8013532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	685b      	ldr	r3, [r3, #4]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d013      	beq.n	8013568 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013540:	f7fd f8fa 	bl	8010738 <HAL_GetTick>
 8013544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013546:	e008      	b.n	801355a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013548:	f7fd f8f6 	bl	8010738 <HAL_GetTick>
 801354c:	4602      	mov	r2, r0
 801354e:	693b      	ldr	r3, [r7, #16]
 8013550:	1ad3      	subs	r3, r2, r3
 8013552:	2b64      	cmp	r3, #100	; 0x64
 8013554:	d901      	bls.n	801355a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013556:	2303      	movs	r3, #3
 8013558:	e229      	b.n	80139ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801355a:	4b61      	ldr	r3, [pc, #388]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013562:	2b00      	cmp	r3, #0
 8013564:	d0f0      	beq.n	8013548 <HAL_RCC_OscConfig+0xe8>
 8013566:	e014      	b.n	8013592 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013568:	f7fd f8e6 	bl	8010738 <HAL_GetTick>
 801356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801356e:	e008      	b.n	8013582 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013570:	f7fd f8e2 	bl	8010738 <HAL_GetTick>
 8013574:	4602      	mov	r2, r0
 8013576:	693b      	ldr	r3, [r7, #16]
 8013578:	1ad3      	subs	r3, r2, r3
 801357a:	2b64      	cmp	r3, #100	; 0x64
 801357c:	d901      	bls.n	8013582 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801357e:	2303      	movs	r3, #3
 8013580:	e215      	b.n	80139ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013582:	4b57      	ldr	r3, [pc, #348]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801358a:	2b00      	cmp	r3, #0
 801358c:	d1f0      	bne.n	8013570 <HAL_RCC_OscConfig+0x110>
 801358e:	e000      	b.n	8013592 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	f003 0302 	and.w	r3, r3, #2
 801359a:	2b00      	cmp	r3, #0
 801359c:	d069      	beq.n	8013672 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801359e:	4b50      	ldr	r3, [pc, #320]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 80135a0:	689b      	ldr	r3, [r3, #8]
 80135a2:	f003 030c 	and.w	r3, r3, #12
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d00b      	beq.n	80135c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80135aa:	4b4d      	ldr	r3, [pc, #308]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 80135ac:	689b      	ldr	r3, [r3, #8]
 80135ae:	f003 030c 	and.w	r3, r3, #12
 80135b2:	2b08      	cmp	r3, #8
 80135b4:	d11c      	bne.n	80135f0 <HAL_RCC_OscConfig+0x190>
 80135b6:	4b4a      	ldr	r3, [pc, #296]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 80135b8:	685b      	ldr	r3, [r3, #4]
 80135ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d116      	bne.n	80135f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80135c2:	4b47      	ldr	r3, [pc, #284]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	f003 0302 	and.w	r3, r3, #2
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d005      	beq.n	80135da <HAL_RCC_OscConfig+0x17a>
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	68db      	ldr	r3, [r3, #12]
 80135d2:	2b01      	cmp	r3, #1
 80135d4:	d001      	beq.n	80135da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80135d6:	2301      	movs	r3, #1
 80135d8:	e1e9      	b.n	80139ae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80135da:	4b41      	ldr	r3, [pc, #260]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	691b      	ldr	r3, [r3, #16]
 80135e6:	00db      	lsls	r3, r3, #3
 80135e8:	493d      	ldr	r1, [pc, #244]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 80135ea:	4313      	orrs	r3, r2
 80135ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80135ee:	e040      	b.n	8013672 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	68db      	ldr	r3, [r3, #12]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d023      	beq.n	8013640 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80135f8:	4b39      	ldr	r3, [pc, #228]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	4a38      	ldr	r2, [pc, #224]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 80135fe:	f043 0301 	orr.w	r3, r3, #1
 8013602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013604:	f7fd f898 	bl	8010738 <HAL_GetTick>
 8013608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801360a:	e008      	b.n	801361e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801360c:	f7fd f894 	bl	8010738 <HAL_GetTick>
 8013610:	4602      	mov	r2, r0
 8013612:	693b      	ldr	r3, [r7, #16]
 8013614:	1ad3      	subs	r3, r2, r3
 8013616:	2b02      	cmp	r3, #2
 8013618:	d901      	bls.n	801361e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 801361a:	2303      	movs	r3, #3
 801361c:	e1c7      	b.n	80139ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801361e:	4b30      	ldr	r3, [pc, #192]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	f003 0302 	and.w	r3, r3, #2
 8013626:	2b00      	cmp	r3, #0
 8013628:	d0f0      	beq.n	801360c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801362a:	4b2d      	ldr	r3, [pc, #180]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	691b      	ldr	r3, [r3, #16]
 8013636:	00db      	lsls	r3, r3, #3
 8013638:	4929      	ldr	r1, [pc, #164]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 801363a:	4313      	orrs	r3, r2
 801363c:	600b      	str	r3, [r1, #0]
 801363e:	e018      	b.n	8013672 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013640:	4b27      	ldr	r3, [pc, #156]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	4a26      	ldr	r2, [pc, #152]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 8013646:	f023 0301 	bic.w	r3, r3, #1
 801364a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801364c:	f7fd f874 	bl	8010738 <HAL_GetTick>
 8013650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013652:	e008      	b.n	8013666 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013654:	f7fd f870 	bl	8010738 <HAL_GetTick>
 8013658:	4602      	mov	r2, r0
 801365a:	693b      	ldr	r3, [r7, #16]
 801365c:	1ad3      	subs	r3, r2, r3
 801365e:	2b02      	cmp	r3, #2
 8013660:	d901      	bls.n	8013666 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8013662:	2303      	movs	r3, #3
 8013664:	e1a3      	b.n	80139ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013666:	4b1e      	ldr	r3, [pc, #120]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	f003 0302 	and.w	r3, r3, #2
 801366e:	2b00      	cmp	r3, #0
 8013670:	d1f0      	bne.n	8013654 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	f003 0308 	and.w	r3, r3, #8
 801367a:	2b00      	cmp	r3, #0
 801367c:	d038      	beq.n	80136f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	695b      	ldr	r3, [r3, #20]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d019      	beq.n	80136ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013686:	4b16      	ldr	r3, [pc, #88]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 8013688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801368a:	4a15      	ldr	r2, [pc, #84]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 801368c:	f043 0301 	orr.w	r3, r3, #1
 8013690:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013692:	f7fd f851 	bl	8010738 <HAL_GetTick>
 8013696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013698:	e008      	b.n	80136ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801369a:	f7fd f84d 	bl	8010738 <HAL_GetTick>
 801369e:	4602      	mov	r2, r0
 80136a0:	693b      	ldr	r3, [r7, #16]
 80136a2:	1ad3      	subs	r3, r2, r3
 80136a4:	2b02      	cmp	r3, #2
 80136a6:	d901      	bls.n	80136ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80136a8:	2303      	movs	r3, #3
 80136aa:	e180      	b.n	80139ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80136ac:	4b0c      	ldr	r3, [pc, #48]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 80136ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136b0:	f003 0302 	and.w	r3, r3, #2
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d0f0      	beq.n	801369a <HAL_RCC_OscConfig+0x23a>
 80136b8:	e01a      	b.n	80136f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80136ba:	4b09      	ldr	r3, [pc, #36]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 80136bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136be:	4a08      	ldr	r2, [pc, #32]	; (80136e0 <HAL_RCC_OscConfig+0x280>)
 80136c0:	f023 0301 	bic.w	r3, r3, #1
 80136c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80136c6:	f7fd f837 	bl	8010738 <HAL_GetTick>
 80136ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80136cc:	e00a      	b.n	80136e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80136ce:	f7fd f833 	bl	8010738 <HAL_GetTick>
 80136d2:	4602      	mov	r2, r0
 80136d4:	693b      	ldr	r3, [r7, #16]
 80136d6:	1ad3      	subs	r3, r2, r3
 80136d8:	2b02      	cmp	r3, #2
 80136da:	d903      	bls.n	80136e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80136dc:	2303      	movs	r3, #3
 80136de:	e166      	b.n	80139ae <HAL_RCC_OscConfig+0x54e>
 80136e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80136e4:	4b92      	ldr	r3, [pc, #584]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 80136e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136e8:	f003 0302 	and.w	r3, r3, #2
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d1ee      	bne.n	80136ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	f003 0304 	and.w	r3, r3, #4
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	f000 80a4 	beq.w	8013846 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80136fe:	4b8c      	ldr	r3, [pc, #560]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 8013700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013706:	2b00      	cmp	r3, #0
 8013708:	d10d      	bne.n	8013726 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 801370a:	4b89      	ldr	r3, [pc, #548]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 801370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801370e:	4a88      	ldr	r2, [pc, #544]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 8013710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013714:	6413      	str	r3, [r2, #64]	; 0x40
 8013716:	4b86      	ldr	r3, [pc, #536]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 8013718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801371a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801371e:	60bb      	str	r3, [r7, #8]
 8013720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013722:	2301      	movs	r3, #1
 8013724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013726:	4b83      	ldr	r3, [pc, #524]	; (8013934 <HAL_RCC_OscConfig+0x4d4>)
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801372e:	2b00      	cmp	r3, #0
 8013730:	d118      	bne.n	8013764 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8013732:	4b80      	ldr	r3, [pc, #512]	; (8013934 <HAL_RCC_OscConfig+0x4d4>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	4a7f      	ldr	r2, [pc, #508]	; (8013934 <HAL_RCC_OscConfig+0x4d4>)
 8013738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801373c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801373e:	f7fc fffb 	bl	8010738 <HAL_GetTick>
 8013742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013744:	e008      	b.n	8013758 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013746:	f7fc fff7 	bl	8010738 <HAL_GetTick>
 801374a:	4602      	mov	r2, r0
 801374c:	693b      	ldr	r3, [r7, #16]
 801374e:	1ad3      	subs	r3, r2, r3
 8013750:	2b64      	cmp	r3, #100	; 0x64
 8013752:	d901      	bls.n	8013758 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8013754:	2303      	movs	r3, #3
 8013756:	e12a      	b.n	80139ae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013758:	4b76      	ldr	r3, [pc, #472]	; (8013934 <HAL_RCC_OscConfig+0x4d4>)
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013760:	2b00      	cmp	r3, #0
 8013762:	d0f0      	beq.n	8013746 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	689b      	ldr	r3, [r3, #8]
 8013768:	2b01      	cmp	r3, #1
 801376a:	d106      	bne.n	801377a <HAL_RCC_OscConfig+0x31a>
 801376c:	4b70      	ldr	r3, [pc, #448]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 801376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013770:	4a6f      	ldr	r2, [pc, #444]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 8013772:	f043 0301 	orr.w	r3, r3, #1
 8013776:	6713      	str	r3, [r2, #112]	; 0x70
 8013778:	e02d      	b.n	80137d6 <HAL_RCC_OscConfig+0x376>
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	689b      	ldr	r3, [r3, #8]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d10c      	bne.n	801379c <HAL_RCC_OscConfig+0x33c>
 8013782:	4b6b      	ldr	r3, [pc, #428]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 8013784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013786:	4a6a      	ldr	r2, [pc, #424]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 8013788:	f023 0301 	bic.w	r3, r3, #1
 801378c:	6713      	str	r3, [r2, #112]	; 0x70
 801378e:	4b68      	ldr	r3, [pc, #416]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 8013790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013792:	4a67      	ldr	r2, [pc, #412]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 8013794:	f023 0304 	bic.w	r3, r3, #4
 8013798:	6713      	str	r3, [r2, #112]	; 0x70
 801379a:	e01c      	b.n	80137d6 <HAL_RCC_OscConfig+0x376>
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	689b      	ldr	r3, [r3, #8]
 80137a0:	2b05      	cmp	r3, #5
 80137a2:	d10c      	bne.n	80137be <HAL_RCC_OscConfig+0x35e>
 80137a4:	4b62      	ldr	r3, [pc, #392]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 80137a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137a8:	4a61      	ldr	r2, [pc, #388]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 80137aa:	f043 0304 	orr.w	r3, r3, #4
 80137ae:	6713      	str	r3, [r2, #112]	; 0x70
 80137b0:	4b5f      	ldr	r3, [pc, #380]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 80137b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137b4:	4a5e      	ldr	r2, [pc, #376]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 80137b6:	f043 0301 	orr.w	r3, r3, #1
 80137ba:	6713      	str	r3, [r2, #112]	; 0x70
 80137bc:	e00b      	b.n	80137d6 <HAL_RCC_OscConfig+0x376>
 80137be:	4b5c      	ldr	r3, [pc, #368]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 80137c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137c2:	4a5b      	ldr	r2, [pc, #364]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 80137c4:	f023 0301 	bic.w	r3, r3, #1
 80137c8:	6713      	str	r3, [r2, #112]	; 0x70
 80137ca:	4b59      	ldr	r3, [pc, #356]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 80137cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137ce:	4a58      	ldr	r2, [pc, #352]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 80137d0:	f023 0304 	bic.w	r3, r3, #4
 80137d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	689b      	ldr	r3, [r3, #8]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d015      	beq.n	801380a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80137de:	f7fc ffab 	bl	8010738 <HAL_GetTick>
 80137e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80137e4:	e00a      	b.n	80137fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80137e6:	f7fc ffa7 	bl	8010738 <HAL_GetTick>
 80137ea:	4602      	mov	r2, r0
 80137ec:	693b      	ldr	r3, [r7, #16]
 80137ee:	1ad3      	subs	r3, r2, r3
 80137f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80137f4:	4293      	cmp	r3, r2
 80137f6:	d901      	bls.n	80137fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80137f8:	2303      	movs	r3, #3
 80137fa:	e0d8      	b.n	80139ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80137fc:	4b4c      	ldr	r3, [pc, #304]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 80137fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013800:	f003 0302 	and.w	r3, r3, #2
 8013804:	2b00      	cmp	r3, #0
 8013806:	d0ee      	beq.n	80137e6 <HAL_RCC_OscConfig+0x386>
 8013808:	e014      	b.n	8013834 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801380a:	f7fc ff95 	bl	8010738 <HAL_GetTick>
 801380e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013810:	e00a      	b.n	8013828 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013812:	f7fc ff91 	bl	8010738 <HAL_GetTick>
 8013816:	4602      	mov	r2, r0
 8013818:	693b      	ldr	r3, [r7, #16]
 801381a:	1ad3      	subs	r3, r2, r3
 801381c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013820:	4293      	cmp	r3, r2
 8013822:	d901      	bls.n	8013828 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8013824:	2303      	movs	r3, #3
 8013826:	e0c2      	b.n	80139ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013828:	4b41      	ldr	r3, [pc, #260]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 801382a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801382c:	f003 0302 	and.w	r3, r3, #2
 8013830:	2b00      	cmp	r3, #0
 8013832:	d1ee      	bne.n	8013812 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8013834:	7dfb      	ldrb	r3, [r7, #23]
 8013836:	2b01      	cmp	r3, #1
 8013838:	d105      	bne.n	8013846 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801383a:	4b3d      	ldr	r3, [pc, #244]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 801383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801383e:	4a3c      	ldr	r2, [pc, #240]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 8013840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013844:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	699b      	ldr	r3, [r3, #24]
 801384a:	2b00      	cmp	r3, #0
 801384c:	f000 80ae 	beq.w	80139ac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013850:	4b37      	ldr	r3, [pc, #220]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 8013852:	689b      	ldr	r3, [r3, #8]
 8013854:	f003 030c 	and.w	r3, r3, #12
 8013858:	2b08      	cmp	r3, #8
 801385a:	d06d      	beq.n	8013938 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	699b      	ldr	r3, [r3, #24]
 8013860:	2b02      	cmp	r3, #2
 8013862:	d14b      	bne.n	80138fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013864:	4b32      	ldr	r3, [pc, #200]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	4a31      	ldr	r2, [pc, #196]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 801386a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801386e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013870:	f7fc ff62 	bl	8010738 <HAL_GetTick>
 8013874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013876:	e008      	b.n	801388a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013878:	f7fc ff5e 	bl	8010738 <HAL_GetTick>
 801387c:	4602      	mov	r2, r0
 801387e:	693b      	ldr	r3, [r7, #16]
 8013880:	1ad3      	subs	r3, r2, r3
 8013882:	2b02      	cmp	r3, #2
 8013884:	d901      	bls.n	801388a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8013886:	2303      	movs	r3, #3
 8013888:	e091      	b.n	80139ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801388a:	4b29      	ldr	r3, [pc, #164]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013892:	2b00      	cmp	r3, #0
 8013894:	d1f0      	bne.n	8013878 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	69da      	ldr	r2, [r3, #28]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	6a1b      	ldr	r3, [r3, #32]
 801389e:	431a      	orrs	r2, r3
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138a4:	019b      	lsls	r3, r3, #6
 80138a6:	431a      	orrs	r2, r3
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138ac:	085b      	lsrs	r3, r3, #1
 80138ae:	3b01      	subs	r3, #1
 80138b0:	041b      	lsls	r3, r3, #16
 80138b2:	431a      	orrs	r2, r3
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138b8:	061b      	lsls	r3, r3, #24
 80138ba:	431a      	orrs	r2, r3
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138c0:	071b      	lsls	r3, r3, #28
 80138c2:	491b      	ldr	r1, [pc, #108]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 80138c4:	4313      	orrs	r3, r2
 80138c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80138c8:	4b19      	ldr	r3, [pc, #100]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	4a18      	ldr	r2, [pc, #96]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 80138ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80138d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80138d4:	f7fc ff30 	bl	8010738 <HAL_GetTick>
 80138d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80138da:	e008      	b.n	80138ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80138dc:	f7fc ff2c 	bl	8010738 <HAL_GetTick>
 80138e0:	4602      	mov	r2, r0
 80138e2:	693b      	ldr	r3, [r7, #16]
 80138e4:	1ad3      	subs	r3, r2, r3
 80138e6:	2b02      	cmp	r3, #2
 80138e8:	d901      	bls.n	80138ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80138ea:	2303      	movs	r3, #3
 80138ec:	e05f      	b.n	80139ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80138ee:	4b10      	ldr	r3, [pc, #64]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d0f0      	beq.n	80138dc <HAL_RCC_OscConfig+0x47c>
 80138fa:	e057      	b.n	80139ac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80138fc:	4b0c      	ldr	r3, [pc, #48]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	4a0b      	ldr	r2, [pc, #44]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 8013902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013908:	f7fc ff16 	bl	8010738 <HAL_GetTick>
 801390c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801390e:	e008      	b.n	8013922 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013910:	f7fc ff12 	bl	8010738 <HAL_GetTick>
 8013914:	4602      	mov	r2, r0
 8013916:	693b      	ldr	r3, [r7, #16]
 8013918:	1ad3      	subs	r3, r2, r3
 801391a:	2b02      	cmp	r3, #2
 801391c:	d901      	bls.n	8013922 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 801391e:	2303      	movs	r3, #3
 8013920:	e045      	b.n	80139ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013922:	4b03      	ldr	r3, [pc, #12]	; (8013930 <HAL_RCC_OscConfig+0x4d0>)
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801392a:	2b00      	cmp	r3, #0
 801392c:	d1f0      	bne.n	8013910 <HAL_RCC_OscConfig+0x4b0>
 801392e:	e03d      	b.n	80139ac <HAL_RCC_OscConfig+0x54c>
 8013930:	40023800 	.word	0x40023800
 8013934:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8013938:	4b1f      	ldr	r3, [pc, #124]	; (80139b8 <HAL_RCC_OscConfig+0x558>)
 801393a:	685b      	ldr	r3, [r3, #4]
 801393c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	699b      	ldr	r3, [r3, #24]
 8013942:	2b01      	cmp	r3, #1
 8013944:	d030      	beq.n	80139a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013950:	429a      	cmp	r2, r3
 8013952:	d129      	bne.n	80139a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801395e:	429a      	cmp	r2, r3
 8013960:	d122      	bne.n	80139a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8013962:	68fa      	ldr	r2, [r7, #12]
 8013964:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013968:	4013      	ands	r3, r2
 801396a:	687a      	ldr	r2, [r7, #4]
 801396c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801396e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013970:	4293      	cmp	r3, r2
 8013972:	d119      	bne.n	80139a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801397e:	085b      	lsrs	r3, r3, #1
 8013980:	3b01      	subs	r3, #1
 8013982:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8013984:	429a      	cmp	r2, r3
 8013986:	d10f      	bne.n	80139a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013992:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8013994:	429a      	cmp	r2, r3
 8013996:	d107      	bne.n	80139a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139a2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d001      	beq.n	80139ac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80139a8:	2301      	movs	r3, #1
 80139aa:	e000      	b.n	80139ae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80139ac:	2300      	movs	r3, #0
}
 80139ae:	4618      	mov	r0, r3
 80139b0:	3718      	adds	r7, #24
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}
 80139b6:	bf00      	nop
 80139b8:	40023800 	.word	0x40023800

080139bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b084      	sub	sp, #16
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
 80139c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80139c6:	2300      	movs	r3, #0
 80139c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d101      	bne.n	80139d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80139d0:	2301      	movs	r3, #1
 80139d2:	e0d0      	b.n	8013b76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80139d4:	4b6a      	ldr	r3, [pc, #424]	; (8013b80 <HAL_RCC_ClockConfig+0x1c4>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	f003 030f 	and.w	r3, r3, #15
 80139dc:	683a      	ldr	r2, [r7, #0]
 80139de:	429a      	cmp	r2, r3
 80139e0:	d910      	bls.n	8013a04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80139e2:	4b67      	ldr	r3, [pc, #412]	; (8013b80 <HAL_RCC_ClockConfig+0x1c4>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	f023 020f 	bic.w	r2, r3, #15
 80139ea:	4965      	ldr	r1, [pc, #404]	; (8013b80 <HAL_RCC_ClockConfig+0x1c4>)
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	4313      	orrs	r3, r2
 80139f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80139f2:	4b63      	ldr	r3, [pc, #396]	; (8013b80 <HAL_RCC_ClockConfig+0x1c4>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	f003 030f 	and.w	r3, r3, #15
 80139fa:	683a      	ldr	r2, [r7, #0]
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d001      	beq.n	8013a04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8013a00:	2301      	movs	r3, #1
 8013a02:	e0b8      	b.n	8013b76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	f003 0302 	and.w	r3, r3, #2
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d020      	beq.n	8013a52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	f003 0304 	and.w	r3, r3, #4
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d005      	beq.n	8013a28 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013a1c:	4b59      	ldr	r3, [pc, #356]	; (8013b84 <HAL_RCC_ClockConfig+0x1c8>)
 8013a1e:	689b      	ldr	r3, [r3, #8]
 8013a20:	4a58      	ldr	r2, [pc, #352]	; (8013b84 <HAL_RCC_ClockConfig+0x1c8>)
 8013a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8013a26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	f003 0308 	and.w	r3, r3, #8
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d005      	beq.n	8013a40 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013a34:	4b53      	ldr	r3, [pc, #332]	; (8013b84 <HAL_RCC_ClockConfig+0x1c8>)
 8013a36:	689b      	ldr	r3, [r3, #8]
 8013a38:	4a52      	ldr	r2, [pc, #328]	; (8013b84 <HAL_RCC_ClockConfig+0x1c8>)
 8013a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8013a3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013a40:	4b50      	ldr	r3, [pc, #320]	; (8013b84 <HAL_RCC_ClockConfig+0x1c8>)
 8013a42:	689b      	ldr	r3, [r3, #8]
 8013a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	689b      	ldr	r3, [r3, #8]
 8013a4c:	494d      	ldr	r1, [pc, #308]	; (8013b84 <HAL_RCC_ClockConfig+0x1c8>)
 8013a4e:	4313      	orrs	r3, r2
 8013a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	f003 0301 	and.w	r3, r3, #1
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d040      	beq.n	8013ae0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	685b      	ldr	r3, [r3, #4]
 8013a62:	2b01      	cmp	r3, #1
 8013a64:	d107      	bne.n	8013a76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013a66:	4b47      	ldr	r3, [pc, #284]	; (8013b84 <HAL_RCC_ClockConfig+0x1c8>)
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d115      	bne.n	8013a9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8013a72:	2301      	movs	r3, #1
 8013a74:	e07f      	b.n	8013b76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	685b      	ldr	r3, [r3, #4]
 8013a7a:	2b02      	cmp	r3, #2
 8013a7c:	d107      	bne.n	8013a8e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013a7e:	4b41      	ldr	r3, [pc, #260]	; (8013b84 <HAL_RCC_ClockConfig+0x1c8>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d109      	bne.n	8013a9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8013a8a:	2301      	movs	r3, #1
 8013a8c:	e073      	b.n	8013b76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013a8e:	4b3d      	ldr	r3, [pc, #244]	; (8013b84 <HAL_RCC_ClockConfig+0x1c8>)
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	f003 0302 	and.w	r3, r3, #2
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d101      	bne.n	8013a9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8013a9a:	2301      	movs	r3, #1
 8013a9c:	e06b      	b.n	8013b76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013a9e:	4b39      	ldr	r3, [pc, #228]	; (8013b84 <HAL_RCC_ClockConfig+0x1c8>)
 8013aa0:	689b      	ldr	r3, [r3, #8]
 8013aa2:	f023 0203 	bic.w	r2, r3, #3
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	685b      	ldr	r3, [r3, #4]
 8013aaa:	4936      	ldr	r1, [pc, #216]	; (8013b84 <HAL_RCC_ClockConfig+0x1c8>)
 8013aac:	4313      	orrs	r3, r2
 8013aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013ab0:	f7fc fe42 	bl	8010738 <HAL_GetTick>
 8013ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013ab6:	e00a      	b.n	8013ace <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013ab8:	f7fc fe3e 	bl	8010738 <HAL_GetTick>
 8013abc:	4602      	mov	r2, r0
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	1ad3      	subs	r3, r2, r3
 8013ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ac6:	4293      	cmp	r3, r2
 8013ac8:	d901      	bls.n	8013ace <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8013aca:	2303      	movs	r3, #3
 8013acc:	e053      	b.n	8013b76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013ace:	4b2d      	ldr	r3, [pc, #180]	; (8013b84 <HAL_RCC_ClockConfig+0x1c8>)
 8013ad0:	689b      	ldr	r3, [r3, #8]
 8013ad2:	f003 020c 	and.w	r2, r3, #12
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	685b      	ldr	r3, [r3, #4]
 8013ada:	009b      	lsls	r3, r3, #2
 8013adc:	429a      	cmp	r2, r3
 8013ade:	d1eb      	bne.n	8013ab8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8013ae0:	4b27      	ldr	r3, [pc, #156]	; (8013b80 <HAL_RCC_ClockConfig+0x1c4>)
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	f003 030f 	and.w	r3, r3, #15
 8013ae8:	683a      	ldr	r2, [r7, #0]
 8013aea:	429a      	cmp	r2, r3
 8013aec:	d210      	bcs.n	8013b10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013aee:	4b24      	ldr	r3, [pc, #144]	; (8013b80 <HAL_RCC_ClockConfig+0x1c4>)
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	f023 020f 	bic.w	r2, r3, #15
 8013af6:	4922      	ldr	r1, [pc, #136]	; (8013b80 <HAL_RCC_ClockConfig+0x1c4>)
 8013af8:	683b      	ldr	r3, [r7, #0]
 8013afa:	4313      	orrs	r3, r2
 8013afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013afe:	4b20      	ldr	r3, [pc, #128]	; (8013b80 <HAL_RCC_ClockConfig+0x1c4>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	f003 030f 	and.w	r3, r3, #15
 8013b06:	683a      	ldr	r2, [r7, #0]
 8013b08:	429a      	cmp	r2, r3
 8013b0a:	d001      	beq.n	8013b10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8013b0c:	2301      	movs	r3, #1
 8013b0e:	e032      	b.n	8013b76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	f003 0304 	and.w	r3, r3, #4
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d008      	beq.n	8013b2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013b1c:	4b19      	ldr	r3, [pc, #100]	; (8013b84 <HAL_RCC_ClockConfig+0x1c8>)
 8013b1e:	689b      	ldr	r3, [r3, #8]
 8013b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	68db      	ldr	r3, [r3, #12]
 8013b28:	4916      	ldr	r1, [pc, #88]	; (8013b84 <HAL_RCC_ClockConfig+0x1c8>)
 8013b2a:	4313      	orrs	r3, r2
 8013b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	f003 0308 	and.w	r3, r3, #8
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d009      	beq.n	8013b4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8013b3a:	4b12      	ldr	r3, [pc, #72]	; (8013b84 <HAL_RCC_ClockConfig+0x1c8>)
 8013b3c:	689b      	ldr	r3, [r3, #8]
 8013b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	691b      	ldr	r3, [r3, #16]
 8013b46:	00db      	lsls	r3, r3, #3
 8013b48:	490e      	ldr	r1, [pc, #56]	; (8013b84 <HAL_RCC_ClockConfig+0x1c8>)
 8013b4a:	4313      	orrs	r3, r2
 8013b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8013b4e:	f000 f821 	bl	8013b94 <HAL_RCC_GetSysClockFreq>
 8013b52:	4602      	mov	r2, r0
 8013b54:	4b0b      	ldr	r3, [pc, #44]	; (8013b84 <HAL_RCC_ClockConfig+0x1c8>)
 8013b56:	689b      	ldr	r3, [r3, #8]
 8013b58:	091b      	lsrs	r3, r3, #4
 8013b5a:	f003 030f 	and.w	r3, r3, #15
 8013b5e:	490a      	ldr	r1, [pc, #40]	; (8013b88 <HAL_RCC_ClockConfig+0x1cc>)
 8013b60:	5ccb      	ldrb	r3, [r1, r3]
 8013b62:	fa22 f303 	lsr.w	r3, r2, r3
 8013b66:	4a09      	ldr	r2, [pc, #36]	; (8013b8c <HAL_RCC_ClockConfig+0x1d0>)
 8013b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8013b6a:	4b09      	ldr	r3, [pc, #36]	; (8013b90 <HAL_RCC_ClockConfig+0x1d4>)
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7fc fd9e 	bl	80106b0 <HAL_InitTick>

  return HAL_OK;
 8013b74:	2300      	movs	r3, #0
}
 8013b76:	4618      	mov	r0, r3
 8013b78:	3710      	adds	r7, #16
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}
 8013b7e:	bf00      	nop
 8013b80:	40023c00 	.word	0x40023c00
 8013b84:	40023800 	.word	0x40023800
 8013b88:	08022750 	.word	0x08022750
 8013b8c:	20000040 	.word	0x20000040
 8013b90:	200000f0 	.word	0x200000f0

08013b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013b98:	b090      	sub	sp, #64	; 0x40
 8013b9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013bac:	4b59      	ldr	r3, [pc, #356]	; (8013d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8013bae:	689b      	ldr	r3, [r3, #8]
 8013bb0:	f003 030c 	and.w	r3, r3, #12
 8013bb4:	2b08      	cmp	r3, #8
 8013bb6:	d00d      	beq.n	8013bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8013bb8:	2b08      	cmp	r3, #8
 8013bba:	f200 80a1 	bhi.w	8013d00 <HAL_RCC_GetSysClockFreq+0x16c>
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d002      	beq.n	8013bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8013bc2:	2b04      	cmp	r3, #4
 8013bc4:	d003      	beq.n	8013bce <HAL_RCC_GetSysClockFreq+0x3a>
 8013bc6:	e09b      	b.n	8013d00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013bc8:	4b53      	ldr	r3, [pc, #332]	; (8013d18 <HAL_RCC_GetSysClockFreq+0x184>)
 8013bca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8013bcc:	e09b      	b.n	8013d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013bce:	4b53      	ldr	r3, [pc, #332]	; (8013d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8013bd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8013bd2:	e098      	b.n	8013d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013bd4:	4b4f      	ldr	r3, [pc, #316]	; (8013d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8013bd6:	685b      	ldr	r3, [r3, #4]
 8013bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013bdc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8013bde:	4b4d      	ldr	r3, [pc, #308]	; (8013d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8013be0:	685b      	ldr	r3, [r3, #4]
 8013be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d028      	beq.n	8013c3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013bea:	4b4a      	ldr	r3, [pc, #296]	; (8013d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8013bec:	685b      	ldr	r3, [r3, #4]
 8013bee:	099b      	lsrs	r3, r3, #6
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	623b      	str	r3, [r7, #32]
 8013bf4:	627a      	str	r2, [r7, #36]	; 0x24
 8013bf6:	6a3b      	ldr	r3, [r7, #32]
 8013bf8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8013bfc:	2100      	movs	r1, #0
 8013bfe:	4b47      	ldr	r3, [pc, #284]	; (8013d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8013c00:	fb03 f201 	mul.w	r2, r3, r1
 8013c04:	2300      	movs	r3, #0
 8013c06:	fb00 f303 	mul.w	r3, r0, r3
 8013c0a:	4413      	add	r3, r2
 8013c0c:	4a43      	ldr	r2, [pc, #268]	; (8013d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8013c0e:	fba0 1202 	umull	r1, r2, r0, r2
 8013c12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013c14:	460a      	mov	r2, r1
 8013c16:	62ba      	str	r2, [r7, #40]	; 0x28
 8013c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c1a:	4413      	add	r3, r2
 8013c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c20:	2200      	movs	r2, #0
 8013c22:	61bb      	str	r3, [r7, #24]
 8013c24:	61fa      	str	r2, [r7, #28]
 8013c26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013c2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8013c2e:	f7ec fb0b 	bl	8000248 <__aeabi_uldivmod>
 8013c32:	4602      	mov	r2, r0
 8013c34:	460b      	mov	r3, r1
 8013c36:	4613      	mov	r3, r2
 8013c38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013c3a:	e053      	b.n	8013ce4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013c3c:	4b35      	ldr	r3, [pc, #212]	; (8013d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8013c3e:	685b      	ldr	r3, [r3, #4]
 8013c40:	099b      	lsrs	r3, r3, #6
 8013c42:	2200      	movs	r2, #0
 8013c44:	613b      	str	r3, [r7, #16]
 8013c46:	617a      	str	r2, [r7, #20]
 8013c48:	693b      	ldr	r3, [r7, #16]
 8013c4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8013c4e:	f04f 0b00 	mov.w	fp, #0
 8013c52:	4652      	mov	r2, sl
 8013c54:	465b      	mov	r3, fp
 8013c56:	f04f 0000 	mov.w	r0, #0
 8013c5a:	f04f 0100 	mov.w	r1, #0
 8013c5e:	0159      	lsls	r1, r3, #5
 8013c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013c64:	0150      	lsls	r0, r2, #5
 8013c66:	4602      	mov	r2, r0
 8013c68:	460b      	mov	r3, r1
 8013c6a:	ebb2 080a 	subs.w	r8, r2, sl
 8013c6e:	eb63 090b 	sbc.w	r9, r3, fp
 8013c72:	f04f 0200 	mov.w	r2, #0
 8013c76:	f04f 0300 	mov.w	r3, #0
 8013c7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8013c7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8013c82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8013c86:	ebb2 0408 	subs.w	r4, r2, r8
 8013c8a:	eb63 0509 	sbc.w	r5, r3, r9
 8013c8e:	f04f 0200 	mov.w	r2, #0
 8013c92:	f04f 0300 	mov.w	r3, #0
 8013c96:	00eb      	lsls	r3, r5, #3
 8013c98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8013c9c:	00e2      	lsls	r2, r4, #3
 8013c9e:	4614      	mov	r4, r2
 8013ca0:	461d      	mov	r5, r3
 8013ca2:	eb14 030a 	adds.w	r3, r4, sl
 8013ca6:	603b      	str	r3, [r7, #0]
 8013ca8:	eb45 030b 	adc.w	r3, r5, fp
 8013cac:	607b      	str	r3, [r7, #4]
 8013cae:	f04f 0200 	mov.w	r2, #0
 8013cb2:	f04f 0300 	mov.w	r3, #0
 8013cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8013cba:	4629      	mov	r1, r5
 8013cbc:	028b      	lsls	r3, r1, #10
 8013cbe:	4621      	mov	r1, r4
 8013cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8013cc4:	4621      	mov	r1, r4
 8013cc6:	028a      	lsls	r2, r1, #10
 8013cc8:	4610      	mov	r0, r2
 8013cca:	4619      	mov	r1, r3
 8013ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cce:	2200      	movs	r2, #0
 8013cd0:	60bb      	str	r3, [r7, #8]
 8013cd2:	60fa      	str	r2, [r7, #12]
 8013cd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013cd8:	f7ec fab6 	bl	8000248 <__aeabi_uldivmod>
 8013cdc:	4602      	mov	r2, r0
 8013cde:	460b      	mov	r3, r1
 8013ce0:	4613      	mov	r3, r2
 8013ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8013ce4:	4b0b      	ldr	r3, [pc, #44]	; (8013d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8013ce6:	685b      	ldr	r3, [r3, #4]
 8013ce8:	0c1b      	lsrs	r3, r3, #16
 8013cea:	f003 0303 	and.w	r3, r3, #3
 8013cee:	3301      	adds	r3, #1
 8013cf0:	005b      	lsls	r3, r3, #1
 8013cf2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8013cf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8013cfc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8013cfe:	e002      	b.n	8013d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013d00:	4b05      	ldr	r3, [pc, #20]	; (8013d18 <HAL_RCC_GetSysClockFreq+0x184>)
 8013d02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8013d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8013d08:	4618      	mov	r0, r3
 8013d0a:	3740      	adds	r7, #64	; 0x40
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013d12:	bf00      	nop
 8013d14:	40023800 	.word	0x40023800
 8013d18:	00f42400 	.word	0x00f42400
 8013d1c:	017d7840 	.word	0x017d7840

08013d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b088      	sub	sp, #32
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8013d28:	2300      	movs	r3, #0
 8013d2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8013d30:	2300      	movs	r3, #0
 8013d32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8013d34:	2300      	movs	r3, #0
 8013d36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8013d38:	2300      	movs	r3, #0
 8013d3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	f003 0301 	and.w	r3, r3, #1
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d012      	beq.n	8013d6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8013d48:	4b69      	ldr	r3, [pc, #420]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013d4a:	689b      	ldr	r3, [r3, #8]
 8013d4c:	4a68      	ldr	r2, [pc, #416]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013d4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8013d52:	6093      	str	r3, [r2, #8]
 8013d54:	4b66      	ldr	r3, [pc, #408]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013d56:	689a      	ldr	r2, [r3, #8]
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d5c:	4964      	ldr	r1, [pc, #400]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013d5e:	4313      	orrs	r3, r2
 8013d60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d101      	bne.n	8013d6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8013d6a:	2301      	movs	r3, #1
 8013d6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d017      	beq.n	8013daa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8013d7a:	4b5d      	ldr	r3, [pc, #372]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013d80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d88:	4959      	ldr	r1, [pc, #356]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013d8a:	4313      	orrs	r3, r2
 8013d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013d98:	d101      	bne.n	8013d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d101      	bne.n	8013daa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8013da6:	2301      	movs	r3, #1
 8013da8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d017      	beq.n	8013de6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8013db6:	4b4e      	ldr	r3, [pc, #312]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013dbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dc4:	494a      	ldr	r1, [pc, #296]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013dc6:	4313      	orrs	r3, r2
 8013dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013dd4:	d101      	bne.n	8013dda <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8013dd6:	2301      	movs	r3, #1
 8013dd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d101      	bne.n	8013de6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8013de2:	2301      	movs	r3, #1
 8013de4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d001      	beq.n	8013df6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8013df2:	2301      	movs	r3, #1
 8013df4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	f003 0320 	and.w	r3, r3, #32
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	f000 808b 	beq.w	8013f1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8013e04:	4b3a      	ldr	r3, [pc, #232]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e08:	4a39      	ldr	r2, [pc, #228]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8013e10:	4b37      	ldr	r3, [pc, #220]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013e18:	60bb      	str	r3, [r7, #8]
 8013e1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8013e1c:	4b35      	ldr	r3, [pc, #212]	; (8013ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	4a34      	ldr	r2, [pc, #208]	; (8013ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8013e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013e26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013e28:	f7fc fc86 	bl	8010738 <HAL_GetTick>
 8013e2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8013e2e:	e008      	b.n	8013e42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013e30:	f7fc fc82 	bl	8010738 <HAL_GetTick>
 8013e34:	4602      	mov	r2, r0
 8013e36:	697b      	ldr	r3, [r7, #20]
 8013e38:	1ad3      	subs	r3, r2, r3
 8013e3a:	2b64      	cmp	r3, #100	; 0x64
 8013e3c:	d901      	bls.n	8013e42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8013e3e:	2303      	movs	r3, #3
 8013e40:	e38f      	b.n	8014562 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8013e42:	4b2c      	ldr	r3, [pc, #176]	; (8013ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d0f0      	beq.n	8013e30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8013e4e:	4b28      	ldr	r3, [pc, #160]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013e56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8013e58:	693b      	ldr	r3, [r7, #16]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d035      	beq.n	8013eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013e66:	693a      	ldr	r2, [r7, #16]
 8013e68:	429a      	cmp	r2, r3
 8013e6a:	d02e      	beq.n	8013eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013e6c:	4b20      	ldr	r3, [pc, #128]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013e74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8013e76:	4b1e      	ldr	r3, [pc, #120]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e7a:	4a1d      	ldr	r2, [pc, #116]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013e80:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8013e82:	4b1b      	ldr	r3, [pc, #108]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e86:	4a1a      	ldr	r2, [pc, #104]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013e8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8013e8e:	4a18      	ldr	r2, [pc, #96]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013e90:	693b      	ldr	r3, [r7, #16]
 8013e92:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8013e94:	4b16      	ldr	r3, [pc, #88]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e98:	f003 0301 	and.w	r3, r3, #1
 8013e9c:	2b01      	cmp	r3, #1
 8013e9e:	d114      	bne.n	8013eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013ea0:	f7fc fc4a 	bl	8010738 <HAL_GetTick>
 8013ea4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013ea6:	e00a      	b.n	8013ebe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013ea8:	f7fc fc46 	bl	8010738 <HAL_GetTick>
 8013eac:	4602      	mov	r2, r0
 8013eae:	697b      	ldr	r3, [r7, #20]
 8013eb0:	1ad3      	subs	r3, r2, r3
 8013eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8013eb6:	4293      	cmp	r3, r2
 8013eb8:	d901      	bls.n	8013ebe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8013eba:	2303      	movs	r3, #3
 8013ebc:	e351      	b.n	8014562 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013ebe:	4b0c      	ldr	r3, [pc, #48]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ec2:	f003 0302 	and.w	r3, r3, #2
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d0ee      	beq.n	8013ea8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013ed6:	d111      	bne.n	8013efc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8013ed8:	4b05      	ldr	r3, [pc, #20]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013eda:	689b      	ldr	r3, [r3, #8]
 8013edc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013ee4:	4b04      	ldr	r3, [pc, #16]	; (8013ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8013ee6:	400b      	ands	r3, r1
 8013ee8:	4901      	ldr	r1, [pc, #4]	; (8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013eea:	4313      	orrs	r3, r2
 8013eec:	608b      	str	r3, [r1, #8]
 8013eee:	e00b      	b.n	8013f08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8013ef0:	40023800 	.word	0x40023800
 8013ef4:	40007000 	.word	0x40007000
 8013ef8:	0ffffcff 	.word	0x0ffffcff
 8013efc:	4bac      	ldr	r3, [pc, #688]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013efe:	689b      	ldr	r3, [r3, #8]
 8013f00:	4aab      	ldr	r2, [pc, #684]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013f02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8013f06:	6093      	str	r3, [r2, #8]
 8013f08:	4ba9      	ldr	r3, [pc, #676]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013f0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013f14:	49a6      	ldr	r1, [pc, #664]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013f16:	4313      	orrs	r3, r2
 8013f18:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	f003 0310 	and.w	r3, r3, #16
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d010      	beq.n	8013f48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8013f26:	4ba2      	ldr	r3, [pc, #648]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013f2c:	4aa0      	ldr	r2, [pc, #640]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013f32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8013f36:	4b9e      	ldr	r3, [pc, #632]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013f38:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f40:	499b      	ldr	r1, [pc, #620]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013f42:	4313      	orrs	r3, r2
 8013f44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d00a      	beq.n	8013f6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8013f54:	4b96      	ldr	r3, [pc, #600]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013f62:	4993      	ldr	r1, [pc, #588]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013f64:	4313      	orrs	r3, r2
 8013f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d00a      	beq.n	8013f8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8013f76:	4b8e      	ldr	r3, [pc, #568]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f84:	498a      	ldr	r1, [pc, #552]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013f86:	4313      	orrs	r3, r2
 8013f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d00a      	beq.n	8013fae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8013f98:	4b85      	ldr	r3, [pc, #532]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fa6:	4982      	ldr	r1, [pc, #520]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013fa8:	4313      	orrs	r3, r2
 8013faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d00a      	beq.n	8013fd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8013fba:	4b7d      	ldr	r3, [pc, #500]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013fc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fc8:	4979      	ldr	r1, [pc, #484]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013fca:	4313      	orrs	r3, r2
 8013fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d00a      	beq.n	8013ff2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8013fdc:	4b74      	ldr	r3, [pc, #464]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013fe2:	f023 0203 	bic.w	r2, r3, #3
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013fea:	4971      	ldr	r1, [pc, #452]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013fec:	4313      	orrs	r3, r2
 8013fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d00a      	beq.n	8014014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8013ffe:	4b6c      	ldr	r3, [pc, #432]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8014000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014004:	f023 020c 	bic.w	r2, r3, #12
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801400c:	4968      	ldr	r1, [pc, #416]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801400e:	4313      	orrs	r3, r2
 8014010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801401c:	2b00      	cmp	r3, #0
 801401e:	d00a      	beq.n	8014036 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8014020:	4b63      	ldr	r3, [pc, #396]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8014022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014026:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801402e:	4960      	ldr	r1, [pc, #384]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8014030:	4313      	orrs	r3, r2
 8014032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801403e:	2b00      	cmp	r3, #0
 8014040:	d00a      	beq.n	8014058 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8014042:	4b5b      	ldr	r3, [pc, #364]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8014044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014048:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014050:	4957      	ldr	r1, [pc, #348]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8014052:	4313      	orrs	r3, r2
 8014054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014060:	2b00      	cmp	r3, #0
 8014062:	d00a      	beq.n	801407a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8014064:	4b52      	ldr	r3, [pc, #328]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8014066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801406a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014072:	494f      	ldr	r1, [pc, #316]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8014074:	4313      	orrs	r3, r2
 8014076:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014082:	2b00      	cmp	r3, #0
 8014084:	d00a      	beq.n	801409c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8014086:	4b4a      	ldr	r3, [pc, #296]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8014088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801408c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014094:	4946      	ldr	r1, [pc, #280]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8014096:	4313      	orrs	r3, r2
 8014098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d00a      	beq.n	80140be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80140a8:	4b41      	ldr	r3, [pc, #260]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80140aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80140ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80140b6:	493e      	ldr	r1, [pc, #248]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80140b8:	4313      	orrs	r3, r2
 80140ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d00a      	beq.n	80140e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80140ca:	4b39      	ldr	r3, [pc, #228]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80140cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80140d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80140d8:	4935      	ldr	r1, [pc, #212]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80140da:	4313      	orrs	r3, r2
 80140dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d00a      	beq.n	8014102 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80140ec:	4b30      	ldr	r3, [pc, #192]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80140ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80140f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80140fa:	492d      	ldr	r1, [pc, #180]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80140fc:	4313      	orrs	r3, r2
 80140fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801410a:	2b00      	cmp	r3, #0
 801410c:	d011      	beq.n	8014132 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801410e:	4b28      	ldr	r3, [pc, #160]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8014110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014114:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801411c:	4924      	ldr	r1, [pc, #144]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801411e:	4313      	orrs	r3, r2
 8014120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801412c:	d101      	bne.n	8014132 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 801412e:	2301      	movs	r3, #1
 8014130:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	f003 0308 	and.w	r3, r3, #8
 801413a:	2b00      	cmp	r3, #0
 801413c:	d001      	beq.n	8014142 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 801413e:	2301      	movs	r3, #1
 8014140:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801414a:	2b00      	cmp	r3, #0
 801414c:	d00a      	beq.n	8014164 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801414e:	4b18      	ldr	r3, [pc, #96]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8014150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014154:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801415c:	4914      	ldr	r1, [pc, #80]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801415e:	4313      	orrs	r3, r2
 8014160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801416c:	2b00      	cmp	r3, #0
 801416e:	d00b      	beq.n	8014188 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8014170:	4b0f      	ldr	r3, [pc, #60]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8014172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014176:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014180:	490b      	ldr	r1, [pc, #44]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8014182:	4313      	orrs	r3, r2
 8014184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014190:	2b00      	cmp	r3, #0
 8014192:	d00f      	beq.n	80141b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8014194:	4b06      	ldr	r3, [pc, #24]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8014196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801419a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80141a4:	4902      	ldr	r1, [pc, #8]	; (80141b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80141a6:	4313      	orrs	r3, r2
 80141a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80141ac:	e002      	b.n	80141b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80141ae:	bf00      	nop
 80141b0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d00b      	beq.n	80141d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80141c0:	4b8a      	ldr	r3, [pc, #552]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80141c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80141c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80141d0:	4986      	ldr	r1, [pc, #536]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80141d2:	4313      	orrs	r3, r2
 80141d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d00b      	beq.n	80141fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80141e4:	4b81      	ldr	r3, [pc, #516]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80141e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80141ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80141f4:	497d      	ldr	r1, [pc, #500]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80141f6:	4313      	orrs	r3, r2
 80141f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80141fc:	69fb      	ldr	r3, [r7, #28]
 80141fe:	2b01      	cmp	r3, #1
 8014200:	d006      	beq.n	8014210 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801420a:	2b00      	cmp	r3, #0
 801420c:	f000 80d6 	beq.w	80143bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8014210:	4b76      	ldr	r3, [pc, #472]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	4a75      	ldr	r2, [pc, #468]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8014216:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801421a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801421c:	f7fc fa8c 	bl	8010738 <HAL_GetTick>
 8014220:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8014222:	e008      	b.n	8014236 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8014224:	f7fc fa88 	bl	8010738 <HAL_GetTick>
 8014228:	4602      	mov	r2, r0
 801422a:	697b      	ldr	r3, [r7, #20]
 801422c:	1ad3      	subs	r3, r2, r3
 801422e:	2b64      	cmp	r3, #100	; 0x64
 8014230:	d901      	bls.n	8014236 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8014232:	2303      	movs	r3, #3
 8014234:	e195      	b.n	8014562 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8014236:	4b6d      	ldr	r3, [pc, #436]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801423e:	2b00      	cmp	r3, #0
 8014240:	d1f0      	bne.n	8014224 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	f003 0301 	and.w	r3, r3, #1
 801424a:	2b00      	cmp	r3, #0
 801424c:	d021      	beq.n	8014292 <HAL_RCCEx_PeriphCLKConfig+0x572>
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014252:	2b00      	cmp	r3, #0
 8014254:	d11d      	bne.n	8014292 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8014256:	4b65      	ldr	r3, [pc, #404]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8014258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801425c:	0c1b      	lsrs	r3, r3, #16
 801425e:	f003 0303 	and.w	r3, r3, #3
 8014262:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8014264:	4b61      	ldr	r3, [pc, #388]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8014266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801426a:	0e1b      	lsrs	r3, r3, #24
 801426c:	f003 030f 	and.w	r3, r3, #15
 8014270:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	685b      	ldr	r3, [r3, #4]
 8014276:	019a      	lsls	r2, r3, #6
 8014278:	693b      	ldr	r3, [r7, #16]
 801427a:	041b      	lsls	r3, r3, #16
 801427c:	431a      	orrs	r2, r3
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	061b      	lsls	r3, r3, #24
 8014282:	431a      	orrs	r2, r3
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	689b      	ldr	r3, [r3, #8]
 8014288:	071b      	lsls	r3, r3, #28
 801428a:	4958      	ldr	r1, [pc, #352]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801428c:	4313      	orrs	r3, r2
 801428e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801429a:	2b00      	cmp	r3, #0
 801429c:	d004      	beq.n	80142a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80142a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80142a6:	d00a      	beq.n	80142be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d02e      	beq.n	8014312 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80142bc:	d129      	bne.n	8014312 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80142be:	4b4b      	ldr	r3, [pc, #300]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80142c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80142c4:	0c1b      	lsrs	r3, r3, #16
 80142c6:	f003 0303 	and.w	r3, r3, #3
 80142ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80142cc:	4b47      	ldr	r3, [pc, #284]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80142ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80142d2:	0f1b      	lsrs	r3, r3, #28
 80142d4:	f003 0307 	and.w	r3, r3, #7
 80142d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	685b      	ldr	r3, [r3, #4]
 80142de:	019a      	lsls	r2, r3, #6
 80142e0:	693b      	ldr	r3, [r7, #16]
 80142e2:	041b      	lsls	r3, r3, #16
 80142e4:	431a      	orrs	r2, r3
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	68db      	ldr	r3, [r3, #12]
 80142ea:	061b      	lsls	r3, r3, #24
 80142ec:	431a      	orrs	r2, r3
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	071b      	lsls	r3, r3, #28
 80142f2:	493e      	ldr	r1, [pc, #248]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80142f4:	4313      	orrs	r3, r2
 80142f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80142fa:	4b3c      	ldr	r3, [pc, #240]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80142fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014300:	f023 021f 	bic.w	r2, r3, #31
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014308:	3b01      	subs	r3, #1
 801430a:	4938      	ldr	r1, [pc, #224]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801430c:	4313      	orrs	r3, r2
 801430e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801431a:	2b00      	cmp	r3, #0
 801431c:	d01d      	beq.n	801435a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801431e:	4b33      	ldr	r3, [pc, #204]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8014320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014324:	0e1b      	lsrs	r3, r3, #24
 8014326:	f003 030f 	and.w	r3, r3, #15
 801432a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801432c:	4b2f      	ldr	r3, [pc, #188]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801432e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014332:	0f1b      	lsrs	r3, r3, #28
 8014334:	f003 0307 	and.w	r3, r3, #7
 8014338:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	685b      	ldr	r3, [r3, #4]
 801433e:	019a      	lsls	r2, r3, #6
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	691b      	ldr	r3, [r3, #16]
 8014344:	041b      	lsls	r3, r3, #16
 8014346:	431a      	orrs	r2, r3
 8014348:	693b      	ldr	r3, [r7, #16]
 801434a:	061b      	lsls	r3, r3, #24
 801434c:	431a      	orrs	r2, r3
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	071b      	lsls	r3, r3, #28
 8014352:	4926      	ldr	r1, [pc, #152]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8014354:	4313      	orrs	r3, r2
 8014356:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014362:	2b00      	cmp	r3, #0
 8014364:	d011      	beq.n	801438a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	685b      	ldr	r3, [r3, #4]
 801436a:	019a      	lsls	r2, r3, #6
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	691b      	ldr	r3, [r3, #16]
 8014370:	041b      	lsls	r3, r3, #16
 8014372:	431a      	orrs	r2, r3
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	68db      	ldr	r3, [r3, #12]
 8014378:	061b      	lsls	r3, r3, #24
 801437a:	431a      	orrs	r2, r3
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	689b      	ldr	r3, [r3, #8]
 8014380:	071b      	lsls	r3, r3, #28
 8014382:	491a      	ldr	r1, [pc, #104]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8014384:	4313      	orrs	r3, r2
 8014386:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801438a:	4b18      	ldr	r3, [pc, #96]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	4a17      	ldr	r2, [pc, #92]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8014390:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014396:	f7fc f9cf 	bl	8010738 <HAL_GetTick>
 801439a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801439c:	e008      	b.n	80143b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801439e:	f7fc f9cb 	bl	8010738 <HAL_GetTick>
 80143a2:	4602      	mov	r2, r0
 80143a4:	697b      	ldr	r3, [r7, #20]
 80143a6:	1ad3      	subs	r3, r2, r3
 80143a8:	2b64      	cmp	r3, #100	; 0x64
 80143aa:	d901      	bls.n	80143b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80143ac:	2303      	movs	r3, #3
 80143ae:	e0d8      	b.n	8014562 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80143b0:	4b0e      	ldr	r3, [pc, #56]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d0f0      	beq.n	801439e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80143bc:	69bb      	ldr	r3, [r7, #24]
 80143be:	2b01      	cmp	r3, #1
 80143c0:	f040 80ce 	bne.w	8014560 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80143c4:	4b09      	ldr	r3, [pc, #36]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	4a08      	ldr	r2, [pc, #32]	; (80143ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80143ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80143ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80143d0:	f7fc f9b2 	bl	8010738 <HAL_GetTick>
 80143d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80143d6:	e00b      	b.n	80143f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80143d8:	f7fc f9ae 	bl	8010738 <HAL_GetTick>
 80143dc:	4602      	mov	r2, r0
 80143de:	697b      	ldr	r3, [r7, #20]
 80143e0:	1ad3      	subs	r3, r2, r3
 80143e2:	2b64      	cmp	r3, #100	; 0x64
 80143e4:	d904      	bls.n	80143f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80143e6:	2303      	movs	r3, #3
 80143e8:	e0bb      	b.n	8014562 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80143ea:	bf00      	nop
 80143ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80143f0:	4b5e      	ldr	r3, [pc, #376]	; (801456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80143f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80143fc:	d0ec      	beq.n	80143d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8014406:	2b00      	cmp	r3, #0
 8014408:	d003      	beq.n	8014412 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801440e:	2b00      	cmp	r3, #0
 8014410:	d009      	beq.n	8014426 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801441a:	2b00      	cmp	r3, #0
 801441c:	d02e      	beq.n	801447c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014422:	2b00      	cmp	r3, #0
 8014424:	d12a      	bne.n	801447c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8014426:	4b51      	ldr	r3, [pc, #324]	; (801456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8014428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801442c:	0c1b      	lsrs	r3, r3, #16
 801442e:	f003 0303 	and.w	r3, r3, #3
 8014432:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8014434:	4b4d      	ldr	r3, [pc, #308]	; (801456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8014436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801443a:	0f1b      	lsrs	r3, r3, #28
 801443c:	f003 0307 	and.w	r3, r3, #7
 8014440:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	695b      	ldr	r3, [r3, #20]
 8014446:	019a      	lsls	r2, r3, #6
 8014448:	693b      	ldr	r3, [r7, #16]
 801444a:	041b      	lsls	r3, r3, #16
 801444c:	431a      	orrs	r2, r3
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	699b      	ldr	r3, [r3, #24]
 8014452:	061b      	lsls	r3, r3, #24
 8014454:	431a      	orrs	r2, r3
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	071b      	lsls	r3, r3, #28
 801445a:	4944      	ldr	r1, [pc, #272]	; (801456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801445c:	4313      	orrs	r3, r2
 801445e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8014462:	4b42      	ldr	r3, [pc, #264]	; (801456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8014464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014468:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014470:	3b01      	subs	r3, #1
 8014472:	021b      	lsls	r3, r3, #8
 8014474:	493d      	ldr	r1, [pc, #244]	; (801456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8014476:	4313      	orrs	r3, r2
 8014478:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014484:	2b00      	cmp	r3, #0
 8014486:	d022      	beq.n	80144ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801448c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8014490:	d11d      	bne.n	80144ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8014492:	4b36      	ldr	r3, [pc, #216]	; (801456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8014494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014498:	0e1b      	lsrs	r3, r3, #24
 801449a:	f003 030f 	and.w	r3, r3, #15
 801449e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80144a0:	4b32      	ldr	r3, [pc, #200]	; (801456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80144a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80144a6:	0f1b      	lsrs	r3, r3, #28
 80144a8:	f003 0307 	and.w	r3, r3, #7
 80144ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	695b      	ldr	r3, [r3, #20]
 80144b2:	019a      	lsls	r2, r3, #6
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	6a1b      	ldr	r3, [r3, #32]
 80144b8:	041b      	lsls	r3, r3, #16
 80144ba:	431a      	orrs	r2, r3
 80144bc:	693b      	ldr	r3, [r7, #16]
 80144be:	061b      	lsls	r3, r3, #24
 80144c0:	431a      	orrs	r2, r3
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	071b      	lsls	r3, r3, #28
 80144c6:	4929      	ldr	r1, [pc, #164]	; (801456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80144c8:	4313      	orrs	r3, r2
 80144ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	f003 0308 	and.w	r3, r3, #8
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d028      	beq.n	801452c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80144da:	4b24      	ldr	r3, [pc, #144]	; (801456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80144dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80144e0:	0e1b      	lsrs	r3, r3, #24
 80144e2:	f003 030f 	and.w	r3, r3, #15
 80144e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80144e8:	4b20      	ldr	r3, [pc, #128]	; (801456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80144ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80144ee:	0c1b      	lsrs	r3, r3, #16
 80144f0:	f003 0303 	and.w	r3, r3, #3
 80144f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	695b      	ldr	r3, [r3, #20]
 80144fa:	019a      	lsls	r2, r3, #6
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	041b      	lsls	r3, r3, #16
 8014500:	431a      	orrs	r2, r3
 8014502:	693b      	ldr	r3, [r7, #16]
 8014504:	061b      	lsls	r3, r3, #24
 8014506:	431a      	orrs	r2, r3
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	69db      	ldr	r3, [r3, #28]
 801450c:	071b      	lsls	r3, r3, #28
 801450e:	4917      	ldr	r1, [pc, #92]	; (801456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8014510:	4313      	orrs	r3, r2
 8014512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8014516:	4b15      	ldr	r3, [pc, #84]	; (801456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8014518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801451c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014524:	4911      	ldr	r1, [pc, #68]	; (801456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8014526:	4313      	orrs	r3, r2
 8014528:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801452c:	4b0f      	ldr	r3, [pc, #60]	; (801456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	4a0e      	ldr	r2, [pc, #56]	; (801456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8014532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014538:	f7fc f8fe 	bl	8010738 <HAL_GetTick>
 801453c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801453e:	e008      	b.n	8014552 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8014540:	f7fc f8fa 	bl	8010738 <HAL_GetTick>
 8014544:	4602      	mov	r2, r0
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	1ad3      	subs	r3, r2, r3
 801454a:	2b64      	cmp	r3, #100	; 0x64
 801454c:	d901      	bls.n	8014552 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801454e:	2303      	movs	r3, #3
 8014550:	e007      	b.n	8014562 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8014552:	4b06      	ldr	r3, [pc, #24]	; (801456c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801455a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801455e:	d1ef      	bne.n	8014540 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8014560:	2300      	movs	r3, #0
}
 8014562:	4618      	mov	r0, r3
 8014564:	3720      	adds	r7, #32
 8014566:	46bd      	mov	sp, r7
 8014568:	bd80      	pop	{r7, pc}
 801456a:	bf00      	nop
 801456c:	40023800 	.word	0x40023800

08014570 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8014570:	b580      	push	{r7, lr}
 8014572:	b082      	sub	sp, #8
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
 8014578:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d101      	bne.n	8014584 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8014580:	2301      	movs	r3, #1
 8014582:	e025      	b.n	80145d0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801458a:	b2db      	uxtb	r3, r3
 801458c:	2b00      	cmp	r3, #0
 801458e:	d106      	bne.n	801459e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	2200      	movs	r2, #0
 8014594:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8014598:	6878      	ldr	r0, [r7, #4]
 801459a:	f7f0 fef7 	bl	800538c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	2202      	movs	r2, #2
 80145a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	681a      	ldr	r2, [r3, #0]
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	3304      	adds	r3, #4
 80145ae:	4619      	mov	r1, r3
 80145b0:	4610      	mov	r0, r2
 80145b2:	f000 f85d 	bl	8014670 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	6818      	ldr	r0, [r3, #0]
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	685b      	ldr	r3, [r3, #4]
 80145be:	461a      	mov	r2, r3
 80145c0:	6839      	ldr	r1, [r7, #0]
 80145c2:	f000 f8c7 	bl	8014754 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	2201      	movs	r2, #1
 80145ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80145ce:	2300      	movs	r3, #0
}
 80145d0:	4618      	mov	r0, r3
 80145d2:	3708      	adds	r7, #8
 80145d4:	46bd      	mov	sp, r7
 80145d6:	bd80      	pop	{r7, pc}

080145d8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80145d8:	b580      	push	{r7, lr}
 80145da:	b084      	sub	sp, #16
 80145dc:	af00      	add	r7, sp, #0
 80145de:	60f8      	str	r0, [r7, #12]
 80145e0:	60b9      	str	r1, [r7, #8]
 80145e2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80145ea:	b2db      	uxtb	r3, r3
 80145ec:	2b02      	cmp	r3, #2
 80145ee:	d101      	bne.n	80145f4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80145f0:	2302      	movs	r3, #2
 80145f2:	e018      	b.n	8014626 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	2202      	movs	r2, #2
 80145f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	687a      	ldr	r2, [r7, #4]
 8014602:	68b9      	ldr	r1, [r7, #8]
 8014604:	4618      	mov	r0, r3
 8014606:	f000 f925 	bl	8014854 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801460a:	68bb      	ldr	r3, [r7, #8]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	2b02      	cmp	r3, #2
 8014610:	d104      	bne.n	801461c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	2205      	movs	r2, #5
 8014616:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801461a:	e003      	b.n	8014624 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	2201      	movs	r2, #1
 8014620:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8014624:	2300      	movs	r3, #0
}
 8014626:	4618      	mov	r0, r3
 8014628:	3710      	adds	r7, #16
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}

0801462e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 801462e:	b580      	push	{r7, lr}
 8014630:	b082      	sub	sp, #8
 8014632:	af00      	add	r7, sp, #0
 8014634:	6078      	str	r0, [r7, #4]
 8014636:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801463e:	b2db      	uxtb	r3, r3
 8014640:	2b02      	cmp	r3, #2
 8014642:	d101      	bne.n	8014648 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8014644:	2302      	movs	r3, #2
 8014646:	e00e      	b.n	8014666 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2202      	movs	r2, #2
 801464c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	6839      	ldr	r1, [r7, #0]
 8014656:	4618      	mov	r0, r3
 8014658:	f000 f920 	bl	801489c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2201      	movs	r2, #1
 8014660:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8014664:	2300      	movs	r3, #0
}
 8014666:	4618      	mov	r0, r3
 8014668:	3708      	adds	r7, #8
 801466a:	46bd      	mov	sp, r7
 801466c:	bd80      	pop	{r7, pc}
	...

08014670 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8014670:	b480      	push	{r7}
 8014672:	b085      	sub	sp, #20
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
 8014678:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 801467a:	2300      	movs	r3, #0
 801467c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 801467e:	2300      	movs	r3, #0
 8014680:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8014682:	683b      	ldr	r3, [r7, #0]
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	2b01      	cmp	r3, #1
 8014688:	d027      	beq.n	80146da <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8014690:	68fa      	ldr	r2, [r7, #12]
 8014692:	4b2f      	ldr	r3, [pc, #188]	; (8014750 <FMC_SDRAM_Init+0xe0>)
 8014694:	4013      	ands	r3, r2
 8014696:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80146a0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80146a2:	683b      	ldr	r3, [r7, #0]
 80146a4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80146a6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80146a8:	683b      	ldr	r3, [r7, #0]
 80146aa:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80146ac:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80146ae:	683b      	ldr	r3, [r7, #0]
 80146b0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80146b2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80146b4:	683b      	ldr	r3, [r7, #0]
 80146b6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80146b8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80146be:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80146c0:	683b      	ldr	r3, [r7, #0]
 80146c2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80146c4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80146c6:	683b      	ldr	r3, [r7, #0]
 80146c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80146ca:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80146cc:	68fa      	ldr	r2, [r7, #12]
 80146ce:	4313      	orrs	r3, r2
 80146d0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	68fa      	ldr	r2, [r7, #12]
 80146d6:	601a      	str	r2, [r3, #0]
 80146d8:	e032      	b.n	8014740 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80146e6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80146ec:	683b      	ldr	r3, [r7, #0]
 80146ee:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80146f0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80146f2:	683b      	ldr	r3, [r7, #0]
 80146f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80146f6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80146f8:	68fa      	ldr	r2, [r7, #12]
 80146fa:	4313      	orrs	r3, r2
 80146fc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	685b      	ldr	r3, [r3, #4]
 8014702:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8014704:	68ba      	ldr	r2, [r7, #8]
 8014706:	4b12      	ldr	r3, [pc, #72]	; (8014750 <FMC_SDRAM_Init+0xe0>)
 8014708:	4013      	ands	r3, r2
 801470a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801470c:	683b      	ldr	r3, [r7, #0]
 801470e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8014710:	683b      	ldr	r3, [r7, #0]
 8014712:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8014714:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8014716:	683b      	ldr	r3, [r7, #0]
 8014718:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 801471a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 801471c:	683b      	ldr	r3, [r7, #0]
 801471e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8014720:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8014722:	683b      	ldr	r3, [r7, #0]
 8014724:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8014726:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8014728:	683b      	ldr	r3, [r7, #0]
 801472a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 801472c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801472e:	68ba      	ldr	r2, [r7, #8]
 8014730:	4313      	orrs	r3, r2
 8014732:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	68fa      	ldr	r2, [r7, #12]
 8014738:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	68ba      	ldr	r2, [r7, #8]
 801473e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8014740:	2300      	movs	r3, #0
}
 8014742:	4618      	mov	r0, r3
 8014744:	3714      	adds	r7, #20
 8014746:	46bd      	mov	sp, r7
 8014748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474c:	4770      	bx	lr
 801474e:	bf00      	nop
 8014750:	ffff8000 	.word	0xffff8000

08014754 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8014754:	b480      	push	{r7}
 8014756:	b087      	sub	sp, #28
 8014758:	af00      	add	r7, sp, #0
 801475a:	60f8      	str	r0, [r7, #12]
 801475c:	60b9      	str	r1, [r7, #8]
 801475e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8014760:	2300      	movs	r3, #0
 8014762:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8014764:	2300      	movs	r3, #0
 8014766:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	2b01      	cmp	r3, #1
 801476c:	d02e      	beq.n	80147cc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	689b      	ldr	r3, [r3, #8]
 8014772:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8014774:	697b      	ldr	r3, [r7, #20]
 8014776:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801477a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801477c:	68bb      	ldr	r3, [r7, #8]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8014782:	68bb      	ldr	r3, [r7, #8]
 8014784:	685b      	ldr	r3, [r3, #4]
 8014786:	3b01      	subs	r3, #1
 8014788:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801478a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 801478c:	68bb      	ldr	r3, [r7, #8]
 801478e:	689b      	ldr	r3, [r3, #8]
 8014790:	3b01      	subs	r3, #1
 8014792:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8014794:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8014796:	68bb      	ldr	r3, [r7, #8]
 8014798:	68db      	ldr	r3, [r3, #12]
 801479a:	3b01      	subs	r3, #1
 801479c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 801479e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	691b      	ldr	r3, [r3, #16]
 80147a4:	3b01      	subs	r3, #1
 80147a6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80147a8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80147aa:	68bb      	ldr	r3, [r7, #8]
 80147ac:	695b      	ldr	r3, [r3, #20]
 80147ae:	3b01      	subs	r3, #1
 80147b0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80147b2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80147b4:	68bb      	ldr	r3, [r7, #8]
 80147b6:	699b      	ldr	r3, [r3, #24]
 80147b8:	3b01      	subs	r3, #1
 80147ba:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80147bc:	4313      	orrs	r3, r2
 80147be:	697a      	ldr	r2, [r7, #20]
 80147c0:	4313      	orrs	r3, r2
 80147c2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	697a      	ldr	r2, [r7, #20]
 80147c8:	609a      	str	r2, [r3, #8]
 80147ca:	e039      	b.n	8014840 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	689b      	ldr	r3, [r3, #8]
 80147d0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80147d2:	697a      	ldr	r2, [r7, #20]
 80147d4:	4b1e      	ldr	r3, [pc, #120]	; (8014850 <FMC_SDRAM_Timing_Init+0xfc>)
 80147d6:	4013      	ands	r3, r2
 80147d8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80147da:	68bb      	ldr	r3, [r7, #8]
 80147dc:	68db      	ldr	r3, [r3, #12]
 80147de:	3b01      	subs	r3, #1
 80147e0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80147e2:	68bb      	ldr	r3, [r7, #8]
 80147e4:	695b      	ldr	r3, [r3, #20]
 80147e6:	3b01      	subs	r3, #1
 80147e8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80147ea:	4313      	orrs	r3, r2
 80147ec:	697a      	ldr	r2, [r7, #20]
 80147ee:	4313      	orrs	r3, r2
 80147f0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	68db      	ldr	r3, [r3, #12]
 80147f6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80147f8:	693b      	ldr	r3, [r7, #16]
 80147fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80147fe:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8014800:	68bb      	ldr	r3, [r7, #8]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8014806:	68bb      	ldr	r3, [r7, #8]
 8014808:	685b      	ldr	r3, [r3, #4]
 801480a:	3b01      	subs	r3, #1
 801480c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801480e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	689b      	ldr	r3, [r3, #8]
 8014814:	3b01      	subs	r3, #1
 8014816:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8014818:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	691b      	ldr	r3, [r3, #16]
 801481e:	3b01      	subs	r3, #1
 8014820:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8014822:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8014824:	68bb      	ldr	r3, [r7, #8]
 8014826:	699b      	ldr	r3, [r3, #24]
 8014828:	3b01      	subs	r3, #1
 801482a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801482c:	4313      	orrs	r3, r2
 801482e:	693a      	ldr	r2, [r7, #16]
 8014830:	4313      	orrs	r3, r2
 8014832:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	697a      	ldr	r2, [r7, #20]
 8014838:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	693a      	ldr	r2, [r7, #16]
 801483e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8014840:	2300      	movs	r3, #0
}
 8014842:	4618      	mov	r0, r3
 8014844:	371c      	adds	r7, #28
 8014846:	46bd      	mov	sp, r7
 8014848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801484c:	4770      	bx	lr
 801484e:	bf00      	nop
 8014850:	ff0f0fff 	.word	0xff0f0fff

08014854 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8014854:	b480      	push	{r7}
 8014856:	b085      	sub	sp, #20
 8014858:	af00      	add	r7, sp, #0
 801485a:	60f8      	str	r0, [r7, #12]
 801485c:	60b9      	str	r1, [r7, #8]
 801485e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	691a      	ldr	r2, [r3, #16]
 8014864:	4b0c      	ldr	r3, [pc, #48]	; (8014898 <FMC_SDRAM_SendCommand+0x44>)
 8014866:	4013      	ands	r3, r2
 8014868:	68ba      	ldr	r2, [r7, #8]
 801486a:	6811      	ldr	r1, [r2, #0]
 801486c:	68ba      	ldr	r2, [r7, #8]
 801486e:	6852      	ldr	r2, [r2, #4]
 8014870:	4311      	orrs	r1, r2
 8014872:	68ba      	ldr	r2, [r7, #8]
 8014874:	6892      	ldr	r2, [r2, #8]
 8014876:	3a01      	subs	r2, #1
 8014878:	0152      	lsls	r2, r2, #5
 801487a:	4311      	orrs	r1, r2
 801487c:	68ba      	ldr	r2, [r7, #8]
 801487e:	68d2      	ldr	r2, [r2, #12]
 8014880:	0252      	lsls	r2, r2, #9
 8014882:	430a      	orrs	r2, r1
 8014884:	431a      	orrs	r2, r3
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 801488a:	2300      	movs	r3, #0
}
 801488c:	4618      	mov	r0, r3
 801488e:	3714      	adds	r7, #20
 8014890:	46bd      	mov	sp, r7
 8014892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014896:	4770      	bx	lr
 8014898:	ffc00000 	.word	0xffc00000

0801489c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 801489c:	b480      	push	{r7}
 801489e:	b083      	sub	sp, #12
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
 80148a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	695a      	ldr	r2, [r3, #20]
 80148aa:	683b      	ldr	r3, [r7, #0]
 80148ac:	005b      	lsls	r3, r3, #1
 80148ae:	431a      	orrs	r2, r3
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80148b4:	2300      	movs	r3, #0
}
 80148b6:	4618      	mov	r0, r3
 80148b8:	370c      	adds	r7, #12
 80148ba:	46bd      	mov	sp, r7
 80148bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c0:	4770      	bx	lr

080148c2 <map_int32>:
char NO_STRING = '\0';
int32_t mcu_load = 0;


int32_t map_int32(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 80148c2:	b480      	push	{r7}
 80148c4:	b085      	sub	sp, #20
 80148c6:	af00      	add	r7, sp, #0
 80148c8:	60f8      	str	r0, [r7, #12]
 80148ca:	60b9      	str	r1, [r7, #8]
 80148cc:	607a      	str	r2, [r7, #4]
 80148ce:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80148d0:	68fa      	ldr	r2, [r7, #12]
 80148d2:	68bb      	ldr	r3, [r7, #8]
 80148d4:	1ad3      	subs	r3, r2, r3
 80148d6:	69b9      	ldr	r1, [r7, #24]
 80148d8:	683a      	ldr	r2, [r7, #0]
 80148da:	1a8a      	subs	r2, r1, r2
 80148dc:	fb03 f202 	mul.w	r2, r3, r2
 80148e0:	6879      	ldr	r1, [r7, #4]
 80148e2:	68bb      	ldr	r3, [r7, #8]
 80148e4:	1acb      	subs	r3, r1, r3
 80148e6:	fb92 f2f3 	sdiv	r2, r2, r3
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	4413      	add	r3, r2
}
 80148ee:	4618      	mov	r0, r3
 80148f0:	3714      	adds	r7, #20
 80148f2:	46bd      	mov	sp, r7
 80148f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f8:	4770      	bx	lr

080148fa <map_float>:
	if(x1 > x2) return x1;
	else return x2;
}

float map_float(float x, float in_min, float in_max, float out_min, float out_max)
{
 80148fa:	b480      	push	{r7}
 80148fc:	b087      	sub	sp, #28
 80148fe:	af00      	add	r7, sp, #0
 8014900:	ed87 0a05 	vstr	s0, [r7, #20]
 8014904:	edc7 0a04 	vstr	s1, [r7, #16]
 8014908:	ed87 1a03 	vstr	s2, [r7, #12]
 801490c:	edc7 1a02 	vstr	s3, [r7, #8]
 8014910:	ed87 2a01 	vstr	s4, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8014914:	ed97 7a05 	vldr	s14, [r7, #20]
 8014918:	edd7 7a04 	vldr	s15, [r7, #16]
 801491c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014920:	edd7 6a01 	vldr	s13, [r7, #4]
 8014924:	edd7 7a02 	vldr	s15, [r7, #8]
 8014928:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801492c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8014930:	ed97 7a03 	vldr	s14, [r7, #12]
 8014934:	edd7 7a04 	vldr	s15, [r7, #16]
 8014938:	ee77 7a67 	vsub.f32	s15, s14, s15
 801493c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014940:	edd7 7a02 	vldr	s15, [r7, #8]
 8014944:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8014948:	eeb0 0a67 	vmov.f32	s0, s15
 801494c:	371c      	adds	r7, #28
 801494e:	46bd      	mov	sp, r7
 8014950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014954:	4770      	bx	lr

08014956 <MDM_pow>:

int32_t MDM_pow(int32_t b, int32_t e)
{
 8014956:	b480      	push	{r7}
 8014958:	b085      	sub	sp, #20
 801495a:	af00      	add	r7, sp, #0
 801495c:	6078      	str	r0, [r7, #4]
 801495e:	6039      	str	r1, [r7, #0]
	if (e == 0)
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d101      	bne.n	801496a <MDM_pow+0x14>
		return 1;
 8014966:	2301      	movs	r3, #1
 8014968:	e016      	b.n	8014998 <MDM_pow+0x42>
	else if (b == 0)
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d101      	bne.n	8014974 <MDM_pow+0x1e>
		return 0;
 8014970:	2300      	movs	r3, #0
 8014972:	e011      	b.n	8014998 <MDM_pow+0x42>
	else
	{
		int32_t p = b;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	60fb      	str	r3, [r7, #12]

		for(int32_t i = 1; i < e; i++)
 8014978:	2301      	movs	r3, #1
 801497a:	60bb      	str	r3, [r7, #8]
 801497c:	e007      	b.n	801498e <MDM_pow+0x38>
			p *= b;
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	687a      	ldr	r2, [r7, #4]
 8014982:	fb02 f303 	mul.w	r3, r2, r3
 8014986:	60fb      	str	r3, [r7, #12]
		for(int32_t i = 1; i < e; i++)
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	3301      	adds	r3, #1
 801498c:	60bb      	str	r3, [r7, #8]
 801498e:	68ba      	ldr	r2, [r7, #8]
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	429a      	cmp	r2, r3
 8014994:	dbf3      	blt.n	801497e <MDM_pow+0x28>

		return p;
 8014996:	68fb      	ldr	r3, [r7, #12]
	}
}
 8014998:	4618      	mov	r0, r3
 801499a:	3714      	adds	r7, #20
 801499c:	46bd      	mov	sp, r7
 801499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a2:	4770      	bx	lr

080149a4 <reverse>:
}


// Reverses a string 'str' of length 'len'
void reverse(char* str, int len)
{
 80149a4:	b480      	push	{r7}
 80149a6:	b087      	sub	sp, #28
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
 80149ac:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 80149ae:	2300      	movs	r3, #0
 80149b0:	617b      	str	r3, [r7, #20]
 80149b2:	683b      	ldr	r3, [r7, #0]
 80149b4:	3b01      	subs	r3, #1
 80149b6:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80149b8:	e018      	b.n	80149ec <reverse+0x48>
        temp = str[i];
 80149ba:	697b      	ldr	r3, [r7, #20]
 80149bc:	687a      	ldr	r2, [r7, #4]
 80149be:	4413      	add	r3, r2
 80149c0:	781b      	ldrb	r3, [r3, #0]
 80149c2:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80149c4:	693b      	ldr	r3, [r7, #16]
 80149c6:	687a      	ldr	r2, [r7, #4]
 80149c8:	441a      	add	r2, r3
 80149ca:	697b      	ldr	r3, [r7, #20]
 80149cc:	6879      	ldr	r1, [r7, #4]
 80149ce:	440b      	add	r3, r1
 80149d0:	7812      	ldrb	r2, [r2, #0]
 80149d2:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80149d4:	693b      	ldr	r3, [r7, #16]
 80149d6:	687a      	ldr	r2, [r7, #4]
 80149d8:	4413      	add	r3, r2
 80149da:	68fa      	ldr	r2, [r7, #12]
 80149dc:	b2d2      	uxtb	r2, r2
 80149de:	701a      	strb	r2, [r3, #0]
        i++;
 80149e0:	697b      	ldr	r3, [r7, #20]
 80149e2:	3301      	adds	r3, #1
 80149e4:	617b      	str	r3, [r7, #20]
        j--;
 80149e6:	693b      	ldr	r3, [r7, #16]
 80149e8:	3b01      	subs	r3, #1
 80149ea:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80149ec:	697a      	ldr	r2, [r7, #20]
 80149ee:	693b      	ldr	r3, [r7, #16]
 80149f0:	429a      	cmp	r2, r3
 80149f2:	dbe2      	blt.n	80149ba <reverse+0x16>
    }
}
 80149f4:	bf00      	nop
 80149f6:	bf00      	nop
 80149f8:	371c      	adds	r7, #28
 80149fa:	46bd      	mov	sp, r7
 80149fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a00:	4770      	bx	lr
	...

08014a04 <intToStr>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b086      	sub	sp, #24
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	60f8      	str	r0, [r7, #12]
 8014a0c:	60b9      	str	r1, [r7, #8]
 8014a0e:	607a      	str	r2, [r7, #4]
	int i = 0;
 8014a10:	2300      	movs	r3, #0
 8014a12:	617b      	str	r3, [r7, #20]

	if(x == 0 && d == 0)
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d129      	bne.n	8014a6e <intToStr+0x6a>
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d126      	bne.n	8014a6e <intToStr+0x6a>
		str[i++] = '0';
 8014a20:	697b      	ldr	r3, [r7, #20]
 8014a22:	1c5a      	adds	r2, r3, #1
 8014a24:	617a      	str	r2, [r7, #20]
 8014a26:	461a      	mov	r2, r3
 8014a28:	68bb      	ldr	r3, [r7, #8]
 8014a2a:	4413      	add	r3, r2
 8014a2c:	2230      	movs	r2, #48	; 0x30
 8014a2e:	701a      	strb	r2, [r3, #0]
 8014a30:	e02d      	b.n	8014a8e <intToStr+0x8a>
	else
	{
		while (x)
		{
			str[i++] = (x % 10) + '0';
 8014a32:	68fa      	ldr	r2, [r7, #12]
 8014a34:	4b1d      	ldr	r3, [pc, #116]	; (8014aac <intToStr+0xa8>)
 8014a36:	fb83 1302 	smull	r1, r3, r3, r2
 8014a3a:	1099      	asrs	r1, r3, #2
 8014a3c:	17d3      	asrs	r3, r2, #31
 8014a3e:	1ac9      	subs	r1, r1, r3
 8014a40:	460b      	mov	r3, r1
 8014a42:	009b      	lsls	r3, r3, #2
 8014a44:	440b      	add	r3, r1
 8014a46:	005b      	lsls	r3, r3, #1
 8014a48:	1ad1      	subs	r1, r2, r3
 8014a4a:	b2ca      	uxtb	r2, r1
 8014a4c:	697b      	ldr	r3, [r7, #20]
 8014a4e:	1c59      	adds	r1, r3, #1
 8014a50:	6179      	str	r1, [r7, #20]
 8014a52:	4619      	mov	r1, r3
 8014a54:	68bb      	ldr	r3, [r7, #8]
 8014a56:	440b      	add	r3, r1
 8014a58:	3230      	adds	r2, #48	; 0x30
 8014a5a:	b2d2      	uxtb	r2, r2
 8014a5c:	701a      	strb	r2, [r3, #0]
			x = x / 10;
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	4a12      	ldr	r2, [pc, #72]	; (8014aac <intToStr+0xa8>)
 8014a62:	fb82 1203 	smull	r1, r2, r2, r3
 8014a66:	1092      	asrs	r2, r2, #2
 8014a68:	17db      	asrs	r3, r3, #31
 8014a6a:	1ad3      	subs	r3, r2, r3
 8014a6c:	60fb      	str	r3, [r7, #12]
		while (x)
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d1de      	bne.n	8014a32 <intToStr+0x2e>
		}

		// If number of digits required is more, then
		// add 0s at the beginning
		while (i < d)
 8014a74:	e007      	b.n	8014a86 <intToStr+0x82>
			str[i++] = '0';
 8014a76:	697b      	ldr	r3, [r7, #20]
 8014a78:	1c5a      	adds	r2, r3, #1
 8014a7a:	617a      	str	r2, [r7, #20]
 8014a7c:	461a      	mov	r2, r3
 8014a7e:	68bb      	ldr	r3, [r7, #8]
 8014a80:	4413      	add	r3, r2
 8014a82:	2230      	movs	r2, #48	; 0x30
 8014a84:	701a      	strb	r2, [r3, #0]
		while (i < d)
 8014a86:	697a      	ldr	r2, [r7, #20]
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	429a      	cmp	r2, r3
 8014a8c:	dbf3      	blt.n	8014a76 <intToStr+0x72>
	}

	reverse(str, i);
 8014a8e:	6979      	ldr	r1, [r7, #20]
 8014a90:	68b8      	ldr	r0, [r7, #8]
 8014a92:	f7ff ff87 	bl	80149a4 <reverse>
	str[i] = '\0';
 8014a96:	697b      	ldr	r3, [r7, #20]
 8014a98:	68ba      	ldr	r2, [r7, #8]
 8014a9a:	4413      	add	r3, r2
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	701a      	strb	r2, [r3, #0]

    return i;
 8014aa0:	697b      	ldr	r3, [r7, #20]
}
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	3718      	adds	r7, #24
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd80      	pop	{r7, pc}
 8014aaa:	bf00      	nop
 8014aac:	66666667 	.word	0x66666667

08014ab0 <dtoa_decimalPart>:
}


// Converts a decimal part of a double number to a string.
int dtoa_decimalPart(double n, char* res, int afterpoint, uint8_t pointEnable)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b08a      	sub	sp, #40	; 0x28
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	ed87 0b04 	vstr	d0, [r7, #16]
 8014aba:	60f8      	str	r0, [r7, #12]
 8014abc:	60b9      	str	r1, [r7, #8]
 8014abe:	4613      	mov	r3, r2
 8014ac0:	71fb      	strb	r3, [r7, #7]
    // Extract integer part
    int ipart = (int)n;
 8014ac2:	ed97 7b04 	vldr	d7, [r7, #16]
 8014ac6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014aca:	ee17 3a90 	vmov	r3, s15
 8014ace:	623b      	str	r3, [r7, #32]

    // Extract floating part
    double fpart = n - (double)ipart;
 8014ad0:	6a3b      	ldr	r3, [r7, #32]
 8014ad2:	ee07 3a90 	vmov	s15, r3
 8014ad6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014ada:	ed97 6b04 	vldr	d6, [r7, #16]
 8014ade:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014ae2:	ed87 7b06 	vstr	d7, [r7, #24]

    fpart = fpart * pow(10, afterpoint);
 8014ae6:	68bb      	ldr	r3, [r7, #8]
 8014ae8:	ee07 3a90 	vmov	s15, r3
 8014aec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014af0:	eeb0 1b47 	vmov.f64	d1, d7
 8014af4:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8014af8:	f00d f8f2 	bl	8021ce0 <pow>
 8014afc:	eeb0 6b40 	vmov.f64	d6, d0
 8014b00:	ed97 7b06 	vldr	d7, [r7, #24]
 8014b04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014b08:	ed87 7b06 	vstr	d7, [r7, #24]

    int sizeOfString = 0;
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	627b      	str	r3, [r7, #36]	; 0x24

    if(pointEnable)
 8014b10:	79fb      	ldrb	r3, [r7, #7]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d013      	beq.n	8014b3e <dtoa_decimalPart+0x8e>
    {
    	res[0] = '.';
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	222e      	movs	r2, #46	; 0x2e
 8014b1a:	701a      	strb	r2, [r3, #0]
    	sizeOfString += intToStr((int)fpart, res + 1, afterpoint);
 8014b1c:	ed97 7b06 	vldr	d7, [r7, #24]
 8014b20:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	3301      	adds	r3, #1
 8014b28:	68ba      	ldr	r2, [r7, #8]
 8014b2a:	4619      	mov	r1, r3
 8014b2c:	ee17 0a90 	vmov	r0, s15
 8014b30:	f7ff ff68 	bl	8014a04 <intToStr>
 8014b34:	4602      	mov	r2, r0
 8014b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b38:	4413      	add	r3, r2
 8014b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8014b3c:	e00d      	b.n	8014b5a <dtoa_decimalPart+0xaa>
    }
    else
    	sizeOfString += intToStr((int)fpart, res, afterpoint);
 8014b3e:	ed97 7b06 	vldr	d7, [r7, #24]
 8014b42:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014b46:	68ba      	ldr	r2, [r7, #8]
 8014b48:	68f9      	ldr	r1, [r7, #12]
 8014b4a:	ee17 0a90 	vmov	r0, s15
 8014b4e:	f7ff ff59 	bl	8014a04 <intToStr>
 8014b52:	4602      	mov	r2, r0
 8014b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b56:	4413      	add	r3, r2
 8014b58:	627b      	str	r3, [r7, #36]	; 0x24

    return sizeOfString;
 8014b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	3728      	adds	r7, #40	; 0x28
 8014b60:	46bd      	mov	sp, r7
 8014b62:	bd80      	pop	{r7, pc}

08014b64 <dtoa_sign>:


// Converts a double number to a string with or without sign.
int dtoa_sign(double n, char* ret, int afterpoint, uint8_t signEnable)
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b09c      	sub	sp, #112	; 0x70
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	ed87 0b04 	vstr	d0, [r7, #16]
 8014b6e:	60f8      	str	r0, [r7, #12]
 8014b70:	60b9      	str	r1, [r7, #8]
 8014b72:	4613      	mov	r3, r2
 8014b74:	71fb      	strb	r3, [r7, #7]
	uint8_t sign = 0;
 8014b76:	2300      	movs	r3, #0
 8014b78:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	// Calculate sign of n
	if(signEnable != SIGN_DISABLED || n == 0)
 8014b7c:	79fb      	ldrb	r3, [r7, #7]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d106      	bne.n	8014b90 <dtoa_sign+0x2c>
 8014b82:	ed97 7b04 	vldr	d7, [r7, #16]
 8014b86:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b8e:	d10d      	bne.n	8014bac <dtoa_sign+0x48>
	{
		if (n > 0)
 8014b90:	ed97 7b04 	vldr	d7, [r7, #16]
 8014b94:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b9c:	dd03      	ble.n	8014ba6 <dtoa_sign+0x42>
			sign = 1;
 8014b9e:	2301      	movs	r3, #1
 8014ba0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8014ba4:	e002      	b.n	8014bac <dtoa_sign+0x48>
		else
			sign = 2;
 8014ba6:	2302      	movs	r3, #2
 8014ba8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	// Turn n to positive if negative
	if(n < 0)
 8014bac:	ed97 7b04 	vldr	d7, [r7, #16]
 8014bb0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bb8:	d505      	bpl.n	8014bc6 <dtoa_sign+0x62>
		n *= -1;
 8014bba:	ed97 7b04 	vldr	d7, [r7, #16]
 8014bbe:	eeb1 7b47 	vneg.f64	d7, d7
 8014bc2:	ed87 7b04 	vstr	d7, [r7, #16]

    // Extract integer part
    int ipart = (int)n;
 8014bc6:	ed97 7b04 	vldr	d7, [r7, #16]
 8014bca:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014bce:	ee17 3a90 	vmov	r3, s15
 8014bd2:	657b      	str	r3, [r7, #84]	; 0x54

    // Extract floating part
    double fpart = n - (double)ipart;
 8014bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bd6:	ee07 3a90 	vmov	s15, r3
 8014bda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014bde:	ed97 6b04 	vldr	d6, [r7, #16]
 8014be2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014be6:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60

    if(fpart < 0) fpart = 0;
 8014bea:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8014bee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bf6:	d505      	bpl.n	8014c04 <dtoa_sign+0xa0>
 8014bf8:	f04f 0200 	mov.w	r2, #0
 8014bfc:	f04f 0300 	mov.w	r3, #0
 8014c00:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

    char res[51];

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8014c04:	f107 031c 	add.w	r3, r7, #28
 8014c08:	2200      	movs	r2, #0
 8014c0a:	4619      	mov	r1, r3
 8014c0c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014c0e:	f7ff fef9 	bl	8014a04 <intToStr>
 8014c12:	6538      	str	r0, [r7, #80]	; 0x50

    int sizeOfString = i;
 8014c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c16:	65fb      	str	r3, [r7, #92]	; 0x5c

    // check for display option after point
    if (afterpoint != 0) {
 8014c18:	68bb      	ldr	r3, [r7, #8]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d02b      	beq.n	8014c76 <dtoa_sign+0x112>
        res[i] = '.'; // add dot
 8014c1e:	f107 021c 	add.w	r2, r7, #28
 8014c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c24:	4413      	add	r3, r2
 8014c26:	222e      	movs	r2, #46	; 0x2e
 8014c28:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8014c2a:	68bb      	ldr	r3, [r7, #8]
 8014c2c:	ee07 3a90 	vmov	s15, r3
 8014c30:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014c34:	eeb0 1b47 	vmov.f64	d1, d7
 8014c38:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8014c3c:	f00d f850 	bl	8021ce0 <pow>
 8014c40:	eeb0 6b40 	vmov.f64	d6, d0
 8014c44:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8014c48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014c4c:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60

        sizeOfString += intToStr((int)fpart, res + i + 1, afterpoint);
 8014c50:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8014c54:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c5a:	3301      	adds	r3, #1
 8014c5c:	f107 021c 	add.w	r2, r7, #28
 8014c60:	4413      	add	r3, r2
 8014c62:	68ba      	ldr	r2, [r7, #8]
 8014c64:	4619      	mov	r1, r3
 8014c66:	ee17 0a90 	vmov	r0, s15
 8014c6a:	f7ff fecb 	bl	8014a04 <intToStr>
 8014c6e:	4602      	mov	r2, r0
 8014c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c72:	4413      	add	r3, r2
 8014c74:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if(sign != 0 && n != 0)
 8014c76:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d032      	beq.n	8014ce4 <dtoa_sign+0x180>
 8014c7e:	ed97 7b04 	vldr	d7, [r7, #16]
 8014c82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c8a:	d02b      	beq.n	8014ce4 <dtoa_sign+0x180>
    {
    	char c = ' ';
 8014c8c:	2320      	movs	r3, #32
 8014c8e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

    	if(sign == 1)
 8014c92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014c96:	2b01      	cmp	r3, #1
 8014c98:	d10a      	bne.n	8014cb0 <dtoa_sign+0x14c>
    	{
    		if(signEnable == SIGN_ENABLED)
 8014c9a:	79fb      	ldrb	r3, [r7, #7]
 8014c9c:	2b01      	cmp	r3, #1
 8014c9e:	d103      	bne.n	8014ca8 <dtoa_sign+0x144>
    			c = '+';
 8014ca0:	232b      	movs	r3, #43	; 0x2b
 8014ca2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8014ca6:	e00d      	b.n	8014cc4 <dtoa_sign+0x160>
    		else
    			c = '-';
 8014ca8:	232d      	movs	r3, #45	; 0x2d
 8014caa:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8014cae:	e009      	b.n	8014cc4 <dtoa_sign+0x160>
    	}
    	else
    	{
    		if(signEnable == SIGN_ENABLED)
 8014cb0:	79fb      	ldrb	r3, [r7, #7]
 8014cb2:	2b01      	cmp	r3, #1
 8014cb4:	d103      	bne.n	8014cbe <dtoa_sign+0x15a>
				c = '-';
 8014cb6:	232d      	movs	r3, #45	; 0x2d
 8014cb8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8014cbc:	e002      	b.n	8014cc4 <dtoa_sign+0x160>
			else
				c = '+';
 8014cbe:	232b      	movs	r3, #43	; 0x2b
 8014cc0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    	}

    	ret[0] = c;
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8014cca:	701a      	strb	r2, [r3, #0]
    	strcpy(ret+1, res);
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	3301      	adds	r3, #1
 8014cd0:	f107 021c 	add.w	r2, r7, #28
 8014cd4:	4611      	mov	r1, r2
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	f00c ffc4 	bl	8021c64 <strcpy>

    	sizeOfString++;
 8014cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014cde:	3301      	adds	r3, #1
 8014ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
    {
 8014ce2:	e005      	b.n	8014cf0 <dtoa_sign+0x18c>
    }
    else
    	strcpy(ret, res);
 8014ce4:	f107 031c 	add.w	r3, r7, #28
 8014ce8:	4619      	mov	r1, r3
 8014cea:	68f8      	ldr	r0, [r7, #12]
 8014cec:	f00c ffba 	bl	8021c64 <strcpy>


    return sizeOfString;
 8014cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	3770      	adds	r7, #112	; 0x70
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}
	...

08014cfc <GPIO_AdvancedRead>:
	return GPIO_ToAnalize->state;
}


uint8_t GPIO_AdvancedRead(GPIO_EdgeTypeDef* GPIO_ToAnalize)
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b082      	sub	sp, #8
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
	GPIO_ToAnalize->liveRead = HAL_GPIO_ReadPin(GPIO_ToAnalize->GPIOx, GPIO_ToAnalize->GPIO_Pin);
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	681a      	ldr	r2, [r3, #0]
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	889b      	ldrh	r3, [r3, #4]
 8014d0c:	4619      	mov	r1, r3
 8014d0e:	4610      	mov	r0, r2
 8014d10:	f7fd fd8a 	bl	8012828 <HAL_GPIO_ReadPin>
 8014d14:	4603      	mov	r3, r0
 8014d16:	461a      	mov	r2, r3
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	73da      	strb	r2, [r3, #15]

	if(millis >= GPIO_ToAnalize->millis + GPIO_ToAnalize->delay)
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	689b      	ldr	r3, [r3, #8]
 8014d20:	687a      	ldr	r2, [r7, #4]
 8014d22:	8992      	ldrh	r2, [r2, #12]
 8014d24:	441a      	add	r2, r3
 8014d26:	4b26      	ldr	r3, [pc, #152]	; (8014dc0 <GPIO_AdvancedRead+0xc4>)
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	429a      	cmp	r2, r3
 8014d2c:	d842      	bhi.n	8014db4 <GPIO_AdvancedRead+0xb8>
	{
		GPIO_ToAnalize->last = HAL_GPIO_ReadPin(GPIO_ToAnalize->GPIOx, GPIO_ToAnalize->GPIO_Pin);
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	681a      	ldr	r2, [r3, #0]
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	889b      	ldrh	r3, [r3, #4]
 8014d36:	4619      	mov	r1, r3
 8014d38:	4610      	mov	r0, r2
 8014d3a:	f7fd fd75 	bl	8012828 <HAL_GPIO_ReadPin>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	461a      	mov	r2, r3
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	719a      	strb	r2, [r3, #6]

		if(GPIO_ToAnalize->old == 0 && GPIO_ToAnalize->last == 1)
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	79db      	ldrb	r3, [r3, #7]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d107      	bne.n	8014d5e <GPIO_AdvancedRead+0x62>
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	799b      	ldrb	r3, [r3, #6]
 8014d52:	2b01      	cmp	r3, #1
 8014d54:	d103      	bne.n	8014d5e <GPIO_AdvancedRead+0x62>
			GPIO_ToAnalize->state = GPIO_RISE;
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	2203      	movs	r2, #3
 8014d5a:	739a      	strb	r2, [r3, #14]
 8014d5c:	e022      	b.n	8014da4 <GPIO_AdvancedRead+0xa8>

		else if(GPIO_ToAnalize->old == 1 && GPIO_ToAnalize->last == 0)
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	79db      	ldrb	r3, [r3, #7]
 8014d62:	2b01      	cmp	r3, #1
 8014d64:	d107      	bne.n	8014d76 <GPIO_AdvancedRead+0x7a>
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	799b      	ldrb	r3, [r3, #6]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d103      	bne.n	8014d76 <GPIO_AdvancedRead+0x7a>
			GPIO_ToAnalize->state = GPIO_FALL;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	2202      	movs	r2, #2
 8014d72:	739a      	strb	r2, [r3, #14]
 8014d74:	e016      	b.n	8014da4 <GPIO_AdvancedRead+0xa8>

		else if(GPIO_ToAnalize->old == 1 && GPIO_ToAnalize->last == 1)
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	79db      	ldrb	r3, [r3, #7]
 8014d7a:	2b01      	cmp	r3, #1
 8014d7c:	d107      	bne.n	8014d8e <GPIO_AdvancedRead+0x92>
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	799b      	ldrb	r3, [r3, #6]
 8014d82:	2b01      	cmp	r3, #1
 8014d84:	d103      	bne.n	8014d8e <GPIO_AdvancedRead+0x92>
			GPIO_ToAnalize->state = GPIO_HIGH;
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	2201      	movs	r2, #1
 8014d8a:	739a      	strb	r2, [r3, #14]
 8014d8c:	e00a      	b.n	8014da4 <GPIO_AdvancedRead+0xa8>

		else if(GPIO_ToAnalize->old == 0 && GPIO_ToAnalize->last == 0)
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	79db      	ldrb	r3, [r3, #7]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d106      	bne.n	8014da4 <GPIO_AdvancedRead+0xa8>
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	799b      	ldrb	r3, [r3, #6]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d102      	bne.n	8014da4 <GPIO_AdvancedRead+0xa8>
			GPIO_ToAnalize->state = GPIO_LOW;
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	2200      	movs	r2, #0
 8014da2:	739a      	strb	r2, [r3, #14]

		GPIO_ToAnalize->old = GPIO_ToAnalize->last;
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	799a      	ldrb	r2, [r3, #6]
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	71da      	strb	r2, [r3, #7]
		GPIO_ToAnalize->millis = millis;
 8014dac:	4b04      	ldr	r3, [pc, #16]	; (8014dc0 <GPIO_AdvancedRead+0xc4>)
 8014dae:	681a      	ldr	r2, [r3, #0]
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	609a      	str	r2, [r3, #8]
	}

	return GPIO_ToAnalize->state;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	7b9b      	ldrb	r3, [r3, #14]
}
 8014db8:	4618      	mov	r0, r3
 8014dba:	3708      	adds	r7, #8
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	bd80      	pop	{r7, pc}
 8014dc0:	20006a98 	.word	0x20006a98

08014dc4 <GUI_Bar>:
	}
}


void GUI_Bar(GUI_BarTypeDef *bar, float value)
{
 8014dc4:	b590      	push	{r4, r7, lr}
 8014dc6:	b085      	sub	sp, #20
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
 8014dcc:	ed87 0a00 	vstr	s0, [r7]
	uint16_t barValue = 0;
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	81bb      	strh	r3, [r7, #12]

	value = min(value, bar->maxValue);
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	edd3 7a04 	vldr	s15, [r3, #16]
 8014dda:	ed97 7a00 	vldr	s14, [r7]
 8014dde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014de6:	d501      	bpl.n	8014dec <GUI_Bar+0x28>
 8014de8:	683b      	ldr	r3, [r7, #0]
 8014dea:	e001      	b.n	8014df0 <GUI_Bar+0x2c>
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	691b      	ldr	r3, [r3, #16]
 8014df0:	603b      	str	r3, [r7, #0]
	value = max(value, bar->minValue);
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	edd3 7a05 	vldr	s15, [r3, #20]
 8014df8:	ed97 7a00 	vldr	s14, [r7]
 8014dfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e04:	dd01      	ble.n	8014e0a <GUI_Bar+0x46>
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	e001      	b.n	8014e0e <GUI_Bar+0x4a>
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	695b      	ldr	r3, [r3, #20]
 8014e0e:	603b      	str	r3, [r7, #0]

	GUI_SetColor(bar->frameColor);
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	69db      	ldr	r3, [r3, #28]
 8014e14:	4618      	mov	r0, r3
 8014e16:	f007 ff89 	bl	801cd2c <GUI_SetColor>

	for(uint8_t i = 0; i < bar->frameSize; i++)
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	73fb      	strb	r3, [r7, #15]
 8014e1e:	e022      	b.n	8014e66 <GUI_Bar+0xa2>
	{
		GUI_DrawRect(bar->x + i, bar->y - bar->size_y + i, bar->x + bar->size_x - i, bar->y - i);
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e26:	461a      	mov	r2, r3
 8014e28:	7bfb      	ldrb	r3, [r7, #15]
 8014e2a:	18d0      	adds	r0, r2, r3
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014e32:	461a      	mov	r2, r3
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	88db      	ldrh	r3, [r3, #6]
 8014e38:	1ad2      	subs	r2, r2, r3
 8014e3a:	7bfb      	ldrb	r3, [r7, #15]
 8014e3c:	18d1      	adds	r1, r2, r3
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e44:	461a      	mov	r2, r3
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	889b      	ldrh	r3, [r3, #4]
 8014e4a:	441a      	add	r2, r3
 8014e4c:	7bfb      	ldrb	r3, [r7, #15]
 8014e4e:	1ad2      	subs	r2, r2, r3
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014e56:	461c      	mov	r4, r3
 8014e58:	7bfb      	ldrb	r3, [r7, #15]
 8014e5a:	1ae3      	subs	r3, r4, r3
 8014e5c:	f009 fffa 	bl	801ee54 <GUI_DrawRect>
	for(uint8_t i = 0; i < bar->frameSize; i++)
 8014e60:	7bfb      	ldrb	r3, [r7, #15]
 8014e62:	3301      	adds	r3, #1
 8014e64:	73fb      	strb	r3, [r7, #15]
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	7e1b      	ldrb	r3, [r3, #24]
 8014e6a:	7bfa      	ldrb	r2, [r7, #15]
 8014e6c:	429a      	cmp	r2, r3
 8014e6e:	d3d7      	bcc.n	8014e20 <GUI_Bar+0x5c>
	}


	switch(bar->barMode)
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	7a1b      	ldrb	r3, [r3, #8]
 8014e74:	2b03      	cmp	r3, #3
 8014e76:	f200 81dc 	bhi.w	8015232 <GUI_Bar+0x46e>
 8014e7a:	a201      	add	r2, pc, #4	; (adr r2, 8014e80 <GUI_Bar+0xbc>)
 8014e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e80:	08014f79 	.word	0x08014f79
 8014e84:	08014e91 	.word	0x08014e91
 8014e88:	08015061 	.word	0x08015061
 8014e8c:	0801514d 	.word	0x0801514d
	{
		case GUI_BAR_DTU:
			barValue = (uint16_t) map_float(value, bar->minValue, bar->maxValue, 0, (float)bar->size_y);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	edd3 7a05 	vldr	s15, [r3, #20]
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	ed93 7a04 	vldr	s14, [r3, #16]
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	88db      	ldrh	r3, [r3, #6]
 8014ea0:	ee06 3a90 	vmov	s13, r3
 8014ea4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8014ea8:	eeb0 2a66 	vmov.f32	s4, s13
 8014eac:	eddf 1aa6 	vldr	s3, [pc, #664]	; 8015148 <GUI_Bar+0x384>
 8014eb0:	eeb0 1a47 	vmov.f32	s2, s14
 8014eb4:	eef0 0a67 	vmov.f32	s1, s15
 8014eb8:	ed97 0a00 	vldr	s0, [r7]
 8014ebc:	f7ff fd1d 	bl	80148fa <map_float>
 8014ec0:	eef0 7a40 	vmov.f32	s15, s0
 8014ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014ec8:	ee17 3a90 	vmov	r3, s15
 8014ecc:	81bb      	strh	r3, [r7, #12]

			GUI_SetColor(bar->backgroundColor);
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	f007 ff2a 	bl	801cd2c <GUI_SetColor>
			GUI_FillRect(bar->x + bar->frameSize, bar->y - bar->size_y + bar->frameSize,  bar->x + bar->size_x - bar->frameSize,  bar->y - bar->frameSize - barValue);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ede:	461a      	mov	r2, r3
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	7e1b      	ldrb	r3, [r3, #24]
 8014ee4:	18d0      	adds	r0, r2, r3
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014eec:	461a      	mov	r2, r3
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	88db      	ldrh	r3, [r3, #6]
 8014ef2:	1ad3      	subs	r3, r2, r3
 8014ef4:	687a      	ldr	r2, [r7, #4]
 8014ef6:	7e12      	ldrb	r2, [r2, #24]
 8014ef8:	1899      	adds	r1, r3, r2
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f00:	461a      	mov	r2, r3
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	889b      	ldrh	r3, [r3, #4]
 8014f06:	4413      	add	r3, r2
 8014f08:	687a      	ldr	r2, [r7, #4]
 8014f0a:	7e12      	ldrb	r2, [r2, #24]
 8014f0c:	1a9c      	subs	r4, r3, r2
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014f14:	461a      	mov	r2, r3
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	7e1b      	ldrb	r3, [r3, #24]
 8014f1a:	1ad2      	subs	r2, r2, r3
 8014f1c:	89bb      	ldrh	r3, [r7, #12]
 8014f1e:	1ad3      	subs	r3, r2, r3
 8014f20:	4622      	mov	r2, r4
 8014f22:	f008 f80d 	bl	801cf40 <GUI_FillRect>


			GUI_SetColor(bar->barColor);
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	6a1b      	ldr	r3, [r3, #32]
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f007 fefe 	bl	801cd2c <GUI_SetColor>
			GUI_FillRect(bar->x + bar->frameSize, bar->y + bar->frameSize - barValue, bar->x + bar->size_x - bar->frameSize, bar->y - bar->frameSize);
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f36:	461a      	mov	r2, r3
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	7e1b      	ldrb	r3, [r3, #24]
 8014f3c:	18d0      	adds	r0, r2, r3
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014f44:	461a      	mov	r2, r3
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	7e1b      	ldrb	r3, [r3, #24]
 8014f4a:	441a      	add	r2, r3
 8014f4c:	89bb      	ldrh	r3, [r7, #12]
 8014f4e:	1ad1      	subs	r1, r2, r3
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f56:	461a      	mov	r2, r3
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	889b      	ldrh	r3, [r3, #4]
 8014f5c:	4413      	add	r3, r2
 8014f5e:	687a      	ldr	r2, [r7, #4]
 8014f60:	7e12      	ldrb	r2, [r2, #24]
 8014f62:	1a9a      	subs	r2, r3, r2
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014f6a:	461c      	mov	r4, r3
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	7e1b      	ldrb	r3, [r3, #24]
 8014f70:	1ae3      	subs	r3, r4, r3
 8014f72:	f007 ffe5 	bl	801cf40 <GUI_FillRect>
			break;
 8014f76:	e15c      	b.n	8015232 <GUI_Bar+0x46e>

		case GUI_BAR_UTD:
			barValue = (uint16_t) map_float(value, bar->minValue, bar->maxValue, 0, (float)bar->size_y);
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	edd3 7a05 	vldr	s15, [r3, #20]
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	ed93 7a04 	vldr	s14, [r3, #16]
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	88db      	ldrh	r3, [r3, #6]
 8014f88:	ee06 3a90 	vmov	s13, r3
 8014f8c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8014f90:	eeb0 2a66 	vmov.f32	s4, s13
 8014f94:	eddf 1a6c 	vldr	s3, [pc, #432]	; 8015148 <GUI_Bar+0x384>
 8014f98:	eeb0 1a47 	vmov.f32	s2, s14
 8014f9c:	eef0 0a67 	vmov.f32	s1, s15
 8014fa0:	ed97 0a00 	vldr	s0, [r7]
 8014fa4:	f7ff fca9 	bl	80148fa <map_float>
 8014fa8:	eef0 7a40 	vmov.f32	s15, s0
 8014fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014fb0:	ee17 3a90 	vmov	r3, s15
 8014fb4:	81bb      	strh	r3, [r7, #12]

			GUI_SetColor(bar->backgroundColor);
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fba:	4618      	mov	r0, r3
 8014fbc:	f007 feb6 	bl	801cd2c <GUI_SetColor>
			GUI_FillRect(bar->x + bar->frameSize, bar->y + bar->frameSize - barValue, bar->x + bar->size_x - bar->frameSize, bar->y - bar->frameSize);
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014fc6:	461a      	mov	r2, r3
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	7e1b      	ldrb	r3, [r3, #24]
 8014fcc:	18d0      	adds	r0, r2, r3
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014fd4:	461a      	mov	r2, r3
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	7e1b      	ldrb	r3, [r3, #24]
 8014fda:	441a      	add	r2, r3
 8014fdc:	89bb      	ldrh	r3, [r7, #12]
 8014fde:	1ad1      	subs	r1, r2, r3
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014fe6:	461a      	mov	r2, r3
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	889b      	ldrh	r3, [r3, #4]
 8014fec:	4413      	add	r3, r2
 8014fee:	687a      	ldr	r2, [r7, #4]
 8014ff0:	7e12      	ldrb	r2, [r2, #24]
 8014ff2:	1a9a      	subs	r2, r3, r2
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014ffa:	461c      	mov	r4, r3
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	7e1b      	ldrb	r3, [r3, #24]
 8015000:	1ae3      	subs	r3, r4, r3
 8015002:	f007 ff9d 	bl	801cf40 <GUI_FillRect>

			GUI_SetColor(bar->barColor);
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	6a1b      	ldr	r3, [r3, #32]
 801500a:	4618      	mov	r0, r3
 801500c:	f007 fe8e 	bl	801cd2c <GUI_SetColor>
			GUI_FillRect(bar->x + bar->frameSize, bar->y - bar->size_y + bar->frameSize,  bar->x + bar->size_x - bar->frameSize,  bar->y - bar->frameSize - barValue);
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015016:	461a      	mov	r2, r3
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	7e1b      	ldrb	r3, [r3, #24]
 801501c:	18d0      	adds	r0, r2, r3
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015024:	461a      	mov	r2, r3
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	88db      	ldrh	r3, [r3, #6]
 801502a:	1ad3      	subs	r3, r2, r3
 801502c:	687a      	ldr	r2, [r7, #4]
 801502e:	7e12      	ldrb	r2, [r2, #24]
 8015030:	1899      	adds	r1, r3, r2
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015038:	461a      	mov	r2, r3
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	889b      	ldrh	r3, [r3, #4]
 801503e:	4413      	add	r3, r2
 8015040:	687a      	ldr	r2, [r7, #4]
 8015042:	7e12      	ldrb	r2, [r2, #24]
 8015044:	1a9c      	subs	r4, r3, r2
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801504c:	461a      	mov	r2, r3
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	7e1b      	ldrb	r3, [r3, #24]
 8015052:	1ad2      	subs	r2, r2, r3
 8015054:	89bb      	ldrh	r3, [r7, #12]
 8015056:	1ad3      	subs	r3, r2, r3
 8015058:	4622      	mov	r2, r4
 801505a:	f007 ff71 	bl	801cf40 <GUI_FillRect>

			break;
 801505e:	e0e8      	b.n	8015232 <GUI_Bar+0x46e>

		case GUI_BAR_LTR:
			barValue = (uint16_t) map_float(value, bar->minValue, bar->maxValue, 0, (float)bar->size_x);
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	edd3 7a05 	vldr	s15, [r3, #20]
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	ed93 7a04 	vldr	s14, [r3, #16]
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	889b      	ldrh	r3, [r3, #4]
 8015070:	ee06 3a90 	vmov	s13, r3
 8015074:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8015078:	eeb0 2a66 	vmov.f32	s4, s13
 801507c:	eddf 1a32 	vldr	s3, [pc, #200]	; 8015148 <GUI_Bar+0x384>
 8015080:	eeb0 1a47 	vmov.f32	s2, s14
 8015084:	eef0 0a67 	vmov.f32	s1, s15
 8015088:	ed97 0a00 	vldr	s0, [r7]
 801508c:	f7ff fc35 	bl	80148fa <map_float>
 8015090:	eef0 7a40 	vmov.f32	s15, s0
 8015094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015098:	ee17 3a90 	vmov	r3, s15
 801509c:	81bb      	strh	r3, [r7, #12]

			GUI_SetColor(bar->backgroundColor);
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150a2:	4618      	mov	r0, r3
 80150a4:	f007 fe42 	bl	801cd2c <GUI_SetColor>
			GUI_FillRect(bar->x + barValue + bar->frameSize, bar->y - bar->size_y + bar->frameSize, bar->x + bar->size_x - bar->frameSize, bar->y - bar->frameSize);
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150ae:	461a      	mov	r2, r3
 80150b0:	89bb      	ldrh	r3, [r7, #12]
 80150b2:	4413      	add	r3, r2
 80150b4:	687a      	ldr	r2, [r7, #4]
 80150b6:	7e12      	ldrb	r2, [r2, #24]
 80150b8:	1898      	adds	r0, r3, r2
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80150c0:	461a      	mov	r2, r3
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	88db      	ldrh	r3, [r3, #6]
 80150c6:	1ad3      	subs	r3, r2, r3
 80150c8:	687a      	ldr	r2, [r7, #4]
 80150ca:	7e12      	ldrb	r2, [r2, #24]
 80150cc:	1899      	adds	r1, r3, r2
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150d4:	461a      	mov	r2, r3
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	889b      	ldrh	r3, [r3, #4]
 80150da:	4413      	add	r3, r2
 80150dc:	687a      	ldr	r2, [r7, #4]
 80150de:	7e12      	ldrb	r2, [r2, #24]
 80150e0:	1a9a      	subs	r2, r3, r2
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80150e8:	461c      	mov	r4, r3
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	7e1b      	ldrb	r3, [r3, #24]
 80150ee:	1ae3      	subs	r3, r4, r3
 80150f0:	f007 ff26 	bl	801cf40 <GUI_FillRect>

			GUI_SetColor(bar->barColor);
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	6a1b      	ldr	r3, [r3, #32]
 80150f8:	4618      	mov	r0, r3
 80150fa:	f007 fe17 	bl	801cd2c <GUI_SetColor>
			GUI_FillRect(bar->x + bar->frameSize, bar->y - bar->size_y + bar->frameSize, bar->x + barValue - bar->frameSize, bar->y - bar->frameSize);
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015104:	461a      	mov	r2, r3
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	7e1b      	ldrb	r3, [r3, #24]
 801510a:	18d0      	adds	r0, r2, r3
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015112:	461a      	mov	r2, r3
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	88db      	ldrh	r3, [r3, #6]
 8015118:	1ad3      	subs	r3, r2, r3
 801511a:	687a      	ldr	r2, [r7, #4]
 801511c:	7e12      	ldrb	r2, [r2, #24]
 801511e:	1899      	adds	r1, r3, r2
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015126:	461a      	mov	r2, r3
 8015128:	89bb      	ldrh	r3, [r7, #12]
 801512a:	4413      	add	r3, r2
 801512c:	687a      	ldr	r2, [r7, #4]
 801512e:	7e12      	ldrb	r2, [r2, #24]
 8015130:	1a9a      	subs	r2, r3, r2
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015138:	461c      	mov	r4, r3
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	7e1b      	ldrb	r3, [r3, #24]
 801513e:	1ae3      	subs	r3, r4, r3
 8015140:	f007 fefe 	bl	801cf40 <GUI_FillRect>
			break;
 8015144:	e075      	b.n	8015232 <GUI_Bar+0x46e>
 8015146:	bf00      	nop
 8015148:	00000000 	.word	0x00000000

		case GUI_BAR_RTL:
			barValue = (uint16_t) map_float(value, bar->minValue, bar->maxValue, 0, (float)bar->size_x);
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	edd3 7a05 	vldr	s15, [r3, #20]
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	ed93 7a04 	vldr	s14, [r3, #16]
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	889b      	ldrh	r3, [r3, #4]
 801515c:	ee06 3a90 	vmov	s13, r3
 8015160:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8015164:	eeb0 2a66 	vmov.f32	s4, s13
 8015168:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 8015148 <GUI_Bar+0x384>
 801516c:	eeb0 1a47 	vmov.f32	s2, s14
 8015170:	eef0 0a67 	vmov.f32	s1, s15
 8015174:	ed97 0a00 	vldr	s0, [r7]
 8015178:	f7ff fbbf 	bl	80148fa <map_float>
 801517c:	eef0 7a40 	vmov.f32	s15, s0
 8015180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015184:	ee17 3a90 	vmov	r3, s15
 8015188:	81bb      	strh	r3, [r7, #12]

			GUI_SetColor(bar->backgroundColor);
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801518e:	4618      	mov	r0, r3
 8015190:	f007 fdcc 	bl	801cd2c <GUI_SetColor>
			GUI_FillRect(bar->x + bar->frameSize, bar->y - bar->size_y + bar->frameSize, bar->x + barValue - bar->frameSize, bar->y - bar->frameSize);
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	f9b3 3000 	ldrsh.w	r3, [r3]
 801519a:	461a      	mov	r2, r3
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	7e1b      	ldrb	r3, [r3, #24]
 80151a0:	18d0      	adds	r0, r2, r3
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80151a8:	461a      	mov	r2, r3
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	88db      	ldrh	r3, [r3, #6]
 80151ae:	1ad3      	subs	r3, r2, r3
 80151b0:	687a      	ldr	r2, [r7, #4]
 80151b2:	7e12      	ldrb	r2, [r2, #24]
 80151b4:	1899      	adds	r1, r3, r2
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151bc:	461a      	mov	r2, r3
 80151be:	89bb      	ldrh	r3, [r7, #12]
 80151c0:	4413      	add	r3, r2
 80151c2:	687a      	ldr	r2, [r7, #4]
 80151c4:	7e12      	ldrb	r2, [r2, #24]
 80151c6:	1a9a      	subs	r2, r3, r2
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80151ce:	461c      	mov	r4, r3
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	7e1b      	ldrb	r3, [r3, #24]
 80151d4:	1ae3      	subs	r3, r4, r3
 80151d6:	f007 feb3 	bl	801cf40 <GUI_FillRect>

			GUI_SetColor(bar->barColor);
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	6a1b      	ldr	r3, [r3, #32]
 80151de:	4618      	mov	r0, r3
 80151e0:	f007 fda4 	bl	801cd2c <GUI_SetColor>
			GUI_FillRect(bar->x + barValue + bar->frameSize, bar->y - bar->size_y + bar->frameSize, bar->x + bar->size_x - bar->frameSize, bar->y - bar->frameSize);
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151ea:	461a      	mov	r2, r3
 80151ec:	89bb      	ldrh	r3, [r7, #12]
 80151ee:	4413      	add	r3, r2
 80151f0:	687a      	ldr	r2, [r7, #4]
 80151f2:	7e12      	ldrb	r2, [r2, #24]
 80151f4:	1898      	adds	r0, r3, r2
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80151fc:	461a      	mov	r2, r3
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	88db      	ldrh	r3, [r3, #6]
 8015202:	1ad3      	subs	r3, r2, r3
 8015204:	687a      	ldr	r2, [r7, #4]
 8015206:	7e12      	ldrb	r2, [r2, #24]
 8015208:	1899      	adds	r1, r3, r2
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015210:	461a      	mov	r2, r3
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	889b      	ldrh	r3, [r3, #4]
 8015216:	4413      	add	r3, r2
 8015218:	687a      	ldr	r2, [r7, #4]
 801521a:	7e12      	ldrb	r2, [r2, #24]
 801521c:	1a9a      	subs	r2, r3, r2
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015224:	461c      	mov	r4, r3
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	7e1b      	ldrb	r3, [r3, #24]
 801522a:	1ae3      	subs	r3, r4, r3
 801522c:	f007 fe88 	bl	801cf40 <GUI_FillRect>
			break;
 8015230:	bf00      	nop
	}




}
 8015232:	bf00      	nop
 8015234:	3714      	adds	r7, #20
 8015236:	46bd      	mov	sp, r7
 8015238:	bd90      	pop	{r4, r7, pc}
 801523a:	bf00      	nop
 801523c:	0000      	movs	r0, r0
	...

08015240 <GUI_DrawNumAtAuto>:
#define ABSOLUTE_MAX_DIGITS 9
#define ABSOLUTE_MAX_DECIMAL_DIGITS 9
#define maxStringSize 51

void GUI_DrawNumAtAuto(int16_t x, int16_t y, const GUI_FONT *font, uint32_t color, uint32_t backColor, GUI_DrawNumAtTypeDef *data, uint8_t nDecimal, uint8_t signEnable, uint8_t alignment, char *initString, char *endString)
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b098      	sub	sp, #96	; 0x60
 8015244:	af00      	add	r7, sp, #0
 8015246:	60ba      	str	r2, [r7, #8]
 8015248:	607b      	str	r3, [r7, #4]
 801524a:	4603      	mov	r3, r0
 801524c:	81fb      	strh	r3, [r7, #14]
 801524e:	460b      	mov	r3, r1
 8015250:	81bb      	strh	r3, [r7, #12]
	GUI_SetBkColor(backColor);
 8015252:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8015254:	f007 fd68 	bl	801cd28 <GUI_SetBkColor>
	//GUI_SetColor(color);
	GUI_SetFont(font);
 8015258:	68b8      	ldr	r0, [r7, #8]
 801525a:	f007 fd39 	bl	801ccd0 <GUI_SetFont>

	char numToDisplay[41];

	dtoa_sign(data->number, numToDisplay, nDecimal, 0);
 801525e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015260:	ed93 7b00 	vldr	d7, [r3]
 8015264:	f897 1070 	ldrb.w	r1, [r7, #112]	; 0x70
 8015268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801526c:	2200      	movs	r2, #0
 801526e:	4618      	mov	r0, r3
 8015270:	eeb0 0b47 	vmov.f64	d0, d7
 8015274:	f7ff fc76 	bl	8014b64 <dtoa_sign>

	char sign[2] = " ";
 8015278:	2320      	movs	r3, #32
 801527a:	843b      	strh	r3, [r7, #32]
	uint16_t sizeOfSign = 0;
 801527c:	2300      	movs	r3, #0
 801527e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	if(signEnable)
 8015282:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8015286:	2b00      	cmp	r3, #0
 8015288:	d061      	beq.n	801534e <GUI_DrawNumAtAuto+0x10e>
	{
		if(signEnable == SIGN_ENABLED)
 801528a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 801528e:	2b01      	cmp	r3, #1
 8015290:	d117      	bne.n	80152c2 <GUI_DrawNumAtAuto+0x82>
		{
			if(data->number > 0)
 8015292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015294:	ed93 7b00 	vldr	d7, [r3]
 8015298:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801529c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152a0:	dd03      	ble.n	80152aa <GUI_DrawNumAtAuto+0x6a>
				sign[0] = '+';
 80152a2:	232b      	movs	r3, #43	; 0x2b
 80152a4:	f887 3020 	strb.w	r3, [r7, #32]
 80152a8:	e026      	b.n	80152f8 <GUI_DrawNumAtAuto+0xb8>
			else if (data->number < 0)
 80152aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80152ac:	ed93 7b00 	vldr	d7, [r3]
 80152b0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80152b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152b8:	d51e      	bpl.n	80152f8 <GUI_DrawNumAtAuto+0xb8>
				sign[0] = '-';
 80152ba:	232d      	movs	r3, #45	; 0x2d
 80152bc:	f887 3020 	strb.w	r3, [r7, #32]
 80152c0:	e01a      	b.n	80152f8 <GUI_DrawNumAtAuto+0xb8>
		}
		else if(signEnable == SIGN_INVERTED)
 80152c2:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80152c6:	2b02      	cmp	r3, #2
 80152c8:	d116      	bne.n	80152f8 <GUI_DrawNumAtAuto+0xb8>
		{
			if(data->number > 0)
 80152ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80152cc:	ed93 7b00 	vldr	d7, [r3]
 80152d0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80152d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152d8:	dd03      	ble.n	80152e2 <GUI_DrawNumAtAuto+0xa2>
				sign[0] = '-';
 80152da:	232d      	movs	r3, #45	; 0x2d
 80152dc:	f887 3020 	strb.w	r3, [r7, #32]
 80152e0:	e00a      	b.n	80152f8 <GUI_DrawNumAtAuto+0xb8>
			else if (data->number < 0)
 80152e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80152e4:	ed93 7b00 	vldr	d7, [r3]
 80152e8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80152ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152f0:	d502      	bpl.n	80152f8 <GUI_DrawNumAtAuto+0xb8>
				sign[0] = '+';
 80152f2:	232b      	movs	r3, #43	; 0x2b
 80152f4:	f887 3020 	strb.w	r3, [r7, #32]
		}

		if(sign[0] != '\0')
 80152f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d026      	beq.n	801534e <GUI_DrawNumAtAuto+0x10e>
		{
			int tmpCharSize = 0;
 8015300:	2300      	movs	r3, #0
 8015302:	61fb      	str	r3, [r7, #28]

			font->pfGetCharDistX('+', &tmpCharSize);
 8015304:	68bb      	ldr	r3, [r7, #8]
 8015306:	685b      	ldr	r3, [r3, #4]
 8015308:	f107 021c 	add.w	r2, r7, #28
 801530c:	4611      	mov	r1, r2
 801530e:	202b      	movs	r0, #43	; 0x2b
 8015310:	4798      	blx	r3
			sizeOfSign += tmpCharSize;
 8015312:	69fb      	ldr	r3, [r7, #28]
 8015314:	b29a      	uxth	r2, r3
 8015316:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801531a:	4413      	add	r3, r2
 801531c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

			if(sign[0] == '+')
 8015320:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015324:	2b2b      	cmp	r3, #43	; 0x2b
 8015326:	d105      	bne.n	8015334 <GUI_DrawNumAtAuto+0xf4>
				sizeOfSign += 2;
 8015328:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801532c:	3302      	adds	r3, #2
 801532e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8015332:	e004      	b.n	801533e <GUI_DrawNumAtAuto+0xfe>
			else
				sizeOfSign -= 3;
 8015334:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8015338:	3b03      	subs	r3, #3
 801533a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

			if(!data->sizeOfSign) data->sizeOfSign = sizeOfSign; //for compatibility with older functions
 801533e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015340:	89db      	ldrh	r3, [r3, #14]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d103      	bne.n	801534e <GUI_DrawNumAtAuto+0x10e>
 8015346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015348:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801534c:	81da      	strh	r2, [r3, #14]
		}
	}

	int8_t signCorrectionY = 0;
 801534e:	2300      	movs	r3, #0
 8015350:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	if(sign[0] == '-')
 8015354:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015358:	2b2d      	cmp	r3, #45	; 0x2d
 801535a:	d102      	bne.n	8015362 <GUI_DrawNumAtAuto+0x122>
		signCorrectionY = 2;
 801535c:	2302      	movs	r3, #2
 801535e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	int16_t X = 0;
 8015362:	2300      	movs	r3, #0
 8015364:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	uint16_t sizeOfString = 0;
 8015368:	2300      	movs	r3, #0
 801536a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	if(numToDisplay[0] != '\0')
 801536e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015372:	2b00      	cmp	r3, #0
 8015374:	d026      	beq.n	80153c4 <GUI_DrawNumAtAuto+0x184>
	{
		int tmpCharSize = 0;
 8015376:	2300      	movs	r3, #0
 8015378:	61bb      	str	r3, [r7, #24]

		for(uint8_t i = 0; numToDisplay[i] != '\0'; i++)
 801537a:	2300      	movs	r3, #0
 801537c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8015380:	e018      	b.n	80153b4 <GUI_DrawNumAtAuto+0x174>
		{
			font->pfGetCharDistX(numToDisplay[i], &tmpCharSize);
 8015382:	68bb      	ldr	r3, [r7, #8]
 8015384:	685b      	ldr	r3, [r3, #4]
 8015386:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 801538a:	3260      	adds	r2, #96	; 0x60
 801538c:	443a      	add	r2, r7
 801538e:	f812 2c3c 	ldrb.w	r2, [r2, #-60]
 8015392:	b292      	uxth	r2, r2
 8015394:	f107 0118 	add.w	r1, r7, #24
 8015398:	4610      	mov	r0, r2
 801539a:	4798      	blx	r3
			sizeOfString += tmpCharSize;
 801539c:	69bb      	ldr	r3, [r7, #24]
 801539e:	b29a      	uxth	r2, r3
 80153a0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80153a4:	4413      	add	r3, r2
 80153a6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		for(uint8_t i = 0; numToDisplay[i] != '\0'; i++)
 80153aa:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80153ae:	3301      	adds	r3, #1
 80153b0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 80153b4:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80153b8:	3360      	adds	r3, #96	; 0x60
 80153ba:	443b      	add	r3, r7
 80153bc:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d1de      	bne.n	8015382 <GUI_DrawNumAtAuto+0x142>
		}
	}

	uint16_t sizeOfInitString = 0;
 80153c4:	2300      	movs	r3, #0
 80153c6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	if(initString[0] != '\0')
 80153ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80153cc:	781b      	ldrb	r3, [r3, #0]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d024      	beq.n	801541c <GUI_DrawNumAtAuto+0x1dc>
	{
		int tmpCharSize = 0;
 80153d2:	2300      	movs	r3, #0
 80153d4:	617b      	str	r3, [r7, #20]

		for(uint8_t i = 0; initString[i] != '\0'; i++)
 80153d6:	2300      	movs	r3, #0
 80153d8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 80153dc:	e017      	b.n	801540e <GUI_DrawNumAtAuto+0x1ce>
		{
			font->pfGetCharDistX(initString[i], &tmpCharSize);
 80153de:	68bb      	ldr	r3, [r7, #8]
 80153e0:	685b      	ldr	r3, [r3, #4]
 80153e2:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80153e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80153e8:	440a      	add	r2, r1
 80153ea:	7812      	ldrb	r2, [r2, #0]
 80153ec:	b292      	uxth	r2, r2
 80153ee:	f107 0114 	add.w	r1, r7, #20
 80153f2:	4610      	mov	r0, r2
 80153f4:	4798      	blx	r3
			sizeOfInitString += tmpCharSize;
 80153f6:	697b      	ldr	r3, [r7, #20]
 80153f8:	b29a      	uxth	r2, r3
 80153fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80153fe:	4413      	add	r3, r2
 8015400:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		for(uint8_t i = 0; initString[i] != '\0'; i++)
 8015404:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8015408:	3301      	adds	r3, #1
 801540a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 801540e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8015412:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015414:	4413      	add	r3, r2
 8015416:	781b      	ldrb	r3, [r3, #0]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d1e0      	bne.n	80153de <GUI_DrawNumAtAuto+0x19e>
		}
	}

	uint16_t sizeOfEndString = 0;
 801541c:	2300      	movs	r3, #0
 801541e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	if(endString[0] != '\0')
 8015422:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015426:	781b      	ldrb	r3, [r3, #0]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d026      	beq.n	801547a <GUI_DrawNumAtAuto+0x23a>
	{
		int tmpCharSize = 0;
 801542c:	2300      	movs	r3, #0
 801542e:	613b      	str	r3, [r7, #16]

		for(uint8_t i = 0; endString[i] != '\0'; i++)
 8015430:	2300      	movs	r3, #0
 8015432:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8015436:	e018      	b.n	801546a <GUI_DrawNumAtAuto+0x22a>
		{
			font->pfGetCharDistX(endString[i], &tmpCharSize);
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	685b      	ldr	r3, [r3, #4]
 801543c:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8015440:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8015444:	440a      	add	r2, r1
 8015446:	7812      	ldrb	r2, [r2, #0]
 8015448:	b292      	uxth	r2, r2
 801544a:	f107 0110 	add.w	r1, r7, #16
 801544e:	4610      	mov	r0, r2
 8015450:	4798      	blx	r3
			sizeOfEndString += tmpCharSize;
 8015452:	693b      	ldr	r3, [r7, #16]
 8015454:	b29a      	uxth	r2, r3
 8015456:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801545a:	4413      	add	r3, r2
 801545c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		for(uint8_t i = 0; endString[i] != '\0'; i++)
 8015460:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8015464:	3301      	adds	r3, #1
 8015466:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 801546a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 801546e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015472:	4413      	add	r3, r2
 8015474:	781b      	ldrb	r3, [r3, #0]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d1de      	bne.n	8015438 <GUI_DrawNumAtAuto+0x1f8>
		}
	}

	if(alignment == POINT) alignment = CENTER;
 801547a:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 801547e:	2b03      	cmp	r3, #3
 8015480:	d102      	bne.n	8015488 <GUI_DrawNumAtAuto+0x248>
 8015482:	2302      	movs	r3, #2
 8015484:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

	switch(alignment)
 8015488:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 801548c:	2b01      	cmp	r3, #1
 801548e:	d003      	beq.n	8015498 <GUI_DrawNumAtAuto+0x258>
 8015490:	2b02      	cmp	r3, #2
 8015492:	f000 80b4 	beq.w	80155fe <GUI_DrawNumAtAuto+0x3be>
 8015496:	e16f      	b.n	8015778 <GUI_DrawNumAtAuto+0x538>
	{
		case RIGHT:

			X = x - (sizeOfString + sizeOfInitString + sizeOfEndString + sizeOfSign);
 8015498:	89fa      	ldrh	r2, [r7, #14]
 801549a:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 801549e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80154a2:	440b      	add	r3, r1
 80154a4:	b299      	uxth	r1, r3
 80154a6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80154aa:	440b      	add	r3, r1
 80154ac:	b299      	uxth	r1, r3
 80154ae:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80154b2:	440b      	add	r3, r1
 80154b4:	b29b      	uxth	r3, r3
 80154b6:	1ad3      	subs	r3, r2, r3
 80154b8:	b29b      	uxth	r3, r3
 80154ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			if(sizeOfString + sizeOfInitString + sizeOfEndString + sizeOfSign < data->stringSize + data->sizeOfSign + data->initStringSize + data->endStringSize)
 80154be:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80154c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80154c6:	441a      	add	r2, r3
 80154c8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80154cc:	441a      	add	r2, r3
 80154ce:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80154d2:	441a      	add	r2, r3
 80154d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80154d6:	891b      	ldrh	r3, [r3, #8]
 80154d8:	4619      	mov	r1, r3
 80154da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80154dc:	89db      	ldrh	r3, [r3, #14]
 80154de:	440b      	add	r3, r1
 80154e0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80154e2:	8949      	ldrh	r1, [r1, #10]
 80154e4:	440b      	add	r3, r1
 80154e6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80154e8:	8989      	ldrh	r1, [r1, #12]
 80154ea:	440b      	add	r3, r1
 80154ec:	429a      	cmp	r2, r3
 80154ee:	da47      	bge.n	8015580 <GUI_DrawNumAtAuto+0x340>
			{
				GUI_SetColor(backColor);
 80154f0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80154f2:	f007 fc1b 	bl	801cd2c <GUI_SetColor>
				GUI_FillRect(X, y + font->LHeight*0.3, X + sizeOfString + sizeOfInitString + sizeOfEndString + sizeOfSign, y + font->LHeight + font->LHeight*0.8);
 80154f6:	f9b7 004e 	ldrsh.w	r0, [r7, #78]	; 0x4e
 80154fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80154fe:	ee07 3a90 	vmov	s15, r3
 8015502:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8015506:	68bb      	ldr	r3, [r7, #8]
 8015508:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801550c:	ee07 3a90 	vmov	s15, r3
 8015510:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015514:	ed9f 5b94 	vldr	d5, [pc, #592]	; 8015768 <GUI_DrawNumAtAuto+0x528>
 8015518:	ee27 7b05 	vmul.f64	d7, d7, d5
 801551c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8015520:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 8015524:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015528:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801552c:	441a      	add	r2, r3
 801552e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8015532:	441a      	add	r2, r3
 8015534:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8015538:	441a      	add	r2, r3
 801553a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801553e:	18d1      	adds	r1, r2, r3
 8015540:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015544:	68ba      	ldr	r2, [r7, #8]
 8015546:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 801554a:	4413      	add	r3, r2
 801554c:	ee07 3a90 	vmov	s15, r3
 8015550:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8015554:	68bb      	ldr	r3, [r7, #8]
 8015556:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801555a:	ee07 3a90 	vmov	s15, r3
 801555e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015562:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8015770 <GUI_DrawNumAtAuto+0x530>
 8015566:	ee27 7b05 	vmul.f64	d7, d7, d5
 801556a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801556e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8015572:	ee17 3a90 	vmov	r3, s15
 8015576:	460a      	mov	r2, r1
 8015578:	ee14 1a90 	vmov	r1, s9
 801557c:	f007 fce0 	bl	801cf40 <GUI_FillRect>
			}

			GUI_SetColor(color);
 8015580:	6878      	ldr	r0, [r7, #4]
 8015582:	f007 fbd3 	bl	801cd2c <GUI_SetColor>
			GUI_DispStringAt(initString, X, y);
 8015586:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801558a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801558e:	4619      	mov	r1, r3
 8015590:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8015592:	f008 faa9 	bl	801dae8 <GUI_DispStringAt>
			GUI_DispStringAt(sign, X + sizeOfInitString + sizeOfSign, y - signCorrectionY);
 8015596:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 801559a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801559e:	441a      	add	r2, r3
 80155a0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80155a4:	18d1      	adds	r1, r2, r3
 80155a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80155aa:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 80155ae:	1ad2      	subs	r2, r2, r3
 80155b0:	f107 0320 	add.w	r3, r7, #32
 80155b4:	4618      	mov	r0, r3
 80155b6:	f008 fa97 	bl	801dae8 <GUI_DispStringAt>
			GUI_DispStringAt(numToDisplay, X + sizeOfInitString + sizeOfSign, y);
 80155ba:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80155be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80155c2:	441a      	add	r2, r3
 80155c4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80155c8:	18d1      	adds	r1, r2, r3
 80155ca:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80155ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80155d2:	4618      	mov	r0, r3
 80155d4:	f008 fa88 	bl	801dae8 <GUI_DispStringAt>
			GUI_DispStringAt(numToDisplay, X + sizeOfInitString + sizeOfSign + sizeOfEndString, y);
 80155d8:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80155dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80155e0:	441a      	add	r2, r3
 80155e2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80155e6:	441a      	add	r2, r3
 80155e8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80155ec:	18d1      	adds	r1, r2, r3
 80155ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80155f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80155f6:	4618      	mov	r0, r3
 80155f8:	f008 fa76 	bl	801dae8 <GUI_DispStringAt>

			break;
 80155fc:	e159      	b.n	80158b2 <GUI_DrawNumAtAuto+0x672>

		case CENTER:

			X = x - (sizeOfString + sizeOfInitString + sizeOfEndString + sizeOfSign)/2;
 80155fe:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8015602:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8015606:	441a      	add	r2, r3
 8015608:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801560c:	441a      	add	r2, r3
 801560e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8015612:	4413      	add	r3, r2
 8015614:	2b00      	cmp	r3, #0
 8015616:	da00      	bge.n	801561a <GUI_DrawNumAtAuto+0x3da>
 8015618:	3301      	adds	r3, #1
 801561a:	105b      	asrs	r3, r3, #1
 801561c:	425b      	negs	r3, r3
 801561e:	b29a      	uxth	r2, r3
 8015620:	89fb      	ldrh	r3, [r7, #14]
 8015622:	4413      	add	r3, r2
 8015624:	b29b      	uxth	r3, r3
 8015626:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			if(sizeOfString + sizeOfSign + sizeOfInitString + sizeOfEndString < data->stringSize + data->sizeOfSign + data->initStringSize + data->endStringSize)
 801562a:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801562e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8015632:	441a      	add	r2, r3
 8015634:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8015638:	441a      	add	r2, r3
 801563a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801563e:	441a      	add	r2, r3
 8015640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015642:	891b      	ldrh	r3, [r3, #8]
 8015644:	4619      	mov	r1, r3
 8015646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015648:	89db      	ldrh	r3, [r3, #14]
 801564a:	440b      	add	r3, r1
 801564c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801564e:	8949      	ldrh	r1, [r1, #10]
 8015650:	440b      	add	r3, r1
 8015652:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015654:	8989      	ldrh	r1, [r1, #12]
 8015656:	440b      	add	r3, r1
 8015658:	429a      	cmp	r2, r3
 801565a:	da47      	bge.n	80156ec <GUI_DrawNumAtAuto+0x4ac>
			{
				GUI_SetColor(backColor);
 801565c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801565e:	f007 fb65 	bl	801cd2c <GUI_SetColor>
				GUI_FillRect(X, y + font->LHeight*0.3, X + sizeOfString + sizeOfSign + sizeOfInitString + sizeOfEndString, y + font->LHeight + font->LHeight*0.8);
 8015662:	f9b7 004e 	ldrsh.w	r0, [r7, #78]	; 0x4e
 8015666:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801566a:	ee07 3a90 	vmov	s15, r3
 801566e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8015672:	68bb      	ldr	r3, [r7, #8]
 8015674:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8015678:	ee07 3a90 	vmov	s15, r3
 801567c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015680:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8015768 <GUI_DrawNumAtAuto+0x528>
 8015684:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015688:	ee36 7b07 	vadd.f64	d7, d6, d7
 801568c:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 8015690:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015694:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8015698:	441a      	add	r2, r3
 801569a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801569e:	441a      	add	r2, r3
 80156a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80156a4:	441a      	add	r2, r3
 80156a6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80156aa:	18d1      	adds	r1, r2, r3
 80156ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80156b0:	68ba      	ldr	r2, [r7, #8]
 80156b2:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80156b6:	4413      	add	r3, r2
 80156b8:	ee07 3a90 	vmov	s15, r3
 80156bc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80156c6:	ee07 3a90 	vmov	s15, r3
 80156ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80156ce:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8015770 <GUI_DrawNumAtAuto+0x530>
 80156d2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80156d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80156da:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80156de:	ee17 3a90 	vmov	r3, s15
 80156e2:	460a      	mov	r2, r1
 80156e4:	ee14 1a90 	vmov	r1, s9
 80156e8:	f007 fc2a 	bl	801cf40 <GUI_FillRect>
			}

			GUI_SetColor(color);
 80156ec:	6878      	ldr	r0, [r7, #4]
 80156ee:	f007 fb1d 	bl	801cd2c <GUI_SetColor>
			GUI_DispStringAt(initString, X, y);
 80156f2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80156f6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80156fa:	4619      	mov	r1, r3
 80156fc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80156fe:	f008 f9f3 	bl	801dae8 <GUI_DispStringAt>
			GUI_DispStringAt(sign, X + sizeOfInitString, y - signCorrectionY);
 8015702:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015706:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801570a:	18d1      	adds	r1, r2, r3
 801570c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8015710:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 8015714:	1ad2      	subs	r2, r2, r3
 8015716:	f107 0320 	add.w	r3, r7, #32
 801571a:	4618      	mov	r0, r3
 801571c:	f008 f9e4 	bl	801dae8 <GUI_DispStringAt>
			GUI_DispStringAt(numToDisplay, X + sizeOfInitString + sizeOfSign, y);
 8015720:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015724:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8015728:	441a      	add	r2, r3
 801572a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801572e:	18d1      	adds	r1, r2, r3
 8015730:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8015734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015738:	4618      	mov	r0, r3
 801573a:	f008 f9d5 	bl	801dae8 <GUI_DispStringAt>
			GUI_DispStringAt(numToDisplay, X + sizeOfInitString + sizeOfSign + sizeOfEndString, y);
 801573e:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015742:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8015746:	441a      	add	r2, r3
 8015748:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801574c:	441a      	add	r2, r3
 801574e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8015752:	18d1      	adds	r1, r2, r3
 8015754:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8015758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801575c:	4618      	mov	r0, r3
 801575e:	f008 f9c3 	bl	801dae8 <GUI_DispStringAt>

			break;
 8015762:	e0a6      	b.n	80158b2 <GUI_DrawNumAtAuto+0x672>
 8015764:	f3af 8000 	nop.w
 8015768:	33333333 	.word	0x33333333
 801576c:	3fd33333 	.word	0x3fd33333
 8015770:	9999999a 	.word	0x9999999a
 8015774:	3fe99999 	.word	0x3fe99999

		case LEFT:
		default:

			if(sizeOfString + sizeOfSign + sizeOfInitString + sizeOfEndString < data->stringSize + data->sizeOfSign + data->initStringSize + data->endStringSize)
 8015778:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801577c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8015780:	441a      	add	r2, r3
 8015782:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8015786:	441a      	add	r2, r3
 8015788:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801578c:	441a      	add	r2, r3
 801578e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015790:	891b      	ldrh	r3, [r3, #8]
 8015792:	4619      	mov	r1, r3
 8015794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015796:	89db      	ldrh	r3, [r3, #14]
 8015798:	440b      	add	r3, r1
 801579a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801579c:	8949      	ldrh	r1, [r1, #10]
 801579e:	440b      	add	r3, r1
 80157a0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80157a2:	8989      	ldrh	r1, [r1, #12]
 80157a4:	440b      	add	r3, r1
 80157a6:	429a      	cmp	r2, r3
 80157a8:	da47      	bge.n	801583a <GUI_DrawNumAtAuto+0x5fa>
			{
				GUI_SetColor(backColor);
 80157aa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80157ac:	f007 fabe 	bl	801cd2c <GUI_SetColor>
				GUI_FillRect(x, y + font->LHeight*0.3, x + sizeOfString + sizeOfSign + sizeOfInitString + sizeOfEndString, y + font->LHeight + font->LHeight*0.8);
 80157b0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80157b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80157b8:	ee07 3a90 	vmov	s15, r3
 80157bc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80157c6:	ee07 3a90 	vmov	s15, r3
 80157ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80157ce:	ed1f 5b1a 	vldr	d5, [pc, #-104]	; 8015768 <GUI_DrawNumAtAuto+0x528>
 80157d2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80157d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80157da:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 80157de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80157e2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80157e6:	441a      	add	r2, r3
 80157e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80157ec:	441a      	add	r2, r3
 80157ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80157f2:	441a      	add	r2, r3
 80157f4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80157f8:	18d1      	adds	r1, r2, r3
 80157fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80157fe:	68ba      	ldr	r2, [r7, #8]
 8015800:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8015804:	4413      	add	r3, r2
 8015806:	ee07 3a90 	vmov	s15, r3
 801580a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801580e:	68bb      	ldr	r3, [r7, #8]
 8015810:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8015814:	ee07 3a90 	vmov	s15, r3
 8015818:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801581c:	ed1f 5b2c 	vldr	d5, [pc, #-176]	; 8015770 <GUI_DrawNumAtAuto+0x530>
 8015820:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015824:	ee36 7b07 	vadd.f64	d7, d6, d7
 8015828:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801582c:	ee17 3a90 	vmov	r3, s15
 8015830:	460a      	mov	r2, r1
 8015832:	ee14 1a90 	vmov	r1, s9
 8015836:	f007 fb83 	bl	801cf40 <GUI_FillRect>
			}

			GUI_SetColor(color);
 801583a:	6878      	ldr	r0, [r7, #4]
 801583c:	f007 fa76 	bl	801cd2c <GUI_SetColor>
			GUI_DispStringAt(initString, x, y);
 8015840:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015844:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8015848:	4619      	mov	r1, r3
 801584a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801584c:	f008 f94c 	bl	801dae8 <GUI_DispStringAt>
			GUI_DispStringAt(sign, x + sizeOfInitString, y - signCorrectionY);
 8015850:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8015854:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8015858:	18d1      	adds	r1, r2, r3
 801585a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801585e:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 8015862:	1ad2      	subs	r2, r2, r3
 8015864:	f107 0320 	add.w	r3, r7, #32
 8015868:	4618      	mov	r0, r3
 801586a:	f008 f93d 	bl	801dae8 <GUI_DispStringAt>
			GUI_DispStringAt(numToDisplay, x + sizeOfInitString + sizeOfSign, y);
 801586e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8015872:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8015876:	441a      	add	r2, r3
 8015878:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801587c:	18d1      	adds	r1, r2, r3
 801587e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8015882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015886:	4618      	mov	r0, r3
 8015888:	f008 f92e 	bl	801dae8 <GUI_DispStringAt>
			GUI_DispStringAt(numToDisplay, x + sizeOfInitString + sizeOfSign + sizeOfEndString, y);
 801588c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8015890:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8015894:	441a      	add	r2, r3
 8015896:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801589a:	441a      	add	r2, r3
 801589c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80158a0:	18d1      	adds	r1, r2, r3
 80158a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80158a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80158aa:	4618      	mov	r0, r3
 80158ac:	f008 f91c 	bl	801dae8 <GUI_DispStringAt>

			break;
 80158b0:	bf00      	nop
	}

	data->stringSize = sizeOfString;
 80158b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80158b4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80158b8:	811a      	strh	r2, [r3, #8]
	data->initStringSize = sizeOfInitString;
 80158ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80158bc:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80158c0:	815a      	strh	r2, [r3, #10]
	data->endStringSize = sizeOfEndString;
 80158c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80158c4:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80158c8:	819a      	strh	r2, [r3, #12]
	data->sizeOfSign = sizeOfSign;
 80158ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80158cc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80158d0:	81da      	strh	r2, [r3, #14]
	data->sign = sign[0];
 80158d2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80158d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80158d8:	741a      	strb	r2, [r3, #16]
}
 80158da:	bf00      	nop
 80158dc:	3760      	adds	r7, #96	; 0x60
 80158de:	46bd      	mov	sp, r7
 80158e0:	bd80      	pop	{r7, pc}
 80158e2:	bf00      	nop
 80158e4:	0000      	movs	r0, r0
	...

080158e8 <GUI_DrawNumAt>:


void GUI_DrawNumAt(int16_t x, int16_t y, const GUI_FONT *font, uint32_t color, uint32_t backColor, GUI_DrawNumAtTypeDef *data, int8_t nInt, uint8_t nDecimal, uint8_t signEnable, uint8_t showZero, uint8_t alignment, char *initString, char *endString)
{
 80158e8:	b5b0      	push	{r4, r5, r7, lr}
 80158ea:	ed2d 8b02 	vpush	{d8}
 80158ee:	b0bc      	sub	sp, #240	; 0xf0
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	60ba      	str	r2, [r7, #8]
 80158f4:	607b      	str	r3, [r7, #4]
 80158f6:	4603      	mov	r3, r0
 80158f8:	81fb      	strh	r3, [r7, #14]
 80158fa:	460b      	mov	r3, r1
 80158fc:	81bb      	strh	r3, [r7, #12]
	GUI_SetBkColor(backColor);
 80158fe:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8015902:	f007 fa11 	bl	801cd28 <GUI_SetBkColor>
	GUI_SetColor(color);
 8015906:	6878      	ldr	r0, [r7, #4]
 8015908:	f007 fa10 	bl	801cd2c <GUI_SetColor>
	GUI_SetFont(font);
 801590c:	68b8      	ldr	r0, [r7, #8]
 801590e:	f007 f9df 	bl	801ccd0 <GUI_SetFont>

	//if(((nInt < 1 && nInt > -1) || nInt + nDecimal > maxStringSize - 2 || alignment > 3) || data->number > pow(10, nInt-1))
	if(((nInt < 0 && nInt != UNDEFINED_NINT) || nInt + nDecimal > maxStringSize - 2 || alignment > 3) || (nInt > 0 ? (data->number > pow(10, nInt) || data->number < -pow(10, nInt)) : false))
 8015912:	f997 3110 	ldrsb.w	r3, [r7, #272]	; 0x110
 8015916:	2b00      	cmp	r3, #0
 8015918:	da04      	bge.n	8015924 <GUI_DrawNumAt+0x3c>
 801591a:	f997 3110 	ldrsb.w	r3, [r7, #272]	; 0x110
 801591e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015922:	d140      	bne.n	80159a6 <GUI_DrawNumAt+0xbe>
 8015924:	f997 2110 	ldrsb.w	r2, [r7, #272]	; 0x110
 8015928:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 801592c:	4413      	add	r3, r2
 801592e:	2b31      	cmp	r3, #49	; 0x31
 8015930:	dc39      	bgt.n	80159a6 <GUI_DrawNumAt+0xbe>
 8015932:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8015936:	2b03      	cmp	r3, #3
 8015938:	d835      	bhi.n	80159a6 <GUI_DrawNumAt+0xbe>
 801593a:	f997 3110 	ldrsb.w	r3, [r7, #272]	; 0x110
 801593e:	2b00      	cmp	r3, #0
 8015940:	f340 80be 	ble.w	8015ac0 <GUI_DrawNumAt+0x1d8>
 8015944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015948:	ed93 8b00 	vldr	d8, [r3]
 801594c:	f997 3110 	ldrsb.w	r3, [r7, #272]	; 0x110
 8015950:	ee07 3a90 	vmov	s15, r3
 8015954:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015958:	eeb0 1b47 	vmov.f64	d1, d7
 801595c:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8015960:	f00c f9be 	bl	8021ce0 <pow>
 8015964:	eeb0 7b40 	vmov.f64	d7, d0
 8015968:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801596c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015970:	dc19      	bgt.n	80159a6 <GUI_DrawNumAt+0xbe>
 8015972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015976:	ed93 8b00 	vldr	d8, [r3]
 801597a:	f997 3110 	ldrsb.w	r3, [r7, #272]	; 0x110
 801597e:	ee07 3a90 	vmov	s15, r3
 8015982:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015986:	eeb0 1b47 	vmov.f64	d1, d7
 801598a:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 801598e:	f00c f9a7 	bl	8021ce0 <pow>
 8015992:	eeb0 7b40 	vmov.f64	d7, d0
 8015996:	eeb1 7b47 	vneg.f64	d7, d7
 801599a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801599e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159a2:	f140 808d 	bpl.w	8015ac0 <GUI_DrawNumAt+0x1d8>
	{
		int xSize = 0;
 80159a6:	2300      	movs	r3, #0
 80159a8:	633b      	str	r3, [r7, #48]	; 0x30
		font->pfGetCharDistX('0', &xSize);
 80159aa:	68bb      	ldr	r3, [r7, #8]
 80159ac:	685b      	ldr	r3, [r3, #4]
 80159ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80159b2:	4611      	mov	r1, r2
 80159b4:	2030      	movs	r0, #48	; 0x30
 80159b6:	4798      	blx	r3

		char s[21];
		if((nInt < 0 && nInt != UNDEFINED_NINT) || nInt + nDecimal > maxStringSize - 2 || alignment > 3) strcpy(s, "UNCORRECT SETTINGS");
 80159b8:	f997 3110 	ldrsb.w	r3, [r7, #272]	; 0x110
 80159bc:	2b00      	cmp	r3, #0
 80159be:	da04      	bge.n	80159ca <GUI_DrawNumAt+0xe2>
 80159c0:	f997 3110 	ldrsb.w	r3, [r7, #272]	; 0x110
 80159c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159c8:	d10a      	bne.n	80159e0 <GUI_DrawNumAt+0xf8>
 80159ca:	f997 2110 	ldrsb.w	r2, [r7, #272]	; 0x110
 80159ce:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 80159d2:	4413      	add	r3, r2
 80159d4:	2b31      	cmp	r3, #49	; 0x31
 80159d6:	dc03      	bgt.n	80159e0 <GUI_DrawNumAt+0xf8>
 80159d8:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 80159dc:	2b03      	cmp	r3, #3
 80159de:	d90d      	bls.n	80159fc <GUI_DrawNumAt+0x114>
 80159e0:	f107 0318 	add.w	r3, r7, #24
 80159e4:	4ac3      	ldr	r2, [pc, #780]	; (8015cf4 <GUI_DrawNumAt+0x40c>)
 80159e6:	461c      	mov	r4, r3
 80159e8:	4615      	mov	r5, r2
 80159ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80159ee:	682b      	ldr	r3, [r5, #0]
 80159f0:	461a      	mov	r2, r3
 80159f2:	8022      	strh	r2, [r4, #0]
 80159f4:	3402      	adds	r4, #2
 80159f6:	0c1b      	lsrs	r3, r3, #16
 80159f8:	7023      	strb	r3, [r4, #0]
 80159fa:	e007      	b.n	8015a0c <GUI_DrawNumAt+0x124>
		else strcpy(s, "TOO HIGH NUM");
 80159fc:	f107 0318 	add.w	r3, r7, #24
 8015a00:	4abd      	ldr	r2, [pc, #756]	; (8015cf8 <GUI_DrawNumAt+0x410>)
 8015a02:	461c      	mov	r4, r3
 8015a04:	4613      	mov	r3, r2
 8015a06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015a08:	c407      	stmia	r4!, {r0, r1, r2}
 8015a0a:	7023      	strb	r3, [r4, #0]

		switch(alignment)
 8015a0c:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8015a10:	2b02      	cmp	r3, #2
 8015a12:	d027      	beq.n	8015a64 <GUI_DrawNumAt+0x17c>
 8015a14:	2b02      	cmp	r3, #2
 8015a16:	dc3c      	bgt.n	8015a92 <GUI_DrawNumAt+0x1aa>
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d002      	beq.n	8015a22 <GUI_DrawNumAt+0x13a>
 8015a1c:	2b01      	cmp	r3, #1
 8015a1e:	d00b      	beq.n	8015a38 <GUI_DrawNumAt+0x150>
 8015a20:	e037      	b.n	8015a92 <GUI_DrawNumAt+0x1aa>
		{
			case LEFT:
				GUI_DispStringAt(s, x, y);
 8015a22:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8015a26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8015a2a:	f107 0318 	add.w	r3, r7, #24
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f008 f85a 	bl	801dae8 <GUI_DispStringAt>
				break;
 8015a34:	f000 bff1 	b.w	8016a1a <GUI_DrawNumAt+0x1132>

			case RIGHT:
				GUI_DispStringAt(s, x - xSize * strlen(s), y);
 8015a38:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8015a3c:	f107 0318 	add.w	r3, r7, #24
 8015a40:	4618      	mov	r0, r3
 8015a42:	f7ea fbf9 	bl	8000238 <strlen>
 8015a46:	4603      	mov	r3, r0
 8015a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a4a:	fb02 f303 	mul.w	r3, r2, r3
 8015a4e:	1ae3      	subs	r3, r4, r3
 8015a50:	4619      	mov	r1, r3
 8015a52:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8015a56:	f107 0318 	add.w	r3, r7, #24
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	f008 f844 	bl	801dae8 <GUI_DispStringAt>
				break;
 8015a60:	f000 bfdb 	b.w	8016a1a <GUI_DrawNumAt+0x1132>

			case CENTER:
				GUI_DispStringAt(s, x - (xSize * strlen(s) / 2), y);
 8015a64:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8015a68:	f107 0318 	add.w	r3, r7, #24
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7ea fbe3 	bl	8000238 <strlen>
 8015a72:	4603      	mov	r3, r0
 8015a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a76:	fb02 f303 	mul.w	r3, r2, r3
 8015a7a:	085b      	lsrs	r3, r3, #1
 8015a7c:	1ae3      	subs	r3, r4, r3
 8015a7e:	4619      	mov	r1, r3
 8015a80:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8015a84:	f107 0318 	add.w	r3, r7, #24
 8015a88:	4618      	mov	r0, r3
 8015a8a:	f008 f82d 	bl	801dae8 <GUI_DispStringAt>
				break;
 8015a8e:	f000 bfc4 	b.w	8016a1a <GUI_DrawNumAt+0x1132>

			default:
				GUI_DispStringAt(s, x - (xSize * strlen(s) / 2), y);
 8015a92:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8015a96:	f107 0318 	add.w	r3, r7, #24
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f7ea fbcc 	bl	8000238 <strlen>
 8015aa0:	4603      	mov	r3, r0
 8015aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015aa4:	fb02 f303 	mul.w	r3, r2, r3
 8015aa8:	085b      	lsrs	r3, r3, #1
 8015aaa:	1ae3      	subs	r3, r4, r3
 8015aac:	4619      	mov	r1, r3
 8015aae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8015ab2:	f107 0318 	add.w	r3, r7, #24
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	f008 f816 	bl	801dae8 <GUI_DispStringAt>
				break;
 8015abc:	f000 bfad 	b.w	8016a1a <GUI_DrawNumAt+0x1132>
		}

		goto END_OF_FUNCTION;
	}

	int xPointSize = 0;
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	font->pfGetCharDistX('.', &xPointSize);		//funziona sul font correntemente settato (occorre settarlo prima di richiamare questa funzione)
 8015ac6:	68bb      	ldr	r3, [r7, #8]
 8015ac8:	685b      	ldr	r3, [r3, #4]
 8015aca:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8015ace:	4611      	mov	r1, r2
 8015ad0:	202e      	movs	r0, #46	; 0x2e
 8015ad2:	4798      	blx	r3

	int xSize = 0;
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	font->pfGetCharDistX('0', &xSize);			//funziona sul font correntemente settato (occorre settarlo prima di richiamare questa funzione)
 8015ada:	68bb      	ldr	r3, [r7, #8]
 8015adc:	685b      	ldr	r3, [r3, #4]
 8015ade:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8015ae2:	4611      	mov	r1, r2
 8015ae4:	2030      	movs	r0, #48	; 0x30
 8015ae6:	4798      	blx	r3

	char convertedNum[maxStringSize];
	uint8_t sizeOfOldString = data->stringSize;
 8015ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015aec:	891b      	ldrh	r3, [r3, #8]
 8015aee:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		dtoa(data->number, convertedNum, nDecimal);
	else
		dtoa_decimalPart(data->number, convertedNum, nDecimal, true);
*/

	if(nInt > 0 || nInt == UNDEFINED_NINT)
 8015af2:	f997 3110 	ldrsb.w	r3, [r7, #272]	; 0x110
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	dc04      	bgt.n	8015b04 <GUI_DrawNumAt+0x21c>
 8015afa:	f997 3110 	ldrsb.w	r3, [r7, #272]	; 0x110
 8015afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b02:	d10e      	bne.n	8015b22 <GUI_DrawNumAt+0x23a>
		dtoa_sign(data->number, convertedNum, nDecimal, 0);
 8015b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015b08:	ed93 7b00 	vldr	d7, [r3]
 8015b0c:	f897 1114 	ldrb.w	r1, [r7, #276]	; 0x114
 8015b10:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015b14:	2200      	movs	r2, #0
 8015b16:	4618      	mov	r0, r3
 8015b18:	eeb0 0b47 	vmov.f64	d0, d7
 8015b1c:	f7ff f822 	bl	8014b64 <dtoa_sign>
 8015b20:	e00d      	b.n	8015b3e <GUI_DrawNumAt+0x256>
	else
		dtoa_decimalPart(data->number, convertedNum, nDecimal, true);
 8015b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015b26:	ed93 7b00 	vldr	d7, [r3]
 8015b2a:	f897 1114 	ldrb.w	r1, [r7, #276]	; 0x114
 8015b2e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015b32:	2201      	movs	r2, #1
 8015b34:	4618      	mov	r0, r3
 8015b36:	eeb0 0b47 	vmov.f64	d0, d7
 8015b3a:	f7fe ffb9 	bl	8014ab0 <dtoa_decimalPart>

	int16_t X = 0;
 8015b3e:	2300      	movs	r3, #0
 8015b40:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
	uint8_t numOfZero = 0;
 8015b44:	2300      	movs	r3, #0
 8015b46:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed

	char sign[2] = " ";
 8015b4a:	2320      	movs	r3, #32
 8015b4c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

	if(signEnable)
 8015b50:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d04b      	beq.n	8015bf0 <GUI_DrawNumAt+0x308>
	{
		if(signEnable == SIGN_ENABLED)
 8015b58:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8015b5c:	2b01      	cmp	r3, #1
 8015b5e:	d119      	bne.n	8015b94 <GUI_DrawNumAt+0x2ac>
		{
			if(data->number > 0)
 8015b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015b64:	ed93 7b00 	vldr	d7, [r3]
 8015b68:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b70:	dd03      	ble.n	8015b7a <GUI_DrawNumAt+0x292>
				sign[0] = '+';
 8015b72:	232b      	movs	r3, #43	; 0x2b
 8015b74:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
 8015b78:	e03a      	b.n	8015bf0 <GUI_DrawNumAt+0x308>
			else if (data->number < 0)
 8015b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015b7e:	ed93 7b00 	vldr	d7, [r3]
 8015b82:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b8a:	d531      	bpl.n	8015bf0 <GUI_DrawNumAt+0x308>
				sign[0] = '-';
 8015b8c:	232d      	movs	r3, #45	; 0x2d
 8015b8e:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
 8015b92:	e02d      	b.n	8015bf0 <GUI_DrawNumAt+0x308>
		}
		else if(signEnable == SIGN_INVERTED)
 8015b94:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8015b98:	2b02      	cmp	r3, #2
 8015b9a:	d119      	bne.n	8015bd0 <GUI_DrawNumAt+0x2e8>
		{
			if(data->number > 0)
 8015b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015ba0:	ed93 7b00 	vldr	d7, [r3]
 8015ba4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bac:	dd03      	ble.n	8015bb6 <GUI_DrawNumAt+0x2ce>
				sign[0] = '-';
 8015bae:	232d      	movs	r3, #45	; 0x2d
 8015bb0:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
 8015bb4:	e01c      	b.n	8015bf0 <GUI_DrawNumAt+0x308>
			else if (data->number < 0)
 8015bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015bba:	ed93 7b00 	vldr	d7, [r3]
 8015bbe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bc6:	d513      	bpl.n	8015bf0 <GUI_DrawNumAt+0x308>
				sign[0] = '+';
 8015bc8:	232b      	movs	r3, #43	; 0x2b
 8015bca:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
 8015bce:	e00f      	b.n	8015bf0 <GUI_DrawNumAt+0x308>
		}
		else if(signEnable == SIGN_NEGATIVE)
 8015bd0:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8015bd4:	2b03      	cmp	r3, #3
 8015bd6:	d10b      	bne.n	8015bf0 <GUI_DrawNumAt+0x308>
		{
			if (data->number < 0)
 8015bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015bdc:	ed93 7b00 	vldr	d7, [r3]
 8015be0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015be8:	d502      	bpl.n	8015bf0 <GUI_DrawNumAt+0x308>
				sign[0] = '-';
 8015bea:	232d      	movs	r3, #45	; 0x2d
 8015bec:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
		}
	}

	char zero[maxStringSize] = "11111111111111111111111111111111111111111";
 8015bf0:	4b42      	ldr	r3, [pc, #264]	; (8015cfc <GUI_DrawNumAt+0x414>)
 8015bf2:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8015bf6:	461d      	mov	r5, r3
 8015bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015c00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015c04:	c403      	stmia	r4!, {r0, r1}
 8015c06:	8022      	strh	r2, [r4, #0]
 8015c08:	f107 0392 	add.w	r3, r7, #146	; 0x92
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	601a      	str	r2, [r3, #0]
 8015c10:	605a      	str	r2, [r3, #4]
 8015c12:	721a      	strb	r2, [r3, #8]

	char c = ' ';
 8015c14:	2320      	movs	r3, #32
 8015c16:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde

	if(nInt == UNDEFINED_NINT || nInt == 0 || signEnable != SIGN_DISABLED)
 8015c1a:	f997 3110 	ldrsb.w	r3, [r7, #272]	; 0x110
 8015c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c22:	d007      	beq.n	8015c34 <GUI_DrawNumAt+0x34c>
 8015c24:	f997 3110 	ldrsb.w	r3, [r7, #272]	; 0x110
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d003      	beq.n	8015c34 <GUI_DrawNumAt+0x34c>
 8015c2c:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d002      	beq.n	8015c3a <GUI_DrawNumAt+0x352>
			showZero = hide;
 8015c34:	2300      	movs	r3, #0
 8015c36:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	if(showZero)
 8015c3a:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d048      	beq.n	8015cd4 <GUI_DrawNumAt+0x3ec>
	{
		c = '0';
 8015c42:	2330      	movs	r3, #48	; 0x30
 8015c44:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde

		int8_t h = -4;
 8015c48:	23fc      	movs	r3, #252	; 0xfc
 8015c4a:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec

		if(nDecimal)
 8015c4e:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d017      	beq.n	8015c86 <GUI_DrawNumAt+0x39e>
			while(convertedNum[h] != '.') h++;
 8015c56:	e006      	b.n	8015c66 <GUI_DrawNumAt+0x37e>
 8015c58:	f997 30ec 	ldrsb.w	r3, [r7, #236]	; 0xec
 8015c5c:	b2db      	uxtb	r3, r3
 8015c5e:	3301      	adds	r3, #1
 8015c60:	b2db      	uxtb	r3, r3
 8015c62:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
 8015c66:	f997 30ec 	ldrsb.w	r3, [r7, #236]	; 0xec
 8015c6a:	33f0      	adds	r3, #240	; 0xf0
 8015c6c:	443b      	add	r3, r7
 8015c6e:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8015c72:	2b2e      	cmp	r3, #46	; 0x2e
 8015c74:	d1f0      	bne.n	8015c58 <GUI_DrawNumAt+0x370>
 8015c76:	e01c      	b.n	8015cb2 <GUI_DrawNumAt+0x3ca>
		else
			while(convertedNum[h] != '\0') h++;
 8015c78:	f997 30ec 	ldrsb.w	r3, [r7, #236]	; 0xec
 8015c7c:	b2db      	uxtb	r3, r3
 8015c7e:	3301      	adds	r3, #1
 8015c80:	b2db      	uxtb	r3, r3
 8015c82:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
 8015c86:	f997 30ec 	ldrsb.w	r3, [r7, #236]	; 0xec
 8015c8a:	33f0      	adds	r3, #240	; 0xf0
 8015c8c:	443b      	add	r3, r7
 8015c8e:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d1f0      	bne.n	8015c78 <GUI_DrawNumAt+0x390>

		for (; numOfZero < (nInt - h); numOfZero++)
 8015c96:	e00c      	b.n	8015cb2 <GUI_DrawNumAt+0x3ca>
			zero[numOfZero] = c;
 8015c98:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8015c9c:	33f0      	adds	r3, #240	; 0xf0
 8015c9e:	443b      	add	r3, r7
 8015ca0:	f897 20de 	ldrb.w	r2, [r7, #222]	; 0xde
 8015ca4:	f803 2c88 	strb.w	r2, [r3, #-136]
		for (; numOfZero < (nInt - h); numOfZero++)
 8015ca8:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8015cac:	3301      	adds	r3, #1
 8015cae:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
 8015cb2:	f897 20ed 	ldrb.w	r2, [r7, #237]	; 0xed
 8015cb6:	f997 1110 	ldrsb.w	r1, [r7, #272]	; 0x110
 8015cba:	f997 30ec 	ldrsb.w	r3, [r7, #236]	; 0xec
 8015cbe:	1acb      	subs	r3, r1, r3
 8015cc0:	429a      	cmp	r2, r3
 8015cc2:	dbe9      	blt.n	8015c98 <GUI_DrawNumAt+0x3b0>

		zero[numOfZero] = '\0';
 8015cc4:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8015cc8:	33f0      	adds	r3, #240	; 0xf0
 8015cca:	443b      	add	r3, r7
 8015ccc:	2200      	movs	r2, #0
 8015cce:	f803 2c88 	strb.w	r2, [r3, #-136]
 8015cd2:	e002      	b.n	8015cda <GUI_DrawNumAt+0x3f2>

		//GUI_DispStringAt(zero, X - numOfZero * xSize, y);
	}
	else
		numOfZero = 0;
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed

	char numToDisplay[maxStringSize];

	strcpy(numToDisplay, zero);
 8015cda:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8015cde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015ce2:	4611      	mov	r1, r2
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	f00b ffbd 	bl	8021c64 <strcpy>

	uint8_t i = 0;
 8015cea:	2300      	movs	r3, #0
 8015cec:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb

	while(convertedNum[i] != '\0' || numOfZero + i < maxStringSize)
 8015cf0:	e01a      	b.n	8015d28 <GUI_DrawNumAt+0x440>
 8015cf2:	bf00      	nop
 8015cf4:	080226ec 	.word	0x080226ec
 8015cf8:	08022700 	.word	0x08022700
 8015cfc:	08022710 	.word	0x08022710
	{
		numToDisplay[numOfZero + i] = convertedNum[i];
 8015d00:	f897 20eb 	ldrb.w	r2, [r7, #235]	; 0xeb
 8015d04:	f897 10ed 	ldrb.w	r1, [r7, #237]	; 0xed
 8015d08:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8015d0c:	440b      	add	r3, r1
 8015d0e:	32f0      	adds	r2, #240	; 0xf0
 8015d10:	443a      	add	r2, r7
 8015d12:	f812 2c50 	ldrb.w	r2, [r2, #-80]
 8015d16:	33f0      	adds	r3, #240	; 0xf0
 8015d18:	443b      	add	r3, r7
 8015d1a:	f803 2cbc 	strb.w	r2, [r3, #-188]
		i++;
 8015d1e:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8015d22:	3301      	adds	r3, #1
 8015d24:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
	while(convertedNum[i] != '\0' || numOfZero + i < maxStringSize)
 8015d28:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8015d2c:	33f0      	adds	r3, #240	; 0xf0
 8015d2e:	443b      	add	r3, r7
 8015d30:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d1e3      	bne.n	8015d00 <GUI_DrawNumAt+0x418>
 8015d38:	f897 20ed 	ldrb.w	r2, [r7, #237]	; 0xed
 8015d3c:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8015d40:	4413      	add	r3, r2
 8015d42:	2b32      	cmp	r3, #50	; 0x32
 8015d44:	dddc      	ble.n	8015d00 <GUI_DrawNumAt+0x418>
	}

	numToDisplay[numOfZero + i] = '\0';
 8015d46:	f897 20ed 	ldrb.w	r2, [r7, #237]	; 0xed
 8015d4a:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8015d4e:	4413      	add	r3, r2
 8015d50:	33f0      	adds	r3, #240	; 0xf0
 8015d52:	443b      	add	r3, r7
 8015d54:	2200      	movs	r2, #0
 8015d56:	f803 2cbc 	strb.w	r2, [r3, #-188]
		//GUI_SetFont(&GUI_Font16_ASCII);

	strcpy(numToDisplay, endString);
	*/

	i = 0;
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb

	uint8_t sizeOfString = strlen(numToDisplay);
 8015d60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015d64:	4618      	mov	r0, r3
 8015d66:	f7ea fa67 	bl	8000238 <strlen>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea

	if(sign[0] != ' ')
 8015d70:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8015d74:	2b20      	cmp	r3, #32
 8015d76:	d004      	beq.n	8015d82 <GUI_DrawNumAt+0x49a>
		sizeOfString++;
 8015d78:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 8015d7c:	3301      	adds	r3, #1
 8015d7e:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea

	uint16_t sizeOfInitString = 0;
 8015d82:	2300      	movs	r3, #0
 8015d84:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8

	if(initString[0] != '\0')
 8015d88:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8015d8c:	781b      	ldrb	r3, [r3, #0]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d026      	beq.n	8015de0 <GUI_DrawNumAt+0x4f8>
	{
		int tmpCharSize = 0;
 8015d92:	2300      	movs	r3, #0
 8015d94:	617b      	str	r3, [r7, #20]

		for(uint8_t i = 0; initString[i] != '\0'; i++)
 8015d96:	2300      	movs	r3, #0
 8015d98:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8015d9c:	e018      	b.n	8015dd0 <GUI_DrawNumAt+0x4e8>
		{
			font->pfGetCharDistX(initString[i], &tmpCharSize);
 8015d9e:	68bb      	ldr	r3, [r7, #8]
 8015da0:	685b      	ldr	r3, [r3, #4]
 8015da2:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8015da6:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8015daa:	440a      	add	r2, r1
 8015dac:	7812      	ldrb	r2, [r2, #0]
 8015dae:	b292      	uxth	r2, r2
 8015db0:	f107 0114 	add.w	r1, r7, #20
 8015db4:	4610      	mov	r0, r2
 8015db6:	4798      	blx	r3
			sizeOfInitString += tmpCharSize;
 8015db8:	697b      	ldr	r3, [r7, #20]
 8015dba:	b29a      	uxth	r2, r3
 8015dbc:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8015dc0:	4413      	add	r3, r2
 8015dc2:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
		for(uint8_t i = 0; initString[i] != '\0'; i++)
 8015dc6:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8015dca:	3301      	adds	r3, #1
 8015dcc:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8015dd0:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8015dd4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8015dd8:	4413      	add	r3, r2
 8015dda:	781b      	ldrb	r3, [r3, #0]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d1de      	bne.n	8015d9e <GUI_DrawNumAt+0x4b6>
		}
	}

	uint16_t sizeOfEndString = 0;
 8015de0:	2300      	movs	r3, #0
 8015de2:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4

	if(endString[0] != '\0')
 8015de6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015dea:	781b      	ldrb	r3, [r3, #0]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d026      	beq.n	8015e3e <GUI_DrawNumAt+0x556>
	{
		int tmpCharSize = 0;
 8015df0:	2300      	movs	r3, #0
 8015df2:	613b      	str	r3, [r7, #16]

		for(uint8_t i = 0; endString[i] != '\0'; i++)
 8015df4:	2300      	movs	r3, #0
 8015df6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 8015dfa:	e018      	b.n	8015e2e <GUI_DrawNumAt+0x546>
		{
			font->pfGetCharDistX(endString[i], &tmpCharSize);
 8015dfc:	68bb      	ldr	r3, [r7, #8]
 8015dfe:	685b      	ldr	r3, [r3, #4]
 8015e00:	f897 20e3 	ldrb.w	r2, [r7, #227]	; 0xe3
 8015e04:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8015e08:	440a      	add	r2, r1
 8015e0a:	7812      	ldrb	r2, [r2, #0]
 8015e0c:	b292      	uxth	r2, r2
 8015e0e:	f107 0110 	add.w	r1, r7, #16
 8015e12:	4610      	mov	r0, r2
 8015e14:	4798      	blx	r3
			sizeOfEndString += tmpCharSize;
 8015e16:	693b      	ldr	r3, [r7, #16]
 8015e18:	b29a      	uxth	r2, r3
 8015e1a:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8015e1e:	4413      	add	r3, r2
 8015e20:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
		for(uint8_t i = 0; endString[i] != '\0'; i++)
 8015e24:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8015e28:	3301      	adds	r3, #1
 8015e2a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 8015e2e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8015e32:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8015e36:	4413      	add	r3, r2
 8015e38:	781b      	ldrb	r3, [r3, #0]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d1de      	bne.n	8015dfc <GUI_DrawNumAt+0x514>
		}
	}

	uint16_t sizeOfStringInPixel = 0;
 8015e3e:	2300      	movs	r3, #0
 8015e40:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
/*
	if((alignment == POINT || alignment == CENTER) && (sizeOfInitString[0] != "\0" || sizeOfEndString[0] != "\0"))
		alignment = LEFT;
		*/

	if(alignment == POINT && nDecimal == 0)
 8015e44:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8015e48:	2b03      	cmp	r3, #3
 8015e4a:	d106      	bne.n	8015e5a <GUI_DrawNumAt+0x572>
 8015e4c:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d102      	bne.n	8015e5a <GUI_DrawNumAt+0x572>
		alignment = RIGHT;
 8015e54:	2301      	movs	r3, #1
 8015e56:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120

	switch(alignment)
 8015e5a:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8015e5e:	2b03      	cmp	r3, #3
 8015e60:	f000 82b5 	beq.w	80163ce <GUI_DrawNumAt+0xae6>
 8015e64:	2b03      	cmp	r3, #3
 8015e66:	f300 83bf 	bgt.w	80165e8 <GUI_DrawNumAt+0xd00>
 8015e6a:	2b01      	cmp	r3, #1
 8015e6c:	d003      	beq.n	8015e76 <GUI_DrawNumAt+0x58e>
 8015e6e:	2b02      	cmp	r3, #2
 8015e70:	f000 8127 	beq.w	80160c2 <GUI_DrawNumAt+0x7da>
 8015e74:	e3b8      	b.n	80165e8 <GUI_DrawNumAt+0xd00>
	{
		case RIGHT:

			if(nDecimal) X = (x - (sizeOfString - 1) * xSize) - xPointSize - numOfZero * xSize - sizeOfEndString;
 8015e76:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d023      	beq.n	8015ec6 <GUI_DrawNumAt+0x5de>
 8015e7e:	89fa      	ldrh	r2, [r7, #14]
 8015e80:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 8015e84:	3b01      	subs	r3, #1
 8015e86:	b299      	uxth	r1, r3
 8015e88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015e8c:	b29b      	uxth	r3, r3
 8015e8e:	fb11 f303 	smulbb	r3, r1, r3
 8015e92:	b29b      	uxth	r3, r3
 8015e94:	1ad3      	subs	r3, r2, r3
 8015e96:	b29a      	uxth	r2, r3
 8015e98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015e9c:	b29b      	uxth	r3, r3
 8015e9e:	1ad3      	subs	r3, r2, r3
 8015ea0:	b29a      	uxth	r2, r3
 8015ea2:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8015ea6:	b299      	uxth	r1, r3
 8015ea8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015eac:	b29b      	uxth	r3, r3
 8015eae:	fb11 f303 	smulbb	r3, r1, r3
 8015eb2:	b29b      	uxth	r3, r3
 8015eb4:	1ad3      	subs	r3, r2, r3
 8015eb6:	b29a      	uxth	r2, r3
 8015eb8:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8015ebc:	1ad3      	subs	r3, r2, r3
 8015ebe:	b29b      	uxth	r3, r3
 8015ec0:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8015ec4:	e01c      	b.n	8015f00 <GUI_DrawNumAt+0x618>
			else X = x - sizeOfString * xSize - numOfZero * xSize - sizeOfEndString;
 8015ec6:	89fa      	ldrh	r2, [r7, #14]
 8015ec8:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 8015ecc:	b299      	uxth	r1, r3
 8015ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015ed2:	b29b      	uxth	r3, r3
 8015ed4:	fb11 f303 	smulbb	r3, r1, r3
 8015ed8:	b29b      	uxth	r3, r3
 8015eda:	1ad3      	subs	r3, r2, r3
 8015edc:	b29a      	uxth	r2, r3
 8015ede:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8015ee2:	b299      	uxth	r1, r3
 8015ee4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015ee8:	b29b      	uxth	r3, r3
 8015eea:	fb11 f303 	smulbb	r3, r1, r3
 8015eee:	b29b      	uxth	r3, r3
 8015ef0:	1ad3      	subs	r3, r2, r3
 8015ef2:	b29a      	uxth	r2, r3
 8015ef4:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8015ef8:	1ad3      	subs	r3, r2, r3
 8015efa:	b29b      	uxth	r3, r3
 8015efc:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee

			GUI_SetColor(color);
 8015f00:	6878      	ldr	r0, [r7, #4]
 8015f02:	f006 ff13 	bl	801cd2c <GUI_SetColor>
			GUI_DispStringAt(endString, x - sizeOfEndString, y);
 8015f06:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8015f0a:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8015f0e:	1ad3      	subs	r3, r2, r3
 8015f10:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8015f14:	4619      	mov	r1, r3
 8015f16:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8015f1a:	f007 fde5 	bl	801dae8 <GUI_DispStringAt>
			GUI_DispStringAt(initString, X - sizeOfInitString, y);
 8015f1e:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 8015f22:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8015f26:	1ad3      	subs	r3, r2, r3
 8015f28:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8015f2c:	4619      	mov	r1, r3
 8015f2e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8015f32:	f007 fdd9 	bl	801dae8 <GUI_DispStringAt>

			if(sizeOfString < sizeOfOldString || sign[0] != data->sign || sizeOfEndString < data->endStringSize || sizeOfInitString < data->initStringSize)
 8015f36:	f897 20ea 	ldrb.w	r2, [r7, #234]	; 0xea
 8015f3a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8015f3e:	429a      	cmp	r2, r3
 8015f40:	d315      	bcc.n	8015f6e <GUI_DrawNumAt+0x686>
 8015f42:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 8015f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015f4a:	7c1b      	ldrb	r3, [r3, #16]
 8015f4c:	429a      	cmp	r2, r3
 8015f4e:	d10e      	bne.n	8015f6e <GUI_DrawNumAt+0x686>
 8015f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015f54:	899b      	ldrh	r3, [r3, #12]
 8015f56:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	; 0xe4
 8015f5a:	429a      	cmp	r2, r3
 8015f5c:	d307      	bcc.n	8015f6e <GUI_DrawNumAt+0x686>
 8015f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015f62:	895b      	ldrh	r3, [r3, #10]
 8015f64:	f8b7 20e8 	ldrh.w	r2, [r7, #232]	; 0xe8
 8015f68:	429a      	cmp	r2, r3
 8015f6a:	f080 8081 	bcs.w	8016070 <GUI_DrawNumAt+0x788>
			{
				GUI_SetColor(backColor);
 8015f6e:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8015f72:	f006 fedb 	bl	801cd2c <GUI_SetColor>

				if(showZero)
 8015f76:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d03c      	beq.n	8015ff8 <GUI_DrawNumAt+0x710>
					GUI_FillRect(X - sizeOfInitString, y + font->LHeight*0.3, x, y + font->LHeight + font->LHeight*0.8);
 8015f7e:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 8015f82:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8015f86:	1ad0      	subs	r0, r2, r3
 8015f88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015f8c:	ee07 3a90 	vmov	s15, r3
 8015f90:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8015f94:	68bb      	ldr	r3, [r7, #8]
 8015f96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8015f9a:	ee07 3a90 	vmov	s15, r3
 8015f9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015fa2:	ed9f 5ba7 	vldr	d5, [pc, #668]	; 8016240 <GUI_DrawNumAt+0x958>
 8015fa6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015faa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8015fae:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 8015fb2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8015fb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015fba:	68ba      	ldr	r2, [r7, #8]
 8015fbc:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8015fc0:	4413      	add	r3, r2
 8015fc2:	ee07 3a90 	vmov	s15, r3
 8015fc6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8015fca:	68bb      	ldr	r3, [r7, #8]
 8015fcc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8015fd0:	ee07 3a90 	vmov	s15, r3
 8015fd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015fd8:	ed9f 5b9b 	vldr	d5, [pc, #620]	; 8016248 <GUI_DrawNumAt+0x960>
 8015fdc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015fe0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8015fe4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8015fe8:	ee17 3a90 	vmov	r3, s15
 8015fec:	460a      	mov	r2, r1
 8015fee:	ee14 1a90 	vmov	r1, s9
 8015ff2:	f006 ffa5 	bl	801cf40 <GUI_FillRect>
 8015ff6:	e03b      	b.n	8016070 <GUI_DrawNumAt+0x788>
				else
					//GUI_FillRect(X - xSize * 3 - sizeOfInitString, y + font->LHeight*0.3, x, y + font->LHeight + font->LHeight*0.8);
					GUI_FillRect(X - sizeOfInitString, y + font->LHeight*0.3, x, y + font->LHeight + font->LHeight*0.8);
 8015ff8:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 8015ffc:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8016000:	1ad0      	subs	r0, r2, r3
 8016002:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016006:	ee07 3a90 	vmov	s15, r3
 801600a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801600e:	68bb      	ldr	r3, [r7, #8]
 8016010:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016014:	ee07 3a90 	vmov	s15, r3
 8016018:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801601c:	ed9f 5b88 	vldr	d5, [pc, #544]	; 8016240 <GUI_DrawNumAt+0x958>
 8016020:	ee27 7b05 	vmul.f64	d7, d7, d5
 8016024:	ee36 7b07 	vadd.f64	d7, d6, d7
 8016028:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 801602c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8016030:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016034:	68ba      	ldr	r2, [r7, #8]
 8016036:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 801603a:	4413      	add	r3, r2
 801603c:	ee07 3a90 	vmov	s15, r3
 8016040:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8016044:	68bb      	ldr	r3, [r7, #8]
 8016046:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801604a:	ee07 3a90 	vmov	s15, r3
 801604e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016052:	ed9f 5b7d 	vldr	d5, [pc, #500]	; 8016248 <GUI_DrawNumAt+0x960>
 8016056:	ee27 7b05 	vmul.f64	d7, d7, d5
 801605a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801605e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8016062:	ee17 3a90 	vmov	r3, s15
 8016066:	460a      	mov	r2, r1
 8016068:	ee14 1a90 	vmov	r1, s9
 801606c:	f006 ff68 	bl	801cf40 <GUI_FillRect>
			}

			GUI_SetColor(color);
 8016070:	6878      	ldr	r0, [r7, #4]
 8016072:	f006 fe5b 	bl	801cd2c <GUI_SetColor>

			if(sign[0] == ' ')
 8016076:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 801607a:	2b20      	cmp	r3, #32
 801607c:	d10a      	bne.n	8016094 <GUI_DrawNumAt+0x7ac>
				GUI_DispStringAt(numToDisplay, X, y);
 801607e:	f9b7 10ee 	ldrsh.w	r1, [r7, #238]	; 0xee
 8016082:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8016086:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801608a:	4618      	mov	r0, r3
 801608c:	f007 fd2c 	bl	801dae8 <GUI_DispStringAt>
			{
				GUI_DispStringAt(sign, X, y);
				GUI_DispStringAt(numToDisplay, X + xSize, y);
			}

			break;
 8016090:	f000 bcad 	b.w	80169ee <GUI_DrawNumAt+0x1106>
				GUI_DispStringAt(sign, X, y);
 8016094:	f9b7 10ee 	ldrsh.w	r1, [r7, #238]	; 0xee
 8016098:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801609c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80160a0:	4618      	mov	r0, r3
 80160a2:	f007 fd21 	bl	801dae8 <GUI_DispStringAt>
				GUI_DispStringAt(numToDisplay, X + xSize, y);
 80160a6:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 80160aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80160ae:	18d1      	adds	r1, r2, r3
 80160b0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80160b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80160b8:	4618      	mov	r0, r3
 80160ba:	f007 fd15 	bl	801dae8 <GUI_DispStringAt>
			break;
 80160be:	f000 bc96 	b.w	80169ee <GUI_DrawNumAt+0x1106>

				if(sizeOfString < sizeOfOldString || numToDisplay[0] != data->sign)
					GUI_FillRect(X - (sizeOfOldString - sizeOfString) * xSize / 2, y + font->LHeight*0.3, X + (sizeOfOldString - 2) * xSize, y + font->LHeight + font->LHeight*0.8);
			}
*/
			if(nDecimal)
 80160c2:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d013      	beq.n	80160f2 <GUI_DrawNumAt+0x80a>
				sizeOfStringInPixel = ((sizeOfString - 1) + numOfZero) * xSize + xPointSize;
 80160ca:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 80160ce:	1e5a      	subs	r2, r3, #1
 80160d0:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 80160d4:	4413      	add	r3, r2
 80160d6:	b29a      	uxth	r2, r3
 80160d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80160dc:	b29b      	uxth	r3, r3
 80160de:	fb12 f303 	smulbb	r3, r2, r3
 80160e2:	b29a      	uxth	r2, r3
 80160e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80160e8:	b29b      	uxth	r3, r3
 80160ea:	4413      	add	r3, r2
 80160ec:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
 80160f0:	e00c      	b.n	801610c <GUI_DrawNumAt+0x824>
			else
				sizeOfStringInPixel = (sizeOfString + numOfZero) * xSize;
 80160f2:	f897 20ea 	ldrb.w	r2, [r7, #234]	; 0xea
 80160f6:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 80160fa:	4413      	add	r3, r2
 80160fc:	b29a      	uxth	r2, r3
 80160fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016102:	b29b      	uxth	r3, r3
 8016104:	fb12 f303 	smulbb	r3, r2, r3
 8016108:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0

			sizeOfStringInPixel += sizeOfEndString + sizeOfInitString;
 801610c:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	; 0xe4
 8016110:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8016114:	4413      	add	r3, r2
 8016116:	b29a      	uxth	r2, r3
 8016118:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 801611c:	4413      	add	r3, r2
 801611e:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0

			if(sizeOfStringInPixel < (sizeOfOldString - 1 + numOfZero) * xSize + xPointSize + sizeOfEndString + sizeOfInitString || sign[0] != data->sign)
 8016122:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	; 0xe0
 8016126:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 801612a:	1e59      	subs	r1, r3, #1
 801612c:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8016130:	440b      	add	r3, r1
 8016132:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8016136:	fb03 f101 	mul.w	r1, r3, r1
 801613a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801613e:	4419      	add	r1, r3
 8016140:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8016144:	4419      	add	r1, r3
 8016146:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 801614a:	440b      	add	r3, r1
 801614c:	429a      	cmp	r2, r3
 801614e:	db07      	blt.n	8016160 <GUI_DrawNumAt+0x878>
 8016150:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 8016154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016158:	7c1b      	ldrb	r3, [r3, #16]
 801615a:	429a      	cmp	r2, r3
 801615c:	f000 80d0 	beq.w	8016300 <GUI_DrawNumAt+0xa18>
			//if(sizeOfString < sizeOfOldString || sign[0] != data->sign)
			{
				GUI_SetColor(backColor);
 8016160:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8016164:	f006 fde2 	bl	801cd2c <GUI_SetColor>
				//GUI_SetColor(GUI_BLUE);

				if(font == &GUI_FontD32)
 8016168:	68bb      	ldr	r3, [r7, #8]
 801616a:	4a39      	ldr	r2, [pc, #228]	; (8016250 <GUI_DrawNumAt+0x968>)
 801616c:	4293      	cmp	r3, r2
 801616e:	d124      	bne.n	80161ba <GUI_DrawNumAt+0x8d2>
					GUI_FillRect(x - (sizeOfOldString) * xSize / 2, y - 2, x + (sizeOfOldString) * xSize / 2, y + 34);
 8016170:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8016174:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8016178:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 801617c:	fb01 f303 	mul.w	r3, r1, r3
 8016180:	2b00      	cmp	r3, #0
 8016182:	da00      	bge.n	8016186 <GUI_DrawNumAt+0x89e>
 8016184:	3301      	adds	r3, #1
 8016186:	105b      	asrs	r3, r3, #1
 8016188:	425b      	negs	r3, r3
 801618a:	18d0      	adds	r0, r2, r3
 801618c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016190:	1e9c      	subs	r4, r3, #2
 8016192:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8016196:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 801619a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 801619e:	fb01 f303 	mul.w	r3, r1, r3
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	da00      	bge.n	80161a8 <GUI_DrawNumAt+0x8c0>
 80161a6:	3301      	adds	r3, #1
 80161a8:	105b      	asrs	r3, r3, #1
 80161aa:	441a      	add	r2, r3
 80161ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80161b0:	3322      	adds	r3, #34	; 0x22
 80161b2:	4621      	mov	r1, r4
 80161b4:	f006 fec4 	bl	801cf40 <GUI_FillRect>
 80161b8:	e0a2      	b.n	8016300 <GUI_DrawNumAt+0xa18>
				else if(font == &GUI_FontCalibri44Balised4pp)
 80161ba:	68bb      	ldr	r3, [r7, #8]
 80161bc:	4a25      	ldr	r2, [pc, #148]	; (8016254 <GUI_DrawNumAt+0x96c>)
 80161be:	4293      	cmp	r3, r2
 80161c0:	d14a      	bne.n	8016258 <GUI_DrawNumAt+0x970>
				{
					//GUI_SetColor(GUI_GREEN);
					GUI_FillRect(x - (sizeOfOldString) * xSize / 2, y - 2, x + (sizeOfOldString) * xSize / 2, y + font->LHeight + font->LHeight*0.8);
 80161c2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80161c6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80161ca:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80161ce:	fb01 f303 	mul.w	r3, r1, r3
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	da00      	bge.n	80161d8 <GUI_DrawNumAt+0x8f0>
 80161d6:	3301      	adds	r3, #1
 80161d8:	105b      	asrs	r3, r3, #1
 80161da:	425b      	negs	r3, r3
 80161dc:	18d0      	adds	r0, r2, r3
 80161de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80161e2:	1e9c      	subs	r4, r3, #2
 80161e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80161e8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80161ec:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80161f0:	fb01 f303 	mul.w	r3, r1, r3
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	da00      	bge.n	80161fa <GUI_DrawNumAt+0x912>
 80161f8:	3301      	adds	r3, #1
 80161fa:	105b      	asrs	r3, r3, #1
 80161fc:	18d1      	adds	r1, r2, r3
 80161fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016202:	68ba      	ldr	r2, [r7, #8]
 8016204:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8016208:	4413      	add	r3, r2
 801620a:	ee07 3a90 	vmov	s15, r3
 801620e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8016212:	68bb      	ldr	r3, [r7, #8]
 8016214:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016218:	ee07 3a90 	vmov	s15, r3
 801621c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016220:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8016248 <GUI_DrawNumAt+0x960>
 8016224:	ee27 7b05 	vmul.f64	d7, d7, d5
 8016228:	ee36 7b07 	vadd.f64	d7, d6, d7
 801622c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8016230:	ee17 3a90 	vmov	r3, s15
 8016234:	460a      	mov	r2, r1
 8016236:	4621      	mov	r1, r4
 8016238:	f006 fe82 	bl	801cf40 <GUI_FillRect>
 801623c:	e060      	b.n	8016300 <GUI_DrawNumAt+0xa18>
 801623e:	bf00      	nop
 8016240:	33333333 	.word	0x33333333
 8016244:	3fd33333 	.word	0x3fd33333
 8016248:	9999999a 	.word	0x9999999a
 801624c:	3fe99999 	.word	0x3fe99999
 8016250:	08120990 	.word	0x08120990
 8016254:	080e180c 	.word	0x080e180c
				}
				else
					GUI_FillRect(x - (sizeOfOldString) * xSize / 2, y + font->LHeight*0.3*0, x + (sizeOfOldString) * xSize / 2, y + font->LHeight + font->LHeight*0.8);
 8016258:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801625c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8016260:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8016264:	fb01 f303 	mul.w	r3, r1, r3
 8016268:	2b00      	cmp	r3, #0
 801626a:	da00      	bge.n	801626e <GUI_DrawNumAt+0x986>
 801626c:	3301      	adds	r3, #1
 801626e:	105b      	asrs	r3, r3, #1
 8016270:	425b      	negs	r3, r3
 8016272:	18d0      	adds	r0, r2, r3
 8016274:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016278:	ee07 3a90 	vmov	s15, r3
 801627c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8016280:	68bb      	ldr	r3, [r7, #8]
 8016282:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016286:	ee07 3a90 	vmov	s15, r3
 801628a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801628e:	ed9f 5bd2 	vldr	d5, [pc, #840]	; 80165d8 <GUI_DrawNumAt+0xcf0>
 8016292:	ee27 7b05 	vmul.f64	d7, d7, d5
 8016296:	ed9f 5bce 	vldr	d5, [pc, #824]	; 80165d0 <GUI_DrawNumAt+0xce8>
 801629a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801629e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80162a2:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 80162a6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80162aa:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80162ae:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80162b2:	fb01 f303 	mul.w	r3, r1, r3
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	da00      	bge.n	80162bc <GUI_DrawNumAt+0x9d4>
 80162ba:	3301      	adds	r3, #1
 80162bc:	105b      	asrs	r3, r3, #1
 80162be:	18d1      	adds	r1, r2, r3
 80162c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80162c4:	68ba      	ldr	r2, [r7, #8]
 80162c6:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80162ca:	4413      	add	r3, r2
 80162cc:	ee07 3a90 	vmov	s15, r3
 80162d0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80162d4:	68bb      	ldr	r3, [r7, #8]
 80162d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80162da:	ee07 3a90 	vmov	s15, r3
 80162de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80162e2:	ed9f 5bbf 	vldr	d5, [pc, #764]	; 80165e0 <GUI_DrawNumAt+0xcf8>
 80162e6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80162ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80162ee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80162f2:	ee17 3a90 	vmov	r3, s15
 80162f6:	460a      	mov	r2, r1
 80162f8:	ee14 1a90 	vmov	r1, s9
 80162fc:	f006 fe20 	bl	801cf40 <GUI_FillRect>
				else
					GUI_FillRect(x - (sizeOfOldString) * xSize / 2, y - 2, x + (sizeOfOldString) * xSize / 2, y + 34);
*/
			}

			GUI_SetColor(color);
 8016300:	6878      	ldr	r0, [r7, #4]
 8016302:	f006 fd13 	bl	801cd2c <GUI_SetColor>
			GUI_DispStringAt(initString, x - sizeOfStringInPixel/2, y);
 8016306:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801630a:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	; 0xe0
 801630e:	0852      	lsrs	r2, r2, #1
 8016310:	b292      	uxth	r2, r2
 8016312:	1a9b      	subs	r3, r3, r2
 8016314:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8016318:	4619      	mov	r1, r3
 801631a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 801631e:	f007 fbe3 	bl	801dae8 <GUI_DispStringAt>
			GUI_DispStringAt(endString, x + (sizeOfStringInPixel/2 - sizeOfEndString), y);
 8016322:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8016326:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 801632a:	085b      	lsrs	r3, r3, #1
 801632c:	b29b      	uxth	r3, r3
 801632e:	4619      	mov	r1, r3
 8016330:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8016334:	1acb      	subs	r3, r1, r3
 8016336:	4413      	add	r3, r2
 8016338:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801633c:	4619      	mov	r1, r3
 801633e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8016342:	f007 fbd1 	bl	801dae8 <GUI_DispStringAt>

			if(sign[0] == ' ')
 8016346:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 801634a:	2b20      	cmp	r3, #32
 801634c:	d112      	bne.n	8016374 <GUI_DrawNumAt+0xa8c>
				GUI_DispStringAt(numToDisplay, x - (sizeOfStringInPixel/2 - sizeOfInitString), y);
 801634e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8016352:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8016356:	085b      	lsrs	r3, r3, #1
 8016358:	b29b      	uxth	r3, r3
 801635a:	4619      	mov	r1, r3
 801635c:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8016360:	1acb      	subs	r3, r1, r3
 8016362:	1ad1      	subs	r1, r2, r3
 8016364:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8016368:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801636c:	4618      	mov	r0, r3
 801636e:	f007 fbbb 	bl	801dae8 <GUI_DispStringAt>
			{
				GUI_DispStringAt(sign, x - (sizeOfStringInPixel/2 - sizeOfInitString), y);
				GUI_DispStringAt(numToDisplay, x - (sizeOfStringInPixel/2 - sizeOfInitString) + xSize, y);
			}

			break;
 8016372:	e33c      	b.n	80169ee <GUI_DrawNumAt+0x1106>
				GUI_DispStringAt(sign, x - (sizeOfStringInPixel/2 - sizeOfInitString), y);
 8016374:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8016378:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 801637c:	085b      	lsrs	r3, r3, #1
 801637e:	b29b      	uxth	r3, r3
 8016380:	4619      	mov	r1, r3
 8016382:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8016386:	1acb      	subs	r3, r1, r3
 8016388:	1ad1      	subs	r1, r2, r3
 801638a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801638e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8016392:	4618      	mov	r0, r3
 8016394:	f007 fba8 	bl	801dae8 <GUI_DispStringAt>
				GUI_DispStringAt(numToDisplay, x - (sizeOfStringInPixel/2 - sizeOfInitString) + xSize, y);
 8016398:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801639c:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 80163a0:	085b      	lsrs	r3, r3, #1
 80163a2:	b29b      	uxth	r3, r3
 80163a4:	4619      	mov	r1, r3
 80163a6:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 80163aa:	1acb      	subs	r3, r1, r3
 80163ac:	1ad2      	subs	r2, r2, r3
 80163ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80163b2:	18d1      	adds	r1, r2, r3
 80163b4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80163b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80163bc:	4618      	mov	r0, r3
 80163be:	f007 fb93 	bl	801dae8 <GUI_DispStringAt>
			break;
 80163c2:	e314      	b.n	80169ee <GUI_DrawNumAt+0x1106>

		case POINT:

			while(convertedNum[i] != '.') i++;
 80163c4:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80163c8:	3301      	adds	r3, #1
 80163ca:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 80163ce:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80163d2:	33f0      	adds	r3, #240	; 0xf0
 80163d4:	443b      	add	r3, r7
 80163d6:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 80163da:	2b2e      	cmp	r3, #46	; 0x2e
 80163dc:	d1f2      	bne.n	80163c4 <GUI_DrawNumAt+0xadc>

			X = x - (i + numOfZero) * xSize;
 80163de:	89fa      	ldrh	r2, [r7, #14]
 80163e0:	f897 10eb 	ldrb.w	r1, [r7, #235]	; 0xeb
 80163e4:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 80163e8:	440b      	add	r3, r1
 80163ea:	b299      	uxth	r1, r3
 80163ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80163f0:	b29b      	uxth	r3, r3
 80163f2:	fb11 f303 	smulbb	r3, r1, r3
 80163f6:	b29b      	uxth	r3, r3
 80163f8:	1ad3      	subs	r3, r2, r3
 80163fa:	b29b      	uxth	r3, r3
 80163fc:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee

			GUI_SetColor(color);
 8016400:	6878      	ldr	r0, [r7, #4]
 8016402:	f006 fc93 	bl	801cd2c <GUI_SetColor>

			if(sign[0] == ' ')
 8016406:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 801640a:	2b20      	cmp	r3, #32
 801640c:	d109      	bne.n	8016422 <GUI_DrawNumAt+0xb3a>
				GUI_DispStringAt(numToDisplay, X, y);
 801640e:	f9b7 10ee 	ldrsh.w	r1, [r7, #238]	; 0xee
 8016412:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8016416:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801641a:	4618      	mov	r0, r3
 801641c:	f007 fb64 	bl	801dae8 <GUI_DispStringAt>
 8016420:	e014      	b.n	801644c <GUI_DrawNumAt+0xb64>
			else
			{
				GUI_DispStringAt(sign, X, y);
 8016422:	f9b7 10ee 	ldrsh.w	r1, [r7, #238]	; 0xee
 8016426:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801642a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801642e:	4618      	mov	r0, r3
 8016430:	f007 fb5a 	bl	801dae8 <GUI_DispStringAt>
				GUI_DispStringAt(numToDisplay, X + xSize, y);
 8016434:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 8016438:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801643c:	18d1      	adds	r1, r2, r3
 801643e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8016442:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016446:	4618      	mov	r0, r3
 8016448:	f007 fb4e 	bl	801dae8 <GUI_DispStringAt>
			}

			GUI_SetColor(backColor);
 801644c:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8016450:	f006 fc6c 	bl	801cd2c <GUI_SetColor>

			if((sizeOfString < sizeOfOldString && !numOfZero) || sign[0] != data->sign)
 8016454:	f897 20ea 	ldrb.w	r2, [r7, #234]	; 0xea
 8016458:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 801645c:	429a      	cmp	r2, r3
 801645e:	d203      	bcs.n	8016468 <GUI_DrawNumAt+0xb80>
 8016460:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8016464:	2b00      	cmp	r3, #0
 8016466:	d007      	beq.n	8016478 <GUI_DrawNumAt+0xb90>
 8016468:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 801646c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016470:	7c1b      	ldrb	r3, [r3, #16]
 8016472:	429a      	cmp	r2, r3
 8016474:	f000 82b8 	beq.w	80169e8 <GUI_DrawNumAt+0x1100>
			{
				if(nDecimal)
 8016478:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 801647c:	2b00      	cmp	r3, #0
 801647e:	d054      	beq.n	801652a <GUI_DrawNumAt+0xc42>
					GUI_FillRect(X - (sizeOfOldString - sizeOfString - 1) * xSize / 2, y + font->LHeight*0.3, X + (sizeOfOldString - 1) * xSize + xPointSize, y + font->LHeight + font->LHeight*0.8);
 8016480:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 8016484:	f897 10df 	ldrb.w	r1, [r7, #223]	; 0xdf
 8016488:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 801648c:	1acb      	subs	r3, r1, r3
 801648e:	3b01      	subs	r3, #1
 8016490:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8016494:	fb01 f303 	mul.w	r3, r1, r3
 8016498:	2b00      	cmp	r3, #0
 801649a:	da00      	bge.n	801649e <GUI_DrawNumAt+0xbb6>
 801649c:	3301      	adds	r3, #1
 801649e:	105b      	asrs	r3, r3, #1
 80164a0:	425b      	negs	r3, r3
 80164a2:	18d0      	adds	r0, r2, r3
 80164a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80164a8:	ee07 3a90 	vmov	s15, r3
 80164ac:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80164b0:	68bb      	ldr	r3, [r7, #8]
 80164b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80164b6:	ee07 3a90 	vmov	s15, r3
 80164ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80164be:	ed9f 5b46 	vldr	d5, [pc, #280]	; 80165d8 <GUI_DrawNumAt+0xcf0>
 80164c2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80164c6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80164ca:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 80164ce:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 80164d2:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80164d6:	3b01      	subs	r3, #1
 80164d8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80164dc:	fb01 f303 	mul.w	r3, r1, r3
 80164e0:	441a      	add	r2, r3
 80164e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80164e6:	18d1      	adds	r1, r2, r3
 80164e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80164ec:	68ba      	ldr	r2, [r7, #8]
 80164ee:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80164f2:	4413      	add	r3, r2
 80164f4:	ee07 3a90 	vmov	s15, r3
 80164f8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80164fc:	68bb      	ldr	r3, [r7, #8]
 80164fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016502:	ee07 3a90 	vmov	s15, r3
 8016506:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801650a:	ed9f 5b35 	vldr	d5, [pc, #212]	; 80165e0 <GUI_DrawNumAt+0xcf8>
 801650e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8016512:	ee36 7b07 	vadd.f64	d7, d6, d7
 8016516:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801651a:	ee17 3a90 	vmov	r3, s15
 801651e:	460a      	mov	r2, r1
 8016520:	ee14 1a90 	vmov	r1, s9
 8016524:	f006 fd0c 	bl	801cf40 <GUI_FillRect>
			}

			//GUI_SetColor(color);
			//GUI_DispStringAt(numToDisplay, X, y);  //mettendolo qui non so perchè ma si visualizza buggato (messo sopra no)

			break;
 8016528:	e25e      	b.n	80169e8 <GUI_DrawNumAt+0x1100>
					GUI_FillRect(X - (sizeOfOldString - sizeOfString - 1) * xSize / 2, y + font->LHeight*0.3, X + sizeOfOldString * xSize, y + font->LHeight + font->LHeight*0.8);
 801652a:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 801652e:	f897 10df 	ldrb.w	r1, [r7, #223]	; 0xdf
 8016532:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 8016536:	1acb      	subs	r3, r1, r3
 8016538:	3b01      	subs	r3, #1
 801653a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 801653e:	fb01 f303 	mul.w	r3, r1, r3
 8016542:	2b00      	cmp	r3, #0
 8016544:	da00      	bge.n	8016548 <GUI_DrawNumAt+0xc60>
 8016546:	3301      	adds	r3, #1
 8016548:	105b      	asrs	r3, r3, #1
 801654a:	425b      	negs	r3, r3
 801654c:	18d0      	adds	r0, r2, r3
 801654e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016552:	ee07 3a90 	vmov	s15, r3
 8016556:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801655a:	68bb      	ldr	r3, [r7, #8]
 801655c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016560:	ee07 3a90 	vmov	s15, r3
 8016564:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016568:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 80165d8 <GUI_DrawNumAt+0xcf0>
 801656c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8016570:	ee36 7b07 	vadd.f64	d7, d6, d7
 8016574:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 8016578:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 801657c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8016580:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8016584:	fb01 f303 	mul.w	r3, r1, r3
 8016588:	18d1      	adds	r1, r2, r3
 801658a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801658e:	68ba      	ldr	r2, [r7, #8]
 8016590:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8016594:	4413      	add	r3, r2
 8016596:	ee07 3a90 	vmov	s15, r3
 801659a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801659e:	68bb      	ldr	r3, [r7, #8]
 80165a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80165a4:	ee07 3a90 	vmov	s15, r3
 80165a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80165ac:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 80165e0 <GUI_DrawNumAt+0xcf8>
 80165b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80165b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80165b8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80165bc:	ee17 3a90 	vmov	r3, s15
 80165c0:	460a      	mov	r2, r1
 80165c2:	ee14 1a90 	vmov	r1, s9
 80165c6:	f006 fcbb 	bl	801cf40 <GUI_FillRect>
			break;
 80165ca:	e20d      	b.n	80169e8 <GUI_DrawNumAt+0x1100>
 80165cc:	f3af 8000 	nop.w
	...
 80165d8:	33333333 	.word	0x33333333
 80165dc:	3fd33333 	.word	0x3fd33333
 80165e0:	9999999a 	.word	0x9999999a
 80165e4:	3fe99999 	.word	0x3fe99999
		case LEFT:
		default:

			//section of function to write the number

			X = x + sizeOfInitString;
 80165e8:	89fa      	ldrh	r2, [r7, #14]
 80165ea:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 80165ee:	4413      	add	r3, r2
 80165f0:	b29b      	uxth	r3, r3
 80165f2:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee

			if(sizeOfString < sizeOfOldString || sign[0] != data->sign)
 80165f6:	f897 20ea 	ldrb.w	r2, [r7, #234]	; 0xea
 80165fa:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80165fe:	429a      	cmp	r2, r3
 8016600:	d307      	bcc.n	8016612 <GUI_DrawNumAt+0xd2a>
 8016602:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 8016606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801660a:	7c1b      	ldrb	r3, [r3, #16]
 801660c:	429a      	cmp	r2, r3
 801660e:	f000 8093 	beq.w	8016738 <GUI_DrawNumAt+0xe50>
			{
				GUI_SetColor(backColor);
 8016612:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8016616:	f006 fb89 	bl	801cd2c <GUI_SetColor>

				if(nDecimal)
 801661a:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 801661e:	2b00      	cmp	r3, #0
 8016620:	d047      	beq.n	80166b2 <GUI_DrawNumAt+0xdca>
				{
					//GUI_FillRect(X, y + font->LHeight*0.3, X + (sizeOfOldString - 1) * xSize + xPointSize, y + font->LHeight + font->LHeight*0.8);
					//GUI_FillRect(X + (sizeOfOldString - 1) * xSize + xPointSize, y + font->LHeight*0.3, X + (sizeOfOldString - 1) * xSize + xPointSize + sizeOfEndString, y + font->LHeight + font->LHeight*0.8);
					GUI_FillRect(X, y + font->LHeight*0.3, X + (sizeOfOldString - 1) * xSize + xPointSize + sizeOfEndString, y + font->LHeight + font->LHeight*0.8);
 8016622:	f9b7 00ee 	ldrsh.w	r0, [r7, #238]	; 0xee
 8016626:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801662a:	ee07 3a90 	vmov	s15, r3
 801662e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8016632:	68bb      	ldr	r3, [r7, #8]
 8016634:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016638:	ee07 3a90 	vmov	s15, r3
 801663c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016640:	ed1f 5b1b 	vldr	d5, [pc, #-108]	; 80165d8 <GUI_DrawNumAt+0xcf0>
 8016644:	ee27 7b05 	vmul.f64	d7, d7, d5
 8016648:	ee36 7b07 	vadd.f64	d7, d6, d7
 801664c:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 8016650:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 8016654:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8016658:	3b01      	subs	r3, #1
 801665a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 801665e:	fb01 f303 	mul.w	r3, r1, r3
 8016662:	441a      	add	r2, r3
 8016664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016668:	441a      	add	r2, r3
 801666a:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 801666e:	18d1      	adds	r1, r2, r3
 8016670:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016674:	68ba      	ldr	r2, [r7, #8]
 8016676:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 801667a:	4413      	add	r3, r2
 801667c:	ee07 3a90 	vmov	s15, r3
 8016680:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8016684:	68bb      	ldr	r3, [r7, #8]
 8016686:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801668a:	ee07 3a90 	vmov	s15, r3
 801668e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016692:	ed1f 5b2d 	vldr	d5, [pc, #-180]	; 80165e0 <GUI_DrawNumAt+0xcf8>
 8016696:	ee27 7b05 	vmul.f64	d7, d7, d5
 801669a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801669e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80166a2:	ee17 3a90 	vmov	r3, s15
 80166a6:	460a      	mov	r2, r1
 80166a8:	ee14 1a90 	vmov	r1, s9
 80166ac:	f006 fc48 	bl	801cf40 <GUI_FillRect>
 80166b0:	e042      	b.n	8016738 <GUI_DrawNumAt+0xe50>
				}
				else
				{
					//GUI_FillRect(X, y + font->LHeight*0.3, X + sizeOfOldString * xSize, y + font->LHeight + font->LHeight*0.8);
					//GUI_FillRect(X + sizeOfOldString * xSize, y + font->LHeight*0.3, X + sizeOfOldString * xSize + sizeOfEndString, y + font->LHeight + font->LHeight*0.8);
					GUI_FillRect(X, y + font->LHeight*0.3, X + sizeOfOldString * xSize + sizeOfEndString, y + font->LHeight + font->LHeight*0.8);
 80166b2:	f9b7 00ee 	ldrsh.w	r0, [r7, #238]	; 0xee
 80166b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80166ba:	ee07 3a90 	vmov	s15, r3
 80166be:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80166c2:	68bb      	ldr	r3, [r7, #8]
 80166c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80166c8:	ee07 3a90 	vmov	s15, r3
 80166cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80166d0:	ed1f 5b3f 	vldr	d5, [pc, #-252]	; 80165d8 <GUI_DrawNumAt+0xcf0>
 80166d4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80166d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80166dc:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 80166e0:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 80166e4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80166e8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80166ec:	fb01 f303 	mul.w	r3, r1, r3
 80166f0:	441a      	add	r2, r3
 80166f2:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80166f6:	18d1      	adds	r1, r2, r3
 80166f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80166fc:	68ba      	ldr	r2, [r7, #8]
 80166fe:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8016702:	4413      	add	r3, r2
 8016704:	ee07 3a90 	vmov	s15, r3
 8016708:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801670c:	68bb      	ldr	r3, [r7, #8]
 801670e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016712:	ee07 3a90 	vmov	s15, r3
 8016716:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801671a:	ed1f 5b4f 	vldr	d5, [pc, #-316]	; 80165e0 <GUI_DrawNumAt+0xcf8>
 801671e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8016722:	ee36 7b07 	vadd.f64	d7, d6, d7
 8016726:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801672a:	ee17 3a90 	vmov	r3, s15
 801672e:	460a      	mov	r2, r1
 8016730:	ee14 1a90 	vmov	r1, s9
 8016734:	f006 fc04 	bl	801cf40 <GUI_FillRect>
				}
			}

			GUI_SetColor(color);
 8016738:	6878      	ldr	r0, [r7, #4]
 801673a:	f006 faf7 	bl	801cd2c <GUI_SetColor>

			if(sign[0] == ' ')
 801673e:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8016742:	2b20      	cmp	r3, #32
 8016744:	d109      	bne.n	801675a <GUI_DrawNumAt+0xe72>
				GUI_DispStringAt(numToDisplay, X, y);
 8016746:	f9b7 10ee 	ldrsh.w	r1, [r7, #238]	; 0xee
 801674a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801674e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016752:	4618      	mov	r0, r3
 8016754:	f007 f9c8 	bl	801dae8 <GUI_DispStringAt>
 8016758:	e014      	b.n	8016784 <GUI_DrawNumAt+0xe9c>
			else
			{
				GUI_DispStringAt(sign, X, y);
 801675a:	f9b7 10ee 	ldrsh.w	r1, [r7, #238]	; 0xee
 801675e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8016762:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8016766:	4618      	mov	r0, r3
 8016768:	f007 f9be 	bl	801dae8 <GUI_DispStringAt>
				GUI_DispStringAt(numToDisplay, X + xSize, y);
 801676c:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 8016770:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016774:	18d1      	adds	r1, r2, r3
 8016776:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801677a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801677e:	4618      	mov	r0, r3
 8016780:	f007 f9b2 	bl	801dae8 <GUI_DispStringAt>
			}

			//section of function to write the initString

			if(sizeOfInitString < data->initStringSize)
 8016784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016788:	895b      	ldrh	r3, [r3, #10]
 801678a:	f8b7 20e8 	ldrh.w	r2, [r7, #232]	; 0xe8
 801678e:	429a      	cmp	r2, r3
 8016790:	d23f      	bcs.n	8016812 <GUI_DrawNumAt+0xf2a>
			{
				GUI_SetColor(backColor);
 8016792:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8016796:	f006 fac9 	bl	801cd2c <GUI_SetColor>
				GUI_FillRect(x, y + font->LHeight*0.3, x + sizeOfInitString, y + font->LHeight + font->LHeight*0.8);
 801679a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 801679e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80167a2:	ee07 3a90 	vmov	s15, r3
 80167a6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80167aa:	68bb      	ldr	r3, [r7, #8]
 80167ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80167b0:	ee07 3a90 	vmov	s15, r3
 80167b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80167b8:	ed1f 5b79 	vldr	d5, [pc, #-484]	; 80165d8 <GUI_DrawNumAt+0xcf0>
 80167bc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80167c0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80167c4:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 80167c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80167cc:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 80167d0:	18d1      	adds	r1, r2, r3
 80167d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80167d6:	68ba      	ldr	r2, [r7, #8]
 80167d8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80167dc:	4413      	add	r3, r2
 80167de:	ee07 3a90 	vmov	s15, r3
 80167e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80167e6:	68bb      	ldr	r3, [r7, #8]
 80167e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80167ec:	ee07 3a90 	vmov	s15, r3
 80167f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80167f4:	ed1f 5b86 	vldr	d5, [pc, #-536]	; 80165e0 <GUI_DrawNumAt+0xcf8>
 80167f8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80167fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8016800:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8016804:	ee17 3a90 	vmov	r3, s15
 8016808:	460a      	mov	r2, r1
 801680a:	ee14 1a90 	vmov	r1, s9
 801680e:	f006 fb97 	bl	801cf40 <GUI_FillRect>
			}

			GUI_SetColor(color);
 8016812:	6878      	ldr	r0, [r7, #4]
 8016814:	f006 fa8a 	bl	801cd2c <GUI_SetColor>
			GUI_DispStringAt(initString, x, y);
 8016818:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801681c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8016820:	4619      	mov	r1, r3
 8016822:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8016826:	f007 f95f 	bl	801dae8 <GUI_DispStringAt>

			//section of function to write the endString

			if(sizeOfEndString < data->endStringSize)
 801682a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801682e:	899b      	ldrh	r3, [r3, #12]
 8016830:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	; 0xe4
 8016834:	429a      	cmp	r2, r3
 8016836:	f080 80a5 	bcs.w	8016984 <GUI_DrawNumAt+0x109c>
			{
				GUI_SetColor(backColor);
 801683a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 801683e:	f006 fa75 	bl	801cd2c <GUI_SetColor>

				if(nDecimal)
 8016842:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8016846:	2b00      	cmp	r3, #0
 8016848:	d052      	beq.n	80168f0 <GUI_DrawNumAt+0x1008>
					GUI_FillRect(X + (sizeOfOldString - 1) * xSize + xPointSize, y + font->LHeight*0.3, X + (sizeOfOldString - 1) * xSize + xPointSize + sizeOfEndString, y + font->LHeight + font->LHeight*0.8);
 801684a:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 801684e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8016852:	3b01      	subs	r3, #1
 8016854:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8016858:	fb01 f303 	mul.w	r3, r1, r3
 801685c:	441a      	add	r2, r3
 801685e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016862:	18d0      	adds	r0, r2, r3
 8016864:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016868:	ee07 3a90 	vmov	s15, r3
 801686c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8016870:	68bb      	ldr	r3, [r7, #8]
 8016872:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016876:	ee07 3a90 	vmov	s15, r3
 801687a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801687e:	ed1f 5baa 	vldr	d5, [pc, #-680]	; 80165d8 <GUI_DrawNumAt+0xcf0>
 8016882:	ee27 7b05 	vmul.f64	d7, d7, d5
 8016886:	ee36 7b07 	vadd.f64	d7, d6, d7
 801688a:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 801688e:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 8016892:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8016896:	3b01      	subs	r3, #1
 8016898:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 801689c:	fb01 f303 	mul.w	r3, r1, r3
 80168a0:	441a      	add	r2, r3
 80168a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80168a6:	441a      	add	r2, r3
 80168a8:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80168ac:	18d1      	adds	r1, r2, r3
 80168ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80168b2:	68ba      	ldr	r2, [r7, #8]
 80168b4:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80168b8:	4413      	add	r3, r2
 80168ba:	ee07 3a90 	vmov	s15, r3
 80168be:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80168c2:	68bb      	ldr	r3, [r7, #8]
 80168c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80168c8:	ee07 3a90 	vmov	s15, r3
 80168cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80168d0:	ed1f 5bbd 	vldr	d5, [pc, #-756]	; 80165e0 <GUI_DrawNumAt+0xcf8>
 80168d4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80168d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80168dc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80168e0:	ee17 3a90 	vmov	r3, s15
 80168e4:	460a      	mov	r2, r1
 80168e6:	ee14 1a90 	vmov	r1, s9
 80168ea:	f006 fb29 	bl	801cf40 <GUI_FillRect>
 80168ee:	e049      	b.n	8016984 <GUI_DrawNumAt+0x109c>
				else
					GUI_FillRect(X + sizeOfOldString * xSize, y + font->LHeight*0.3, X + sizeOfOldString * xSize + sizeOfEndString, y + font->LHeight + font->LHeight*0.8);
 80168f0:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 80168f4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80168f8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80168fc:	fb01 f303 	mul.w	r3, r1, r3
 8016900:	18d0      	adds	r0, r2, r3
 8016902:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016906:	ee07 3a90 	vmov	s15, r3
 801690a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801690e:	68bb      	ldr	r3, [r7, #8]
 8016910:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016914:	ee07 3a90 	vmov	s15, r3
 8016918:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801691c:	ed1f 5bd2 	vldr	d5, [pc, #-840]	; 80165d8 <GUI_DrawNumAt+0xcf0>
 8016920:	ee27 7b05 	vmul.f64	d7, d7, d5
 8016924:	ee36 7b07 	vadd.f64	d7, d6, d7
 8016928:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 801692c:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 8016930:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8016934:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8016938:	fb01 f303 	mul.w	r3, r1, r3
 801693c:	441a      	add	r2, r3
 801693e:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8016942:	18d1      	adds	r1, r2, r3
 8016944:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016948:	68ba      	ldr	r2, [r7, #8]
 801694a:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 801694e:	4413      	add	r3, r2
 8016950:	ee07 3a90 	vmov	s15, r3
 8016954:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8016958:	68bb      	ldr	r3, [r7, #8]
 801695a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801695e:	ee07 3a90 	vmov	s15, r3
 8016962:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016966:	ed1f 5be2 	vldr	d5, [pc, #-904]	; 80165e0 <GUI_DrawNumAt+0xcf8>
 801696a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801696e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8016972:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8016976:	ee17 3a90 	vmov	r3, s15
 801697a:	460a      	mov	r2, r1
 801697c:	ee14 1a90 	vmov	r1, s9
 8016980:	f006 fade 	bl	801cf40 <GUI_FillRect>
			}

			GUI_SetColor(color);
 8016984:	6878      	ldr	r0, [r7, #4]
 8016986:	f006 f9d1 	bl	801cd2c <GUI_SetColor>

			if(endString[0] != '\0')
 801698a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801698e:	781b      	ldrb	r3, [r3, #0]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d02b      	beq.n	80169ec <GUI_DrawNumAt+0x1104>
			{
				if(nDecimal)
 8016994:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8016998:	2b00      	cmp	r3, #0
 801699a:	d014      	beq.n	80169c6 <GUI_DrawNumAt+0x10de>
					GUI_DispStringAt(endString, X + (sizeOfString-1) * xSize + xPointSize, y);
 801699c:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 80169a0:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 80169a4:	3b01      	subs	r3, #1
 80169a6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80169aa:	fb01 f303 	mul.w	r3, r1, r3
 80169ae:	441a      	add	r2, r3
 80169b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80169b4:	4413      	add	r3, r2
 80169b6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80169ba:	4619      	mov	r1, r3
 80169bc:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80169c0:	f007 f892 	bl	801dae8 <GUI_DispStringAt>
				else
					GUI_DispStringAt(endString, X + sizeOfString * xSize, y);
			}

			break;
 80169c4:	e012      	b.n	80169ec <GUI_DrawNumAt+0x1104>
					GUI_DispStringAt(endString, X + sizeOfString * xSize, y);
 80169c6:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	; 0xee
 80169ca:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 80169ce:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80169d2:	fb01 f303 	mul.w	r3, r1, r3
 80169d6:	4413      	add	r3, r2
 80169d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80169dc:	4619      	mov	r1, r3
 80169de:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80169e2:	f007 f881 	bl	801dae8 <GUI_DispStringAt>
			break;
 80169e6:	e001      	b.n	80169ec <GUI_DrawNumAt+0x1104>
			break;
 80169e8:	bf00      	nop
 80169ea:	e000      	b.n	80169ee <GUI_DrawNumAt+0x1106>
			break;
 80169ec:	bf00      	nop
	}

	data->stringSize = sizeOfString;
 80169ee:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 80169f2:	b29a      	uxth	r2, r3
 80169f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80169f8:	811a      	strh	r2, [r3, #8]
	data->initStringSize = sizeOfInitString;
 80169fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80169fe:	f8b7 20e8 	ldrh.w	r2, [r7, #232]	; 0xe8
 8016a02:	815a      	strh	r2, [r3, #10]
	data->endStringSize = sizeOfEndString;
 8016a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016a08:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	; 0xe4
 8016a0c:	819a      	strh	r2, [r3, #12]
	data->sign = sign[0];
 8016a0e:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 8016a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016a16:	741a      	strb	r2, [r3, #16]

	END_OF_FUNCTION:;
}
 8016a18:	bf00      	nop
 8016a1a:	bf00      	nop
 8016a1c:	37f0      	adds	r7, #240	; 0xf0
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	ecbd 8b02 	vpop	{d8}
 8016a24:	bdb0      	pop	{r4, r5, r7, pc}
 8016a26:	bf00      	nop

08016a28 <GUI_DrawTimeAt>:
#define TIME_POINTS_CHARATTERS 		1
//#define TIME_CRITICAL_1 			599999	//9:59.999 (9 minutes, 59 seconds, 999 milliseconds) time in milliseconds


void GUI_DrawTimeAt(int16_t x, int16_t y, const GUI_FONT *font, uint32_t color, uint32_t backColor, GUI_DrawTimeAtTypeDef *data, int8_t format, uint8_t nDecimal, uint8_t signEnable, uint8_t alignment)
{
 8016a28:	b590      	push	{r4, r7, lr}
 8016a2a:	b09d      	sub	sp, #116	; 0x74
 8016a2c:	af08      	add	r7, sp, #32
 8016a2e:	60ba      	str	r2, [r7, #8]
 8016a30:	607b      	str	r3, [r7, #4]
 8016a32:	4603      	mov	r3, r0
 8016a34:	81fb      	strh	r3, [r7, #14]
 8016a36:	460b      	mov	r3, r1
 8016a38:	81bb      	strh	r3, [r7, #12]
	GUI_SetBkColor(backColor);
 8016a3a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8016a3c:	f006 f974 	bl	801cd28 <GUI_SetBkColor>
	GUI_SetFont(font);
 8016a40:	68b8      	ldr	r0, [r7, #8]
 8016a42:	f006 f945 	bl	801ccd0 <GUI_SetFont>

	int xPointSize = 0;
 8016a46:	2300      	movs	r3, #0
 8016a48:	633b      	str	r3, [r7, #48]	; 0x30
	font->pfGetCharDistX('.', &xPointSize);		//funziona sul font correntemente settato (occorre settarlo prima di richiamare questa funzione)
 8016a4a:	68bb      	ldr	r3, [r7, #8]
 8016a4c:	685b      	ldr	r3, [r3, #4]
 8016a4e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016a52:	4611      	mov	r1, r2
 8016a54:	202e      	movs	r0, #46	; 0x2e
 8016a56:	4798      	blx	r3

	int xSize = 0;
 8016a58:	2300      	movs	r3, #0
 8016a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	font->pfGetCharDistX('0', &xSize);			//funziona sul font correntemente settato (occorre settarlo prima di richiamare questa funzione)
 8016a5c:	68bb      	ldr	r3, [r7, #8]
 8016a5e:	685b      	ldr	r3, [r3, #4]
 8016a60:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8016a64:	4611      	mov	r1, r2
 8016a66:	2030      	movs	r0, #48	; 0x30
 8016a68:	4798      	blx	r3

	//to avoid bugs due to incorrect input parameters
	nDecimal = max(nDecimal, 0);
	nDecimal = min(nDecimal, 3);
 8016a6a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8016a6e:	2b03      	cmp	r3, #3
 8016a70:	bf28      	it	cs
 8016a72:	2303      	movcs	r3, #3
 8016a74:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

	uint32_t time = 0;
 8016a78:	2300      	movs	r3, #0
 8016a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
	//uint8_t sign = POSITIVE;
	//uint8_t signOld = POSITIVE;

	//sign calculation and abs(time)
	if(data->time < 0)
 8016a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	da04      	bge.n	8016a8e <GUI_DrawTimeAt+0x66>
	{
		//sign = NEGATIVE;
		time = data->time * -1;
 8016a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	425b      	negs	r3, r3
 8016a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016a8c:	e002      	b.n	8016a94 <GUI_DrawTimeAt+0x6c>
	}
	else
		time = data->time;
 8016a8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	64fb      	str	r3, [r7, #76]	; 0x4c

	uint16_t milliseconds = time - (time/1000)*1000;
 8016a94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016a96:	4b74      	ldr	r3, [pc, #464]	; (8016c68 <GUI_DrawTimeAt+0x240>)
 8016a98:	fba3 1302 	umull	r1, r3, r3, r2
 8016a9c:	099b      	lsrs	r3, r3, #6
 8016a9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016aa2:	fb01 f303 	mul.w	r3, r1, r3
 8016aa6:	1ad3      	subs	r3, r2, r3
 8016aa8:	873b      	strh	r3, [r7, #56]	; 0x38

	time /= 1000;
 8016aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016aac:	4a6e      	ldr	r2, [pc, #440]	; (8016c68 <GUI_DrawTimeAt+0x240>)
 8016aae:	fba2 2303 	umull	r2, r3, r2, r3
 8016ab2:	099b      	lsrs	r3, r3, #6
 8016ab4:	64fb      	str	r3, [r7, #76]	; 0x4c

	uint8_t hours = time / 3600;
 8016ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ab8:	4a6c      	ldr	r2, [pc, #432]	; (8016c6c <GUI_DrawTimeAt+0x244>)
 8016aba:	fba2 2303 	umull	r2, r3, r2, r3
 8016abe:	0adb      	lsrs	r3, r3, #11
 8016ac0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint16_t minutes = (time - hours * 3600) / 60;
 8016ac4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016ac8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8016acc:	fb02 f303 	mul.w	r3, r2, r3
 8016ad0:	461a      	mov	r2, r3
 8016ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ad4:	1a9b      	subs	r3, r3, r2
 8016ad6:	4a66      	ldr	r2, [pc, #408]	; (8016c70 <GUI_DrawTimeAt+0x248>)
 8016ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8016adc:	095b      	lsrs	r3, r3, #5
 8016ade:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	uint32_t seconds = (time - hours * 3600) - minutes * 60;
 8016ae2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016ae6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8016aea:	fb02 f303 	mul.w	r3, r2, r3
 8016aee:	461a      	mov	r2, r3
 8016af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016af2:	1a99      	subs	r1, r3, r2
 8016af4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8016af8:	4613      	mov	r3, r2
 8016afa:	011b      	lsls	r3, r3, #4
 8016afc:	1a9b      	subs	r3, r3, r2
 8016afe:	009b      	lsls	r3, r3, #2
 8016b00:	1acb      	subs	r3, r1, r3
 8016b02:	647b      	str	r3, [r7, #68]	; 0x44

	switch(format)
 8016b04:	f997 3068 	ldrsb.w	r3, [r7, #104]	; 0x68
 8016b08:	2b03      	cmp	r3, #3
 8016b0a:	d02b      	beq.n	8016b64 <GUI_DrawTimeAt+0x13c>
 8016b0c:	2b03      	cmp	r3, #3
 8016b0e:	dc15      	bgt.n	8016b3c <GUI_DrawTimeAt+0x114>
 8016b10:	2b01      	cmp	r3, #1
 8016b12:	d002      	beq.n	8016b1a <GUI_DrawTimeAt+0xf2>
 8016b14:	2b02      	cmp	r3, #2
 8016b16:	d003      	beq.n	8016b20 <GUI_DrawTimeAt+0xf8>
 8016b18:	e010      	b.n	8016b3c <GUI_DrawTimeAt+0x114>
	{
		case TIME_FORMAT_SECONDS:
			seconds = time;
 8016b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b1c:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8016b1e:	e022      	b.n	8016b66 <GUI_DrawTimeAt+0x13e>

		case TIME_FORMAT_MINUTES:
			minutes += hours * 60;
 8016b20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016b24:	b29b      	uxth	r3, r3
 8016b26:	461a      	mov	r2, r3
 8016b28:	0112      	lsls	r2, r2, #4
 8016b2a:	1ad3      	subs	r3, r2, r3
 8016b2c:	009b      	lsls	r3, r3, #2
 8016b2e:	b29a      	uxth	r2, r3
 8016b30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016b34:	4413      	add	r3, r2
 8016b36:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			break;
 8016b3a:	e014      	b.n	8016b66 <GUI_DrawTimeAt+0x13e>
			break;

		case TIME_FORMAT_AUTO:
		default:

			if(hours)
 8016b3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d003      	beq.n	8016b4c <GUI_DrawTimeAt+0x124>
				format = TIME_FORMAT_HOURS;
 8016b44:	2303      	movs	r3, #3
 8016b46:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
			else if(minutes)
				format = TIME_FORMAT_MINUTES;
			else
				format = TIME_FORMAT_SECONDS;

			break;
 8016b4a:	e00c      	b.n	8016b66 <GUI_DrawTimeAt+0x13e>
			else if(minutes)
 8016b4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d003      	beq.n	8016b5c <GUI_DrawTimeAt+0x134>
				format = TIME_FORMAT_MINUTES;
 8016b54:	2302      	movs	r3, #2
 8016b56:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
			break;
 8016b5a:	e004      	b.n	8016b66 <GUI_DrawTimeAt+0x13e>
				format = TIME_FORMAT_SECONDS;
 8016b5c:	2301      	movs	r3, #1
 8016b5e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
			break;
 8016b62:	e000      	b.n	8016b66 <GUI_DrawTimeAt+0x13e>
			break;
 8016b64:	bf00      	nop
	}


	milliseconds = milliseconds / MDM_pow(10, 3 - nDecimal);
 8016b66:	8f3c      	ldrh	r4, [r7, #56]	; 0x38
 8016b68:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8016b6c:	f1c3 0303 	rsb	r3, r3, #3
 8016b70:	4619      	mov	r1, r3
 8016b72:	200a      	movs	r0, #10
 8016b74:	f7fd feef 	bl	8014956 <MDM_pow>
 8016b78:	4603      	mov	r3, r0
 8016b7a:	fb94 f3f3 	sdiv	r3, r4, r3
 8016b7e:	873b      	strh	r3, [r7, #56]	; 0x38

	uint8_t charNumberToAdd = 0;
 8016b80:	2300      	movs	r3, #0
 8016b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint16_t shift = 0;
 8016b86:	2300      	movs	r3, #0
 8016b88:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	//uint16_t yPointsCorrection = y - font->LHeight * 0.08;
	uint16_t yPointsCorrection = y;
 8016b8c:	89bb      	ldrh	r3, [r7, #12]
 8016b8e:	86bb      	strh	r3, [r7, #52]	; 0x34

	GUI_DrawNumAtTypeDef variableForSecondsFormat;

	switch(alignment)
 8016b90:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8016b94:	2b01      	cmp	r3, #1
 8016b96:	d004      	beq.n	8016ba2 <GUI_DrawTimeAt+0x17a>
 8016b98:	2b02      	cmp	r3, #2
 8016b9a:	f000 82a4 	beq.w	80170e6 <GUI_DrawTimeAt+0x6be>
 8016b9e:	f000 bd85 	b.w	80176ac <GUI_DrawTimeAt+0xc84>
	{
		case RIGHT:
			switch(format)
 8016ba2:	f997 3068 	ldrsb.w	r3, [r7, #104]	; 0x68
 8016ba6:	2b01      	cmp	r3, #1
 8016ba8:	d002      	beq.n	8016bb0 <GUI_DrawTimeAt+0x188>
 8016baa:	2b03      	cmp	r3, #3
 8016bac:	d03f      	beq.n	8016c2e <GUI_DrawTimeAt+0x206>
 8016bae:	e181      	b.n	8016eb4 <GUI_DrawTimeAt+0x48c>
			{
				case TIME_FORMAT_SECONDS:

					variableForSecondsFormat.number = ((float)seconds + (float)milliseconds/1000);
 8016bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016bb2:	ee07 3a90 	vmov	s15, r3
 8016bb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016bba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016bbc:	ee07 3a90 	vmov	s15, r3
 8016bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016bc4:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 8016c74 <GUI_DrawTimeAt+0x24c>
 8016bc8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8016bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016bd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016bd4:	ed87 7b04 	vstr	d7, [r7, #16]
					variableForSecondsFormat.sign = 0;
 8016bd8:	2300      	movs	r3, #0
 8016bda:	f887 3020 	strb.w	r3, [r7, #32]
					variableForSecondsFormat.stringSize = data->sizeOld/xSize;
 8016bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016be0:	889b      	ldrh	r3, [r3, #4]
 8016be2:	461a      	mov	r2, r3
 8016be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016be6:	fb92 f3f3 	sdiv	r3, r2, r3
 8016bea:	b29b      	uxth	r3, r3
 8016bec:	833b      	strh	r3, [r7, #24]
					variableForSecondsFormat.endStringSize = 0;
 8016bee:	2300      	movs	r3, #0
 8016bf0:	83bb      	strh	r3, [r7, #28]
					variableForSecondsFormat.initStringSize = 0;
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	837b      	strh	r3, [r7, #26]
					variableForSecondsFormat.sign = '+';
 8016bf6:	232b      	movs	r3, #43	; 0x2b
 8016bf8:	f887 3020 	strb.w	r3, [r7, #32]

					GUI_DrawNumAtAuto(x, y, font, color, backColor, &variableForSecondsFormat, 3, signEnable, RIGHT, &NO_STRING, &NO_STRING);
 8016bfc:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8016c00:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8016c04:	4b1c      	ldr	r3, [pc, #112]	; (8016c78 <GUI_DrawTimeAt+0x250>)
 8016c06:	9306      	str	r3, [sp, #24]
 8016c08:	4b1b      	ldr	r3, [pc, #108]	; (8016c78 <GUI_DrawTimeAt+0x250>)
 8016c0a:	9305      	str	r3, [sp, #20]
 8016c0c:	2301      	movs	r3, #1
 8016c0e:	9304      	str	r3, [sp, #16]
 8016c10:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8016c14:	9303      	str	r3, [sp, #12]
 8016c16:	2303      	movs	r3, #3
 8016c18:	9302      	str	r3, [sp, #8]
 8016c1a:	f107 0310 	add.w	r3, r7, #16
 8016c1e:	9301      	str	r3, [sp, #4]
 8016c20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016c22:	9300      	str	r3, [sp, #0]
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	68ba      	ldr	r2, [r7, #8]
 8016c28:	f7fe fb0a 	bl	8015240 <GUI_DrawNumAtAuto>

					break;
 8016c2c:	e259      	b.n	80170e2 <GUI_DrawTimeAt+0x6ba>

				case TIME_FORMAT_HOURS:

					if(hours == 0)
 8016c2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d103      	bne.n	8016c3e <GUI_DrawTimeAt+0x216>
						charNumberToAdd = 1;
 8016c36:	2301      	movs	r3, #1
 8016c38:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016c3c:	e027      	b.n	8016c8e <GUI_DrawTimeAt+0x266>
					else
					{
						for(uint8_t i = 1; i < 5; i++)
 8016c3e:	2301      	movs	r3, #1
 8016c40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8016c44:	e01f      	b.n	8016c86 <GUI_DrawTimeAt+0x25e>
						{
							if(hours < MDM_pow(10, i))
 8016c46:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8016c4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016c4e:	4619      	mov	r1, r3
 8016c50:	200a      	movs	r0, #10
 8016c52:	f7fd fe80 	bl	8014956 <MDM_pow>
 8016c56:	4603      	mov	r3, r0
 8016c58:	429c      	cmp	r4, r3
 8016c5a:	da0f      	bge.n	8016c7c <GUI_DrawTimeAt+0x254>
							{
								charNumberToAdd = i;
 8016c5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016c60:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
								break;
 8016c64:	e013      	b.n	8016c8e <GUI_DrawTimeAt+0x266>
 8016c66:	bf00      	nop
 8016c68:	10624dd3 	.word	0x10624dd3
 8016c6c:	91a2b3c5 	.word	0x91a2b3c5
 8016c70:	88888889 	.word	0x88888889
 8016c74:	447a0000 	.word	0x447a0000
 8016c78:	20006a9c 	.word	0x20006a9c
						for(uint8_t i = 1; i < 5; i++)
 8016c7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016c80:	3301      	adds	r3, #1
 8016c82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8016c86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016c8a:	2b04      	cmp	r3, #4
 8016c8c:	d9db      	bls.n	8016c46 <GUI_DrawTimeAt+0x21e>
							}
						}
					}

					if((xSize * (charNumberToAdd + 4 + nDecimal) + xPointSize * 2) < data->sizeOld)
 8016c8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016c92:	1d1a      	adds	r2, r3, #4
 8016c94:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8016c98:	4413      	add	r3, r2
 8016c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016c9c:	fb03 f202 	mul.w	r2, r3, r2
 8016ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ca2:	005b      	lsls	r3, r3, #1
 8016ca4:	4413      	add	r3, r2
 8016ca6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016ca8:	8892      	ldrh	r2, [r2, #4]
 8016caa:	4293      	cmp	r3, r2
 8016cac:	da3e      	bge.n	8016d2c <GUI_DrawTimeAt+0x304>
					{
						GUI_SetColor(backColor);
 8016cae:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8016cb0:	f006 f83c 	bl	801cd2c <GUI_SetColor>
						GUI_FillRect(x - data->sizeOld, y + font->LHeight*0.3, x, y + font->LHeight + font->LHeight*0.8);
 8016cb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016cb8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016cba:	8892      	ldrh	r2, [r2, #4]
 8016cbc:	1a98      	subs	r0, r3, r2
 8016cbe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016cc2:	ee07 3a90 	vmov	s15, r3
 8016cc6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8016cca:	68bb      	ldr	r3, [r7, #8]
 8016ccc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016cd0:	ee07 3a90 	vmov	s15, r3
 8016cd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016cd8:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8016ef0 <GUI_DrawTimeAt+0x4c8>
 8016cdc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8016ce0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8016ce4:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 8016ce8:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8016cec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016cf0:	68ba      	ldr	r2, [r7, #8]
 8016cf2:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8016cf6:	4413      	add	r3, r2
 8016cf8:	ee07 3a90 	vmov	s15, r3
 8016cfc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8016d00:	68bb      	ldr	r3, [r7, #8]
 8016d02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016d06:	ee07 3a90 	vmov	s15, r3
 8016d0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016d0e:	ed9f 5b7a 	vldr	d5, [pc, #488]	; 8016ef8 <GUI_DrawTimeAt+0x4d0>
 8016d12:	ee27 7b05 	vmul.f64	d7, d7, d5
 8016d16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8016d1a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8016d1e:	ee17 3a90 	vmov	r3, s15
 8016d22:	460a      	mov	r2, r1
 8016d24:	ee14 1a90 	vmov	r1, s9
 8016d28:	f006 f90a 	bl	801cf40 <GUI_FillRect>
					}

					GUI_SetColor(color);
 8016d2c:	6878      	ldr	r0, [r7, #4]
 8016d2e:	f005 fffd 	bl	801cd2c <GUI_SetColor>


					GUI_DispDecAt(hours, x - (xSize * (charNumberToAdd + 4 + nDecimal) + xPointSize * 3), y, charNumberToAdd);
 8016d32:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8016d36:	89fa      	ldrh	r2, [r7, #14]
 8016d38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016d3c:	1d19      	adds	r1, r3, #4
 8016d3e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8016d42:	440b      	add	r3, r1
 8016d44:	b299      	uxth	r1, r3
 8016d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d48:	b29b      	uxth	r3, r3
 8016d4a:	fb11 f303 	smulbb	r3, r1, r3
 8016d4e:	b299      	uxth	r1, r3
 8016d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d52:	b29b      	uxth	r3, r3
 8016d54:	461c      	mov	r4, r3
 8016d56:	0064      	lsls	r4, r4, #1
 8016d58:	4423      	add	r3, r4
 8016d5a:	b29b      	uxth	r3, r3
 8016d5c:	440b      	add	r3, r1
 8016d5e:	b29b      	uxth	r3, r3
 8016d60:	1ad3      	subs	r3, r2, r3
 8016d62:	b29b      	uxth	r3, r3
 8016d64:	b219      	sxth	r1, r3
 8016d66:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016d6a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8016d6e:	f005 feed 	bl	801cb4c <GUI_DispDecAt>
					GUI_DispStringAt(":", x - (xSize * (4 + nDecimal) + xPointSize * 3), yPointsCorrection);
 8016d72:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8016d76:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8016d7a:	3304      	adds	r3, #4
 8016d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016d7e:	fb02 f003 	mul.w	r0, r2, r3
 8016d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d84:	4613      	mov	r3, r2
 8016d86:	005b      	lsls	r3, r3, #1
 8016d88:	4413      	add	r3, r2
 8016d8a:	4403      	add	r3, r0
 8016d8c:	1acb      	subs	r3, r1, r3
 8016d8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8016d90:	4619      	mov	r1, r3
 8016d92:	485b      	ldr	r0, [pc, #364]	; (8016f00 <GUI_DrawTimeAt+0x4d8>)
 8016d94:	f006 fea8 	bl	801dae8 <GUI_DispStringAt>
					GUI_DispDecAt(minutes, x - (xSize * (4 + nDecimal) + xPointSize * 2), y, 2);
 8016d98:	f8b7 004a 	ldrh.w	r0, [r7, #74]	; 0x4a
 8016d9c:	89fa      	ldrh	r2, [r7, #14]
 8016d9e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8016da2:	3304      	adds	r3, #4
 8016da4:	b299      	uxth	r1, r3
 8016da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016da8:	b29b      	uxth	r3, r3
 8016daa:	fb11 f303 	smulbb	r3, r1, r3
 8016dae:	b299      	uxth	r1, r3
 8016db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016db2:	b29b      	uxth	r3, r3
 8016db4:	005b      	lsls	r3, r3, #1
 8016db6:	b29b      	uxth	r3, r3
 8016db8:	440b      	add	r3, r1
 8016dba:	b29b      	uxth	r3, r3
 8016dbc:	1ad3      	subs	r3, r2, r3
 8016dbe:	b29b      	uxth	r3, r3
 8016dc0:	b219      	sxth	r1, r3
 8016dc2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8016dc6:	2302      	movs	r3, #2
 8016dc8:	f005 fec0 	bl	801cb4c <GUI_DispDecAt>
					GUI_DispStringAt(":", x - (xSize * (2 + nDecimal) + xPointSize * 2), yPointsCorrection);
 8016dcc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8016dd0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8016dd4:	3302      	adds	r3, #2
 8016dd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016dd8:	fb03 f101 	mul.w	r1, r3, r1
 8016ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dde:	005b      	lsls	r3, r3, #1
 8016de0:	440b      	add	r3, r1
 8016de2:	1ad3      	subs	r3, r2, r3
 8016de4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8016de6:	4619      	mov	r1, r3
 8016de8:	4845      	ldr	r0, [pc, #276]	; (8016f00 <GUI_DrawTimeAt+0x4d8>)
 8016dea:	f006 fe7d 	bl	801dae8 <GUI_DispStringAt>
					GUI_DispDecAt(seconds, x - (xSize * (2 + nDecimal) + xPointSize), y, 2);
 8016dee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016df0:	89fa      	ldrh	r2, [r7, #14]
 8016df2:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8016df6:	3302      	adds	r3, #2
 8016df8:	b299      	uxth	r1, r3
 8016dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dfc:	b29b      	uxth	r3, r3
 8016dfe:	fb11 f303 	smulbb	r3, r1, r3
 8016e02:	b299      	uxth	r1, r3
 8016e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e06:	b29b      	uxth	r3, r3
 8016e08:	440b      	add	r3, r1
 8016e0a:	b29b      	uxth	r3, r3
 8016e0c:	1ad3      	subs	r3, r2, r3
 8016e0e:	b29b      	uxth	r3, r3
 8016e10:	b219      	sxth	r1, r3
 8016e12:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8016e16:	2302      	movs	r3, #2
 8016e18:	f005 fe98 	bl	801cb4c <GUI_DispDecAt>

					if(nDecimal)
 8016e1c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d037      	beq.n	8016e94 <GUI_DrawTimeAt+0x46c>
					{
						GUI_DispStringAt(".", x - (xSize * nDecimal + xPointSize), y);
 8016e24:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8016e28:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8016e2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016e2e:	fb03 f101 	mul.w	r1, r3, r1
 8016e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e34:	440b      	add	r3, r1
 8016e36:	1ad3      	subs	r3, r2, r3
 8016e38:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8016e3c:	4619      	mov	r1, r3
 8016e3e:	4831      	ldr	r0, [pc, #196]	; (8016f04 <GUI_DrawTimeAt+0x4dc>)
 8016e40:	f006 fe52 	bl	801dae8 <GUI_DispStringAt>
						GUI_DispDecAt(milliseconds, x - (xSize * nDecimal), y, nDecimal);
 8016e44:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8016e46:	89fa      	ldrh	r2, [r7, #14]
 8016e48:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8016e4c:	b299      	uxth	r1, r3
 8016e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e50:	b29b      	uxth	r3, r3
 8016e52:	fb11 f303 	smulbb	r3, r1, r3
 8016e56:	b29b      	uxth	r3, r3
 8016e58:	1ad3      	subs	r3, r2, r3
 8016e5a:	b29b      	uxth	r3, r3
 8016e5c:	b219      	sxth	r1, r3
 8016e5e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8016e62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8016e66:	f005 fe71 	bl	801cb4c <GUI_DispDecAt>

						data->sizeOld = xSize * (charNumberToAdd + 2 + nDecimal) + xPointSize * 2;
 8016e6a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016e6e:	1c9a      	adds	r2, r3, #2
 8016e70:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8016e74:	4413      	add	r3, r2
 8016e76:	b29a      	uxth	r2, r3
 8016e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e7a:	b29b      	uxth	r3, r3
 8016e7c:	fb12 f303 	smulbb	r3, r2, r3
 8016e80:	b29a      	uxth	r2, r3
 8016e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e84:	b29b      	uxth	r3, r3
 8016e86:	005b      	lsls	r3, r3, #1
 8016e88:	b29b      	uxth	r3, r3
 8016e8a:	4413      	add	r3, r2
 8016e8c:	b29a      	uxth	r2, r3
 8016e8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016e90:	809a      	strh	r2, [r3, #4]
					}
					else
						data->sizeOld = xSize * (charNumberToAdd + 2) + xPointSize;

					break;
 8016e92:	e126      	b.n	80170e2 <GUI_DrawTimeAt+0x6ba>
						data->sizeOld = xSize * (charNumberToAdd + 2) + xPointSize;
 8016e94:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016e98:	3302      	adds	r3, #2
 8016e9a:	b29a      	uxth	r2, r3
 8016e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e9e:	b29b      	uxth	r3, r3
 8016ea0:	fb12 f303 	smulbb	r3, r2, r3
 8016ea4:	b29a      	uxth	r2, r3
 8016ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ea8:	b29b      	uxth	r3, r3
 8016eaa:	4413      	add	r3, r2
 8016eac:	b29a      	uxth	r2, r3
 8016eae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016eb0:	809a      	strh	r2, [r3, #4]
					break;
 8016eb2:	e116      	b.n	80170e2 <GUI_DrawTimeAt+0x6ba>

				case TIME_FORMAT_MINUTES:
				default:

					if(minutes == 0)
 8016eb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d103      	bne.n	8016ec4 <GUI_DrawTimeAt+0x49c>
						charNumberToAdd = 1;
 8016ebc:	2301      	movs	r3, #1
 8016ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ec2:	e02a      	b.n	8016f1a <GUI_DrawTimeAt+0x4f2>
					else
					{
						for(uint8_t i = 1; i < 10; i++)
 8016ec4:	2301      	movs	r3, #1
 8016ec6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8016eca:	e022      	b.n	8016f12 <GUI_DrawTimeAt+0x4ea>
						{
							if(minutes < MDM_pow(10, i))
 8016ecc:	f8b7 404a 	ldrh.w	r4, [r7, #74]	; 0x4a
 8016ed0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8016ed4:	4619      	mov	r1, r3
 8016ed6:	200a      	movs	r0, #10
 8016ed8:	f7fd fd3d 	bl	8014956 <MDM_pow>
 8016edc:	4603      	mov	r3, r0
 8016ede:	429c      	cmp	r4, r3
 8016ee0:	da12      	bge.n	8016f08 <GUI_DrawTimeAt+0x4e0>
							{
								charNumberToAdd = i;
 8016ee2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8016ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
								break;
 8016eea:	e016      	b.n	8016f1a <GUI_DrawTimeAt+0x4f2>
 8016eec:	f3af 8000 	nop.w
 8016ef0:	33333333 	.word	0x33333333
 8016ef4:	3fd33333 	.word	0x3fd33333
 8016ef8:	9999999a 	.word	0x9999999a
 8016efc:	3fe99999 	.word	0x3fe99999
 8016f00:	08022744 	.word	0x08022744
 8016f04:	08022748 	.word	0x08022748
						for(uint8_t i = 1; i < 10; i++)
 8016f08:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8016f0c:	3301      	adds	r3, #1
 8016f0e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8016f12:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8016f16:	2b09      	cmp	r3, #9
 8016f18:	d9d8      	bls.n	8016ecc <GUI_DrawTimeAt+0x4a4>
							}
						}
					}

					if((xSize * (charNumberToAdd + 2 + nDecimal) + xPointSize * 2) < data->sizeOld)
 8016f1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016f1e:	1c9a      	adds	r2, r3, #2
 8016f20:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8016f24:	4413      	add	r3, r2
 8016f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f28:	fb03 f202 	mul.w	r2, r3, r2
 8016f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f2e:	005b      	lsls	r3, r3, #1
 8016f30:	4413      	add	r3, r2
 8016f32:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016f34:	8892      	ldrh	r2, [r2, #4]
 8016f36:	4293      	cmp	r3, r2
 8016f38:	da3e      	bge.n	8016fb8 <GUI_DrawTimeAt+0x590>
					{
						GUI_SetColor(backColor);
 8016f3a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8016f3c:	f005 fef6 	bl	801cd2c <GUI_SetColor>
						GUI_FillRect(x - data->sizeOld, y + font->LHeight*0.3, x, y + font->LHeight + font->LHeight*0.8);
 8016f40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016f44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016f46:	8892      	ldrh	r2, [r2, #4]
 8016f48:	1a98      	subs	r0, r3, r2
 8016f4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016f4e:	ee07 3a90 	vmov	s15, r3
 8016f52:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8016f56:	68bb      	ldr	r3, [r7, #8]
 8016f58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016f5c:	ee07 3a90 	vmov	s15, r3
 8016f60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016f64:	ed9f 5b8e 	vldr	d5, [pc, #568]	; 80171a0 <GUI_DrawTimeAt+0x778>
 8016f68:	ee27 7b05 	vmul.f64	d7, d7, d5
 8016f6c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8016f70:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 8016f74:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8016f78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016f7c:	68ba      	ldr	r2, [r7, #8]
 8016f7e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8016f82:	4413      	add	r3, r2
 8016f84:	ee07 3a90 	vmov	s15, r3
 8016f88:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8016f8c:	68bb      	ldr	r3, [r7, #8]
 8016f8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016f92:	ee07 3a90 	vmov	s15, r3
 8016f96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016f9a:	ed9f 5b83 	vldr	d5, [pc, #524]	; 80171a8 <GUI_DrawTimeAt+0x780>
 8016f9e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8016fa2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8016fa6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8016faa:	ee17 3a90 	vmov	r3, s15
 8016fae:	460a      	mov	r2, r1
 8016fb0:	ee14 1a90 	vmov	r1, s9
 8016fb4:	f005 ffc4 	bl	801cf40 <GUI_FillRect>
					}

					GUI_SetColor(color);
 8016fb8:	6878      	ldr	r0, [r7, #4]
 8016fba:	f005 feb7 	bl	801cd2c <GUI_SetColor>

					GUI_DispDecAt(minutes, x - (xSize * (charNumberToAdd + 2 + nDecimal) + xPointSize * 2), y, charNumberToAdd);
 8016fbe:	f8b7 004a 	ldrh.w	r0, [r7, #74]	; 0x4a
 8016fc2:	89fa      	ldrh	r2, [r7, #14]
 8016fc4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016fc8:	1c99      	adds	r1, r3, #2
 8016fca:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8016fce:	440b      	add	r3, r1
 8016fd0:	b299      	uxth	r1, r3
 8016fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fd4:	b29b      	uxth	r3, r3
 8016fd6:	fb11 f303 	smulbb	r3, r1, r3
 8016fda:	b299      	uxth	r1, r3
 8016fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fde:	b29b      	uxth	r3, r3
 8016fe0:	005b      	lsls	r3, r3, #1
 8016fe2:	b29b      	uxth	r3, r3
 8016fe4:	440b      	add	r3, r1
 8016fe6:	b29b      	uxth	r3, r3
 8016fe8:	1ad3      	subs	r3, r2, r3
 8016fea:	b29b      	uxth	r3, r3
 8016fec:	b219      	sxth	r1, r3
 8016fee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016ff2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8016ff6:	f005 fda9 	bl	801cb4c <GUI_DispDecAt>
					GUI_DispStringAt(":", x - (xSize * (2 + nDecimal) + xPointSize * 2), yPointsCorrection);
 8016ffa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8016ffe:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8017002:	3302      	adds	r3, #2
 8017004:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017006:	fb03 f101 	mul.w	r1, r3, r1
 801700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801700c:	005b      	lsls	r3, r3, #1
 801700e:	440b      	add	r3, r1
 8017010:	1ad3      	subs	r3, r2, r3
 8017012:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8017014:	4619      	mov	r1, r3
 8017016:	4866      	ldr	r0, [pc, #408]	; (80171b0 <GUI_DrawTimeAt+0x788>)
 8017018:	f006 fd66 	bl	801dae8 <GUI_DispStringAt>
					GUI_DispDecAt(seconds, x - (xSize * (2 + nDecimal) + xPointSize), y, 2);
 801701c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801701e:	89fa      	ldrh	r2, [r7, #14]
 8017020:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8017024:	3302      	adds	r3, #2
 8017026:	b299      	uxth	r1, r3
 8017028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801702a:	b29b      	uxth	r3, r3
 801702c:	fb11 f303 	smulbb	r3, r1, r3
 8017030:	b299      	uxth	r1, r3
 8017032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017034:	b29b      	uxth	r3, r3
 8017036:	440b      	add	r3, r1
 8017038:	b29b      	uxth	r3, r3
 801703a:	1ad3      	subs	r3, r2, r3
 801703c:	b29b      	uxth	r3, r3
 801703e:	b219      	sxth	r1, r3
 8017040:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8017044:	2302      	movs	r3, #2
 8017046:	f005 fd81 	bl	801cb4c <GUI_DispDecAt>

					if(nDecimal)
 801704a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 801704e:	2b00      	cmp	r3, #0
 8017050:	d037      	beq.n	80170c2 <GUI_DrawTimeAt+0x69a>
					{
						GUI_DispStringAt(".", x - (xSize * nDecimal + xPointSize), y);
 8017052:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8017056:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 801705a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801705c:	fb03 f101 	mul.w	r1, r3, r1
 8017060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017062:	440b      	add	r3, r1
 8017064:	1ad3      	subs	r3, r2, r3
 8017066:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801706a:	4619      	mov	r1, r3
 801706c:	4851      	ldr	r0, [pc, #324]	; (80171b4 <GUI_DrawTimeAt+0x78c>)
 801706e:	f006 fd3b 	bl	801dae8 <GUI_DispStringAt>
						GUI_DispDecAt(milliseconds, x - (xSize * nDecimal), y, nDecimal);
 8017072:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8017074:	89fa      	ldrh	r2, [r7, #14]
 8017076:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 801707a:	b299      	uxth	r1, r3
 801707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801707e:	b29b      	uxth	r3, r3
 8017080:	fb11 f303 	smulbb	r3, r1, r3
 8017084:	b29b      	uxth	r3, r3
 8017086:	1ad3      	subs	r3, r2, r3
 8017088:	b29b      	uxth	r3, r3
 801708a:	b219      	sxth	r1, r3
 801708c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8017090:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8017094:	f005 fd5a 	bl	801cb4c <GUI_DispDecAt>

						data->sizeOld = xSize * (charNumberToAdd + 2 + nDecimal) + xPointSize * 2;
 8017098:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801709c:	1c9a      	adds	r2, r3, #2
 801709e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80170a2:	4413      	add	r3, r2
 80170a4:	b29a      	uxth	r2, r3
 80170a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170a8:	b29b      	uxth	r3, r3
 80170aa:	fb12 f303 	smulbb	r3, r2, r3
 80170ae:	b29a      	uxth	r2, r3
 80170b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b2:	b29b      	uxth	r3, r3
 80170b4:	005b      	lsls	r3, r3, #1
 80170b6:	b29b      	uxth	r3, r3
 80170b8:	4413      	add	r3, r2
 80170ba:	b29a      	uxth	r2, r3
 80170bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80170be:	809a      	strh	r2, [r3, #4]
					}
					else
						data->sizeOld = xSize * (charNumberToAdd + 2) + xPointSize;

				break;
 80170c0:	e00e      	b.n	80170e0 <GUI_DrawTimeAt+0x6b8>
						data->sizeOld = xSize * (charNumberToAdd + 2) + xPointSize;
 80170c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80170c6:	3302      	adds	r3, #2
 80170c8:	b29a      	uxth	r2, r3
 80170ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170cc:	b29b      	uxth	r3, r3
 80170ce:	fb12 f303 	smulbb	r3, r2, r3
 80170d2:	b29a      	uxth	r2, r3
 80170d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170d6:	b29b      	uxth	r3, r3
 80170d8:	4413      	add	r3, r2
 80170da:	b29a      	uxth	r2, r3
 80170dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80170de:	809a      	strh	r2, [r3, #4]
				break;
 80170e0:	bf00      	nop
			}
			break;
 80170e2:	f000 bd6d 	b.w	8017bc0 <GUI_DrawTimeAt+0x1198>


		case CENTER:
			switch(format)
 80170e6:	f997 3068 	ldrsb.w	r3, [r7, #104]	; 0x68
 80170ea:	2b01      	cmp	r3, #1
 80170ec:	d002      	beq.n	80170f4 <GUI_DrawTimeAt+0x6cc>
 80170ee:	2b03      	cmp	r3, #3
 80170f0:	d037      	beq.n	8017162 <GUI_DrawTimeAt+0x73a>
 80170f2:	e1a5      	b.n	8017440 <GUI_DrawTimeAt+0xa18>
			{
				case TIME_FORMAT_SECONDS:

					variableForSecondsFormat.number = ((float)seconds + (float)milliseconds/1000);
 80170f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80170f6:	ee07 3a90 	vmov	s15, r3
 80170fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80170fe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017100:	ee07 3a90 	vmov	s15, r3
 8017104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017108:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 80171b8 <GUI_DrawTimeAt+0x790>
 801710c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8017110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017114:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017118:	ed87 7b04 	vstr	d7, [r7, #16]
					variableForSecondsFormat.stringSize = data->sizeOld;
 801711c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801711e:	889b      	ldrh	r3, [r3, #4]
 8017120:	833b      	strh	r3, [r7, #24]
					variableForSecondsFormat.endStringSize = 0;
 8017122:	2300      	movs	r3, #0
 8017124:	83bb      	strh	r3, [r7, #28]
					variableForSecondsFormat.initStringSize = 0;
 8017126:	2300      	movs	r3, #0
 8017128:	837b      	strh	r3, [r7, #26]
					variableForSecondsFormat.sign = '+';
 801712a:	232b      	movs	r3, #43	; 0x2b
 801712c:	f887 3020 	strb.w	r3, [r7, #32]

					GUI_DrawNumAtAuto(x, y, font, color, backColor, &variableForSecondsFormat, 3, signEnable, CENTER, &NO_STRING, &NO_STRING);
 8017130:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8017134:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8017138:	4b20      	ldr	r3, [pc, #128]	; (80171bc <GUI_DrawTimeAt+0x794>)
 801713a:	9306      	str	r3, [sp, #24]
 801713c:	4b1f      	ldr	r3, [pc, #124]	; (80171bc <GUI_DrawTimeAt+0x794>)
 801713e:	9305      	str	r3, [sp, #20]
 8017140:	2302      	movs	r3, #2
 8017142:	9304      	str	r3, [sp, #16]
 8017144:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8017148:	9303      	str	r3, [sp, #12]
 801714a:	2303      	movs	r3, #3
 801714c:	9302      	str	r3, [sp, #8]
 801714e:	f107 0310 	add.w	r3, r7, #16
 8017152:	9301      	str	r3, [sp, #4]
 8017154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017156:	9300      	str	r3, [sp, #0]
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	68ba      	ldr	r2, [r7, #8]
 801715c:	f7fe f870 	bl	8015240 <GUI_DrawNumAtAuto>

					break;
 8017160:	e2a3      	b.n	80176aa <GUI_DrawTimeAt+0xc82>

				case TIME_FORMAT_HOURS:

					if(hours == 0)
 8017162:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017166:	2b00      	cmp	r3, #0
 8017168:	d103      	bne.n	8017172 <GUI_DrawTimeAt+0x74a>
						charNumberToAdd = 1;
 801716a:	2301      	movs	r3, #1
 801716c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017170:	e02f      	b.n	80171d2 <GUI_DrawTimeAt+0x7aa>
					else
					{
						for(uint8_t i = 1; i < 10; i++)
 8017172:	2301      	movs	r3, #1
 8017174:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8017178:	e027      	b.n	80171ca <GUI_DrawTimeAt+0x7a2>
						{
							if(hours < MDM_pow(10, i))
 801717a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 801717e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8017182:	4619      	mov	r1, r3
 8017184:	200a      	movs	r0, #10
 8017186:	f7fd fbe6 	bl	8014956 <MDM_pow>
 801718a:	4603      	mov	r3, r0
 801718c:	429c      	cmp	r4, r3
 801718e:	da17      	bge.n	80171c0 <GUI_DrawTimeAt+0x798>
							{
								charNumberToAdd = i;
 8017190:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8017194:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
								break;
 8017198:	e01b      	b.n	80171d2 <GUI_DrawTimeAt+0x7aa>
 801719a:	bf00      	nop
 801719c:	f3af 8000 	nop.w
 80171a0:	33333333 	.word	0x33333333
 80171a4:	3fd33333 	.word	0x3fd33333
 80171a8:	9999999a 	.word	0x9999999a
 80171ac:	3fe99999 	.word	0x3fe99999
 80171b0:	08022744 	.word	0x08022744
 80171b4:	08022748 	.word	0x08022748
 80171b8:	447a0000 	.word	0x447a0000
 80171bc:	20006a9c 	.word	0x20006a9c
						for(uint8_t i = 1; i < 10; i++)
 80171c0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80171c4:	3301      	adds	r3, #1
 80171c6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80171ca:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80171ce:	2b09      	cmp	r3, #9
 80171d0:	d9d3      	bls.n	801717a <GUI_DrawTimeAt+0x752>
							}
						}
					}

					if((xSize * (charNumberToAdd + 4 + nDecimal) + xPointSize * 3) < data->sizeOld)
 80171d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80171d6:	1d1a      	adds	r2, r3, #4
 80171d8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80171dc:	4413      	add	r3, r2
 80171de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80171e0:	fb02 f103 	mul.w	r1, r2, r3
 80171e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171e6:	4613      	mov	r3, r2
 80171e8:	005b      	lsls	r3, r3, #1
 80171ea:	4413      	add	r3, r2
 80171ec:	440b      	add	r3, r1
 80171ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80171f0:	8892      	ldrh	r2, [r2, #4]
 80171f2:	4293      	cmp	r3, r2
 80171f4:	da3e      	bge.n	8017274 <GUI_DrawTimeAt+0x84c>
					{
						GUI_SetColor(backColor);
 80171f6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80171f8:	f005 fd98 	bl	801cd2c <GUI_SetColor>
						GUI_FillRect(x, y + font->LHeight*0.3, x + data->sizeOld, y + font->LHeight + font->LHeight*0.8);
 80171fc:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8017200:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017204:	ee07 3a90 	vmov	s15, r3
 8017208:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801720c:	68bb      	ldr	r3, [r7, #8]
 801720e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8017212:	ee07 3a90 	vmov	s15, r3
 8017216:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801721a:	ed9f 5b97 	vldr	d5, [pc, #604]	; 8017478 <GUI_DrawTimeAt+0xa50>
 801721e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017222:	ee36 7b07 	vadd.f64	d7, d6, d7
 8017226:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 801722a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801722e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017230:	8892      	ldrh	r2, [r2, #4]
 8017232:	1899      	adds	r1, r3, r2
 8017234:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017238:	68ba      	ldr	r2, [r7, #8]
 801723a:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 801723e:	4413      	add	r3, r2
 8017240:	ee07 3a90 	vmov	s15, r3
 8017244:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8017248:	68bb      	ldr	r3, [r7, #8]
 801724a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801724e:	ee07 3a90 	vmov	s15, r3
 8017252:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017256:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 8017480 <GUI_DrawTimeAt+0xa58>
 801725a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801725e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8017262:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8017266:	ee17 3a90 	vmov	r3, s15
 801726a:	460a      	mov	r2, r1
 801726c:	ee14 1a90 	vmov	r1, s9
 8017270:	f005 fe66 	bl	801cf40 <GUI_FillRect>
					}

					GUI_SetColor(color);
 8017274:	6878      	ldr	r0, [r7, #4]
 8017276:	f005 fd59 	bl	801cd2c <GUI_SetColor>

					if(nDecimal)
 801727a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 801727e:	2b00      	cmp	r3, #0
 8017280:	d012      	beq.n	80172a8 <GUI_DrawTimeAt+0x880>
						shift = (xSize * (charNumberToAdd + 4 + nDecimal) + xPointSize * 2) / 2;
 8017282:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017286:	1d1a      	adds	r2, r3, #4
 8017288:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 801728c:	4413      	add	r3, r2
 801728e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017290:	fb03 f202 	mul.w	r2, r3, r2
 8017294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017296:	005b      	lsls	r3, r3, #1
 8017298:	4413      	add	r3, r2
 801729a:	2b00      	cmp	r3, #0
 801729c:	da00      	bge.n	80172a0 <GUI_DrawTimeAt+0x878>
 801729e:	3301      	adds	r3, #1
 80172a0:	105b      	asrs	r3, r3, #1
 80172a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80172a6:	e010      	b.n	80172ca <GUI_DrawTimeAt+0x8a2>
					else
						shift = (xSize * (charNumberToAdd + 4 + nDecimal) + xPointSize) / 2;
 80172a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80172ac:	1d1a      	adds	r2, r3, #4
 80172ae:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80172b2:	4413      	add	r3, r2
 80172b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80172b6:	fb03 f202 	mul.w	r2, r3, r2
 80172ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172bc:	4413      	add	r3, r2
 80172be:	2b00      	cmp	r3, #0
 80172c0:	da00      	bge.n	80172c4 <GUI_DrawTimeAt+0x89c>
 80172c2:	3301      	adds	r3, #1
 80172c4:	105b      	asrs	r3, r3, #1
 80172c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

					x -= shift;
 80172ca:	89fa      	ldrh	r2, [r7, #14]
 80172cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80172d0:	1ad3      	subs	r3, r2, r3
 80172d2:	b29b      	uxth	r3, r3
 80172d4:	81fb      	strh	r3, [r7, #14]

					GUI_DispDecAt(hours, x, y, charNumberToAdd);
 80172d6:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 80172da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80172de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80172e2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80172e6:	f005 fc31 	bl	801cb4c <GUI_DispDecAt>
					GUI_DispStringAt(":", x + xSize * charNumberToAdd, yPointsCorrection);
 80172ea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80172ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80172f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80172f4:	fb01 f303 	mul.w	r3, r1, r3
 80172f8:	4413      	add	r3, r2
 80172fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80172fc:	4619      	mov	r1, r3
 80172fe:	4862      	ldr	r0, [pc, #392]	; (8017488 <GUI_DrawTimeAt+0xa60>)
 8017300:	f006 fbf2 	bl	801dae8 <GUI_DispStringAt>
					GUI_DispDecAt(minutes, x + xSize * charNumberToAdd + xPointSize, y, 2);
 8017304:	f8b7 004a 	ldrh.w	r0, [r7, #74]	; 0x4a
 8017308:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801730c:	b29a      	uxth	r2, r3
 801730e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017310:	b29b      	uxth	r3, r3
 8017312:	fb12 f303 	smulbb	r3, r2, r3
 8017316:	b29a      	uxth	r2, r3
 8017318:	89fb      	ldrh	r3, [r7, #14]
 801731a:	4413      	add	r3, r2
 801731c:	b29a      	uxth	r2, r3
 801731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017320:	b29b      	uxth	r3, r3
 8017322:	4413      	add	r3, r2
 8017324:	b29b      	uxth	r3, r3
 8017326:	b219      	sxth	r1, r3
 8017328:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801732c:	2302      	movs	r3, #2
 801732e:	f005 fc0d 	bl	801cb4c <GUI_DispDecAt>
					GUI_DispStringAt(":", x + xSize * (charNumberToAdd + 2) + xPointSize, yPointsCorrection);
 8017332:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8017336:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801733a:	3302      	adds	r3, #2
 801733c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801733e:	fb01 f303 	mul.w	r3, r1, r3
 8017342:	441a      	add	r2, r3
 8017344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017346:	4413      	add	r3, r2
 8017348:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801734a:	4619      	mov	r1, r3
 801734c:	484e      	ldr	r0, [pc, #312]	; (8017488 <GUI_DrawTimeAt+0xa60>)
 801734e:	f006 fbcb 	bl	801dae8 <GUI_DispStringAt>
					GUI_DispDecAt(seconds, x  + xSize * (charNumberToAdd + 2) + xPointSize * 2, y, 2);
 8017352:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017354:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017358:	3302      	adds	r3, #2
 801735a:	b29a      	uxth	r2, r3
 801735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801735e:	b29b      	uxth	r3, r3
 8017360:	fb12 f303 	smulbb	r3, r2, r3
 8017364:	b29a      	uxth	r2, r3
 8017366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017368:	b29b      	uxth	r3, r3
 801736a:	005b      	lsls	r3, r3, #1
 801736c:	b29b      	uxth	r3, r3
 801736e:	4413      	add	r3, r2
 8017370:	b29a      	uxth	r2, r3
 8017372:	89fb      	ldrh	r3, [r7, #14]
 8017374:	4413      	add	r3, r2
 8017376:	b29b      	uxth	r3, r3
 8017378:	b219      	sxth	r1, r3
 801737a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801737e:	2302      	movs	r3, #2
 8017380:	f005 fbe4 	bl	801cb4c <GUI_DispDecAt>

					if(nDecimal)
 8017384:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8017388:	2b00      	cmp	r3, #0
 801738a:	d044      	beq.n	8017416 <GUI_DrawTimeAt+0x9ee>
					{
						GUI_DispStringAt(".", x + xSize * (charNumberToAdd + 4) + xPointSize * 2, y);
 801738c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8017390:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017394:	3304      	adds	r3, #4
 8017396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017398:	fb01 f303 	mul.w	r3, r1, r3
 801739c:	441a      	add	r2, r3
 801739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173a0:	005b      	lsls	r3, r3, #1
 80173a2:	4413      	add	r3, r2
 80173a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80173a8:	4619      	mov	r1, r3
 80173aa:	4838      	ldr	r0, [pc, #224]	; (801748c <GUI_DrawTimeAt+0xa64>)
 80173ac:	f006 fb9c 	bl	801dae8 <GUI_DispStringAt>
						GUI_DispDecAt(milliseconds, x  + xSize * (charNumberToAdd + 4) + xPointSize * 3, y, nDecimal);
 80173b0:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 80173b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80173b6:	3304      	adds	r3, #4
 80173b8:	b29a      	uxth	r2, r3
 80173ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173bc:	b29b      	uxth	r3, r3
 80173be:	fb12 f303 	smulbb	r3, r2, r3
 80173c2:	b29a      	uxth	r2, r3
 80173c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173c6:	b29b      	uxth	r3, r3
 80173c8:	4619      	mov	r1, r3
 80173ca:	0049      	lsls	r1, r1, #1
 80173cc:	440b      	add	r3, r1
 80173ce:	b29b      	uxth	r3, r3
 80173d0:	4413      	add	r3, r2
 80173d2:	b29a      	uxth	r2, r3
 80173d4:	89fb      	ldrh	r3, [r7, #14]
 80173d6:	4413      	add	r3, r2
 80173d8:	b29b      	uxth	r3, r3
 80173da:	b219      	sxth	r1, r3
 80173dc:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80173e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80173e4:	f005 fbb2 	bl	801cb4c <GUI_DispDecAt>

						data->sizeOld = xSize * (charNumberToAdd + 4 + nDecimal) + xPointSize * 3;
 80173e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80173ec:	1d1a      	adds	r2, r3, #4
 80173ee:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80173f2:	4413      	add	r3, r2
 80173f4:	b29a      	uxth	r2, r3
 80173f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173f8:	b29b      	uxth	r3, r3
 80173fa:	fb12 f303 	smulbb	r3, r2, r3
 80173fe:	b29a      	uxth	r2, r3
 8017400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017402:	b29b      	uxth	r3, r3
 8017404:	4619      	mov	r1, r3
 8017406:	0049      	lsls	r1, r1, #1
 8017408:	440b      	add	r3, r1
 801740a:	b29b      	uxth	r3, r3
 801740c:	4413      	add	r3, r2
 801740e:	b29a      	uxth	r2, r3
 8017410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017412:	809a      	strh	r2, [r3, #4]
					}
					else
						data->sizeOld = xSize * (charNumberToAdd + 4 + nDecimal) + xPointSize * 2;

					break;
 8017414:	e149      	b.n	80176aa <GUI_DrawTimeAt+0xc82>
						data->sizeOld = xSize * (charNumberToAdd + 4 + nDecimal) + xPointSize * 2;
 8017416:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801741a:	1d1a      	adds	r2, r3, #4
 801741c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8017420:	4413      	add	r3, r2
 8017422:	b29a      	uxth	r2, r3
 8017424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017426:	b29b      	uxth	r3, r3
 8017428:	fb12 f303 	smulbb	r3, r2, r3
 801742c:	b29a      	uxth	r2, r3
 801742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017430:	b29b      	uxth	r3, r3
 8017432:	005b      	lsls	r3, r3, #1
 8017434:	b29b      	uxth	r3, r3
 8017436:	4413      	add	r3, r2
 8017438:	b29a      	uxth	r2, r3
 801743a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801743c:	809a      	strh	r2, [r3, #4]
					break;
 801743e:	e134      	b.n	80176aa <GUI_DrawTimeAt+0xc82>

				case TIME_FORMAT_MINUTES:
				default:

					if(minutes == 0)
 8017440:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8017444:	2b00      	cmp	r3, #0
 8017446:	d103      	bne.n	8017450 <GUI_DrawTimeAt+0xa28>
						charNumberToAdd = 1;
 8017448:	2301      	movs	r3, #1
 801744a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801744e:	e028      	b.n	80174a2 <GUI_DrawTimeAt+0xa7a>
					else
					{
						for(uint8_t i = 1; i < 10; i++)
 8017450:	2301      	movs	r3, #1
 8017452:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8017456:	e020      	b.n	801749a <GUI_DrawTimeAt+0xa72>
						{
							if(minutes < MDM_pow(10, i))
 8017458:	f8b7 404a 	ldrh.w	r4, [r7, #74]	; 0x4a
 801745c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017460:	4619      	mov	r1, r3
 8017462:	200a      	movs	r0, #10
 8017464:	f7fd fa77 	bl	8014956 <MDM_pow>
 8017468:	4603      	mov	r3, r0
 801746a:	429c      	cmp	r4, r3
 801746c:	da10      	bge.n	8017490 <GUI_DrawTimeAt+0xa68>
							{
								charNumberToAdd = i;
 801746e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
								break;
 8017476:	e014      	b.n	80174a2 <GUI_DrawTimeAt+0xa7a>
 8017478:	33333333 	.word	0x33333333
 801747c:	3fd33333 	.word	0x3fd33333
 8017480:	9999999a 	.word	0x9999999a
 8017484:	3fe99999 	.word	0x3fe99999
 8017488:	08022744 	.word	0x08022744
 801748c:	08022748 	.word	0x08022748
						for(uint8_t i = 1; i < 10; i++)
 8017490:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017494:	3301      	adds	r3, #1
 8017496:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 801749a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801749e:	2b09      	cmp	r3, #9
 80174a0:	d9da      	bls.n	8017458 <GUI_DrawTimeAt+0xa30>
							}
						}
					}

					if((xSize * (charNumberToAdd + 2 + nDecimal) + xPointSize * 2) < data->sizeOld)
 80174a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80174a6:	1c9a      	adds	r2, r3, #2
 80174a8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80174ac:	4413      	add	r3, r2
 80174ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174b0:	fb03 f202 	mul.w	r2, r3, r2
 80174b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174b6:	005b      	lsls	r3, r3, #1
 80174b8:	4413      	add	r3, r2
 80174ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80174bc:	8892      	ldrh	r2, [r2, #4]
 80174be:	4293      	cmp	r3, r2
 80174c0:	da3e      	bge.n	8017540 <GUI_DrawTimeAt+0xb18>
					{
						GUI_SetColor(backColor);
 80174c2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80174c4:	f005 fc32 	bl	801cd2c <GUI_SetColor>
						GUI_FillRect(x, y + font->LHeight*0.3, x + data->sizeOld, y + font->LHeight + font->LHeight*0.8);
 80174c8:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80174cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80174d0:	ee07 3a90 	vmov	s15, r3
 80174d4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80174d8:	68bb      	ldr	r3, [r7, #8]
 80174da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80174de:	ee07 3a90 	vmov	s15, r3
 80174e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80174e6:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 8017770 <GUI_DrawTimeAt+0xd48>
 80174ea:	ee27 7b05 	vmul.f64	d7, d7, d5
 80174ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80174f2:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 80174f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80174fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80174fc:	8892      	ldrh	r2, [r2, #4]
 80174fe:	1899      	adds	r1, r3, r2
 8017500:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017504:	68ba      	ldr	r2, [r7, #8]
 8017506:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 801750a:	4413      	add	r3, r2
 801750c:	ee07 3a90 	vmov	s15, r3
 8017510:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8017514:	68bb      	ldr	r3, [r7, #8]
 8017516:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801751a:	ee07 3a90 	vmov	s15, r3
 801751e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017522:	ed9f 5b95 	vldr	d5, [pc, #596]	; 8017778 <GUI_DrawTimeAt+0xd50>
 8017526:	ee27 7b05 	vmul.f64	d7, d7, d5
 801752a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801752e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8017532:	ee17 3a90 	vmov	r3, s15
 8017536:	460a      	mov	r2, r1
 8017538:	ee14 1a90 	vmov	r1, s9
 801753c:	f005 fd00 	bl	801cf40 <GUI_FillRect>
					}

					GUI_SetColor(color);
 8017540:	6878      	ldr	r0, [r7, #4]
 8017542:	f005 fbf3 	bl	801cd2c <GUI_SetColor>

					if(nDecimal)
 8017546:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 801754a:	2b00      	cmp	r3, #0
 801754c:	d012      	beq.n	8017574 <GUI_DrawTimeAt+0xb4c>
						shift = (xSize * (charNumberToAdd + 2 + nDecimal) + xPointSize * 2) / 2;
 801754e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017552:	1c9a      	adds	r2, r3, #2
 8017554:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8017558:	4413      	add	r3, r2
 801755a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801755c:	fb03 f202 	mul.w	r2, r3, r2
 8017560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017562:	005b      	lsls	r3, r3, #1
 8017564:	4413      	add	r3, r2
 8017566:	2b00      	cmp	r3, #0
 8017568:	da00      	bge.n	801756c <GUI_DrawTimeAt+0xb44>
 801756a:	3301      	adds	r3, #1
 801756c:	105b      	asrs	r3, r3, #1
 801756e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8017572:	e010      	b.n	8017596 <GUI_DrawTimeAt+0xb6e>
					else
						shift = (xSize * (charNumberToAdd + 2 + nDecimal) + xPointSize) / 2;
 8017574:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017578:	1c9a      	adds	r2, r3, #2
 801757a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 801757e:	4413      	add	r3, r2
 8017580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017582:	fb03 f202 	mul.w	r2, r3, r2
 8017586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017588:	4413      	add	r3, r2
 801758a:	2b00      	cmp	r3, #0
 801758c:	da00      	bge.n	8017590 <GUI_DrawTimeAt+0xb68>
 801758e:	3301      	adds	r3, #1
 8017590:	105b      	asrs	r3, r3, #1
 8017592:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

					x -= shift;
 8017596:	89fa      	ldrh	r2, [r7, #14]
 8017598:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801759c:	1ad3      	subs	r3, r2, r3
 801759e:	b29b      	uxth	r3, r3
 80175a0:	81fb      	strh	r3, [r7, #14]

					GUI_DispDecAt(minutes, x, y, charNumberToAdd);
 80175a2:	f8b7 004a 	ldrh.w	r0, [r7, #74]	; 0x4a
 80175a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80175aa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80175ae:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80175b2:	f005 facb 	bl	801cb4c <GUI_DispDecAt>
					GUI_DispStringAt(":", x + xSize * charNumberToAdd, yPointsCorrection);
 80175b6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80175ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80175be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80175c0:	fb01 f303 	mul.w	r3, r1, r3
 80175c4:	4413      	add	r3, r2
 80175c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80175c8:	4619      	mov	r1, r3
 80175ca:	486d      	ldr	r0, [pc, #436]	; (8017780 <GUI_DrawTimeAt+0xd58>)
 80175cc:	f006 fa8c 	bl	801dae8 <GUI_DispStringAt>
					GUI_DispDecAt(seconds, x  + xSize * charNumberToAdd + xPointSize, y, 2);
 80175d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80175d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80175d6:	b29a      	uxth	r2, r3
 80175d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175da:	b29b      	uxth	r3, r3
 80175dc:	fb12 f303 	smulbb	r3, r2, r3
 80175e0:	b29a      	uxth	r2, r3
 80175e2:	89fb      	ldrh	r3, [r7, #14]
 80175e4:	4413      	add	r3, r2
 80175e6:	b29a      	uxth	r2, r3
 80175e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175ea:	b29b      	uxth	r3, r3
 80175ec:	4413      	add	r3, r2
 80175ee:	b29b      	uxth	r3, r3
 80175f0:	b219      	sxth	r1, r3
 80175f2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80175f6:	2302      	movs	r3, #2
 80175f8:	f005 faa8 	bl	801cb4c <GUI_DispDecAt>

					if(nDecimal)
 80175fc:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8017600:	2b00      	cmp	r3, #0
 8017602:	d03f      	beq.n	8017684 <GUI_DrawTimeAt+0xc5c>
					{
						GUI_DispStringAt(".", x + xSize * (charNumberToAdd + 2) + xPointSize, y);
 8017604:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8017608:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801760c:	3302      	adds	r3, #2
 801760e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017610:	fb01 f303 	mul.w	r3, r1, r3
 8017614:	441a      	add	r2, r3
 8017616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017618:	4413      	add	r3, r2
 801761a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801761e:	4619      	mov	r1, r3
 8017620:	4858      	ldr	r0, [pc, #352]	; (8017784 <GUI_DrawTimeAt+0xd5c>)
 8017622:	f006 fa61 	bl	801dae8 <GUI_DispStringAt>
						GUI_DispDecAt(milliseconds, x  + xSize * (charNumberToAdd + 2) + xPointSize * 2, y, nDecimal);
 8017626:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8017628:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801762c:	3302      	adds	r3, #2
 801762e:	b29a      	uxth	r2, r3
 8017630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017632:	b29b      	uxth	r3, r3
 8017634:	fb12 f303 	smulbb	r3, r2, r3
 8017638:	b29a      	uxth	r2, r3
 801763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801763c:	b29b      	uxth	r3, r3
 801763e:	005b      	lsls	r3, r3, #1
 8017640:	b29b      	uxth	r3, r3
 8017642:	4413      	add	r3, r2
 8017644:	b29a      	uxth	r2, r3
 8017646:	89fb      	ldrh	r3, [r7, #14]
 8017648:	4413      	add	r3, r2
 801764a:	b29b      	uxth	r3, r3
 801764c:	b219      	sxth	r1, r3
 801764e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8017652:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8017656:	f005 fa79 	bl	801cb4c <GUI_DispDecAt>

						data->sizeOld = xSize * (charNumberToAdd + 2 + nDecimal) + xPointSize * 2;
 801765a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801765e:	1c9a      	adds	r2, r3, #2
 8017660:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8017664:	4413      	add	r3, r2
 8017666:	b29a      	uxth	r2, r3
 8017668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801766a:	b29b      	uxth	r3, r3
 801766c:	fb12 f303 	smulbb	r3, r2, r3
 8017670:	b29a      	uxth	r2, r3
 8017672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017674:	b29b      	uxth	r3, r3
 8017676:	005b      	lsls	r3, r3, #1
 8017678:	b29b      	uxth	r3, r3
 801767a:	4413      	add	r3, r2
 801767c:	b29a      	uxth	r2, r3
 801767e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017680:	809a      	strh	r2, [r3, #4]
					}
					else
						data->sizeOld = xSize * (charNumberToAdd + 2 + nDecimal) + xPointSize;

					break;
 8017682:	e011      	b.n	80176a8 <GUI_DrawTimeAt+0xc80>
						data->sizeOld = xSize * (charNumberToAdd + 2 + nDecimal) + xPointSize;
 8017684:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017688:	1c9a      	adds	r2, r3, #2
 801768a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 801768e:	4413      	add	r3, r2
 8017690:	b29a      	uxth	r2, r3
 8017692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017694:	b29b      	uxth	r3, r3
 8017696:	fb12 f303 	smulbb	r3, r2, r3
 801769a:	b29a      	uxth	r2, r3
 801769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801769e:	b29b      	uxth	r3, r3
 80176a0:	4413      	add	r3, r2
 80176a2:	b29a      	uxth	r2, r3
 80176a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80176a6:	809a      	strh	r2, [r3, #4]
					break;
 80176a8:	bf00      	nop
			}
			break;
 80176aa:	e289      	b.n	8017bc0 <GUI_DrawTimeAt+0x1198>


		case LEFT:
		default:
			switch(format)
 80176ac:	f997 3068 	ldrsb.w	r3, [r7, #104]	; 0x68
 80176b0:	2b01      	cmp	r3, #1
 80176b2:	d002      	beq.n	80176ba <GUI_DrawTimeAt+0xc92>
 80176b4:	2b03      	cmp	r3, #3
 80176b6:	d03f      	beq.n	8017738 <GUI_DrawTimeAt+0xd10>
 80176b8:	e179      	b.n	80179ae <GUI_DrawTimeAt+0xf86>
			{
				case TIME_FORMAT_SECONDS:

					variableForSecondsFormat.number = ((float)seconds + (float)milliseconds/1000);
 80176ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80176bc:	ee07 3a90 	vmov	s15, r3
 80176c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80176c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80176c6:	ee07 3a90 	vmov	s15, r3
 80176ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80176ce:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8017788 <GUI_DrawTimeAt+0xd60>
 80176d2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80176d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80176da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80176de:	ed87 7b04 	vstr	d7, [r7, #16]
					variableForSecondsFormat.sign = 0;
 80176e2:	2300      	movs	r3, #0
 80176e4:	f887 3020 	strb.w	r3, [r7, #32]
					variableForSecondsFormat.stringSize = data->sizeOld/xSize;
 80176e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80176ea:	889b      	ldrh	r3, [r3, #4]
 80176ec:	461a      	mov	r2, r3
 80176ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80176f4:	b29b      	uxth	r3, r3
 80176f6:	833b      	strh	r3, [r7, #24]
					variableForSecondsFormat.endStringSize = 0;
 80176f8:	2300      	movs	r3, #0
 80176fa:	83bb      	strh	r3, [r7, #28]
					variableForSecondsFormat.initStringSize = 0;
 80176fc:	2300      	movs	r3, #0
 80176fe:	837b      	strh	r3, [r7, #26]
					variableForSecondsFormat.sign = '+';
 8017700:	232b      	movs	r3, #43	; 0x2b
 8017702:	f887 3020 	strb.w	r3, [r7, #32]

					GUI_DrawNumAtAuto(x, y, font, color, backColor, &variableForSecondsFormat, 3, signEnable, LEFT, &NO_STRING, &NO_STRING);
 8017706:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 801770a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 801770e:	4b1f      	ldr	r3, [pc, #124]	; (801778c <GUI_DrawTimeAt+0xd64>)
 8017710:	9306      	str	r3, [sp, #24]
 8017712:	4b1e      	ldr	r3, [pc, #120]	; (801778c <GUI_DrawTimeAt+0xd64>)
 8017714:	9305      	str	r3, [sp, #20]
 8017716:	2300      	movs	r3, #0
 8017718:	9304      	str	r3, [sp, #16]
 801771a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 801771e:	9303      	str	r3, [sp, #12]
 8017720:	2303      	movs	r3, #3
 8017722:	9302      	str	r3, [sp, #8]
 8017724:	f107 0310 	add.w	r3, r7, #16
 8017728:	9301      	str	r3, [sp, #4]
 801772a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801772c:	9300      	str	r3, [sp, #0]
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	68ba      	ldr	r2, [r7, #8]
 8017732:	f7fd fd85 	bl	8015240 <GUI_DrawNumAtAuto>

					break;
 8017736:	e242      	b.n	8017bbe <GUI_DrawTimeAt+0x1196>

				case TIME_FORMAT_HOURS:

					if(hours == 0)
 8017738:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801773c:	2b00      	cmp	r3, #0
 801773e:	d103      	bne.n	8017748 <GUI_DrawTimeAt+0xd20>
						charNumberToAdd = 1;
 8017740:	2301      	movs	r3, #1
 8017742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017746:	e02c      	b.n	80177a2 <GUI_DrawTimeAt+0xd7a>
					else
					{
						for(uint8_t i = 1; i < 5; i++)
 8017748:	2301      	movs	r3, #1
 801774a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801774e:	e024      	b.n	801779a <GUI_DrawTimeAt+0xd72>
						{
							if(hours < MDM_pow(10, i))
 8017750:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8017754:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017758:	4619      	mov	r1, r3
 801775a:	200a      	movs	r0, #10
 801775c:	f7fd f8fb 	bl	8014956 <MDM_pow>
 8017760:	4603      	mov	r3, r0
 8017762:	429c      	cmp	r4, r3
 8017764:	da14      	bge.n	8017790 <GUI_DrawTimeAt+0xd68>
							{
								charNumberToAdd = i;
 8017766:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801776a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
								break;
 801776e:	e018      	b.n	80177a2 <GUI_DrawTimeAt+0xd7a>
 8017770:	33333333 	.word	0x33333333
 8017774:	3fd33333 	.word	0x3fd33333
 8017778:	9999999a 	.word	0x9999999a
 801777c:	3fe99999 	.word	0x3fe99999
 8017780:	08022744 	.word	0x08022744
 8017784:	08022748 	.word	0x08022748
 8017788:	447a0000 	.word	0x447a0000
 801778c:	20006a9c 	.word	0x20006a9c
						for(uint8_t i = 1; i < 5; i++)
 8017790:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017794:	3301      	adds	r3, #1
 8017796:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801779a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801779e:	2b04      	cmp	r3, #4
 80177a0:	d9d6      	bls.n	8017750 <GUI_DrawTimeAt+0xd28>
							}
						}
					}

					if((xSize * (charNumberToAdd + 4 + nDecimal) + xPointSize * 3) < data->sizeOld)
 80177a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80177a6:	1d1a      	adds	r2, r3, #4
 80177a8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80177ac:	4413      	add	r3, r2
 80177ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80177b0:	fb02 f103 	mul.w	r1, r2, r3
 80177b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80177b6:	4613      	mov	r3, r2
 80177b8:	005b      	lsls	r3, r3, #1
 80177ba:	4413      	add	r3, r2
 80177bc:	440b      	add	r3, r1
 80177be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80177c0:	8892      	ldrh	r2, [r2, #4]
 80177c2:	4293      	cmp	r3, r2
 80177c4:	da3e      	bge.n	8017844 <GUI_DrawTimeAt+0xe1c>
					{
						GUI_SetColor(backColor);
 80177c6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80177c8:	f005 fab0 	bl	801cd2c <GUI_SetColor>
						GUI_FillRect(x, y + font->LHeight*0.3, x + data->sizeOld, y + font->LHeight + font->LHeight*0.8);
 80177cc:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80177d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80177d4:	ee07 3a90 	vmov	s15, r3
 80177d8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80177dc:	68bb      	ldr	r3, [r7, #8]
 80177de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80177e2:	ee07 3a90 	vmov	s15, r3
 80177e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80177ea:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 80179e8 <GUI_DrawTimeAt+0xfc0>
 80177ee:	ee27 7b05 	vmul.f64	d7, d7, d5
 80177f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80177f6:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 80177fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80177fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017800:	8892      	ldrh	r2, [r2, #4]
 8017802:	1899      	adds	r1, r3, r2
 8017804:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017808:	68ba      	ldr	r2, [r7, #8]
 801780a:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 801780e:	4413      	add	r3, r2
 8017810:	ee07 3a90 	vmov	s15, r3
 8017814:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8017818:	68bb      	ldr	r3, [r7, #8]
 801781a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801781e:	ee07 3a90 	vmov	s15, r3
 8017822:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017826:	ed9f 5b72 	vldr	d5, [pc, #456]	; 80179f0 <GUI_DrawTimeAt+0xfc8>
 801782a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801782e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8017832:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8017836:	ee17 3a90 	vmov	r3, s15
 801783a:	460a      	mov	r2, r1
 801783c:	ee14 1a90 	vmov	r1, s9
 8017840:	f005 fb7e 	bl	801cf40 <GUI_FillRect>
					}

					GUI_SetColor(color);
 8017844:	6878      	ldr	r0, [r7, #4]
 8017846:	f005 fa71 	bl	801cd2c <GUI_SetColor>

					GUI_DispDecAt(hours, x, y, charNumberToAdd);
 801784a:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 801784e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017852:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8017856:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 801785a:	f005 f977 	bl	801cb4c <GUI_DispDecAt>
					GUI_DispStringAt(":", x + xSize * charNumberToAdd, yPointsCorrection);
 801785e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8017862:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017868:	fb01 f303 	mul.w	r3, r1, r3
 801786c:	4413      	add	r3, r2
 801786e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8017870:	4619      	mov	r1, r3
 8017872:	4861      	ldr	r0, [pc, #388]	; (80179f8 <GUI_DrawTimeAt+0xfd0>)
 8017874:	f006 f938 	bl	801dae8 <GUI_DispStringAt>
					GUI_DispDecAt(minutes, x + xSize * charNumberToAdd + xPointSize, y, 2);
 8017878:	f8b7 004a 	ldrh.w	r0, [r7, #74]	; 0x4a
 801787c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017880:	b29a      	uxth	r2, r3
 8017882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017884:	b29b      	uxth	r3, r3
 8017886:	fb12 f303 	smulbb	r3, r2, r3
 801788a:	b29a      	uxth	r2, r3
 801788c:	89fb      	ldrh	r3, [r7, #14]
 801788e:	4413      	add	r3, r2
 8017890:	b29a      	uxth	r2, r3
 8017892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017894:	b29b      	uxth	r3, r3
 8017896:	4413      	add	r3, r2
 8017898:	b29b      	uxth	r3, r3
 801789a:	b219      	sxth	r1, r3
 801789c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80178a0:	2302      	movs	r3, #2
 80178a2:	f005 f953 	bl	801cb4c <GUI_DispDecAt>
					GUI_DispStringAt(":", x + xSize * (charNumberToAdd + 2) + xPointSize, yPointsCorrection);
 80178a6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80178aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80178ae:	3302      	adds	r3, #2
 80178b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80178b2:	fb01 f303 	mul.w	r3, r1, r3
 80178b6:	441a      	add	r2, r3
 80178b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178ba:	4413      	add	r3, r2
 80178bc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80178be:	4619      	mov	r1, r3
 80178c0:	484d      	ldr	r0, [pc, #308]	; (80179f8 <GUI_DrawTimeAt+0xfd0>)
 80178c2:	f006 f911 	bl	801dae8 <GUI_DispStringAt>
					GUI_DispDecAt(seconds, x  + xSize * (charNumberToAdd + 2) + xPointSize * 2, y, 2);
 80178c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80178c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80178cc:	3302      	adds	r3, #2
 80178ce:	b29a      	uxth	r2, r3
 80178d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178d2:	b29b      	uxth	r3, r3
 80178d4:	fb12 f303 	smulbb	r3, r2, r3
 80178d8:	b29a      	uxth	r2, r3
 80178da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178dc:	b29b      	uxth	r3, r3
 80178de:	005b      	lsls	r3, r3, #1
 80178e0:	b29b      	uxth	r3, r3
 80178e2:	4413      	add	r3, r2
 80178e4:	b29a      	uxth	r2, r3
 80178e6:	89fb      	ldrh	r3, [r7, #14]
 80178e8:	4413      	add	r3, r2
 80178ea:	b29b      	uxth	r3, r3
 80178ec:	b219      	sxth	r1, r3
 80178ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80178f2:	2302      	movs	r3, #2
 80178f4:	f005 f92a 	bl	801cb4c <GUI_DispDecAt>

					if(nDecimal)
 80178f8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d044      	beq.n	801798a <GUI_DrawTimeAt+0xf62>
					{
						GUI_DispStringAt(".", x + xSize * (charNumberToAdd + 4) + xPointSize * 2, y);
 8017900:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8017904:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017908:	3304      	adds	r3, #4
 801790a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801790c:	fb01 f303 	mul.w	r3, r1, r3
 8017910:	441a      	add	r2, r3
 8017912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017914:	005b      	lsls	r3, r3, #1
 8017916:	4413      	add	r3, r2
 8017918:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801791c:	4619      	mov	r1, r3
 801791e:	4837      	ldr	r0, [pc, #220]	; (80179fc <GUI_DrawTimeAt+0xfd4>)
 8017920:	f006 f8e2 	bl	801dae8 <GUI_DispStringAt>
						GUI_DispDecAt(milliseconds, x  + xSize * (charNumberToAdd + 4) + xPointSize * 3, y, nDecimal);
 8017924:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8017926:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801792a:	3304      	adds	r3, #4
 801792c:	b29a      	uxth	r2, r3
 801792e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017930:	b29b      	uxth	r3, r3
 8017932:	fb12 f303 	smulbb	r3, r2, r3
 8017936:	b29a      	uxth	r2, r3
 8017938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801793a:	b29b      	uxth	r3, r3
 801793c:	4619      	mov	r1, r3
 801793e:	0049      	lsls	r1, r1, #1
 8017940:	440b      	add	r3, r1
 8017942:	b29b      	uxth	r3, r3
 8017944:	4413      	add	r3, r2
 8017946:	b29a      	uxth	r2, r3
 8017948:	89fb      	ldrh	r3, [r7, #14]
 801794a:	4413      	add	r3, r2
 801794c:	b29b      	uxth	r3, r3
 801794e:	b219      	sxth	r1, r3
 8017950:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8017954:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8017958:	f005 f8f8 	bl	801cb4c <GUI_DispDecAt>

						data->sizeOld = xSize * (charNumberToAdd + 4 + nDecimal) + xPointSize * 3;
 801795c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017960:	1d1a      	adds	r2, r3, #4
 8017962:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8017966:	4413      	add	r3, r2
 8017968:	b29a      	uxth	r2, r3
 801796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801796c:	b29b      	uxth	r3, r3
 801796e:	fb12 f303 	smulbb	r3, r2, r3
 8017972:	b29a      	uxth	r2, r3
 8017974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017976:	b29b      	uxth	r3, r3
 8017978:	4619      	mov	r1, r3
 801797a:	0049      	lsls	r1, r1, #1
 801797c:	440b      	add	r3, r1
 801797e:	b29b      	uxth	r3, r3
 8017980:	4413      	add	r3, r2
 8017982:	b29a      	uxth	r2, r3
 8017984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017986:	809a      	strh	r2, [r3, #4]
					}
					else
						data->sizeOld = xSize * (charNumberToAdd + 4) + xPointSize * 2;

					break;
 8017988:	e119      	b.n	8017bbe <GUI_DrawTimeAt+0x1196>
						data->sizeOld = xSize * (charNumberToAdd + 4) + xPointSize * 2;
 801798a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801798e:	3304      	adds	r3, #4
 8017990:	b29a      	uxth	r2, r3
 8017992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017994:	b29b      	uxth	r3, r3
 8017996:	fb12 f303 	smulbb	r3, r2, r3
 801799a:	b29a      	uxth	r2, r3
 801799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801799e:	b29b      	uxth	r3, r3
 80179a0:	005b      	lsls	r3, r3, #1
 80179a2:	b29b      	uxth	r3, r3
 80179a4:	4413      	add	r3, r2
 80179a6:	b29a      	uxth	r2, r3
 80179a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80179aa:	809a      	strh	r2, [r3, #4]
					break;
 80179ac:	e107      	b.n	8017bbe <GUI_DrawTimeAt+0x1196>

				case TIME_FORMAT_MINUTES:
				default:

					if(minutes == 0)
 80179ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d103      	bne.n	80179be <GUI_DrawTimeAt+0xf96>
						charNumberToAdd = 1;
 80179b6:	2301      	movs	r3, #1
 80179b8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80179bc:	e029      	b.n	8017a12 <GUI_DrawTimeAt+0xfea>
					else
					{
						for(uint8_t i = 1; i < 10; i++)
 80179be:	2301      	movs	r3, #1
 80179c0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80179c4:	e021      	b.n	8017a0a <GUI_DrawTimeAt+0xfe2>
						{
							if(minutes < MDM_pow(10, i))
 80179c6:	f8b7 404a 	ldrh.w	r4, [r7, #74]	; 0x4a
 80179ca:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80179ce:	4619      	mov	r1, r3
 80179d0:	200a      	movs	r0, #10
 80179d2:	f7fc ffc0 	bl	8014956 <MDM_pow>
 80179d6:	4603      	mov	r3, r0
 80179d8:	429c      	cmp	r4, r3
 80179da:	da11      	bge.n	8017a00 <GUI_DrawTimeAt+0xfd8>
							{
								charNumberToAdd = i;
 80179dc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80179e0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
								break;
 80179e4:	e015      	b.n	8017a12 <GUI_DrawTimeAt+0xfea>
 80179e6:	bf00      	nop
 80179e8:	33333333 	.word	0x33333333
 80179ec:	3fd33333 	.word	0x3fd33333
 80179f0:	9999999a 	.word	0x9999999a
 80179f4:	3fe99999 	.word	0x3fe99999
 80179f8:	08022744 	.word	0x08022744
 80179fc:	08022748 	.word	0x08022748
						for(uint8_t i = 1; i < 10; i++)
 8017a00:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8017a04:	3301      	adds	r3, #1
 8017a06:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8017a0a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8017a0e:	2b09      	cmp	r3, #9
 8017a10:	d9d9      	bls.n	80179c6 <GUI_DrawTimeAt+0xf9e>
							}
						}
					}

					if((xSize * (charNumberToAdd + 2 + nDecimal) + xPointSize * 2) < data->sizeOld)
 8017a12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017a16:	1c9a      	adds	r2, r3, #2
 8017a18:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8017a1c:	4413      	add	r3, r2
 8017a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a20:	fb03 f202 	mul.w	r2, r3, r2
 8017a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a26:	005b      	lsls	r3, r3, #1
 8017a28:	4413      	add	r3, r2
 8017a2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017a2c:	8892      	ldrh	r2, [r2, #4]
 8017a2e:	4293      	cmp	r3, r2
 8017a30:	da3e      	bge.n	8017ab0 <GUI_DrawTimeAt+0x1088>
					{
						GUI_SetColor(backColor);
 8017a32:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8017a34:	f005 f97a 	bl	801cd2c <GUI_SetColor>
						GUI_FillRect(x, y + font->LHeight*0.3, x + data->sizeOld, y + font->LHeight + font->LHeight*0.8);
 8017a38:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8017a3c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017a40:	ee07 3a90 	vmov	s15, r3
 8017a44:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8017a48:	68bb      	ldr	r3, [r7, #8]
 8017a4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8017a4e:	ee07 3a90 	vmov	s15, r3
 8017a52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017a56:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8017bc8 <GUI_DrawTimeAt+0x11a0>
 8017a5a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017a5e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8017a62:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 8017a66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017a6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017a6c:	8892      	ldrh	r2, [r2, #4]
 8017a6e:	1899      	adds	r1, r3, r2
 8017a70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017a74:	68ba      	ldr	r2, [r7, #8]
 8017a76:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8017a7a:	4413      	add	r3, r2
 8017a7c:	ee07 3a90 	vmov	s15, r3
 8017a80:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8017a84:	68bb      	ldr	r3, [r7, #8]
 8017a86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8017a8a:	ee07 3a90 	vmov	s15, r3
 8017a8e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017a92:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8017bd0 <GUI_DrawTimeAt+0x11a8>
 8017a96:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017a9a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8017a9e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8017aa2:	ee17 3a90 	vmov	r3, s15
 8017aa6:	460a      	mov	r2, r1
 8017aa8:	ee14 1a90 	vmov	r1, s9
 8017aac:	f005 fa48 	bl	801cf40 <GUI_FillRect>
					}

					GUI_SetColor(color);
 8017ab0:	6878      	ldr	r0, [r7, #4]
 8017ab2:	f005 f93b 	bl	801cd2c <GUI_SetColor>

					//GUI_DispDecAt(charNumberToAdd, x - 100, y, 1);
					//GUI_DispDecAt(minutes, x - 80, y, 3);

					GUI_DispDecAt(minutes, x, y, charNumberToAdd);
 8017ab6:	f8b7 004a 	ldrh.w	r0, [r7, #74]	; 0x4a
 8017aba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017abe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8017ac2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8017ac6:	f005 f841 	bl	801cb4c <GUI_DispDecAt>
					GUI_DispStringAt(":", x + xSize * charNumberToAdd, yPointsCorrection);
 8017aca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8017ace:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017ad2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017ad4:	fb01 f303 	mul.w	r3, r1, r3
 8017ad8:	4413      	add	r3, r2
 8017ada:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8017adc:	4619      	mov	r1, r3
 8017ade:	483e      	ldr	r0, [pc, #248]	; (8017bd8 <GUI_DrawTimeAt+0x11b0>)
 8017ae0:	f006 f802 	bl	801dae8 <GUI_DispStringAt>
					GUI_DispDecAt(seconds, x  + xSize * charNumberToAdd + xPointSize, y, 2);
 8017ae4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017ae6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017aea:	b29a      	uxth	r2, r3
 8017aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017aee:	b29b      	uxth	r3, r3
 8017af0:	fb12 f303 	smulbb	r3, r2, r3
 8017af4:	b29a      	uxth	r2, r3
 8017af6:	89fb      	ldrh	r3, [r7, #14]
 8017af8:	4413      	add	r3, r2
 8017afa:	b29a      	uxth	r2, r3
 8017afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017afe:	b29b      	uxth	r3, r3
 8017b00:	4413      	add	r3, r2
 8017b02:	b29b      	uxth	r3, r3
 8017b04:	b219      	sxth	r1, r3
 8017b06:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8017b0a:	2302      	movs	r3, #2
 8017b0c:	f005 f81e 	bl	801cb4c <GUI_DispDecAt>

					if(nDecimal)
 8017b10:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d03f      	beq.n	8017b98 <GUI_DrawTimeAt+0x1170>
					{
						GUI_DispStringAt(".", x + xSize * (charNumberToAdd + 2) + xPointSize, y);
 8017b18:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8017b1c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017b20:	3302      	adds	r3, #2
 8017b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017b24:	fb01 f303 	mul.w	r3, r1, r3
 8017b28:	441a      	add	r2, r3
 8017b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b2c:	4413      	add	r3, r2
 8017b2e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8017b32:	4619      	mov	r1, r3
 8017b34:	4829      	ldr	r0, [pc, #164]	; (8017bdc <GUI_DrawTimeAt+0x11b4>)
 8017b36:	f005 ffd7 	bl	801dae8 <GUI_DispStringAt>
						GUI_DispDecAt(milliseconds, x  + xSize * (charNumberToAdd + 2) + xPointSize * 2, y, nDecimal);
 8017b3a:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8017b3c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017b40:	3302      	adds	r3, #2
 8017b42:	b29a      	uxth	r2, r3
 8017b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b46:	b29b      	uxth	r3, r3
 8017b48:	fb12 f303 	smulbb	r3, r2, r3
 8017b4c:	b29a      	uxth	r2, r3
 8017b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b50:	b29b      	uxth	r3, r3
 8017b52:	005b      	lsls	r3, r3, #1
 8017b54:	b29b      	uxth	r3, r3
 8017b56:	4413      	add	r3, r2
 8017b58:	b29a      	uxth	r2, r3
 8017b5a:	89fb      	ldrh	r3, [r7, #14]
 8017b5c:	4413      	add	r3, r2
 8017b5e:	b29b      	uxth	r3, r3
 8017b60:	b219      	sxth	r1, r3
 8017b62:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8017b66:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8017b6a:	f004 ffef 	bl	801cb4c <GUI_DispDecAt>

						data->sizeOld = xSize * (charNumberToAdd + 2 + nDecimal) + xPointSize * 2;
 8017b6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017b72:	1c9a      	adds	r2, r3, #2
 8017b74:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8017b78:	4413      	add	r3, r2
 8017b7a:	b29a      	uxth	r2, r3
 8017b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b7e:	b29b      	uxth	r3, r3
 8017b80:	fb12 f303 	smulbb	r3, r2, r3
 8017b84:	b29a      	uxth	r2, r3
 8017b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b88:	b29b      	uxth	r3, r3
 8017b8a:	005b      	lsls	r3, r3, #1
 8017b8c:	b29b      	uxth	r3, r3
 8017b8e:	4413      	add	r3, r2
 8017b90:	b29a      	uxth	r2, r3
 8017b92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017b94:	809a      	strh	r2, [r3, #4]
					}
					else
						data->sizeOld = xSize * (charNumberToAdd + 2 + nDecimal) + xPointSize;

					break;
 8017b96:	e011      	b.n	8017bbc <GUI_DrawTimeAt+0x1194>
						data->sizeOld = xSize * (charNumberToAdd + 2 + nDecimal) + xPointSize;
 8017b98:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017b9c:	1c9a      	adds	r2, r3, #2
 8017b9e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8017ba2:	4413      	add	r3, r2
 8017ba4:	b29a      	uxth	r2, r3
 8017ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ba8:	b29b      	uxth	r3, r3
 8017baa:	fb12 f303 	smulbb	r3, r2, r3
 8017bae:	b29a      	uxth	r2, r3
 8017bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bb2:	b29b      	uxth	r3, r3
 8017bb4:	4413      	add	r3, r2
 8017bb6:	b29a      	uxth	r2, r3
 8017bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017bba:	809a      	strh	r2, [r3, #4]
					break;
 8017bbc:	bf00      	nop
			}
			break;
 8017bbe:	bf00      	nop
	}
}
 8017bc0:	bf00      	nop
 8017bc2:	3754      	adds	r7, #84	; 0x54
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	bd90      	pop	{r4, r7, pc}
 8017bc8:	33333333 	.word	0x33333333
 8017bcc:	3fd33333 	.word	0x3fd33333
 8017bd0:	9999999a 	.word	0x9999999a
 8017bd4:	3fe99999 	.word	0x3fe99999
 8017bd8:	08022744 	.word	0x08022744
 8017bdc:	08022748 	.word	0x08022748

08017be0 <GUI_DrawNumAt_Dec>:

void GUI_DrawNumAt_Dec(int16_t x, int16_t y, const GUI_FONT *font, uint32_t color, uint32_t backColor, GUI_DrawNumAt_DecTypeDef *data, uint8_t signEnable, uint8_t alignment, char *initString, char *endString)
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b0a4      	sub	sp, #144	; 0x90
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	60ba      	str	r2, [r7, #8]
 8017be8:	607b      	str	r3, [r7, #4]
 8017bea:	4603      	mov	r3, r0
 8017bec:	81fb      	strh	r3, [r7, #14]
 8017bee:	460b      	mov	r3, r1
 8017bf0:	81bb      	strh	r3, [r7, #12]
	GUI_SetColor(color);
 8017bf2:	6878      	ldr	r0, [r7, #4]
 8017bf4:	f005 f89a 	bl	801cd2c <GUI_SetColor>
	GUI_SetBkColor(backColor);
 8017bf8:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8017bfc:	f005 f894 	bl	801cd28 <GUI_SetBkColor>

	GUI_SetFont(font);
 8017c00:	68b8      	ldr	r0, [r7, #8]
 8017c02:	f005 f865 	bl	801ccd0 <GUI_SetFont>

	uint32_t value = 0;
 8017c06:	2300      	movs	r3, #0
 8017c08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	uint8_t stringSize = 0;
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	char string[51] = "";
 8017c12:	2300      	movs	r3, #0
 8017c14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017c16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8017c1a:	222f      	movs	r2, #47	; 0x2f
 8017c1c:	2100      	movs	r1, #0
 8017c1e:	4618      	mov	r0, r3
 8017c20:	f00a f818 	bl	8021c54 <memset>
	char stringSigned[51] = "";
 8017c24:	2300      	movs	r3, #0
 8017c26:	61bb      	str	r3, [r7, #24]
 8017c28:	f107 031c 	add.w	r3, r7, #28
 8017c2c:	222f      	movs	r2, #47	; 0x2f
 8017c2e:	2100      	movs	r1, #0
 8017c30:	4618      	mov	r0, r3
 8017c32:	f00a f80f 	bl	8021c54 <memset>
	char sign[2] = " ";
 8017c36:	2320      	movs	r3, #32
 8017c38:	82bb      	strh	r3, [r7, #20]

	if(data->number >= 0)
 8017c3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	db05      	blt.n	8017c50 <GUI_DrawNumAt_Dec+0x70>
	{
		value = data->number;
 8017c44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8017c4e:	e005      	b.n	8017c5c <GUI_DrawNumAt_Dec+0x7c>
	}
	else
	{
		value = data->number * -1;
 8017c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	425b      	negs	r3, r3
 8017c58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	}


	switch(alignment)
 8017c5c:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8017c60:	2b02      	cmp	r3, #2
 8017c62:	d00e      	beq.n	8017c82 <GUI_DrawNumAt_Dec+0xa2>
 8017c64:	2b02      	cmp	r3, #2
 8017c66:	dc10      	bgt.n	8017c8a <GUI_DrawNumAt_Dec+0xaa>
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d002      	beq.n	8017c72 <GUI_DrawNumAt_Dec+0x92>
 8017c6c:	2b01      	cmp	r3, #1
 8017c6e:	d004      	beq.n	8017c7a <GUI_DrawNumAt_Dec+0x9a>
 8017c70:	e00b      	b.n	8017c8a <GUI_DrawNumAt_Dec+0xaa>
	{
		case LEFT:
			GUI_SetTextAlign(GUI_TA_LEFT);
 8017c72:	2000      	movs	r0, #0
 8017c74:	f005 f822 	bl	801ccbc <GUI_SetTextAlign>
			break;
 8017c78:	e00a      	b.n	8017c90 <GUI_DrawNumAt_Dec+0xb0>

		case RIGHT:
			GUI_SetTextAlign(GUI_TA_RIGHT);
 8017c7a:	2001      	movs	r0, #1
 8017c7c:	f005 f81e 	bl	801ccbc <GUI_SetTextAlign>
			break;
 8017c80:	e006      	b.n	8017c90 <GUI_DrawNumAt_Dec+0xb0>

		case CENTER:
			GUI_SetTextAlign(GUI_TA_HCENTER);
 8017c82:	2002      	movs	r0, #2
 8017c84:	f005 f81a 	bl	801ccbc <GUI_SetTextAlign>
			break;
 8017c88:	e002      	b.n	8017c90 <GUI_DrawNumAt_Dec+0xb0>

		default:
			GUI_SetTextAlign(GUI_TA_LEFT);
 8017c8a:	2000      	movs	r0, #0
 8017c8c:	f005 f816 	bl	801ccbc <GUI_SetTextAlign>
	}

	uint32_t pow = 10;
 8017c90:	230a      	movs	r3, #10
 8017c92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint8_t digit = 1;
 8017c96:	2301      	movs	r3, #1
 8017c98:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

	while(value >= pow)
 8017c9c:	e00c      	b.n	8017cb8 <GUI_DrawNumAt_Dec+0xd8>
	{
		pow*=10;
 8017c9e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017ca2:	4613      	mov	r3, r2
 8017ca4:	009b      	lsls	r3, r3, #2
 8017ca6:	4413      	add	r3, r2
 8017ca8:	005b      	lsls	r3, r3, #1
 8017caa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		digit++;
 8017cae:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8017cb2:	3301      	adds	r3, #1
 8017cb4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	while(value >= pow)
 8017cb8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8017cbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017cc0:	429a      	cmp	r2, r3
 8017cc2:	d2ec      	bcs.n	8017c9e <GUI_DrawNumAt_Dec+0xbe>
	}

	intToStr(value, string, digit);
 8017cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017cc8:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8017ccc:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8017cd0:	4618      	mov	r0, r3
 8017cd2:	f7fc fe97 	bl	8014a04 <intToStr>

	if(signEnable)
 8017cd6:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d056      	beq.n	8017d8c <GUI_DrawNumAt_Dec+0x1ac>
	{
		uint8_t flagNoSign = 0;
 8017cde:	2300      	movs	r3, #0
 8017ce0:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

		if(signEnable == SIGN_ENABLED)
 8017ce4:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8017ce8:	2b01      	cmp	r3, #1
 8017cea:	d10f      	bne.n	8017d0c <GUI_DrawNumAt_Dec+0x12c>
		{
			if(data->number > 0)
 8017cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	dd02      	ble.n	8017cfc <GUI_DrawNumAt_Dec+0x11c>
				sign[0] = '+';
 8017cf6:	232b      	movs	r3, #43	; 0x2b
 8017cf8:	753b      	strb	r3, [r7, #20]
 8017cfa:	e02a      	b.n	8017d52 <GUI_DrawNumAt_Dec+0x172>
			else if (data->number < 0)
 8017cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	da25      	bge.n	8017d52 <GUI_DrawNumAt_Dec+0x172>
				sign[0] = '-';
 8017d06:	232d      	movs	r3, #45	; 0x2d
 8017d08:	753b      	strb	r3, [r7, #20]
 8017d0a:	e022      	b.n	8017d52 <GUI_DrawNumAt_Dec+0x172>
		}
		else if(signEnable == SIGN_INVERTED)
 8017d0c:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8017d10:	2b02      	cmp	r3, #2
 8017d12:	d10f      	bne.n	8017d34 <GUI_DrawNumAt_Dec+0x154>
		{
			if(data->number > 0)
 8017d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	dd02      	ble.n	8017d24 <GUI_DrawNumAt_Dec+0x144>
				sign[0] = '-';
 8017d1e:	232d      	movs	r3, #45	; 0x2d
 8017d20:	753b      	strb	r3, [r7, #20]
 8017d22:	e016      	b.n	8017d52 <GUI_DrawNumAt_Dec+0x172>
			else if (data->number < 0)
 8017d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	da11      	bge.n	8017d52 <GUI_DrawNumAt_Dec+0x172>
				sign[0] = '+';
 8017d2e:	232b      	movs	r3, #43	; 0x2b
 8017d30:	753b      	strb	r3, [r7, #20]
 8017d32:	e00e      	b.n	8017d52 <GUI_DrawNumAt_Dec+0x172>
		}
		else if(signEnable == SIGN_NEGATIVE)
 8017d34:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8017d38:	2b03      	cmp	r3, #3
 8017d3a:	d10a      	bne.n	8017d52 <GUI_DrawNumAt_Dec+0x172>
		{
			if (data->number < 0)
 8017d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	da02      	bge.n	8017d4c <GUI_DrawNumAt_Dec+0x16c>
				sign[0] = '-';
 8017d46:	232d      	movs	r3, #45	; 0x2d
 8017d48:	753b      	strb	r3, [r7, #20]
 8017d4a:	e002      	b.n	8017d52 <GUI_DrawNumAt_Dec+0x172>
			else
				flagNoSign = 1;
 8017d4c:	2301      	movs	r3, #1
 8017d4e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		}


		if(flagNoSign == 0 && value != 0)
 8017d52:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d10f      	bne.n	8017d7a <GUI_DrawNumAt_Dec+0x19a>
 8017d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d00b      	beq.n	8017d7a <GUI_DrawNumAt_Dec+0x19a>
		{
			stringSigned[0] = sign[0];
 8017d62:	7d3b      	ldrb	r3, [r7, #20]
 8017d64:	763b      	strb	r3, [r7, #24]
			strcpy(&stringSigned[1], string);
 8017d66:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017d6a:	f107 0318 	add.w	r3, r7, #24
 8017d6e:	3301      	adds	r3, #1
 8017d70:	4611      	mov	r1, r2
 8017d72:	4618      	mov	r0, r3
 8017d74:	f009 ff76 	bl	8021c64 <strcpy>
 8017d78:	e010      	b.n	8017d9c <GUI_DrawNumAt_Dec+0x1bc>
		}
		else
		{
			strcpy(&stringSigned[0], string);
 8017d7a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017d7e:	f107 0318 	add.w	r3, r7, #24
 8017d82:	4611      	mov	r1, r2
 8017d84:	4618      	mov	r0, r3
 8017d86:	f009 ff6d 	bl	8021c64 <strcpy>
 8017d8a:	e007      	b.n	8017d9c <GUI_DrawNumAt_Dec+0x1bc>
		}
	}
	else
	{
		strcpy(&stringSigned[0], string);
 8017d8c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017d90:	f107 0318 	add.w	r3, r7, #24
 8017d94:	4611      	mov	r1, r2
 8017d96:	4618      	mov	r0, r3
 8017d98:	f009 ff64 	bl	8021c64 <strcpy>
	}


	uint8_t c = 0;
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t k = 0;
 8017da2:	2300      	movs	r3, #0
 8017da4:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
	for(k = 0; initString[k] != '\0'; k++)
 8017da8:	2300      	movs	r3, #0
 8017daa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8017dae:	e010      	b.n	8017dd2 <GUI_DrawNumAt_Dec+0x1f2>
	{
		string[k] = initString[k];
 8017db0:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8017db4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8017db8:	441a      	add	r2, r3
 8017dba:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8017dbe:	7812      	ldrb	r2, [r2, #0]
 8017dc0:	3390      	adds	r3, #144	; 0x90
 8017dc2:	443b      	add	r3, r7
 8017dc4:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(k = 0; initString[k] != '\0'; k++)
 8017dc8:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8017dcc:	3301      	adds	r3, #1
 8017dce:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8017dd2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8017dd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8017dda:	4413      	add	r3, r2
 8017ddc:	781b      	ldrb	r3, [r3, #0]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d1e6      	bne.n	8017db0 <GUI_DrawNumAt_Dec+0x1d0>
	}

	c = k;
 8017de2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8017de6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	for(k = 0; stringSigned[k] != '\0'; k++)
 8017dea:	2300      	movs	r3, #0
 8017dec:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8017df0:	e013      	b.n	8017e1a <GUI_DrawNumAt_Dec+0x23a>
	{
		string[c + k] = stringSigned[k];
 8017df2:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 8017df6:	f897 107f 	ldrb.w	r1, [r7, #127]	; 0x7f
 8017dfa:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8017dfe:	440b      	add	r3, r1
 8017e00:	3290      	adds	r2, #144	; 0x90
 8017e02:	443a      	add	r2, r7
 8017e04:	f812 2c78 	ldrb.w	r2, [r2, #-120]
 8017e08:	3390      	adds	r3, #144	; 0x90
 8017e0a:	443b      	add	r3, r7
 8017e0c:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(k = 0; stringSigned[k] != '\0'; k++)
 8017e10:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8017e14:	3301      	adds	r3, #1
 8017e16:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8017e1a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8017e1e:	3390      	adds	r3, #144	; 0x90
 8017e20:	443b      	add	r3, r7
 8017e22:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d1e3      	bne.n	8017df2 <GUI_DrawNumAt_Dec+0x212>
	}

	c += k;
 8017e2a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8017e2e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8017e32:	4413      	add	r3, r2
 8017e34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	for(k = 0; endString[k] != '\0'; k++)
 8017e38:	2300      	movs	r3, #0
 8017e3a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8017e3e:	e013      	b.n	8017e68 <GUI_DrawNumAt_Dec+0x288>
	{
		string[c + k] = endString[k];
 8017e40:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8017e44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8017e48:	441a      	add	r2, r3
 8017e4a:	f897 107f 	ldrb.w	r1, [r7, #127]	; 0x7f
 8017e4e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8017e52:	440b      	add	r3, r1
 8017e54:	7812      	ldrb	r2, [r2, #0]
 8017e56:	3390      	adds	r3, #144	; 0x90
 8017e58:	443b      	add	r3, r7
 8017e5a:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(k = 0; endString[k] != '\0'; k++)
 8017e5e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8017e62:	3301      	adds	r3, #1
 8017e64:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8017e68:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8017e6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8017e70:	4413      	add	r3, r2
 8017e72:	781b      	ldrb	r3, [r3, #0]
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d1e3      	bne.n	8017e40 <GUI_DrawNumAt_Dec+0x260>
	}

	string[c + k] = '\0';
 8017e78:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8017e7c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8017e80:	4413      	add	r3, r2
 8017e82:	3390      	adds	r3, #144	; 0x90
 8017e84:	443b      	add	r3, r7
 8017e86:	2200      	movs	r2, #0
 8017e88:	f803 2c44 	strb.w	r2, [r3, #-68]


	int tmpCharSize = 0;
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	613b      	str	r3, [r7, #16]
		font->pfGetCharDistX(stringSigned[i], &tmpCharSize);
		stringSize += tmpCharSize;
	}
	*/

	for(uint8_t i = 0; string[i] != '\0'; i++)
 8017e90:	2300      	movs	r3, #0
 8017e92:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 8017e96:	e018      	b.n	8017eca <GUI_DrawNumAt_Dec+0x2ea>
	{
		font->pfGetCharDistX(string[i], &tmpCharSize);
 8017e98:	68bb      	ldr	r3, [r7, #8]
 8017e9a:	685b      	ldr	r3, [r3, #4]
 8017e9c:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 8017ea0:	3290      	adds	r2, #144	; 0x90
 8017ea2:	443a      	add	r2, r7
 8017ea4:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8017ea8:	b292      	uxth	r2, r2
 8017eaa:	f107 0110 	add.w	r1, r7, #16
 8017eae:	4610      	mov	r0, r2
 8017eb0:	4798      	blx	r3
		stringSize += tmpCharSize;
 8017eb2:	693b      	ldr	r3, [r7, #16]
 8017eb4:	b2da      	uxtb	r2, r3
 8017eb6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8017eba:	4413      	add	r3, r2
 8017ebc:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	for(uint8_t i = 0; string[i] != '\0'; i++)
 8017ec0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8017ec4:	3301      	adds	r3, #1
 8017ec6:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 8017eca:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8017ece:	3390      	adds	r3, #144	; 0x90
 8017ed0:	443b      	add	r3, r7
 8017ed2:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d1de      	bne.n	8017e98 <GUI_DrawNumAt_Dec+0x2b8>
	}




	if(stringSize < data->stringSize || sign[0] != data->sign)
 8017eda:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8017ede:	b29a      	uxth	r2, r3
 8017ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017ee4:	889b      	ldrh	r3, [r3, #4]
 8017ee6:	429a      	cmp	r2, r3
 8017ee8:	d306      	bcc.n	8017ef8 <GUI_DrawNumAt_Dec+0x318>
 8017eea:	7d3a      	ldrb	r2, [r7, #20]
 8017eec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017ef0:	7a9b      	ldrb	r3, [r3, #10]
 8017ef2:	429a      	cmp	r2, r3
 8017ef4:	f000 811b 	beq.w	801812e <GUI_DrawNumAt_Dec+0x54e>
	{
		GUI_SetColor(backColor);
 8017ef8:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8017efc:	f004 ff16 	bl	801cd2c <GUI_SetColor>

		switch(alignment)
 8017f00:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8017f04:	2b02      	cmp	r3, #2
 8017f06:	f000 8084 	beq.w	8018012 <GUI_DrawNumAt_Dec+0x432>
 8017f0a:	2b02      	cmp	r3, #2
 8017f0c:	f300 80d1 	bgt.w	80180b2 <GUI_DrawNumAt_Dec+0x4d2>
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d002      	beq.n	8017f1a <GUI_DrawNumAt_Dec+0x33a>
 8017f14:	2b01      	cmp	r3, #1
 8017f16:	d03e      	beq.n	8017f96 <GUI_DrawNumAt_Dec+0x3b6>
 8017f18:	e0cb      	b.n	80180b2 <GUI_DrawNumAt_Dec+0x4d2>
		{
			case LEFT:
				GUI_FillRect(x, y + font->LHeight*0.3, x + data->stringSize, y + font->LHeight + font->LHeight*0.8);
 8017f1a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8017f1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017f22:	ee07 3a90 	vmov	s15, r3
 8017f26:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8017f2a:	68bb      	ldr	r3, [r7, #8]
 8017f2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8017f30:	ee07 3a90 	vmov	s15, r3
 8017f34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017f38:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 8018168 <GUI_DrawNumAt_Dec+0x588>
 8017f3c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017f40:	ee36 7b07 	vadd.f64	d7, d6, d7
 8017f44:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 8017f48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017f4c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8017f50:	8892      	ldrh	r2, [r2, #4]
 8017f52:	1899      	adds	r1, r3, r2
 8017f54:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017f58:	68ba      	ldr	r2, [r7, #8]
 8017f5a:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8017f5e:	4413      	add	r3, r2
 8017f60:	ee07 3a90 	vmov	s15, r3
 8017f64:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8017f68:	68bb      	ldr	r3, [r7, #8]
 8017f6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8017f6e:	ee07 3a90 	vmov	s15, r3
 8017f72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017f76:	ed9f 5b7e 	vldr	d5, [pc, #504]	; 8018170 <GUI_DrawNumAt_Dec+0x590>
 8017f7a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017f7e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8017f82:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8017f86:	ee17 3a90 	vmov	r3, s15
 8017f8a:	460a      	mov	r2, r1
 8017f8c:	ee14 1a90 	vmov	r1, s9
 8017f90:	f004 ffd6 	bl	801cf40 <GUI_FillRect>
				break;
 8017f94:	e0cc      	b.n	8018130 <GUI_DrawNumAt_Dec+0x550>

			case RIGHT:
				GUI_FillRect(x - data->stringSize, y + font->LHeight*0.3, x, y + font->LHeight + font->LHeight*0.8);
 8017f96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017f9a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8017f9e:	8892      	ldrh	r2, [r2, #4]
 8017fa0:	1a98      	subs	r0, r3, r2
 8017fa2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017fa6:	ee07 3a90 	vmov	s15, r3
 8017faa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8017fae:	68bb      	ldr	r3, [r7, #8]
 8017fb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8017fb4:	ee07 3a90 	vmov	s15, r3
 8017fb8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017fbc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8018168 <GUI_DrawNumAt_Dec+0x588>
 8017fc0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017fc4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8017fc8:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 8017fcc:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8017fd0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017fd4:	68ba      	ldr	r2, [r7, #8]
 8017fd6:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8017fda:	4413      	add	r3, r2
 8017fdc:	ee07 3a90 	vmov	s15, r3
 8017fe0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8017fe4:	68bb      	ldr	r3, [r7, #8]
 8017fe6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8017fea:	ee07 3a90 	vmov	s15, r3
 8017fee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017ff2:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8018170 <GUI_DrawNumAt_Dec+0x590>
 8017ff6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017ffa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8017ffe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8018002:	ee17 3a90 	vmov	r3, s15
 8018006:	460a      	mov	r2, r1
 8018008:	ee14 1a90 	vmov	r1, s9
 801800c:	f004 ff98 	bl	801cf40 <GUI_FillRect>
				break;
 8018010:	e08e      	b.n	8018130 <GUI_DrawNumAt_Dec+0x550>

			case CENTER:
				GUI_FillRect(x - (data->stringSize/2 + 1), y + font->LHeight*0.3*0 - 2, x + (data->stringSize/2 + 1), y + font->LHeight + font->LHeight*0.8);
 8018012:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8018016:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801801a:	889b      	ldrh	r3, [r3, #4]
 801801c:	085b      	lsrs	r3, r3, #1
 801801e:	b29b      	uxth	r3, r3
 8018020:	3301      	adds	r3, #1
 8018022:	1ad0      	subs	r0, r2, r3
 8018024:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8018028:	ee07 3a90 	vmov	s15, r3
 801802c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8018030:	68bb      	ldr	r3, [r7, #8]
 8018032:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8018036:	ee07 3a90 	vmov	s15, r3
 801803a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801803e:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8018168 <GUI_DrawNumAt_Dec+0x588>
 8018042:	ee27 7b05 	vmul.f64	d7, d7, d5
 8018046:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8018178 <GUI_DrawNumAt_Dec+0x598>
 801804a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801804e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8018052:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8018056:	ee37 7b46 	vsub.f64	d7, d7, d6
 801805a:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 801805e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8018062:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018066:	889b      	ldrh	r3, [r3, #4]
 8018068:	085b      	lsrs	r3, r3, #1
 801806a:	b29b      	uxth	r3, r3
 801806c:	3301      	adds	r3, #1
 801806e:	18d1      	adds	r1, r2, r3
 8018070:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8018074:	68ba      	ldr	r2, [r7, #8]
 8018076:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 801807a:	4413      	add	r3, r2
 801807c:	ee07 3a90 	vmov	s15, r3
 8018080:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8018084:	68bb      	ldr	r3, [r7, #8]
 8018086:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801808a:	ee07 3a90 	vmov	s15, r3
 801808e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018092:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8018170 <GUI_DrawNumAt_Dec+0x590>
 8018096:	ee27 7b05 	vmul.f64	d7, d7, d5
 801809a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801809e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80180a2:	ee17 3a90 	vmov	r3, s15
 80180a6:	460a      	mov	r2, r1
 80180a8:	ee14 1a90 	vmov	r1, s9
 80180ac:	f004 ff48 	bl	801cf40 <GUI_FillRect>
				break;
 80180b0:	e03e      	b.n	8018130 <GUI_DrawNumAt_Dec+0x550>

			default:
				GUI_FillRect(x, y + font->LHeight*0.3, x + data->stringSize, y + font->LHeight + font->LHeight*0.8);
 80180b2:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80180b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80180ba:	ee07 3a90 	vmov	s15, r3
 80180be:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80180c2:	68bb      	ldr	r3, [r7, #8]
 80180c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80180c8:	ee07 3a90 	vmov	s15, r3
 80180cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80180d0:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8018168 <GUI_DrawNumAt_Dec+0x588>
 80180d4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80180d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80180dc:	eefd 4bc7 	vcvt.s32.f64	s9, d7
 80180e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80180e4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80180e8:	8892      	ldrh	r2, [r2, #4]
 80180ea:	1899      	adds	r1, r3, r2
 80180ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80180f0:	68ba      	ldr	r2, [r7, #8]
 80180f2:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80180f6:	4413      	add	r3, r2
 80180f8:	ee07 3a90 	vmov	s15, r3
 80180fc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8018100:	68bb      	ldr	r3, [r7, #8]
 8018102:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8018106:	ee07 3a90 	vmov	s15, r3
 801810a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801810e:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8018170 <GUI_DrawNumAt_Dec+0x590>
 8018112:	ee27 7b05 	vmul.f64	d7, d7, d5
 8018116:	ee36 7b07 	vadd.f64	d7, d6, d7
 801811a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801811e:	ee17 3a90 	vmov	r3, s15
 8018122:	460a      	mov	r2, r1
 8018124:	ee14 1a90 	vmov	r1, s9
 8018128:	f004 ff0a 	bl	801cf40 <GUI_FillRect>
 801812c:	e000      	b.n	8018130 <GUI_DrawNumAt_Dec+0x550>
		}
	}
 801812e:	bf00      	nop

	GUI_SetColor(color);
 8018130:	6878      	ldr	r0, [r7, #4]
 8018132:	f004 fdfb 	bl	801cd2c <GUI_SetColor>
	GUI_DispStringAt(string, x, y);
 8018136:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 801813a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801813e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018142:	4618      	mov	r0, r3
 8018144:	f005 fcd0 	bl	801dae8 <GUI_DispStringAt>

	data->stringSize = stringSize;
 8018148:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801814c:	b29a      	uxth	r2, r3
 801814e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018152:	809a      	strh	r2, [r3, #4]
	data->sign = sign[0];
 8018154:	7d3a      	ldrb	r2, [r7, #20]
 8018156:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801815a:	729a      	strb	r2, [r3, #10]
}
 801815c:	bf00      	nop
 801815e:	3790      	adds	r7, #144	; 0x90
 8018160:	46bd      	mov	sp, r7
 8018162:	bd80      	pop	{r7, pc}
 8018164:	f3af 8000 	nop.w
 8018168:	33333333 	.word	0x33333333
 801816c:	3fd33333 	.word	0x3fd33333
 8018170:	9999999a 	.word	0x9999999a
 8018174:	3fe99999 	.word	0x3fe99999
	...

08018180 <GUI_DrawStringAt>:


void GUI_DrawStringAt(int16_t x, int16_t y, const GUI_FONT *font, uint32_t color, uint32_t backColor, GUI_DrawStringAtTypeDef *data, uint8_t alignment)
{
 8018180:	b580      	push	{r7, lr}
 8018182:	b086      	sub	sp, #24
 8018184:	af00      	add	r7, sp, #0
 8018186:	60ba      	str	r2, [r7, #8]
 8018188:	607b      	str	r3, [r7, #4]
 801818a:	4603      	mov	r3, r0
 801818c:	81fb      	strh	r3, [r7, #14]
 801818e:	460b      	mov	r3, r1
 8018190:	81bb      	strh	r3, [r7, #12]
	uint16_t stringSize = 0;
 8018192:	2300      	movs	r3, #0
 8018194:	82fb      	strh	r3, [r7, #22]

	if(data->string[0] == '\0')
 8018196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018198:	781b      	ldrb	r3, [r3, #0]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d051      	beq.n	8018242 <GUI_DrawStringAt+0xc2>
		goto END_OF_FUNCTION;

	GUI_SetFont(font);
 801819e:	68b8      	ldr	r0, [r7, #8]
 80181a0:	f004 fd96 	bl	801ccd0 <GUI_SetFont>
	//GUI_SetColor(color);
	GUI_SetBkColor(backColor);
 80181a4:	6a38      	ldr	r0, [r7, #32]
 80181a6:	f004 fdbf 	bl	801cd28 <GUI_SetBkColor>

	int tmpCharSize = 0;
 80181aa:	2300      	movs	r3, #0
 80181ac:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; data->string[i] != '\0'; i++)
 80181ae:	2300      	movs	r3, #0
 80181b0:	757b      	strb	r3, [r7, #21]
 80181b2:	e011      	b.n	80181d8 <GUI_DrawStringAt+0x58>
	{
		font->pfGetCharDistX(data->string[i], &tmpCharSize);
 80181b4:	68bb      	ldr	r3, [r7, #8]
 80181b6:	685b      	ldr	r3, [r3, #4]
 80181b8:	7d7a      	ldrb	r2, [r7, #21]
 80181ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80181bc:	5c8a      	ldrb	r2, [r1, r2]
 80181be:	b292      	uxth	r2, r2
 80181c0:	f107 0110 	add.w	r1, r7, #16
 80181c4:	4610      	mov	r0, r2
 80181c6:	4798      	blx	r3
		stringSize += tmpCharSize;
 80181c8:	693b      	ldr	r3, [r7, #16]
 80181ca:	b29a      	uxth	r2, r3
 80181cc:	8afb      	ldrh	r3, [r7, #22]
 80181ce:	4413      	add	r3, r2
 80181d0:	82fb      	strh	r3, [r7, #22]
	for(uint8_t i = 0; data->string[i] != '\0'; i++)
 80181d2:	7d7b      	ldrb	r3, [r7, #21]
 80181d4:	3301      	adds	r3, #1
 80181d6:	757b      	strb	r3, [r7, #21]
 80181d8:	7d7b      	ldrb	r3, [r7, #21]
 80181da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181dc:	5cd3      	ldrb	r3, [r2, r3]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d1e8      	bne.n	80181b4 <GUI_DrawStringAt+0x34>
	}


	switch(alignment)
 80181e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d00d      	beq.n	8018206 <GUI_DrawStringAt+0x86>
 80181ea:	2b01      	cmp	r3, #1
 80181ec:	d119      	bne.n	8018222 <GUI_DrawStringAt+0xa2>
			{

			}
			*/

			GUI_SetColor(color);
 80181ee:	6878      	ldr	r0, [r7, #4]
 80181f0:	f004 fd9c 	bl	801cd2c <GUI_SetColor>
			GUI_DispStringAt(data->string, x, y);
 80181f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181f6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80181fa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80181fe:	4618      	mov	r0, r3
 8018200:	f005 fc72 	bl	801dae8 <GUI_DispStringAt>

			//GUI_FillRect(X - (sizeOfOldString - sizeOfString - 1) * xSize / 2, y + font->LHeight*0.3, X + (sizeOfOldString - 1) * xSize + xPointSize, y + font->LHeight + font->LHeight*0.8);

			break;
 8018204:	e01e      	b.n	8018244 <GUI_DrawStringAt+0xc4>

		case LEFT:

			GUI_SetColor(color);
 8018206:	6878      	ldr	r0, [r7, #4]
 8018208:	f004 fd90 	bl	801cd2c <GUI_SetColor>
			GUI_DispStringAt(data->string, x - stringSize, y);
 801820c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801820e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8018212:	8afb      	ldrh	r3, [r7, #22]
 8018214:	1ad3      	subs	r3, r2, r3
 8018216:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801821a:	4619      	mov	r1, r3
 801821c:	f005 fc64 	bl	801dae8 <GUI_DispStringAt>

			break;
 8018220:	e010      	b.n	8018244 <GUI_DrawStringAt+0xc4>
				GUI_SetColor(backColor);
				GUI_FillRect(x - data->sizeOld/2, y, x + data->sizeOld/2, y + font->LHeight);
			}
			*/

			GUI_SetColor(color);
 8018222:	6878      	ldr	r0, [r7, #4]
 8018224:	f004 fd82 	bl	801cd2c <GUI_SetColor>
			GUI_DispStringAt(data->string, x - stringSize/2, y);
 8018228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801822a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801822e:	8afa      	ldrh	r2, [r7, #22]
 8018230:	0852      	lsrs	r2, r2, #1
 8018232:	b292      	uxth	r2, r2
 8018234:	1a9b      	subs	r3, r3, r2
 8018236:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801823a:	4619      	mov	r1, r3
 801823c:	f005 fc54 	bl	801dae8 <GUI_DispStringAt>

			break;
 8018240:	e000      	b.n	8018244 <GUI_DrawStringAt+0xc4>
		goto END_OF_FUNCTION;
 8018242:	bf00      	nop
	}


	END_OF_FUNCTION:;

	data->sizeOld = stringSize;
 8018244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018246:	8afa      	ldrh	r2, [r7, #22]
 8018248:	841a      	strh	r2, [r3, #32]
}
 801824a:	bf00      	nop
 801824c:	3718      	adds	r7, #24
 801824e:	46bd      	mov	sp, r7
 8018250:	bd80      	pop	{r7, pc}
	...

08018254 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8018254:	b580      	push	{r7, lr}
 8018256:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8018258:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 801825c:	4803      	ldr	r0, [pc, #12]	; (801826c <GUI_X_Config+0x18>)
 801825e:	f006 fb6f 	bl	801e940 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8018262:	4803      	ldr	r0, [pc, #12]	; (8018270 <GUI_X_Config+0x1c>)
 8018264:	f005 fdd6 	bl	801de14 <GUI_SetDefaultFont>
}
 8018268:	bf00      	nop
 801826a:	bd80      	pop	{r7, pc}
 801826c:	20006aa0 	.word	0x20006aa0
 8018270:	08120f54 	.word	0x08120f54

08018274 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8018274:	b480      	push	{r7}
 8018276:	af00      	add	r7, sp, #0
 8018278:	bf00      	nop
 801827a:	46bd      	mov	sp, r7
 801827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018280:	4770      	bx	lr

08018282 <LCD_LL_GetPixelformat>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static inline U32 LCD_LL_GetPixelformat(U32 LayerIndex)
{
 8018282:	b480      	push	{r7}
 8018284:	b083      	sub	sp, #12
 8018286:	af00      	add	r7, sp, #0
 8018288:	6078      	str	r0, [r7, #4]
  if (LayerIndex == 0)
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	2b00      	cmp	r3, #0
 801828e:	d101      	bne.n	8018294 <LCD_LL_GetPixelformat+0x12>
  {
    return LTDC_PIXEL_FORMAT_ARGB8888;
 8018290:	2300      	movs	r3, #0
 8018292:	e000      	b.n	8018296 <LCD_LL_GetPixelformat+0x14>
  } 
  else
  {
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8018294:	2303      	movs	r3, #3
  } 
}
 8018296:	4618      	mov	r0, r3
 8018298:	370c      	adds	r7, #12
 801829a:	46bd      	mov	sp, r7
 801829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a0:	4770      	bx	lr
	...

080182a4 <LCD_X_Config>:
  *          display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void) 
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	b082      	sub	sp, #8
 80182a8:	af00      	add	r7, sp, #0
  U32 i;

  LCD_LL_Init ();
 80182aa:	f000 fa0f 	bl	80186cc <LCD_LL_Init>
    
  /* At first initialize use of multiple buffers on demand */
#if (NUM_BUFFERS > 1)
    for (i = 0; i < GUI_NUM_LAYERS; i++) 
 80182ae:	2300      	movs	r3, #0
 80182b0:	607b      	str	r3, [r7, #4]
 80182b2:	e007      	b.n	80182c4 <LCD_X_Config+0x20>
    {
      GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	2103      	movs	r1, #3
 80182b8:	4618      	mov	r0, r3
 80182ba:	f004 fe15 	bl	801cee8 <GUI_MULTIBUF_ConfigEx>
    for (i = 0; i < GUI_NUM_LAYERS; i++) 
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	3301      	adds	r3, #1
 80182c2:	607b      	str	r3, [r7, #4]
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d0f4      	beq.n	80182b4 <LCD_X_Config+0x10>
    }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 80182ca:	2300      	movs	r3, #0
 80182cc:	2200      	movs	r2, #0
 80182ce:	4944      	ldr	r1, [pc, #272]	; (80183e0 <LCD_X_Config+0x13c>)
 80182d0:	4844      	ldr	r0, [pc, #272]	; (80183e4 <LCD_X_Config+0x140>)
 80182d2:	f005 fd35 	bl	801dd40 <GUI_DEVICE_CreateAndLink>
  
  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 80182d6:	2000      	movs	r0, #0
 80182d8:	f003 fd66 	bl	801bda8 <LCD_GetSwapXYEx>
 80182dc:	4603      	mov	r3, r0
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d00e      	beq.n	8018300 <LCD_X_Config+0x5c>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 80182e2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80182e6:	f44f 7188 	mov.w	r1, #272	; 0x110
 80182ea:	2000      	movs	r0, #0
 80182ec:	f003 fcc4 	bl	801bc78 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 80182f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80182f4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80182f8:	2000      	movs	r0, #0
 80182fa:	f003 fca5 	bl	801bc48 <LCD_SetVSizeEx>
 80182fe:	e00d      	b.n	801831c <LCD_X_Config+0x78>
  } else {
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8018300:	f44f 7288 	mov.w	r2, #272	; 0x110
 8018304:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8018308:	2000      	movs	r0, #0
 801830a:	f003 fcb5 	bl	801bc78 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 801830e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8018312:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8018316:	2000      	movs	r0, #0
 8018318:	f003 fc96 	bl	801bc48 <LCD_SetVSizeEx>
    }
  #endif
  
    
    /*Initialize GUI Layer structure */
    layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 801831c:	4a32      	ldr	r2, [pc, #200]	; (80183e8 <LCD_X_Config+0x144>)
 801831e:	4b33      	ldr	r3, [pc, #204]	; (80183ec <LCD_X_Config+0x148>)
 8018320:	601a      	str	r2, [r3, #0]
#if (GUI_NUM_LAYERS > 1)
    layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
#endif
       
   /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8018322:	2300      	movs	r3, #0
 8018324:	607b      	str	r3, [r7, #4]
 8018326:	e053      	b.n	80183d0 <LCD_X_Config+0x12c>
  {

    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8018328:	4a31      	ldr	r2, [pc, #196]	; (80183f0 <LCD_X_Config+0x14c>)
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8018330:	482e      	ldr	r0, [pc, #184]	; (80183ec <LCD_X_Config+0x148>)
 8018332:	687a      	ldr	r2, [r7, #4]
 8018334:	4613      	mov	r3, r2
 8018336:	00db      	lsls	r3, r3, #3
 8018338:	1a9b      	subs	r3, r3, r2
 801833a:	009b      	lsls	r3, r3, #2
 801833c:	4403      	add	r3, r0
 801833e:	3318      	adds	r3, #24
 8018340:	6019      	str	r1, [r3, #0]
     
    layer_prop[i].pending_buffer = -1;
 8018342:	492a      	ldr	r1, [pc, #168]	; (80183ec <LCD_X_Config+0x148>)
 8018344:	687a      	ldr	r2, [r7, #4]
 8018346:	4613      	mov	r3, r2
 8018348:	00db      	lsls	r3, r3, #3
 801834a:	1a9b      	subs	r3, r3, r2
 801834c:	009b      	lsls	r3, r3, #2
 801834e:	440b      	add	r3, r1
 8018350:	3304      	adds	r3, #4
 8018352:	f04f 32ff 	mov.w	r2, #4294967295
 8018356:	601a      	str	r2, [r3, #0]

    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8018358:	6878      	ldr	r0, [r7, #4]
 801835a:	4924      	ldr	r1, [pc, #144]	; (80183ec <LCD_X_Config+0x148>)
 801835c:	687a      	ldr	r2, [r7, #4]
 801835e:	4613      	mov	r3, r2
 8018360:	00db      	lsls	r3, r3, #3
 8018362:	1a9b      	subs	r3, r3, r2
 8018364:	009b      	lsls	r3, r3, #2
 8018366:	440b      	add	r3, r1
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	4619      	mov	r1, r3
 801836c:	f003 fc56 	bl	801bc1c <LCD_SetVRAMAddrEx>

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	4618      	mov	r0, r3
 8018374:	f003 fd0c 	bl	801bd90 <LCD_GetBitsPerPixelEx>
 8018378:	4603      	mov	r3, r0
 801837a:	10d9      	asrs	r1, r3, #3
 801837c:	481b      	ldr	r0, [pc, #108]	; (80183ec <LCD_X_Config+0x148>)
 801837e:	687a      	ldr	r2, [r7, #4]
 8018380:	4613      	mov	r3, r2
 8018382:	00db      	lsls	r3, r3, #3
 8018384:	1a9b      	subs	r3, r3, r2
 8018386:	009b      	lsls	r3, r3, #2
 8018388:	4403      	add	r3, r0
 801838a:	3314      	adds	r3, #20
 801838c:	6019      	str	r1, [r3, #0]

    /* Set custom functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))CUSTOM_CopyBuffer);
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	4a18      	ldr	r2, [pc, #96]	; (80183f4 <LCD_X_Config+0x150>)
 8018392:	2121      	movs	r1, #33	; 0x21
 8018394:	4618      	mov	r0, r3
 8018396:	f003 fcb7 	bl	801bd08 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))CUSTOM_CopyRect);
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	4a16      	ldr	r2, [pc, #88]	; (80183f8 <LCD_X_Config+0x154>)
 801839e:	2123      	movs	r1, #35	; 0x23
 80183a0:	4618      	mov	r0, r3
 80183a2:	f003 fcb1 	bl	801bd08 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	4a14      	ldr	r2, [pc, #80]	; (80183fc <LCD_X_Config+0x158>)
 80183aa:	2119      	movs	r1, #25
 80183ac:	4618      	mov	r0, r3
 80183ae:	f003 fcab 	bl	801bd08 <LCD_SetDevFunc>

    /* Set up drawing routine for 32bpp bitmap using DMA2D */
    if (LCD_LL_GetPixelformat(i) == LTDC_PIXEL_FORMAT_ARGB8888) {
 80183b2:	6878      	ldr	r0, [r7, #4]
 80183b4:	f7ff ff65 	bl	8018282 <LCD_LL_GetPixelformat>
 80183b8:	4603      	mov	r3, r0
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d105      	bne.n	80183ca <LCD_X_Config+0x126>
     LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))CUSTOM_DrawBitmap32bpp);     /* Set up drawing routine for 32bpp bitmap using DMA2D. Makes only sense with ARGB8888 */
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	4a0f      	ldr	r2, [pc, #60]	; (8018400 <LCD_X_Config+0x15c>)
 80183c2:	2128      	movs	r1, #40	; 0x28
 80183c4:	4618      	mov	r0, r3
 80183c6:	f003 fc9f 	bl	801bd08 <LCD_SetDevFunc>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	3301      	adds	r3, #1
 80183ce:	607b      	str	r3, [r7, #4]
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d0a8      	beq.n	8018328 <LCD_X_Config+0x84>
    }    
  }
}
 80183d6:	bf00      	nop
 80183d8:	bf00      	nop
 80183da:	3708      	adds	r7, #8
 80183dc:	46bd      	mov	sp, r7
 80183de:	bd80      	pop	{r7, pc}
 80183e0:	0812e07c 	.word	0x0812e07c
 80183e4:	0812dea0 	.word	0x0812dea0
 80183e8:	c0000000 	.word	0xc0000000
 80183ec:	2002c2f8 	.word	0x2002c2f8
 80183f0:	200000f8 	.word	0x200000f8
 80183f4:	080188f5 	.word	0x080188f5
 80183f8:	080189a9 	.word	0x080189a9
 80183fc:	08018aa1 	.word	0x08018aa1
 8018400:	08018b9d 	.word	0x08018b9d

08018404 <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) 
{
 8018404:	b590      	push	{r4, r7, lr}
 8018406:	b08b      	sub	sp, #44	; 0x2c
 8018408:	af00      	add	r7, sp, #0
 801840a:	60f8      	str	r0, [r7, #12]
 801840c:	60b9      	str	r1, [r7, #8]
 801840e:	607a      	str	r2, [r7, #4]
  int r = 0;
 8018410:	2300      	movs	r3, #0
 8018412:	627b      	str	r3, [r7, #36]	; 0x24
  U32 addr;
  int xPos, yPos;
  U32 Color;
    
  switch (Cmd) 
 8018414:	68bb      	ldr	r3, [r7, #8]
 8018416:	3b01      	subs	r3, #1
 8018418:	2b0d      	cmp	r3, #13
 801841a:	f200 8100 	bhi.w	801861e <LCD_X_DisplayDriver+0x21a>
 801841e:	a201      	add	r2, pc, #4	; (adr r2, 8018424 <LCD_X_DisplayDriver+0x20>)
 8018420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018424:	0801845d 	.word	0x0801845d
 8018428:	0801861f 	.word	0x0801861f
 801842c:	08018465 	.word	0x08018465
 8018430:	080184cd 	.word	0x080184cd
 8018434:	080184db 	.word	0x080184db
 8018438:	080184ed 	.word	0x080184ed
 801843c:	08018579 	.word	0x08018579
 8018440:	08018563 	.word	0x08018563
 8018444:	080184ff 	.word	0x080184ff
 8018448:	080185c7 	.word	0x080185c7
 801844c:	0801861f 	.word	0x0801861f
 8018450:	080185d7 	.word	0x080185d7
 8018454:	080185f3 	.word	0x080185f3
 8018458:	080184b5 	.word	0x080184b5
  {
  case LCD_X_INITCONTROLLER: 
    LCD_LL_LayerInit(LayerIndex);
 801845c:	68f8      	ldr	r0, [r7, #12]
 801845e:	f000 f8eb 	bl	8018638 <LCD_LL_LayerInit>
    break;
 8018462:	e0df      	b.n	8018624 <LCD_X_DisplayDriver+0x220>

  case LCD_X_SETORG: 
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8018464:	4972      	ldr	r1, [pc, #456]	; (8018630 <LCD_X_DisplayDriver+0x22c>)
 8018466:	68fa      	ldr	r2, [r7, #12]
 8018468:	4613      	mov	r3, r2
 801846a:	00db      	lsls	r3, r3, #3
 801846c:	1a9b      	subs	r3, r3, r2
 801846e:	009b      	lsls	r3, r3, #2
 8018470:	440b      	add	r3, r1
 8018472:	6819      	ldr	r1, [r3, #0]
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	6858      	ldr	r0, [r3, #4]
 8018478:	4c6d      	ldr	r4, [pc, #436]	; (8018630 <LCD_X_DisplayDriver+0x22c>)
 801847a:	68fa      	ldr	r2, [r7, #12]
 801847c:	4613      	mov	r3, r2
 801847e:	00db      	lsls	r3, r3, #3
 8018480:	1a9b      	subs	r3, r3, r2
 8018482:	009b      	lsls	r3, r3, #2
 8018484:	4423      	add	r3, r4
 8018486:	330c      	adds	r3, #12
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	fb03 f000 	mul.w	r0, r3, r0
 801848e:	4c68      	ldr	r4, [pc, #416]	; (8018630 <LCD_X_DisplayDriver+0x22c>)
 8018490:	68fa      	ldr	r2, [r7, #12]
 8018492:	4613      	mov	r3, r2
 8018494:	00db      	lsls	r3, r3, #3
 8018496:	1a9b      	subs	r3, r3, r2
 8018498:	009b      	lsls	r3, r3, #2
 801849a:	4423      	add	r3, r4
 801849c:	3314      	adds	r3, #20
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	fb00 f303 	mul.w	r3, r0, r3
 80184a4:	440b      	add	r3, r1
 80184a6:	61fb      	str	r3, [r7, #28]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 80184a8:	68fa      	ldr	r2, [r7, #12]
 80184aa:	69f9      	ldr	r1, [r7, #28]
 80184ac:	4861      	ldr	r0, [pc, #388]	; (8018634 <LCD_X_DisplayDriver+0x230>)
 80184ae:	f7fa fd7f 	bl	8012fb0 <HAL_LTDC_SetAddress>
    break;
 80184b2:	e0b7      	b.n	8018624 <LCD_X_DisplayDriver+0x220>

  case LCD_X_SHOWBUFFER: 
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	6819      	ldr	r1, [r3, #0]
 80184b8:	485d      	ldr	r0, [pc, #372]	; (8018630 <LCD_X_DisplayDriver+0x22c>)
 80184ba:	68fa      	ldr	r2, [r7, #12]
 80184bc:	4613      	mov	r3, r2
 80184be:	00db      	lsls	r3, r3, #3
 80184c0:	1a9b      	subs	r3, r3, r2
 80184c2:	009b      	lsls	r3, r3, #2
 80184c4:	4403      	add	r3, r0
 80184c6:	3304      	adds	r3, #4
 80184c8:	6019      	str	r1, [r3, #0]
    break;
 80184ca:	e0ab      	b.n	8018624 <LCD_X_DisplayDriver+0x220>

  case LCD_X_SETLUTENTRY: 
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 80184cc:	6879      	ldr	r1, [r7, #4]
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	2201      	movs	r2, #1
 80184d2:	4858      	ldr	r0, [pc, #352]	; (8018634 <LCD_X_DisplayDriver+0x230>)
 80184d4:	f7fa fbac 	bl	8012c30 <HAL_LTDC_ConfigCLUT>
    break;
 80184d8:	e0a4      	b.n	8018624 <LCD_X_DisplayDriver+0x220>

  case LCD_X_ON: 
    __HAL_LTDC_ENABLE(&hltdc);
 80184da:	4b56      	ldr	r3, [pc, #344]	; (8018634 <LCD_X_DisplayDriver+0x230>)
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	699a      	ldr	r2, [r3, #24]
 80184e0:	4b54      	ldr	r3, [pc, #336]	; (8018634 <LCD_X_DisplayDriver+0x230>)
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	f042 0201 	orr.w	r2, r2, #1
 80184e8:	619a      	str	r2, [r3, #24]
    break;
 80184ea:	e09b      	b.n	8018624 <LCD_X_DisplayDriver+0x220>

  case LCD_X_OFF: 
    __HAL_LTDC_DISABLE(&hltdc);
 80184ec:	4b51      	ldr	r3, [pc, #324]	; (8018634 <LCD_X_DisplayDriver+0x230>)
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	699a      	ldr	r2, [r3, #24]
 80184f2:	4b50      	ldr	r3, [pc, #320]	; (8018634 <LCD_X_DisplayDriver+0x230>)
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	f022 0201 	bic.w	r2, r2, #1
 80184fa:	619a      	str	r2, [r3, #24]
    break;
 80184fc:	e092      	b.n	8018624 <LCD_X_DisplayDriver+0x220>
    
  case LCD_X_SETVIS:
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	2b01      	cmp	r3, #1
 8018504:	d112      	bne.n	801852c <LCD_X_DisplayDriver+0x128>
    {
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 8018506:	4b4b      	ldr	r3, [pc, #300]	; (8018634 <LCD_X_DisplayDriver+0x230>)
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	461a      	mov	r2, r3
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	01db      	lsls	r3, r3, #7
 8018510:	4413      	add	r3, r2
 8018512:	3384      	adds	r3, #132	; 0x84
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	4a47      	ldr	r2, [pc, #284]	; (8018634 <LCD_X_DisplayDriver+0x230>)
 8018518:	6812      	ldr	r2, [r2, #0]
 801851a:	4611      	mov	r1, r2
 801851c:	68fa      	ldr	r2, [r7, #12]
 801851e:	01d2      	lsls	r2, r2, #7
 8018520:	440a      	add	r2, r1
 8018522:	3284      	adds	r2, #132	; 0x84
 8018524:	f043 0301 	orr.w	r3, r3, #1
 8018528:	6013      	str	r3, [r2, #0]
 801852a:	e011      	b.n	8018550 <LCD_X_DisplayDriver+0x14c>
    }
    else
    {
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex); 
 801852c:	4b41      	ldr	r3, [pc, #260]	; (8018634 <LCD_X_DisplayDriver+0x230>)
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	461a      	mov	r2, r3
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	01db      	lsls	r3, r3, #7
 8018536:	4413      	add	r3, r2
 8018538:	3384      	adds	r3, #132	; 0x84
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	4a3d      	ldr	r2, [pc, #244]	; (8018634 <LCD_X_DisplayDriver+0x230>)
 801853e:	6812      	ldr	r2, [r2, #0]
 8018540:	4611      	mov	r1, r2
 8018542:	68fa      	ldr	r2, [r7, #12]
 8018544:	01d2      	lsls	r2, r2, #7
 8018546:	440a      	add	r2, r1
 8018548:	3284      	adds	r2, #132	; 0x84
 801854a:	f023 0301 	bic.w	r3, r3, #1
 801854e:	6013      	str	r3, [r2, #0]
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc); 
 8018550:	4b38      	ldr	r3, [pc, #224]	; (8018634 <LCD_X_DisplayDriver+0x230>)
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018556:	4b37      	ldr	r3, [pc, #220]	; (8018634 <LCD_X_DisplayDriver+0x230>)
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	f042 0201 	orr.w	r2, r2, #1
 801855e:	625a      	str	r2, [r3, #36]	; 0x24
    break;
 8018560:	e060      	b.n	8018624 <LCD_X_DisplayDriver+0x220>
    
  case LCD_X_SETPOS: 
    HAL_LTDC_SetWindowPosition(&hltdc, 
                               ((LCD_X_SETPOS_INFO *)pData)->xPos, 
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	681b      	ldr	r3, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc, 
 8018566:	4619      	mov	r1, r3
                               ((LCD_X_SETPOS_INFO *)pData)->yPos, 
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	685b      	ldr	r3, [r3, #4]
    HAL_LTDC_SetWindowPosition(&hltdc, 
 801856c:	461a      	mov	r2, r3
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	4830      	ldr	r0, [pc, #192]	; (8018634 <LCD_X_DisplayDriver+0x230>)
 8018572:	f7fa fca1 	bl	8012eb8 <HAL_LTDC_SetWindowPosition>
                               LayerIndex);
    break;
 8018576:	e055      	b.n	8018624 <LCD_X_DisplayDriver+0x220>

  case LCD_X_SETSIZE:
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 8018578:	f107 0214 	add.w	r2, r7, #20
 801857c:	f107 0318 	add.w	r3, r7, #24
 8018580:	4619      	mov	r1, r3
 8018582:	68f8      	ldr	r0, [r7, #12]
 8018584:	f004 fbe6 	bl	801cd54 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	6819      	ldr	r1, [r3, #0]
 801858c:	4828      	ldr	r0, [pc, #160]	; (8018630 <LCD_X_DisplayDriver+0x22c>)
 801858e:	68fa      	ldr	r2, [r7, #12]
 8018590:	4613      	mov	r3, r2
 8018592:	00db      	lsls	r3, r3, #3
 8018594:	1a9b      	subs	r3, r3, r2
 8018596:	009b      	lsls	r3, r3, #2
 8018598:	4403      	add	r3, r0
 801859a:	330c      	adds	r3, #12
 801859c:	6019      	str	r1, [r3, #0]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	6859      	ldr	r1, [r3, #4]
 80185a2:	4823      	ldr	r0, [pc, #140]	; (8018630 <LCD_X_DisplayDriver+0x22c>)
 80185a4:	68fa      	ldr	r2, [r7, #12]
 80185a6:	4613      	mov	r3, r2
 80185a8:	00db      	lsls	r3, r3, #3
 80185aa:	1a9b      	subs	r3, r3, r2
 80185ac:	009b      	lsls	r3, r3, #2
 80185ae:	4403      	add	r3, r0
 80185b0:	3310      	adds	r3, #16
 80185b2:	6019      	str	r1, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 80185b4:	69bb      	ldr	r3, [r7, #24]
 80185b6:	4619      	mov	r1, r3
 80185b8:	697b      	ldr	r3, [r7, #20]
 80185ba:	461a      	mov	r2, r3
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	481d      	ldr	r0, [pc, #116]	; (8018634 <LCD_X_DisplayDriver+0x230>)
 80185c0:	f7fa fc7a 	bl	8012eb8 <HAL_LTDC_SetWindowPosition>
    break;
 80185c4:	e02e      	b.n	8018624 <LCD_X_DisplayDriver+0x220>

  case LCD_X_SETALPHA:
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	68fa      	ldr	r2, [r7, #12]
 80185cc:	4619      	mov	r1, r3
 80185ce:	4819      	ldr	r0, [pc, #100]	; (8018634 <LCD_X_DisplayDriver+0x230>)
 80185d0:	f7fa fcb8 	bl	8012f44 <HAL_LTDC_SetAlpha>
    break;
 80185d4:	e026      	b.n	8018624 <LCD_X_DisplayDriver+0x220>

  case LCD_X_SETCHROMAMODE:
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d004      	beq.n	80185e8 <LCD_X_DisplayDriver+0x1e4>
    {
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 80185de:	68f9      	ldr	r1, [r7, #12]
 80185e0:	4814      	ldr	r0, [pc, #80]	; (8018634 <LCD_X_DisplayDriver+0x230>)
 80185e2:	f7fa fb93 	bl	8012d0c <HAL_LTDC_EnableColorKeying>
    }
    else
    {
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
    }
    break;
 80185e6:	e01d      	b.n	8018624 <LCD_X_DisplayDriver+0x220>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
 80185e8:	68f9      	ldr	r1, [r7, #12]
 80185ea:	4812      	ldr	r0, [pc, #72]	; (8018634 <LCD_X_DisplayDriver+0x230>)
 80185ec:	f7fa fbc7 	bl	8012d7e <HAL_LTDC_DisableColorKeying>
    break;
 80185f0:	e018      	b.n	8018624 <LCD_X_DisplayDriver+0x220>

  case LCD_X_SETCHROMA:

    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	0c1b      	lsrs	r3, r3, #16
 80185f8:	b2da      	uxtb	r2, r3
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8018602:	431a      	orrs	r2, r3
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	041b      	lsls	r3, r3, #16
 801860a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 801860e:	4313      	orrs	r3, r2
 8018610:	623b      	str	r3, [r7, #32]
    
    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 8018612:	68fa      	ldr	r2, [r7, #12]
 8018614:	6a39      	ldr	r1, [r7, #32]
 8018616:	4807      	ldr	r0, [pc, #28]	; (8018634 <LCD_X_DisplayDriver+0x230>)
 8018618:	f7fa fac6 	bl	8012ba8 <HAL_LTDC_ConfigColorKeying>
    break;
 801861c:	e002      	b.n	8018624 <LCD_X_DisplayDriver+0x220>

  default:
    r = -1;
 801861e:	f04f 33ff 	mov.w	r3, #4294967295
 8018622:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8018624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018626:	4618      	mov	r0, r3
 8018628:	372c      	adds	r7, #44	; 0x2c
 801862a:	46bd      	mov	sp, r7
 801862c:	bd90      	pop	{r4, r7, pc}
 801862e:	bf00      	nop
 8018630:	2002c2f8 	.word	0x2002c2f8
 8018634:	20001cd8 	.word	0x20001cd8

08018638 <LCD_LL_LayerInit>:
  * @brief  Initialize the LCD Controller.
  * @param  LayerIndex : layer Index.
  * @retval None
  */
static void LCD_LL_LayerInit(U32 LayerIndex) 
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b090      	sub	sp, #64	; 0x40
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
  LTDC_LayerCfgTypeDef             layer_cfg;
  
  if (LayerIndex < GUI_NUM_LAYERS) 
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d13b      	bne.n	80186be <LCD_LL_LayerInit+0x86>
  { 
    /* Layer configuration */
    layer_cfg.WindowX0 = 0;
 8018646:	2300      	movs	r3, #0
 8018648:	60fb      	str	r3, [r7, #12]
    layer_cfg.WindowX1 = XSIZE_PHYS;
 801864a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801864e:	613b      	str	r3, [r7, #16]
    layer_cfg.WindowY0 = 0;
 8018650:	2300      	movs	r3, #0
 8018652:	617b      	str	r3, [r7, #20]
    layer_cfg.WindowY1 = YSIZE_PHYS; 
 8018654:	f44f 7388 	mov.w	r3, #272	; 0x110
 8018658:	61bb      	str	r3, [r7, #24]
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 801865a:	6878      	ldr	r0, [r7, #4]
 801865c:	f7ff fe11 	bl	8018282 <LCD_LL_GetPixelformat>
 8018660:	4603      	mov	r3, r0
 8018662:	61fb      	str	r3, [r7, #28]
    layer_cfg.FBStartAdress = ((uint32_t)0xC0000000);
 8018664:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8018668:	633b      	str	r3, [r7, #48]	; 0x30
    layer_cfg.Alpha = 255;
 801866a:	23ff      	movs	r3, #255	; 0xff
 801866c:	623b      	str	r3, [r7, #32]
    layer_cfg.Alpha0 = 0;
 801866e:	2300      	movs	r3, #0
 8018670:	627b      	str	r3, [r7, #36]	; 0x24
    layer_cfg.Backcolor.Blue = 0;
 8018672:	2300      	movs	r3, #0
 8018674:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    layer_cfg.Backcolor.Green = 0;
 8018678:	2300      	movs	r3, #0
 801867a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    layer_cfg.Backcolor.Red = 0;
 801867e:	2300      	movs	r3, #0
 8018680:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8018684:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8018688:	62bb      	str	r3, [r7, #40]	; 0x28
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801868a:	2307      	movs	r3, #7
 801868c:	62fb      	str	r3, [r7, #44]	; 0x2c
    layer_cfg.ImageWidth = XSIZE_PHYS;
 801868e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8018692:	637b      	str	r3, [r7, #52]	; 0x34
    layer_cfg.ImageHeight = YSIZE_PHYS;
 8018694:	f44f 7388 	mov.w	r3, #272	; 0x110
 8018698:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);  
 801869a:	f107 030c 	add.w	r3, r7, #12
 801869e:	687a      	ldr	r2, [r7, #4]
 80186a0:	4619      	mov	r1, r3
 80186a2:	4809      	ldr	r0, [pc, #36]	; (80186c8 <LCD_LL_LayerInit+0x90>)
 80186a4:	f7fa fa42 	bl	8012b2c <HAL_LTDC_ConfigLayer>
    
    /* Enable LUT on demand */
    if (LCD_GetBitsPerPixelEx(LayerIndex) <= 8) 
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	4618      	mov	r0, r3
 80186ac:	f003 fb70 	bl	801bd90 <LCD_GetBitsPerPixelEx>
 80186b0:	4603      	mov	r3, r0
 80186b2:	2b08      	cmp	r3, #8
 80186b4:	dc03      	bgt.n	80186be <LCD_LL_LayerInit+0x86>
    {
      /* Enable usage of LUT for all modes with <= 8bpp*/
      HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 80186b6:	6879      	ldr	r1, [r7, #4]
 80186b8:	4803      	ldr	r0, [pc, #12]	; (80186c8 <LCD_LL_LayerInit+0x90>)
 80186ba:	f7fa fb99 	bl	8012df0 <HAL_LTDC_EnableCLUT>
    } 
  } 
}
 80186be:	bf00      	nop
 80186c0:	3740      	adds	r7, #64	; 0x40
 80186c2:	46bd      	mov	sp, r7
 80186c4:	bd80      	pop	{r7, pc}
 80186c6:	bf00      	nop
 80186c8:	20001cd8 	.word	0x20001cd8

080186cc <LCD_LL_Init>:
  * @brief  Initialize the LCD Controller.
  * @param  LayerIndex : layer Index.
  * @retval None
  */
static void LCD_LL_Init(void) 
{ 
 80186cc:	b580      	push	{r7, lr}
 80186ce:	af00      	add	r7, sp, #0
  /* DeInit */
  HAL_LTDC_DeInit(&hltdc);
 80186d0:	4832      	ldr	r0, [pc, #200]	; (801879c <LCD_LL_Init+0xd0>)
 80186d2:	f7fa fa13 	bl	8012afc <HAL_LTDC_DeInit>
  
  /* Set LCD Timings */
  hltdc.Init.HorizontalSync = 40;
 80186d6:	4b31      	ldr	r3, [pc, #196]	; (801879c <LCD_LL_Init+0xd0>)
 80186d8:	2228      	movs	r2, #40	; 0x28
 80186da:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80186dc:	4b2f      	ldr	r3, [pc, #188]	; (801879c <LCD_LL_Init+0xd0>)
 80186de:	2209      	movs	r2, #9
 80186e0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80186e2:	4b2e      	ldr	r3, [pc, #184]	; (801879c <LCD_LL_Init+0xd0>)
 80186e4:	2235      	movs	r2, #53	; 0x35
 80186e6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80186e8:	4b2c      	ldr	r3, [pc, #176]	; (801879c <LCD_LL_Init+0xd0>)
 80186ea:	220b      	movs	r2, #11
 80186ec:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveH = 283;
 80186ee:	4b2b      	ldr	r3, [pc, #172]	; (801879c <LCD_LL_Init+0xd0>)
 80186f0:	f240 121b 	movw	r2, #283	; 0x11b
 80186f4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.AccumulatedActiveW = 533;
 80186f6:	4b29      	ldr	r3, [pc, #164]	; (801879c <LCD_LL_Init+0xd0>)
 80186f8:	f240 2215 	movw	r2, #533	; 0x215
 80186fc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 80186fe:	4b27      	ldr	r3, [pc, #156]	; (801879c <LCD_LL_Init+0xd0>)
 8018700:	f240 121d 	movw	r2, #285	; 0x11d
 8018704:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.TotalWidth = 565;
 8018706:	4b25      	ldr	r3, [pc, #148]	; (801879c <LCD_LL_Init+0xd0>)
 8018708:	f240 2235 	movw	r2, #565	; 0x235
 801870c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* background value */
  hltdc.Init.Backcolor.Blue = 0;
 801870e:	4b23      	ldr	r3, [pc, #140]	; (801879c <LCD_LL_Init+0xd0>)
 8018710:	2200      	movs	r2, #0
 8018712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8018716:	4b21      	ldr	r3, [pc, #132]	; (801879c <LCD_LL_Init+0xd0>)
 8018718:	2200      	movs	r2, #0
 801871a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;  
 801871e:	4b1f      	ldr	r3, [pc, #124]	; (801879c <LCD_LL_Init+0xd0>)
 8018720:	2200      	movs	r2, #0
 8018722:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8018726:	4b1d      	ldr	r3, [pc, #116]	; (801879c <LCD_LL_Init+0xd0>)
 8018728:	2200      	movs	r2, #0
 801872a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 801872c:	4b1b      	ldr	r3, [pc, #108]	; (801879c <LCD_LL_Init+0xd0>)
 801872e:	2200      	movs	r2, #0
 8018730:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8018732:	4b1a      	ldr	r3, [pc, #104]	; (801879c <LCD_LL_Init+0xd0>)
 8018734:	2200      	movs	r2, #0
 8018736:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8018738:	4b18      	ldr	r3, [pc, #96]	; (801879c <LCD_LL_Init+0xd0>)
 801873a:	2200      	movs	r2, #0
 801873c:	611a      	str	r2, [r3, #16]
  hltdc.Instance = LTDC;
 801873e:	4b17      	ldr	r3, [pc, #92]	; (801879c <LCD_LL_Init+0xd0>)
 8018740:	4a17      	ldr	r2, [pc, #92]	; (80187a0 <LCD_LL_Init+0xd4>)
 8018742:	601a      	str	r2, [r3, #0]
  
  HAL_LTDC_Init(&hltdc);
 8018744:	4815      	ldr	r0, [pc, #84]	; (801879c <LCD_LL_Init+0xd0>)
 8018746:	f7fa f909 	bl	801295c <HAL_LTDC_Init>
  HAL_LTDC_ProgramLineEvent(&hltdc, 0);
 801874a:	2100      	movs	r1, #0
 801874c:	4813      	ldr	r0, [pc, #76]	; (801879c <LCD_LL_Init+0xd0>)
 801874e:	f7fa fc65 	bl	801301c <HAL_LTDC_ProgramLineEvent>
  
  /* Enable dithering */
  HAL_LTDC_EnableDither(&hltdc);
 8018752:	4812      	ldr	r0, [pc, #72]	; (801879c <LCD_LL_Init+0xd0>)
 8018754:	f7fa fb86 	bl	8012e64 <HAL_LTDC_EnableDither>
    
   /* Configure the DMA2D default mode */ 
  hdma2d.Init.Mode         = DMA2D_R2M;
 8018758:	4b12      	ldr	r3, [pc, #72]	; (80187a4 <LCD_LL_Init+0xd8>)
 801875a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801875e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode    = DMA2D_RGB565;
 8018760:	4b10      	ldr	r3, [pc, #64]	; (80187a4 <LCD_LL_Init+0xd8>)
 8018762:	2202      	movs	r2, #2
 8018764:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0x0;     
 8018766:	4b0f      	ldr	r3, [pc, #60]	; (80187a4 <LCD_LL_Init+0xd8>)
 8018768:	2200      	movs	r2, #0
 801876a:	60da      	str	r2, [r3, #12]

  hdma2d.Instance          = DMA2D; 
 801876c:	4b0d      	ldr	r3, [pc, #52]	; (80187a4 <LCD_LL_Init+0xd8>)
 801876e:	4a0e      	ldr	r2, [pc, #56]	; (80187a8 <LCD_LL_Init+0xdc>)
 8018770:	601a      	str	r2, [r3, #0]

  if(HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8018772:	480c      	ldr	r0, [pc, #48]	; (80187a4 <LCD_LL_Init+0xd8>)
 8018774:	f7f9 fca8 	bl	80120c8 <HAL_DMA2D_Init>
 8018778:	4603      	mov	r3, r0
 801877a:	2b00      	cmp	r3, #0
 801877c:	d000      	beq.n	8018780 <LCD_LL_Init+0xb4>
  {
    while (1);
 801877e:	e7fe      	b.n	801877e <LCD_LL_Init+0xb2>
  }
  
  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8018780:	2201      	movs	r2, #1
 8018782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8018786:	4809      	ldr	r0, [pc, #36]	; (80187ac <LCD_LL_Init+0xe0>)
 8018788:	f7fa f866 	bl	8012858 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 801878c:	2201      	movs	r2, #1
 801878e:	2108      	movs	r1, #8
 8018790:	4807      	ldr	r0, [pc, #28]	; (80187b0 <LCD_LL_Init+0xe4>)
 8018792:	f7fa f861 	bl	8012858 <HAL_GPIO_WritePin>

}
 8018796:	bf00      	nop
 8018798:	bd80      	pop	{r7, pc}
 801879a:	bf00      	nop
 801879c:	20001cd8 	.word	0x20001cd8
 80187a0:	40016800 	.word	0x40016800
 80187a4:	2002c2a0 	.word	0x2002c2a0
 80187a8:	4002b000 	.word	0x4002b000
 80187ac:	40022000 	.word	0x40022000
 80187b0:	40022800 	.word	0x40022800

080187b4 <DMA2D_CopyBuffer>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b086      	sub	sp, #24
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	60f8      	str	r0, [r7, #12]
 80187bc:	60b9      	str	r1, [r7, #8]
 80187be:	607a      	str	r2, [r7, #4]
 80187c0:	603b      	str	r3, [r7, #0]
  U32 PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 80187c2:	68f8      	ldr	r0, [r7, #12]
 80187c4:	f7ff fd5d 	bl	8018282 <LCD_LL_GetPixelformat>
 80187c8:	6178      	str	r0, [r7, #20]
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 80187ca:	4b16      	ldr	r3, [pc, #88]	; (8018824 <DMA2D_CopyBuffer+0x70>)
 80187cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80187d0:	601a      	str	r2, [r3, #0]
  	
  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 80187d2:	4a14      	ldr	r2, [pc, #80]	; (8018824 <DMA2D_CopyBuffer+0x70>)
 80187d4:	68bb      	ldr	r3, [r7, #8]
 80187d6:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 80187d8:	4a12      	ldr	r2, [pc, #72]	; (8018824 <DMA2D_CopyBuffer+0x70>)
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	63d3      	str	r3, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 80187de:	4a11      	ldr	r2, [pc, #68]	; (8018824 <DMA2D_CopyBuffer+0x70>)
 80187e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187e2:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 80187e4:	4a0f      	ldr	r2, [pc, #60]	; (8018824 <DMA2D_CopyBuffer+0x70>)
 80187e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e8:	6413      	str	r3, [r2, #64]	; 0x40
  
  /* Set up pixel format */  
  DMA2D->FGPFCCR = PixelFormat;  
 80187ea:	4a0e      	ldr	r2, [pc, #56]	; (8018824 <DMA2D_CopyBuffer+0x70>)
 80187ec:	697b      	ldr	r3, [r7, #20]
 80187ee:	61d3      	str	r3, [r2, #28]
  
  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 80187f0:	683b      	ldr	r3, [r7, #0]
 80187f2:	041b      	lsls	r3, r3, #16
 80187f4:	6a3a      	ldr	r2, [r7, #32]
 80187f6:	b292      	uxth	r2, r2
 80187f8:	4611      	mov	r1, r2
 80187fa:	4a0a      	ldr	r2, [pc, #40]	; (8018824 <DMA2D_CopyBuffer+0x70>)
 80187fc:	430b      	orrs	r3, r1
 80187fe:	6453      	str	r3, [r2, #68]	; 0x44
  
  DMA2D->CR     |= DMA2D_CR_START;   
 8018800:	4b08      	ldr	r3, [pc, #32]	; (8018824 <DMA2D_CopyBuffer+0x70>)
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	4a07      	ldr	r2, [pc, #28]	; (8018824 <DMA2D_CopyBuffer+0x70>)
 8018806:	f043 0301 	orr.w	r3, r3, #1
 801880a:	6013      	str	r3, [r2, #0]
 
  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START) 
 801880c:	bf00      	nop
 801880e:	4b05      	ldr	r3, [pc, #20]	; (8018824 <DMA2D_CopyBuffer+0x70>)
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	f003 0301 	and.w	r3, r3, #1
 8018816:	2b00      	cmp	r3, #0
 8018818:	d1f9      	bne.n	801880e <DMA2D_CopyBuffer+0x5a>
  {
  }
}
 801881a:	bf00      	nop
 801881c:	bf00      	nop
 801881e:	3718      	adds	r7, #24
 8018820:	46bd      	mov	sp, r7
 8018822:	bd80      	pop	{r7, pc}
 8018824:	4002b000 	.word	0x4002b000

08018828 <DMA2D_FillBuffer>:
  * @param  OffLine:     offset after each line
  * @param  ColorIndex:  color to be used.           
  * @retval None.
  */
static void DMA2D_FillBuffer(U32 LayerIndex, void * pDst, U32 xSize, U32 ySize, U32 OffLine, U32 ColorIndex) 
{
 8018828:	b580      	push	{r7, lr}
 801882a:	b086      	sub	sp, #24
 801882c:	af00      	add	r7, sp, #0
 801882e:	60f8      	str	r0, [r7, #12]
 8018830:	60b9      	str	r1, [r7, #8]
 8018832:	607a      	str	r2, [r7, #4]
 8018834:	603b      	str	r3, [r7, #0]

  U32 PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8018836:	68f8      	ldr	r0, [r7, #12]
 8018838:	f7ff fd23 	bl	8018282 <LCD_LL_GetPixelformat>
 801883c:	6178      	str	r0, [r7, #20]
	
  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 801883e:	4b14      	ldr	r3, [pc, #80]	; (8018890 <DMA2D_FillBuffer+0x68>)
 8018840:	4a14      	ldr	r2, [pc, #80]	; (8018894 <DMA2D_FillBuffer+0x6c>)
 8018842:	601a      	str	r2, [r3, #0]
  DMA2D->OCOLR   = ColorIndex;                     
 8018844:	4a12      	ldr	r2, [pc, #72]	; (8018890 <DMA2D_FillBuffer+0x68>)
 8018846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018848:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set up pointers */
  DMA2D->OMAR    = (U32)pDst;                      
 801884a:	4a11      	ldr	r2, [pc, #68]	; (8018890 <DMA2D_FillBuffer+0x68>)
 801884c:	68bb      	ldr	r3, [r7, #8]
 801884e:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->OOR     = OffLine;                        
 8018850:	4a0f      	ldr	r2, [pc, #60]	; (8018890 <DMA2D_FillBuffer+0x68>)
 8018852:	6a3b      	ldr	r3, [r7, #32]
 8018854:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;                    
 8018856:	4a0e      	ldr	r2, [pc, #56]	; (8018890 <DMA2D_FillBuffer+0x68>)
 8018858:	697b      	ldr	r3, [r7, #20]
 801885a:	6353      	str	r3, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	041b      	lsls	r3, r3, #16
 8018860:	683a      	ldr	r2, [r7, #0]
 8018862:	b292      	uxth	r2, r2
 8018864:	4611      	mov	r1, r2
 8018866:	4a0a      	ldr	r2, [pc, #40]	; (8018890 <DMA2D_FillBuffer+0x68>)
 8018868:	430b      	orrs	r3, r1
 801886a:	6453      	str	r3, [r2, #68]	; 0x44
    
  DMA2D->CR     |= DMA2D_CR_START; 
 801886c:	4b08      	ldr	r3, [pc, #32]	; (8018890 <DMA2D_FillBuffer+0x68>)
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	4a07      	ldr	r2, [pc, #28]	; (8018890 <DMA2D_FillBuffer+0x68>)
 8018872:	f043 0301 	orr.w	r3, r3, #1
 8018876:	6013      	str	r3, [r2, #0]
  
  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START) 
 8018878:	bf00      	nop
 801887a:	4b05      	ldr	r3, [pc, #20]	; (8018890 <DMA2D_FillBuffer+0x68>)
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	f003 0301 	and.w	r3, r3, #1
 8018882:	2b00      	cmp	r3, #0
 8018884:	d1f9      	bne.n	801887a <DMA2D_FillBuffer+0x52>
  {
  }
}
 8018886:	bf00      	nop
 8018888:	bf00      	nop
 801888a:	3718      	adds	r7, #24
 801888c:	46bd      	mov	sp, r7
 801888e:	bd80      	pop	{r7, pc}
 8018890:	4002b000 	.word	0x4002b000
 8018894:	00030200 	.word	0x00030200

08018898 <GetBufferSize>:
  * @brief  Get buffer size
  * @param  LayerIndex : Layer Index           
  * @retval None.
  */
static U32 GetBufferSize(U32 LayerIndex) 
{
 8018898:	b480      	push	{r7}
 801889a:	b085      	sub	sp, #20
 801889c:	af00      	add	r7, sp, #0
 801889e:	6078      	str	r0, [r7, #4]
  U32 BufferSize;

  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 80188a0:	4913      	ldr	r1, [pc, #76]	; (80188f0 <GetBufferSize+0x58>)
 80188a2:	687a      	ldr	r2, [r7, #4]
 80188a4:	4613      	mov	r3, r2
 80188a6:	00db      	lsls	r3, r3, #3
 80188a8:	1a9b      	subs	r3, r3, r2
 80188aa:	009b      	lsls	r3, r3, #2
 80188ac:	440b      	add	r3, r1
 80188ae:	330c      	adds	r3, #12
 80188b0:	6819      	ldr	r1, [r3, #0]
 80188b2:	480f      	ldr	r0, [pc, #60]	; (80188f0 <GetBufferSize+0x58>)
 80188b4:	687a      	ldr	r2, [r7, #4]
 80188b6:	4613      	mov	r3, r2
 80188b8:	00db      	lsls	r3, r3, #3
 80188ba:	1a9b      	subs	r3, r3, r2
 80188bc:	009b      	lsls	r3, r3, #2
 80188be:	4403      	add	r3, r0
 80188c0:	3310      	adds	r3, #16
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	fb03 f101 	mul.w	r1, r3, r1
 80188c8:	4809      	ldr	r0, [pc, #36]	; (80188f0 <GetBufferSize+0x58>)
 80188ca:	687a      	ldr	r2, [r7, #4]
 80188cc:	4613      	mov	r3, r2
 80188ce:	00db      	lsls	r3, r3, #3
 80188d0:	1a9b      	subs	r3, r3, r2
 80188d2:	009b      	lsls	r3, r3, #2
 80188d4:	4403      	add	r3, r0
 80188d6:	3314      	adds	r3, #20
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	fb01 f303 	mul.w	r3, r1, r3
 80188de:	60fb      	str	r3, [r7, #12]
  return BufferSize;
 80188e0:	68fb      	ldr	r3, [r7, #12]
}
 80188e2:	4618      	mov	r0, r3
 80188e4:	3714      	adds	r7, #20
 80188e6:	46bd      	mov	sp, r7
 80188e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ec:	4770      	bx	lr
 80188ee:	bf00      	nop
 80188f0:	2002c2f8 	.word	0x2002c2f8

080188f4 <CUSTOM_CopyBuffer>:
  * @param  LayerIndex : Layer Index
  * @param  IndexSrc:    index source
  * @param  IndexDst:    index destination           
  * @retval None.
  */
static void CUSTOM_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) {
 80188f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188f6:	b08d      	sub	sp, #52	; 0x34
 80188f8:	af04      	add	r7, sp, #16
 80188fa:	60f8      	str	r0, [r7, #12]
 80188fc:	60b9      	str	r1, [r7, #8]
 80188fe:	607a      	str	r2, [r7, #4]
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	4618      	mov	r0, r3
 8018904:	f7ff ffc8 	bl	8018898 <GetBufferSize>
 8018908:	61f8      	str	r0, [r7, #28]
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 801890a:	4926      	ldr	r1, [pc, #152]	; (80189a4 <CUSTOM_CopyBuffer+0xb0>)
 801890c:	68fa      	ldr	r2, [r7, #12]
 801890e:	4613      	mov	r3, r2
 8018910:	00db      	lsls	r3, r3, #3
 8018912:	1a9b      	subs	r3, r3, r2
 8018914:	009b      	lsls	r3, r3, #2
 8018916:	440b      	add	r3, r1
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	4619      	mov	r1, r3
 801891c:	68bb      	ldr	r3, [r7, #8]
 801891e:	69fa      	ldr	r2, [r7, #28]
 8018920:	fb02 f303 	mul.w	r3, r2, r3
 8018924:	440b      	add	r3, r1
 8018926:	61bb      	str	r3, [r7, #24]
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
 8018928:	491e      	ldr	r1, [pc, #120]	; (80189a4 <CUSTOM_CopyBuffer+0xb0>)
 801892a:	68fa      	ldr	r2, [r7, #12]
 801892c:	4613      	mov	r3, r2
 801892e:	00db      	lsls	r3, r3, #3
 8018930:	1a9b      	subs	r3, r3, r2
 8018932:	009b      	lsls	r3, r3, #2
 8018934:	440b      	add	r3, r1
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	4619      	mov	r1, r3
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	69fa      	ldr	r2, [r7, #28]
 801893e:	fb02 f303 	mul.w	r3, r2, r3
 8018942:	440b      	add	r3, r1
 8018944:	617b      	str	r3, [r7, #20]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8018946:	68f8      	ldr	r0, [r7, #12]
 8018948:	69b9      	ldr	r1, [r7, #24]
 801894a:	697c      	ldr	r4, [r7, #20]
 801894c:	4d15      	ldr	r5, [pc, #84]	; (80189a4 <CUSTOM_CopyBuffer+0xb0>)
 801894e:	68fa      	ldr	r2, [r7, #12]
 8018950:	4613      	mov	r3, r2
 8018952:	00db      	lsls	r3, r3, #3
 8018954:	1a9b      	subs	r3, r3, r2
 8018956:	009b      	lsls	r3, r3, #2
 8018958:	442b      	add	r3, r5
 801895a:	330c      	adds	r3, #12
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	461e      	mov	r6, r3
 8018960:	4d10      	ldr	r5, [pc, #64]	; (80189a4 <CUSTOM_CopyBuffer+0xb0>)
 8018962:	68fa      	ldr	r2, [r7, #12]
 8018964:	4613      	mov	r3, r2
 8018966:	00db      	lsls	r3, r3, #3
 8018968:	1a9b      	subs	r3, r3, r2
 801896a:	009b      	lsls	r3, r3, #2
 801896c:	442b      	add	r3, r5
 801896e:	3310      	adds	r3, #16
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	461a      	mov	r2, r3
 8018974:	2300      	movs	r3, #0
 8018976:	9302      	str	r3, [sp, #8]
 8018978:	2300      	movs	r3, #0
 801897a:	9301      	str	r3, [sp, #4]
 801897c:	9200      	str	r2, [sp, #0]
 801897e:	4633      	mov	r3, r6
 8018980:	4622      	mov	r2, r4
 8018982:	f7ff ff17 	bl	80187b4 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 8018986:	4907      	ldr	r1, [pc, #28]	; (80189a4 <CUSTOM_CopyBuffer+0xb0>)
 8018988:	68fa      	ldr	r2, [r7, #12]
 801898a:	4613      	mov	r3, r2
 801898c:	00db      	lsls	r3, r3, #3
 801898e:	1a9b      	subs	r3, r3, r2
 8018990:	009b      	lsls	r3, r3, #2
 8018992:	440b      	add	r3, r1
 8018994:	3308      	adds	r3, #8
 8018996:	687a      	ldr	r2, [r7, #4]
 8018998:	601a      	str	r2, [r3, #0]
}
 801899a:	bf00      	nop
 801899c:	3724      	adds	r7, #36	; 0x24
 801899e:	46bd      	mov	sp, r7
 80189a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189a2:	bf00      	nop
 80189a4:	2002c2f8 	.word	0x2002c2f8

080189a8 <CUSTOM_CopyRect>:
  * @param  xSize:       X size. 
  * @param  ySize:       Y size.            
  * @retval None.
  */
static void CUSTOM_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
 80189a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189aa:	b08d      	sub	sp, #52	; 0x34
 80189ac:	af04      	add	r7, sp, #16
 80189ae:	6178      	str	r0, [r7, #20]
 80189b0:	6139      	str	r1, [r7, #16]
 80189b2:	60fa      	str	r2, [r7, #12]
 80189b4:	60bb      	str	r3, [r7, #8]
  U32 AddrSrc, AddrDst;  

  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80189b6:	4939      	ldr	r1, [pc, #228]	; (8018a9c <CUSTOM_CopyRect+0xf4>)
 80189b8:	697a      	ldr	r2, [r7, #20]
 80189ba:	4613      	mov	r3, r2
 80189bc:	00db      	lsls	r3, r3, #3
 80189be:	1a9b      	subs	r3, r3, r2
 80189c0:	009b      	lsls	r3, r3, #2
 80189c2:	440b      	add	r3, r1
 80189c4:	6819      	ldr	r1, [r3, #0]
 80189c6:	4835      	ldr	r0, [pc, #212]	; (8018a9c <CUSTOM_CopyRect+0xf4>)
 80189c8:	697a      	ldr	r2, [r7, #20]
 80189ca:	4613      	mov	r3, r2
 80189cc:	00db      	lsls	r3, r3, #3
 80189ce:	1a9b      	subs	r3, r3, r2
 80189d0:	009b      	lsls	r3, r3, #2
 80189d2:	4403      	add	r3, r0
 80189d4:	330c      	adds	r3, #12
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	68fa      	ldr	r2, [r7, #12]
 80189da:	fb03 f202 	mul.w	r2, r3, r2
 80189de:	693b      	ldr	r3, [r7, #16]
 80189e0:	18d0      	adds	r0, r2, r3
 80189e2:	4c2e      	ldr	r4, [pc, #184]	; (8018a9c <CUSTOM_CopyRect+0xf4>)
 80189e4:	697a      	ldr	r2, [r7, #20]
 80189e6:	4613      	mov	r3, r2
 80189e8:	00db      	lsls	r3, r3, #3
 80189ea:	1a9b      	subs	r3, r3, r2
 80189ec:	009b      	lsls	r3, r3, #2
 80189ee:	4423      	add	r3, r4
 80189f0:	3314      	adds	r3, #20
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	fb00 f303 	mul.w	r3, r0, r3
 80189f8:	440b      	add	r3, r1
 80189fa:	61fb      	str	r3, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 80189fc:	4927      	ldr	r1, [pc, #156]	; (8018a9c <CUSTOM_CopyRect+0xf4>)
 80189fe:	697a      	ldr	r2, [r7, #20]
 8018a00:	4613      	mov	r3, r2
 8018a02:	00db      	lsls	r3, r3, #3
 8018a04:	1a9b      	subs	r3, r3, r2
 8018a06:	009b      	lsls	r3, r3, #2
 8018a08:	440b      	add	r3, r1
 8018a0a:	6819      	ldr	r1, [r3, #0]
 8018a0c:	4823      	ldr	r0, [pc, #140]	; (8018a9c <CUSTOM_CopyRect+0xf4>)
 8018a0e:	697a      	ldr	r2, [r7, #20]
 8018a10:	4613      	mov	r3, r2
 8018a12:	00db      	lsls	r3, r3, #3
 8018a14:	1a9b      	subs	r3, r3, r2
 8018a16:	009b      	lsls	r3, r3, #2
 8018a18:	4403      	add	r3, r0
 8018a1a:	330c      	adds	r3, #12
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018a20:	fb03 f202 	mul.w	r2, r3, r2
 8018a24:	68bb      	ldr	r3, [r7, #8]
 8018a26:	18d0      	adds	r0, r2, r3
 8018a28:	4c1c      	ldr	r4, [pc, #112]	; (8018a9c <CUSTOM_CopyRect+0xf4>)
 8018a2a:	697a      	ldr	r2, [r7, #20]
 8018a2c:	4613      	mov	r3, r2
 8018a2e:	00db      	lsls	r3, r3, #3
 8018a30:	1a9b      	subs	r3, r3, r2
 8018a32:	009b      	lsls	r3, r3, #2
 8018a34:	4423      	add	r3, r4
 8018a36:	3314      	adds	r3, #20
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	fb00 f303 	mul.w	r3, r0, r3
 8018a3e:	440b      	add	r3, r1
 8018a40:	61bb      	str	r3, [r7, #24]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 8018a42:	6978      	ldr	r0, [r7, #20]
 8018a44:	69fc      	ldr	r4, [r7, #28]
 8018a46:	69bd      	ldr	r5, [r7, #24]
 8018a48:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8018a4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8018a4c:	4b13      	ldr	r3, [pc, #76]	; (8018a9c <CUSTOM_CopyRect+0xf4>)
 8018a4e:	607b      	str	r3, [r7, #4]
 8018a50:	697a      	ldr	r2, [r7, #20]
 8018a52:	4613      	mov	r3, r2
 8018a54:	00db      	lsls	r3, r3, #3
 8018a56:	1a9b      	subs	r3, r3, r2
 8018a58:	009b      	lsls	r3, r3, #2
 8018a5a:	687a      	ldr	r2, [r7, #4]
 8018a5c:	4413      	add	r3, r2
 8018a5e:	330c      	adds	r3, #12
 8018a60:	681a      	ldr	r2, [r3, #0]
 8018a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018a64:	1ad3      	subs	r3, r2, r3
 8018a66:	607b      	str	r3, [r7, #4]
 8018a68:	4a0c      	ldr	r2, [pc, #48]	; (8018a9c <CUSTOM_CopyRect+0xf4>)
 8018a6a:	603a      	str	r2, [r7, #0]
 8018a6c:	697a      	ldr	r2, [r7, #20]
 8018a6e:	4613      	mov	r3, r2
 8018a70:	00db      	lsls	r3, r3, #3
 8018a72:	1a9b      	subs	r3, r3, r2
 8018a74:	009b      	lsls	r3, r3, #2
 8018a76:	683a      	ldr	r2, [r7, #0]
 8018a78:	4413      	add	r3, r2
 8018a7a:	330c      	adds	r3, #12
 8018a7c:	681a      	ldr	r2, [r3, #0]
 8018a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018a80:	1ad3      	subs	r3, r2, r3
 8018a82:	9302      	str	r3, [sp, #8]
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	9301      	str	r3, [sp, #4]
 8018a88:	9100      	str	r1, [sp, #0]
 8018a8a:	4633      	mov	r3, r6
 8018a8c:	462a      	mov	r2, r5
 8018a8e:	4621      	mov	r1, r4
 8018a90:	f7ff fe90 	bl	80187b4 <DMA2D_CopyBuffer>
}
 8018a94:	bf00      	nop
 8018a96:	3724      	adds	r7, #36	; 0x24
 8018a98:	46bd      	mov	sp, r7
 8018a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a9c:	2002c2f8 	.word	0x2002c2f8

08018aa0 <CUSTOM_FillRect>:
  * @param  y1:          Y1 position
  * @param  PixelIndex:  Pixel index.             
  * @retval None.
  */
static void CUSTOM_FillRect(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex) 
{
 8018aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018aa2:	b08b      	sub	sp, #44	; 0x2c
 8018aa4:	af02      	add	r7, sp, #8
 8018aa6:	60f8      	str	r0, [r7, #12]
 8018aa8:	60b9      	str	r1, [r7, #8]
 8018aaa:	607a      	str	r2, [r7, #4]
 8018aac:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int xSize, ySize;


  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 8018aae:	f004 fa41 	bl	801cf34 <GUI_GetDrawMode>
 8018ab2:	4603      	mov	r3, r0
 8018ab4:	2b01      	cmp	r3, #1
 8018ab6:	d110      	bne.n	8018ada <CUSTOM_FillRect+0x3a>
  {		
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 8018ab8:	2200      	movs	r2, #0
 8018aba:	2119      	movs	r1, #25
 8018abc:	68f8      	ldr	r0, [r7, #12]
 8018abe:	f003 f923 	bl	801bd08 <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 8018ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ac4:	683a      	ldr	r2, [r7, #0]
 8018ac6:	6879      	ldr	r1, [r7, #4]
 8018ac8:	68b8      	ldr	r0, [r7, #8]
 8018aca:	f003 fac3 	bl	801c054 <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8018ace:	4a31      	ldr	r2, [pc, #196]	; (8018b94 <CUSTOM_FillRect+0xf4>)
 8018ad0:	2119      	movs	r1, #25
 8018ad2:	68f8      	ldr	r0, [r7, #12]
 8018ad4:	f003 f918 	bl	801bd08 <LCD_SetDevFunc>
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
	}
}
 8018ad8:	e058      	b.n	8018b8c <CUSTOM_FillRect+0xec>
    xSize = x1 - x0 + 1;
 8018ada:	683a      	ldr	r2, [r7, #0]
 8018adc:	68bb      	ldr	r3, [r7, #8]
 8018ade:	1ad3      	subs	r3, r2, r3
 8018ae0:	3301      	adds	r3, #1
 8018ae2:	61fb      	str	r3, [r7, #28]
    ySize = y1 - y0 + 1;
 8018ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	1ad3      	subs	r3, r2, r3
 8018aea:	3301      	adds	r3, #1
 8018aec:	61bb      	str	r3, [r7, #24]
    BufferSize = GetBufferSize(LayerIndex);
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	4618      	mov	r0, r3
 8018af2:	f7ff fed1 	bl	8018898 <GetBufferSize>
 8018af6:	6178      	str	r0, [r7, #20]
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8018af8:	4927      	ldr	r1, [pc, #156]	; (8018b98 <CUSTOM_FillRect+0xf8>)
 8018afa:	68fa      	ldr	r2, [r7, #12]
 8018afc:	4613      	mov	r3, r2
 8018afe:	00db      	lsls	r3, r3, #3
 8018b00:	1a9b      	subs	r3, r3, r2
 8018b02:	009b      	lsls	r3, r3, #2
 8018b04:	440b      	add	r3, r1
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	461c      	mov	r4, r3
 8018b0a:	4923      	ldr	r1, [pc, #140]	; (8018b98 <CUSTOM_FillRect+0xf8>)
 8018b0c:	68fa      	ldr	r2, [r7, #12]
 8018b0e:	4613      	mov	r3, r2
 8018b10:	00db      	lsls	r3, r3, #3
 8018b12:	1a9b      	subs	r3, r3, r2
 8018b14:	009b      	lsls	r3, r3, #2
 8018b16:	440b      	add	r3, r1
 8018b18:	330c      	adds	r3, #12
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	687a      	ldr	r2, [r7, #4]
 8018b1e:	fb03 f202 	mul.w	r2, r3, r2
 8018b22:	68bb      	ldr	r3, [r7, #8]
 8018b24:	18d1      	adds	r1, r2, r3
 8018b26:	481c      	ldr	r0, [pc, #112]	; (8018b98 <CUSTOM_FillRect+0xf8>)
 8018b28:	68fa      	ldr	r2, [r7, #12]
 8018b2a:	4613      	mov	r3, r2
 8018b2c:	00db      	lsls	r3, r3, #3
 8018b2e:	1a9b      	subs	r3, r3, r2
 8018b30:	009b      	lsls	r3, r3, #2
 8018b32:	4403      	add	r3, r0
 8018b34:	3314      	adds	r3, #20
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	fb01 f303 	mul.w	r3, r1, r3
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	4916      	ldr	r1, [pc, #88]	; (8018b98 <CUSTOM_FillRect+0xf8>)
 8018b40:	68fa      	ldr	r2, [r7, #12]
 8018b42:	4613      	mov	r3, r2
 8018b44:	00db      	lsls	r3, r3, #3
 8018b46:	1a9b      	subs	r3, r3, r2
 8018b48:	009b      	lsls	r3, r3, #2
 8018b4a:	440b      	add	r3, r1
 8018b4c:	3308      	adds	r3, #8
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	461a      	mov	r2, r3
 8018b52:	697b      	ldr	r3, [r7, #20]
 8018b54:	fb02 f303 	mul.w	r3, r2, r3
 8018b58:	4403      	add	r3, r0
 8018b5a:	4423      	add	r3, r4
 8018b5c:	613b      	str	r3, [r7, #16]
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 8018b5e:	68f8      	ldr	r0, [r7, #12]
 8018b60:	6939      	ldr	r1, [r7, #16]
 8018b62:	69fc      	ldr	r4, [r7, #28]
 8018b64:	69bd      	ldr	r5, [r7, #24]
 8018b66:	4e0c      	ldr	r6, [pc, #48]	; (8018b98 <CUSTOM_FillRect+0xf8>)
 8018b68:	68fa      	ldr	r2, [r7, #12]
 8018b6a:	4613      	mov	r3, r2
 8018b6c:	00db      	lsls	r3, r3, #3
 8018b6e:	1a9b      	subs	r3, r3, r2
 8018b70:	009b      	lsls	r3, r3, #2
 8018b72:	4433      	add	r3, r6
 8018b74:	330c      	adds	r3, #12
 8018b76:	681a      	ldr	r2, [r3, #0]
 8018b78:	69fb      	ldr	r3, [r7, #28]
 8018b7a:	1ad3      	subs	r3, r2, r3
 8018b7c:	461a      	mov	r2, r3
 8018b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b80:	9301      	str	r3, [sp, #4]
 8018b82:	9200      	str	r2, [sp, #0]
 8018b84:	462b      	mov	r3, r5
 8018b86:	4622      	mov	r2, r4
 8018b88:	f7ff fe4e 	bl	8018828 <DMA2D_FillBuffer>
}
 8018b8c:	bf00      	nop
 8018b8e:	3724      	adds	r7, #36	; 0x24
 8018b90:	46bd      	mov	sp, r7
 8018b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b94:	08018aa1 	.word	0x08018aa1
 8018b98:	2002c2f8 	.word	0x2002c2f8

08018b9c <CUSTOM_DrawBitmap32bpp>:
  * @param  xSize: X size
  * @param  ySize: Y size
  * @retval None
  */
static void CUSTOM_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 8018b9c:	b5b0      	push	{r4, r5, r7, lr}
 8018b9e:	b08c      	sub	sp, #48	; 0x30
 8018ba0:	af04      	add	r7, sp, #16
 8018ba2:	60f8      	str	r0, [r7, #12]
 8018ba4:	60b9      	str	r1, [r7, #8]
 8018ba6:	607a      	str	r2, [r7, #4]
 8018ba8:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	4618      	mov	r0, r3
 8018bae:	f7ff fe73 	bl	8018898 <GetBufferSize>
 8018bb2:	61f8      	str	r0, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8018bb4:	492c      	ldr	r1, [pc, #176]	; (8018c68 <CUSTOM_DrawBitmap32bpp+0xcc>)
 8018bb6:	68fa      	ldr	r2, [r7, #12]
 8018bb8:	4613      	mov	r3, r2
 8018bba:	00db      	lsls	r3, r3, #3
 8018bbc:	1a9b      	subs	r3, r3, r2
 8018bbe:	009b      	lsls	r3, r3, #2
 8018bc0:	440b      	add	r3, r1
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	461c      	mov	r4, r3
 8018bc6:	4928      	ldr	r1, [pc, #160]	; (8018c68 <CUSTOM_DrawBitmap32bpp+0xcc>)
 8018bc8:	68fa      	ldr	r2, [r7, #12]
 8018bca:	4613      	mov	r3, r2
 8018bcc:	00db      	lsls	r3, r3, #3
 8018bce:	1a9b      	subs	r3, r3, r2
 8018bd0:	009b      	lsls	r3, r3, #2
 8018bd2:	440b      	add	r3, r1
 8018bd4:	330c      	adds	r3, #12
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	687a      	ldr	r2, [r7, #4]
 8018bda:	fb03 f202 	mul.w	r2, r3, r2
 8018bde:	68bb      	ldr	r3, [r7, #8]
 8018be0:	18d1      	adds	r1, r2, r3
 8018be2:	4821      	ldr	r0, [pc, #132]	; (8018c68 <CUSTOM_DrawBitmap32bpp+0xcc>)
 8018be4:	68fa      	ldr	r2, [r7, #12]
 8018be6:	4613      	mov	r3, r2
 8018be8:	00db      	lsls	r3, r3, #3
 8018bea:	1a9b      	subs	r3, r3, r2
 8018bec:	009b      	lsls	r3, r3, #2
 8018bee:	4403      	add	r3, r0
 8018bf0:	3314      	adds	r3, #20
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	fb01 f303 	mul.w	r3, r1, r3
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	491b      	ldr	r1, [pc, #108]	; (8018c68 <CUSTOM_DrawBitmap32bpp+0xcc>)
 8018bfc:	68fa      	ldr	r2, [r7, #12]
 8018bfe:	4613      	mov	r3, r2
 8018c00:	00db      	lsls	r3, r3, #3
 8018c02:	1a9b      	subs	r3, r3, r2
 8018c04:	009b      	lsls	r3, r3, #2
 8018c06:	440b      	add	r3, r1
 8018c08:	3308      	adds	r3, #8
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	461a      	mov	r2, r3
 8018c0e:	69fb      	ldr	r3, [r7, #28]
 8018c10:	fb02 f303 	mul.w	r3, r2, r3
 8018c14:	4403      	add	r3, r0
 8018c16:	4423      	add	r3, r4
 8018c18:	61bb      	str	r3, [r7, #24]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8018c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	da00      	bge.n	8018c22 <CUSTOM_DrawBitmap32bpp+0x86>
 8018c20:	3303      	adds	r3, #3
 8018c22:	109b      	asrs	r3, r3, #2
 8018c24:	461a      	mov	r2, r3
 8018c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c28:	1ad3      	subs	r3, r2, r3
 8018c2a:	617b      	str	r3, [r7, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8018c2c:	490e      	ldr	r1, [pc, #56]	; (8018c68 <CUSTOM_DrawBitmap32bpp+0xcc>)
 8018c2e:	68fa      	ldr	r2, [r7, #12]
 8018c30:	4613      	mov	r3, r2
 8018c32:	00db      	lsls	r3, r3, #3
 8018c34:	1a9b      	subs	r3, r3, r2
 8018c36:	009b      	lsls	r3, r3, #2
 8018c38:	440b      	add	r3, r1
 8018c3a:	330c      	adds	r3, #12
 8018c3c:	681a      	ldr	r2, [r3, #0]
 8018c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c40:	1ad3      	subs	r3, r2, r3
 8018c42:	613b      	str	r3, [r7, #16]
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8018c44:	68f8      	ldr	r0, [r7, #12]
 8018c46:	69bc      	ldr	r4, [r7, #24]
 8018c48:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8018c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c4c:	697a      	ldr	r2, [r7, #20]
 8018c4e:	6939      	ldr	r1, [r7, #16]
 8018c50:	9102      	str	r1, [sp, #8]
 8018c52:	9201      	str	r2, [sp, #4]
 8018c54:	9300      	str	r3, [sp, #0]
 8018c56:	462b      	mov	r3, r5
 8018c58:	4622      	mov	r2, r4
 8018c5a:	6839      	ldr	r1, [r7, #0]
 8018c5c:	f7ff fdaa 	bl	80187b4 <DMA2D_CopyBuffer>
}
 8018c60:	bf00      	nop
 8018c62:	3720      	adds	r7, #32
 8018c64:	46bd      	mov	sp, r7
 8018c66:	bdb0      	pop	{r4, r5, r7, pc}
 8018c68:	2002c2f8 	.word	0x2002c2f8

08018c6c <WM_NotifyParent>:
 8018c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018c6e:	2326      	movs	r3, #38	; 0x26
 8018c70:	9103      	str	r1, [sp, #12]
 8018c72:	4669      	mov	r1, sp
 8018c74:	9300      	str	r3, [sp, #0]
 8018c76:	f007 f8b3 	bl	801fde0 <WM_SendToParent>
 8018c7a:	b005      	add	sp, #20
 8018c7c:	f85d fb04 	ldr.w	pc, [sp], #4

08018c80 <_OnExit>:
 8018c80:	4a0a      	ldr	r2, [pc, #40]	; (8018cac <_OnExit+0x2c>)
 8018c82:	490b      	ldr	r1, [pc, #44]	; (8018cb0 <_OnExit+0x30>)
 8018c84:	2300      	movs	r3, #0
 8018c86:	7013      	strb	r3, [r2, #0]
 8018c88:	4a0a      	ldr	r2, [pc, #40]	; (8018cb4 <_OnExit+0x34>)
 8018c8a:	600b      	str	r3, [r1, #0]
 8018c8c:	6013      	str	r3, [r2, #0]
 8018c8e:	4a0a      	ldr	r2, [pc, #40]	; (8018cb8 <_OnExit+0x38>)
 8018c90:	604b      	str	r3, [r1, #4]
 8018c92:	6013      	str	r3, [r2, #0]
 8018c94:	4a09      	ldr	r2, [pc, #36]	; (8018cbc <_OnExit+0x3c>)
 8018c96:	6013      	str	r3, [r2, #0]
 8018c98:	6053      	str	r3, [r2, #4]
 8018c9a:	4a09      	ldr	r2, [pc, #36]	; (8018cc0 <_OnExit+0x40>)
 8018c9c:	6013      	str	r3, [r2, #0]
 8018c9e:	4a09      	ldr	r2, [pc, #36]	; (8018cc4 <_OnExit+0x44>)
 8018ca0:	6013      	str	r3, [r2, #0]
 8018ca2:	4a09      	ldr	r2, [pc, #36]	; (8018cc8 <_OnExit+0x48>)
 8018ca4:	6013      	str	r3, [r2, #0]
 8018ca6:	4a09      	ldr	r2, [pc, #36]	; (8018ccc <_OnExit+0x4c>)
 8018ca8:	6013      	str	r3, [r2, #0]
 8018caa:	4770      	bx	lr
 8018cac:	2002c33c 	.word	0x2002c33c
 8018cb0:	2002c560 	.word	0x2002c560
 8018cb4:	2002c314 	.word	0x2002c314
 8018cb8:	2002c584 	.word	0x2002c584
 8018cbc:	2002c58c 	.word	0x2002c58c
 8018cc0:	2002c598 	.word	0x2002c598
 8018cc4:	2002c54c 	.word	0x2002c54c
 8018cc8:	2002c578 	.word	0x2002c578
 8018ccc:	2002c588 	.word	0x2002c588

08018cd0 <_Paint1>:
 8018cd0:	b510      	push	{r4, lr}
 8018cd2:	4604      	mov	r4, r0
 8018cd4:	f005 fe04 	bl	801e8e0 <GUI_ALLOC_h2p>
 8018cd8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018cda:	4a04      	ldr	r2, [pc, #16]	; (8018cec <_Paint1+0x1c>)
 8018cdc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8018ce0:	4b03      	ldr	r3, [pc, #12]	; (8018cf0 <_Paint1+0x20>)
 8018ce2:	4620      	mov	r0, r4
 8018ce4:	bf08      	it	eq
 8018ce6:	4613      	moveq	r3, r2
 8018ce8:	4798      	blx	r3
 8018cea:	bd10      	pop	{r4, pc}
 8018cec:	08019b2d 	.word	0x08019b2d
 8018cf0:	0801a0fd 	.word	0x0801a0fd

08018cf4 <_Findy1>:
 8018cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018cf6:	4605      	mov	r5, r0
 8018cf8:	b085      	sub	sp, #20
 8018cfa:	460c      	mov	r4, r1
 8018cfc:	4616      	mov	r6, r2
 8018cfe:	2d00      	cmp	r5, #0
 8018d00:	d04c      	beq.n	8018d9c <_Findy1+0xa8>
 8018d02:	4628      	mov	r0, r5
 8018d04:	f005 fdf6 	bl	801e8f4 <GUI_ALLOC_LockH>
 8018d08:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8018d0a:	9001      	str	r0, [sp, #4]
 8018d0c:	07bb      	lsls	r3, r7, #30
 8018d0e:	4601      	mov	r1, r0
 8018d10:	d53d      	bpl.n	8018d8e <_Findy1+0x9a>
 8018d12:	ad02      	add	r5, sp, #8
 8018d14:	b126      	cbz	r6, 8018d20 <_Findy1+0x2c>
 8018d16:	4628      	mov	r0, r5
 8018d18:	4632      	mov	r2, r6
 8018d1a:	f003 fd17 	bl	801c74c <GUI__IntersectRects>
 8018d1e:	e002      	b.n	8018d26 <_Findy1+0x32>
 8018d20:	c803      	ldmia	r0, {r0, r1}
 8018d22:	e885 0003 	stmia.w	r5, {r0, r1}
 8018d26:	4620      	mov	r0, r4
 8018d28:	4629      	mov	r1, r5
 8018d2a:	f004 f851 	bl	801cdd0 <GUI_RectsIntersect>
 8018d2e:	b370      	cbz	r0, 8018d8e <_Findy1+0x9a>
 8018d30:	f017 0f01 	tst.w	r7, #1
 8018d34:	9b01      	ldr	r3, [sp, #4]
 8018d36:	d11e      	bne.n	8018d76 <_Findy1+0x82>
 8018d38:	b13e      	cbz	r6, 8018d4a <_Findy1+0x56>
 8018d3a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018d3e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8018d42:	429a      	cmp	r2, r3
 8018d44:	bfa8      	it	ge
 8018d46:	4613      	movge	r3, r2
 8018d48:	e001      	b.n	8018d4e <_Findy1+0x5a>
 8018d4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018d4e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018d52:	4293      	cmp	r3, r2
 8018d54:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018d58:	dd06      	ble.n	8018d68 <_Findy1+0x74>
 8018d5a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018d5e:	b219      	sxth	r1, r3
 8018d60:	428a      	cmp	r2, r1
 8018d62:	db14      	blt.n	8018d8e <_Findy1+0x9a>
 8018d64:	3b01      	subs	r3, #1
 8018d66:	e004      	b.n	8018d72 <_Findy1+0x7e>
 8018d68:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018d6c:	b219      	sxth	r1, r3
 8018d6e:	428a      	cmp	r2, r1
 8018d70:	dd0d      	ble.n	8018d8e <_Findy1+0x9a>
 8018d72:	80e3      	strh	r3, [r4, #6]
 8018d74:	e00b      	b.n	8018d8e <_Findy1+0x9a>
 8018d76:	69df      	ldr	r7, [r3, #28]
 8018d78:	b14f      	cbz	r7, 8018d8e <_Findy1+0x9a>
 8018d7a:	4638      	mov	r0, r7
 8018d7c:	4621      	mov	r1, r4
 8018d7e:	462a      	mov	r2, r5
 8018d80:	f7ff ffb8 	bl	8018cf4 <_Findy1>
 8018d84:	4638      	mov	r0, r7
 8018d86:	f005 fdab 	bl	801e8e0 <GUI_ALLOC_h2p>
 8018d8a:	6a07      	ldr	r7, [r0, #32]
 8018d8c:	e7f4      	b.n	8018d78 <_Findy1+0x84>
 8018d8e:	a804      	add	r0, sp, #16
 8018d90:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8018d94:	6a1d      	ldr	r5, [r3, #32]
 8018d96:	f005 fdbb 	bl	801e910 <GUI_ALLOC_UnlockH>
 8018d9a:	e7b0      	b.n	8018cfe <_Findy1+0xa>
 8018d9c:	b005      	add	sp, #20
 8018d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018da0 <_Findx0>:
 8018da0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018da4:	4604      	mov	r4, r0
 8018da6:	460f      	mov	r7, r1
 8018da8:	4690      	mov	r8, r2
 8018daa:	2500      	movs	r5, #0
 8018dac:	2c00      	cmp	r4, #0
 8018dae:	d037      	beq.n	8018e20 <_Findx0+0x80>
 8018db0:	4620      	mov	r0, r4
 8018db2:	f005 fd9f 	bl	801e8f4 <GUI_ALLOC_LockH>
 8018db6:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8018db8:	9001      	str	r0, [sp, #4]
 8018dba:	07b2      	lsls	r2, r6, #30
 8018dbc:	4601      	mov	r1, r0
 8018dbe:	d528      	bpl.n	8018e12 <_Findx0+0x72>
 8018dc0:	ac02      	add	r4, sp, #8
 8018dc2:	f1b8 0f00 	cmp.w	r8, #0
 8018dc6:	d004      	beq.n	8018dd2 <_Findx0+0x32>
 8018dc8:	4620      	mov	r0, r4
 8018dca:	4642      	mov	r2, r8
 8018dcc:	f003 fcbe 	bl	801c74c <GUI__IntersectRects>
 8018dd0:	e002      	b.n	8018dd8 <_Findx0+0x38>
 8018dd2:	c803      	ldmia	r0, {r0, r1}
 8018dd4:	e884 0003 	stmia.w	r4, {r0, r1}
 8018dd8:	4638      	mov	r0, r7
 8018dda:	4621      	mov	r1, r4
 8018ddc:	f003 fff8 	bl	801cdd0 <GUI_RectsIntersect>
 8018de0:	b1b8      	cbz	r0, 8018e12 <_Findx0+0x72>
 8018de2:	07f3      	lsls	r3, r6, #31
 8018de4:	d405      	bmi.n	8018df2 <_Findx0+0x52>
 8018de6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018dea:	3301      	adds	r3, #1
 8018dec:	803b      	strh	r3, [r7, #0]
 8018dee:	2501      	movs	r5, #1
 8018df0:	e00f      	b.n	8018e12 <_Findx0+0x72>
 8018df2:	9b01      	ldr	r3, [sp, #4]
 8018df4:	69de      	ldr	r6, [r3, #28]
 8018df6:	b166      	cbz	r6, 8018e12 <_Findx0+0x72>
 8018df8:	4630      	mov	r0, r6
 8018dfa:	4639      	mov	r1, r7
 8018dfc:	4622      	mov	r2, r4
 8018dfe:	f7ff ffcf 	bl	8018da0 <_Findx0>
 8018e02:	2800      	cmp	r0, #0
 8018e04:	4630      	mov	r0, r6
 8018e06:	bf18      	it	ne
 8018e08:	2501      	movne	r5, #1
 8018e0a:	f005 fd69 	bl	801e8e0 <GUI_ALLOC_h2p>
 8018e0e:	6a06      	ldr	r6, [r0, #32]
 8018e10:	e7f1      	b.n	8018df6 <_Findx0+0x56>
 8018e12:	a804      	add	r0, sp, #16
 8018e14:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8018e18:	6a1c      	ldr	r4, [r3, #32]
 8018e1a:	f005 fd79 	bl	801e910 <GUI_ALLOC_UnlockH>
 8018e1e:	e7c5      	b.n	8018dac <_Findx0+0xc>
 8018e20:	4628      	mov	r0, r5
 8018e22:	b004      	add	sp, #16
 8018e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018e28 <_Findx1>:
 8018e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e2a:	4604      	mov	r4, r0
 8018e2c:	b085      	sub	sp, #20
 8018e2e:	460e      	mov	r6, r1
 8018e30:	4617      	mov	r7, r2
 8018e32:	2c00      	cmp	r4, #0
 8018e34:	d031      	beq.n	8018e9a <_Findx1+0x72>
 8018e36:	4620      	mov	r0, r4
 8018e38:	f005 fd5c 	bl	801e8f4 <GUI_ALLOC_LockH>
 8018e3c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8018e3e:	9001      	str	r0, [sp, #4]
 8018e40:	07aa      	lsls	r2, r5, #30
 8018e42:	4601      	mov	r1, r0
 8018e44:	d522      	bpl.n	8018e8c <_Findx1+0x64>
 8018e46:	ac02      	add	r4, sp, #8
 8018e48:	b127      	cbz	r7, 8018e54 <_Findx1+0x2c>
 8018e4a:	4620      	mov	r0, r4
 8018e4c:	463a      	mov	r2, r7
 8018e4e:	f003 fc7d 	bl	801c74c <GUI__IntersectRects>
 8018e52:	e002      	b.n	8018e5a <_Findx1+0x32>
 8018e54:	c803      	ldmia	r0, {r0, r1}
 8018e56:	e884 0003 	stmia.w	r4, {r0, r1}
 8018e5a:	4630      	mov	r0, r6
 8018e5c:	4621      	mov	r1, r4
 8018e5e:	f003 ffb7 	bl	801cdd0 <GUI_RectsIntersect>
 8018e62:	b198      	cbz	r0, 8018e8c <_Findx1+0x64>
 8018e64:	07eb      	lsls	r3, r5, #31
 8018e66:	d404      	bmi.n	8018e72 <_Findx1+0x4a>
 8018e68:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018e6c:	3b01      	subs	r3, #1
 8018e6e:	80b3      	strh	r3, [r6, #4]
 8018e70:	e00c      	b.n	8018e8c <_Findx1+0x64>
 8018e72:	9b01      	ldr	r3, [sp, #4]
 8018e74:	69dd      	ldr	r5, [r3, #28]
 8018e76:	b14d      	cbz	r5, 8018e8c <_Findx1+0x64>
 8018e78:	4628      	mov	r0, r5
 8018e7a:	4631      	mov	r1, r6
 8018e7c:	4622      	mov	r2, r4
 8018e7e:	f7ff ffd3 	bl	8018e28 <_Findx1>
 8018e82:	4628      	mov	r0, r5
 8018e84:	f005 fd2c 	bl	801e8e0 <GUI_ALLOC_h2p>
 8018e88:	6a05      	ldr	r5, [r0, #32]
 8018e8a:	e7f4      	b.n	8018e76 <_Findx1+0x4e>
 8018e8c:	a804      	add	r0, sp, #16
 8018e8e:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8018e92:	6a1c      	ldr	r4, [r3, #32]
 8018e94:	f005 fd3c 	bl	801e910 <GUI_ALLOC_UnlockH>
 8018e98:	e7cb      	b.n	8018e32 <_Findx1+0xa>
 8018e9a:	b005      	add	sp, #20
 8018e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018ea0 <_Paint1Trans>:
 8018ea0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018ea4:	4d21      	ldr	r5, [pc, #132]	; (8018f2c <_Paint1Trans+0x8c>)
 8018ea6:	682b      	ldr	r3, [r5, #0]
 8018ea8:	4606      	mov	r6, r0
 8018eaa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8018eac:	f005 fd22 	bl	801e8f4 <GUI_ALLOC_LockH>
 8018eb0:	9000      	str	r0, [sp, #0]
 8018eb2:	4630      	mov	r0, r6
 8018eb4:	f005 fd1e 	bl	801e8f4 <GUI_ALLOC_LockH>
 8018eb8:	ac02      	add	r4, sp, #8
 8018eba:	4601      	mov	r1, r0
 8018ebc:	9001      	str	r0, [sp, #4]
 8018ebe:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 8018ec2:	3008      	adds	r0, #8
 8018ec4:	f003 ff84 	bl	801cdd0 <GUI_RectsIntersect>
 8018ec8:	4607      	mov	r7, r0
 8018eca:	b328      	cbz	r0, 8018f18 <_Paint1Trans+0x78>
 8018ecc:	9901      	ldr	r1, [sp, #4]
 8018ece:	9a00      	ldr	r2, [sp, #0]
 8018ed0:	682b      	ldr	r3, [r5, #0]
 8018ed2:	4c17      	ldr	r4, [pc, #92]	; (8018f30 <_Paint1Trans+0x90>)
 8018ed4:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8018ed6:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 8018eda:	f101 0008 	add.w	r0, r1, #8
 8018ede:	3208      	adds	r2, #8
 8018ee0:	f003 fc34 	bl	801c74c <GUI__IntersectRects>
 8018ee4:	4668      	mov	r0, sp
 8018ee6:	f005 fd13 	bl	801e910 <GUI_ALLOC_UnlockH>
 8018eea:	9a01      	ldr	r2, [sp, #4]
 8018eec:	682b      	ldr	r3, [r5, #0]
 8018eee:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018ef2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8018ef6:	64d9      	str	r1, [r3, #76]	; 0x4c
 8018ef8:	651a      	str	r2, [r3, #80]	; 0x50
 8018efa:	a801      	add	r0, sp, #4
 8018efc:	6026      	str	r6, [r4, #0]
 8018efe:	f005 fd07 	bl	801e910 <GUI_ALLOC_UnlockH>
 8018f02:	4630      	mov	r0, r6
 8018f04:	f7ff fee4 	bl	8018cd0 <_Paint1>
 8018f08:	2300      	movs	r3, #0
 8018f0a:	6023      	str	r3, [r4, #0]
 8018f0c:	682b      	ldr	r3, [r5, #0]
 8018f0e:	651f      	str	r7, [r3, #80]	; 0x50
 8018f10:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 8018f14:	2701      	movs	r7, #1
 8018f16:	e005      	b.n	8018f24 <_Paint1Trans+0x84>
 8018f18:	4668      	mov	r0, sp
 8018f1a:	f005 fcf9 	bl	801e910 <GUI_ALLOC_UnlockH>
 8018f1e:	a801      	add	r0, sp, #4
 8018f20:	f005 fcf6 	bl	801e910 <GUI_ALLOC_UnlockH>
 8018f24:	4638      	mov	r0, r7
 8018f26:	b002      	add	sp, #8
 8018f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f2c:	20000114 	.word	0x20000114
 8018f30:	2002c54c 	.word	0x2002c54c

08018f34 <_PaintTransChildren>:
 8018f34:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8018f38:	4606      	mov	r6, r0
 8018f3a:	f005 fcdb 	bl	801e8f4 <GUI_ALLOC_LockH>
 8018f3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018f40:	9001      	str	r0, [sp, #4]
 8018f42:	079b      	lsls	r3, r3, #30
 8018f44:	d405      	bmi.n	8018f52 <_PaintTransChildren+0x1e>
 8018f46:	a801      	add	r0, sp, #4
 8018f48:	f005 fce2 	bl	801e910 <GUI_ALLOC_UnlockH>
 8018f4c:	b002      	add	sp, #8
 8018f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f52:	69c4      	ldr	r4, [r0, #28]
 8018f54:	2c00      	cmp	r4, #0
 8018f56:	d0f6      	beq.n	8018f46 <_PaintTransChildren+0x12>
 8018f58:	4620      	mov	r0, r4
 8018f5a:	f005 fccb 	bl	801e8f4 <GUI_ALLOC_LockH>
 8018f5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018f60:	ad02      	add	r5, sp, #8
 8018f62:	f003 0303 	and.w	r3, r3, #3
 8018f66:	2b03      	cmp	r3, #3
 8018f68:	f845 0d08 	str.w	r0, [r5, #-8]!
 8018f6c:	d137      	bne.n	8018fde <_PaintTransChildren+0xaa>
 8018f6e:	9901      	ldr	r1, [sp, #4]
 8018f70:	3108      	adds	r1, #8
 8018f72:	f003 ff2d 	bl	801cdd0 <GUI_RectsIntersect>
 8018f76:	2800      	cmp	r0, #0
 8018f78:	d031      	beq.n	8018fde <_PaintTransChildren+0xaa>
 8018f7a:	a802      	add	r0, sp, #8
 8018f7c:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8018f80:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 8018f84:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 8018f88:	899f      	ldrh	r7, [r3, #12]
 8018f8a:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 8018f8e:	f005 fcbf 	bl	801e910 <GUI_ALLOC_UnlockH>
 8018f92:	4668      	mov	r0, sp
 8018f94:	f005 fcbc 	bl	801e910 <GUI_ALLOC_UnlockH>
 8018f98:	4620      	mov	r0, r4
 8018f9a:	f7ff ff81 	bl	8018ea0 <_Paint1Trans>
 8018f9e:	b170      	cbz	r0, 8018fbe <_PaintTransChildren+0x8a>
 8018fa0:	4620      	mov	r0, r4
 8018fa2:	f005 fc9d 	bl	801e8e0 <GUI_ALLOC_h2p>
 8018fa6:	9000      	str	r0, [sp, #0]
 8018fa8:	4620      	mov	r0, r4
 8018faa:	f7ff ffc3 	bl	8018f34 <_PaintTransChildren>
 8018fae:	4620      	mov	r0, r4
 8018fb0:	f005 fc96 	bl	801e8e0 <GUI_ALLOC_h2p>
 8018fb4:	9000      	str	r0, [sp, #0]
 8018fb6:	4630      	mov	r0, r6
 8018fb8:	f005 fc92 	bl	801e8e0 <GUI_ALLOC_h2p>
 8018fbc:	9001      	str	r0, [sp, #4]
 8018fbe:	4630      	mov	r0, r6
 8018fc0:	f005 fc98 	bl	801e8f4 <GUI_ALLOC_LockH>
 8018fc4:	9001      	str	r0, [sp, #4]
 8018fc6:	4620      	mov	r0, r4
 8018fc8:	f005 fc94 	bl	801e8f4 <GUI_ALLOC_LockH>
 8018fcc:	9b01      	ldr	r3, [sp, #4]
 8018fce:	9000      	str	r0, [sp, #0]
 8018fd0:	f8a3 9008 	strh.w	r9, [r3, #8]
 8018fd4:	f8a3 800a 	strh.w	r8, [r3, #10]
 8018fd8:	819f      	strh	r7, [r3, #12]
 8018fda:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8018fde:	9b00      	ldr	r3, [sp, #0]
 8018fe0:	4668      	mov	r0, sp
 8018fe2:	6a1c      	ldr	r4, [r3, #32]
 8018fe4:	f005 fc94 	bl	801e910 <GUI_ALLOC_UnlockH>
 8018fe8:	e7b4      	b.n	8018f54 <_PaintTransChildren+0x20>
	...

08018fec <WM__PaintWinAndOverlays>:
 8018fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018fee:	4604      	mov	r4, r0
 8018ff0:	f005 fc80 	bl	801e8f4 <GUI_ALLOC_LockH>
 8018ff4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8018ff6:	9001      	str	r0, [sp, #4]
 8018ff8:	f640 0301 	movw	r3, #2049	; 0x801
 8018ffc:	4013      	ands	r3, r2
 8018ffe:	2b01      	cmp	r3, #1
 8019000:	d005      	beq.n	801900e <WM__PaintWinAndOverlays+0x22>
 8019002:	a801      	add	r0, sp, #4
 8019004:	f005 fc84 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019008:	4620      	mov	r0, r4
 801900a:	f7ff fe61 	bl	8018cd0 <_Paint1>
 801900e:	4b14      	ldr	r3, [pc, #80]	; (8019060 <WM__PaintWinAndOverlays+0x74>)
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	b313      	cbz	r3, 801905a <WM__PaintWinAndOverlays+0x6e>
 8019014:	4620      	mov	r0, r4
 8019016:	f7ff ff8d 	bl	8018f34 <_PaintTransChildren>
 801901a:	4620      	mov	r0, r4
 801901c:	f005 fc60 	bl	801e8e0 <GUI_ALLOC_h2p>
 8019020:	6985      	ldr	r5, [r0, #24]
 8019022:	6a04      	ldr	r4, [r0, #32]
 8019024:	b1cd      	cbz	r5, 801905a <WM__PaintWinAndOverlays+0x6e>
 8019026:	b194      	cbz	r4, 801904e <WM__PaintWinAndOverlays+0x62>
 8019028:	4620      	mov	r0, r4
 801902a:	f005 fc59 	bl	801e8e0 <GUI_ALLOC_h2p>
 801902e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019030:	f003 0303 	and.w	r3, r3, #3
 8019034:	2b03      	cmp	r3, #3
 8019036:	d102      	bne.n	801903e <WM__PaintWinAndOverlays+0x52>
 8019038:	4620      	mov	r0, r4
 801903a:	f7ff ff31 	bl	8018ea0 <_Paint1Trans>
 801903e:	4620      	mov	r0, r4
 8019040:	f7ff ff78 	bl	8018f34 <_PaintTransChildren>
 8019044:	4620      	mov	r0, r4
 8019046:	f005 fc4b 	bl	801e8e0 <GUI_ALLOC_h2p>
 801904a:	6a04      	ldr	r4, [r0, #32]
 801904c:	e7eb      	b.n	8019026 <WM__PaintWinAndOverlays+0x3a>
 801904e:	4628      	mov	r0, r5
 8019050:	f005 fc46 	bl	801e8e0 <GUI_ALLOC_h2p>
 8019054:	6a04      	ldr	r4, [r0, #32]
 8019056:	6985      	ldr	r5, [r0, #24]
 8019058:	e7e4      	b.n	8019024 <WM__PaintWinAndOverlays+0x38>
 801905a:	b003      	add	sp, #12
 801905c:	bd30      	pop	{r4, r5, pc}
 801905e:	bf00      	nop
 8019060:	2002c598 	.word	0x2002c598

08019064 <_cbPaintMemDev>:
 8019064:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8019068:	4d17      	ldr	r5, [pc, #92]	; (80190c8 <_cbPaintMemDev+0x64>)
 801906a:	682b      	ldr	r3, [r5, #0]
 801906c:	4606      	mov	r6, r0
 801906e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8019070:	f005 fc40 	bl	801e8f4 <GUI_ALLOC_LockH>
 8019074:	682a      	ldr	r2, [r5, #0]
 8019076:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 801907a:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 801907e:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 8019082:	89c7      	ldrh	r7, [r0, #14]
 8019084:	ac02      	add	r4, sp, #8
 8019086:	3208      	adds	r2, #8
 8019088:	f844 0d04 	str.w	r0, [r4, #-4]!
 801908c:	f100 0308 	add.w	r3, r0, #8
 8019090:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019094:	e883 0003 	stmia.w	r3, {r0, r1}
 8019098:	4620      	mov	r0, r4
 801909a:	f005 fc39 	bl	801e910 <GUI_ALLOC_UnlockH>
 801909e:	6830      	ldr	r0, [r6, #0]
 80190a0:	f7ff ffa4 	bl	8018fec <WM__PaintWinAndOverlays>
 80190a4:	682b      	ldr	r3, [r5, #0]
 80190a6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80190a8:	f005 fc24 	bl	801e8f4 <GUI_ALLOC_LockH>
 80190ac:	9001      	str	r0, [sp, #4]
 80190ae:	f8a0 a008 	strh.w	sl, [r0, #8]
 80190b2:	f8a0 900a 	strh.w	r9, [r0, #10]
 80190b6:	f8a0 800c 	strh.w	r8, [r0, #12]
 80190ba:	81c7      	strh	r7, [r0, #14]
 80190bc:	4620      	mov	r0, r4
 80190be:	f005 fc27 	bl	801e910 <GUI_ALLOC_UnlockH>
 80190c2:	b002      	add	sp, #8
 80190c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190c8:	20000114 	.word	0x20000114

080190cc <WM__ClipAtParentBorders>:
 80190cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80190ce:	4607      	mov	r7, r0
 80190d0:	460d      	mov	r5, r1
 80190d2:	4628      	mov	r0, r5
 80190d4:	f005 fc0e 	bl	801e8f4 <GUI_ALLOC_LockH>
 80190d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80190da:	ac02      	add	r4, sp, #8
 80190dc:	f013 0602 	ands.w	r6, r3, #2
 80190e0:	4601      	mov	r1, r0
 80190e2:	f844 0d04 	str.w	r0, [r4, #-4]!
 80190e6:	d104      	bne.n	80190f2 <WM__ClipAtParentBorders+0x26>
 80190e8:	4620      	mov	r0, r4
 80190ea:	f005 fc11 	bl	801e910 <GUI_ALLOC_UnlockH>
 80190ee:	4630      	mov	r0, r6
 80190f0:	e016      	b.n	8019120 <WM__ClipAtParentBorders+0x54>
 80190f2:	4638      	mov	r0, r7
 80190f4:	f003 fb5c 	bl	801c7b0 <GUI__IntersectRect>
 80190f8:	9b01      	ldr	r3, [sp, #4]
 80190fa:	699e      	ldr	r6, [r3, #24]
 80190fc:	4620      	mov	r0, r4
 80190fe:	b956      	cbnz	r6, 8019116 <WM__ClipAtParentBorders+0x4a>
 8019100:	f005 fc06 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019104:	4b07      	ldr	r3, [pc, #28]	; (8019124 <WM__ClipAtParentBorders+0x58>)
 8019106:	681a      	ldr	r2, [r3, #0]
 8019108:	4295      	cmp	r5, r2
 801910a:	d008      	beq.n	801911e <WM__ClipAtParentBorders+0x52>
 801910c:	6858      	ldr	r0, [r3, #4]
 801910e:	1a2b      	subs	r3, r5, r0
 8019110:	4258      	negs	r0, r3
 8019112:	4158      	adcs	r0, r3
 8019114:	e004      	b.n	8019120 <WM__ClipAtParentBorders+0x54>
 8019116:	f005 fbfb 	bl	801e910 <GUI_ALLOC_UnlockH>
 801911a:	4635      	mov	r5, r6
 801911c:	e7d9      	b.n	80190d2 <WM__ClipAtParentBorders+0x6>
 801911e:	2001      	movs	r0, #1
 8019120:	b003      	add	sp, #12
 8019122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019124:	2002c550 	.word	0x2002c550

08019128 <WM__InsertWindowIntoList>:
 8019128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801912a:	4604      	mov	r4, r0
 801912c:	b085      	sub	sp, #20
 801912e:	460d      	mov	r5, r1
 8019130:	2900      	cmp	r1, #0
 8019132:	d049      	beq.n	80191c8 <WM__InsertWindowIntoList+0xa0>
 8019134:	f005 fbde 	bl	801e8f4 <GUI_ALLOC_LockH>
 8019138:	2300      	movs	r3, #0
 801913a:	6203      	str	r3, [r0, #32]
 801913c:	6185      	str	r5, [r0, #24]
 801913e:	9001      	str	r0, [sp, #4]
 8019140:	4628      	mov	r0, r5
 8019142:	f005 fbd7 	bl	801e8f4 <GUI_ALLOC_LockH>
 8019146:	9b01      	ldr	r3, [sp, #4]
 8019148:	69c5      	ldr	r5, [r0, #28]
 801914a:	9002      	str	r0, [sp, #8]
 801914c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 801914e:	b92d      	cbnz	r5, 801915c <WM__InsertWindowIntoList+0x34>
 8019150:	61c4      	str	r4, [r0, #28]
 8019152:	a801      	add	r0, sp, #4
 8019154:	f005 fbdc 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019158:	a802      	add	r0, sp, #8
 801915a:	e033      	b.n	80191c4 <WM__InsertWindowIntoList+0x9c>
 801915c:	4628      	mov	r0, r5
 801915e:	f005 fbc9 	bl	801e8f4 <GUI_ALLOC_LockH>
 8019162:	ae04      	add	r6, sp, #16
 8019164:	f007 0708 	and.w	r7, r7, #8
 8019168:	f846 0d04 	str.w	r0, [r6, #-4]!
 801916c:	b977      	cbnz	r7, 801918c <WM__InsertWindowIntoList+0x64>
 801916e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019170:	071a      	lsls	r2, r3, #28
 8019172:	d50b      	bpl.n	801918c <WM__InsertWindowIntoList+0x64>
 8019174:	9b01      	ldr	r3, [sp, #4]
 8019176:	621d      	str	r5, [r3, #32]
 8019178:	9b02      	ldr	r3, [sp, #8]
 801917a:	a801      	add	r0, sp, #4
 801917c:	61dc      	str	r4, [r3, #28]
 801917e:	f005 fbc7 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019182:	a802      	add	r0, sp, #8
 8019184:	f005 fbc4 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019188:	4630      	mov	r0, r6
 801918a:	e01b      	b.n	80191c4 <WM__InsertWindowIntoList+0x9c>
 801918c:	a802      	add	r0, sp, #8
 801918e:	f005 fbbf 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019192:	4630      	mov	r0, r6
 8019194:	f005 fbbc 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019198:	4628      	mov	r0, r5
 801919a:	f005 fba1 	bl	801e8e0 <GUI_ALLOC_h2p>
 801919e:	9003      	str	r0, [sp, #12]
 80191a0:	9b03      	ldr	r3, [sp, #12]
 80191a2:	6a1d      	ldr	r5, [r3, #32]
 80191a4:	b90d      	cbnz	r5, 80191aa <WM__InsertWindowIntoList+0x82>
 80191a6:	621c      	str	r4, [r3, #32]
 80191a8:	e00b      	b.n	80191c2 <WM__InsertWindowIntoList+0x9a>
 80191aa:	4628      	mov	r0, r5
 80191ac:	f005 fb98 	bl	801e8e0 <GUI_ALLOC_h2p>
 80191b0:	2f00      	cmp	r7, #0
 80191b2:	d1f4      	bne.n	801919e <WM__InsertWindowIntoList+0x76>
 80191b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80191b6:	071b      	lsls	r3, r3, #28
 80191b8:	d5f1      	bpl.n	801919e <WM__InsertWindowIntoList+0x76>
 80191ba:	9b03      	ldr	r3, [sp, #12]
 80191bc:	621c      	str	r4, [r3, #32]
 80191be:	9b01      	ldr	r3, [sp, #4]
 80191c0:	621d      	str	r5, [r3, #32]
 80191c2:	a801      	add	r0, sp, #4
 80191c4:	f005 fba4 	bl	801e910 <GUI_ALLOC_UnlockH>
 80191c8:	b005      	add	sp, #20
 80191ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080191cc <WM__RemoveWindowFromList>:
 80191cc:	b570      	push	{r4, r5, r6, lr}
 80191ce:	4604      	mov	r4, r0
 80191d0:	f005 fb86 	bl	801e8e0 <GUI_ALLOC_h2p>
 80191d4:	4605      	mov	r5, r0
 80191d6:	6980      	ldr	r0, [r0, #24]
 80191d8:	b1a8      	cbz	r0, 8019206 <WM__RemoveWindowFromList+0x3a>
 80191da:	f005 fb81 	bl	801e8e0 <GUI_ALLOC_h2p>
 80191de:	69c3      	ldr	r3, [r0, #28]
 80191e0:	42a3      	cmp	r3, r4
 80191e2:	4606      	mov	r6, r0
 80191e4:	d105      	bne.n	80191f2 <WM__RemoveWindowFromList+0x26>
 80191e6:	4618      	mov	r0, r3
 80191e8:	f005 fb7a 	bl	801e8e0 <GUI_ALLOC_h2p>
 80191ec:	6a03      	ldr	r3, [r0, #32]
 80191ee:	61f3      	str	r3, [r6, #28]
 80191f0:	bd70      	pop	{r4, r5, r6, pc}
 80191f2:	b143      	cbz	r3, 8019206 <WM__RemoveWindowFromList+0x3a>
 80191f4:	4618      	mov	r0, r3
 80191f6:	f005 fb73 	bl	801e8e0 <GUI_ALLOC_h2p>
 80191fa:	6a03      	ldr	r3, [r0, #32]
 80191fc:	42a3      	cmp	r3, r4
 80191fe:	d1f8      	bne.n	80191f2 <WM__RemoveWindowFromList+0x26>
 8019200:	6a2b      	ldr	r3, [r5, #32]
 8019202:	6203      	str	r3, [r0, #32]
 8019204:	bd70      	pop	{r4, r5, r6, pc}
 8019206:	bd70      	pop	{r4, r5, r6, pc}

08019208 <WM__Client2Screen>:
 8019208:	4603      	mov	r3, r0
 801920a:	4608      	mov	r0, r1
 801920c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019210:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019214:	f003 be2c 	b.w	801ce70 <GUI_MoveRect>

08019218 <_SetClipRectUserIntersect>:
 8019218:	4b11      	ldr	r3, [pc, #68]	; (8019260 <_SetClipRectUserIntersect+0x48>)
 801921a:	b530      	push	{r4, r5, lr}
 801921c:	681c      	ldr	r4, [r3, #0]
 801921e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8019220:	b085      	sub	sp, #20
 8019222:	4605      	mov	r5, r0
 8019224:	b1ba      	cbz	r2, 8019256 <_SetClipRectUserIntersect+0x3e>
 8019226:	6810      	ldr	r0, [r2, #0]
 8019228:	6851      	ldr	r1, [r2, #4]
 801922a:	ab02      	add	r3, sp, #8
 801922c:	c303      	stmia	r3!, {r0, r1}
 801922e:	4b0d      	ldr	r3, [pc, #52]	; (8019264 <_SetClipRectUserIntersect+0x4c>)
 8019230:	6818      	ldr	r0, [r3, #0]
 8019232:	b900      	cbnz	r0, 8019236 <_SetClipRectUserIntersect+0x1e>
 8019234:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8019236:	f005 fb5d 	bl	801e8f4 <GUI_ALLOC_LockH>
 801923a:	ac04      	add	r4, sp, #16
 801923c:	a902      	add	r1, sp, #8
 801923e:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8019242:	f7ff ffe1 	bl	8019208 <WM__Client2Screen>
 8019246:	4620      	mov	r0, r4
 8019248:	f005 fb62 	bl	801e910 <GUI_ALLOC_UnlockH>
 801924c:	a802      	add	r0, sp, #8
 801924e:	4629      	mov	r1, r5
 8019250:	f003 faae 	bl	801c7b0 <GUI__IntersectRect>
 8019254:	a802      	add	r0, sp, #8
 8019256:	f002 fcc9 	bl	801bbec <LCD_SetClipRectEx>
 801925a:	b005      	add	sp, #20
 801925c:	bd30      	pop	{r4, r5, pc}
 801925e:	bf00      	nop
 8019260:	20000114 	.word	0x20000114
 8019264:	2002c54c 	.word	0x2002c54c

08019268 <WM__ActivateClipRect>:
 8019268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801926a:	4b0e      	ldr	r3, [pc, #56]	; (80192a4 <WM__ActivateClipRect+0x3c>)
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8019272:	b10a      	cbz	r2, 8019278 <WM__ActivateClipRect+0x10>
 8019274:	480c      	ldr	r0, [pc, #48]	; (80192a8 <WM__ActivateClipRect+0x40>)
 8019276:	e011      	b.n	801929c <WM__ActivateClipRect+0x34>
 8019278:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801927a:	f005 fb3b 	bl	801e8f4 <GUI_ALLOC_LockH>
 801927e:	9001      	str	r0, [sp, #4]
 8019280:	c803      	ldmia	r0, {r0, r1}
 8019282:	ac02      	add	r4, sp, #8
 8019284:	e884 0003 	stmia.w	r4, {r0, r1}
 8019288:	a801      	add	r0, sp, #4
 801928a:	f005 fb41 	bl	801e910 <GUI_ALLOC_UnlockH>
 801928e:	4b07      	ldr	r3, [pc, #28]	; (80192ac <WM__ActivateClipRect+0x44>)
 8019290:	6819      	ldr	r1, [r3, #0]
 8019292:	b111      	cbz	r1, 801929a <WM__ActivateClipRect+0x32>
 8019294:	4620      	mov	r0, r4
 8019296:	f7ff ff19 	bl	80190cc <WM__ClipAtParentBorders>
 801929a:	4620      	mov	r0, r4
 801929c:	f7ff ffbc 	bl	8019218 <_SetClipRectUserIntersect>
 80192a0:	b004      	add	sp, #16
 80192a2:	bd10      	pop	{r4, pc}
 80192a4:	20000114 	.word	0x20000114
 80192a8:	2002c320 	.word	0x2002c320
 80192ac:	2002c54c 	.word	0x2002c54c

080192b0 <WM__IsWindow>:
 80192b0:	4b06      	ldr	r3, [pc, #24]	; (80192cc <WM__IsWindow+0x1c>)
 80192b2:	b510      	push	{r4, lr}
 80192b4:	4604      	mov	r4, r0
 80192b6:	6818      	ldr	r0, [r3, #0]
 80192b8:	b128      	cbz	r0, 80192c6 <WM__IsWindow+0x16>
 80192ba:	42a0      	cmp	r0, r4
 80192bc:	d004      	beq.n	80192c8 <WM__IsWindow+0x18>
 80192be:	f005 fb0f 	bl	801e8e0 <GUI_ALLOC_h2p>
 80192c2:	6940      	ldr	r0, [r0, #20]
 80192c4:	e7f8      	b.n	80192b8 <WM__IsWindow+0x8>
 80192c6:	bd10      	pop	{r4, pc}
 80192c8:	2001      	movs	r0, #1
 80192ca:	bd10      	pop	{r4, pc}
 80192cc:	2002c56c 	.word	0x2002c56c

080192d0 <WM__InvalidateDrawAndDescs>:
 80192d0:	b513      	push	{r0, r1, r4, lr}
 80192d2:	4604      	mov	r4, r0
 80192d4:	b300      	cbz	r0, 8019318 <WM__InvalidateDrawAndDescs+0x48>
 80192d6:	f005 fb0d 	bl	801e8f4 <GUI_ALLOC_LockH>
 80192da:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80192dc:	9001      	str	r0, [sp, #4]
 80192de:	0793      	lsls	r3, r2, #30
 80192e0:	d517      	bpl.n	8019312 <WM__InvalidateDrawAndDescs+0x42>
 80192e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80192e4:	b140      	cbz	r0, 80192f8 <WM__InvalidateDrawAndDescs+0x28>
 80192e6:	4b0d      	ldr	r3, [pc, #52]	; (801931c <WM__InvalidateDrawAndDescs+0x4c>)
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	42a3      	cmp	r3, r4
 80192ec:	d004      	beq.n	80192f8 <WM__InvalidateDrawAndDescs+0x28>
 80192ee:	f001 fdcd 	bl	801ae8c <GUI_MEMDEV_Delete>
 80192f2:	9b01      	ldr	r3, [sp, #4]
 80192f4:	2200      	movs	r2, #0
 80192f6:	625a      	str	r2, [r3, #36]	; 0x24
 80192f8:	4620      	mov	r0, r4
 80192fa:	f006 feb3 	bl	8020064 <WM_GetFirstChild>
 80192fe:	4604      	mov	r4, r0
 8019300:	b13c      	cbz	r4, 8019312 <WM__InvalidateDrawAndDescs+0x42>
 8019302:	4620      	mov	r0, r4
 8019304:	f7ff ffe4 	bl	80192d0 <WM__InvalidateDrawAndDescs>
 8019308:	4620      	mov	r0, r4
 801930a:	f005 fae9 	bl	801e8e0 <GUI_ALLOC_h2p>
 801930e:	6a04      	ldr	r4, [r0, #32]
 8019310:	e7f6      	b.n	8019300 <WM__InvalidateDrawAndDescs+0x30>
 8019312:	a801      	add	r0, sp, #4
 8019314:	f005 fafc 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019318:	b002      	add	sp, #8
 801931a:	bd10      	pop	{r4, pc}
 801931c:	2002c594 	.word	0x2002c594

08019320 <WM__RectIsNZ>:
 8019320:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019324:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019328:	429a      	cmp	r2, r3
 801932a:	dc08      	bgt.n	801933e <WM__RectIsNZ+0x1e>
 801932c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019330:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8019334:	429a      	cmp	r2, r3
 8019336:	bfcc      	ite	gt
 8019338:	2000      	movgt	r0, #0
 801933a:	2001      	movle	r0, #1
 801933c:	4770      	bx	lr
 801933e:	2000      	movs	r0, #0
 8019340:	4770      	bx	lr
	...

08019344 <_Invalidate1Abs>:
 8019344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019346:	b085      	sub	sp, #20
 8019348:	4606      	mov	r6, r0
 801934a:	460d      	mov	r5, r1
 801934c:	4617      	mov	r7, r2
 801934e:	f005 fac7 	bl	801e8e0 <GUI_ALLOC_h2p>
 8019352:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019354:	9001      	str	r0, [sp, #4]
 8019356:	07a3      	lsls	r3, r4, #30
 8019358:	d534      	bpl.n	80193c4 <_Invalidate1Abs+0x80>
 801935a:	4628      	mov	r0, r5
 801935c:	f7ff ffe0 	bl	8019320 <WM__RectIsNZ>
 8019360:	2800      	cmp	r0, #0
 8019362:	d02f      	beq.n	80193c4 <_Invalidate1Abs+0x80>
 8019364:	f640 0301 	movw	r3, #2049	; 0x801
 8019368:	4023      	ands	r3, r4
 801936a:	2b01      	cmp	r3, #1
 801936c:	d02a      	beq.n	80193c4 <_Invalidate1Abs+0x80>
 801936e:	4630      	mov	r0, r6
 8019370:	f005 fac0 	bl	801e8f4 <GUI_ALLOC_LockH>
 8019374:	ac02      	add	r4, sp, #8
 8019376:	4602      	mov	r2, r0
 8019378:	9001      	str	r0, [sp, #4]
 801937a:	4629      	mov	r1, r5
 801937c:	4620      	mov	r0, r4
 801937e:	f003 f9e5 	bl	801c74c <GUI__IntersectRects>
 8019382:	4620      	mov	r0, r4
 8019384:	f7ff ffcc 	bl	8019320 <WM__RectIsNZ>
 8019388:	b1c8      	cbz	r0, 80193be <_Invalidate1Abs+0x7a>
 801938a:	9b01      	ldr	r3, [sp, #4]
 801938c:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 801938e:	f244 0120 	movw	r1, #16416	; 0x4020
 8019392:	4031      	ands	r1, r6
 8019394:	f103 0508 	add.w	r5, r3, #8
 8019398:	b129      	cbz	r1, 80193a6 <_Invalidate1Abs+0x62>
 801939a:	4628      	mov	r0, r5
 801939c:	4629      	mov	r1, r5
 801939e:	4622      	mov	r2, r4
 80193a0:	f003 fd76 	bl	801ce90 <GUI_MergeRect>
 80193a4:	e00b      	b.n	80193be <_Invalidate1Abs+0x7a>
 80193a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80193aa:	433e      	orrs	r6, r7
 80193ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80193b0:	629e      	str	r6, [r3, #40]	; 0x28
 80193b2:	4b05      	ldr	r3, [pc, #20]	; (80193c8 <_Invalidate1Abs+0x84>)
 80193b4:	881a      	ldrh	r2, [r3, #0]
 80193b6:	3201      	adds	r2, #1
 80193b8:	801a      	strh	r2, [r3, #0]
 80193ba:	f003 fbbf 	bl	801cb3c <GUI_SignalEvent>
 80193be:	a801      	add	r0, sp, #4
 80193c0:	f005 faa6 	bl	801e910 <GUI_ALLOC_UnlockH>
 80193c4:	b005      	add	sp, #20
 80193c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80193c8:	2002c568 	.word	0x2002c568

080193cc <WM__Invalidate1Abs>:
 80193cc:	2220      	movs	r2, #32
 80193ce:	f7ff bfb9 	b.w	8019344 <_Invalidate1Abs>

080193d2 <WM_InvalidateWindowAndDescsEx>:
 80193d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193d4:	460f      	mov	r7, r1
 80193d6:	b085      	sub	sp, #20
 80193d8:	4615      	mov	r5, r2
 80193da:	4606      	mov	r6, r0
 80193dc:	b348      	cbz	r0, 8019432 <WM_InvalidateWindowAndDescsEx+0x60>
 80193de:	f005 fa89 	bl	801e8f4 <GUI_ALLOC_LockH>
 80193e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80193e4:	ac04      	add	r4, sp, #16
 80193e6:	079b      	lsls	r3, r3, #30
 80193e8:	4602      	mov	r2, r0
 80193ea:	f844 0d0c 	str.w	r0, [r4, #-12]!
 80193ee:	d403      	bmi.n	80193f8 <WM_InvalidateWindowAndDescsEx+0x26>
 80193f0:	4620      	mov	r0, r4
 80193f2:	f005 fa8d 	bl	801e910 <GUI_ALLOC_UnlockH>
 80193f6:	e01c      	b.n	8019432 <WM_InvalidateWindowAndDescsEx+0x60>
 80193f8:	a802      	add	r0, sp, #8
 80193fa:	4639      	mov	r1, r7
 80193fc:	f003 f9a6 	bl	801c74c <GUI__IntersectRects>
 8019400:	2800      	cmp	r0, #0
 8019402:	d0f5      	beq.n	80193f0 <WM_InvalidateWindowAndDescsEx+0x1e>
 8019404:	4620      	mov	r0, r4
 8019406:	f005 fa83 	bl	801e910 <GUI_ALLOC_UnlockH>
 801940a:	4630      	mov	r0, r6
 801940c:	a902      	add	r1, sp, #8
 801940e:	462a      	mov	r2, r5
 8019410:	f7ff ff98 	bl	8019344 <_Invalidate1Abs>
 8019414:	4630      	mov	r0, r6
 8019416:	f006 fe25 	bl	8020064 <WM_GetFirstChild>
 801941a:	4604      	mov	r4, r0
 801941c:	b14c      	cbz	r4, 8019432 <WM_InvalidateWindowAndDescsEx+0x60>
 801941e:	4620      	mov	r0, r4
 8019420:	a902      	add	r1, sp, #8
 8019422:	462a      	mov	r2, r5
 8019424:	f7ff ffd5 	bl	80193d2 <WM_InvalidateWindowAndDescsEx>
 8019428:	4620      	mov	r0, r4
 801942a:	f005 fa59 	bl	801e8e0 <GUI_ALLOC_h2p>
 801942e:	6a04      	ldr	r4, [r0, #32]
 8019430:	e7f4      	b.n	801941c <WM_InvalidateWindowAndDescsEx+0x4a>
 8019432:	b005      	add	sp, #20
 8019434:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019436 <WM__InvalidateRect>:
 8019436:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801943a:	4680      	mov	r8, r0
 801943c:	4617      	mov	r7, r2
 801943e:	461d      	mov	r5, r3
 8019440:	460c      	mov	r4, r1
 8019442:	2900      	cmp	r1, #0
 8019444:	d030      	beq.n	80194a8 <WM__InvalidateRect+0x72>
 8019446:	4608      	mov	r0, r1
 8019448:	f005 fa54 	bl	801e8f4 <GUI_ALLOC_LockH>
 801944c:	6a86      	ldr	r6, [r0, #40]	; 0x28
 801944e:	9001      	str	r0, [sp, #4]
 8019450:	07b3      	lsls	r3, r6, #30
 8019452:	4602      	mov	r2, r0
 8019454:	d525      	bpl.n	80194a2 <WM__InvalidateRect+0x6c>
 8019456:	a802      	add	r0, sp, #8
 8019458:	4641      	mov	r1, r8
 801945a:	f003 f977 	bl	801c74c <GUI__IntersectRects>
 801945e:	b300      	cbz	r0, 80194a2 <WM__InvalidateRect+0x6c>
 8019460:	f640 0301 	movw	r3, #2049	; 0x801
 8019464:	4033      	ands	r3, r6
 8019466:	2b01      	cmp	r3, #1
 8019468:	d107      	bne.n	801947a <WM__InvalidateRect+0x44>
 801946a:	9b01      	ldr	r3, [sp, #4]
 801946c:	a802      	add	r0, sp, #8
 801946e:	6999      	ldr	r1, [r3, #24]
 8019470:	6a1a      	ldr	r2, [r3, #32]
 8019472:	462b      	mov	r3, r5
 8019474:	f7ff ffdf 	bl	8019436 <WM__InvalidateRect>
 8019478:	e004      	b.n	8019484 <WM__InvalidateRect+0x4e>
 801947a:	4620      	mov	r0, r4
 801947c:	a902      	add	r1, sp, #8
 801947e:	462a      	mov	r2, r5
 8019480:	f7ff ff60 	bl	8019344 <_Invalidate1Abs>
 8019484:	9b01      	ldr	r3, [sp, #4]
 8019486:	69dc      	ldr	r4, [r3, #28]
 8019488:	b15c      	cbz	r4, 80194a2 <WM__InvalidateRect+0x6c>
 801948a:	42bc      	cmp	r4, r7
 801948c:	d009      	beq.n	80194a2 <WM__InvalidateRect+0x6c>
 801948e:	4620      	mov	r0, r4
 8019490:	a902      	add	r1, sp, #8
 8019492:	462a      	mov	r2, r5
 8019494:	f7ff ff9d 	bl	80193d2 <WM_InvalidateWindowAndDescsEx>
 8019498:	4620      	mov	r0, r4
 801949a:	f005 fa21 	bl	801e8e0 <GUI_ALLOC_h2p>
 801949e:	6a04      	ldr	r4, [r0, #32]
 80194a0:	e7f2      	b.n	8019488 <WM__InvalidateRect+0x52>
 80194a2:	a801      	add	r0, sp, #4
 80194a4:	f005 fa34 	bl	801e910 <GUI_ALLOC_UnlockH>
 80194a8:	b004      	add	sp, #16
 80194aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080194ae <WM__InvalidateParent>:
 80194ae:	b570      	push	{r4, r5, r6, lr}
 80194b0:	4605      	mov	r5, r0
 80194b2:	4608      	mov	r0, r1
 80194b4:	460c      	mov	r4, r1
 80194b6:	4616      	mov	r6, r2
 80194b8:	f005 fa12 	bl	801e8e0 <GUI_ALLOC_h2p>
 80194bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80194be:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80194c2:	4628      	mov	r0, r5
 80194c4:	4621      	mov	r1, r4
 80194c6:	4632      	mov	r2, r6
 80194c8:	bf0c      	ite	eq
 80194ca:	2320      	moveq	r3, #32
 80194cc:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 80194d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80194d4:	f7ff bfaf 	b.w	8019436 <WM__InvalidateRect>

080194d8 <WM__InvalidateRectEx>:
 80194d8:	2320      	movs	r3, #32
 80194da:	f7ff bfac 	b.w	8019436 <WM__InvalidateRect>

080194de <WM__DetachWindow>:
 80194de:	b513      	push	{r0, r1, r4, lr}
 80194e0:	4604      	mov	r4, r0
 80194e2:	f005 fa07 	bl	801e8f4 <GUI_ALLOC_LockH>
 80194e6:	6981      	ldr	r1, [r0, #24]
 80194e8:	9001      	str	r0, [sp, #4]
 80194ea:	b141      	cbz	r1, 80194fe <WM__DetachWindow+0x20>
 80194ec:	6a02      	ldr	r2, [r0, #32]
 80194ee:	f7ff fff3 	bl	80194d8 <WM__InvalidateRectEx>
 80194f2:	4620      	mov	r0, r4
 80194f4:	f7ff fe6a 	bl	80191cc <WM__RemoveWindowFromList>
 80194f8:	9b01      	ldr	r3, [sp, #4]
 80194fa:	2200      	movs	r2, #0
 80194fc:	619a      	str	r2, [r3, #24]
 80194fe:	a801      	add	r0, sp, #4
 8019500:	f005 fa06 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019504:	b002      	add	sp, #8
 8019506:	bd10      	pop	{r4, pc}

08019508 <WM__SendMsgNoData>:
 8019508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801950a:	ab04      	add	r3, sp, #16
 801950c:	9001      	str	r0, [sp, #4]
 801950e:	f843 1d10 	str.w	r1, [r3, #-16]!
 8019512:	4669      	mov	r1, sp
 8019514:	f006 fbd2 	bl	801fcbc <WM__SendMessage>
 8019518:	b005      	add	sp, #20
 801951a:	f85d fb04 	ldr.w	pc, [sp], #4

0801951e <WM__GetClientRectWin>:
 801951e:	2300      	movs	r3, #0
 8019520:	800b      	strh	r3, [r1, #0]
 8019522:	8882      	ldrh	r2, [r0, #4]
 8019524:	804b      	strh	r3, [r1, #2]
 8019526:	8803      	ldrh	r3, [r0, #0]
 8019528:	1ad3      	subs	r3, r2, r3
 801952a:	808b      	strh	r3, [r1, #4]
 801952c:	88c2      	ldrh	r2, [r0, #6]
 801952e:	8843      	ldrh	r3, [r0, #2]
 8019530:	1ad3      	subs	r3, r2, r3
 8019532:	80cb      	strh	r3, [r1, #6]
 8019534:	4770      	bx	lr

08019536 <WM_InvalidateRect>:
 8019536:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019538:	460f      	mov	r7, r1
 801953a:	b087      	sub	sp, #28
 801953c:	4605      	mov	r5, r0
 801953e:	2800      	cmp	r0, #0
 8019540:	d033      	beq.n	80195aa <WM_InvalidateRect+0x74>
 8019542:	f005 f9d7 	bl	801e8f4 <GUI_ALLOC_LockH>
 8019546:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8019548:	9001      	str	r0, [sp, #4]
 801954a:	07b2      	lsls	r2, r6, #30
 801954c:	d52a      	bpl.n	80195a4 <WM_InvalidateRect+0x6e>
 801954e:	c803      	ldmia	r0, {r0, r1}
 8019550:	ac04      	add	r4, sp, #16
 8019552:	03f3      	lsls	r3, r6, #15
 8019554:	e884 0003 	stmia.w	r4, {r0, r1}
 8019558:	d502      	bpl.n	8019560 <WM_InvalidateRect+0x2a>
 801955a:	4628      	mov	r0, r5
 801955c:	f7ff feb8 	bl	80192d0 <WM__InvalidateDrawAndDescs>
 8019560:	b15f      	cbz	r7, 801957a <WM_InvalidateRect+0x44>
 8019562:	6838      	ldr	r0, [r7, #0]
 8019564:	6879      	ldr	r1, [r7, #4]
 8019566:	ab02      	add	r3, sp, #8
 8019568:	c303      	stmia	r3!, {r0, r1}
 801956a:	9801      	ldr	r0, [sp, #4]
 801956c:	a902      	add	r1, sp, #8
 801956e:	f7ff fe4b 	bl	8019208 <WM__Client2Screen>
 8019572:	4620      	mov	r0, r4
 8019574:	a902      	add	r1, sp, #8
 8019576:	f003 f91b 	bl	801c7b0 <GUI__IntersectRect>
 801957a:	4620      	mov	r0, r4
 801957c:	4629      	mov	r1, r5
 801957e:	f7ff fda5 	bl	80190cc <WM__ClipAtParentBorders>
 8019582:	b178      	cbz	r0, 80195a4 <WM_InvalidateRect+0x6e>
 8019584:	f640 0301 	movw	r3, #2049	; 0x801
 8019588:	4033      	ands	r3, r6
 801958a:	2b01      	cmp	r3, #1
 801958c:	d106      	bne.n	801959c <WM_InvalidateRect+0x66>
 801958e:	9b01      	ldr	r3, [sp, #4]
 8019590:	4620      	mov	r0, r4
 8019592:	6999      	ldr	r1, [r3, #24]
 8019594:	6a1a      	ldr	r2, [r3, #32]
 8019596:	f7ff ff9f 	bl	80194d8 <WM__InvalidateRectEx>
 801959a:	e003      	b.n	80195a4 <WM_InvalidateRect+0x6e>
 801959c:	4628      	mov	r0, r5
 801959e:	4621      	mov	r1, r4
 80195a0:	f7ff ff14 	bl	80193cc <WM__Invalidate1Abs>
 80195a4:	a801      	add	r0, sp, #4
 80195a6:	f005 f9b3 	bl	801e910 <GUI_ALLOC_UnlockH>
 80195aa:	b007      	add	sp, #28
 80195ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080195ae <WM_InvalidateWindow>:
 80195ae:	2100      	movs	r1, #0
 80195b0:	f7ff bfc1 	b.w	8019536 <WM_InvalidateRect>

080195b4 <WM__GetTopLevelLayer>:
 80195b4:	b510      	push	{r4, lr}
 80195b6:	4604      	mov	r4, r0
 80195b8:	f005 f992 	bl	801e8e0 <GUI_ALLOC_h2p>
 80195bc:	6980      	ldr	r0, [r0, #24]
 80195be:	2800      	cmp	r0, #0
 80195c0:	d1f9      	bne.n	80195b6 <WM__GetTopLevelLayer+0x2>
 80195c2:	4b05      	ldr	r3, [pc, #20]	; (80195d8 <WM__GetTopLevelLayer+0x24>)
 80195c4:	681a      	ldr	r2, [r3, #0]
 80195c6:	4294      	cmp	r4, r2
 80195c8:	d005      	beq.n	80195d6 <WM__GetTopLevelLayer+0x22>
 80195ca:	6858      	ldr	r0, [r3, #4]
 80195cc:	4284      	cmp	r4, r0
 80195ce:	bf14      	ite	ne
 80195d0:	f04f 30ff 	movne.w	r0, #4294967295
 80195d4:	2001      	moveq	r0, #1
 80195d6:	bd10      	pop	{r4, pc}
 80195d8:	2002c550 	.word	0x2002c550

080195dc <WM__SelectTopLevelLayer>:
 80195dc:	b508      	push	{r3, lr}
 80195de:	f7ff ffe9 	bl	80195b4 <WM__GetTopLevelLayer>
 80195e2:	2800      	cmp	r0, #0
 80195e4:	db03      	blt.n	80195ee <WM__SelectTopLevelLayer+0x12>
 80195e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80195ea:	f003 bbbd 	b.w	801cd68 <GUI_SelectLayer>
 80195ee:	bd08      	pop	{r3, pc}

080195f0 <WM_SelectWindow>:
 80195f0:	4a0d      	ldr	r2, [pc, #52]	; (8019628 <WM_SelectWindow+0x38>)
 80195f2:	6813      	ldr	r3, [r2, #0]
 80195f4:	b570      	push	{r4, r5, r6, lr}
 80195f6:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 80195f8:	4604      	mov	r4, r0
 80195fa:	4616      	mov	r6, r2
 80195fc:	b908      	cbnz	r0, 8019602 <WM_SelectWindow+0x12>
 80195fe:	4a0b      	ldr	r2, [pc, #44]	; (801962c <WM_SelectWindow+0x3c>)
 8019600:	6814      	ldr	r4, [r2, #0]
 8019602:	649c      	str	r4, [r3, #72]	; 0x48
 8019604:	4620      	mov	r0, r4
 8019606:	f7ff ffe9 	bl	80195dc <WM__SelectTopLevelLayer>
 801960a:	f002 ff37 	bl	801c47c <LCD_SetClipRectMax>
 801960e:	4620      	mov	r0, r4
 8019610:	f005 f966 	bl	801e8e0 <GUI_ALLOC_h2p>
 8019614:	6833      	ldr	r3, [r6, #0]
 8019616:	f9b0 1000 	ldrsh.w	r1, [r0]
 801961a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801961e:	64d9      	str	r1, [r3, #76]	; 0x4c
 8019620:	651a      	str	r2, [r3, #80]	; 0x50
 8019622:	4628      	mov	r0, r5
 8019624:	bd70      	pop	{r4, r5, r6, pc}
 8019626:	bf00      	nop
 8019628:	20000114 	.word	0x20000114
 801962c:	2002c56c 	.word	0x2002c56c

08019630 <WM_CreateWindowAsChild>:
 8019630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019634:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019636:	469b      	mov	fp, r3
 8019638:	4b4b      	ldr	r3, [pc, #300]	; (8019768 <WM_CreateWindowAsChild+0x138>)
 801963a:	4607      	mov	r7, r0
 801963c:	4688      	mov	r8, r1
 801963e:	4692      	mov	sl, r2
 8019640:	681e      	ldr	r6, [r3, #0]
 8019642:	bb65      	cbnz	r5, 801969e <WM_CreateWindowAsChild+0x6e>
 8019644:	4b49      	ldr	r3, [pc, #292]	; (801976c <WM_CreateWindowAsChild+0x13c>)
 8019646:	881b      	ldrh	r3, [r3, #0]
 8019648:	b363      	cbz	r3, 80196a4 <WM_CreateWindowAsChild+0x74>
 801964a:	4b49      	ldr	r3, [pc, #292]	; (8019770 <WM_CreateWindowAsChild+0x140>)
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	7c5a      	ldrb	r2, [r3, #17]
 8019650:	4b48      	ldr	r3, [pc, #288]	; (8019774 <WM_CreateWindowAsChild+0x144>)
 8019652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019656:	1c5a      	adds	r2, r3, #1
 8019658:	d024      	beq.n	80196a4 <WM_CreateWindowAsChild+0x74>
 801965a:	b31b      	cbz	r3, 80196a4 <WM_CreateWindowAsChild+0x74>
 801965c:	461d      	mov	r5, r3
 801965e:	4628      	mov	r0, r5
 8019660:	f005 f948 	bl	801e8f4 <GUI_ALLOC_LockH>
 8019664:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019668:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801966c:	9001      	str	r0, [sp, #4]
 801966e:	4417      	add	r7, r2
 8019670:	4498      	add	r8, r3
 8019672:	f1ba 0f00 	cmp.w	sl, #0
 8019676:	d105      	bne.n	8019684 <WM_CreateWindowAsChild+0x54>
 8019678:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 801967c:	ebc2 0a0a 	rsb	sl, r2, sl
 8019680:	f10a 0a01 	add.w	sl, sl, #1
 8019684:	f1bb 0f00 	cmp.w	fp, #0
 8019688:	d105      	bne.n	8019696 <WM_CreateWindowAsChild+0x66>
 801968a:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 801968e:	ebc3 0b0b 	rsb	fp, r3, fp
 8019692:	f10b 0b01 	add.w	fp, fp, #1
 8019696:	a801      	add	r0, sp, #4
 8019698:	f005 f93a 	bl	801e910 <GUI_ALLOC_UnlockH>
 801969c:	e002      	b.n	80196a4 <WM_CreateWindowAsChild+0x74>
 801969e:	1c6b      	adds	r3, r5, #1
 80196a0:	d1dd      	bne.n	801965e <WM_CreateWindowAsChild+0x2e>
 80196a2:	2500      	movs	r5, #0
 80196a4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80196a6:	302c      	adds	r0, #44	; 0x2c
 80196a8:	f005 fbbe 	bl	801ee28 <GUI_ALLOC_AllocZero>
 80196ac:	4604      	mov	r4, r0
 80196ae:	2800      	cmp	r0, #0
 80196b0:	d056      	beq.n	8019760 <WM_CreateWindowAsChild+0x130>
 80196b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80196b4:	431e      	orrs	r6, r3
 80196b6:	4b2d      	ldr	r3, [pc, #180]	; (801976c <WM_CreateWindowAsChild+0x13c>)
 80196b8:	881a      	ldrh	r2, [r3, #0]
 80196ba:	3201      	adds	r2, #1
 80196bc:	801a      	strh	r2, [r3, #0]
 80196be:	f005 f919 	bl	801e8f4 <GUI_ALLOC_LockH>
 80196c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80196c4:	6103      	str	r3, [r0, #16]
 80196c6:	f10d 0908 	add.w	r9, sp, #8
 80196ca:	4b2b      	ldr	r3, [pc, #172]	; (8019778 <WM_CreateWindowAsChild+0x148>)
 80196cc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80196ce:	f849 0d08 	str.w	r0, [r9, #-8]!
 80196d2:	4033      	ands	r3, r6
 80196d4:	8007      	strh	r7, [r0, #0]
 80196d6:	f8a0 8002 	strh.w	r8, [r0, #2]
 80196da:	4457      	add	r7, sl
 80196dc:	44d8      	add	r8, fp
 80196de:	4313      	orrs	r3, r2
 80196e0:	3f01      	subs	r7, #1
 80196e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80196e6:	6283      	str	r3, [r0, #40]	; 0x28
 80196e8:	8087      	strh	r7, [r0, #4]
 80196ea:	f8a0 8006 	strh.w	r8, [r0, #6]
 80196ee:	4668      	mov	r0, sp
 80196f0:	f005 f90e 	bl	801e910 <GUI_ALLOC_UnlockH>
 80196f4:	4b21      	ldr	r3, [pc, #132]	; (801977c <WM_CreateWindowAsChild+0x14c>)
 80196f6:	6818      	ldr	r0, [r3, #0]
 80196f8:	b148      	cbz	r0, 801970e <WM_CreateWindowAsChild+0xde>
 80196fa:	f005 f8f1 	bl	801e8e0 <GUI_ALLOC_h2p>
 80196fe:	4607      	mov	r7, r0
 8019700:	4620      	mov	r0, r4
 8019702:	f005 f8ed 	bl	801e8e0 <GUI_ALLOC_h2p>
 8019706:	697b      	ldr	r3, [r7, #20]
 8019708:	6143      	str	r3, [r0, #20]
 801970a:	617c      	str	r4, [r7, #20]
 801970c:	e000      	b.n	8019710 <WM_CreateWindowAsChild+0xe0>
 801970e:	601c      	str	r4, [r3, #0]
 8019710:	4629      	mov	r1, r5
 8019712:	4620      	mov	r0, r4
 8019714:	f7ff fd08 	bl	8019128 <WM__InsertWindowIntoList>
 8019718:	06b5      	lsls	r5, r6, #26
 801971a:	d502      	bpl.n	8019722 <WM_CreateWindowAsChild+0xf2>
 801971c:	4620      	mov	r0, r4
 801971e:	f7ff ff67 	bl	80195f0 <WM_SelectWindow>
 8019722:	07f0      	lsls	r0, r6, #31
 8019724:	d503      	bpl.n	801972e <WM_CreateWindowAsChild+0xfe>
 8019726:	4b16      	ldr	r3, [pc, #88]	; (8019780 <WM_CreateWindowAsChild+0x150>)
 8019728:	681a      	ldr	r2, [r3, #0]
 801972a:	3201      	adds	r2, #1
 801972c:	601a      	str	r2, [r3, #0]
 801972e:	0671      	lsls	r1, r6, #25
 8019730:	d502      	bpl.n	8019738 <WM_CreateWindowAsChild+0x108>
 8019732:	4620      	mov	r0, r4
 8019734:	f006 fcc4 	bl	80200c0 <WM_BringToBottom>
 8019738:	07b2      	lsls	r2, r6, #30
 801973a:	d50d      	bpl.n	8019758 <WM_CreateWindowAsChild+0x128>
 801973c:	4620      	mov	r0, r4
 801973e:	f005 f8d9 	bl	801e8f4 <GUI_ALLOC_LockH>
 8019742:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019744:	9000      	str	r0, [sp, #0]
 8019746:	f043 0302 	orr.w	r3, r3, #2
 801974a:	6283      	str	r3, [r0, #40]	; 0x28
 801974c:	4668      	mov	r0, sp
 801974e:	f005 f8df 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019752:	4620      	mov	r0, r4
 8019754:	f7ff ff2b 	bl	80195ae <WM_InvalidateWindow>
 8019758:	4620      	mov	r0, r4
 801975a:	2101      	movs	r1, #1
 801975c:	f7ff fed4 	bl	8019508 <WM__SendMsgNoData>
 8019760:	4620      	mov	r0, r4
 8019762:	b003      	add	sp, #12
 8019764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019768:	2002c578 	.word	0x2002c578
 801976c:	2002c548 	.word	0x2002c548
 8019770:	20000114 	.word	0x20000114
 8019774:	2002c550 	.word	0x2002c550
 8019778:	003f3f9f 	.word	0x003f3f9f
 801977c:	2002c56c 	.word	0x2002c56c
 8019780:	2002c598 	.word	0x2002c598

08019784 <WM_DeleteWindow>:
 8019784:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019786:	4604      	mov	r4, r0
 8019788:	2800      	cmp	r0, #0
 801978a:	d06e      	beq.n	801986a <WM_DeleteWindow+0xe6>
 801978c:	f7ff fd90 	bl	80192b0 <WM__IsWindow>
 8019790:	2800      	cmp	r0, #0
 8019792:	d06a      	beq.n	801986a <WM_DeleteWindow+0xe6>
 8019794:	4620      	mov	r0, r4
 8019796:	f7ff ff0d 	bl	80195b4 <WM__GetTopLevelLayer>
 801979a:	210b      	movs	r1, #11
 801979c:	4605      	mov	r5, r0
 801979e:	4620      	mov	r0, r4
 80197a0:	f7ff feb2 	bl	8019508 <WM__SendMsgNoData>
 80197a4:	4620      	mov	r0, r4
 80197a6:	f006 fad2 	bl	801fd4e <WM__DeleteAssocTimer>
 80197aa:	4620      	mov	r0, r4
 80197ac:	f005 f8a2 	bl	801e8f4 <GUI_ALLOC_LockH>
 80197b0:	9001      	str	r0, [sp, #4]
 80197b2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80197b4:	b108      	cbz	r0, 80197ba <WM_DeleteWindow+0x36>
 80197b6:	f001 fb69 	bl	801ae8c <GUI_MEMDEV_Delete>
 80197ba:	4b2d      	ldr	r3, [pc, #180]	; (8019870 <WM_DeleteWindow+0xec>)
 80197bc:	4a2d      	ldr	r2, [pc, #180]	; (8019874 <WM_DeleteWindow+0xf0>)
 80197be:	2100      	movs	r1, #0
 80197c0:	6019      	str	r1, [r3, #0]
 80197c2:	4b2d      	ldr	r3, [pc, #180]	; (8019878 <WM_DeleteWindow+0xf4>)
 80197c4:	681b      	ldr	r3, [r3, #0]
 80197c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80197ca:	42a0      	cmp	r0, r4
 80197cc:	bf08      	it	eq
 80197ce:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 80197d2:	4a2a      	ldr	r2, [pc, #168]	; (801987c <WM_DeleteWindow+0xf8>)
 80197d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80197d8:	42a1      	cmp	r1, r4
 80197da:	bf04      	itt	eq
 80197dc:	2100      	moveq	r1, #0
 80197de:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 80197e2:	4b27      	ldr	r3, [pc, #156]	; (8019880 <WM_DeleteWindow+0xfc>)
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	b12b      	cbz	r3, 80197f4 <WM_DeleteWindow+0x70>
 80197e8:	685a      	ldr	r2, [r3, #4]
 80197ea:	42a2      	cmp	r2, r4
 80197ec:	bf04      	itt	eq
 80197ee:	2200      	moveq	r2, #0
 80197f0:	605a      	streq	r2, [r3, #4]
 80197f2:	e7f7      	b.n	80197e4 <WM_DeleteWindow+0x60>
 80197f4:	4620      	mov	r0, r4
 80197f6:	2107      	movs	r1, #7
 80197f8:	f7ff fa38 	bl	8018c6c <WM_NotifyParent>
 80197fc:	9e01      	ldr	r6, [sp, #4]
 80197fe:	69f0      	ldr	r0, [r6, #28]
 8019800:	f7ff ffc0 	bl	8019784 <WM_DeleteWindow>
 8019804:	69f3      	ldr	r3, [r6, #28]
 8019806:	2b00      	cmp	r3, #0
 8019808:	d1f9      	bne.n	80197fe <WM_DeleteWindow+0x7a>
 801980a:	4620      	mov	r0, r4
 801980c:	f7ff fe67 	bl	80194de <WM__DetachWindow>
 8019810:	4b1c      	ldr	r3, [pc, #112]	; (8019884 <WM_DeleteWindow+0x100>)
 8019812:	6818      	ldr	r0, [r3, #0]
 8019814:	b150      	cbz	r0, 801982c <WM_DeleteWindow+0xa8>
 8019816:	f005 f863 	bl	801e8e0 <GUI_ALLOC_h2p>
 801981a:	4606      	mov	r6, r0
 801981c:	6940      	ldr	r0, [r0, #20]
 801981e:	42a0      	cmp	r0, r4
 8019820:	d1f8      	bne.n	8019814 <WM_DeleteWindow+0x90>
 8019822:	4620      	mov	r0, r4
 8019824:	f005 f85c 	bl	801e8e0 <GUI_ALLOC_h2p>
 8019828:	6943      	ldr	r3, [r0, #20]
 801982a:	6173      	str	r3, [r6, #20]
 801982c:	9b01      	ldr	r3, [sp, #4]
 801982e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019830:	07da      	lsls	r2, r3, #31
 8019832:	d503      	bpl.n	801983c <WM_DeleteWindow+0xb8>
 8019834:	4a14      	ldr	r2, [pc, #80]	; (8019888 <WM_DeleteWindow+0x104>)
 8019836:	6811      	ldr	r1, [r2, #0]
 8019838:	3901      	subs	r1, #1
 801983a:	6011      	str	r1, [r2, #0]
 801983c:	069b      	lsls	r3, r3, #26
 801983e:	d503      	bpl.n	8019848 <WM_DeleteWindow+0xc4>
 8019840:	4b12      	ldr	r3, [pc, #72]	; (801988c <WM_DeleteWindow+0x108>)
 8019842:	881a      	ldrh	r2, [r3, #0]
 8019844:	3a01      	subs	r2, #1
 8019846:	801a      	strh	r2, [r3, #0]
 8019848:	a801      	add	r0, sp, #4
 801984a:	f005 f861 	bl	801e910 <GUI_ALLOC_UnlockH>
 801984e:	4b10      	ldr	r3, [pc, #64]	; (8019890 <WM_DeleteWindow+0x10c>)
 8019850:	881a      	ldrh	r2, [r3, #0]
 8019852:	4620      	mov	r0, r4
 8019854:	3a01      	subs	r2, #1
 8019856:	801a      	strh	r2, [r3, #0]
 8019858:	f005 f87a 	bl	801e950 <GUI_ALLOC_Free>
 801985c:	2d00      	cmp	r5, #0
 801985e:	db04      	blt.n	801986a <WM_DeleteWindow+0xe6>
 8019860:	4b0c      	ldr	r3, [pc, #48]	; (8019894 <WM_DeleteWindow+0x110>)
 8019862:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019866:	f7ff fec3 	bl	80195f0 <WM_SelectWindow>
 801986a:	b002      	add	sp, #8
 801986c:	bd70      	pop	{r4, r5, r6, pc}
 801986e:	bf00      	nop
 8019870:	2002c330 	.word	0x2002c330
 8019874:	2002c560 	.word	0x2002c560
 8019878:	2002c570 	.word	0x2002c570
 801987c:	2002c58c 	.word	0x2002c58c
 8019880:	2002c584 	.word	0x2002c584
 8019884:	2002c56c 	.word	0x2002c56c
 8019888:	2002c598 	.word	0x2002c598
 801988c:	2002c568 	.word	0x2002c568
 8019890:	2002c548 	.word	0x2002c548
 8019894:	2002c550 	.word	0x2002c550

08019898 <WM__GetNextIVR>:
 8019898:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801989c:	4f5d      	ldr	r7, [pc, #372]	; (8019a14 <WM__GetNextIVR+0x17c>)
 801989e:	683b      	ldr	r3, [r7, #0]
 80198a0:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 80198a4:	2800      	cmp	r0, #0
 80198a6:	f000 80b2 	beq.w	8019a0e <WM__GetNextIVR+0x176>
 80198aa:	4b5b      	ldr	r3, [pc, #364]	; (8019a18 <WM__GetNextIVR+0x180>)
 80198ac:	695a      	ldr	r2, [r3, #20]
 80198ae:	2a01      	cmp	r2, #1
 80198b0:	461c      	mov	r4, r3
 80198b2:	dd03      	ble.n	80198bc <WM__GetNextIVR+0x24>
 80198b4:	3a01      	subs	r2, #1
 80198b6:	615a      	str	r2, [r3, #20]
 80198b8:	2000      	movs	r0, #0
 80198ba:	e0a8      	b.n	8019a0e <WM__GetNextIVR+0x176>
 80198bc:	f104 0608 	add.w	r6, r4, #8
 80198c0:	691b      	ldr	r3, [r3, #16]
 80198c2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80198c6:	3301      	adds	r3, #1
 80198c8:	ad02      	add	r5, sp, #8
 80198ca:	6123      	str	r3, [r4, #16]
 80198cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80198d0:	b923      	cbnz	r3, 80198dc <WM__GetNextIVR+0x44>
 80198d2:	8823      	ldrh	r3, [r4, #0]
 80198d4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80198d8:	8863      	ldrh	r3, [r4, #2]
 80198da:	e011      	b.n	8019900 <WM__GetNextIVR+0x68>
 80198dc:	89a3      	ldrh	r3, [r4, #12]
 80198de:	8962      	ldrh	r2, [r4, #10]
 80198e0:	f8ad 200a 	strh.w	r2, [sp, #10]
 80198e4:	3301      	adds	r3, #1
 80198e6:	b29b      	uxth	r3, r3
 80198e8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80198ec:	f8ad 3008 	strh.w	r3, [sp, #8]
 80198f0:	b21b      	sxth	r3, r3
 80198f2:	429a      	cmp	r2, r3
 80198f4:	da06      	bge.n	8019904 <WM__GetNextIVR+0x6c>
 80198f6:	8823      	ldrh	r3, [r4, #0]
 80198f8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80198fc:	89e3      	ldrh	r3, [r4, #14]
 80198fe:	3301      	adds	r3, #1
 8019900:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019904:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8019908:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801990c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8019a18 <WM__GetNextIVR+0x180>
 8019910:	429a      	cmp	r2, r3
 8019912:	dd04      	ble.n	801991e <WM__GetNextIVR+0x86>
 8019914:	6963      	ldr	r3, [r4, #20]
 8019916:	3b01      	subs	r3, #1
 8019918:	2000      	movs	r0, #0
 801991a:	6163      	str	r3, [r4, #20]
 801991c:	e077      	b.n	8019a0e <WM__GetNextIVR+0x176>
 801991e:	683b      	ldr	r3, [r7, #0]
 8019920:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8019922:	f004 ffe7 	bl	801e8f4 <GUI_ALLOC_LockH>
 8019926:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801992a:	f9b8 3000 	ldrsh.w	r3, [r8]
 801992e:	9001      	str	r0, [sp, #4]
 8019930:	429a      	cmp	r2, r3
 8019932:	d11c      	bne.n	801996e <WM__GetNextIVR+0xd6>
 8019934:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8019938:	f8ad 300e 	strh.w	r3, [sp, #14]
 801993c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8019940:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019944:	4b33      	ldr	r3, [pc, #204]	; (8019a14 <WM__GetNextIVR+0x17c>)
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801994a:	b15a      	cbz	r2, 8019964 <WM__GetNextIVR+0xcc>
 801994c:	4610      	mov	r0, r2
 801994e:	f004 ffc7 	bl	801e8e0 <GUI_ALLOC_h2p>
 8019952:	4680      	mov	r8, r0
 8019954:	2200      	movs	r2, #0
 8019956:	6a00      	ldr	r0, [r0, #32]
 8019958:	4629      	mov	r1, r5
 801995a:	f7ff f9cb 	bl	8018cf4 <_Findy1>
 801995e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8019962:	e7f2      	b.n	801994a <WM__GetNextIVR+0xb2>
 8019964:	9b01      	ldr	r3, [sp, #4]
 8019966:	4629      	mov	r1, r5
 8019968:	69d8      	ldr	r0, [r3, #28]
 801996a:	f7ff f9c3 	bl	8018cf4 <_Findy1>
 801996e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019972:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019976:	683b      	ldr	r3, [r7, #0]
 8019978:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801997a:	b16a      	cbz	r2, 8019998 <WM__GetNextIVR+0x100>
 801997c:	4610      	mov	r0, r2
 801997e:	f004 ffaf 	bl	801e8e0 <GUI_ALLOC_h2p>
 8019982:	4629      	mov	r1, r5
 8019984:	4680      	mov	r8, r0
 8019986:	2200      	movs	r2, #0
 8019988:	6a00      	ldr	r0, [r0, #32]
 801998a:	f7ff fa09 	bl	8018da0 <_Findx0>
 801998e:	2800      	cmp	r0, #0
 8019990:	d1ed      	bne.n	801996e <WM__GetNextIVR+0xd6>
 8019992:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8019996:	e7f0      	b.n	801997a <WM__GetNextIVR+0xe2>
 8019998:	9b01      	ldr	r3, [sp, #4]
 801999a:	4629      	mov	r1, r5
 801999c:	69d8      	ldr	r0, [r3, #28]
 801999e:	f7ff f9ff 	bl	8018da0 <_Findx0>
 80199a2:	2800      	cmp	r0, #0
 80199a4:	d1e3      	bne.n	801996e <WM__GetNextIVR+0xd6>
 80199a6:	88a3      	ldrh	r3, [r4, #4]
 80199a8:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80199ac:	f8ad 300c 	strh.w	r3, [sp, #12]
 80199b0:	b21b      	sxth	r3, r3
 80199b2:	429a      	cmp	r2, r3
 80199b4:	dd07      	ble.n	80199c6 <WM__GetNextIVR+0x12e>
 80199b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80199ba:	e886 0003 	stmia.w	r6, {r0, r1}
 80199be:	a801      	add	r0, sp, #4
 80199c0:	f004 ffa6 	bl	801e910 <GUI_ALLOC_UnlockH>
 80199c4:	e797      	b.n	80198f6 <WM__GetNextIVR+0x5e>
 80199c6:	683b      	ldr	r3, [r7, #0]
 80199c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80199ca:	b152      	cbz	r2, 80199e2 <WM__GetNextIVR+0x14a>
 80199cc:	4610      	mov	r0, r2
 80199ce:	f004 ff87 	bl	801e8e0 <GUI_ALLOC_h2p>
 80199d2:	4607      	mov	r7, r0
 80199d4:	2200      	movs	r2, #0
 80199d6:	6a00      	ldr	r0, [r0, #32]
 80199d8:	4629      	mov	r1, r5
 80199da:	f7ff fa25 	bl	8018e28 <_Findx1>
 80199de:	69ba      	ldr	r2, [r7, #24]
 80199e0:	e7f3      	b.n	80199ca <WM__GetNextIVR+0x132>
 80199e2:	af04      	add	r7, sp, #16
 80199e4:	4629      	mov	r1, r5
 80199e6:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 80199ea:	69d8      	ldr	r0, [r3, #28]
 80199ec:	f7ff fa1c 	bl	8018e28 <_Findx1>
 80199f0:	4638      	mov	r0, r7
 80199f2:	f004 ff8d 	bl	801e910 <GUI_ALLOC_UnlockH>
 80199f6:	6923      	ldr	r3, [r4, #16]
 80199f8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80199fc:	4293      	cmp	r3, r2
 80199fe:	dc89      	bgt.n	8019914 <WM__GetNextIVR+0x7c>
 8019a00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019a04:	e886 0003 	stmia.w	r6, {r0, r1}
 8019a08:	f7ff fc2e 	bl	8019268 <WM__ActivateClipRect>
 8019a0c:	2001      	movs	r0, #1
 8019a0e:	b004      	add	sp, #16
 8019a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a14:	20000114 	.word	0x20000114
 8019a18:	2002c318 	.word	0x2002c318

08019a1c <WM__InitIVRSearch>:
 8019a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a20:	4f39      	ldr	r7, [pc, #228]	; (8019b08 <WM__InitIVRSearch+0xec>)
 8019a22:	683b      	ldr	r3, [r7, #0]
 8019a24:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8019a28:	b086      	sub	sp, #24
 8019a2a:	4606      	mov	r6, r0
 8019a2c:	b912      	cbnz	r2, 8019a34 <WM__InitIVRSearch+0x18>
 8019a2e:	f7ff fc1b 	bl	8019268 <WM__ActivateClipRect>
 8019a32:	e064      	b.n	8019afe <WM__InitIVRSearch+0xe2>
 8019a34:	4d35      	ldr	r5, [pc, #212]	; (8019b0c <WM__InitIVRSearch+0xf0>)
 8019a36:	696a      	ldr	r2, [r5, #20]
 8019a38:	3201      	adds	r2, #1
 8019a3a:	2a01      	cmp	r2, #1
 8019a3c:	616a      	str	r2, [r5, #20]
 8019a3e:	462c      	mov	r4, r5
 8019a40:	dc5d      	bgt.n	8019afe <WM__InitIVRSearch+0xe2>
 8019a42:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8019a44:	f004 ff56 	bl	801e8f4 <GUI_ALLOC_LockH>
 8019a48:	f04f 32ff 	mov.w	r2, #4294967295
 8019a4c:	612a      	str	r2, [r5, #16]
 8019a4e:	4a30      	ldr	r2, [pc, #192]	; (8019b10 <WM__InitIVRSearch+0xf4>)
 8019a50:	9000      	str	r0, [sp, #0]
 8019a52:	7812      	ldrb	r2, [r2, #0]
 8019a54:	b12a      	cbz	r2, 8019a62 <WM__InitIVRSearch+0x46>
 8019a56:	f100 0308 	add.w	r3, r0, #8
 8019a5a:	aa02      	add	r2, sp, #8
 8019a5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019a60:	e005      	b.n	8019a6e <WM__InitIVRSearch+0x52>
 8019a62:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8019a64:	f012 0802 	ands.w	r8, r2, #2
 8019a68:	d00a      	beq.n	8019a80 <WM__InitIVRSearch+0x64>
 8019a6a:	c803      	ldmia	r0, {r0, r1}
 8019a6c:	aa02      	add	r2, sp, #8
 8019a6e:	e882 0003 	stmia.w	r2, {r0, r1}
 8019a72:	ad02      	add	r5, sp, #8
 8019a74:	b166      	cbz	r6, 8019a90 <WM__InitIVRSearch+0x74>
 8019a76:	4628      	mov	r0, r5
 8019a78:	4631      	mov	r1, r6
 8019a7a:	f002 fe99 	bl	801c7b0 <GUI__IntersectRect>
 8019a7e:	e007      	b.n	8019a90 <WM__InitIVRSearch+0x74>
 8019a80:	696b      	ldr	r3, [r5, #20]
 8019a82:	4668      	mov	r0, sp
 8019a84:	3b01      	subs	r3, #1
 8019a86:	616b      	str	r3, [r5, #20]
 8019a88:	f004 ff42 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019a8c:	4640      	mov	r0, r8
 8019a8e:	e037      	b.n	8019b00 <WM__InitIVRSearch+0xe4>
 8019a90:	683b      	ldr	r3, [r7, #0]
 8019a92:	4e20      	ldr	r6, [pc, #128]	; (8019b14 <WM__InitIVRSearch+0xf8>)
 8019a94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019a96:	b1c2      	cbz	r2, 8019aca <WM__InitIVRSearch+0xae>
 8019a98:	9b00      	ldr	r3, [sp, #0]
 8019a9a:	6810      	ldr	r0, [r2, #0]
 8019a9c:	6851      	ldr	r1, [r2, #4]
 8019a9e:	9301      	str	r3, [sp, #4]
 8019aa0:	ab04      	add	r3, sp, #16
 8019aa2:	c303      	stmia	r3!, {r0, r1}
 8019aa4:	6833      	ldr	r3, [r6, #0]
 8019aa6:	b133      	cbz	r3, 8019ab6 <WM__InitIVRSearch+0x9a>
 8019aa8:	a801      	add	r0, sp, #4
 8019aaa:	f004 ff31 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019aae:	6830      	ldr	r0, [r6, #0]
 8019ab0:	f004 ff20 	bl	801e8f4 <GUI_ALLOC_LockH>
 8019ab4:	9001      	str	r0, [sp, #4]
 8019ab6:	9801      	ldr	r0, [sp, #4]
 8019ab8:	a904      	add	r1, sp, #16
 8019aba:	f7ff fba5 	bl	8019208 <WM__Client2Screen>
 8019abe:	4628      	mov	r0, r5
 8019ac0:	a904      	add	r1, sp, #16
 8019ac2:	f002 fe75 	bl	801c7b0 <GUI__IntersectRect>
 8019ac6:	a801      	add	r0, sp, #4
 8019ac8:	e000      	b.n	8019acc <WM__InitIVRSearch+0xb0>
 8019aca:	4668      	mov	r0, sp
 8019acc:	f004 ff20 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019ad0:	6831      	ldr	r1, [r6, #0]
 8019ad2:	b119      	cbz	r1, 8019adc <WM__InitIVRSearch+0xc0>
 8019ad4:	4628      	mov	r0, r5
 8019ad6:	f7ff faf9 	bl	80190cc <WM__ClipAtParentBorders>
 8019ada:	b128      	cbz	r0, 8019ae8 <WM__InitIVRSearch+0xcc>
 8019adc:	683b      	ldr	r3, [r7, #0]
 8019ade:	4628      	mov	r0, r5
 8019ae0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8019ae2:	f7ff faf3 	bl	80190cc <WM__ClipAtParentBorders>
 8019ae6:	b918      	cbnz	r0, 8019af0 <WM__InitIVRSearch+0xd4>
 8019ae8:	6963      	ldr	r3, [r4, #20]
 8019aea:	3b01      	subs	r3, #1
 8019aec:	6163      	str	r3, [r4, #20]
 8019aee:	e007      	b.n	8019b00 <WM__InitIVRSearch+0xe4>
 8019af0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019af4:	e884 0003 	stmia.w	r4, {r0, r1}
 8019af8:	f7ff fece 	bl	8019898 <WM__GetNextIVR>
 8019afc:	e000      	b.n	8019b00 <WM__InitIVRSearch+0xe4>
 8019afe:	2001      	movs	r0, #1
 8019b00:	b006      	add	sp, #24
 8019b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b06:	bf00      	nop
 8019b08:	20000114 	.word	0x20000114
 8019b0c:	2002c318 	.word	0x2002c318
 8019b10:	2002c575 	.word	0x2002c575
 8019b14:	2002c54c 	.word	0x2002c54c

08019b18 <WM_SetDefault>:
 8019b18:	b508      	push	{r3, lr}
 8019b1a:	f003 f8e5 	bl	801cce8 <GL_SetDefault>
 8019b1e:	4b02      	ldr	r3, [pc, #8]	; (8019b28 <WM_SetDefault+0x10>)
 8019b20:	681b      	ldr	r3, [r3, #0]
 8019b22:	2200      	movs	r2, #0
 8019b24:	645a      	str	r2, [r3, #68]	; 0x44
 8019b26:	bd08      	pop	{r3, pc}
 8019b28:	20000114 	.word	0x20000114

08019b2c <WM__Paint1>:
 8019b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b2e:	b089      	sub	sp, #36	; 0x24
 8019b30:	4604      	mov	r4, r0
 8019b32:	f004 fedf 	bl	801e8f4 <GUI_ALLOC_LockH>
 8019b36:	6907      	ldr	r7, [r0, #16]
 8019b38:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8019b3a:	9001      	str	r0, [sp, #4]
 8019b3c:	3008      	adds	r0, #8
 8019b3e:	c803      	ldmia	r0, {r0, r1}
 8019b40:	ad02      	add	r5, sp, #8
 8019b42:	e885 0003 	stmia.w	r5, {r0, r1}
 8019b46:	a801      	add	r0, sp, #4
 8019b48:	f004 fee2 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019b4c:	2f00      	cmp	r7, #0
 8019b4e:	d031      	beq.n	8019bb4 <WM__Paint1+0x88>
 8019b50:	07b3      	lsls	r3, r6, #30
 8019b52:	d52f      	bpl.n	8019bb4 <WM__Paint1+0x88>
 8019b54:	4620      	mov	r0, r4
 8019b56:	212e      	movs	r1, #46	; 0x2e
 8019b58:	f006 f950 	bl	801fdfc <WM_SendMessageNoPara>
 8019b5c:	4b16      	ldr	r3, [pc, #88]	; (8019bb8 <WM__Paint1+0x8c>)
 8019b5e:	781a      	ldrb	r2, [r3, #0]
 8019b60:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8019b64:	f102 0201 	add.w	r2, r2, #1
 8019b68:	701a      	strb	r2, [r3, #0]
 8019b6a:	461e      	mov	r6, r3
 8019b6c:	d00a      	beq.n	8019b84 <WM__Paint1+0x58>
 8019b6e:	230f      	movs	r3, #15
 8019b70:	9405      	str	r4, [sp, #20]
 8019b72:	9304      	str	r3, [sp, #16]
 8019b74:	9507      	str	r5, [sp, #28]
 8019b76:	f7ff ffcf 	bl	8019b18 <WM_SetDefault>
 8019b7a:	4620      	mov	r0, r4
 8019b7c:	a904      	add	r1, sp, #16
 8019b7e:	f006 f89d 	bl	801fcbc <WM__SendMessage>
 8019b82:	e010      	b.n	8019ba6 <WM__Paint1+0x7a>
 8019b84:	4628      	mov	r0, r5
 8019b86:	f7ff ff49 	bl	8019a1c <WM__InitIVRSearch>
 8019b8a:	b160      	cbz	r0, 8019ba6 <WM__Paint1+0x7a>
 8019b8c:	230f      	movs	r3, #15
 8019b8e:	9304      	str	r3, [sp, #16]
 8019b90:	9405      	str	r4, [sp, #20]
 8019b92:	9507      	str	r5, [sp, #28]
 8019b94:	f7ff ffc0 	bl	8019b18 <WM_SetDefault>
 8019b98:	4620      	mov	r0, r4
 8019b9a:	a904      	add	r1, sp, #16
 8019b9c:	f006 f88e 	bl	801fcbc <WM__SendMessage>
 8019ba0:	f7ff fe7a 	bl	8019898 <WM__GetNextIVR>
 8019ba4:	e7f1      	b.n	8019b8a <WM__Paint1+0x5e>
 8019ba6:	7833      	ldrb	r3, [r6, #0]
 8019ba8:	4620      	mov	r0, r4
 8019baa:	3b01      	subs	r3, #1
 8019bac:	212f      	movs	r1, #47	; 0x2f
 8019bae:	7033      	strb	r3, [r6, #0]
 8019bb0:	f006 f924 	bl	801fdfc <WM_SendMessageNoPara>
 8019bb4:	b009      	add	sp, #36	; 0x24
 8019bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019bb8:	2002c575 	.word	0x2002c575

08019bbc <WM__Paint>:
 8019bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019bbe:	b089      	sub	sp, #36	; 0x24
 8019bc0:	ac06      	add	r4, sp, #24
 8019bc2:	9003      	str	r0, [sp, #12]
 8019bc4:	f004 fe96 	bl	801e8f4 <GUI_ALLOC_LockH>
 8019bc8:	f100 0208 	add.w	r2, r0, #8
 8019bcc:	4603      	mov	r3, r0
 8019bce:	9005      	str	r0, [sp, #20]
 8019bd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019bd4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8019bd6:	699e      	ldr	r6, [r3, #24]
 8019bd8:	691f      	ldr	r7, [r3, #16]
 8019bda:	e884 0003 	stmia.w	r4, {r0, r1}
 8019bde:	a805      	add	r0, sp, #20
 8019be0:	f004 fe96 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019be4:	f244 0320 	movw	r3, #16416	; 0x4020
 8019be8:	402b      	ands	r3, r5
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d034      	beq.n	8019c58 <WM__Paint+0x9c>
 8019bee:	b1bf      	cbz	r7, 8019c20 <WM__Paint+0x64>
 8019bf0:	4620      	mov	r0, r4
 8019bf2:	9903      	ldr	r1, [sp, #12]
 8019bf4:	f7ff fa6a 	bl	80190cc <WM__ClipAtParentBorders>
 8019bf8:	b190      	cbz	r0, 8019c20 <WM__Paint+0x64>
 8019bfa:	9803      	ldr	r0, [sp, #12]
 8019bfc:	f7ff fcf8 	bl	80195f0 <WM_SelectWindow>
 8019c00:	0769      	lsls	r1, r5, #29
 8019c02:	d50f      	bpl.n	8019c24 <WM__Paint+0x68>
 8019c04:	b126      	cbz	r6, 8019c10 <WM__Paint+0x54>
 8019c06:	f005 0501 	and.w	r5, r5, #1
 8019c0a:	f085 0501 	eor.w	r5, r5, #1
 8019c0e:	e000      	b.n	8019c12 <WM__Paint+0x56>
 8019c10:	2501      	movs	r5, #1
 8019c12:	9500      	str	r5, [sp, #0]
 8019c14:	4620      	mov	r0, r4
 8019c16:	4912      	ldr	r1, [pc, #72]	; (8019c60 <WM__Paint+0xa4>)
 8019c18:	aa03      	add	r2, sp, #12
 8019c1a:	2300      	movs	r3, #0
 8019c1c:	f000 facc 	bl	801a1b8 <GUI_MEMDEV_Draw>
 8019c20:	2400      	movs	r4, #0
 8019c22:	e003      	b.n	8019c2c <WM__Paint+0x70>
 8019c24:	9803      	ldr	r0, [sp, #12]
 8019c26:	f7ff f9e1 	bl	8018fec <WM__PaintWinAndOverlays>
 8019c2a:	2401      	movs	r4, #1
 8019c2c:	9803      	ldr	r0, [sp, #12]
 8019c2e:	f004 fe61 	bl	801e8f4 <GUI_ALLOC_LockH>
 8019c32:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8019c34:	9005      	str	r0, [sp, #20]
 8019c36:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 8019c3a:	f023 0320 	bic.w	r3, r3, #32
 8019c3e:	0492      	lsls	r2, r2, #18
 8019c40:	bf48      	it	mi
 8019c42:	f043 0304 	orrmi.w	r3, r3, #4
 8019c46:	6283      	str	r3, [r0, #40]	; 0x28
 8019c48:	a805      	add	r0, sp, #20
 8019c4a:	f004 fe61 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019c4e:	4b05      	ldr	r3, [pc, #20]	; (8019c64 <WM__Paint+0xa8>)
 8019c50:	881a      	ldrh	r2, [r3, #0]
 8019c52:	3a01      	subs	r2, #1
 8019c54:	801a      	strh	r2, [r3, #0]
 8019c56:	e000      	b.n	8019c5a <WM__Paint+0x9e>
 8019c58:	461c      	mov	r4, r3
 8019c5a:	4620      	mov	r0, r4
 8019c5c:	b009      	add	sp, #36	; 0x24
 8019c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c60:	08019065 	.word	0x08019065
 8019c64:	2002c568 	.word	0x2002c568

08019c68 <WM_Exec>:
 8019c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c6c:	4b4c      	ldr	r3, [pc, #304]	; (8019da0 <WM_Exec+0x138>)
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	b09f      	sub	sp, #124	; 0x7c
 8019c72:	b103      	cbz	r3, 8019c76 <WM_Exec+0xe>
 8019c74:	4798      	blx	r3
 8019c76:	2600      	movs	r6, #0
 8019c78:	4d4a      	ldr	r5, [pc, #296]	; (8019da4 <WM_Exec+0x13c>)
 8019c7a:	682b      	ldr	r3, [r5, #0]
 8019c7c:	b1db      	cbz	r3, 8019cb6 <WM_Exec+0x4e>
 8019c7e:	4b4a      	ldr	r3, [pc, #296]	; (8019da8 <WM_Exec+0x140>)
 8019c80:	681c      	ldr	r4, [r3, #0]
 8019c82:	b1bc      	cbz	r4, 8019cb4 <WM_Exec+0x4c>
 8019c84:	4620      	mov	r0, r4
 8019c86:	f004 fe35 	bl	801e8f4 <GUI_ALLOC_LockH>
 8019c8a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8019c8c:	6947      	ldr	r7, [r0, #20]
 8019c8e:	ab1e      	add	r3, sp, #120	; 0x78
 8019c90:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8019c94:	f843 0d70 	str.w	r0, [r3, #-112]!
 8019c98:	d007      	beq.n	8019caa <WM_Exec+0x42>
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	f004 fe38 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019ca0:	4620      	mov	r0, r4
 8019ca2:	f7ff fd6f 	bl	8019784 <WM_DeleteWindow>
 8019ca6:	463c      	mov	r4, r7
 8019ca8:	e7eb      	b.n	8019c82 <WM_Exec+0x1a>
 8019caa:	4618      	mov	r0, r3
 8019cac:	463c      	mov	r4, r7
 8019cae:	f004 fe2f 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019cb2:	e7e6      	b.n	8019c82 <WM_Exec+0x1a>
 8019cb4:	602c      	str	r4, [r5, #0]
 8019cb6:	4b3d      	ldr	r3, [pc, #244]	; (8019dac <WM_Exec+0x144>)
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	b103      	cbz	r3, 8019cbe <WM_Exec+0x56>
 8019cbc:	4798      	blx	r3
 8019cbe:	4b3c      	ldr	r3, [pc, #240]	; (8019db0 <WM_Exec+0x148>)
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	b92b      	cbnz	r3, 8019cd0 <WM_Exec+0x68>
 8019cc4:	4f3b      	ldr	r7, [pc, #236]	; (8019db4 <WM_Exec+0x14c>)
 8019cc6:	683b      	ldr	r3, [r7, #0]
 8019cc8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8019ccc:	b143      	cbz	r3, 8019ce0 <WM_Exec+0x78>
 8019cce:	e003      	b.n	8019cd8 <WM_Exec+0x70>
 8019cd0:	4798      	blx	r3
 8019cd2:	2800      	cmp	r0, #0
 8019cd4:	d0f6      	beq.n	8019cc4 <WM_Exec+0x5c>
 8019cd6:	e058      	b.n	8019d8a <WM_Exec+0x122>
 8019cd8:	f003 f8ae 	bl	801ce38 <GUI_PollKeyMsg>
 8019cdc:	2800      	cmp	r0, #0
 8019cde:	d154      	bne.n	8019d8a <WM_Exec+0x122>
 8019ce0:	683b      	ldr	r3, [r7, #0]
 8019ce2:	f893 5054 	ldrb.w	r5, [r3, #84]	; 0x54
 8019ce6:	b14d      	cbz	r5, 8019cfc <WM_Exec+0x94>
 8019ce8:	4b33      	ldr	r3, [pc, #204]	; (8019db8 <WM_Exec+0x150>)
 8019cea:	881d      	ldrh	r5, [r3, #0]
 8019cec:	b135      	cbz	r5, 8019cfc <WM_Exec+0x94>
 8019cee:	4b33      	ldr	r3, [pc, #204]	; (8019dbc <WM_Exec+0x154>)
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d04b      	beq.n	8019d8e <WM_Exec+0x126>
 8019cf6:	681b      	ldr	r3, [r3, #0]
 8019cf8:	4798      	blx	r3
 8019cfa:	2501      	movs	r5, #1
 8019cfc:	683b      	ldr	r3, [r7, #0]
 8019cfe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8019d02:	b913      	cbnz	r3, 8019d0a <WM_Exec+0xa2>
 8019d04:	2d00      	cmp	r5, #0
 8019d06:	d137      	bne.n	8019d78 <WM_Exec+0x110>
 8019d08:	e045      	b.n	8019d96 <WM_Exec+0x12e>
 8019d0a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8019db8 <WM_Exec+0x150>
 8019d0e:	f8b8 3000 	ldrh.w	r3, [r8]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d0f6      	beq.n	8019d04 <WM_Exec+0x9c>
 8019d16:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8019dc0 <WM_Exec+0x158>
 8019d1a:	f8d9 4000 	ldr.w	r4, [r9]
 8019d1e:	b90c      	cbnz	r4, 8019d24 <WM_Exec+0xbc>
 8019d20:	4b21      	ldr	r3, [pc, #132]	; (8019da8 <WM_Exec+0x140>)
 8019d22:	681c      	ldr	r4, [r3, #0]
 8019d24:	a802      	add	r0, sp, #8
 8019d26:	f003 f83f 	bl	801cda8 <GUI_SaveContext_W>
 8019d2a:	683b      	ldr	r3, [r7, #0]
 8019d2c:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 8019d30:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8019d34:	b914      	cbnz	r4, 8019d3c <WM_Exec+0xd4>
 8019d36:	2400      	movs	r4, #0
 8019d38:	e00d      	b.n	8019d56 <WM_Exec+0xee>
 8019d3a:	b963      	cbnz	r3, 8019d56 <WM_Exec+0xee>
 8019d3c:	4620      	mov	r0, r4
 8019d3e:	f7ff ff3d 	bl	8019bbc <WM__Paint>
 8019d42:	4603      	mov	r3, r0
 8019d44:	4620      	mov	r0, r4
 8019d46:	9301      	str	r3, [sp, #4]
 8019d48:	f004 fdca 	bl	801e8e0 <GUI_ALLOC_h2p>
 8019d4c:	6944      	ldr	r4, [r0, #20]
 8019d4e:	9b01      	ldr	r3, [sp, #4]
 8019d50:	2c00      	cmp	r4, #0
 8019d52:	d1f2      	bne.n	8019d3a <WM_Exec+0xd2>
 8019d54:	e7ef      	b.n	8019d36 <WM_Exec+0xce>
 8019d56:	4658      	mov	r0, fp
 8019d58:	f8c9 4000 	str.w	r4, [r9]
 8019d5c:	f002 ffe6 	bl	801cd2c <GUI_SetColor>
 8019d60:	4650      	mov	r0, sl
 8019d62:	f002 ffe1 	bl	801cd28 <GUI_SetBkColor>
 8019d66:	a802      	add	r0, sp, #8
 8019d68:	f003 f828 	bl	801cdbc <GUI_RestoreContext>
 8019d6c:	f8b8 3000 	ldrh.w	r3, [r8]
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d0c7      	beq.n	8019d04 <WM_Exec+0x9c>
 8019d74:	2601      	movs	r6, #1
 8019d76:	e7c1      	b.n	8019cfc <WM_Exec+0x94>
 8019d78:	4b10      	ldr	r3, [pc, #64]	; (8019dbc <WM_Exec+0x154>)
 8019d7a:	6818      	ldr	r0, [r3, #0]
 8019d7c:	b110      	cbz	r0, 8019d84 <WM_Exec+0x11c>
 8019d7e:	6843      	ldr	r3, [r0, #4]
 8019d80:	4798      	blx	r3
 8019d82:	e008      	b.n	8019d96 <WM_Exec+0x12e>
 8019d84:	f002 fcda 	bl	801c73c <GUI__ManageCache>
 8019d88:	e005      	b.n	8019d96 <WM_Exec+0x12e>
 8019d8a:	2601      	movs	r6, #1
 8019d8c:	e774      	b.n	8019c78 <WM_Exec+0x10>
 8019d8e:	2001      	movs	r0, #1
 8019d90:	f002 fcd4 	bl	801c73c <GUI__ManageCache>
 8019d94:	e7b1      	b.n	8019cfa <WM_Exec+0x92>
 8019d96:	4630      	mov	r0, r6
 8019d98:	b01f      	add	sp, #124	; 0x7c
 8019d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d9e:	bf00      	nop
 8019da0:	2002c55c 	.word	0x2002c55c
 8019da4:	2002c314 	.word	0x2002c314
 8019da8:	2002c56c 	.word	0x2002c56c
 8019dac:	2002c558 	.word	0x2002c558
 8019db0:	2002c5d8 	.word	0x2002c5d8
 8019db4:	20000114 	.word	0x20000114
 8019db8:	2002c568 	.word	0x2002c568
 8019dbc:	2002c588 	.word	0x2002c588
 8019dc0:	2002c330 	.word	0x2002c330

08019dc4 <WM_Activate>:
 8019dc4:	4b02      	ldr	r3, [pc, #8]	; (8019dd0 <WM_Activate+0xc>)
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	2201      	movs	r2, #1
 8019dca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8019dce:	4770      	bx	lr
 8019dd0:	20000114 	.word	0x20000114

08019dd4 <WM_Deactivate>:
 8019dd4:	4b03      	ldr	r3, [pc, #12]	; (8019de4 <WM_Deactivate+0x10>)
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	2200      	movs	r2, #0
 8019dda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8019dde:	f002 bb4d 	b.w	801c47c <LCD_SetClipRectMax>
 8019de2:	bf00      	nop
 8019de4:	20000114 	.word	0x20000114

08019de8 <WM_DefaultProc>:
 8019de8:	b510      	push	{r4, lr}
 8019dea:	4604      	mov	r4, r0
 8019dec:	6840      	ldr	r0, [r0, #4]
 8019dee:	6823      	ldr	r3, [r4, #0]
 8019df0:	68e1      	ldr	r1, [r4, #12]
 8019df2:	2b17      	cmp	r3, #23
 8019df4:	d00f      	beq.n	8019e16 <WM_DefaultProc+0x2e>
 8019df6:	dc06      	bgt.n	8019e06 <WM_DefaultProc+0x1e>
 8019df8:	2b0e      	cmp	r3, #14
 8019dfa:	d00e      	beq.n	8019e1a <WM_DefaultProc+0x32>
 8019dfc:	2b14      	cmp	r3, #20
 8019dfe:	d114      	bne.n	8019e2a <WM_DefaultProc+0x42>
 8019e00:	f006 f944 	bl	802008c <WM__GetClientRectEx>
 8019e04:	e011      	b.n	8019e2a <WM_DefaultProc+0x42>
 8019e06:	2b22      	cmp	r3, #34	; 0x22
 8019e08:	d00c      	beq.n	8019e24 <WM_DefaultProc+0x3c>
 8019e0a:	2b28      	cmp	r3, #40	; 0x28
 8019e0c:	d10d      	bne.n	8019e2a <WM_DefaultProc+0x42>
 8019e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e12:	f7ff bbcc 	b.w	80195ae <WM_InvalidateWindow>
 8019e16:	60e0      	str	r0, [r4, #12]
 8019e18:	bd10      	pop	{r4, pc}
 8019e1a:	4621      	mov	r1, r4
 8019e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e20:	f005 bfde 	b.w	801fde0 <WM_SendToParent>
 8019e24:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8019e28:	e000      	b.n	8019e2c <WM_DefaultProc+0x44>
 8019e2a:	2300      	movs	r3, #0
 8019e2c:	60e3      	str	r3, [r4, #12]
 8019e2e:	bd10      	pop	{r4, pc}

08019e30 <_cbBackWin>:
 8019e30:	6803      	ldr	r3, [r0, #0]
 8019e32:	2b0e      	cmp	r3, #14
 8019e34:	b510      	push	{r4, lr}
 8019e36:	4604      	mov	r4, r0
 8019e38:	d002      	beq.n	8019e40 <_cbBackWin+0x10>
 8019e3a:	2b0f      	cmp	r3, #15
 8019e3c:	d009      	beq.n	8019e52 <_cbBackWin+0x22>
 8019e3e:	e020      	b.n	8019e82 <_cbBackWin+0x52>
 8019e40:	68c3      	ldr	r3, [r0, #12]
 8019e42:	685a      	ldr	r2, [r3, #4]
 8019e44:	2a01      	cmp	r2, #1
 8019e46:	d121      	bne.n	8019e8c <_cbBackWin+0x5c>
 8019e48:	6818      	ldr	r0, [r3, #0]
 8019e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e4e:	f002 bfeb 	b.w	801ce28 <GUI_StoreKey>
 8019e52:	4a0f      	ldr	r2, [pc, #60]	; (8019e90 <_cbBackWin+0x60>)
 8019e54:	6843      	ldr	r3, [r0, #4]
 8019e56:	6811      	ldr	r1, [r2, #0]
 8019e58:	428b      	cmp	r3, r1
 8019e5a:	d006      	beq.n	8019e6a <_cbBackWin+0x3a>
 8019e5c:	6852      	ldr	r2, [r2, #4]
 8019e5e:	4293      	cmp	r3, r2
 8019e60:	bf14      	ite	ne
 8019e62:	f04f 33ff 	movne.w	r3, #4294967295
 8019e66:	2301      	moveq	r3, #1
 8019e68:	e000      	b.n	8019e6c <_cbBackWin+0x3c>
 8019e6a:	2300      	movs	r3, #0
 8019e6c:	4a09      	ldr	r2, [pc, #36]	; (8019e94 <_cbBackWin+0x64>)
 8019e6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019e72:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8019e76:	4298      	cmp	r0, r3
 8019e78:	d003      	beq.n	8019e82 <_cbBackWin+0x52>
 8019e7a:	f002 ff55 	bl	801cd28 <GUI_SetBkColor>
 8019e7e:	f004 f801 	bl	801de84 <GUI_Clear>
 8019e82:	4620      	mov	r0, r4
 8019e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e88:	f7ff bfae 	b.w	8019de8 <WM_DefaultProc>
 8019e8c:	bd10      	pop	{r4, pc}
 8019e8e:	bf00      	nop
 8019e90:	2002c550 	.word	0x2002c550
 8019e94:	2002c57c 	.word	0x2002c57c

08019e98 <WM_Init>:
 8019e98:	b530      	push	{r4, r5, lr}
 8019e9a:	4b2b      	ldr	r3, [pc, #172]	; (8019f48 <WM_Init+0xb0>)
 8019e9c:	7818      	ldrb	r0, [r3, #0]
 8019e9e:	b085      	sub	sp, #20
 8019ea0:	461d      	mov	r5, r3
 8019ea2:	2800      	cmp	r0, #0
 8019ea4:	d14d      	bne.n	8019f42 <WM_Init+0xaa>
 8019ea6:	4b29      	ldr	r3, [pc, #164]	; (8019f4c <WM_Init+0xb4>)
 8019ea8:	6018      	str	r0, [r3, #0]
 8019eaa:	4b29      	ldr	r3, [pc, #164]	; (8019f50 <WM_Init+0xb8>)
 8019eac:	6018      	str	r0, [r3, #0]
 8019eae:	4b29      	ldr	r3, [pc, #164]	; (8019f54 <WM_Init+0xbc>)
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	6458      	str	r0, [r3, #68]	; 0x44
 8019eb4:	4b28      	ldr	r3, [pc, #160]	; (8019f58 <WM_Init+0xc0>)
 8019eb6:	8018      	strh	r0, [r3, #0]
 8019eb8:	4b28      	ldr	r3, [pc, #160]	; (8019f5c <WM_Init+0xc4>)
 8019eba:	4604      	mov	r4, r0
 8019ebc:	8018      	strh	r0, [r3, #0]
 8019ebe:	4620      	mov	r0, r4
 8019ec0:	f003 feb6 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 8019ec4:	b1c0      	cbz	r0, 8019ef8 <WM_Init+0x60>
 8019ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8019eca:	2302      	movs	r3, #2
 8019ecc:	e88d 000c 	stmia.w	sp, {r2, r3}
 8019ed0:	2000      	movs	r0, #0
 8019ed2:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8019ed6:	4b22      	ldr	r3, [pc, #136]	; (8019f60 <WM_Init+0xc8>)
 8019ed8:	9302      	str	r3, [sp, #8]
 8019eda:	9003      	str	r0, [sp, #12]
 8019edc:	4613      	mov	r3, r2
 8019ede:	4601      	mov	r1, r0
 8019ee0:	f7ff fba6 	bl	8019630 <WM_CreateWindowAsChild>
 8019ee4:	4b1f      	ldr	r3, [pc, #124]	; (8019f64 <WM_Init+0xcc>)
 8019ee6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8019eea:	4b1f      	ldr	r3, [pc, #124]	; (8019f68 <WM_Init+0xd0>)
 8019eec:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8019ef0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8019ef4:	f7ff fb5b 	bl	80195ae <WM_InvalidateWindow>
 8019ef8:	3401      	adds	r4, #1
 8019efa:	2c02      	cmp	r4, #2
 8019efc:	d1df      	bne.n	8019ebe <WM_Init+0x26>
 8019efe:	481b      	ldr	r0, [pc, #108]	; (8019f6c <WM_Init+0xd4>)
 8019f00:	f006 f8d6 	bl	80200b0 <WM__AddCriticalHandle>
 8019f04:	481a      	ldr	r0, [pc, #104]	; (8019f70 <WM_Init+0xd8>)
 8019f06:	f006 f8d3 	bl	80200b0 <WM__AddCriticalHandle>
 8019f0a:	481a      	ldr	r0, [pc, #104]	; (8019f74 <WM_Init+0xdc>)
 8019f0c:	f006 f8d0 	bl	80200b0 <WM__AddCriticalHandle>
 8019f10:	4819      	ldr	r0, [pc, #100]	; (8019f78 <WM_Init+0xe0>)
 8019f12:	f006 f8cd 	bl	80200b0 <WM__AddCriticalHandle>
 8019f16:	4819      	ldr	r0, [pc, #100]	; (8019f7c <WM_Init+0xe4>)
 8019f18:	f006 f8ca 	bl	80200b0 <WM__AddCriticalHandle>
 8019f1c:	4818      	ldr	r0, [pc, #96]	; (8019f80 <WM_Init+0xe8>)
 8019f1e:	f006 f8c7 	bl	80200b0 <WM__AddCriticalHandle>
 8019f22:	4b10      	ldr	r3, [pc, #64]	; (8019f64 <WM_Init+0xcc>)
 8019f24:	6818      	ldr	r0, [r3, #0]
 8019f26:	f7ff fb63 	bl	80195f0 <WM_SelectWindow>
 8019f2a:	f7ff ff4b 	bl	8019dc4 <WM_Activate>
 8019f2e:	2301      	movs	r3, #1
 8019f30:	702b      	strb	r3, [r5, #0]
 8019f32:	4814      	ldr	r0, [pc, #80]	; (8019f84 <WM_Init+0xec>)
 8019f34:	4b14      	ldr	r3, [pc, #80]	; (8019f88 <WM_Init+0xf0>)
 8019f36:	6003      	str	r3, [r0, #0]
 8019f38:	b005      	add	sp, #20
 8019f3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019f3e:	f003 bfb1 	b.w	801dea4 <GUI__RegisterExit>
 8019f42:	b005      	add	sp, #20
 8019f44:	bd30      	pop	{r4, r5, pc}
 8019f46:	bf00      	nop
 8019f48:	2002c33c 	.word	0x2002c33c
 8019f4c:	2002c56c 	.word	0x2002c56c
 8019f50:	2002c330 	.word	0x2002c330
 8019f54:	20000114 	.word	0x20000114
 8019f58:	2002c568 	.word	0x2002c568
 8019f5c:	2002c548 	.word	0x2002c548
 8019f60:	08019e31 	.word	0x08019e31
 8019f64:	2002c550 	.word	0x2002c550
 8019f68:	2002c57c 	.word	0x2002c57c
 8019f6c:	2002c6bc 	.word	0x2002c6bc
 8019f70:	2002c6ac 	.word	0x2002c6ac
 8019f74:	2002c69c 	.word	0x2002c69c
 8019f78:	2002c6c4 	.word	0x2002c6c4
 8019f7c:	2002c6b4 	.word	0x2002c6b4
 8019f80:	2002c6a4 	.word	0x2002c6a4
 8019f84:	2002c334 	.word	0x2002c334
 8019f88:	08018c81 	.word	0x08018c81

08019f8c <_CreateStaticDevice>:
 8019f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f90:	b087      	sub	sp, #28
 8019f92:	4604      	mov	r4, r0
 8019f94:	f004 fcae 	bl	801e8f4 <GUI_ALLOC_LockH>
 8019f98:	af06      	add	r7, sp, #24
 8019f9a:	f8b0 8000 	ldrh.w	r8, [r0]
 8019f9e:	8886      	ldrh	r6, [r0, #4]
 8019fa0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 8019fa4:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 8019fa8:	f847 0d04 	str.w	r0, [r7, #-4]!
 8019fac:	fa0f f888 	sxth.w	r8, r8
 8019fb0:	b236      	sxth	r6, r6
 8019fb2:	ebc8 0606 	rsb	r6, r8, r6
 8019fb6:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8019fba:	3601      	adds	r6, #1
 8019fbc:	4638      	mov	r0, r7
 8019fbe:	fa0f f989 	sxth.w	r9, r9
 8019fc2:	fa0f f58b 	sxth.w	r5, fp
 8019fc6:	f004 fca3 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019fca:	ebc9 0505 	rsb	r5, r9, r5
 8019fce:	2e00      	cmp	r6, #0
 8019fd0:	f105 0501 	add.w	r5, r5, #1
 8019fd4:	dd4d      	ble.n	801a072 <_CreateStaticDevice+0xe6>
 8019fd6:	2d00      	cmp	r5, #0
 8019fd8:	dd4b      	ble.n	801a072 <_CreateStaticDevice+0xe6>
 8019fda:	f1ba 0f00 	cmp.w	sl, #0
 8019fde:	d04a      	beq.n	801a076 <_CreateStaticDevice+0xea>
 8019fe0:	4650      	mov	r0, sl
 8019fe2:	f004 fc87 	bl	801e8f4 <GUI_ALLOC_LockH>
 8019fe6:	ab06      	add	r3, sp, #24
 8019fe8:	8886      	ldrh	r6, [r0, #4]
 8019fea:	f843 0d08 	str.w	r0, [r3, #-8]!
 8019fee:	88c5      	ldrh	r5, [r0, #6]
 8019ff0:	b236      	sxth	r6, r6
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	f004 fc8c 	bl	801e910 <GUI_ALLOC_UnlockH>
 8019ff8:	4546      	cmp	r6, r8
 8019ffa:	d102      	bne.n	801a002 <_CreateStaticDevice+0x76>
 8019ffc:	b22d      	sxth	r5, r5
 8019ffe:	454d      	cmp	r5, r9
 801a000:	d032      	beq.n	801a068 <_CreateStaticDevice+0xdc>
 801a002:	4650      	mov	r0, sl
 801a004:	4641      	mov	r1, r8
 801a006:	464a      	mov	r2, r9
 801a008:	f000 f886 	bl	801a118 <GUI_MEMDEV_SetOrg>
 801a00c:	e02c      	b.n	801a068 <_CreateStaticDevice+0xdc>
 801a00e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a014:	6283      	str	r3, [r0, #40]	; 0x28
 801a016:	4638      	mov	r0, r7
 801a018:	f004 fc7a 	bl	801e910 <GUI_ALLOC_UnlockH>
 801a01c:	4640      	mov	r0, r8
 801a01e:	f000 ff93 	bl	801af48 <GUI_MEMDEV_Select>
 801a022:	4607      	mov	r7, r0
 801a024:	4650      	mov	r0, sl
 801a026:	f002 fe83 	bl	801cd30 <GUI__AlphaPreserveTrans>
 801a02a:	4640      	mov	r0, r8
 801a02c:	f000 f8b4 	bl	801a198 <GUI_MEMDEV_GetDataPtr>
 801a030:	4b2d      	ldr	r3, [pc, #180]	; (801a0e8 <_CreateStaticDevice+0x15c>)
 801a032:	fb05 f206 	mul.w	r2, r5, r6
 801a036:	7819      	ldrb	r1, [r3, #0]
 801a038:	4d2c      	ldr	r5, [pc, #176]	; (801a0ec <_CreateStaticDevice+0x160>)
 801a03a:	4e2d      	ldr	r6, [pc, #180]	; (801a0f0 <_CreateStaticDevice+0x164>)
 801a03c:	0092      	lsls	r2, r2, #2
 801a03e:	f002 fadf 	bl	801c600 <GUI__memset>
 801a042:	4620      	mov	r0, r4
 801a044:	f8d5 8000 	ldr.w	r8, [r5]
 801a048:	6034      	str	r4, [r6, #0]
 801a04a:	f006 f803 	bl	8020054 <WM_GetWindowOrgX>
 801a04e:	6028      	str	r0, [r5, #0]
 801a050:	4620      	mov	r0, r4
 801a052:	f7ff fd6b 	bl	8019b2c <WM__Paint1>
 801a056:	2000      	movs	r0, #0
 801a058:	f8c5 8000 	str.w	r8, [r5]
 801a05c:	6030      	str	r0, [r6, #0]
 801a05e:	f002 fe67 	bl	801cd30 <GUI__AlphaPreserveTrans>
 801a062:	4638      	mov	r0, r7
 801a064:	f000 ff70 	bl	801af48 <GUI_MEMDEV_Select>
 801a068:	4620      	mov	r0, r4
 801a06a:	f004 fc39 	bl	801e8e0 <GUI_ALLOC_h2p>
 801a06e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801a070:	e037      	b.n	801a0e2 <_CreateStaticDevice+0x156>
 801a072:	2000      	movs	r0, #0
 801a074:	e035      	b.n	801a0e2 <_CreateStaticDevice+0x156>
 801a076:	f005 fffd 	bl	8020074 <WM_GetDesktopWindow>
 801a07a:	4284      	cmp	r4, r0
 801a07c:	d112      	bne.n	801a0a4 <_CreateStaticDevice+0x118>
 801a07e:	f001 fe97 	bl	801bdb0 <LCD_GetXSize>
 801a082:	4682      	mov	sl, r0
 801a084:	f001 fe9c 	bl	801bdc0 <LCD_GetYSize>
 801a088:	4556      	cmp	r6, sl
 801a08a:	dc02      	bgt.n	801a092 <_CreateStaticDevice+0x106>
 801a08c:	4285      	cmp	r5, r0
 801a08e:	dd09      	ble.n	801a0a4 <_CreateStaticDevice+0x118>
 801a090:	e000      	b.n	801a094 <_CreateStaticDevice+0x108>
 801a092:	4656      	mov	r6, sl
 801a094:	4285      	cmp	r5, r0
 801a096:	bfa8      	it	ge
 801a098:	4605      	movge	r5, r0
 801a09a:	4631      	mov	r1, r6
 801a09c:	4620      	mov	r0, r4
 801a09e:	462a      	mov	r2, r5
 801a0a0:	f005 fe7a 	bl	801fd98 <WM_SetSize>
 801a0a4:	4b13      	ldr	r3, [pc, #76]	; (801a0f4 <_CreateStaticDevice+0x168>)
 801a0a6:	9301      	str	r3, [sp, #4]
 801a0a8:	f04f 0a01 	mov.w	sl, #1
 801a0ac:	4b12      	ldr	r3, [pc, #72]	; (801a0f8 <_CreateStaticDevice+0x16c>)
 801a0ae:	9302      	str	r3, [sp, #8]
 801a0b0:	4640      	mov	r0, r8
 801a0b2:	4649      	mov	r1, r9
 801a0b4:	4632      	mov	r2, r6
 801a0b6:	462b      	mov	r3, r5
 801a0b8:	f8cd a000 	str.w	sl, [sp]
 801a0bc:	f000 fe4e 	bl	801ad5c <GUI_MEMDEV__CreateFixed>
 801a0c0:	4680      	mov	r8, r0
 801a0c2:	4620      	mov	r0, r4
 801a0c4:	f004 fc16 	bl	801e8f4 <GUI_ALLOC_LockH>
 801a0c8:	9005      	str	r0, [sp, #20]
 801a0ca:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 801a0ce:	f1b8 0f00 	cmp.w	r8, #0
 801a0d2:	d19c      	bne.n	801a00e <_CreateStaticDevice+0x82>
 801a0d4:	4638      	mov	r0, r7
 801a0d6:	f004 fc1b 	bl	801e910 <GUI_ALLOC_UnlockH>
 801a0da:	4620      	mov	r0, r4
 801a0dc:	f7ff fd26 	bl	8019b2c <WM__Paint1>
 801a0e0:	4640      	mov	r0, r8
 801a0e2:	b007      	add	sp, #28
 801a0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0e8:	200000fc 	.word	0x200000fc
 801a0ec:	2002c5a4 	.word	0x2002c5a4
 801a0f0:	2002c594 	.word	0x2002c594
 801a0f4:	0811e4dc 	.word	0x0811e4dc
 801a0f8:	0812e064 	.word	0x0812e064

0801a0fc <GUI_MEMDEV_Paint1Static>:
 801a0fc:	b538      	push	{r3, r4, r5, lr}
 801a0fe:	4605      	mov	r5, r0
 801a100:	2405      	movs	r4, #5
 801a102:	4628      	mov	r0, r5
 801a104:	f7ff ff42 	bl	8019f8c <_CreateStaticDevice>
 801a108:	b910      	cbnz	r0, 801a110 <GUI_MEMDEV_Paint1Static+0x14>
 801a10a:	3c01      	subs	r4, #1
 801a10c:	d1f9      	bne.n	801a102 <GUI_MEMDEV_Paint1Static+0x6>
 801a10e:	bd38      	pop	{r3, r4, r5, pc}
 801a110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a114:	f006 bce2 	b.w	8020adc <GUI_MEMDEV_Write>

0801a118 <GUI_MEMDEV_SetOrg>:
 801a118:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a11a:	460d      	mov	r5, r1
 801a11c:	4614      	mov	r4, r2
 801a11e:	b918      	cbnz	r0, 801a128 <GUI_MEMDEV_SetOrg+0x10>
 801a120:	4b11      	ldr	r3, [pc, #68]	; (801a168 <GUI_MEMDEV_SetOrg+0x50>)
 801a122:	681b      	ldr	r3, [r3, #0]
 801a124:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801a126:	b1e8      	cbz	r0, 801a164 <GUI_MEMDEV_SetOrg+0x4c>
 801a128:	f004 fbe4 	bl	801e8f4 <GUI_ALLOC_LockH>
 801a12c:	b2a4      	uxth	r4, r4
 801a12e:	b2ad      	uxth	r5, r5
 801a130:	80c4      	strh	r4, [r0, #6]
 801a132:	8085      	strh	r5, [r0, #4]
 801a134:	9000      	str	r0, [sp, #0]
 801a136:	f002 f9a1 	bl	801c47c <LCD_SetClipRectMax>
 801a13a:	9b00      	ldr	r3, [sp, #0]
 801a13c:	6958      	ldr	r0, [r3, #20]
 801a13e:	b170      	cbz	r0, 801a15e <GUI_MEMDEV_SetOrg+0x46>
 801a140:	f004 fbd8 	bl	801e8f4 <GUI_ALLOC_LockH>
 801a144:	9b00      	ldr	r3, [sp, #0]
 801a146:	9001      	str	r0, [sp, #4]
 801a148:	891a      	ldrh	r2, [r3, #8]
 801a14a:	895b      	ldrh	r3, [r3, #10]
 801a14c:	8082      	strh	r2, [r0, #4]
 801a14e:	80c3      	strh	r3, [r0, #6]
 801a150:	b112      	cbz	r2, 801a158 <GUI_MEMDEV_SetOrg+0x40>
 801a152:	b10b      	cbz	r3, 801a158 <GUI_MEMDEV_SetOrg+0x40>
 801a154:	8005      	strh	r5, [r0, #0]
 801a156:	8044      	strh	r4, [r0, #2]
 801a158:	a801      	add	r0, sp, #4
 801a15a:	f004 fbd9 	bl	801e910 <GUI_ALLOC_UnlockH>
 801a15e:	4668      	mov	r0, sp
 801a160:	f004 fbd6 	bl	801e910 <GUI_ALLOC_UnlockH>
 801a164:	b003      	add	sp, #12
 801a166:	bd30      	pop	{r4, r5, pc}
 801a168:	20000114 	.word	0x20000114

0801a16c <GUI_MEMDEV_GetYSize>:
 801a16c:	b513      	push	{r0, r1, r4, lr}
 801a16e:	b920      	cbnz	r0, 801a17a <GUI_MEMDEV_GetYSize+0xe>
 801a170:	4b08      	ldr	r3, [pc, #32]	; (801a194 <GUI_MEMDEV_GetYSize+0x28>)
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801a176:	4604      	mov	r4, r0
 801a178:	b148      	cbz	r0, 801a18e <GUI_MEMDEV_GetYSize+0x22>
 801a17a:	f004 fbbb 	bl	801e8f4 <GUI_ALLOC_LockH>
 801a17e:	ab02      	add	r3, sp, #8
 801a180:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 801a184:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a188:	4618      	mov	r0, r3
 801a18a:	f004 fbc1 	bl	801e910 <GUI_ALLOC_UnlockH>
 801a18e:	4620      	mov	r0, r4
 801a190:	b002      	add	sp, #8
 801a192:	bd10      	pop	{r4, pc}
 801a194:	20000114 	.word	0x20000114

0801a198 <GUI_MEMDEV_GetDataPtr>:
 801a198:	b513      	push	{r0, r1, r4, lr}
 801a19a:	b150      	cbz	r0, 801a1b2 <GUI_MEMDEV_GetDataPtr+0x1a>
 801a19c:	f004 fbaa 	bl	801e8f4 <GUI_ALLOC_LockH>
 801a1a0:	4604      	mov	r4, r0
 801a1a2:	a802      	add	r0, sp, #8
 801a1a4:	f840 4d04 	str.w	r4, [r0, #-4]!
 801a1a8:	f004 fbb2 	bl	801e910 <GUI_ALLOC_UnlockH>
 801a1ac:	f104 0018 	add.w	r0, r4, #24
 801a1b0:	e7ff      	b.n	801a1b2 <GUI_MEMDEV_GetDataPtr+0x1a>
 801a1b2:	b002      	add	sp, #8
 801a1b4:	bd10      	pop	{r4, pc}
	...

0801a1b8 <GUI_MEMDEV_Draw>:
 801a1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1bc:	461e      	mov	r6, r3
 801a1be:	b089      	sub	sp, #36	; 0x24
 801a1c0:	4b4e      	ldr	r3, [pc, #312]	; (801a2fc <GUI_MEMDEV_Draw+0x144>)
 801a1c2:	9204      	str	r2, [sp, #16]
 801a1c4:	681a      	ldr	r2, [r3, #0]
 801a1c6:	9103      	str	r1, [sp, #12]
 801a1c8:	7c54      	ldrb	r4, [r2, #17]
 801a1ca:	4a4d      	ldr	r2, [pc, #308]	; (801a300 <GUI_MEMDEV_Draw+0x148>)
 801a1cc:	5712      	ldrsb	r2, [r2, r4]
 801a1ce:	2a01      	cmp	r2, #1
 801a1d0:	4605      	mov	r5, r0
 801a1d2:	469b      	mov	fp, r3
 801a1d4:	4620      	mov	r0, r4
 801a1d6:	dd06      	ble.n	801a1e6 <GUI_MEMDEV_Draw+0x2e>
 801a1d8:	f001 fdce 	bl	801bd78 <LCD_GetXSizeEx>
 801a1dc:	4607      	mov	r7, r0
 801a1de:	4620      	mov	r0, r4
 801a1e0:	f001 fdcd 	bl	801bd7e <LCD_GetYSizeEx>
 801a1e4:	e005      	b.n	801a1f2 <GUI_MEMDEV_Draw+0x3a>
 801a1e6:	f001 fdcd 	bl	801bd84 <LCD_GetVXSizeEx>
 801a1ea:	4607      	mov	r7, r0
 801a1ec:	4620      	mov	r0, r4
 801a1ee:	f001 fdcc 	bl	801bd8a <LCD_GetVYSizeEx>
 801a1f2:	4604      	mov	r4, r0
 801a1f4:	b325      	cbz	r5, 801a240 <GUI_MEMDEV_Draw+0x88>
 801a1f6:	a806      	add	r0, sp, #24
 801a1f8:	a907      	add	r1, sp, #28
 801a1fa:	f002 fe8d 	bl	801cf18 <GUI_GetOrg>
 801a1fe:	9b06      	ldr	r3, [sp, #24]
 801a200:	f9b5 a000 	ldrsh.w	sl, [r5]
 801a204:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801a208:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 801a20c:	441f      	add	r7, r3
 801a20e:	9b07      	ldr	r3, [sp, #28]
 801a210:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a214:	3f01      	subs	r7, #1
 801a216:	4297      	cmp	r7, r2
 801a218:	bfd4      	ite	le
 801a21a:	ebca 0707 	rsble	r7, sl, r7
 801a21e:	ebca 0702 	rsbgt	r7, sl, r2
 801a222:	441c      	add	r4, r3
 801a224:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801a228:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 801a22c:	3c01      	subs	r4, #1
 801a22e:	4294      	cmp	r4, r2
 801a230:	bfd4      	ite	le
 801a232:	ebc8 0404 	rsble	r4, r8, r4
 801a236:	ebc8 0402 	rsbgt	r4, r8, r2
 801a23a:	3701      	adds	r7, #1
 801a23c:	3401      	adds	r4, #1
 801a23e:	e001      	b.n	801a244 <GUI_MEMDEV_Draw+0x8c>
 801a240:	46a8      	mov	r8, r5
 801a242:	46aa      	mov	sl, r5
 801a244:	b906      	cbnz	r6, 801a248 <GUI_MEMDEV_Draw+0x90>
 801a246:	4266      	negs	r6, r4
 801a248:	2f00      	cmp	r7, #0
 801a24a:	dd52      	ble.n	801a2f2 <GUI_MEMDEV_Draw+0x13a>
 801a24c:	2c00      	cmp	r4, #0
 801a24e:	dd50      	ble.n	801a2f2 <GUI_MEMDEV_Draw+0x13a>
 801a250:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a252:	9300      	str	r3, [sp, #0]
 801a254:	4650      	mov	r0, sl
 801a256:	4641      	mov	r1, r8
 801a258:	463a      	mov	r2, r7
 801a25a:	4633      	mov	r3, r6
 801a25c:	f000 fe38 	bl	801aed0 <GUI_MEMDEV_CreateEx>
 801a260:	4605      	mov	r5, r0
 801a262:	b920      	cbnz	r0, 801a26e <GUI_MEMDEV_Draw+0xb6>
 801a264:	9804      	ldr	r0, [sp, #16]
 801a266:	9b03      	ldr	r3, [sp, #12]
 801a268:	4798      	blx	r3
 801a26a:	2001      	movs	r0, #1
 801a26c:	e042      	b.n	801a2f4 <GUI_MEMDEV_Draw+0x13c>
 801a26e:	f7ff ff7d 	bl	801a16c <GUI_MEMDEV_GetYSize>
 801a272:	42a0      	cmp	r0, r4
 801a274:	4606      	mov	r6, r0
 801a276:	d006      	beq.n	801a286 <GUI_MEMDEV_Draw+0xce>
 801a278:	f8db 3000 	ldr.w	r3, [fp]
 801a27c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801a27e:	b110      	cbz	r0, 801a286 <GUI_MEMDEV_Draw+0xce>
 801a280:	2132      	movs	r1, #50	; 0x32
 801a282:	f005 fd06 	bl	801fc92 <WM__SendMessageNoPara>
 801a286:	4628      	mov	r0, r5
 801a288:	f000 fe5e 	bl	801af48 <GUI_MEMDEV_Select>
 801a28c:	4273      	negs	r3, r6
 801a28e:	9305      	str	r3, [sp, #20]
 801a290:	46a1      	mov	r9, r4
 801a292:	2700      	movs	r7, #0
 801a294:	45b1      	cmp	r9, r6
 801a296:	da03      	bge.n	801a2a0 <GUI_MEMDEV_Draw+0xe8>
 801a298:	4628      	mov	r0, r5
 801a29a:	4649      	mov	r1, r9
 801a29c:	f006 fd1e 	bl	8020cdc <GUI_MEMDEV_ReduceYSize>
 801a2a0:	b147      	cbz	r7, 801a2b4 <GUI_MEMDEV_Draw+0xfc>
 801a2a2:	4628      	mov	r0, r5
 801a2a4:	4651      	mov	r1, sl
 801a2a6:	eb07 0208 	add.w	r2, r7, r8
 801a2aa:	f7ff ff35 	bl	801a118 <GUI_MEMDEV_SetOrg>
 801a2ae:	4628      	mov	r0, r5
 801a2b0:	f006 fd2a 	bl	8020d08 <GUI_MEMDEV_Clear>
 801a2b4:	9b03      	ldr	r3, [sp, #12]
 801a2b6:	9804      	ldr	r0, [sp, #16]
 801a2b8:	4798      	blx	r3
 801a2ba:	4b12      	ldr	r3, [pc, #72]	; (801a304 <GUI_MEMDEV_Draw+0x14c>)
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	b10b      	cbz	r3, 801a2c4 <GUI_MEMDEV_Draw+0x10c>
 801a2c0:	2000      	movs	r0, #0
 801a2c2:	4798      	blx	r3
 801a2c4:	4628      	mov	r0, r5
 801a2c6:	f000 feb7 	bl	801b038 <GUI_MEMDEV_CopyToLCD>
 801a2ca:	4437      	add	r7, r6
 801a2cc:	9b05      	ldr	r3, [sp, #20]
 801a2ce:	42a7      	cmp	r7, r4
 801a2d0:	4499      	add	r9, r3
 801a2d2:	dbdf      	blt.n	801a294 <GUI_MEMDEV_Draw+0xdc>
 801a2d4:	4628      	mov	r0, r5
 801a2d6:	f000 fdd9 	bl	801ae8c <GUI_MEMDEV_Delete>
 801a2da:	2000      	movs	r0, #0
 801a2dc:	f000 fe34 	bl	801af48 <GUI_MEMDEV_Select>
 801a2e0:	42a6      	cmp	r6, r4
 801a2e2:	d006      	beq.n	801a2f2 <GUI_MEMDEV_Draw+0x13a>
 801a2e4:	f8db 3000 	ldr.w	r3, [fp]
 801a2e8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801a2ea:	b110      	cbz	r0, 801a2f2 <GUI_MEMDEV_Draw+0x13a>
 801a2ec:	2133      	movs	r1, #51	; 0x33
 801a2ee:	f005 fcd0 	bl	801fc92 <WM__SendMessageNoPara>
 801a2f2:	2000      	movs	r0, #0
 801a2f4:	b009      	add	sp, #36	; 0x24
 801a2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2fa:	bf00      	nop
 801a2fc:	20000114 	.word	0x20000114
 801a300:	2002c59c 	.word	0x2002c59c
 801a304:	2002c340 	.word	0x2002c340

0801a308 <_GetDevData>:
 801a308:	4802      	ldr	r0, [pc, #8]	; (801a314 <_GetDevData+0xc>)
 801a30a:	2901      	cmp	r1, #1
 801a30c:	bf18      	it	ne
 801a30e:	2000      	movne	r0, #0
 801a310:	4770      	bx	lr
 801a312:	bf00      	nop
 801a314:	0811e4dc 	.word	0x0811e4dc

0801a318 <_GetDevFunc>:
 801a318:	4802      	ldr	r0, [pc, #8]	; (801a324 <_GetDevFunc+0xc>)
 801a31a:	2916      	cmp	r1, #22
 801a31c:	bf18      	it	ne
 801a31e:	2000      	movne	r0, #0
 801a320:	4770      	bx	lr
 801a322:	bf00      	nop
 801a324:	080208ed 	.word	0x080208ed

0801a328 <_GetDevProp>:
 801a328:	2908      	cmp	r1, #8
 801a32a:	bf0c      	ite	eq
 801a32c:	2020      	moveq	r0, #32
 801a32e:	2000      	movne	r0, #0
 801a330:	4770      	bx	lr

0801a332 <_SetOrg>:
 801a332:	b508      	push	{r3, lr}
 801a334:	6800      	ldr	r0, [r0, #0]
 801a336:	68c3      	ldr	r3, [r0, #12]
 801a338:	6a1b      	ldr	r3, [r3, #32]
 801a33a:	4798      	blx	r3
 801a33c:	bd08      	pop	{r3, pc}

0801a33e <_GetRect>:
 801a33e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a340:	6880      	ldr	r0, [r0, #8]
 801a342:	460c      	mov	r4, r1
 801a344:	f004 fad6 	bl	801e8f4 <GUI_ALLOC_LockH>
 801a348:	4603      	mov	r3, r0
 801a34a:	a802      	add	r0, sp, #8
 801a34c:	8899      	ldrh	r1, [r3, #4]
 801a34e:	88da      	ldrh	r2, [r3, #6]
 801a350:	891d      	ldrh	r5, [r3, #8]
 801a352:	f840 3d04 	str.w	r3, [r0, #-4]!
 801a356:	895b      	ldrh	r3, [r3, #10]
 801a358:	8021      	strh	r1, [r4, #0]
 801a35a:	8062      	strh	r2, [r4, #2]
 801a35c:	4429      	add	r1, r5
 801a35e:	441a      	add	r2, r3
 801a360:	3901      	subs	r1, #1
 801a362:	3a01      	subs	r2, #1
 801a364:	80a1      	strh	r1, [r4, #4]
 801a366:	80e2      	strh	r2, [r4, #6]
 801a368:	f004 fad2 	bl	801e910 <GUI_ALLOC_UnlockH>
 801a36c:	b003      	add	sp, #12
 801a36e:	bd30      	pop	{r4, r5, pc}

0801a370 <_XY2PTR>:
 801a370:	4b0e      	ldr	r3, [pc, #56]	; (801a3ac <_XY2PTR+0x3c>)
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a376:	4605      	mov	r5, r0
 801a378:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801a37a:	460e      	mov	r6, r1
 801a37c:	f004 faba 	bl	801e8f4 <GUI_ALLOC_LockH>
 801a380:	4603      	mov	r3, r0
 801a382:	a802      	add	r0, sp, #8
 801a384:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 801a388:	f840 3d04 	str.w	r3, [r0, #-4]!
 801a38c:	f103 0118 	add.w	r1, r3, #24
 801a390:	1b36      	subs	r6, r6, r4
 801a392:	68dc      	ldr	r4, [r3, #12]
 801a394:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a398:	fb04 1406 	mla	r4, r4, r6, r1
 801a39c:	1aed      	subs	r5, r5, r3
 801a39e:	f004 fab7 	bl	801e910 <GUI_ALLOC_UnlockH>
 801a3a2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 801a3a6:	4620      	mov	r0, r4
 801a3a8:	b002      	add	sp, #8
 801a3aa:	bd70      	pop	{r4, r5, r6, pc}
 801a3ac:	20000114 	.word	0x20000114

0801a3b0 <_GetPixelIndex>:
 801a3b0:	b508      	push	{r3, lr}
 801a3b2:	4608      	mov	r0, r1
 801a3b4:	4611      	mov	r1, r2
 801a3b6:	f7ff ffdb 	bl	801a370 <_XY2PTR>
 801a3ba:	6800      	ldr	r0, [r0, #0]
 801a3bc:	bd08      	pop	{r3, pc}
	...

0801a3c0 <_XorPixel>:
 801a3c0:	4b15      	ldr	r3, [pc, #84]	; (801a418 <_XorPixel+0x58>)
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a3c6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801a3c8:	4615      	mov	r5, r2
 801a3ca:	460e      	mov	r6, r1
 801a3cc:	f004 fa92 	bl	801e8f4 <GUI_ALLOC_LockH>
 801a3d0:	4629      	mov	r1, r5
 801a3d2:	9000      	str	r0, [sp, #0]
 801a3d4:	4630      	mov	r0, r6
 801a3d6:	f7ff ffcb 	bl	801a370 <_XY2PTR>
 801a3da:	9b00      	ldr	r3, [sp, #0]
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	691b      	ldr	r3, [r3, #16]
 801a3e0:	4604      	mov	r4, r0
 801a3e2:	689b      	ldr	r3, [r3, #8]
 801a3e4:	4798      	blx	r3
 801a3e6:	6823      	ldr	r3, [r4, #0]
 801a3e8:	4058      	eors	r0, r3
 801a3ea:	9b00      	ldr	r3, [sp, #0]
 801a3ec:	6020      	str	r0, [r4, #0]
 801a3ee:	6958      	ldr	r0, [r3, #20]
 801a3f0:	b160      	cbz	r0, 801a40c <_XorPixel+0x4c>
 801a3f2:	f004 fa7f 	bl	801e8f4 <GUI_ALLOC_LockH>
 801a3f6:	ac02      	add	r4, sp, #8
 801a3f8:	6883      	ldr	r3, [r0, #8]
 801a3fa:	f844 0d04 	str.w	r0, [r4, #-4]!
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	4631      	mov	r1, r6
 801a402:	462a      	mov	r2, r5
 801a404:	4798      	blx	r3
 801a406:	4620      	mov	r0, r4
 801a408:	f004 fa82 	bl	801e910 <GUI_ALLOC_UnlockH>
 801a40c:	4668      	mov	r0, sp
 801a40e:	f004 fa7f 	bl	801e910 <GUI_ALLOC_UnlockH>
 801a412:	b002      	add	sp, #8
 801a414:	bd70      	pop	{r4, r5, r6, pc}
 801a416:	bf00      	nop
 801a418:	20000114 	.word	0x20000114

0801a41c <_SetPixelIndex>:
 801a41c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a41e:	461c      	mov	r4, r3
 801a420:	4b10      	ldr	r3, [pc, #64]	; (801a464 <_SetPixelIndex+0x48>)
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801a426:	460e      	mov	r6, r1
 801a428:	4615      	mov	r5, r2
 801a42a:	f004 fa63 	bl	801e8f4 <GUI_ALLOC_LockH>
 801a42e:	4629      	mov	r1, r5
 801a430:	9000      	str	r0, [sp, #0]
 801a432:	4630      	mov	r0, r6
 801a434:	f7ff ff9c 	bl	801a370 <_XY2PTR>
 801a438:	9b00      	ldr	r3, [sp, #0]
 801a43a:	6004      	str	r4, [r0, #0]
 801a43c:	6958      	ldr	r0, [r3, #20]
 801a43e:	b160      	cbz	r0, 801a45a <_SetPixelIndex+0x3e>
 801a440:	f004 fa58 	bl	801e8f4 <GUI_ALLOC_LockH>
 801a444:	ac02      	add	r4, sp, #8
 801a446:	6883      	ldr	r3, [r0, #8]
 801a448:	f844 0d04 	str.w	r0, [r4, #-4]!
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	4631      	mov	r1, r6
 801a450:	462a      	mov	r2, r5
 801a452:	4798      	blx	r3
 801a454:	4620      	mov	r0, r4
 801a456:	f004 fa5b 	bl	801e910 <GUI_ALLOC_UnlockH>
 801a45a:	4668      	mov	r0, sp
 801a45c:	f004 fa58 	bl	801e910 <GUI_ALLOC_UnlockH>
 801a460:	b002      	add	sp, #8
 801a462:	bd70      	pop	{r4, r5, r6, pc}
 801a464:	20000114 	.word	0x20000114

0801a468 <_DrawVLine>:
 801a468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a46c:	4d2c      	ldr	r5, [pc, #176]	; (801a520 <_DrawVLine+0xb8>)
 801a46e:	461e      	mov	r6, r3
 801a470:	682b      	ldr	r3, [r5, #0]
 801a472:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801a474:	460f      	mov	r7, r1
 801a476:	4614      	mov	r4, r2
 801a478:	f004 fa3c 	bl	801e8f4 <GUI_ALLOC_LockH>
 801a47c:	9000      	str	r0, [sp, #0]
 801a47e:	6940      	ldr	r0, [r0, #20]
 801a480:	46a9      	mov	r9, r5
 801a482:	b108      	cbz	r0, 801a488 <_DrawVLine+0x20>
 801a484:	f004 fa36 	bl	801e8f4 <GUI_ALLOC_LockH>
 801a488:	9001      	str	r0, [sp, #4]
 801a48a:	4621      	mov	r1, r4
 801a48c:	4638      	mov	r0, r7
 801a48e:	f7ff ff6f 	bl	801a370 <_XY2PTR>
 801a492:	f8d9 2000 	ldr.w	r2, [r9]
 801a496:	9b00      	ldr	r3, [sp, #0]
 801a498:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 801a49a:	7c12      	ldrb	r2, [r2, #16]
 801a49c:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801a4a0:	f8d1 9000 	ldr.w	r9, [r1]
 801a4a4:	07d2      	lsls	r2, r2, #31
 801a4a6:	4605      	mov	r5, r0
 801a4a8:	d51f      	bpl.n	801a4ea <_DrawVLine+0x82>
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	691b      	ldr	r3, [r3, #16]
 801a4ae:	689b      	ldr	r3, [r3, #8]
 801a4b0:	4798      	blx	r3
 801a4b2:	4680      	mov	r8, r0
 801a4b4:	9801      	ldr	r0, [sp, #4]
 801a4b6:	b128      	cbz	r0, 801a4c4 <_DrawVLine+0x5c>
 801a4b8:	6882      	ldr	r2, [r0, #8]
 801a4ba:	4639      	mov	r1, r7
 801a4bc:	f8d2 c000 	ldr.w	ip, [r2]
 801a4c0:	4622      	mov	r2, r4
 801a4c2:	47e0      	blx	ip
 801a4c4:	682b      	ldr	r3, [r5, #0]
 801a4c6:	ea83 0308 	eor.w	r3, r3, r8
 801a4ca:	602b      	str	r3, [r5, #0]
 801a4cc:	9b00      	ldr	r3, [sp, #0]
 801a4ce:	3401      	adds	r4, #1
 801a4d0:	68db      	ldr	r3, [r3, #12]
 801a4d2:	42b4      	cmp	r4, r6
 801a4d4:	441d      	add	r5, r3
 801a4d6:	dded      	ble.n	801a4b4 <_DrawVLine+0x4c>
 801a4d8:	4668      	mov	r0, sp
 801a4da:	f004 fa19 	bl	801e910 <GUI_ALLOC_UnlockH>
 801a4de:	9b01      	ldr	r3, [sp, #4]
 801a4e0:	b1d3      	cbz	r3, 801a518 <_DrawVLine+0xb0>
 801a4e2:	a801      	add	r0, sp, #4
 801a4e4:	f004 fa14 	bl	801e910 <GUI_ALLOC_UnlockH>
 801a4e8:	e016      	b.n	801a518 <_DrawVLine+0xb0>
 801a4ea:	9b01      	ldr	r3, [sp, #4]
 801a4ec:	b163      	cbz	r3, 801a508 <_DrawVLine+0xa0>
 801a4ee:	9801      	ldr	r0, [sp, #4]
 801a4f0:	6883      	ldr	r3, [r0, #8]
 801a4f2:	4622      	mov	r2, r4
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	4639      	mov	r1, r7
 801a4f8:	3401      	adds	r4, #1
 801a4fa:	4798      	blx	r3
 801a4fc:	42b4      	cmp	r4, r6
 801a4fe:	f8c5 9000 	str.w	r9, [r5]
 801a502:	4445      	add	r5, r8
 801a504:	ddf3      	ble.n	801a4ee <_DrawVLine+0x86>
 801a506:	e7e7      	b.n	801a4d8 <_DrawVLine+0x70>
 801a508:	1b34      	subs	r4, r6, r4
 801a50a:	3401      	adds	r4, #1
 801a50c:	3c01      	subs	r4, #1
 801a50e:	f8c5 9000 	str.w	r9, [r5]
 801a512:	4445      	add	r5, r8
 801a514:	d1fa      	bne.n	801a50c <_DrawVLine+0xa4>
 801a516:	e7df      	b.n	801a4d8 <_DrawVLine+0x70>
 801a518:	b003      	add	sp, #12
 801a51a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a51e:	bf00      	nop
 801a520:	20000114 	.word	0x20000114

0801a524 <_FillRect>:
 801a524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a528:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801a5d8 <_FillRect+0xb4>
 801a52c:	4614      	mov	r4, r2
 801a52e:	f8db 2000 	ldr.w	r2, [fp]
 801a532:	b085      	sub	sp, #20
 801a534:	6e10      	ldr	r0, [r2, #96]	; 0x60
 801a536:	460f      	mov	r7, r1
 801a538:	461d      	mov	r5, r3
 801a53a:	f004 f9db 	bl	801e8f4 <GUI_ALLOC_LockH>
 801a53e:	4621      	mov	r1, r4
 801a540:	9002      	str	r0, [sp, #8]
 801a542:	4638      	mov	r0, r7
 801a544:	f7ff ff14 	bl	801a370 <_XY2PTR>
 801a548:	9a02      	ldr	r2, [sp, #8]
 801a54a:	f8db 3000 	ldr.w	r3, [fp]
 801a54e:	f8d2 900c 	ldr.w	r9, [r2, #12]
 801a552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a554:	4606      	mov	r6, r0
 801a556:	6950      	ldr	r0, [r2, #20]
 801a558:	f8d3 a000 	ldr.w	sl, [r3]
 801a55c:	1bed      	subs	r5, r5, r7
 801a55e:	3501      	adds	r5, #1
 801a560:	b338      	cbz	r0, 801a5b2 <_FillRect+0x8e>
 801a562:	f004 f9c7 	bl	801e8f4 <GUI_ALLOC_LockH>
 801a566:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a568:	f10d 0810 	add.w	r8, sp, #16
 801a56c:	1b13      	subs	r3, r2, r4
 801a56e:	f848 0d04 	str.w	r0, [r8, #-4]!
 801a572:	3301      	adds	r3, #1
 801a574:	9300      	str	r3, [sp, #0]
 801a576:	4639      	mov	r1, r7
 801a578:	4622      	mov	r2, r4
 801a57a:	462b      	mov	r3, r5
 801a57c:	f006 fb98 	bl	8020cb0 <GUI_USAGE_AddRect>
 801a580:	4640      	mov	r0, r8
 801a582:	f004 f9c5 	bl	801e910 <GUI_ALLOC_UnlockH>
 801a586:	e014      	b.n	801a5b2 <_FillRect+0x8e>
 801a588:	f8db 3000 	ldr.w	r3, [fp]
 801a58c:	7c1b      	ldrb	r3, [r3, #16]
 801a58e:	07db      	lsls	r3, r3, #31
 801a590:	d513      	bpl.n	801a5ba <_FillRect+0x96>
 801a592:	9b02      	ldr	r3, [sp, #8]
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	691b      	ldr	r3, [r3, #16]
 801a598:	689b      	ldr	r3, [r3, #8]
 801a59a:	4798      	blx	r3
 801a59c:	4632      	mov	r2, r6
 801a59e:	462b      	mov	r3, r5
 801a5a0:	6811      	ldr	r1, [r2, #0]
 801a5a2:	3b01      	subs	r3, #1
 801a5a4:	ea81 0100 	eor.w	r1, r1, r0
 801a5a8:	f842 1b04 	str.w	r1, [r2], #4
 801a5ac:	d1f8      	bne.n	801a5a0 <_FillRect+0x7c>
 801a5ae:	444e      	add	r6, r9
 801a5b0:	3401      	adds	r4, #1
 801a5b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a5b4:	429c      	cmp	r4, r3
 801a5b6:	dde7      	ble.n	801a588 <_FillRect+0x64>
 801a5b8:	e008      	b.n	801a5cc <_FillRect+0xa8>
 801a5ba:	2d00      	cmp	r5, #0
 801a5bc:	ddf7      	ble.n	801a5ae <_FillRect+0x8a>
 801a5be:	462b      	mov	r3, r5
 801a5c0:	4632      	mov	r2, r6
 801a5c2:	3b01      	subs	r3, #1
 801a5c4:	f842 ab04 	str.w	sl, [r2], #4
 801a5c8:	d1fb      	bne.n	801a5c2 <_FillRect+0x9e>
 801a5ca:	e7f0      	b.n	801a5ae <_FillRect+0x8a>
 801a5cc:	a802      	add	r0, sp, #8
 801a5ce:	f004 f99f 	bl	801e910 <GUI_ALLOC_UnlockH>
 801a5d2:	b005      	add	sp, #20
 801a5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5d8:	20000114 	.word	0x20000114

0801a5dc <_DrawHLine>:
 801a5dc:	b507      	push	{r0, r1, r2, lr}
 801a5de:	9200      	str	r2, [sp, #0]
 801a5e0:	f7ff ffa0 	bl	801a524 <_FillRect>
 801a5e4:	b003      	add	sp, #12
 801a5e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801a5ec <_DrawBitmap>:
 801a5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5f0:	4c9d      	ldr	r4, [pc, #628]	; (801a868 <_DrawBitmap+0x27c>)
 801a5f2:	469a      	mov	sl, r3
 801a5f4:	6823      	ldr	r3, [r4, #0]
 801a5f6:	b091      	sub	sp, #68	; 0x44
 801a5f8:	4680      	mov	r8, r0
 801a5fa:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801a5fc:	9207      	str	r2, [sp, #28]
 801a5fe:	460e      	mov	r6, r1
 801a600:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 801a604:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801a606:	2800      	cmp	r0, #0
 801a608:	f000 8387 	beq.w	801ad1a <_DrawBitmap+0x72e>
 801a60c:	f004 f972 	bl	801e8f4 <GUI_ALLOC_LockH>
 801a610:	900e      	str	r0, [sp, #56]	; 0x38
 801a612:	6940      	ldr	r0, [r0, #20]
 801a614:	b108      	cbz	r0, 801a61a <_DrawBitmap+0x2e>
 801a616:	f004 f96d 	bl	801e8f4 <GUI_ALLOC_LockH>
 801a61a:	900f      	str	r0, [sp, #60]	; 0x3c
 801a61c:	a810      	add	r0, sp, #64	; 0x40
 801a61e:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 801a622:	68db      	ldr	r3, [r3, #12]
 801a624:	930a      	str	r3, [sp, #40]	; 0x28
 801a626:	f004 f973 	bl	801e910 <GUI_ALLOC_UnlockH>
 801a62a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801a62c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a62e:	4437      	add	r7, r6
 801a630:	9704      	str	r7, [sp, #16]
 801a632:	b150      	cbz	r0, 801a64a <_DrawBitmap+0x5e>
 801a634:	6823      	ldr	r3, [r4, #0]
 801a636:	7c1b      	ldrb	r3, [r3, #16]
 801a638:	079c      	lsls	r4, r3, #30
 801a63a:	d406      	bmi.n	801a64a <_DrawBitmap+0x5e>
 801a63c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801a63e:	9700      	str	r7, [sp, #0]
 801a640:	9904      	ldr	r1, [sp, #16]
 801a642:	9a07      	ldr	r2, [sp, #28]
 801a644:	4653      	mov	r3, sl
 801a646:	f006 fb33 	bl	8020cb0 <GUI_USAGE_AddRect>
 801a64a:	9804      	ldr	r0, [sp, #16]
 801a64c:	9907      	ldr	r1, [sp, #28]
 801a64e:	f7ff fe8f 	bl	801a370 <_XY2PTR>
 801a652:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801a654:	2f17      	cmp	r7, #23
 801a656:	4606      	mov	r6, r0
 801a658:	dd64      	ble.n	801a724 <_DrawBitmap+0x138>
 801a65a:	ea4f 078a 	mov.w	r7, sl, lsl #2
 801a65e:	9706      	str	r7, [sp, #24]
 801a660:	f04f 0900 	mov.w	r9, #0
 801a664:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801a666:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a668:	45b9      	cmp	r9, r7
 801a66a:	da57      	bge.n	801a71c <_DrawBitmap+0x130>
 801a66c:	b130      	cbz	r0, 801a67c <_DrawBitmap+0x90>
 801a66e:	6883      	ldr	r3, [r0, #8]
 801a670:	9a07      	ldr	r2, [sp, #28]
 801a672:	685c      	ldr	r4, [r3, #4]
 801a674:	9904      	ldr	r1, [sp, #16]
 801a676:	444a      	add	r2, r9
 801a678:	4653      	mov	r3, sl
 801a67a:	47a0      	blx	r4
 801a67c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a680:	68d8      	ldr	r0, [r3, #12]
 801a682:	b128      	cbz	r0, 801a690 <_DrawBitmap+0xa4>
 801a684:	4630      	mov	r0, r6
 801a686:	4659      	mov	r1, fp
 801a688:	9a06      	ldr	r2, [sp, #24]
 801a68a:	f007 fabb 	bl	8021c04 <memcpy>
 801a68e:	e03e      	b.n	801a70e <_DrawBitmap+0x122>
 801a690:	685b      	ldr	r3, [r3, #4]
 801a692:	4798      	blx	r3
 801a694:	0e00      	lsrs	r0, r0, #24
 801a696:	9005      	str	r0, [sp, #20]
 801a698:	4635      	mov	r5, r6
 801a69a:	4657      	mov	r7, sl
 801a69c:	465c      	mov	r4, fp
 801a69e:	463b      	mov	r3, r7
 801a6a0:	4622      	mov	r2, r4
 801a6a2:	f04f 0c00 	mov.w	ip, #0
 801a6a6:	f852 1b04 	ldr.w	r1, [r2], #4
 801a6aa:	9805      	ldr	r0, [sp, #20]
 801a6ac:	0e09      	lsrs	r1, r1, #24
 801a6ae:	4281      	cmp	r1, r0
 801a6b0:	9805      	ldr	r0, [sp, #20]
 801a6b2:	bf08      	it	eq
 801a6b4:	f10c 0c01 	addeq.w	ip, ip, #1
 801a6b8:	4281      	cmp	r1, r0
 801a6ba:	f103 33ff 	add.w	r3, r3, #4294967295
 801a6be:	d014      	beq.n	801a6ea <_DrawBitmap+0xfe>
 801a6c0:	f1bc 0f00 	cmp.w	ip, #0
 801a6c4:	d014      	beq.n	801a6f0 <_DrawBitmap+0x104>
 801a6c6:	ea4f 038c 	mov.w	r3, ip, lsl #2
 801a6ca:	4628      	mov	r0, r5
 801a6cc:	4621      	mov	r1, r4
 801a6ce:	461a      	mov	r2, r3
 801a6d0:	9303      	str	r3, [sp, #12]
 801a6d2:	f8cd c008 	str.w	ip, [sp, #8]
 801a6d6:	f007 fa95 	bl	8021c04 <memcpy>
 801a6da:	9b03      	ldr	r3, [sp, #12]
 801a6dc:	f8dd c008 	ldr.w	ip, [sp, #8]
 801a6e0:	441d      	add	r5, r3
 801a6e2:	441c      	add	r4, r3
 801a6e4:	ebcc 0707 	rsb	r7, ip, r7
 801a6e8:	e00f      	b.n	801a70a <_DrawBitmap+0x11e>
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	d1db      	bne.n	801a6a6 <_DrawBitmap+0xba>
 801a6ee:	e7e7      	b.n	801a6c0 <_DrawBitmap+0xd4>
 801a6f0:	6820      	ldr	r0, [r4, #0]
 801a6f2:	0e02      	lsrs	r2, r0, #24
 801a6f4:	2aff      	cmp	r2, #255	; 0xff
 801a6f6:	d005      	beq.n	801a704 <_DrawBitmap+0x118>
 801a6f8:	43d2      	mvns	r2, r2
 801a6fa:	6829      	ldr	r1, [r5, #0]
 801a6fc:	b2d2      	uxtb	r2, r2
 801a6fe:	f002 f875 	bl	801c7ec <GUI__MixColors>
 801a702:	6028      	str	r0, [r5, #0]
 801a704:	3504      	adds	r5, #4
 801a706:	3404      	adds	r4, #4
 801a708:	3f01      	subs	r7, #1
 801a70a:	2f00      	cmp	r7, #0
 801a70c:	d1c7      	bne.n	801a69e <_DrawBitmap+0xb2>
 801a70e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801a710:	44bb      	add	fp, r7
 801a712:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801a714:	f109 0901 	add.w	r9, r9, #1
 801a718:	443e      	add	r6, r7
 801a71a:	e7a3      	b.n	801a664 <_DrawBitmap+0x78>
 801a71c:	2800      	cmp	r0, #0
 801a71e:	f040 82f9 	bne.w	801ad14 <_DrawBitmap+0x728>
 801a722:	e2fa      	b.n	801ad1a <_DrawBitmap+0x72e>
 801a724:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801a726:	2f10      	cmp	r7, #16
 801a728:	d137      	bne.n	801a79a <_DrawBitmap+0x1ae>
 801a72a:	1f06      	subs	r6, r0, #4
 801a72c:	2500      	movs	r5, #0
 801a72e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801a730:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a732:	42bd      	cmp	r5, r7
 801a734:	f280 80a0 	bge.w	801a878 <_DrawBitmap+0x28c>
 801a738:	9f07      	ldr	r7, [sp, #28]
 801a73a:	442f      	add	r7, r5
 801a73c:	b13c      	cbz	r4, 801a74e <_DrawBitmap+0x162>
 801a73e:	68a3      	ldr	r3, [r4, #8]
 801a740:	9904      	ldr	r1, [sp, #16]
 801a742:	f8d3 c004 	ldr.w	ip, [r3, #4]
 801a746:	4620      	mov	r0, r4
 801a748:	463a      	mov	r2, r7
 801a74a:	4653      	mov	r3, sl
 801a74c:	47e0      	blx	ip
 801a74e:	f1ab 0302 	sub.w	r3, fp, #2
 801a752:	9306      	str	r3, [sp, #24]
 801a754:	9605      	str	r6, [sp, #20]
 801a756:	46d1      	mov	r9, sl
 801a758:	9904      	ldr	r1, [sp, #16]
 801a75a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a75e:	9a06      	ldr	r2, [sp, #24]
 801a760:	685b      	ldr	r3, [r3, #4]
 801a762:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 801a766:	9206      	str	r2, [sp, #24]
 801a768:	4451      	add	r1, sl
 801a76a:	ebc9 0101 	rsb	r1, r9, r1
 801a76e:	9103      	str	r1, [sp, #12]
 801a770:	4798      	blx	r3
 801a772:	9b05      	ldr	r3, [sp, #20]
 801a774:	9903      	ldr	r1, [sp, #12]
 801a776:	f843 0f04 	str.w	r0, [r3, #4]!
 801a77a:	9305      	str	r3, [sp, #20]
 801a77c:	b124      	cbz	r4, 801a788 <_DrawBitmap+0x19c>
 801a77e:	68a3      	ldr	r3, [r4, #8]
 801a780:	4620      	mov	r0, r4
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	463a      	mov	r2, r7
 801a786:	4798      	blx	r3
 801a788:	f1b9 0901 	subs.w	r9, r9, #1
 801a78c:	d1e4      	bne.n	801a758 <_DrawBitmap+0x16c>
 801a78e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801a790:	44bb      	add	fp, r7
 801a792:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801a794:	3501      	adds	r5, #1
 801a796:	443e      	add	r6, r7
 801a798:	e7c9      	b.n	801a72e <_DrawBitmap+0x142>
 801a79a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801a79c:	2f08      	cmp	r7, #8
 801a79e:	f100 0604 	add.w	r6, r0, #4
 801a7a2:	d16d      	bne.n	801a880 <_DrawBitmap+0x294>
 801a7a4:	9f07      	ldr	r7, [sp, #28]
 801a7a6:	9907      	ldr	r1, [sp, #28]
 801a7a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a7aa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a7ac:	1a7b      	subs	r3, r7, r1
 801a7ae:	4293      	cmp	r3, r2
 801a7b0:	f1a6 0004 	sub.w	r0, r6, #4
 801a7b4:	da60      	bge.n	801a878 <_DrawBitmap+0x28c>
 801a7b6:	4b2c      	ldr	r3, [pc, #176]	; (801a868 <_DrawBitmap+0x27c>)
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	7c1b      	ldrb	r3, [r3, #16]
 801a7bc:	b36d      	cbz	r5, 801a81a <_DrawBitmap+0x22e>
 801a7be:	f013 0303 	ands.w	r3, r3, #3
 801a7c2:	d005      	beq.n	801a7d0 <_DrawBitmap+0x1e4>
 801a7c4:	2b02      	cmp	r3, #2
 801a7c6:	d151      	bne.n	801a86c <_DrawBitmap+0x280>
 801a7c8:	46b1      	mov	r9, r6
 801a7ca:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a7ce:	e01c      	b.n	801a80a <_DrawBitmap+0x21e>
 801a7d0:	f81b 2003 	ldrb.w	r2, [fp, r3]
 801a7d4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801a7d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801a7dc:	3301      	adds	r3, #1
 801a7de:	4553      	cmp	r3, sl
 801a7e0:	d1f6      	bne.n	801a7d0 <_DrawBitmap+0x1e4>
 801a7e2:	e043      	b.n	801a86c <_DrawBitmap+0x280>
 801a7e4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801a7e8:	f849 3c04 	str.w	r3, [r9, #-4]
 801a7ec:	b12c      	cbz	r4, 801a7fa <_DrawBitmap+0x20e>
 801a7ee:	68a3      	ldr	r3, [r4, #8]
 801a7f0:	4620      	mov	r0, r4
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	4641      	mov	r1, r8
 801a7f6:	463a      	mov	r2, r7
 801a7f8:	4798      	blx	r3
 801a7fa:	9b04      	ldr	r3, [sp, #16]
 801a7fc:	f108 0801 	add.w	r8, r8, #1
 801a800:	4453      	add	r3, sl
 801a802:	4543      	cmp	r3, r8
 801a804:	f109 0904 	add.w	r9, r9, #4
 801a808:	d030      	beq.n	801a86c <_DrawBitmap+0x280>
 801a80a:	9804      	ldr	r0, [sp, #16]
 801a80c:	ebc0 030b 	rsb	r3, r0, fp
 801a810:	f813 3008 	ldrb.w	r3, [r3, r8]
 801a814:	2b00      	cmp	r3, #0
 801a816:	d0f0      	beq.n	801a7fa <_DrawBitmap+0x20e>
 801a818:	e7e4      	b.n	801a7e4 <_DrawBitmap+0x1f8>
 801a81a:	f013 0303 	ands.w	r3, r3, #3
 801a81e:	d005      	beq.n	801a82c <_DrawBitmap+0x240>
 801a820:	2b02      	cmp	r3, #2
 801a822:	d123      	bne.n	801a86c <_DrawBitmap+0x280>
 801a824:	46b1      	mov	r9, r6
 801a826:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a82a:	e015      	b.n	801a858 <_DrawBitmap+0x26c>
 801a82c:	4659      	mov	r1, fp
 801a82e:	4652      	mov	r2, sl
 801a830:	f007 f9e8 	bl	8021c04 <memcpy>
 801a834:	e01a      	b.n	801a86c <_DrawBitmap+0x280>
 801a836:	f849 3c04 	str.w	r3, [r9, #-4]
 801a83a:	b12c      	cbz	r4, 801a848 <_DrawBitmap+0x25c>
 801a83c:	68a3      	ldr	r3, [r4, #8]
 801a83e:	4620      	mov	r0, r4
 801a840:	681b      	ldr	r3, [r3, #0]
 801a842:	4641      	mov	r1, r8
 801a844:	463a      	mov	r2, r7
 801a846:	4798      	blx	r3
 801a848:	9b04      	ldr	r3, [sp, #16]
 801a84a:	f108 0801 	add.w	r8, r8, #1
 801a84e:	4453      	add	r3, sl
 801a850:	4543      	cmp	r3, r8
 801a852:	f109 0904 	add.w	r9, r9, #4
 801a856:	d009      	beq.n	801a86c <_DrawBitmap+0x280>
 801a858:	9904      	ldr	r1, [sp, #16]
 801a85a:	ebc1 030b 	rsb	r3, r1, fp
 801a85e:	f813 3008 	ldrb.w	r3, [r3, r8]
 801a862:	2b00      	cmp	r3, #0
 801a864:	d0f0      	beq.n	801a848 <_DrawBitmap+0x25c>
 801a866:	e7e6      	b.n	801a836 <_DrawBitmap+0x24a>
 801a868:	20000114 	.word	0x20000114
 801a86c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a870:	4493      	add	fp, r2
 801a872:	3701      	adds	r7, #1
 801a874:	441e      	add	r6, r3
 801a876:	e796      	b.n	801a7a6 <_DrawBitmap+0x1ba>
 801a878:	2c00      	cmp	r4, #0
 801a87a:	f040 824b 	bne.w	801ad14 <_DrawBitmap+0x728>
 801a87e:	e24c      	b.n	801ad1a <_DrawBitmap+0x72e>
 801a880:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801a882:	4bb2      	ldr	r3, [pc, #712]	; (801ab4c <_DrawBitmap+0x560>)
 801a884:	9609      	str	r6, [sp, #36]	; 0x24
 801a886:	007f      	lsls	r7, r7, #1
 801a888:	970c      	str	r7, [sp, #48]	; 0x30
 801a88a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801a88c:	00bf      	lsls	r7, r7, #2
 801a88e:	970d      	str	r7, [sp, #52]	; 0x34
 801a890:	9f07      	ldr	r7, [sp, #28]
 801a892:	9705      	str	r7, [sp, #20]
 801a894:	2d00      	cmp	r5, #0
 801a896:	bf08      	it	eq
 801a898:	461d      	moveq	r5, r3
 801a89a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a89c:	9807      	ldr	r0, [sp, #28]
 801a89e:	1f3c      	subs	r4, r7, #4
 801a8a0:	9f05      	ldr	r7, [sp, #20]
 801a8a2:	1a3b      	subs	r3, r7, r0
 801a8a4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801a8a6:	42bb      	cmp	r3, r7
 801a8a8:	f280 8232 	bge.w	801ad10 <_DrawBitmap+0x724>
 801a8ac:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801a8ae:	2f02      	cmp	r7, #2
 801a8b0:	f000 80ad 	beq.w	801aa0e <_DrawBitmap+0x422>
 801a8b4:	2f04      	cmp	r7, #4
 801a8b6:	f000 814f 	beq.w	801ab58 <_DrawBitmap+0x56c>
 801a8ba:	2f01      	cmp	r7, #1
 801a8bc:	f040 821e 	bne.w	801acfc <_DrawBitmap+0x710>
 801a8c0:	f8df 9290 	ldr.w	r9, [pc, #656]	; 801ab54 <_DrawBitmap+0x568>
 801a8c4:	f8d9 3000 	ldr.w	r3, [r9]
 801a8c8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801a8ca:	f004 f813 	bl	801e8f4 <GUI_ALLOC_LockH>
 801a8ce:	f89b 3000 	ldrb.w	r3, [fp]
 801a8d2:	4a9f      	ldr	r2, [pc, #636]	; (801ab50 <_DrawBitmap+0x564>)
 801a8d4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a8d6:	5cd6      	ldrb	r6, [r2, r3]
 801a8d8:	f8d9 3000 	ldr.w	r3, [r9]
 801a8dc:	900e      	str	r0, [sp, #56]	; 0x38
 801a8de:	7c1b      	ldrb	r3, [r3, #16]
 801a8e0:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 801a8e4:	f003 0303 	and.w	r3, r3, #3
 801a8e8:	2b02      	cmp	r3, #2
 801a8ea:	4657      	mov	r7, sl
 801a8ec:	f1c1 0808 	rsb	r8, r1, #8
 801a8f0:	fa46 f601 	asr.w	r6, r6, r1
 801a8f4:	d020      	beq.n	801a938 <_DrawBitmap+0x34c>
 801a8f6:	2b03      	cmp	r3, #3
 801a8f8:	d061      	beq.n	801a9be <_DrawBitmap+0x3d2>
 801a8fa:	2b01      	cmp	r3, #1
 801a8fc:	d05f      	beq.n	801a9be <_DrawBitmap+0x3d2>
 801a8fe:	465a      	mov	r2, fp
 801a900:	4547      	cmp	r7, r8
 801a902:	bf38      	it	cc
 801a904:	46b8      	movcc	r8, r7
 801a906:	ebc8 0707 	rsb	r7, r8, r7
 801a90a:	4643      	mov	r3, r8
 801a90c:	4621      	mov	r1, r4
 801a90e:	f006 0001 	and.w	r0, r6, #1
 801a912:	3b01      	subs	r3, #1
 801a914:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a918:	f841 0b04 	str.w	r0, [r1], #4
 801a91c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a920:	d1f5      	bne.n	801a90e <_DrawBitmap+0x322>
 801a922:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 801a926:	2f00      	cmp	r7, #0
 801a928:	d06d      	beq.n	801aa06 <_DrawBitmap+0x41a>
 801a92a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801a92e:	4988      	ldr	r1, [pc, #544]	; (801ab50 <_DrawBitmap+0x564>)
 801a930:	f04f 0808 	mov.w	r8, #8
 801a934:	5cce      	ldrb	r6, [r1, r3]
 801a936:	e7e3      	b.n	801a900 <_DrawBitmap+0x314>
 801a938:	686b      	ldr	r3, [r5, #4]
 801a93a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801a93e:	930b      	str	r3, [sp, #44]	; 0x2c
 801a940:	f8cd b020 	str.w	fp, [sp, #32]
 801a944:	4547      	cmp	r7, r8
 801a946:	bf38      	it	cc
 801a948:	46b8      	movcc	r8, r7
 801a94a:	ebc8 0707 	rsb	r7, r8, r7
 801a94e:	f1bc 0f00 	cmp.w	ip, #0
 801a952:	d026      	beq.n	801a9a2 <_DrawBitmap+0x3b6>
 801a954:	b91e      	cbnz	r6, 801a95e <_DrawBitmap+0x372>
 801a956:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 801a95a:	44c1      	add	r9, r8
 801a95c:	e025      	b.n	801a9aa <_DrawBitmap+0x3be>
 801a95e:	07f0      	lsls	r0, r6, #31
 801a960:	d50c      	bpl.n	801a97c <_DrawBitmap+0x390>
 801a962:	f8dc 3008 	ldr.w	r3, [ip, #8]
 801a966:	9a05      	ldr	r2, [sp, #20]
 801a968:	681b      	ldr	r3, [r3, #0]
 801a96a:	f8cd c008 	str.w	ip, [sp, #8]
 801a96e:	4660      	mov	r0, ip
 801a970:	4649      	mov	r1, r9
 801a972:	4798      	blx	r3
 801a974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a976:	f8dd c008 	ldr.w	ip, [sp, #8]
 801a97a:	6023      	str	r3, [r4, #0]
 801a97c:	f1b8 0801 	subs.w	r8, r8, #1
 801a980:	f109 0901 	add.w	r9, r9, #1
 801a984:	f104 0404 	add.w	r4, r4, #4
 801a988:	d00f      	beq.n	801a9aa <_DrawBitmap+0x3be>
 801a98a:	0876      	lsrs	r6, r6, #1
 801a98c:	e7e2      	b.n	801a954 <_DrawBitmap+0x368>
 801a98e:	07f1      	lsls	r1, r6, #31
 801a990:	bf44      	itt	mi
 801a992:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 801a994:	6023      	strmi	r3, [r4, #0]
 801a996:	f1b8 0801 	subs.w	r8, r8, #1
 801a99a:	f104 0404 	add.w	r4, r4, #4
 801a99e:	d004      	beq.n	801a9aa <_DrawBitmap+0x3be>
 801a9a0:	0876      	lsrs	r6, r6, #1
 801a9a2:	2e00      	cmp	r6, #0
 801a9a4:	d1f3      	bne.n	801a98e <_DrawBitmap+0x3a2>
 801a9a6:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 801a9aa:	b367      	cbz	r7, 801aa06 <_DrawBitmap+0x41a>
 801a9ac:	9808      	ldr	r0, [sp, #32]
 801a9ae:	4a68      	ldr	r2, [pc, #416]	; (801ab50 <_DrawBitmap+0x564>)
 801a9b0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801a9b4:	9008      	str	r0, [sp, #32]
 801a9b6:	5cd6      	ldrb	r6, [r2, r3]
 801a9b8:	f04f 0808 	mov.w	r8, #8
 801a9bc:	e7c2      	b.n	801a944 <_DrawBitmap+0x358>
 801a9be:	6803      	ldr	r3, [r0, #0]
 801a9c0:	691b      	ldr	r3, [r3, #16]
 801a9c2:	689b      	ldr	r3, [r3, #8]
 801a9c4:	4798      	blx	r3
 801a9c6:	4659      	mov	r1, fp
 801a9c8:	4547      	cmp	r7, r8
 801a9ca:	bf38      	it	cc
 801a9cc:	46b8      	movcc	r8, r7
 801a9ce:	ebc8 0707 	rsb	r7, r8, r7
 801a9d2:	1d23      	adds	r3, r4, #4
 801a9d4:	46c6      	mov	lr, r8
 801a9d6:	07f2      	lsls	r2, r6, #31
 801a9d8:	d504      	bpl.n	801a9e4 <_DrawBitmap+0x3f8>
 801a9da:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801a9de:	4042      	eors	r2, r0
 801a9e0:	f843 2c04 	str.w	r2, [r3, #-4]
 801a9e4:	f1be 0e01 	subs.w	lr, lr, #1
 801a9e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a9ec:	f103 0304 	add.w	r3, r3, #4
 801a9f0:	d1f1      	bne.n	801a9d6 <_DrawBitmap+0x3ea>
 801a9f2:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 801a9f6:	b137      	cbz	r7, 801aa06 <_DrawBitmap+0x41a>
 801a9f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a9fc:	4a54      	ldr	r2, [pc, #336]	; (801ab50 <_DrawBitmap+0x564>)
 801a9fe:	f04f 0808 	mov.w	r8, #8
 801aa02:	5cd6      	ldrb	r6, [r2, r3]
 801aa04:	e7e0      	b.n	801a9c8 <_DrawBitmap+0x3dc>
 801aa06:	a80e      	add	r0, sp, #56	; 0x38
 801aa08:	f003 ff82 	bl	801e910 <GUI_ALLOC_UnlockH>
 801aa0c:	e176      	b.n	801acfc <_DrawBitmap+0x710>
 801aa0e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801aa10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa12:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 801aa16:	f1c7 0604 	rsb	r6, r7, #4
 801aa1a:	f89b 7000 	ldrb.w	r7, [fp]
 801aa1e:	409f      	lsls	r7, r3
 801aa20:	4b4c      	ldr	r3, [pc, #304]	; (801ab54 <_DrawBitmap+0x568>)
 801aa22:	681b      	ldr	r3, [r3, #0]
 801aa24:	7c1b      	ldrb	r3, [r3, #16]
 801aa26:	f003 0303 	and.w	r3, r3, #3
 801aa2a:	2b01      	cmp	r3, #1
 801aa2c:	b2f6      	uxtb	r6, r6
 801aa2e:	b2ff      	uxtb	r7, r7
 801aa30:	d066      	beq.n	801ab00 <_DrawBitmap+0x514>
 801aa32:	d308      	bcc.n	801aa46 <_DrawBitmap+0x45a>
 801aa34:	2b02      	cmp	r3, #2
 801aa36:	f040 8161 	bne.w	801acfc <_DrawBitmap+0x710>
 801aa3a:	9804      	ldr	r0, [sp, #16]
 801aa3c:	f8cd b020 	str.w	fp, [sp, #32]
 801aa40:	46d0      	mov	r8, sl
 801aa42:	9006      	str	r0, [sp, #24]
 801aa44:	e03e      	b.n	801aac4 <_DrawBitmap+0x4d8>
 801aa46:	465a      	mov	r2, fp
 801aa48:	4653      	mov	r3, sl
 801aa4a:	429e      	cmp	r6, r3
 801aa4c:	bfc8      	it	gt
 801aa4e:	b2de      	uxtbgt	r6, r3
 801aa50:	1b9b      	subs	r3, r3, r6
 801aa52:	4631      	mov	r1, r6
 801aa54:	4620      	mov	r0, r4
 801aa56:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 801aa5a:	3901      	subs	r1, #1
 801aa5c:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 801aa60:	f840 cb04 	str.w	ip, [r0], #4
 801aa64:	00bf      	lsls	r7, r7, #2
 801aa66:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 801aa6a:	b2ff      	uxtb	r7, r7
 801aa6c:	d1f3      	bne.n	801aa56 <_DrawBitmap+0x46a>
 801aa6e:	3e01      	subs	r6, #1
 801aa70:	b2f6      	uxtb	r6, r6
 801aa72:	3601      	adds	r6, #1
 801aa74:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	f000 813f 	beq.w	801acfc <_DrawBitmap+0x710>
 801aa7e:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 801aa82:	2604      	movs	r6, #4
 801aa84:	e7e1      	b.n	801aa4a <_DrawBitmap+0x45e>
 801aa86:	9906      	ldr	r1, [sp, #24]
 801aa88:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 801aa8c:	4449      	add	r1, r9
 801aa8e:	d122      	bne.n	801aad6 <_DrawBitmap+0x4ea>
 801aa90:	f109 0901 	add.w	r9, r9, #1
 801aa94:	fa5f f289 	uxtb.w	r2, r9
 801aa98:	00bf      	lsls	r7, r7, #2
 801aa9a:	4296      	cmp	r6, r2
 801aa9c:	b2ff      	uxtb	r7, r7
 801aa9e:	d1f2      	bne.n	801aa86 <_DrawBitmap+0x49a>
 801aaa0:	9f06      	ldr	r7, [sp, #24]
 801aaa2:	3e01      	subs	r6, #1
 801aaa4:	b2f6      	uxtb	r6, r6
 801aaa6:	1c7b      	adds	r3, r7, #1
 801aaa8:	1c72      	adds	r2, r6, #1
 801aaaa:	199e      	adds	r6, r3, r6
 801aaac:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801aab0:	9606      	str	r6, [sp, #24]
 801aab2:	f1b8 0f00 	cmp.w	r8, #0
 801aab6:	f000 8121 	beq.w	801acfc <_DrawBitmap+0x710>
 801aaba:	9b08      	ldr	r3, [sp, #32]
 801aabc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801aac0:	9308      	str	r3, [sp, #32]
 801aac2:	2604      	movs	r6, #4
 801aac4:	4546      	cmp	r6, r8
 801aac6:	bfc8      	it	gt
 801aac8:	fa5f f688 	uxtbgt.w	r6, r8
 801aacc:	ebc6 0808 	rsb	r8, r6, r8
 801aad0:	f04f 0900 	mov.w	r9, #0
 801aad4:	e7d7      	b.n	801aa86 <_DrawBitmap+0x49a>
 801aad6:	09ba      	lsrs	r2, r7, #6
 801aad8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801aadc:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 801aae0:	f1bc 0f00 	cmp.w	ip, #0
 801aae4:	d0d4      	beq.n	801aa90 <_DrawBitmap+0x4a4>
 801aae6:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801aaea:	6812      	ldr	r2, [r2, #0]
 801aaec:	920b      	str	r2, [sp, #44]	; 0x2c
 801aaee:	4660      	mov	r0, ip
 801aaf0:	f8cd c008 	str.w	ip, [sp, #8]
 801aaf4:	9a05      	ldr	r2, [sp, #20]
 801aaf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aaf8:	4798      	blx	r3
 801aafa:	f8dd c008 	ldr.w	ip, [sp, #8]
 801aafe:	e7c7      	b.n	801aa90 <_DrawBitmap+0x4a4>
 801ab00:	4658      	mov	r0, fp
 801ab02:	4653      	mov	r3, sl
 801ab04:	429e      	cmp	r6, r3
 801ab06:	bfc8      	it	gt
 801ab08:	b2de      	uxtbgt	r6, r3
 801ab0a:	1b9b      	subs	r3, r3, r6
 801ab0c:	1d22      	adds	r2, r4, #4
 801ab0e:	46b4      	mov	ip, r6
 801ab10:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 801ab14:	d005      	beq.n	801ab22 <_DrawBitmap+0x536>
 801ab16:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801ab1a:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 801ab1e:	f842 1c04 	str.w	r1, [r2, #-4]
 801ab22:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ab26:	00bf      	lsls	r7, r7, #2
 801ab28:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 801ab2c:	b2ff      	uxtb	r7, r7
 801ab2e:	f102 0204 	add.w	r2, r2, #4
 801ab32:	d1ed      	bne.n	801ab10 <_DrawBitmap+0x524>
 801ab34:	3e01      	subs	r6, #1
 801ab36:	b2f6      	uxtb	r6, r6
 801ab38:	3601      	adds	r6, #1
 801ab3a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	f000 80dc 	beq.w	801acfc <_DrawBitmap+0x710>
 801ab44:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 801ab48:	2604      	movs	r6, #4
 801ab4a:	e7db      	b.n	801ab04 <_DrawBitmap+0x518>
 801ab4c:	0811e49c 	.word	0x0811e49c
 801ab50:	0812ded4 	.word	0x0812ded4
 801ab54:	20000114 	.word	0x20000114
 801ab58:	4a71      	ldr	r2, [pc, #452]	; (801ad20 <_DrawBitmap+0x734>)
 801ab5a:	f89b 3000 	ldrb.w	r3, [fp]
 801ab5e:	6812      	ldr	r2, [r2, #0]
 801ab60:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ab62:	7c12      	ldrb	r2, [r2, #16]
 801ab64:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ab66:	f002 0203 	and.w	r2, r2, #3
 801ab6a:	4083      	lsls	r3, r0
 801ab6c:	2a01      	cmp	r2, #1
 801ab6e:	b2de      	uxtb	r6, r3
 801ab70:	f000 809c 	beq.w	801acac <_DrawBitmap+0x6c0>
 801ab74:	d302      	bcc.n	801ab7c <_DrawBitmap+0x590>
 801ab76:	2a02      	cmp	r2, #2
 801ab78:	d035      	beq.n	801abe6 <_DrawBitmap+0x5fa>
 801ab7a:	e0bf      	b.n	801acfc <_DrawBitmap+0x710>
 801ab7c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801ab7e:	b15f      	cbz	r7, 801ab98 <_DrawBitmap+0x5ac>
 801ab80:	0936      	lsrs	r6, r6, #4
 801ab82:	f10b 0201 	add.w	r2, fp, #1
 801ab86:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 801ab8a:	6023      	str	r3, [r4, #0]
 801ab8c:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801ab90:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ab92:	f10a 33ff 	add.w	r3, sl, #4294967295
 801ab96:	e001      	b.n	801ab9c <_DrawBitmap+0x5b0>
 801ab98:	4653      	mov	r3, sl
 801ab9a:	465a      	mov	r2, fp
 801ab9c:	2b01      	cmp	r3, #1
 801ab9e:	dd1a      	ble.n	801abd6 <_DrawBitmap+0x5ea>
 801aba0:	1058      	asrs	r0, r3, #1
 801aba2:	f104 0108 	add.w	r1, r4, #8
 801aba6:	f003 0301 	and.w	r3, r3, #1
 801abaa:	eb02 0800 	add.w	r8, r2, r0
 801abae:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 801abb2:	f006 060f 	and.w	r6, r6, #15
 801abb6:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 801abba:	f841 7c08 	str.w	r7, [r1, #-8]
 801abbe:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801abc2:	f841 6c04 	str.w	r6, [r1, #-4]
 801abc6:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 801abca:	4542      	cmp	r2, r8
 801abcc:	f101 0108 	add.w	r1, r1, #8
 801abd0:	d1ed      	bne.n	801abae <_DrawBitmap+0x5c2>
 801abd2:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	f000 8090 	beq.w	801acfc <_DrawBitmap+0x710>
 801abdc:	0936      	lsrs	r6, r6, #4
 801abde:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 801abe2:	6023      	str	r3, [r4, #0]
 801abe4:	e08a      	b.n	801acfc <_DrawBitmap+0x710>
 801abe6:	981e      	ldr	r0, [sp, #120]	; 0x78
 801abe8:	b1c0      	cbz	r0, 801ac1c <_DrawBitmap+0x630>
 801abea:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 801abee:	d00a      	beq.n	801ac06 <_DrawBitmap+0x61a>
 801abf0:	0936      	lsrs	r6, r6, #4
 801abf2:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 801abf6:	6023      	str	r3, [r4, #0]
 801abf8:	b12f      	cbz	r7, 801ac06 <_DrawBitmap+0x61a>
 801abfa:	68bb      	ldr	r3, [r7, #8]
 801abfc:	9904      	ldr	r1, [sp, #16]
 801abfe:	681b      	ldr	r3, [r3, #0]
 801ac00:	9a05      	ldr	r2, [sp, #20]
 801ac02:	4638      	mov	r0, r7
 801ac04:	4798      	blx	r3
 801ac06:	9904      	ldr	r1, [sp, #16]
 801ac08:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ac0a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801ac0e:	f101 0801 	add.w	r8, r1, #1
 801ac12:	f10a 3cff 	add.w	ip, sl, #4294967295
 801ac16:	f10b 0901 	add.w	r9, fp, #1
 801ac1a:	e011      	b.n	801ac40 <_DrawBitmap+0x654>
 801ac1c:	46d4      	mov	ip, sl
 801ac1e:	46d9      	mov	r9, fp
 801ac20:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801ac24:	e00c      	b.n	801ac40 <_DrawBitmap+0x654>
 801ac26:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 801ac2a:	d10d      	bne.n	801ac48 <_DrawBitmap+0x65c>
 801ac2c:	f016 060f 	ands.w	r6, r6, #15
 801ac30:	d11b      	bne.n	801ac6a <_DrawBitmap+0x67e>
 801ac32:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 801ac36:	3408      	adds	r4, #8
 801ac38:	f108 0802 	add.w	r8, r8, #2
 801ac3c:	f1ac 0c02 	sub.w	ip, ip, #2
 801ac40:	f1bc 0f01 	cmp.w	ip, #1
 801ac44:	dcef      	bgt.n	801ac26 <_DrawBitmap+0x63a>
 801ac46:	e021      	b.n	801ac8c <_DrawBitmap+0x6a0>
 801ac48:	0933      	lsrs	r3, r6, #4
 801ac4a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801ac4e:	6023      	str	r3, [r4, #0]
 801ac50:	2f00      	cmp	r7, #0
 801ac52:	d0eb      	beq.n	801ac2c <_DrawBitmap+0x640>
 801ac54:	68bb      	ldr	r3, [r7, #8]
 801ac56:	9a05      	ldr	r2, [sp, #20]
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	f8cd c008 	str.w	ip, [sp, #8]
 801ac5e:	4638      	mov	r0, r7
 801ac60:	4641      	mov	r1, r8
 801ac62:	4798      	blx	r3
 801ac64:	f8dd c008 	ldr.w	ip, [sp, #8]
 801ac68:	e7e0      	b.n	801ac2c <_DrawBitmap+0x640>
 801ac6a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 801ac6e:	6063      	str	r3, [r4, #4]
 801ac70:	2f00      	cmp	r7, #0
 801ac72:	d0de      	beq.n	801ac32 <_DrawBitmap+0x646>
 801ac74:	68bb      	ldr	r3, [r7, #8]
 801ac76:	9a05      	ldr	r2, [sp, #20]
 801ac78:	681b      	ldr	r3, [r3, #0]
 801ac7a:	f8cd c008 	str.w	ip, [sp, #8]
 801ac7e:	4638      	mov	r0, r7
 801ac80:	f108 0101 	add.w	r1, r8, #1
 801ac84:	4798      	blx	r3
 801ac86:	f8dd c008 	ldr.w	ip, [sp, #8]
 801ac8a:	e7d2      	b.n	801ac32 <_DrawBitmap+0x646>
 801ac8c:	f1bc 0f00 	cmp.w	ip, #0
 801ac90:	d034      	beq.n	801acfc <_DrawBitmap+0x710>
 801ac92:	0936      	lsrs	r6, r6, #4
 801ac94:	d032      	beq.n	801acfc <_DrawBitmap+0x710>
 801ac96:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 801ac9a:	6023      	str	r3, [r4, #0]
 801ac9c:	b377      	cbz	r7, 801acfc <_DrawBitmap+0x710>
 801ac9e:	68bb      	ldr	r3, [r7, #8]
 801aca0:	9a05      	ldr	r2, [sp, #20]
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	4638      	mov	r0, r7
 801aca6:	4641      	mov	r1, r8
 801aca8:	4798      	blx	r3
 801acaa:	e027      	b.n	801acfc <_DrawBitmap+0x710>
 801acac:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801acae:	f1c7 0302 	rsb	r3, r7, #2
 801acb2:	b2db      	uxtb	r3, r3
 801acb4:	465f      	mov	r7, fp
 801acb6:	4652      	mov	r2, sl
 801acb8:	4293      	cmp	r3, r2
 801acba:	bfc8      	it	gt
 801acbc:	b2d3      	uxtbgt	r3, r2
 801acbe:	1ad2      	subs	r2, r2, r3
 801acc0:	1d20      	adds	r0, r4, #4
 801acc2:	469c      	mov	ip, r3
 801acc4:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 801acc8:	d005      	beq.n	801acd6 <_DrawBitmap+0x6ea>
 801acca:	f850 1c04 	ldr.w	r1, [r0, #-4]
 801acce:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 801acd2:	f840 1c04 	str.w	r1, [r0, #-4]
 801acd6:	f10c 3cff 	add.w	ip, ip, #4294967295
 801acda:	0136      	lsls	r6, r6, #4
 801acdc:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 801ace0:	b2f6      	uxtb	r6, r6
 801ace2:	f100 0004 	add.w	r0, r0, #4
 801ace6:	d1ed      	bne.n	801acc4 <_DrawBitmap+0x6d8>
 801ace8:	3b01      	subs	r3, #1
 801acea:	b2db      	uxtb	r3, r3
 801acec:	3301      	adds	r3, #1
 801acee:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801acf2:	b11a      	cbz	r2, 801acfc <_DrawBitmap+0x710>
 801acf4:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 801acf8:	2302      	movs	r3, #2
 801acfa:	e7dd      	b.n	801acb8 <_DrawBitmap+0x6cc>
 801acfc:	9b05      	ldr	r3, [sp, #20]
 801acfe:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801ad00:	3301      	adds	r3, #1
 801ad02:	44bb      	add	fp, r7
 801ad04:	9305      	str	r3, [sp, #20]
 801ad06:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ad08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad0a:	443b      	add	r3, r7
 801ad0c:	9309      	str	r3, [sp, #36]	; 0x24
 801ad0e:	e5c4      	b.n	801a89a <_DrawBitmap+0x2ae>
 801ad10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ad12:	b113      	cbz	r3, 801ad1a <_DrawBitmap+0x72e>
 801ad14:	a80f      	add	r0, sp, #60	; 0x3c
 801ad16:	f003 fdfb 	bl	801e910 <GUI_ALLOC_UnlockH>
 801ad1a:	b011      	add	sp, #68	; 0x44
 801ad1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad20:	20000114 	.word	0x20000114

0801ad24 <GUI_MEMDEV__WriteToActiveAt>:
 801ad24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ad28:	460e      	mov	r6, r1
 801ad2a:	4690      	mov	r8, r2
 801ad2c:	4607      	mov	r7, r0
 801ad2e:	f003 fde1 	bl	801e8f4 <GUI_ALLOC_LockH>
 801ad32:	6803      	ldr	r3, [r0, #0]
 801ad34:	ac02      	add	r4, sp, #8
 801ad36:	68db      	ldr	r3, [r3, #12]
 801ad38:	f844 0d04 	str.w	r0, [r4, #-4]!
 801ad3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad3e:	2000      	movs	r0, #0
 801ad40:	2116      	movs	r1, #22
 801ad42:	4798      	blx	r3
 801ad44:	4605      	mov	r5, r0
 801ad46:	4620      	mov	r0, r4
 801ad48:	f003 fde2 	bl	801e910 <GUI_ALLOC_UnlockH>
 801ad4c:	b11d      	cbz	r5, 801ad56 <GUI_MEMDEV__WriteToActiveAt+0x32>
 801ad4e:	4638      	mov	r0, r7
 801ad50:	4631      	mov	r1, r6
 801ad52:	4642      	mov	r2, r8
 801ad54:	47a8      	blx	r5
 801ad56:	b002      	add	sp, #8
 801ad58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ad5c <GUI_MEMDEV__CreateFixed>:
 801ad5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad60:	4e3e      	ldr	r6, [pc, #248]	; (801ae5c <GUI_MEMDEV__CreateFixed+0x100>)
 801ad62:	b087      	sub	sp, #28
 801ad64:	461d      	mov	r5, r3
 801ad66:	6833      	ldr	r3, [r6, #0]
 801ad68:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801ad6a:	7c5b      	ldrb	r3, [r3, #17]
 801ad6c:	4683      	mov	fp, r0
 801ad6e:	468a      	mov	sl, r1
 801ad70:	4690      	mov	r8, r2
 801ad72:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ad74:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ad76:	2200      	movs	r2, #0
 801ad78:	f002 ff6c 	bl	801dc54 <GUI_DEVICE_Create>
 801ad7c:	4604      	mov	r4, r0
 801ad7e:	2800      	cmp	r0, #0
 801ad80:	d033      	beq.n	801adea <GUI_MEMDEV__CreateFixed+0x8e>
 801ad82:	6903      	ldr	r3, [r0, #16]
 801ad84:	689b      	ldr	r3, [r3, #8]
 801ad86:	4798      	blx	r3
 801ad88:	f001 f8b7 	bl	801befa <LCD__GetBPPDevice>
 801ad8c:	fb08 f600 	mul.w	r6, r8, r0
 801ad90:	9003      	str	r0, [sp, #12]
 801ad92:	3607      	adds	r6, #7
 801ad94:	f003 ff6a 	bl	801ec6c <GUI_ALLOC_RequestSize>
 801ad98:	f017 0901 	ands.w	r9, r7, #1
 801ad9c:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 801ada0:	d104      	bne.n	801adac <GUI_MEMDEV__CreateFixed+0x50>
 801ada2:	2304      	movs	r3, #4
 801ada4:	fb90 f0f3 	sdiv	r0, r0, r3
 801ada8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801adac:	2d00      	cmp	r5, #0
 801adae:	dc09      	bgt.n	801adc4 <GUI_MEMDEV__CreateFixed+0x68>
 801adb0:	b11e      	cbz	r6, 801adba <GUI_MEMDEV__CreateFixed+0x5e>
 801adb2:	3818      	subs	r0, #24
 801adb4:	fbb0 f0f6 	udiv	r0, r0, r6
 801adb8:	e000      	b.n	801adbc <GUI_MEMDEV__CreateFixed+0x60>
 801adba:	4630      	mov	r0, r6
 801adbc:	426d      	negs	r5, r5
 801adbe:	42a8      	cmp	r0, r5
 801adc0:	bfb8      	it	lt
 801adc2:	4605      	movlt	r5, r0
 801adc4:	f1b9 0f00 	cmp.w	r9, #0
 801adc8:	d109      	bne.n	801adde <GUI_MEMDEV__CreateFixed+0x82>
 801adca:	f8cd 9000 	str.w	r9, [sp]
 801adce:	4658      	mov	r0, fp
 801add0:	4651      	mov	r1, sl
 801add2:	4642      	mov	r2, r8
 801add4:	462b      	mov	r3, r5
 801add6:	f005 ff2b 	bl	8020c30 <GUI_USAGE_BM_Create>
 801adda:	4607      	mov	r7, r0
 801addc:	e000      	b.n	801ade0 <GUI_MEMDEV__CreateFixed+0x84>
 801adde:	2700      	movs	r7, #0
 801ade0:	2d00      	cmp	r5, #0
 801ade2:	dc04      	bgt.n	801adee <GUI_MEMDEV__CreateFixed+0x92>
 801ade4:	4620      	mov	r0, r4
 801ade6:	f002 ff33 	bl	801dc50 <GUI_DEVICE_Delete>
 801adea:	2000      	movs	r0, #0
 801adec:	e032      	b.n	801ae54 <GUI_MEMDEV__CreateFixed+0xf8>
 801adee:	fb06 f005 	mul.w	r0, r6, r5
 801adf2:	3018      	adds	r0, #24
 801adf4:	f1b9 0f00 	cmp.w	r9, #0
 801adf8:	d002      	beq.n	801ae00 <GUI_MEMDEV__CreateFixed+0xa4>
 801adfa:	f003 ffc3 	bl	801ed84 <GUI_ALLOC_AllocNoInit>
 801adfe:	e001      	b.n	801ae04 <GUI_MEMDEV__CreateFixed+0xa8>
 801ae00:	f004 f812 	bl	801ee28 <GUI_ALLOC_AllocZero>
 801ae04:	4681      	mov	r9, r0
 801ae06:	b940      	cbnz	r0, 801ae1a <GUI_MEMDEV__CreateFixed+0xbe>
 801ae08:	4620      	mov	r0, r4
 801ae0a:	f002 ff21 	bl	801dc50 <GUI_DEVICE_Delete>
 801ae0e:	2f00      	cmp	r7, #0
 801ae10:	d0eb      	beq.n	801adea <GUI_MEMDEV__CreateFixed+0x8e>
 801ae12:	4638      	mov	r0, r7
 801ae14:	f003 fd9c 	bl	801e950 <GUI_ALLOC_Free>
 801ae18:	e01b      	b.n	801ae52 <GUI_MEMDEV__CreateFixed+0xf6>
 801ae1a:	f003 fd6b 	bl	801e8f4 <GUI_ALLOC_LockH>
 801ae1e:	4603      	mov	r3, r0
 801ae20:	a806      	add	r0, sp, #24
 801ae22:	9a03      	ldr	r2, [sp, #12]
 801ae24:	f840 3d04 	str.w	r3, [r0, #-4]!
 801ae28:	611a      	str	r2, [r3, #16]
 801ae2a:	601c      	str	r4, [r3, #0]
 801ae2c:	f8a3 b004 	strh.w	fp, [r3, #4]
 801ae30:	f8a3 a006 	strh.w	sl, [r3, #6]
 801ae34:	f8a3 8008 	strh.w	r8, [r3, #8]
 801ae38:	815d      	strh	r5, [r3, #10]
 801ae3a:	60de      	str	r6, [r3, #12]
 801ae3c:	615f      	str	r7, [r3, #20]
 801ae3e:	f003 fd67 	bl	801e910 <GUI_ALLOC_UnlockH>
 801ae42:	4a06      	ldr	r2, [pc, #24]	; (801ae5c <GUI_MEMDEV__CreateFixed+0x100>)
 801ae44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ae46:	6123      	str	r3, [r4, #16]
 801ae48:	6813      	ldr	r3, [r2, #0]
 801ae4a:	f8c4 9008 	str.w	r9, [r4, #8]
 801ae4e:	7c5b      	ldrb	r3, [r3, #17]
 801ae50:	61a3      	str	r3, [r4, #24]
 801ae52:	4648      	mov	r0, r9
 801ae54:	b007      	add	sp, #28
 801ae56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae5a:	bf00      	nop
 801ae5c:	20000114 	.word	0x20000114

0801ae60 <GUI_MEMDEV_GetBitsPerPixel>:
 801ae60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ae62:	4605      	mov	r5, r0
 801ae64:	b170      	cbz	r0, 801ae84 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 801ae66:	f003 fd45 	bl	801e8f4 <GUI_ALLOC_LockH>
 801ae6a:	6803      	ldr	r3, [r0, #0]
 801ae6c:	ac02      	add	r4, sp, #8
 801ae6e:	691b      	ldr	r3, [r3, #16]
 801ae70:	f844 0d04 	str.w	r0, [r4, #-4]!
 801ae74:	689b      	ldr	r3, [r3, #8]
 801ae76:	4798      	blx	r3
 801ae78:	f001 f83f 	bl	801befa <LCD__GetBPPDevice>
 801ae7c:	4605      	mov	r5, r0
 801ae7e:	4620      	mov	r0, r4
 801ae80:	f003 fd46 	bl	801e910 <GUI_ALLOC_UnlockH>
 801ae84:	4628      	mov	r0, r5
 801ae86:	b003      	add	sp, #12
 801ae88:	bd30      	pop	{r4, r5, pc}
	...

0801ae8c <GUI_MEMDEV_Delete>:
 801ae8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ae8e:	4604      	mov	r4, r0
 801ae90:	b1d0      	cbz	r0, 801aec8 <GUI_MEMDEV_Delete+0x3c>
 801ae92:	4b0e      	ldr	r3, [pc, #56]	; (801aecc <GUI_MEMDEV_Delete+0x40>)
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ae98:	4283      	cmp	r3, r0
 801ae9a:	d101      	bne.n	801aea0 <GUI_MEMDEV_Delete+0x14>
 801ae9c:	f001 ff7a 	bl	801cd94 <GUI_SelectLCD>
 801aea0:	4620      	mov	r0, r4
 801aea2:	f003 fd27 	bl	801e8f4 <GUI_ALLOC_LockH>
 801aea6:	9001      	str	r0, [sp, #4]
 801aea8:	6940      	ldr	r0, [r0, #20]
 801aeaa:	b108      	cbz	r0, 801aeb0 <GUI_MEMDEV_Delete+0x24>
 801aeac:	f005 feec 	bl	8020c88 <GUI_USAGE_DecUseCnt>
 801aeb0:	ad02      	add	r5, sp, #8
 801aeb2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801aeb6:	6818      	ldr	r0, [r3, #0]
 801aeb8:	f002 feca 	bl	801dc50 <GUI_DEVICE_Delete>
 801aebc:	4628      	mov	r0, r5
 801aebe:	f003 fd27 	bl	801e910 <GUI_ALLOC_UnlockH>
 801aec2:	4620      	mov	r0, r4
 801aec4:	f003 fd44 	bl	801e950 <GUI_ALLOC_Free>
 801aec8:	b003      	add	sp, #12
 801aeca:	bd30      	pop	{r4, r5, pc}
 801aecc:	20000114 	.word	0x20000114

0801aed0 <GUI_MEMDEV_CreateEx>:
 801aed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aed4:	469a      	mov	sl, r3
 801aed6:	4b19      	ldr	r3, [pc, #100]	; (801af3c <GUI_MEMDEV_CreateEx+0x6c>)
 801aed8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	4607      	mov	r7, r0
 801aede:	7c58      	ldrb	r0, [r3, #17]
 801aee0:	4b17      	ldr	r3, [pc, #92]	; (801af40 <GUI_MEMDEV_CreateEx+0x70>)
 801aee2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 801aee6:	4688      	mov	r8, r1
 801aee8:	4691      	mov	r9, r2
 801aeea:	68e3      	ldr	r3, [r4, #12]
 801aeec:	681b      	ldr	r3, [r3, #0]
 801aeee:	2b04      	cmp	r3, #4
 801aef0:	d006      	beq.n	801af00 <GUI_MEMDEV_CreateEx+0x30>
 801aef2:	6824      	ldr	r4, [r4, #0]
 801aef4:	2c00      	cmp	r4, #0
 801aef6:	d1f8      	bne.n	801aeea <GUI_MEMDEV_CreateEx+0x1a>
 801aef8:	f002 fe9a 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 801aefc:	4604      	mov	r4, r0
 801aefe:	b130      	cbz	r0, 801af0e <GUI_MEMDEV_CreateEx+0x3e>
 801af00:	68e3      	ldr	r3, [r4, #12]
 801af02:	4620      	mov	r0, r4
 801af04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af06:	2101      	movs	r1, #1
 801af08:	4798      	blx	r3
 801af0a:	4606      	mov	r6, r0
 801af0c:	b908      	cbnz	r0, 801af12 <GUI_MEMDEV_CreateEx+0x42>
 801af0e:	2000      	movs	r0, #0
 801af10:	e010      	b.n	801af34 <GUI_MEMDEV_CreateEx+0x64>
 801af12:	6924      	ldr	r4, [r4, #16]
 801af14:	68a3      	ldr	r3, [r4, #8]
 801af16:	4798      	blx	r3
 801af18:	3001      	adds	r0, #1
 801af1a:	bf04      	itt	eq
 801af1c:	f045 0501 	orreq.w	r5, r5, #1
 801af20:	4c08      	ldreq	r4, [pc, #32]	; (801af44 <GUI_MEMDEV_CreateEx+0x74>)
 801af22:	9402      	str	r4, [sp, #8]
 801af24:	e88d 0060 	stmia.w	sp, {r5, r6}
 801af28:	4638      	mov	r0, r7
 801af2a:	4641      	mov	r1, r8
 801af2c:	464a      	mov	r2, r9
 801af2e:	4653      	mov	r3, sl
 801af30:	f7ff ff14 	bl	801ad5c <GUI_MEMDEV__CreateFixed>
 801af34:	b004      	add	sp, #16
 801af36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af3a:	bf00      	nop
 801af3c:	20000114 	.word	0x20000114
 801af40:	2002c5cc 	.word	0x2002c5cc
 801af44:	0812e064 	.word	0x0812e064

0801af48 <GUI_MEMDEV_Select>:
 801af48:	4b11      	ldr	r3, [pc, #68]	; (801af90 <GUI_MEMDEV_Select+0x48>)
 801af4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801af4c:	681a      	ldr	r2, [r3, #0]
 801af4e:	4604      	mov	r4, r0
 801af50:	6e16      	ldr	r6, [r2, #96]	; 0x60
 801af52:	461f      	mov	r7, r3
 801af54:	b910      	cbnz	r0, 801af5c <GUI_MEMDEV_Select+0x14>
 801af56:	f001 ff1d 	bl	801cd94 <GUI_SelectLCD>
 801af5a:	e016      	b.n	801af8a <GUI_MEMDEV_Select+0x42>
 801af5c:	b10e      	cbz	r6, 801af62 <GUI_MEMDEV_Select+0x1a>
 801af5e:	f001 ff19 	bl	801cd94 <GUI_SelectLCD>
 801af62:	f7fe ff37 	bl	8019dd4 <WM_Deactivate>
 801af66:	4620      	mov	r0, r4
 801af68:	f003 fcc4 	bl	801e8f4 <GUI_ALLOC_LockH>
 801af6c:	ad02      	add	r5, sp, #8
 801af6e:	683b      	ldr	r3, [r7, #0]
 801af70:	f845 0d04 	str.w	r0, [r5, #-4]!
 801af74:	661c      	str	r4, [r3, #96]	; 0x60
 801af76:	6800      	ldr	r0, [r0, #0]
 801af78:	f002 fea8 	bl	801dccc <GUI_DEVICE_Link>
 801af7c:	4628      	mov	r0, r5
 801af7e:	f003 fcc7 	bl	801e910 <GUI_ALLOC_UnlockH>
 801af82:	f000 fe21 	bl	801bbc8 <LCD_UpdateColorIndices>
 801af86:	f001 fa79 	bl	801c47c <LCD_SetClipRectMax>
 801af8a:	4630      	mov	r0, r6
 801af8c:	b003      	add	sp, #12
 801af8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af90:	20000114 	.word	0x20000114

0801af94 <GUI_MEMDEV_CopyToLCDAt>:
 801af94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801af98:	460c      	mov	r4, r1
 801af9a:	b085      	sub	sp, #20
 801af9c:	4615      	mov	r5, r2
 801af9e:	4606      	mov	r6, r0
 801afa0:	2800      	cmp	r0, #0
 801afa2:	d041      	beq.n	801b028 <GUI_MEMDEV_CopyToLCDAt+0x94>
 801afa4:	2000      	movs	r0, #0
 801afa6:	f001 fe9d 	bl	801cce4 <GUI_SetDrawMode>
 801afaa:	4b21      	ldr	r3, [pc, #132]	; (801b030 <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	4607      	mov	r7, r0
 801afb0:	4630      	mov	r0, r6
 801afb2:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 801afb6:	f003 fc9d 	bl	801e8f4 <GUI_ALLOC_LockH>
 801afba:	6803      	ldr	r3, [r0, #0]
 801afbc:	9001      	str	r0, [sp, #4]
 801afbe:	6998      	ldr	r0, [r3, #24]
 801afc0:	f001 fed2 	bl	801cd68 <GUI_SelectLayer>
 801afc4:	4b1b      	ldr	r3, [pc, #108]	; (801b034 <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 801afc6:	429c      	cmp	r4, r3
 801afc8:	9b01      	ldr	r3, [sp, #4]
 801afca:	bf04      	itt	eq
 801afcc:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 801afd0:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 801afd4:	891a      	ldrh	r2, [r3, #8]
 801afd6:	895b      	ldrh	r3, [r3, #10]
 801afd8:	f8ad 4008 	strh.w	r4, [sp, #8]
 801afdc:	3a01      	subs	r2, #1
 801afde:	3b01      	subs	r3, #1
 801afe0:	4422      	add	r2, r4
 801afe2:	442b      	add	r3, r5
 801afe4:	4681      	mov	r9, r0
 801afe6:	f8ad 200c 	strh.w	r2, [sp, #12]
 801afea:	f8ad 300e 	strh.w	r3, [sp, #14]
 801afee:	f8ad 500a 	strh.w	r5, [sp, #10]
 801aff2:	f7fe fee7 	bl	8019dc4 <WM_Activate>
 801aff6:	a801      	add	r0, sp, #4
 801aff8:	f003 fc8a 	bl	801e910 <GUI_ALLOC_UnlockH>
 801affc:	a802      	add	r0, sp, #8
 801affe:	f7fe fd0d 	bl	8019a1c <WM__InitIVRSearch>
 801b002:	b948      	cbnz	r0, 801b018 <GUI_MEMDEV_CopyToLCDAt+0x84>
 801b004:	4648      	mov	r0, r9
 801b006:	f001 feaf 	bl	801cd68 <GUI_SelectLayer>
 801b00a:	4640      	mov	r0, r8
 801b00c:	f7ff ff9c 	bl	801af48 <GUI_MEMDEV_Select>
 801b010:	4638      	mov	r0, r7
 801b012:	f001 fe67 	bl	801cce4 <GUI_SetDrawMode>
 801b016:	e007      	b.n	801b028 <GUI_MEMDEV_CopyToLCDAt+0x94>
 801b018:	4630      	mov	r0, r6
 801b01a:	4621      	mov	r1, r4
 801b01c:	462a      	mov	r2, r5
 801b01e:	f005 f8d3 	bl	80201c8 <GUI_MEMDEV__WriteToActiveOpaque>
 801b022:	f7fe fc39 	bl	8019898 <WM__GetNextIVR>
 801b026:	e7ec      	b.n	801b002 <GUI_MEMDEV_CopyToLCDAt+0x6e>
 801b028:	b005      	add	sp, #20
 801b02a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b02e:	bf00      	nop
 801b030:	20000114 	.word	0x20000114
 801b034:	fffff001 	.word	0xfffff001

0801b038 <GUI_MEMDEV_CopyToLCD>:
 801b038:	4901      	ldr	r1, [pc, #4]	; (801b040 <GUI_MEMDEV_CopyToLCD+0x8>)
 801b03a:	460a      	mov	r2, r1
 801b03c:	f7ff bfaa 	b.w	801af94 <GUI_MEMDEV_CopyToLCDAt>
 801b040:	fffff001 	.word	0xfffff001

0801b044 <_GetRect>:
 801b044:	6883      	ldr	r3, [r0, #8]
 801b046:	2200      	movs	r2, #0
 801b048:	800a      	strh	r2, [r1, #0]
 801b04a:	804a      	strh	r2, [r1, #2]
 801b04c:	695a      	ldr	r2, [r3, #20]
 801b04e:	699b      	ldr	r3, [r3, #24]
 801b050:	3a01      	subs	r2, #1
 801b052:	3b01      	subs	r3, #1
 801b054:	808a      	strh	r2, [r1, #4]
 801b056:	80cb      	strh	r3, [r1, #6]
 801b058:	4770      	bx	lr

0801b05a <_SetPixelIndex>:
 801b05a:	b510      	push	{r4, lr}
 801b05c:	6880      	ldr	r0, [r0, #8]
 801b05e:	69c4      	ldr	r4, [r0, #28]
 801b060:	6800      	ldr	r0, [r0, #0]
 801b062:	fb04 1202 	mla	r2, r4, r2, r1
 801b066:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801b06a:	bd10      	pop	{r4, pc}

0801b06c <_GetPixelIndex>:
 801b06c:	6883      	ldr	r3, [r0, #8]
 801b06e:	69d8      	ldr	r0, [r3, #28]
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	fb00 1202 	mla	r2, r0, r2, r1
 801b076:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b07a:	4770      	bx	lr

0801b07c <_XorPixel>:
 801b07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b080:	4604      	mov	r4, r0
 801b082:	460f      	mov	r7, r1
 801b084:	4616      	mov	r6, r2
 801b086:	f7ff fff1 	bl	801b06c <_GetPixelIndex>
 801b08a:	6925      	ldr	r5, [r4, #16]
 801b08c:	68ab      	ldr	r3, [r5, #8]
 801b08e:	4680      	mov	r8, r0
 801b090:	4798      	blx	r3
 801b092:	4639      	mov	r1, r7
 801b094:	ea80 0308 	eor.w	r3, r0, r8
 801b098:	4632      	mov	r2, r6
 801b09a:	4620      	mov	r0, r4
 801b09c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b0a0:	f7ff bfdb 	b.w	801b05a <_SetPixelIndex>

0801b0a4 <_FillRect>:
 801b0a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801b0a8:	6886      	ldr	r6, [r0, #8]
 801b0aa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801b0ac:	6b34      	ldr	r4, [r6, #48]	; 0x30
 801b0ae:	f8df c114 	ldr.w	ip, [pc, #276]	; 801b1c4 <_FillRect+0x120>
 801b0b2:	4689      	mov	r9, r1
 801b0b4:	4692      	mov	sl, r2
 801b0b6:	b144      	cbz	r4, 801b0ca <_FillRect+0x26>
 801b0b8:	9700      	str	r7, [sp, #0]
 801b0ba:	f8dc 5000 	ldr.w	r5, [ip]
 801b0be:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 801b0c0:	682d      	ldr	r5, [r5, #0]
 801b0c2:	9501      	str	r5, [sp, #4]
 801b0c4:	6980      	ldr	r0, [r0, #24]
 801b0c6:	47a0      	blx	r4
 801b0c8:	e079      	b.n	801b1be <_FillRect+0x11a>
 801b0ca:	1a5b      	subs	r3, r3, r1
 801b0cc:	f8dc 1000 	ldr.w	r1, [ip]
 801b0d0:	f891 c010 	ldrb.w	ip, [r1, #16]
 801b0d4:	ebc2 0807 	rsb	r8, r2, r7
 801b0d8:	f01c 0c01 	ands.w	ip, ip, #1
 801b0dc:	f103 0401 	add.w	r4, r3, #1
 801b0e0:	f108 0501 	add.w	r5, r8, #1
 801b0e4:	69f7      	ldr	r7, [r6, #28]
 801b0e6:	d021      	beq.n	801b12c <_FillRect+0x88>
 801b0e8:	6903      	ldr	r3, [r0, #16]
 801b0ea:	689b      	ldr	r3, [r3, #8]
 801b0ec:	4798      	blx	r3
 801b0ee:	69f2      	ldr	r2, [r6, #28]
 801b0f0:	2c00      	cmp	r4, #0
 801b0f2:	d064      	beq.n	801b1be <_FillRect+0x11a>
 801b0f4:	f06f 0c03 	mvn.w	ip, #3
 801b0f8:	fb02 990a 	mla	r9, r2, sl, r9
 801b0fc:	fb0c fc07 	mul.w	ip, ip, r7
 801b100:	fb07 9708 	mla	r7, r7, r8, r9
 801b104:	00bf      	lsls	r7, r7, #2
 801b106:	2d00      	cmp	r5, #0
 801b108:	d059      	beq.n	801b1be <_FillRect+0x11a>
 801b10a:	3d01      	subs	r5, #1
 801b10c:	463b      	mov	r3, r7
 801b10e:	4622      	mov	r2, r4
 801b110:	f8d6 8000 	ldr.w	r8, [r6]
 801b114:	f853 1008 	ldr.w	r1, [r3, r8]
 801b118:	3a01      	subs	r2, #1
 801b11a:	ea81 0100 	eor.w	r1, r1, r0
 801b11e:	f843 1008 	str.w	r1, [r3, r8]
 801b122:	f103 0304 	add.w	r3, r3, #4
 801b126:	d1f3      	bne.n	801b110 <_FillRect+0x6c>
 801b128:	4467      	add	r7, ip
 801b12a:	e7ec      	b.n	801b106 <_FillRect+0x62>
 801b12c:	6830      	ldr	r0, [r6, #0]
 801b12e:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 801b130:	fb07 9202 	mla	r2, r7, r2, r9
 801b134:	2c0f      	cmp	r4, #15
 801b136:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801b13a:	6808      	ldr	r0, [r1, #0]
 801b13c:	d92f      	bls.n	801b19e <_FillRect+0xfa>
 801b13e:	f1a3 0a0f 	sub.w	sl, r3, #15
 801b142:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 801b146:	ea4f 0987 	mov.w	r9, r7, lsl #2
 801b14a:	f108 4180 	add.w	r1, r8, #1073741824	; 0x40000000
 801b14e:	f10a 0a01 	add.w	sl, sl, #1
 801b152:	fb09 2101 	mla	r1, r9, r1, r2
 801b156:	ea4f 1a8a 	mov.w	sl, sl, lsl #6
 801b15a:	462e      	mov	r6, r5
 801b15c:	4662      	mov	r2, ip
 801b15e:	b1e6      	cbz	r6, 801b19a <_FillRect+0xf6>
 801b160:	4622      	mov	r2, r4
 801b162:	460b      	mov	r3, r1
 801b164:	3a10      	subs	r2, #16
 801b166:	2a0f      	cmp	r2, #15
 801b168:	6018      	str	r0, [r3, #0]
 801b16a:	6058      	str	r0, [r3, #4]
 801b16c:	6098      	str	r0, [r3, #8]
 801b16e:	60d8      	str	r0, [r3, #12]
 801b170:	6118      	str	r0, [r3, #16]
 801b172:	6158      	str	r0, [r3, #20]
 801b174:	6198      	str	r0, [r3, #24]
 801b176:	61d8      	str	r0, [r3, #28]
 801b178:	6218      	str	r0, [r3, #32]
 801b17a:	6258      	str	r0, [r3, #36]	; 0x24
 801b17c:	6298      	str	r0, [r3, #40]	; 0x28
 801b17e:	62d8      	str	r0, [r3, #44]	; 0x2c
 801b180:	6318      	str	r0, [r3, #48]	; 0x30
 801b182:	6358      	str	r0, [r3, #52]	; 0x34
 801b184:	6398      	str	r0, [r3, #56]	; 0x38
 801b186:	63d8      	str	r0, [r3, #60]	; 0x3c
 801b188:	f103 0340 	add.w	r3, r3, #64	; 0x40
 801b18c:	d8ea      	bhi.n	801b164 <_FillRect+0xc0>
 801b18e:	eb01 020a 	add.w	r2, r1, sl
 801b192:	3e01      	subs	r6, #1
 801b194:	ebc9 0101 	rsb	r1, r9, r1
 801b198:	e7e1      	b.n	801b15e <_FillRect+0xba>
 801b19a:	f004 040f 	and.w	r4, r4, #15
 801b19e:	b174      	cbz	r4, 801b1be <_FillRect+0x11a>
 801b1a0:	00bf      	lsls	r7, r7, #2
 801b1a2:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 801b1a6:	fb07 2208 	mla	r2, r7, r8, r2
 801b1aa:	b145      	cbz	r5, 801b1be <_FillRect+0x11a>
 801b1ac:	4611      	mov	r1, r2
 801b1ae:	4623      	mov	r3, r4
 801b1b0:	3b01      	subs	r3, #1
 801b1b2:	f841 0b04 	str.w	r0, [r1], #4
 801b1b6:	d1fb      	bne.n	801b1b0 <_FillRect+0x10c>
 801b1b8:	3d01      	subs	r5, #1
 801b1ba:	1bd2      	subs	r2, r2, r7
 801b1bc:	e7f5      	b.n	801b1aa <_FillRect+0x106>
 801b1be:	b002      	add	sp, #8
 801b1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b1c4:	20000114 	.word	0x20000114

0801b1c8 <_DrawHLine>:
 801b1c8:	b507      	push	{r0, r1, r2, lr}
 801b1ca:	9200      	str	r2, [sp, #0]
 801b1cc:	f7ff ff6a 	bl	801b0a4 <_FillRect>
 801b1d0:	b003      	add	sp, #12
 801b1d2:	f85d fb04 	ldr.w	pc, [sp], #4

0801b1d6 <_DrawVLine>:
 801b1d6:	b507      	push	{r0, r1, r2, lr}
 801b1d8:	9300      	str	r3, [sp, #0]
 801b1da:	460b      	mov	r3, r1
 801b1dc:	f7ff ff62 	bl	801b0a4 <_FillRect>
 801b1e0:	b003      	add	sp, #12
 801b1e2:	f85d fb04 	ldr.w	pc, [sp], #4

0801b1e6 <_GetDevProp>:
 801b1e6:	3901      	subs	r1, #1
 801b1e8:	6883      	ldr	r3, [r0, #8]
 801b1ea:	290d      	cmp	r1, #13
 801b1ec:	d814      	bhi.n	801b218 <_GetDevProp+0x32>
 801b1ee:	e8df f001 	tbb	[pc, r1]
 801b1f2:	0b09      	.short	0x0b09
 801b1f4:	13130f0d 	.word	0x13130f0d
 801b1f8:	11160713 	.word	0x11160713
 801b1fc:	16161611 	.word	0x16161611
 801b200:	2020      	movs	r0, #32
 801b202:	4770      	bx	lr
 801b204:	68d8      	ldr	r0, [r3, #12]
 801b206:	4770      	bx	lr
 801b208:	6918      	ldr	r0, [r3, #16]
 801b20a:	4770      	bx	lr
 801b20c:	6958      	ldr	r0, [r3, #20]
 801b20e:	4770      	bx	lr
 801b210:	6998      	ldr	r0, [r3, #24]
 801b212:	4770      	bx	lr
 801b214:	2001      	movs	r0, #1
 801b216:	4770      	bx	lr
 801b218:	f04f 30ff 	mov.w	r0, #4294967295
 801b21c:	4770      	bx	lr
 801b21e:	2000      	movs	r0, #0
 801b220:	4770      	bx	lr
	...

0801b224 <_GetDevData>:
 801b224:	4802      	ldr	r0, [pc, #8]	; (801b230 <_GetDevData+0xc>)
 801b226:	2901      	cmp	r1, #1
 801b228:	bf18      	it	ne
 801b22a:	2000      	movne	r0, #0
 801b22c:	4770      	bx	lr
 801b22e:	bf00      	nop
 801b230:	0811e4dc 	.word	0x0811e4dc

0801b234 <_ReadRect>:
 801b234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b238:	460f      	mov	r7, r1
 801b23a:	6881      	ldr	r1, [r0, #8]
 801b23c:	69c8      	ldr	r0, [r1, #28]
 801b23e:	f06f 0903 	mvn.w	r9, #3
 801b242:	fb00 7502 	mla	r5, r0, r2, r7
 801b246:	1bdb      	subs	r3, r3, r7
 801b248:	00ae      	lsls	r6, r5, #2
 801b24a:	fb09 fc00 	mul.w	ip, r9, r0
 801b24e:	fb09 f505 	mul.w	r5, r9, r5
 801b252:	f103 0901 	add.w	r9, r3, #1
 801b256:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801b25a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 801b25e:	1c5f      	adds	r7, r3, #1
 801b260:	4630      	mov	r0, r6
 801b262:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801b266:	680c      	ldr	r4, [r1, #0]
 801b268:	44aa      	add	sl, r5
 801b26a:	f850 b004 	ldr.w	fp, [r0, r4]
 801b26e:	f84a b000 	str.w	fp, [sl, r0]
 801b272:	3f01      	subs	r7, #1
 801b274:	f100 0004 	add.w	r0, r0, #4
 801b278:	d1f3      	bne.n	801b262 <_ReadRect+0x2e>
 801b27a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801b27c:	444c      	add	r4, r9
 801b27e:	940a      	str	r4, [sp, #40]	; 0x28
 801b280:	3201      	adds	r2, #1
 801b282:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b284:	1e50      	subs	r0, r2, #1
 801b286:	42a0      	cmp	r0, r4
 801b288:	4446      	add	r6, r8
 801b28a:	4465      	add	r5, ip
 801b28c:	dbe7      	blt.n	801b25e <_ReadRect+0x2a>
 801b28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b294 <_GetDevFunc>:
 801b294:	3901      	subs	r1, #1
 801b296:	2924      	cmp	r1, #36	; 0x24
 801b298:	d844      	bhi.n	801b324 <_GetDevFunc+0x90>
 801b29a:	e8df f001 	tbb	[pc, r1]
 801b29e:	1b41      	.short	0x1b41
 801b2a0:	1d431917 	.word	0x1d431917
 801b2a4:	45134343 	.word	0x45134343
 801b2a8:	21431f15 	.word	0x21431f15
 801b2ac:	43434323 	.word	0x43434323
 801b2b0:	2f292725 	.word	0x2f292725
 801b2b4:	43314343 	.word	0x43314343
 801b2b8:	43434343 	.word	0x43434343
 801b2bc:	2d2b3543 	.word	0x2d2b3543
 801b2c0:	433d      	.short	0x433d
 801b2c2:	39          	.byte	0x39
 801b2c3:	00          	.byte	0x00
 801b2c4:	4819      	ldr	r0, [pc, #100]	; (801b32c <_GetDevFunc+0x98>)
 801b2c6:	4770      	bx	lr
 801b2c8:	4819      	ldr	r0, [pc, #100]	; (801b330 <_GetDevFunc+0x9c>)
 801b2ca:	4770      	bx	lr
 801b2cc:	4819      	ldr	r0, [pc, #100]	; (801b334 <_GetDevFunc+0xa0>)
 801b2ce:	4770      	bx	lr
 801b2d0:	4819      	ldr	r0, [pc, #100]	; (801b338 <_GetDevFunc+0xa4>)
 801b2d2:	4770      	bx	lr
 801b2d4:	4819      	ldr	r0, [pc, #100]	; (801b33c <_GetDevFunc+0xa8>)
 801b2d6:	4770      	bx	lr
 801b2d8:	4819      	ldr	r0, [pc, #100]	; (801b340 <_GetDevFunc+0xac>)
 801b2da:	4770      	bx	lr
 801b2dc:	4819      	ldr	r0, [pc, #100]	; (801b344 <_GetDevFunc+0xb0>)
 801b2de:	4770      	bx	lr
 801b2e0:	4819      	ldr	r0, [pc, #100]	; (801b348 <_GetDevFunc+0xb4>)
 801b2e2:	4770      	bx	lr
 801b2e4:	4819      	ldr	r0, [pc, #100]	; (801b34c <_GetDevFunc+0xb8>)
 801b2e6:	4770      	bx	lr
 801b2e8:	4819      	ldr	r0, [pc, #100]	; (801b350 <_GetDevFunc+0xbc>)
 801b2ea:	4770      	bx	lr
 801b2ec:	4819      	ldr	r0, [pc, #100]	; (801b354 <_GetDevFunc+0xc0>)
 801b2ee:	4770      	bx	lr
 801b2f0:	4819      	ldr	r0, [pc, #100]	; (801b358 <_GetDevFunc+0xc4>)
 801b2f2:	4770      	bx	lr
 801b2f4:	4819      	ldr	r0, [pc, #100]	; (801b35c <_GetDevFunc+0xc8>)
 801b2f6:	4770      	bx	lr
 801b2f8:	4819      	ldr	r0, [pc, #100]	; (801b360 <_GetDevFunc+0xcc>)
 801b2fa:	4770      	bx	lr
 801b2fc:	4819      	ldr	r0, [pc, #100]	; (801b364 <_GetDevFunc+0xd0>)
 801b2fe:	4770      	bx	lr
 801b300:	6803      	ldr	r3, [r0, #0]
 801b302:	689b      	ldr	r3, [r3, #8]
 801b304:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801b306:	4770      	bx	lr
 801b308:	6803      	ldr	r3, [r0, #0]
 801b30a:	689b      	ldr	r3, [r3, #8]
 801b30c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801b30e:	4770      	bx	lr
 801b310:	6803      	ldr	r3, [r0, #0]
 801b312:	689b      	ldr	r3, [r3, #8]
 801b314:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801b316:	4770      	bx	lr
 801b318:	6803      	ldr	r3, [r0, #0]
 801b31a:	689b      	ldr	r3, [r3, #8]
 801b31c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801b31e:	4770      	bx	lr
 801b320:	4811      	ldr	r0, [pc, #68]	; (801b368 <_GetDevFunc+0xd4>)
 801b322:	4770      	bx	lr
 801b324:	2000      	movs	r0, #0
 801b326:	4770      	bx	lr
 801b328:	4810      	ldr	r0, [pc, #64]	; (801b36c <_GetDevFunc+0xd8>)
 801b32a:	4770      	bx	lr
 801b32c:	0801b9ff 	.word	0x0801b9ff
 801b330:	0801bb61 	.word	0x0801bb61
 801b334:	0801ba7b 	.word	0x0801ba7b
 801b338:	0801b953 	.word	0x0801b953
 801b33c:	0801b9d7 	.word	0x0801b9d7
 801b340:	0801b9af 	.word	0x0801b9af
 801b344:	0801b995 	.word	0x0801b995
 801b348:	0801b3bd 	.word	0x0801b3bd
 801b34c:	0801b3b3 	.word	0x0801b3b3
 801b350:	0801b39d 	.word	0x0801b39d
 801b354:	0801b387 	.word	0x0801b387
 801b358:	0801b371 	.word	0x0801b371
 801b35c:	0801ba29 	.word	0x0801ba29
 801b360:	0801b96f 	.word	0x0801b96f
 801b364:	0801b90d 	.word	0x0801b90d
 801b368:	0801b235 	.word	0x0801b235
 801b36c:	0801bba3 	.word	0x0801bba3

0801b370 <_SetChroma>:
 801b370:	b507      	push	{r0, r1, r2, lr}
 801b372:	6980      	ldr	r0, [r0, #24]
 801b374:	e88d 0006 	stmia.w	sp, {r1, r2}
 801b378:	210d      	movs	r1, #13
 801b37a:	466a      	mov	r2, sp
 801b37c:	f7fd f842 	bl	8018404 <LCD_X_DisplayDriver>
 801b380:	b003      	add	sp, #12
 801b382:	f85d fb04 	ldr.w	pc, [sp], #4

0801b386 <_SetChromaMode>:
 801b386:	b507      	push	{r0, r1, r2, lr}
 801b388:	aa02      	add	r2, sp, #8
 801b38a:	6980      	ldr	r0, [r0, #24]
 801b38c:	f842 1d04 	str.w	r1, [r2, #-4]!
 801b390:	210c      	movs	r1, #12
 801b392:	f7fd f837 	bl	8018404 <LCD_X_DisplayDriver>
 801b396:	b003      	add	sp, #12
 801b398:	f85d fb04 	ldr.w	pc, [sp], #4

0801b39c <_SetAlphaMode>:
 801b39c:	b507      	push	{r0, r1, r2, lr}
 801b39e:	aa02      	add	r2, sp, #8
 801b3a0:	6980      	ldr	r0, [r0, #24]
 801b3a2:	f842 1d04 	str.w	r1, [r2, #-4]!
 801b3a6:	210b      	movs	r1, #11
 801b3a8:	f7fd f82c 	bl	8018404 <LCD_X_DisplayDriver>
 801b3ac:	b003      	add	sp, #12
 801b3ae:	f85d fb04 	ldr.w	pc, [sp], #4

0801b3b2 <_Off>:
 801b3b2:	6980      	ldr	r0, [r0, #24]
 801b3b4:	2106      	movs	r1, #6
 801b3b6:	2200      	movs	r2, #0
 801b3b8:	f7fd b824 	b.w	8018404 <LCD_X_DisplayDriver>

0801b3bc <_On>:
 801b3bc:	6980      	ldr	r0, [r0, #24]
 801b3be:	2105      	movs	r1, #5
 801b3c0:	2200      	movs	r2, #0
 801b3c2:	f7fd b81f 	b.w	8018404 <LCD_X_DisplayDriver>

0801b3c6 <_SetOrg>:
 801b3c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b3ca:	2300      	movs	r3, #0
 801b3cc:	4607      	mov	r7, r0
 801b3ce:	6884      	ldr	r4, [r0, #8]
 801b3d0:	6980      	ldr	r0, [r0, #24]
 801b3d2:	9300      	str	r3, [sp, #0]
 801b3d4:	460d      	mov	r5, r1
 801b3d6:	4616      	mov	r6, r2
 801b3d8:	9301      	str	r3, [sp, #4]
 801b3da:	f000 fcdf 	bl	801bd9c <LCD_GetMirrorXEx>
 801b3de:	4680      	mov	r8, r0
 801b3e0:	69b8      	ldr	r0, [r7, #24]
 801b3e2:	f000 fcde 	bl	801bda2 <LCD_GetMirrorYEx>
 801b3e6:	4681      	mov	r9, r0
 801b3e8:	69b8      	ldr	r0, [r7, #24]
 801b3ea:	f000 fcdd 	bl	801bda8 <LCD_GetSwapXYEx>
 801b3ee:	0080      	lsls	r0, r0, #2
 801b3f0:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 801b3f4:	ea40 0008 	orr.w	r0, r0, r8
 801b3f8:	2807      	cmp	r0, #7
 801b3fa:	d826      	bhi.n	801b44a <_SetOrg+0x84>
 801b3fc:	e8df f000 	tbb	[pc, r0]
 801b400:	0b0f0408 	.word	0x0b0f0408
 801b404:	1b1f1519 	.word	0x1b1f1519
 801b408:	6962      	ldr	r2, [r4, #20]
 801b40a:	68e3      	ldr	r3, [r4, #12]
 801b40c:	1ad3      	subs	r3, r2, r3
 801b40e:	1b5d      	subs	r5, r3, r5
 801b410:	9500      	str	r5, [sp, #0]
 801b412:	9601      	str	r6, [sp, #4]
 801b414:	e019      	b.n	801b44a <_SetOrg+0x84>
 801b416:	6962      	ldr	r2, [r4, #20]
 801b418:	68e3      	ldr	r3, [r4, #12]
 801b41a:	1ad3      	subs	r3, r2, r3
 801b41c:	1b5d      	subs	r5, r3, r5
 801b41e:	69a2      	ldr	r2, [r4, #24]
 801b420:	6923      	ldr	r3, [r4, #16]
 801b422:	9500      	str	r5, [sp, #0]
 801b424:	1ad3      	subs	r3, r2, r3
 801b426:	1b9e      	subs	r6, r3, r6
 801b428:	e7f3      	b.n	801b412 <_SetOrg+0x4c>
 801b42a:	69a2      	ldr	r2, [r4, #24]
 801b42c:	6923      	ldr	r3, [r4, #16]
 801b42e:	1ad3      	subs	r3, r2, r3
 801b430:	1b9e      	subs	r6, r3, r6
 801b432:	9600      	str	r6, [sp, #0]
 801b434:	e008      	b.n	801b448 <_SetOrg+0x82>
 801b436:	69a2      	ldr	r2, [r4, #24]
 801b438:	6923      	ldr	r3, [r4, #16]
 801b43a:	1ad3      	subs	r3, r2, r3
 801b43c:	1b9e      	subs	r6, r3, r6
 801b43e:	6962      	ldr	r2, [r4, #20]
 801b440:	68e3      	ldr	r3, [r4, #12]
 801b442:	9600      	str	r6, [sp, #0]
 801b444:	1ad3      	subs	r3, r2, r3
 801b446:	1b5d      	subs	r5, r3, r5
 801b448:	9501      	str	r5, [sp, #4]
 801b44a:	69b8      	ldr	r0, [r7, #24]
 801b44c:	2103      	movs	r1, #3
 801b44e:	466a      	mov	r2, sp
 801b450:	f7fc ffd8 	bl	8018404 <LCD_X_DisplayDriver>
 801b454:	b003      	add	sp, #12
 801b456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801b45c <_DrawBitmap>:
 801b45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b460:	b08d      	sub	sp, #52	; 0x34
 801b462:	4606      	mov	r6, r0
 801b464:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801b466:	910a      	str	r1, [sp, #40]	; 0x28
 801b468:	2804      	cmp	r0, #4
 801b46a:	469b      	mov	fp, r3
 801b46c:	9209      	str	r2, [sp, #36]	; 0x24
 801b46e:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801b470:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801b472:	68b3      	ldr	r3, [r6, #8]
 801b474:	d011      	beq.n	801b49a <_DrawBitmap+0x3e>
 801b476:	dc09      	bgt.n	801b48c <_DrawBitmap+0x30>
 801b478:	2801      	cmp	r0, #1
 801b47a:	d013      	beq.n	801b4a4 <_DrawBitmap+0x48>
 801b47c:	2802      	cmp	r0, #2
 801b47e:	f040 822d 	bne.w	801b8dc <_DrawBitmap+0x480>
 801b482:	4aab      	ldr	r2, [pc, #684]	; (801b730 <_DrawBitmap+0x2d4>)
 801b484:	6812      	ldr	r2, [r2, #0]
 801b486:	920b      	str	r2, [sp, #44]	; 0x2c
 801b488:	2100      	movs	r1, #0
 801b48a:	e0b8      	b.n	801b5fe <_DrawBitmap+0x1a2>
 801b48c:	2808      	cmp	r0, #8
 801b48e:	f000 8172 	beq.w	801b776 <_DrawBitmap+0x31a>
 801b492:	2820      	cmp	r0, #32
 801b494:	f000 81fb 	beq.w	801b88e <_DrawBitmap+0x432>
 801b498:	e220      	b.n	801b8dc <_DrawBitmap+0x480>
 801b49a:	4aa5      	ldr	r2, [pc, #660]	; (801b730 <_DrawBitmap+0x2d4>)
 801b49c:	6812      	ldr	r2, [r2, #0]
 801b49e:	920b      	str	r2, [sp, #44]	; 0x2c
 801b4a0:	2100      	movs	r1, #0
 801b4a2:	e10a      	b.n	801b6ba <_DrawBitmap+0x25e>
 801b4a4:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 801b4a6:	b90f      	cbnz	r7, 801b4ac <_DrawBitmap+0x50>
 801b4a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b4aa:	e042      	b.n	801b532 <_DrawBitmap+0xd6>
 801b4ac:	4ba0      	ldr	r3, [pc, #640]	; (801b730 <_DrawBitmap+0x2d4>)
 801b4ae:	681b      	ldr	r3, [r3, #0]
 801b4b0:	7c1b      	ldrb	r3, [r3, #16]
 801b4b2:	07db      	lsls	r3, r3, #31
 801b4b4:	d4f8      	bmi.n	801b4a8 <_DrawBitmap+0x4c>
 801b4b6:	981a      	ldr	r0, [sp, #104]	; 0x68
 801b4b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b4ba:	9302      	str	r3, [sp, #8]
 801b4bc:	e88d 0801 	stmia.w	sp, {r0, fp}
 801b4c0:	9818      	ldr	r0, [sp, #96]	; 0x60
 801b4c2:	9003      	str	r0, [sp, #12]
 801b4c4:	9504      	str	r5, [sp, #16]
 801b4c6:	69b0      	ldr	r0, [r6, #24]
 801b4c8:	4623      	mov	r3, r4
 801b4ca:	47b8      	blx	r7
 801b4cc:	e206      	b.n	801b8dc <_DrawBitmap+0x480>
 801b4ce:	4b98      	ldr	r3, [pc, #608]	; (801b730 <_DrawBitmap+0x2d4>)
 801b4d0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b4d8:	7c1b      	ldrb	r3, [r3, #16]
 801b4da:	f8d5 c000 	ldr.w	ip, [r5]
 801b4de:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801b4e2:	68b0      	ldr	r0, [r6, #8]
 801b4e4:	f003 0303 	and.w	r3, r3, #3
 801b4e8:	2b02      	cmp	r3, #2
 801b4ea:	448a      	add	sl, r1
 801b4ec:	d02d      	beq.n	801b54a <_DrawBitmap+0xee>
 801b4ee:	2b03      	cmp	r3, #3
 801b4f0:	d04d      	beq.n	801b58e <_DrawBitmap+0x132>
 801b4f2:	2b01      	cmp	r3, #1
 801b4f4:	d04b      	beq.n	801b58e <_DrawBitmap+0x132>
 801b4f6:	f1c1 0308 	rsb	r3, r1, #8
 801b4fa:	7822      	ldrb	r2, [r4, #0]
 801b4fc:	498d      	ldr	r1, [pc, #564]	; (801b734 <_DrawBitmap+0x2d8>)
 801b4fe:	5c8a      	ldrb	r2, [r1, r2]
 801b500:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b502:	410a      	asrs	r2, r1
 801b504:	69c1      	ldr	r1, [r0, #28]
 801b506:	6800      	ldr	r0, [r0, #0]
 801b508:	fb01 a107 	mla	r1, r1, r7, sl
 801b50c:	eb00 0a81 	add.w	sl, r0, r1, lsl #2
 801b510:	4659      	mov	r1, fp
 801b512:	4620      	mov	r0, r4
 801b514:	f012 0f01 	tst.w	r2, #1
 801b518:	bf0c      	ite	eq
 801b51a:	46e0      	moveq	r8, ip
 801b51c:	46c8      	movne	r8, r9
 801b51e:	3b01      	subs	r3, #1
 801b520:	d00d      	beq.n	801b53e <_DrawBitmap+0xe2>
 801b522:	0852      	lsrs	r2, r2, #1
 801b524:	3901      	subs	r1, #1
 801b526:	f84a 8b04 	str.w	r8, [sl], #4
 801b52a:	d1f3      	bne.n	801b514 <_DrawBitmap+0xb8>
 801b52c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b52e:	3701      	adds	r7, #1
 801b530:	4414      	add	r4, r2
 801b532:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b534:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b536:	1a3b      	subs	r3, r7, r0
 801b538:	428b      	cmp	r3, r1
 801b53a:	dbc8      	blt.n	801b4ce <_DrawBitmap+0x72>
 801b53c:	e1ce      	b.n	801b8dc <_DrawBitmap+0x480>
 801b53e:	7843      	ldrb	r3, [r0, #1]
 801b540:	4a7c      	ldr	r2, [pc, #496]	; (801b734 <_DrawBitmap+0x2d8>)
 801b542:	3001      	adds	r0, #1
 801b544:	5cd2      	ldrb	r2, [r2, r3]
 801b546:	2308      	movs	r3, #8
 801b548:	e7ec      	b.n	801b524 <_DrawBitmap+0xc8>
 801b54a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b54c:	4979      	ldr	r1, [pc, #484]	; (801b734 <_DrawBitmap+0x2d8>)
 801b54e:	f1c2 0308 	rsb	r3, r2, #8
 801b552:	7822      	ldrb	r2, [r4, #0]
 801b554:	5c89      	ldrb	r1, [r1, r2]
 801b556:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b558:	4111      	asrs	r1, r2
 801b55a:	69c2      	ldr	r2, [r0, #28]
 801b55c:	6800      	ldr	r0, [r0, #0]
 801b55e:	fb02 a207 	mla	r2, r2, r7, sl
 801b562:	eb00 0a82 	add.w	sl, r0, r2, lsl #2
 801b566:	4622      	mov	r2, r4
 801b568:	2000      	movs	r0, #0
 801b56a:	f011 0f01 	tst.w	r1, #1
 801b56e:	bf18      	it	ne
 801b570:	f84a 9020 	strne.w	r9, [sl, r0, lsl #2]
 801b574:	3b01      	subs	r3, #1
 801b576:	d001      	beq.n	801b57c <_DrawBitmap+0x120>
 801b578:	0849      	lsrs	r1, r1, #1
 801b57a:	e004      	b.n	801b586 <_DrawBitmap+0x12a>
 801b57c:	7853      	ldrb	r3, [r2, #1]
 801b57e:	496d      	ldr	r1, [pc, #436]	; (801b734 <_DrawBitmap+0x2d8>)
 801b580:	3201      	adds	r2, #1
 801b582:	5cc9      	ldrb	r1, [r1, r3]
 801b584:	2308      	movs	r3, #8
 801b586:	3001      	adds	r0, #1
 801b588:	4558      	cmp	r0, fp
 801b58a:	d1ee      	bne.n	801b56a <_DrawBitmap+0x10e>
 801b58c:	e7ce      	b.n	801b52c <_DrawBitmap+0xd0>
 801b58e:	6933      	ldr	r3, [r6, #16]
 801b590:	689b      	ldr	r3, [r3, #8]
 801b592:	4798      	blx	r3
 801b594:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801b598:	900b      	str	r0, [sp, #44]	; 0x2c
 801b59a:	46d9      	mov	r9, fp
 801b59c:	46a4      	mov	ip, r4
 801b59e:	f89c 1000 	ldrb.w	r1, [ip]
 801b5a2:	2280      	movs	r2, #128	; 0x80
 801b5a4:	fa42 f208 	asr.w	r2, r2, r8
 801b5a8:	eb0a 030b 	add.w	r3, sl, fp
 801b5ac:	4211      	tst	r1, r2
 801b5ae:	ebc9 0303 	rsb	r3, r9, r3
 801b5b2:	d013      	beq.n	801b5dc <_DrawBitmap+0x180>
 801b5b4:	4619      	mov	r1, r3
 801b5b6:	463a      	mov	r2, r7
 801b5b8:	4630      	mov	r0, r6
 801b5ba:	f8cd c01c 	str.w	ip, [sp, #28]
 801b5be:	9308      	str	r3, [sp, #32]
 801b5c0:	f7ff fd54 	bl	801b06c <_GetPixelIndex>
 801b5c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b5c6:	9b08      	ldr	r3, [sp, #32]
 801b5c8:	ea80 0e01 	eor.w	lr, r0, r1
 801b5cc:	463a      	mov	r2, r7
 801b5ce:	4619      	mov	r1, r3
 801b5d0:	4630      	mov	r0, r6
 801b5d2:	4673      	mov	r3, lr
 801b5d4:	f7ff fd41 	bl	801b05a <_SetPixelIndex>
 801b5d8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801b5dc:	f108 0801 	add.w	r8, r8, #1
 801b5e0:	f1b8 0f08 	cmp.w	r8, #8
 801b5e4:	bf04      	itt	eq
 801b5e6:	f10c 0c01 	addeq.w	ip, ip, #1
 801b5ea:	f04f 0800 	moveq.w	r8, #0
 801b5ee:	f1b9 0901 	subs.w	r9, r9, #1
 801b5f2:	d1d4      	bne.n	801b59e <_DrawBitmap+0x142>
 801b5f4:	e79a      	b.n	801b52c <_DrawBitmap+0xd0>
 801b5f6:	b935      	cbnz	r5, 801b606 <_DrawBitmap+0x1aa>
 801b5f8:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801b5fa:	3101      	adds	r1, #1
 801b5fc:	443c      	add	r4, r7
 801b5fe:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801b600:	42b9      	cmp	r1, r7
 801b602:	dbf8      	blt.n	801b5f6 <_DrawBitmap+0x19a>
 801b604:	e16a      	b.n	801b8dc <_DrawBitmap+0x480>
 801b606:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801b60a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b60c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801b60e:	69da      	ldr	r2, [r3, #28]
 801b610:	7826      	ldrb	r6, [r4, #0]
 801b612:	4438      	add	r0, r7
 801b614:	4488      	add	r8, r1
 801b616:	fb02 0808 	mla	r8, r2, r8, r0
 801b61a:	681a      	ldr	r2, [r3, #0]
 801b61c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b61e:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801b622:	7c02      	ldrb	r2, [r0, #16]
 801b624:	f012 0203 	ands.w	r2, r2, #3
 801b628:	46c4      	mov	ip, r8
 801b62a:	d005      	beq.n	801b638 <_DrawBitmap+0x1dc>
 801b62c:	2a02      	cmp	r2, #2
 801b62e:	d1e3      	bne.n	801b5f8 <_DrawBitmap+0x19c>
 801b630:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b632:	9406      	str	r4, [sp, #24]
 801b634:	2000      	movs	r0, #0
 801b636:	e020      	b.n	801b67a <_DrawBitmap+0x21e>
 801b638:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b63a:	4658      	mov	r0, fp
 801b63c:	4627      	mov	r7, r4
 801b63e:	f1c2 0803 	rsb	r8, r2, #3
 801b642:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801b646:	f1c8 0906 	rsb	r9, r8, #6
 801b64a:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 801b64e:	fa4a f909 	asr.w	r9, sl, r9
 801b652:	ea09 0906 	and.w	r9, r9, r6
 801b656:	fa29 f808 	lsr.w	r8, r9, r8
 801b65a:	3201      	adds	r2, #1
 801b65c:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 801b660:	f84c 8b04 	str.w	r8, [ip], #4
 801b664:	2a04      	cmp	r2, #4
 801b666:	d102      	bne.n	801b66e <_DrawBitmap+0x212>
 801b668:	787e      	ldrb	r6, [r7, #1]
 801b66a:	2200      	movs	r2, #0
 801b66c:	3701      	adds	r7, #1
 801b66e:	3801      	subs	r0, #1
 801b670:	d1e5      	bne.n	801b63e <_DrawBitmap+0x1e2>
 801b672:	e7c1      	b.n	801b5f8 <_DrawBitmap+0x19c>
 801b674:	3001      	adds	r0, #1
 801b676:	4558      	cmp	r0, fp
 801b678:	d0be      	beq.n	801b5f8 <_DrawBitmap+0x19c>
 801b67a:	f1c2 0c03 	rsb	ip, r2, #3
 801b67e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 801b682:	f1cc 0906 	rsb	r9, ip, #6
 801b686:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 801b68a:	fa4a f909 	asr.w	r9, sl, r9
 801b68e:	ea09 0906 	and.w	r9, r9, r6
 801b692:	fa39 fc0c 	lsrs.w	ip, r9, ip
 801b696:	bf1c      	itt	ne
 801b698:	f855 702c 	ldrne.w	r7, [r5, ip, lsl #2]
 801b69c:	f848 7020 	strne.w	r7, [r8, r0, lsl #2]
 801b6a0:	3201      	adds	r2, #1
 801b6a2:	2a04      	cmp	r2, #4
 801b6a4:	d1e6      	bne.n	801b674 <_DrawBitmap+0x218>
 801b6a6:	9a06      	ldr	r2, [sp, #24]
 801b6a8:	7856      	ldrb	r6, [r2, #1]
 801b6aa:	3201      	adds	r2, #1
 801b6ac:	9206      	str	r2, [sp, #24]
 801b6ae:	2200      	movs	r2, #0
 801b6b0:	e7e0      	b.n	801b674 <_DrawBitmap+0x218>
 801b6b2:	b935      	cbnz	r5, 801b6c2 <_DrawBitmap+0x266>
 801b6b4:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801b6b6:	3101      	adds	r1, #1
 801b6b8:	443c      	add	r4, r7
 801b6ba:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801b6bc:	42b9      	cmp	r1, r7
 801b6be:	dbf8      	blt.n	801b6b2 <_DrawBitmap+0x256>
 801b6c0:	e10c      	b.n	801b8dc <_DrawBitmap+0x480>
 801b6c2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801b6c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b6c8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801b6ca:	69da      	ldr	r2, [r3, #28]
 801b6cc:	7826      	ldrb	r6, [r4, #0]
 801b6ce:	4438      	add	r0, r7
 801b6d0:	4488      	add	r8, r1
 801b6d2:	fb02 0808 	mla	r8, r2, r8, r0
 801b6d6:	681a      	ldr	r2, [r3, #0]
 801b6d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b6da:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801b6de:	7c02      	ldrb	r2, [r0, #16]
 801b6e0:	f012 0203 	ands.w	r2, r2, #3
 801b6e4:	46c4      	mov	ip, r8
 801b6e6:	d005      	beq.n	801b6f4 <_DrawBitmap+0x298>
 801b6e8:	2a02      	cmp	r2, #2
 801b6ea:	d1e3      	bne.n	801b6b4 <_DrawBitmap+0x258>
 801b6ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b6ee:	9406      	str	r4, [sp, #24]
 801b6f0:	2000      	movs	r0, #0
 801b6f2:	e024      	b.n	801b73e <_DrawBitmap+0x2e2>
 801b6f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b6f6:	4658      	mov	r0, fp
 801b6f8:	4627      	mov	r7, r4
 801b6fa:	f1c2 0801 	rsb	r8, r2, #1
 801b6fe:	ea4f 0888 	mov.w	r8, r8, lsl #2
 801b702:	f1c8 0904 	rsb	r9, r8, #4
 801b706:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 801b70a:	fa4a f909 	asr.w	r9, sl, r9
 801b70e:	ea09 0906 	and.w	r9, r9, r6
 801b712:	fa29 f808 	lsr.w	r8, r9, r8
 801b716:	3201      	adds	r2, #1
 801b718:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 801b71c:	f84c 8b04 	str.w	r8, [ip], #4
 801b720:	2a02      	cmp	r2, #2
 801b722:	d102      	bne.n	801b72a <_DrawBitmap+0x2ce>
 801b724:	787e      	ldrb	r6, [r7, #1]
 801b726:	2200      	movs	r2, #0
 801b728:	3701      	adds	r7, #1
 801b72a:	3801      	subs	r0, #1
 801b72c:	d1e5      	bne.n	801b6fa <_DrawBitmap+0x29e>
 801b72e:	e7c1      	b.n	801b6b4 <_DrawBitmap+0x258>
 801b730:	20000114 	.word	0x20000114
 801b734:	0812ded4 	.word	0x0812ded4
 801b738:	3001      	adds	r0, #1
 801b73a:	4558      	cmp	r0, fp
 801b73c:	d0ba      	beq.n	801b6b4 <_DrawBitmap+0x258>
 801b73e:	f1c2 0c01 	rsb	ip, r2, #1
 801b742:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801b746:	f1cc 0904 	rsb	r9, ip, #4
 801b74a:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 801b74e:	fa4a f909 	asr.w	r9, sl, r9
 801b752:	ea09 0906 	and.w	r9, r9, r6
 801b756:	fa39 fc0c 	lsrs.w	ip, r9, ip
 801b75a:	bf1c      	itt	ne
 801b75c:	f855 702c 	ldrne.w	r7, [r5, ip, lsl #2]
 801b760:	f848 7020 	strne.w	r7, [r8, r0, lsl #2]
 801b764:	3201      	adds	r2, #1
 801b766:	2a02      	cmp	r2, #2
 801b768:	d1e6      	bne.n	801b738 <_DrawBitmap+0x2dc>
 801b76a:	9a06      	ldr	r2, [sp, #24]
 801b76c:	7856      	ldrb	r6, [r2, #1]
 801b76e:	3201      	adds	r2, #1
 801b770:	9206      	str	r2, [sp, #24]
 801b772:	2200      	movs	r2, #0
 801b774:	e7e0      	b.n	801b738 <_DrawBitmap+0x2dc>
 801b776:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 801b778:	f8df c168 	ldr.w	ip, [pc, #360]	; 801b8e4 <_DrawBitmap+0x488>
 801b77c:	b127      	cbz	r7, 801b788 <_DrawBitmap+0x32c>
 801b77e:	f8dc 0000 	ldr.w	r0, [ip]
 801b782:	7c00      	ldrb	r0, [r0, #16]
 801b784:	0780      	lsls	r0, r0, #30
 801b786:	d504      	bpl.n	801b792 <_DrawBitmap+0x336>
 801b788:	f8dc c000 	ldr.w	ip, [ip]
 801b78c:	f04f 0900 	mov.w	r9, #0
 801b790:	e011      	b.n	801b7b6 <_DrawBitmap+0x35a>
 801b792:	2d00      	cmp	r5, #0
 801b794:	d0f8      	beq.n	801b788 <_DrawBitmap+0x32c>
 801b796:	9816      	ldr	r0, [sp, #88]	; 0x58
 801b798:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b79a:	9302      	str	r3, [sp, #8]
 801b79c:	f8cd b000 	str.w	fp, [sp]
 801b7a0:	9001      	str	r0, [sp, #4]
 801b7a2:	9503      	str	r5, [sp, #12]
 801b7a4:	69b0      	ldr	r0, [r6, #24]
 801b7a6:	4623      	mov	r3, r4
 801b7a8:	47b8      	blx	r7
 801b7aa:	e097      	b.n	801b8dc <_DrawBitmap+0x480>
 801b7ac:	b93d      	cbnz	r5, 801b7be <_DrawBitmap+0x362>
 801b7ae:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801b7b0:	f109 0901 	add.w	r9, r9, #1
 801b7b4:	443c      	add	r4, r7
 801b7b6:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801b7b8:	45b9      	cmp	r9, r7
 801b7ba:	dbf7      	blt.n	801b7ac <_DrawBitmap+0x350>
 801b7bc:	e08e      	b.n	801b8dc <_DrawBitmap+0x480>
 801b7be:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b7c0:	69da      	ldr	r2, [r3, #28]
 801b7c2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801b7c4:	4448      	add	r0, r9
 801b7c6:	fb02 7000 	mla	r0, r2, r0, r7
 801b7ca:	681a      	ldr	r2, [r3, #0]
 801b7cc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801b7d0:	f89c 2010 	ldrb.w	r2, [ip, #16]
 801b7d4:	f012 0203 	ands.w	r2, r2, #3
 801b7d8:	4601      	mov	r1, r0
 801b7da:	d003      	beq.n	801b7e4 <_DrawBitmap+0x388>
 801b7dc:	2a02      	cmp	r2, #2
 801b7de:	d1e6      	bne.n	801b7ae <_DrawBitmap+0x352>
 801b7e0:	2100      	movs	r1, #0
 801b7e2:	e04f      	b.n	801b884 <_DrawBitmap+0x428>
 801b7e4:	4658      	mov	r0, fp
 801b7e6:	4622      	mov	r2, r4
 801b7e8:	2807      	cmp	r0, #7
 801b7ea:	dd23      	ble.n	801b834 <_DrawBitmap+0x3d8>
 801b7ec:	7816      	ldrb	r6, [r2, #0]
 801b7ee:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801b7f2:	600e      	str	r6, [r1, #0]
 801b7f4:	7856      	ldrb	r6, [r2, #1]
 801b7f6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801b7fa:	604e      	str	r6, [r1, #4]
 801b7fc:	7896      	ldrb	r6, [r2, #2]
 801b7fe:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801b802:	608e      	str	r6, [r1, #8]
 801b804:	78d6      	ldrb	r6, [r2, #3]
 801b806:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801b80a:	60ce      	str	r6, [r1, #12]
 801b80c:	7916      	ldrb	r6, [r2, #4]
 801b80e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801b812:	610e      	str	r6, [r1, #16]
 801b814:	7956      	ldrb	r6, [r2, #5]
 801b816:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801b81a:	614e      	str	r6, [r1, #20]
 801b81c:	7996      	ldrb	r6, [r2, #6]
 801b81e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801b822:	618e      	str	r6, [r1, #24]
 801b824:	79d6      	ldrb	r6, [r2, #7]
 801b826:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801b82a:	61ce      	str	r6, [r1, #28]
 801b82c:	3808      	subs	r0, #8
 801b82e:	3208      	adds	r2, #8
 801b830:	3120      	adds	r1, #32
 801b832:	e7d9      	b.n	801b7e8 <_DrawBitmap+0x38c>
 801b834:	2803      	cmp	r0, #3
 801b836:	dd13      	ble.n	801b860 <_DrawBitmap+0x404>
 801b838:	7816      	ldrb	r6, [r2, #0]
 801b83a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801b83e:	600e      	str	r6, [r1, #0]
 801b840:	7856      	ldrb	r6, [r2, #1]
 801b842:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801b846:	604e      	str	r6, [r1, #4]
 801b848:	7896      	ldrb	r6, [r2, #2]
 801b84a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801b84e:	608e      	str	r6, [r1, #8]
 801b850:	78d6      	ldrb	r6, [r2, #3]
 801b852:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801b856:	60ce      	str	r6, [r1, #12]
 801b858:	3804      	subs	r0, #4
 801b85a:	3204      	adds	r2, #4
 801b85c:	3110      	adds	r1, #16
 801b85e:	e7e9      	b.n	801b834 <_DrawBitmap+0x3d8>
 801b860:	2600      	movs	r6, #0
 801b862:	4286      	cmp	r6, r0
 801b864:	d0a3      	beq.n	801b7ae <_DrawBitmap+0x352>
 801b866:	f812 8006 	ldrb.w	r8, [r2, r6]
 801b86a:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
 801b86e:	f841 7026 	str.w	r7, [r1, r6, lsl #2]
 801b872:	3601      	adds	r6, #1
 801b874:	e7f5      	b.n	801b862 <_DrawBitmap+0x406>
 801b876:	5c62      	ldrb	r2, [r4, r1]
 801b878:	b11a      	cbz	r2, 801b882 <_DrawBitmap+0x426>
 801b87a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801b87e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 801b882:	3101      	adds	r1, #1
 801b884:	ebc1 020b 	rsb	r2, r1, fp
 801b888:	2a00      	cmp	r2, #0
 801b88a:	dcf4      	bgt.n	801b876 <_DrawBitmap+0x41a>
 801b88c:	e78f      	b.n	801b7ae <_DrawBitmap+0x352>
 801b88e:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801b890:	b90d      	cbnz	r5, 801b896 <_DrawBitmap+0x43a>
 801b892:	462b      	mov	r3, r5
 801b894:	e012      	b.n	801b8bc <_DrawBitmap+0x460>
 801b896:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801b898:	9701      	str	r7, [sp, #4]
 801b89a:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801b89c:	f8cd b000 	str.w	fp, [sp]
 801b8a0:	9702      	str	r7, [sp, #8]
 801b8a2:	69b0      	ldr	r0, [r6, #24]
 801b8a4:	4623      	mov	r3, r4
 801b8a6:	47a8      	blx	r5
 801b8a8:	e018      	b.n	801b8dc <_DrawBitmap+0x480>
 801b8aa:	f851 7f04 	ldr.w	r7, [r1, #4]!
 801b8ae:	1b0d      	subs	r5, r1, r4
 801b8b0:	3a01      	subs	r2, #1
 801b8b2:	502f      	str	r7, [r5, r0]
 801b8b4:	d1f9      	bne.n	801b8aa <_DrawBitmap+0x44e>
 801b8b6:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801b8b8:	3301      	adds	r3, #1
 801b8ba:	443c      	add	r4, r7
 801b8bc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801b8be:	42ab      	cmp	r3, r5
 801b8c0:	da0c      	bge.n	801b8dc <_DrawBitmap+0x480>
 801b8c2:	68b2      	ldr	r2, [r6, #8]
 801b8c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b8c6:	69d1      	ldr	r1, [r2, #28]
 801b8c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b8ca:	6812      	ldr	r2, [r2, #0]
 801b8cc:	4418      	add	r0, r3
 801b8ce:	fb01 5100 	mla	r1, r1, r0, r5
 801b8d2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801b8d6:	1f21      	subs	r1, r4, #4
 801b8d8:	465a      	mov	r2, fp
 801b8da:	e7e6      	b.n	801b8aa <_DrawBitmap+0x44e>
 801b8dc:	b00d      	add	sp, #52	; 0x34
 801b8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8e2:	bf00      	nop
 801b8e4:	20000114 	.word	0x20000114

0801b8e8 <_InitOnce.isra.4>:
 801b8e8:	b538      	push	{r3, r4, r5, lr}
 801b8ea:	6805      	ldr	r5, [r0, #0]
 801b8ec:	4604      	mov	r4, r0
 801b8ee:	b93d      	cbnz	r5, 801b900 <_InitOnce.isra.4+0x18>
 801b8f0:	2048      	movs	r0, #72	; 0x48
 801b8f2:	f003 f94b 	bl	801eb8c <GUI_ALLOC_GetFixedBlock>
 801b8f6:	4629      	mov	r1, r5
 801b8f8:	6020      	str	r0, [r4, #0]
 801b8fa:	2248      	movs	r2, #72	; 0x48
 801b8fc:	f000 fe80 	bl	801c600 <GUI__memset>
 801b900:	6820      	ldr	r0, [r4, #0]
 801b902:	f1d0 0001 	rsbs	r0, r0, #1
 801b906:	bf38      	it	cc
 801b908:	2000      	movcc	r0, #0
 801b90a:	bd38      	pop	{r3, r4, r5, pc}

0801b90c <_SetDevFunc>:
 801b90c:	b570      	push	{r4, r5, r6, lr}
 801b90e:	4605      	mov	r5, r0
 801b910:	3008      	adds	r0, #8
 801b912:	460e      	mov	r6, r1
 801b914:	4614      	mov	r4, r2
 801b916:	f7ff ffe7 	bl	801b8e8 <_InitOnce.isra.4>
 801b91a:	68ab      	ldr	r3, [r5, #8]
 801b91c:	b1c3      	cbz	r3, 801b950 <_SetDevFunc+0x44>
 801b91e:	f1a6 0119 	sub.w	r1, r6, #25
 801b922:	290f      	cmp	r1, #15
 801b924:	d814      	bhi.n	801b950 <_SetDevFunc+0x44>
 801b926:	e8df f001 	tbb	[pc, r1]
 801b92a:	1308      	.short	0x1308
 801b92c:	13131313 	.word	0x13131313
 801b930:	130a0c13 	.word	0x130a0c13
 801b934:	130e1310 	.word	0x130e1310
 801b938:	1213      	.short	0x1213
 801b93a:	631c      	str	r4, [r3, #48]	; 0x30
 801b93c:	bd70      	pop	{r4, r5, r6, pc}
 801b93e:	635c      	str	r4, [r3, #52]	; 0x34
 801b940:	bd70      	pop	{r4, r5, r6, pc}
 801b942:	639c      	str	r4, [r3, #56]	; 0x38
 801b944:	bd70      	pop	{r4, r5, r6, pc}
 801b946:	63dc      	str	r4, [r3, #60]	; 0x3c
 801b948:	bd70      	pop	{r4, r5, r6, pc}
 801b94a:	641c      	str	r4, [r3, #64]	; 0x40
 801b94c:	bd70      	pop	{r4, r5, r6, pc}
 801b94e:	645c      	str	r4, [r3, #68]	; 0x44
 801b950:	bd70      	pop	{r4, r5, r6, pc}

0801b952 <_GetPos>:
 801b952:	b570      	push	{r4, r5, r6, lr}
 801b954:	4604      	mov	r4, r0
 801b956:	3008      	adds	r0, #8
 801b958:	460d      	mov	r5, r1
 801b95a:	4616      	mov	r6, r2
 801b95c:	f7ff ffc4 	bl	801b8e8 <_InitOnce.isra.4>
 801b960:	68a3      	ldr	r3, [r4, #8]
 801b962:	b11b      	cbz	r3, 801b96c <_GetPos+0x1a>
 801b964:	6a18      	ldr	r0, [r3, #32]
 801b966:	6028      	str	r0, [r5, #0]
 801b968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b96a:	6033      	str	r3, [r6, #0]
 801b96c:	bd70      	pop	{r4, r5, r6, pc}

0801b96e <_ShowBuffer>:
 801b96e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b970:	4604      	mov	r4, r0
 801b972:	2300      	movs	r3, #0
 801b974:	3008      	adds	r0, #8
 801b976:	9301      	str	r3, [sp, #4]
 801b978:	460d      	mov	r5, r1
 801b97a:	f7ff ffb5 	bl	801b8e8 <_InitOnce.isra.4>
 801b97e:	68a3      	ldr	r3, [r4, #8]
 801b980:	b133      	cbz	r3, 801b990 <_ShowBuffer+0x22>
 801b982:	aa02      	add	r2, sp, #8
 801b984:	69a0      	ldr	r0, [r4, #24]
 801b986:	f842 5d04 	str.w	r5, [r2, #-4]!
 801b98a:	210e      	movs	r1, #14
 801b98c:	f7fc fd3a 	bl	8018404 <LCD_X_DisplayDriver>
 801b990:	b003      	add	sp, #12
 801b992:	bd30      	pop	{r4, r5, pc}

0801b994 <_Init>:
 801b994:	b538      	push	{r3, r4, r5, lr}
 801b996:	4604      	mov	r4, r0
 801b998:	3008      	adds	r0, #8
 801b99a:	f7ff ffa5 	bl	801b8e8 <_InitOnce.isra.4>
 801b99e:	2101      	movs	r1, #1
 801b9a0:	4605      	mov	r5, r0
 801b9a2:	2200      	movs	r2, #0
 801b9a4:	69a0      	ldr	r0, [r4, #24]
 801b9a6:	f7fc fd2d 	bl	8018404 <LCD_X_DisplayDriver>
 801b9aa:	4328      	orrs	r0, r5
 801b9ac:	bd38      	pop	{r3, r4, r5, pc}

0801b9ae <_SetVis>:
 801b9ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b9b0:	4604      	mov	r4, r0
 801b9b2:	2300      	movs	r3, #0
 801b9b4:	3008      	adds	r0, #8
 801b9b6:	9301      	str	r3, [sp, #4]
 801b9b8:	460d      	mov	r5, r1
 801b9ba:	f7ff ff95 	bl	801b8e8 <_InitOnce.isra.4>
 801b9be:	68a3      	ldr	r3, [r4, #8]
 801b9c0:	b13b      	cbz	r3, 801b9d2 <_SetVis+0x24>
 801b9c2:	aa02      	add	r2, sp, #8
 801b9c4:	62dd      	str	r5, [r3, #44]	; 0x2c
 801b9c6:	f842 5d04 	str.w	r5, [r2, #-4]!
 801b9ca:	69a0      	ldr	r0, [r4, #24]
 801b9cc:	2109      	movs	r1, #9
 801b9ce:	f7fc fd19 	bl	8018404 <LCD_X_DisplayDriver>
 801b9d2:	b003      	add	sp, #12
 801b9d4:	bd30      	pop	{r4, r5, pc}

0801b9d6 <_SetAlpha>:
 801b9d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b9d8:	4604      	mov	r4, r0
 801b9da:	2300      	movs	r3, #0
 801b9dc:	3008      	adds	r0, #8
 801b9de:	9301      	str	r3, [sp, #4]
 801b9e0:	460d      	mov	r5, r1
 801b9e2:	f7ff ff81 	bl	801b8e8 <_InitOnce.isra.4>
 801b9e6:	68a3      	ldr	r3, [r4, #8]
 801b9e8:	b13b      	cbz	r3, 801b9fa <_SetAlpha+0x24>
 801b9ea:	aa02      	add	r2, sp, #8
 801b9ec:	629d      	str	r5, [r3, #40]	; 0x28
 801b9ee:	f842 5d04 	str.w	r5, [r2, #-4]!
 801b9f2:	69a0      	ldr	r0, [r4, #24]
 801b9f4:	210a      	movs	r1, #10
 801b9f6:	f7fc fd05 	bl	8018404 <LCD_X_DisplayDriver>
 801b9fa:	b003      	add	sp, #12
 801b9fc:	bd30      	pop	{r4, r5, pc}

0801b9fe <_SetVRAMAddr>:
 801b9fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ba00:	4604      	mov	r4, r0
 801ba02:	2300      	movs	r3, #0
 801ba04:	3008      	adds	r0, #8
 801ba06:	9301      	str	r3, [sp, #4]
 801ba08:	460d      	mov	r5, r1
 801ba0a:	f7ff ff6d 	bl	801b8e8 <_InitOnce.isra.4>
 801ba0e:	68a3      	ldr	r3, [r4, #8]
 801ba10:	b143      	cbz	r3, 801ba24 <_SetVRAMAddr+0x26>
 801ba12:	aa02      	add	r2, sp, #8
 801ba14:	601d      	str	r5, [r3, #0]
 801ba16:	605d      	str	r5, [r3, #4]
 801ba18:	f842 5d04 	str.w	r5, [r2, #-4]!
 801ba1c:	69a0      	ldr	r0, [r4, #24]
 801ba1e:	2102      	movs	r1, #2
 801ba20:	f7fc fcf0 	bl	8018404 <LCD_X_DisplayDriver>
 801ba24:	b003      	add	sp, #12
 801ba26:	bd30      	pop	{r4, r5, pc}

0801ba28 <_CopyBuffer>:
 801ba28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba2c:	4605      	mov	r5, r0
 801ba2e:	3008      	adds	r0, #8
 801ba30:	460e      	mov	r6, r1
 801ba32:	4617      	mov	r7, r2
 801ba34:	f7ff ff58 	bl	801b8e8 <_InitOnce.isra.4>
 801ba38:	68ac      	ldr	r4, [r5, #8]
 801ba3a:	b1e4      	cbz	r4, 801ba76 <_CopyBuffer+0x4e>
 801ba3c:	42be      	cmp	r6, r7
 801ba3e:	d01a      	beq.n	801ba76 <_CopyBuffer+0x4e>
 801ba40:	68eb      	ldr	r3, [r5, #12]
 801ba42:	2108      	movs	r1, #8
 801ba44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba46:	4628      	mov	r0, r5
 801ba48:	4798      	blx	r3
 801ba4a:	6923      	ldr	r3, [r4, #16]
 801ba4c:	68e2      	ldr	r2, [r4, #12]
 801ba4e:	6861      	ldr	r1, [r4, #4]
 801ba50:	435a      	muls	r2, r3
 801ba52:	4350      	muls	r0, r2
 801ba54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ba56:	08c2      	lsrs	r2, r0, #3
 801ba58:	fb07 1802 	mla	r8, r7, r2, r1
 801ba5c:	b123      	cbz	r3, 801ba68 <_CopyBuffer+0x40>
 801ba5e:	69a8      	ldr	r0, [r5, #24]
 801ba60:	4631      	mov	r1, r6
 801ba62:	463a      	mov	r2, r7
 801ba64:	4798      	blx	r3
 801ba66:	e004      	b.n	801ba72 <_CopyBuffer+0x4a>
 801ba68:	4640      	mov	r0, r8
 801ba6a:	fb06 1102 	mla	r1, r6, r2, r1
 801ba6e:	f006 f8c9 	bl	8021c04 <memcpy>
 801ba72:	f8c4 8000 	str.w	r8, [r4]
 801ba76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ba7a <_SetPos>:
 801ba7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba7e:	b087      	sub	sp, #28
 801ba80:	4604      	mov	r4, r0
 801ba82:	460e      	mov	r6, r1
 801ba84:	4615      	mov	r5, r2
 801ba86:	2100      	movs	r1, #0
 801ba88:	2218      	movs	r2, #24
 801ba8a:	4668      	mov	r0, sp
 801ba8c:	f006 f8e2 	bl	8021c54 <memset>
 801ba90:	f104 0008 	add.w	r0, r4, #8
 801ba94:	f7ff ff28 	bl	801b8e8 <_InitOnce.isra.4>
 801ba98:	68a7      	ldr	r7, [r4, #8]
 801ba9a:	2f00      	cmp	r7, #0
 801ba9c:	d05d      	beq.n	801bb5a <_SetPos+0xe0>
 801ba9e:	623e      	str	r6, [r7, #32]
 801baa0:	627d      	str	r5, [r7, #36]	; 0x24
 801baa2:	f000 f9df 	bl	801be64 <LCD_GetXSizeDisplay>
 801baa6:	4681      	mov	r9, r0
 801baa8:	f000 f9e2 	bl	801be70 <LCD_GetYSizeDisplay>
 801baac:	68e3      	ldr	r3, [r4, #12]
 801baae:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 801bab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bab4:	f8d7 b010 	ldr.w	fp, [r7, #16]
 801bab8:	4680      	mov	r8, r0
 801baba:	2108      	movs	r1, #8
 801babc:	4620      	mov	r0, r4
 801babe:	4798      	blx	r3
 801bac0:	2308      	movs	r3, #8
 801bac2:	3007      	adds	r0, #7
 801bac4:	fb90 f0f3 	sdiv	r0, r0, r3
 801bac8:	2e00      	cmp	r6, #0
 801baca:	9004      	str	r0, [sp, #16]
 801bacc:	eb0a 0306 	add.w	r3, sl, r6
 801bad0:	da07      	bge.n	801bae2 <_SetPos+0x68>
 801bad2:	9a05      	ldr	r2, [sp, #20]
 801bad4:	9302      	str	r3, [sp, #8]
 801bad6:	fb00 2616 	mls	r6, r0, r6, r2
 801bada:	2200      	movs	r2, #0
 801badc:	9605      	str	r6, [sp, #20]
 801bade:	9200      	str	r2, [sp, #0]
 801bae0:	e007      	b.n	801baf2 <_SetPos+0x78>
 801bae2:	454b      	cmp	r3, r9
 801bae4:	9600      	str	r6, [sp, #0]
 801bae6:	bfca      	itet	gt
 801bae8:	ebc6 0609 	rsbgt	r6, r6, r9
 801baec:	f8cd a008 	strle.w	sl, [sp, #8]
 801baf0:	9602      	strgt	r6, [sp, #8]
 801baf2:	2d00      	cmp	r5, #0
 801baf4:	eb0b 0305 	add.w	r3, fp, r5
 801baf8:	da09      	bge.n	801bb0e <_SetPos+0x94>
 801bafa:	9a04      	ldr	r2, [sp, #16]
 801bafc:	9303      	str	r3, [sp, #12]
 801bafe:	4355      	muls	r5, r2
 801bb00:	9a05      	ldr	r2, [sp, #20]
 801bb02:	fb0a 2215 	mls	r2, sl, r5, r2
 801bb06:	9205      	str	r2, [sp, #20]
 801bb08:	2200      	movs	r2, #0
 801bb0a:	9201      	str	r2, [sp, #4]
 801bb0c:	e007      	b.n	801bb1e <_SetPos+0xa4>
 801bb0e:	4543      	cmp	r3, r8
 801bb10:	9501      	str	r5, [sp, #4]
 801bb12:	bfca      	itet	gt
 801bb14:	ebc5 0508 	rsbgt	r5, r5, r8
 801bb18:	f8cd b00c 	strle.w	fp, [sp, #12]
 801bb1c:	9503      	strgt	r5, [sp, #12]
 801bb1e:	9b02      	ldr	r3, [sp, #8]
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb24:	dd08      	ble.n	801bb38 <_SetPos+0xbe>
 801bb26:	9a03      	ldr	r2, [sp, #12]
 801bb28:	2a00      	cmp	r2, #0
 801bb2a:	dd05      	ble.n	801bb38 <_SetPos+0xbe>
 801bb2c:	9a00      	ldr	r2, [sp, #0]
 801bb2e:	454a      	cmp	r2, r9
 801bb30:	da02      	bge.n	801bb38 <_SetPos+0xbe>
 801bb32:	9a01      	ldr	r2, [sp, #4]
 801bb34:	4542      	cmp	r2, r8
 801bb36:	db06      	blt.n	801bb46 <_SetPos+0xcc>
 801bb38:	2b01      	cmp	r3, #1
 801bb3a:	d10e      	bne.n	801bb5a <_SetPos+0xe0>
 801bb3c:	4620      	mov	r0, r4
 801bb3e:	2100      	movs	r1, #0
 801bb40:	f7ff ff35 	bl	801b9ae <_SetVis>
 801bb44:	e009      	b.n	801bb5a <_SetPos+0xe0>
 801bb46:	b91b      	cbnz	r3, 801bb50 <_SetPos+0xd6>
 801bb48:	4620      	mov	r0, r4
 801bb4a:	2101      	movs	r1, #1
 801bb4c:	f7ff ff2f 	bl	801b9ae <_SetVis>
 801bb50:	69a0      	ldr	r0, [r4, #24]
 801bb52:	2108      	movs	r1, #8
 801bb54:	466a      	mov	r2, sp
 801bb56:	f7fc fc55 	bl	8018404 <LCD_X_DisplayDriver>
 801bb5a:	b007      	add	sp, #28
 801bb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bb60 <_SetSize>:
 801bb60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bb62:	4605      	mov	r5, r0
 801bb64:	2300      	movs	r3, #0
 801bb66:	3008      	adds	r0, #8
 801bb68:	460e      	mov	r6, r1
 801bb6a:	4617      	mov	r7, r2
 801bb6c:	9300      	str	r3, [sp, #0]
 801bb6e:	9301      	str	r3, [sp, #4]
 801bb70:	f7ff feba 	bl	801b8e8 <_InitOnce.isra.4>
 801bb74:	68ac      	ldr	r4, [r5, #8]
 801bb76:	b194      	cbz	r4, 801bb9e <_SetSize+0x3e>
 801bb78:	69e3      	ldr	r3, [r4, #28]
 801bb7a:	b93b      	cbnz	r3, 801bb8c <_SetSize+0x2c>
 801bb7c:	69a8      	ldr	r0, [r5, #24]
 801bb7e:	f000 f913 	bl	801bda8 <LCD_GetSwapXYEx>
 801bb82:	2800      	cmp	r0, #0
 801bb84:	bf0c      	ite	eq
 801bb86:	4630      	moveq	r0, r6
 801bb88:	4638      	movne	r0, r7
 801bb8a:	61e0      	str	r0, [r4, #28]
 801bb8c:	60e6      	str	r6, [r4, #12]
 801bb8e:	6127      	str	r7, [r4, #16]
 801bb90:	69a8      	ldr	r0, [r5, #24]
 801bb92:	2107      	movs	r1, #7
 801bb94:	466a      	mov	r2, sp
 801bb96:	e88d 00c0 	stmia.w	sp, {r6, r7}
 801bb9a:	f7fc fc33 	bl	8018404 <LCD_X_DisplayDriver>
 801bb9e:	b003      	add	sp, #12
 801bba0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bba2 <_SetVSize>:
 801bba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bba4:	4606      	mov	r6, r0
 801bba6:	3008      	adds	r0, #8
 801bba8:	460d      	mov	r5, r1
 801bbaa:	4617      	mov	r7, r2
 801bbac:	f7ff fe9c 	bl	801b8e8 <_InitOnce.isra.4>
 801bbb0:	68b4      	ldr	r4, [r6, #8]
 801bbb2:	b144      	cbz	r4, 801bbc6 <_SetVSize+0x24>
 801bbb4:	69b0      	ldr	r0, [r6, #24]
 801bbb6:	f000 f8f7 	bl	801bda8 <LCD_GetSwapXYEx>
 801bbba:	6165      	str	r5, [r4, #20]
 801bbbc:	61a7      	str	r7, [r4, #24]
 801bbbe:	b108      	cbz	r0, 801bbc4 <_SetVSize+0x22>
 801bbc0:	61e7      	str	r7, [r4, #28]
 801bbc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bbc4:	61e5      	str	r5, [r4, #28]
 801bbc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bbc8 <LCD_UpdateColorIndices>:
 801bbc8:	b510      	push	{r4, lr}
 801bbca:	4c07      	ldr	r4, [pc, #28]	; (801bbe8 <LCD_UpdateColorIndices+0x20>)
 801bbcc:	6823      	ldr	r3, [r4, #0]
 801bbce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801bbd0:	f000 fcae 	bl	801c530 <LCD_Color2Index>
 801bbd4:	f000 fccc 	bl	801c570 <LCD_SetColorIndex>
 801bbd8:	6823      	ldr	r3, [r4, #0]
 801bbda:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801bbdc:	f000 fca8 	bl	801c530 <LCD_Color2Index>
 801bbe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbe4:	f000 bce0 	b.w	801c5a8 <LCD_SetBkColorIndex>
 801bbe8:	20000114 	.word	0x20000114

0801bbec <LCD_SetClipRectEx>:
 801bbec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bbee:	4c09      	ldr	r4, [pc, #36]	; (801bc14 <LCD_SetClipRectEx+0x28>)
 801bbf0:	6823      	ldr	r3, [r4, #0]
 801bbf2:	7c5a      	ldrb	r2, [r3, #17]
 801bbf4:	4b08      	ldr	r3, [pc, #32]	; (801bc18 <LCD_SetClipRectEx+0x2c>)
 801bbf6:	4605      	mov	r5, r0
 801bbf8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801bbfc:	68c2      	ldr	r2, [r0, #12]
 801bbfe:	4669      	mov	r1, sp
 801bc00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801bc02:	4790      	blx	r2
 801bc04:	6820      	ldr	r0, [r4, #0]
 801bc06:	4629      	mov	r1, r5
 801bc08:	466a      	mov	r2, sp
 801bc0a:	3008      	adds	r0, #8
 801bc0c:	f000 fd9e 	bl	801c74c <GUI__IntersectRects>
 801bc10:	b003      	add	sp, #12
 801bc12:	bd30      	pop	{r4, r5, pc}
 801bc14:	20000114 	.word	0x20000114
 801bc18:	2002c5cc 	.word	0x2002c5cc

0801bc1c <LCD_SetVRAMAddrEx>:
 801bc1c:	b513      	push	{r0, r1, r4, lr}
 801bc1e:	460c      	mov	r4, r1
 801bc20:	f002 f806 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 801bc24:	9001      	str	r0, [sp, #4]
 801bc26:	b908      	cbnz	r0, 801bc2c <LCD_SetVRAMAddrEx+0x10>
 801bc28:	2001      	movs	r0, #1
 801bc2a:	e00b      	b.n	801bc44 <LCD_SetVRAMAddrEx+0x28>
 801bc2c:	68c3      	ldr	r3, [r0, #12]
 801bc2e:	2109      	movs	r1, #9
 801bc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc32:	a801      	add	r0, sp, #4
 801bc34:	4798      	blx	r3
 801bc36:	4603      	mov	r3, r0
 801bc38:	2800      	cmp	r0, #0
 801bc3a:	d0f5      	beq.n	801bc28 <LCD_SetVRAMAddrEx+0xc>
 801bc3c:	9801      	ldr	r0, [sp, #4]
 801bc3e:	4621      	mov	r1, r4
 801bc40:	4798      	blx	r3
 801bc42:	2000      	movs	r0, #0
 801bc44:	b002      	add	sp, #8
 801bc46:	bd10      	pop	{r4, pc}

0801bc48 <LCD_SetVSizeEx>:
 801bc48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bc4a:	460d      	mov	r5, r1
 801bc4c:	4614      	mov	r4, r2
 801bc4e:	f001 ffef 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 801bc52:	9001      	str	r0, [sp, #4]
 801bc54:	b908      	cbnz	r0, 801bc5a <LCD_SetVSizeEx+0x12>
 801bc56:	2001      	movs	r0, #1
 801bc58:	e00c      	b.n	801bc74 <LCD_SetVSizeEx+0x2c>
 801bc5a:	68c3      	ldr	r3, [r0, #12]
 801bc5c:	210a      	movs	r1, #10
 801bc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc60:	a801      	add	r0, sp, #4
 801bc62:	4798      	blx	r3
 801bc64:	4603      	mov	r3, r0
 801bc66:	2800      	cmp	r0, #0
 801bc68:	d0f5      	beq.n	801bc56 <LCD_SetVSizeEx+0xe>
 801bc6a:	9801      	ldr	r0, [sp, #4]
 801bc6c:	4629      	mov	r1, r5
 801bc6e:	4622      	mov	r2, r4
 801bc70:	4798      	blx	r3
 801bc72:	2000      	movs	r0, #0
 801bc74:	b003      	add	sp, #12
 801bc76:	bd30      	pop	{r4, r5, pc}

0801bc78 <LCD_SetSizeEx>:
 801bc78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bc7a:	460d      	mov	r5, r1
 801bc7c:	4614      	mov	r4, r2
 801bc7e:	f001 ffd7 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 801bc82:	9001      	str	r0, [sp, #4]
 801bc84:	b908      	cbnz	r0, 801bc8a <LCD_SetSizeEx+0x12>
 801bc86:	2001      	movs	r0, #1
 801bc88:	e00c      	b.n	801bca4 <LCD_SetSizeEx+0x2c>
 801bc8a:	68c3      	ldr	r3, [r0, #12]
 801bc8c:	210b      	movs	r1, #11
 801bc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc90:	a801      	add	r0, sp, #4
 801bc92:	4798      	blx	r3
 801bc94:	4603      	mov	r3, r0
 801bc96:	2800      	cmp	r0, #0
 801bc98:	d0f5      	beq.n	801bc86 <LCD_SetSizeEx+0xe>
 801bc9a:	9801      	ldr	r0, [sp, #4]
 801bc9c:	4629      	mov	r1, r5
 801bc9e:	4622      	mov	r2, r4
 801bca0:	4798      	blx	r3
 801bca2:	2000      	movs	r0, #0
 801bca4:	b003      	add	sp, #12
 801bca6:	bd30      	pop	{r4, r5, pc}

0801bca8 <LCD_SetLUTEntryEx>:
 801bca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bcaa:	460d      	mov	r5, r1
 801bcac:	4614      	mov	r4, r2
 801bcae:	f001 ffbf 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 801bcb2:	9001      	str	r0, [sp, #4]
 801bcb4:	b908      	cbnz	r0, 801bcba <LCD_SetLUTEntryEx+0x12>
 801bcb6:	2001      	movs	r0, #1
 801bcb8:	e00c      	b.n	801bcd4 <LCD_SetLUTEntryEx+0x2c>
 801bcba:	68c3      	ldr	r3, [r0, #12]
 801bcbc:	2110      	movs	r1, #16
 801bcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bcc0:	a801      	add	r0, sp, #4
 801bcc2:	4798      	blx	r3
 801bcc4:	4603      	mov	r3, r0
 801bcc6:	2800      	cmp	r0, #0
 801bcc8:	d0f5      	beq.n	801bcb6 <LCD_SetLUTEntryEx+0xe>
 801bcca:	9801      	ldr	r0, [sp, #4]
 801bccc:	4629      	mov	r1, r5
 801bcce:	4622      	mov	r2, r4
 801bcd0:	4798      	blx	r3
 801bcd2:	2000      	movs	r0, #0
 801bcd4:	b003      	add	sp, #12
 801bcd6:	bd30      	pop	{r4, r5, pc}

0801bcd8 <LCD_GetPosEx>:
 801bcd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bcda:	460d      	mov	r5, r1
 801bcdc:	4614      	mov	r4, r2
 801bcde:	f001 ffa7 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 801bce2:	9001      	str	r0, [sp, #4]
 801bce4:	b908      	cbnz	r0, 801bcea <LCD_GetPosEx+0x12>
 801bce6:	2001      	movs	r0, #1
 801bce8:	e00c      	b.n	801bd04 <LCD_GetPosEx+0x2c>
 801bcea:	68c3      	ldr	r3, [r0, #12]
 801bcec:	2104      	movs	r1, #4
 801bcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bcf0:	a801      	add	r0, sp, #4
 801bcf2:	4798      	blx	r3
 801bcf4:	4603      	mov	r3, r0
 801bcf6:	2800      	cmp	r0, #0
 801bcf8:	d0f5      	beq.n	801bce6 <LCD_GetPosEx+0xe>
 801bcfa:	9801      	ldr	r0, [sp, #4]
 801bcfc:	4629      	mov	r1, r5
 801bcfe:	4622      	mov	r2, r4
 801bd00:	4798      	blx	r3
 801bd02:	2000      	movs	r0, #0
 801bd04:	b003      	add	sp, #12
 801bd06:	bd30      	pop	{r4, r5, pc}

0801bd08 <LCD_SetDevFunc>:
 801bd08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bd0a:	460d      	mov	r5, r1
 801bd0c:	4614      	mov	r4, r2
 801bd0e:	f001 ff8f 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 801bd12:	9001      	str	r0, [sp, #4]
 801bd14:	b908      	cbnz	r0, 801bd1a <LCD_SetDevFunc+0x12>
 801bd16:	2001      	movs	r0, #1
 801bd18:	e00c      	b.n	801bd34 <LCD_SetDevFunc+0x2c>
 801bd1a:	68c3      	ldr	r3, [r0, #12]
 801bd1c:	2116      	movs	r1, #22
 801bd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd20:	a801      	add	r0, sp, #4
 801bd22:	4798      	blx	r3
 801bd24:	4603      	mov	r3, r0
 801bd26:	2800      	cmp	r0, #0
 801bd28:	d0f5      	beq.n	801bd16 <LCD_SetDevFunc+0xe>
 801bd2a:	9801      	ldr	r0, [sp, #4]
 801bd2c:	4629      	mov	r1, r5
 801bd2e:	4622      	mov	r2, r4
 801bd30:	4798      	blx	r3
 801bd32:	2000      	movs	r0, #0
 801bd34:	b003      	add	sp, #12
 801bd36:	bd30      	pop	{r4, r5, pc}

0801bd38 <_GetDevProp>:
 801bd38:	2801      	cmp	r0, #1
 801bd3a:	b510      	push	{r4, lr}
 801bd3c:	460c      	mov	r4, r1
 801bd3e:	dc08      	bgt.n	801bd52 <_GetDevProp+0x1a>
 801bd40:	f001 ff76 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 801bd44:	b120      	cbz	r0, 801bd50 <_GetDevProp+0x18>
 801bd46:	68c3      	ldr	r3, [r0, #12]
 801bd48:	4621      	mov	r1, r4
 801bd4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bd4c:	4798      	blx	r3
 801bd4e:	bd10      	pop	{r4, pc}
 801bd50:	bd10      	pop	{r4, pc}
 801bd52:	2000      	movs	r0, #0
 801bd54:	bd10      	pop	{r4, pc}

0801bd56 <_GetMaxValue>:
 801bd56:	b538      	push	{r3, r4, r5, lr}
 801bd58:	4604      	mov	r4, r0
 801bd5a:	4621      	mov	r1, r4
 801bd5c:	2001      	movs	r0, #1
 801bd5e:	f7ff ffeb 	bl	801bd38 <_GetDevProp>
 801bd62:	4621      	mov	r1, r4
 801bd64:	4605      	mov	r5, r0
 801bd66:	2000      	movs	r0, #0
 801bd68:	f7ff ffe6 	bl	801bd38 <_GetDevProp>
 801bd6c:	42a8      	cmp	r0, r5
 801bd6e:	bfb8      	it	lt
 801bd70:	4628      	movlt	r0, r5
 801bd72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801bd76:	bd38      	pop	{r3, r4, r5, pc}

0801bd78 <LCD_GetXSizeEx>:
 801bd78:	2101      	movs	r1, #1
 801bd7a:	f7ff bfdd 	b.w	801bd38 <_GetDevProp>

0801bd7e <LCD_GetYSizeEx>:
 801bd7e:	2102      	movs	r1, #2
 801bd80:	f7ff bfda 	b.w	801bd38 <_GetDevProp>

0801bd84 <LCD_GetVXSizeEx>:
 801bd84:	2103      	movs	r1, #3
 801bd86:	f7ff bfd7 	b.w	801bd38 <_GetDevProp>

0801bd8a <LCD_GetVYSizeEx>:
 801bd8a:	2104      	movs	r1, #4
 801bd8c:	f7ff bfd4 	b.w	801bd38 <_GetDevProp>

0801bd90 <LCD_GetBitsPerPixelEx>:
 801bd90:	2108      	movs	r1, #8
 801bd92:	f7ff bfd1 	b.w	801bd38 <_GetDevProp>

0801bd96 <LCD_GetNumColorsEx>:
 801bd96:	2109      	movs	r1, #9
 801bd98:	f7ff bfce 	b.w	801bd38 <_GetDevProp>

0801bd9c <LCD_GetMirrorXEx>:
 801bd9c:	210c      	movs	r1, #12
 801bd9e:	f7ff bfcb 	b.w	801bd38 <_GetDevProp>

0801bda2 <LCD_GetMirrorYEx>:
 801bda2:	210d      	movs	r1, #13
 801bda4:	f7ff bfc8 	b.w	801bd38 <_GetDevProp>

0801bda8 <LCD_GetSwapXYEx>:
 801bda8:	210e      	movs	r1, #14
 801bdaa:	f7ff bfc5 	b.w	801bd38 <_GetDevProp>
	...

0801bdb0 <LCD_GetXSize>:
 801bdb0:	4b02      	ldr	r3, [pc, #8]	; (801bdbc <LCD_GetXSize+0xc>)
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	7c58      	ldrb	r0, [r3, #17]
 801bdb6:	f7ff bfdf 	b.w	801bd78 <LCD_GetXSizeEx>
 801bdba:	bf00      	nop
 801bdbc:	20000114 	.word	0x20000114

0801bdc0 <LCD_GetYSize>:
 801bdc0:	4b02      	ldr	r3, [pc, #8]	; (801bdcc <LCD_GetYSize+0xc>)
 801bdc2:	681b      	ldr	r3, [r3, #0]
 801bdc4:	7c58      	ldrb	r0, [r3, #17]
 801bdc6:	f7ff bfda 	b.w	801bd7e <LCD_GetYSizeEx>
 801bdca:	bf00      	nop
 801bdcc:	20000114 	.word	0x20000114

0801bdd0 <LCD_GetNumColors>:
 801bdd0:	4b02      	ldr	r3, [pc, #8]	; (801bddc <LCD_GetNumColors+0xc>)
 801bdd2:	681b      	ldr	r3, [r3, #0]
 801bdd4:	7c58      	ldrb	r0, [r3, #17]
 801bdd6:	f7ff bfde 	b.w	801bd96 <LCD_GetNumColorsEx>
 801bdda:	bf00      	nop
 801bddc:	20000114 	.word	0x20000114

0801bde0 <GUI_GetBitsPerPixelEx>:
 801bde0:	b508      	push	{r3, lr}
 801bde2:	4b04      	ldr	r3, [pc, #16]	; (801bdf4 <GUI_GetBitsPerPixelEx+0x14>)
 801bde4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801bde8:	68c3      	ldr	r3, [r0, #12]
 801bdea:	2108      	movs	r1, #8
 801bdec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bdee:	4798      	blx	r3
 801bdf0:	bd08      	pop	{r3, pc}
 801bdf2:	bf00      	nop
 801bdf4:	2002c5cc 	.word	0x2002c5cc

0801bdf8 <LCD_GetPaletteEx>:
 801bdf8:	b508      	push	{r3, lr}
 801bdfa:	f001 ff19 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 801bdfe:	b120      	cbz	r0, 801be0a <LCD_GetPaletteEx+0x12>
 801be00:	68c3      	ldr	r3, [r0, #12]
 801be02:	2102      	movs	r1, #2
 801be04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be06:	4798      	blx	r3
 801be08:	bd08      	pop	{r3, pc}
 801be0a:	bd08      	pop	{r3, pc}

0801be0c <LCD_GetPalette>:
 801be0c:	4b02      	ldr	r3, [pc, #8]	; (801be18 <LCD_GetPalette+0xc>)
 801be0e:	681b      	ldr	r3, [r3, #0]
 801be10:	7c58      	ldrb	r0, [r3, #17]
 801be12:	f7ff bff1 	b.w	801bdf8 <LCD_GetPaletteEx>
 801be16:	bf00      	nop
 801be18:	20000114 	.word	0x20000114

0801be1c <GUI_GetpfIndex2ColorEx>:
 801be1c:	4b02      	ldr	r3, [pc, #8]	; (801be28 <GUI_GetpfIndex2ColorEx+0xc>)
 801be1e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801be22:	691b      	ldr	r3, [r3, #16]
 801be24:	6858      	ldr	r0, [r3, #4]
 801be26:	4770      	bx	lr
 801be28:	2002c5cc 	.word	0x2002c5cc

0801be2c <GUI_GetpfColor2IndexEx>:
 801be2c:	4b02      	ldr	r3, [pc, #8]	; (801be38 <GUI_GetpfColor2IndexEx+0xc>)
 801be2e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801be32:	691b      	ldr	r3, [r3, #16]
 801be34:	6818      	ldr	r0, [r3, #0]
 801be36:	4770      	bx	lr
 801be38:	2002c5cc 	.word	0x2002c5cc

0801be3c <LCD_GetXSizeMax>:
 801be3c:	2001      	movs	r0, #1
 801be3e:	f7ff bf8a 	b.w	801bd56 <_GetMaxValue>

0801be42 <LCD_GetYSizeMax>:
 801be42:	2002      	movs	r0, #2
 801be44:	f7ff bf87 	b.w	801bd56 <_GetMaxValue>

0801be48 <LCD_GetVXSizeMax>:
 801be48:	2003      	movs	r0, #3
 801be4a:	f7ff bf84 	b.w	801bd56 <_GetMaxValue>
	...

0801be50 <LCD_SetDisplaySize>:
 801be50:	4b02      	ldr	r3, [pc, #8]	; (801be5c <LCD_SetDisplaySize+0xc>)
 801be52:	6018      	str	r0, [r3, #0]
 801be54:	4b02      	ldr	r3, [pc, #8]	; (801be60 <LCD_SetDisplaySize+0x10>)
 801be56:	6019      	str	r1, [r3, #0]
 801be58:	4770      	bx	lr
 801be5a:	bf00      	nop
 801be5c:	2002c348 	.word	0x2002c348
 801be60:	2002c344 	.word	0x2002c344

0801be64 <LCD_GetXSizeDisplay>:
 801be64:	4b01      	ldr	r3, [pc, #4]	; (801be6c <LCD_GetXSizeDisplay+0x8>)
 801be66:	6818      	ldr	r0, [r3, #0]
 801be68:	4770      	bx	lr
 801be6a:	bf00      	nop
 801be6c:	2002c348 	.word	0x2002c348

0801be70 <LCD_GetYSizeDisplay>:
 801be70:	4b01      	ldr	r3, [pc, #4]	; (801be78 <LCD_GetYSizeDisplay+0x8>)
 801be72:	6818      	ldr	r0, [r3, #0]
 801be74:	4770      	bx	lr
 801be76:	bf00      	nop
 801be78:	2002c344 	.word	0x2002c344

0801be7c <LCD__GetBPP>:
 801be7c:	2800      	cmp	r0, #0
 801be7e:	d03b      	beq.n	801bef8 <LCD__GetBPP+0x7c>
 801be80:	f030 0301 	bics.w	r3, r0, #1
 801be84:	d029      	beq.n	801beda <LCD__GetBPP+0x5e>
 801be86:	f030 0303 	bics.w	r3, r0, #3
 801be8a:	d028      	beq.n	801bede <LCD__GetBPP+0x62>
 801be8c:	f030 0307 	bics.w	r3, r0, #7
 801be90:	d027      	beq.n	801bee2 <LCD__GetBPP+0x66>
 801be92:	f030 030f 	bics.w	r3, r0, #15
 801be96:	d026      	beq.n	801bee6 <LCD__GetBPP+0x6a>
 801be98:	f030 031f 	bics.w	r3, r0, #31
 801be9c:	d025      	beq.n	801beea <LCD__GetBPP+0x6e>
 801be9e:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 801bea2:	d024      	beq.n	801beee <LCD__GetBPP+0x72>
 801bea4:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 801bea8:	f023 0301 	bic.w	r3, r3, #1
 801beac:	b30b      	cbz	r3, 801bef2 <LCD__GetBPP+0x76>
 801beae:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 801beb2:	f023 030f 	bic.w	r3, r3, #15
 801beb6:	b1e3      	cbz	r3, 801bef2 <LCD__GetBPP+0x76>
 801beb8:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 801bebc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801bec0:	b1bb      	cbz	r3, 801bef2 <LCD__GetBPP+0x76>
 801bec2:	0c03      	lsrs	r3, r0, #16
 801bec4:	041b      	lsls	r3, r3, #16
 801bec6:	b1a3      	cbz	r3, 801bef2 <LCD__GetBPP+0x76>
 801bec8:	0c83      	lsrs	r3, r0, #18
 801beca:	049b      	lsls	r3, r3, #18
 801becc:	b19b      	cbz	r3, 801bef6 <LCD__GetBPP+0x7a>
 801bece:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801bed2:	bf0c      	ite	eq
 801bed4:	2018      	moveq	r0, #24
 801bed6:	2020      	movne	r0, #32
 801bed8:	4770      	bx	lr
 801beda:	2001      	movs	r0, #1
 801bedc:	4770      	bx	lr
 801bede:	2002      	movs	r0, #2
 801bee0:	4770      	bx	lr
 801bee2:	2003      	movs	r0, #3
 801bee4:	4770      	bx	lr
 801bee6:	2004      	movs	r0, #4
 801bee8:	4770      	bx	lr
 801beea:	2005      	movs	r0, #5
 801beec:	4770      	bx	lr
 801beee:	2008      	movs	r0, #8
 801bef0:	4770      	bx	lr
 801bef2:	2010      	movs	r0, #16
 801bef4:	4770      	bx	lr
 801bef6:	2012      	movs	r0, #18
 801bef8:	4770      	bx	lr

0801befa <LCD__GetBPPDevice>:
 801befa:	b508      	push	{r3, lr}
 801befc:	f7ff ffbe 	bl	801be7c <LCD__GetBPP>
 801bf00:	2801      	cmp	r0, #1
 801bf02:	d00f      	beq.n	801bf24 <LCD__GetBPPDevice+0x2a>
 801bf04:	1e83      	subs	r3, r0, #2
 801bf06:	2b06      	cmp	r3, #6
 801bf08:	d909      	bls.n	801bf1e <LCD__GetBPPDevice+0x24>
 801bf0a:	f1a0 0309 	sub.w	r3, r0, #9
 801bf0e:	2b07      	cmp	r3, #7
 801bf10:	d907      	bls.n	801bf22 <LCD__GetBPPDevice+0x28>
 801bf12:	3811      	subs	r0, #17
 801bf14:	2810      	cmp	r0, #16
 801bf16:	bf34      	ite	cc
 801bf18:	2020      	movcc	r0, #32
 801bf1a:	2000      	movcs	r0, #0
 801bf1c:	bd08      	pop	{r3, pc}
 801bf1e:	2008      	movs	r0, #8
 801bf20:	bd08      	pop	{r3, pc}
 801bf22:	2010      	movs	r0, #16
 801bf24:	bd08      	pop	{r3, pc}
	...

0801bf28 <_SetDrawMode>:
 801bf28:	b570      	push	{r4, r5, r6, lr}
 801bf2a:	4b08      	ldr	r3, [pc, #32]	; (801bf4c <_SetDrawMode+0x24>)
 801bf2c:	681b      	ldr	r3, [r3, #0]
 801bf2e:	7c1a      	ldrb	r2, [r3, #16]
 801bf30:	ea80 0102 	eor.w	r1, r0, r2
 801bf34:	0749      	lsls	r1, r1, #29
 801bf36:	d505      	bpl.n	801bf44 <_SetDrawMode+0x1c>
 801bf38:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 801bf3a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801bf3c:	6826      	ldr	r6, [r4, #0]
 801bf3e:	680d      	ldr	r5, [r1, #0]
 801bf40:	6025      	str	r5, [r4, #0]
 801bf42:	600e      	str	r6, [r1, #0]
 801bf44:	7418      	strb	r0, [r3, #16]
 801bf46:	4610      	mov	r0, r2
 801bf48:	bd70      	pop	{r4, r5, r6, pc}
 801bf4a:	bf00      	nop
 801bf4c:	20000114 	.word	0x20000114

0801bf50 <LCD_SetDrawMode>:
 801bf50:	b508      	push	{r3, lr}
 801bf52:	4b02      	ldr	r3, [pc, #8]	; (801bf5c <LCD_SetDrawMode+0xc>)
 801bf54:	681b      	ldr	r3, [r3, #0]
 801bf56:	689b      	ldr	r3, [r3, #8]
 801bf58:	4798      	blx	r3
 801bf5a:	bd08      	pop	{r3, pc}
 801bf5c:	20000100 	.word	0x20000100

0801bf60 <LCD_DrawPixel>:
 801bf60:	b538      	push	{r3, r4, r5, lr}
 801bf62:	4b14      	ldr	r3, [pc, #80]	; (801bfb4 <LCD_DrawPixel+0x54>)
 801bf64:	681b      	ldr	r3, [r3, #0]
 801bf66:	460a      	mov	r2, r1
 801bf68:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 801bf6c:	428a      	cmp	r2, r1
 801bf6e:	4604      	mov	r4, r0
 801bf70:	db1e      	blt.n	801bfb0 <LCD_DrawPixel+0x50>
 801bf72:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801bf76:	428a      	cmp	r2, r1
 801bf78:	dc1a      	bgt.n	801bfb0 <LCD_DrawPixel+0x50>
 801bf7a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bf7e:	4288      	cmp	r0, r1
 801bf80:	db16      	blt.n	801bfb0 <LCD_DrawPixel+0x50>
 801bf82:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 801bf86:	4288      	cmp	r0, r1
 801bf88:	dc12      	bgt.n	801bfb0 <LCD_DrawPixel+0x50>
 801bf8a:	7c19      	ldrb	r1, [r3, #16]
 801bf8c:	7c58      	ldrb	r0, [r3, #17]
 801bf8e:	f011 0f01 	tst.w	r1, #1
 801bf92:	4909      	ldr	r1, [pc, #36]	; (801bfb8 <LCD_DrawPixel+0x58>)
 801bf94:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 801bf98:	d004      	beq.n	801bfa4 <LCD_DrawPixel+0x44>
 801bf9a:	68c3      	ldr	r3, [r0, #12]
 801bf9c:	4621      	mov	r1, r4
 801bf9e:	69db      	ldr	r3, [r3, #28]
 801bfa0:	4798      	blx	r3
 801bfa2:	bd38      	pop	{r3, r4, r5, pc}
 801bfa4:	68c1      	ldr	r1, [r0, #12]
 801bfa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bfa8:	698d      	ldr	r5, [r1, #24]
 801bfaa:	681b      	ldr	r3, [r3, #0]
 801bfac:	4621      	mov	r1, r4
 801bfae:	47a8      	blx	r5
 801bfb0:	bd38      	pop	{r3, r4, r5, pc}
 801bfb2:	bf00      	nop
 801bfb4:	20000114 	.word	0x20000114
 801bfb8:	2002c5cc 	.word	0x2002c5cc

0801bfbc <LCD_DrawHLine>:
 801bfbc:	b538      	push	{r3, r4, r5, lr}
 801bfbe:	4b10      	ldr	r3, [pc, #64]	; (801c000 <LCD_DrawHLine+0x44>)
 801bfc0:	681c      	ldr	r4, [r3, #0]
 801bfc2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801bfc6:	4299      	cmp	r1, r3
 801bfc8:	460d      	mov	r5, r1
 801bfca:	db17      	blt.n	801bffc <LCD_DrawHLine+0x40>
 801bfcc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801bfd0:	4299      	cmp	r1, r3
 801bfd2:	dc13      	bgt.n	801bffc <LCD_DrawHLine+0x40>
 801bfd4:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801bfd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bfdc:	4288      	cmp	r0, r1
 801bfde:	bfa8      	it	ge
 801bfe0:	4601      	movge	r1, r0
 801bfe2:	429a      	cmp	r2, r3
 801bfe4:	bfb8      	it	lt
 801bfe6:	4613      	movlt	r3, r2
 801bfe8:	428b      	cmp	r3, r1
 801bfea:	db07      	blt.n	801bffc <LCD_DrawHLine+0x40>
 801bfec:	7c60      	ldrb	r0, [r4, #17]
 801bfee:	4a05      	ldr	r2, [pc, #20]	; (801c004 <LCD_DrawHLine+0x48>)
 801bff0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 801bff4:	68c2      	ldr	r2, [r0, #12]
 801bff6:	6894      	ldr	r4, [r2, #8]
 801bff8:	462a      	mov	r2, r5
 801bffa:	47a0      	blx	r4
 801bffc:	bd38      	pop	{r3, r4, r5, pc}
 801bffe:	bf00      	nop
 801c000:	20000114 	.word	0x20000114
 801c004:	2002c5cc 	.word	0x2002c5cc

0801c008 <LCD_DrawVLine>:
 801c008:	b538      	push	{r3, r4, r5, lr}
 801c00a:	4b10      	ldr	r3, [pc, #64]	; (801c04c <LCD_DrawVLine+0x44>)
 801c00c:	681c      	ldr	r4, [r3, #0]
 801c00e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801c012:	4605      	mov	r5, r0
 801c014:	429d      	cmp	r5, r3
 801c016:	4610      	mov	r0, r2
 801c018:	db17      	blt.n	801c04a <LCD_DrawVLine+0x42>
 801c01a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c01e:	429d      	cmp	r5, r3
 801c020:	dc13      	bgt.n	801c04a <LCD_DrawVLine+0x42>
 801c022:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801c026:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801c02a:	4291      	cmp	r1, r2
 801c02c:	bfa8      	it	ge
 801c02e:	460a      	movge	r2, r1
 801c030:	4298      	cmp	r0, r3
 801c032:	bfb8      	it	lt
 801c034:	4603      	movlt	r3, r0
 801c036:	4293      	cmp	r3, r2
 801c038:	db07      	blt.n	801c04a <LCD_DrawVLine+0x42>
 801c03a:	7c60      	ldrb	r0, [r4, #17]
 801c03c:	4904      	ldr	r1, [pc, #16]	; (801c050 <LCD_DrawVLine+0x48>)
 801c03e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 801c042:	68c1      	ldr	r1, [r0, #12]
 801c044:	68cc      	ldr	r4, [r1, #12]
 801c046:	4629      	mov	r1, r5
 801c048:	47a0      	blx	r4
 801c04a:	bd38      	pop	{r3, r4, r5, pc}
 801c04c:	20000114 	.word	0x20000114
 801c050:	2002c5cc 	.word	0x2002c5cc

0801c054 <LCD_FillRect>:
 801c054:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c056:	460e      	mov	r6, r1
 801c058:	4912      	ldr	r1, [pc, #72]	; (801c0a4 <LCD_FillRect+0x50>)
 801c05a:	680c      	ldr	r4, [r1, #0]
 801c05c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801c060:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c064:	4288      	cmp	r0, r1
 801c066:	bfa8      	it	ge
 801c068:	4601      	movge	r1, r0
 801c06a:	42aa      	cmp	r2, r5
 801c06c:	bfb8      	it	lt
 801c06e:	4615      	movlt	r5, r2
 801c070:	428d      	cmp	r5, r1
 801c072:	db14      	blt.n	801c09e <LCD_FillRect+0x4a>
 801c074:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801c078:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 801c07c:	4296      	cmp	r6, r2
 801c07e:	bfa8      	it	ge
 801c080:	4632      	movge	r2, r6
 801c082:	4283      	cmp	r3, r0
 801c084:	bfa8      	it	ge
 801c086:	4603      	movge	r3, r0
 801c088:	4293      	cmp	r3, r2
 801c08a:	db08      	blt.n	801c09e <LCD_FillRect+0x4a>
 801c08c:	7c64      	ldrb	r4, [r4, #17]
 801c08e:	4806      	ldr	r0, [pc, #24]	; (801c0a8 <LCD_FillRect+0x54>)
 801c090:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801c094:	68c4      	ldr	r4, [r0, #12]
 801c096:	9300      	str	r3, [sp, #0]
 801c098:	6924      	ldr	r4, [r4, #16]
 801c09a:	462b      	mov	r3, r5
 801c09c:	47a0      	blx	r4
 801c09e:	b002      	add	sp, #8
 801c0a0:	bd70      	pop	{r4, r5, r6, pc}
 801c0a2:	bf00      	nop
 801c0a4:	20000114 	.word	0x20000114
 801c0a8:	2002c5cc 	.word	0x2002c5cc

0801c0ac <LCD__DrawBitmap_1bpp>:
 801c0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0b0:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 801c260 <LCD__DrawBitmap_1bpp+0x1b4>
 801c0b4:	b08f      	sub	sp, #60	; 0x3c
 801c0b6:	f8dc c000 	ldr.w	ip, [ip]
 801c0ba:	9009      	str	r0, [sp, #36]	; 0x24
 801c0bc:	460e      	mov	r6, r1
 801c0be:	4615      	mov	r5, r2
 801c0c0:	469b      	mov	fp, r3
 801c0c2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801c0c4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 801c0c8:	f1bc 0f00 	cmp.w	ip, #0
 801c0cc:	d00d      	beq.n	801c0ea <LCD__DrawBitmap_1bpp+0x3e>
 801c0ce:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801c0d0:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801c0d2:	9500      	str	r5, [sp, #0]
 801c0d4:	9601      	str	r6, [sp, #4]
 801c0d6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801c0d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801c0da:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801c0dc:	9702      	str	r7, [sp, #8]
 801c0de:	9503      	str	r5, [sp, #12]
 801c0e0:	9404      	str	r4, [sp, #16]
 801c0e2:	9605      	str	r6, [sp, #20]
 801c0e4:	f8dc 4000 	ldr.w	r4, [ip]
 801c0e8:	e053      	b.n	801c192 <LCD__DrawBitmap_1bpp+0xe6>
 801c0ea:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801c0ec:	9819      	ldr	r0, [sp, #100]	; 0x64
 801c0ee:	ea47 0300 	orr.w	r3, r7, r0
 801c0f2:	2b01      	cmp	r3, #1
 801c0f4:	d14f      	bne.n	801c196 <LCD__DrawBitmap_1bpp+0xea>
 801c0f6:	4b58      	ldr	r3, [pc, #352]	; (801c258 <LCD__DrawBitmap_1bpp+0x1ac>)
 801c0f8:	6818      	ldr	r0, [r3, #0]
 801c0fa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c0fe:	1a51      	subs	r1, r2, r1
 801c100:	2900      	cmp	r1, #0
 801c102:	dd08      	ble.n	801c116 <LCD__DrawBitmap_1bpp+0x6a>
 801c104:	ebc1 030b 	rsb	r3, r1, fp
 801c108:	2b00      	cmp	r3, #0
 801c10a:	f340 80a2 	ble.w	801c252 <LCD__DrawBitmap_1bpp+0x1a6>
 801c10e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801c110:	fb07 4401 	mla	r4, r7, r1, r4
 801c114:	e001      	b.n	801c11a <LCD__DrawBitmap_1bpp+0x6e>
 801c116:	465b      	mov	r3, fp
 801c118:	4632      	mov	r2, r6
 801c11a:	445e      	add	r6, fp
 801c11c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 801c120:	3e01      	subs	r6, #1
 801c122:	1a76      	subs	r6, r6, r1
 801c124:	2e00      	cmp	r6, #0
 801c126:	dd03      	ble.n	801c130 <LCD__DrawBitmap_1bpp+0x84>
 801c128:	1b9b      	subs	r3, r3, r6
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	f340 8091 	ble.w	801c252 <LCD__DrawBitmap_1bpp+0x1a6>
 801c130:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c132:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 801c136:	4429      	add	r1, r5
 801c138:	3901      	subs	r1, #1
 801c13a:	1b89      	subs	r1, r1, r6
 801c13c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801c13e:	2900      	cmp	r1, #0
 801c140:	bfc8      	it	gt
 801c142:	ebc1 0505 	rsbgt	r5, r1, r5
 801c146:	ebc8 0106 	rsb	r1, r8, r6
 801c14a:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801c14e:	42b1      	cmp	r1, r6
 801c150:	da0c      	bge.n	801c16c <LCD__DrawBitmap_1bpp+0xc0>
 801c152:	ebc1 0c06 	rsb	ip, r1, r6
 801c156:	eb08 070c 	add.w	r7, r8, ip
 801c15a:	1b8e      	subs	r6, r1, r6
 801c15c:	f02c 0c07 	bic.w	ip, ip, #7
 801c160:	4435      	add	r5, r6
 801c162:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 801c166:	4461      	add	r1, ip
 801c168:	f007 0807 	and.w	r8, r7, #7
 801c16c:	2d00      	cmp	r5, #0
 801c16e:	dd70      	ble.n	801c252 <LCD__DrawBitmap_1bpp+0x1a6>
 801c170:	7c46      	ldrb	r6, [r0, #17]
 801c172:	483a      	ldr	r0, [pc, #232]	; (801c25c <LCD__DrawBitmap_1bpp+0x1b0>)
 801c174:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801c176:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 801c17a:	68c6      	ldr	r6, [r0, #12]
 801c17c:	9701      	str	r7, [sp, #4]
 801c17e:	9403      	str	r4, [sp, #12]
 801c180:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801c182:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801c184:	9300      	str	r3, [sp, #0]
 801c186:	9702      	str	r7, [sp, #8]
 801c188:	f8cd 8010 	str.w	r8, [sp, #16]
 801c18c:	9405      	str	r4, [sp, #20]
 801c18e:	6874      	ldr	r4, [r6, #4]
 801c190:	462b      	mov	r3, r5
 801c192:	47a0      	blx	r4
 801c194:	e05d      	b.n	801c252 <LCD__DrawBitmap_1bpp+0x1a6>
 801c196:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801c198:	f1c7 0708 	rsb	r7, r7, #8
 801c19c:	970c      	str	r7, [sp, #48]	; 0x30
 801c19e:	4667      	mov	r7, ip
 801c1a0:	45dc      	cmp	ip, fp
 801c1a2:	da56      	bge.n	801c252 <LCD__DrawBitmap_1bpp+0x1a6>
 801c1a4:	4b2c      	ldr	r3, [pc, #176]	; (801c258 <LCD__DrawBitmap_1bpp+0x1ac>)
 801c1a6:	9819      	ldr	r0, [sp, #100]	; 0x64
 801c1a8:	681b      	ldr	r3, [r3, #0]
 801c1aa:	4430      	add	r0, r6
 801c1ac:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 801c1b0:	900a      	str	r0, [sp, #40]	; 0x28
 801c1b2:	1e41      	subs	r1, r0, #1
 801c1b4:	4291      	cmp	r1, r2
 801c1b6:	910b      	str	r1, [sp, #44]	; 0x2c
 801c1b8:	db45      	blt.n	801c246 <LCD__DrawBitmap_1bpp+0x19a>
 801c1ba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801c1be:	429e      	cmp	r6, r3
 801c1c0:	dc41      	bgt.n	801c246 <LCD__DrawBitmap_1bpp+0x19a>
 801c1c2:	f04f 0800 	mov.w	r8, #0
 801c1c6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c1ca:	9408      	str	r4, [sp, #32]
 801c1cc:	46c2      	mov	sl, r8
 801c1ce:	45aa      	cmp	sl, r5
 801c1d0:	da39      	bge.n	801c246 <LCD__DrawBitmap_1bpp+0x19a>
 801c1d2:	f1b8 0f00 	cmp.w	r8, #0
 801c1d6:	d105      	bne.n	801c1e4 <LCD__DrawBitmap_1bpp+0x138>
 801c1d8:	9a08      	ldr	r2, [sp, #32]
 801c1da:	7817      	ldrb	r7, [r2, #0]
 801c1dc:	3201      	adds	r2, #1
 801c1de:	9208      	str	r2, [sp, #32]
 801c1e0:	f04f 0808 	mov.w	r8, #8
 801c1e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c1e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c1e8:	4a1b      	ldr	r2, [pc, #108]	; (801c258 <LCD__DrawBitmap_1bpp+0x1ac>)
 801c1ea:	fa47 f300 	asr.w	r3, r7, r0
 801c1ee:	ebc1 0808 	rsb	r8, r1, r8
 801c1f2:	408f      	lsls	r7, r1
 801c1f4:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 801c1f8:	b2ff      	uxtb	r7, r7
 801c1fa:	d103      	bne.n	801c204 <LCD__DrawBitmap_1bpp+0x158>
 801c1fc:	6810      	ldr	r0, [r2, #0]
 801c1fe:	7c00      	ldrb	r0, [r0, #16]
 801c200:	0780      	lsls	r0, r0, #30
 801c202:	d41b      	bmi.n	801c23c <LCD__DrawBitmap_1bpp+0x190>
 801c204:	6812      	ldr	r2, [r2, #0]
 801c206:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801c208:	6810      	ldr	r0, [r2, #0]
 801c20a:	900d      	str	r0, [sp, #52]	; 0x34
 801c20c:	981d      	ldr	r0, [sp, #116]	; 0x74
 801c20e:	b110      	cbz	r0, 801c216 <LCD__DrawBitmap_1bpp+0x16a>
 801c210:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 801c214:	e000      	b.n	801c218 <LCD__DrawBitmap_1bpp+0x16c>
 801c216:	b2db      	uxtb	r3, r3
 801c218:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c21a:	6013      	str	r3, [r2, #0]
 801c21c:	1e4a      	subs	r2, r1, #1
 801c21e:	444a      	add	r2, r9
 801c220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c222:	f8cd c01c 	str.w	ip, [sp, #28]
 801c226:	4648      	mov	r0, r9
 801c228:	4631      	mov	r1, r6
 801c22a:	f7ff ff13 	bl	801c054 <LCD_FillRect>
 801c22e:	4b0a      	ldr	r3, [pc, #40]	; (801c258 <LCD__DrawBitmap_1bpp+0x1ac>)
 801c230:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801c238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c23a:	601a      	str	r2, [r3, #0]
 801c23c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c23e:	f10a 0a01 	add.w	sl, sl, #1
 801c242:	4499      	add	r9, r3
 801c244:	e7c3      	b.n	801c1ce <LCD__DrawBitmap_1bpp+0x122>
 801c246:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801c248:	f10c 0c01 	add.w	ip, ip, #1
 801c24c:	4434      	add	r4, r6
 801c24e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801c250:	e7a6      	b.n	801c1a0 <LCD__DrawBitmap_1bpp+0xf4>
 801c252:	b00f      	add	sp, #60	; 0x3c
 801c254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c258:	20000114 	.word	0x20000114
 801c25c:	2002c5cc 	.word	0x2002c5cc
 801c260:	2002c5a0 	.word	0x2002c5a0

0801c264 <LCD_DrawBitmap>:
 801c264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c268:	f8df c20c 	ldr.w	ip, [pc, #524]	; 801c478 <LCD_DrawBitmap+0x214>
 801c26c:	b091      	sub	sp, #68	; 0x44
 801c26e:	f8dc 9000 	ldr.w	r9, [ip]
 801c272:	9207      	str	r2, [sp, #28]
 801c274:	4605      	mov	r5, r0
 801c276:	4688      	mov	r8, r1
 801c278:	469b      	mov	fp, r3
 801c27a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801c27c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801c27e:	f1b9 0f00 	cmp.w	r9, #0
 801c282:	d00c      	beq.n	801c29e <LCD_DrawBitmap+0x3a>
 801c284:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801c286:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801c288:	9500      	str	r5, [sp, #0]
 801c28a:	9701      	str	r7, [sp, #4]
 801c28c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801c28e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 801c290:	9602      	str	r6, [sp, #8]
 801c292:	9503      	str	r5, [sp, #12]
 801c294:	9404      	str	r4, [sp, #16]
 801c296:	9705      	str	r7, [sp, #20]
 801c298:	f8d9 4000 	ldr.w	r4, [r9]
 801c29c:	e081      	b.n	801c3a2 <LCD_DrawBitmap+0x13e>
 801c29e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801c2a0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801c2a2:	ea47 0300 	orr.w	r3, r7, r0
 801c2a6:	2b01      	cmp	r3, #1
 801c2a8:	d17d      	bne.n	801c3a6 <LCD_DrawBitmap+0x142>
 801c2aa:	4b71      	ldr	r3, [pc, #452]	; (801c470 <LCD_DrawBitmap+0x20c>)
 801c2ac:	6818      	ldr	r0, [r3, #0]
 801c2ae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c2b2:	1a53      	subs	r3, r2, r1
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	dd08      	ble.n	801c2ca <LCD_DrawBitmap+0x66>
 801c2b8:	ebc3 010b 	rsb	r1, r3, fp
 801c2bc:	2900      	cmp	r1, #0
 801c2be:	f340 80d4 	ble.w	801c46a <LCD_DrawBitmap+0x206>
 801c2c2:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 801c2c4:	fb07 4403 	mla	r4, r7, r3, r4
 801c2c8:	e001      	b.n	801c2ce <LCD_DrawBitmap+0x6a>
 801c2ca:	4659      	mov	r1, fp
 801c2cc:	4642      	mov	r2, r8
 801c2ce:	44d8      	add	r8, fp
 801c2d0:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 801c2d4:	f108 38ff 	add.w	r8, r8, #4294967295
 801c2d8:	ebc3 0808 	rsb	r8, r3, r8
 801c2dc:	f1b8 0f00 	cmp.w	r8, #0
 801c2e0:	dd04      	ble.n	801c2ec <LCD_DrawBitmap+0x88>
 801c2e2:	ebc8 0101 	rsb	r1, r8, r1
 801c2e6:	2900      	cmp	r1, #0
 801c2e8:	f340 80bf 	ble.w	801c46a <LCD_DrawBitmap+0x206>
 801c2ec:	9b07      	ldr	r3, [sp, #28]
 801c2ee:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 801c2f2:	442b      	add	r3, r5
 801c2f4:	3b01      	subs	r3, #1
 801c2f6:	ebcc 0303 	rsb	r3, ip, r3
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	dd02      	ble.n	801c304 <LCD_DrawBitmap+0xa0>
 801c2fe:	9f07      	ldr	r7, [sp, #28]
 801c300:	1aff      	subs	r7, r7, r3
 801c302:	9707      	str	r7, [sp, #28]
 801c304:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 801c308:	4565      	cmp	r5, ip
 801c30a:	da33      	bge.n	801c374 <LCD_DrawBitmap+0x110>
 801c30c:	9f07      	ldr	r7, [sp, #28]
 801c30e:	ebc5 030c 	rsb	r3, r5, ip
 801c312:	1aff      	subs	r7, r7, r3
 801c314:	2e08      	cmp	r6, #8
 801c316:	9707      	str	r7, [sp, #28]
 801c318:	d027      	beq.n	801c36a <LCD_DrawBitmap+0x106>
 801c31a:	dc0d      	bgt.n	801c338 <LCD_DrawBitmap+0xd4>
 801c31c:	2e02      	cmp	r6, #2
 801c31e:	d014      	beq.n	801c34a <LCD_DrawBitmap+0xe6>
 801c320:	2e04      	cmp	r6, #4
 801c322:	d01a      	beq.n	801c35a <LCD_DrawBitmap+0xf6>
 801c324:	2e01      	cmp	r6, #1
 801c326:	d126      	bne.n	801c376 <LCD_DrawBitmap+0x112>
 801c328:	f023 0c07 	bic.w	ip, r3, #7
 801c32c:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 801c330:	4465      	add	r5, ip
 801c332:	f003 0307 	and.w	r3, r3, #7
 801c336:	e01e      	b.n	801c376 <LCD_DrawBitmap+0x112>
 801c338:	2e18      	cmp	r6, #24
 801c33a:	d018      	beq.n	801c36e <LCD_DrawBitmap+0x10a>
 801c33c:	2e20      	cmp	r6, #32
 801c33e:	d016      	beq.n	801c36e <LCD_DrawBitmap+0x10a>
 801c340:	2e10      	cmp	r6, #16
 801c342:	d118      	bne.n	801c376 <LCD_DrawBitmap+0x112>
 801c344:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c348:	e013      	b.n	801c372 <LCD_DrawBitmap+0x10e>
 801c34a:	f023 0c03 	bic.w	ip, r3, #3
 801c34e:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 801c352:	4465      	add	r5, ip
 801c354:	f003 0303 	and.w	r3, r3, #3
 801c358:	e00d      	b.n	801c376 <LCD_DrawBitmap+0x112>
 801c35a:	f023 0c01 	bic.w	ip, r3, #1
 801c35e:	eb04 0463 	add.w	r4, r4, r3, asr #1
 801c362:	4465      	add	r5, ip
 801c364:	f003 0301 	and.w	r3, r3, #1
 801c368:	e005      	b.n	801c376 <LCD_DrawBitmap+0x112>
 801c36a:	441c      	add	r4, r3
 801c36c:	e001      	b.n	801c372 <LCD_DrawBitmap+0x10e>
 801c36e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801c372:	4665      	mov	r5, ip
 801c374:	2300      	movs	r3, #0
 801c376:	9f07      	ldr	r7, [sp, #28]
 801c378:	2f00      	cmp	r7, #0
 801c37a:	dd76      	ble.n	801c46a <LCD_DrawBitmap+0x206>
 801c37c:	f890 e011 	ldrb.w	lr, [r0, #17]
 801c380:	483c      	ldr	r0, [pc, #240]	; (801c474 <LCD_DrawBitmap+0x210>)
 801c382:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 801c384:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 801c388:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 801c38c:	9403      	str	r4, [sp, #12]
 801c38e:	e88d 0042 	stmia.w	sp, {r1, r6}
 801c392:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 801c394:	9304      	str	r3, [sp, #16]
 801c396:	9702      	str	r7, [sp, #8]
 801c398:	9405      	str	r4, [sp, #20]
 801c39a:	f8de 4004 	ldr.w	r4, [lr, #4]
 801c39e:	9b07      	ldr	r3, [sp, #28]
 801c3a0:	4629      	mov	r1, r5
 801c3a2:	47a0      	blx	r4
 801c3a4:	e061      	b.n	801c46a <LCD_DrawBitmap+0x206>
 801c3a6:	f1c6 0708 	rsb	r7, r6, #8
 801c3aa:	970e      	str	r7, [sp, #56]	; 0x38
 801c3ac:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801c3b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801c3b2:	455f      	cmp	r7, fp
 801c3b4:	da59      	bge.n	801c46a <LCD_DrawBitmap+0x206>
 801c3b6:	4b2e      	ldr	r3, [pc, #184]	; (801c470 <LCD_DrawBitmap+0x20c>)
 801c3b8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801c3ba:	681b      	ldr	r3, [r3, #0]
 801c3bc:	4447      	add	r7, r8
 801c3be:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 801c3c2:	970c      	str	r7, [sp, #48]	; 0x30
 801c3c4:	3f01      	subs	r7, #1
 801c3c6:	4297      	cmp	r7, r2
 801c3c8:	970d      	str	r7, [sp, #52]	; 0x34
 801c3ca:	db46      	blt.n	801c45a <LCD_DrawBitmap+0x1f6>
 801c3cc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801c3d0:	4598      	cmp	r8, r3
 801c3d2:	dc42      	bgt.n	801c45a <LCD_DrawBitmap+0x1f6>
 801c3d4:	f04f 0a00 	mov.w	sl, #0
 801c3d8:	940b      	str	r4, [sp, #44]	; 0x2c
 801c3da:	46ac      	mov	ip, r5
 801c3dc:	4657      	mov	r7, sl
 801c3de:	9807      	ldr	r0, [sp, #28]
 801c3e0:	4287      	cmp	r7, r0
 801c3e2:	da3a      	bge.n	801c45a <LCD_DrawBitmap+0x1f6>
 801c3e4:	f1ba 0f00 	cmp.w	sl, #0
 801c3e8:	d106      	bne.n	801c3f8 <LCD_DrawBitmap+0x194>
 801c3ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c3ec:	f890 9000 	ldrb.w	r9, [r0]
 801c3f0:	3001      	adds	r0, #1
 801c3f2:	900b      	str	r0, [sp, #44]	; 0x2c
 801c3f4:	f04f 0a08 	mov.w	sl, #8
 801c3f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c3fa:	4a1d      	ldr	r2, [pc, #116]	; (801c470 <LCD_DrawBitmap+0x20c>)
 801c3fc:	fa49 f301 	asr.w	r3, r9, r1
 801c400:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 801c404:	fa09 f906 	lsl.w	r9, r9, r6
 801c408:	fa5f f989 	uxtb.w	r9, r9
 801c40c:	ebc6 0a0a 	rsb	sl, r6, sl
 801c410:	d103      	bne.n	801c41a <LCD_DrawBitmap+0x1b6>
 801c412:	6810      	ldr	r0, [r2, #0]
 801c414:	7c00      	ldrb	r0, [r0, #16]
 801c416:	0780      	lsls	r0, r0, #30
 801c418:	d41b      	bmi.n	801c452 <LCD_DrawBitmap+0x1ee>
 801c41a:	6812      	ldr	r2, [r2, #0]
 801c41c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801c41e:	6810      	ldr	r0, [r2, #0]
 801c420:	900f      	str	r0, [sp, #60]	; 0x3c
 801c422:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801c424:	b110      	cbz	r0, 801c42c <LCD_DrawBitmap+0x1c8>
 801c426:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 801c42a:	e000      	b.n	801c42e <LCD_DrawBitmap+0x1ca>
 801c42c:	b2db      	uxtb	r3, r3
 801c42e:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c430:	6013      	str	r3, [r2, #0]
 801c432:	1e4a      	subs	r2, r1, #1
 801c434:	4462      	add	r2, ip
 801c436:	4660      	mov	r0, ip
 801c438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c43a:	f8cd c020 	str.w	ip, [sp, #32]
 801c43e:	4641      	mov	r1, r8
 801c440:	f7ff fe08 	bl	801c054 <LCD_FillRect>
 801c444:	4b0a      	ldr	r3, [pc, #40]	; (801c470 <LCD_DrawBitmap+0x20c>)
 801c446:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c448:	681b      	ldr	r3, [r3, #0]
 801c44a:	f8dd c020 	ldr.w	ip, [sp, #32]
 801c44e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c450:	601a      	str	r2, [r3, #0]
 801c452:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801c454:	3701      	adds	r7, #1
 801c456:	449c      	add	ip, r3
 801c458:	e7c1      	b.n	801c3de <LCD_DrawBitmap+0x17a>
 801c45a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801c45c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 801c460:	3701      	adds	r7, #1
 801c462:	970a      	str	r7, [sp, #40]	; 0x28
 801c464:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 801c466:	443c      	add	r4, r7
 801c468:	e7a2      	b.n	801c3b0 <LCD_DrawBitmap+0x14c>
 801c46a:	b011      	add	sp, #68	; 0x44
 801c46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c470:	20000114 	.word	0x20000114
 801c474:	2002c5cc 	.word	0x2002c5cc
 801c478:	2002c5a0 	.word	0x2002c5a0

0801c47c <LCD_SetClipRectMax>:
 801c47c:	b508      	push	{r3, lr}
 801c47e:	4b05      	ldr	r3, [pc, #20]	; (801c494 <LCD_SetClipRectMax+0x18>)
 801c480:	6819      	ldr	r1, [r3, #0]
 801c482:	4b05      	ldr	r3, [pc, #20]	; (801c498 <LCD_SetClipRectMax+0x1c>)
 801c484:	7c4a      	ldrb	r2, [r1, #17]
 801c486:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801c48a:	68c3      	ldr	r3, [r0, #12]
 801c48c:	3108      	adds	r1, #8
 801c48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c490:	4798      	blx	r3
 801c492:	bd08      	pop	{r3, pc}
 801c494:	20000114 	.word	0x20000114
 801c498:	2002c5cc 	.word	0x2002c5cc

0801c49c <emWin_LCD_Init>:
 801c49c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c49e:	f7ff ffed 	bl	801c47c <LCD_SetClipRectMax>
 801c4a2:	f004 fde5 	bl	8021070 <LCD_InitColors>
 801c4a6:	4604      	mov	r4, r0
 801c4a8:	2800      	cmp	r0, #0
 801c4aa:	d13d      	bne.n	801c528 <emWin_LCD_Init+0x8c>
 801c4ac:	4605      	mov	r5, r0
 801c4ae:	4628      	mov	r0, r5
 801c4b0:	f001 fbbe 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 801c4b4:	9001      	str	r0, [sp, #4]
 801c4b6:	b148      	cbz	r0, 801c4cc <emWin_LCD_Init+0x30>
 801c4b8:	68c3      	ldr	r3, [r0, #12]
 801c4ba:	210c      	movs	r1, #12
 801c4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c4be:	a801      	add	r0, sp, #4
 801c4c0:	4798      	blx	r3
 801c4c2:	4603      	mov	r3, r0
 801c4c4:	b370      	cbz	r0, 801c524 <emWin_LCD_Init+0x88>
 801c4c6:	9801      	ldr	r0, [sp, #4]
 801c4c8:	4798      	blx	r3
 801c4ca:	4304      	orrs	r4, r0
 801c4cc:	3501      	adds	r5, #1
 801c4ce:	2d02      	cmp	r5, #2
 801c4d0:	d1ed      	bne.n	801c4ae <emWin_LCD_Init+0x12>
 801c4d2:	bb4c      	cbnz	r4, 801c528 <emWin_LCD_Init+0x8c>
 801c4d4:	f004 fe18 	bl	8021108 <LCD_InitLUT>
 801c4d8:	2401      	movs	r4, #1
 801c4da:	4620      	mov	r0, r4
 801c4dc:	f001 fba8 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 801c4e0:	9001      	str	r0, [sp, #4]
 801c4e2:	b1d0      	cbz	r0, 801c51a <emWin_LCD_Init+0x7e>
 801c4e4:	4620      	mov	r0, r4
 801c4e6:	f000 fc3f 	bl	801cd68 <GUI_SelectLayer>
 801c4ea:	2004      	movs	r0, #4
 801c4ec:	f7ff fd30 	bl	801bf50 <LCD_SetDrawMode>
 801c4f0:	f643 72ff 	movw	r2, #16383	; 0x3fff
 801c4f4:	2000      	movs	r0, #0
 801c4f6:	4601      	mov	r1, r0
 801c4f8:	4613      	mov	r3, r2
 801c4fa:	f7ff fdab 	bl	801c054 <LCD_FillRect>
 801c4fe:	2000      	movs	r0, #0
 801c500:	f7ff fd26 	bl	801bf50 <LCD_SetDrawMode>
 801c504:	a802      	add	r0, sp, #8
 801c506:	210e      	movs	r1, #14
 801c508:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 801c50c:	68db      	ldr	r3, [r3, #12]
 801c50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c510:	4798      	blx	r3
 801c512:	4603      	mov	r3, r0
 801c514:	b108      	cbz	r0, 801c51a <emWin_LCD_Init+0x7e>
 801c516:	9801      	ldr	r0, [sp, #4]
 801c518:	4798      	blx	r3
 801c51a:	f114 34ff 	adds.w	r4, r4, #4294967295
 801c51e:	d2dc      	bcs.n	801c4da <emWin_LCD_Init+0x3e>
 801c520:	2000      	movs	r0, #0
 801c522:	e002      	b.n	801c52a <emWin_LCD_Init+0x8e>
 801c524:	2001      	movs	r0, #1
 801c526:	e000      	b.n	801c52a <emWin_LCD_Init+0x8e>
 801c528:	4620      	mov	r0, r4
 801c52a:	b003      	add	sp, #12
 801c52c:	bd30      	pop	{r4, r5, pc}
	...

0801c530 <LCD_Color2Index>:
 801c530:	b508      	push	{r3, lr}
 801c532:	4b05      	ldr	r3, [pc, #20]	; (801c548 <LCD_Color2Index+0x18>)
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	7c5a      	ldrb	r2, [r3, #17]
 801c538:	4b04      	ldr	r3, [pc, #16]	; (801c54c <LCD_Color2Index+0x1c>)
 801c53a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c53e:	691b      	ldr	r3, [r3, #16]
 801c540:	681b      	ldr	r3, [r3, #0]
 801c542:	4798      	blx	r3
 801c544:	bd08      	pop	{r3, pc}
 801c546:	bf00      	nop
 801c548:	20000114 	.word	0x20000114
 801c54c:	2002c5cc 	.word	0x2002c5cc

0801c550 <LCD_Index2Color>:
 801c550:	b508      	push	{r3, lr}
 801c552:	4b05      	ldr	r3, [pc, #20]	; (801c568 <LCD_Index2Color+0x18>)
 801c554:	681b      	ldr	r3, [r3, #0]
 801c556:	7c5a      	ldrb	r2, [r3, #17]
 801c558:	4b04      	ldr	r3, [pc, #16]	; (801c56c <LCD_Index2Color+0x1c>)
 801c55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c55e:	691b      	ldr	r3, [r3, #16]
 801c560:	685b      	ldr	r3, [r3, #4]
 801c562:	4798      	blx	r3
 801c564:	bd08      	pop	{r3, pc}
 801c566:	bf00      	nop
 801c568:	20000114 	.word	0x20000114
 801c56c:	2002c5cc 	.word	0x2002c5cc

0801c570 <LCD_SetColorIndex>:
 801c570:	4b04      	ldr	r3, [pc, #16]	; (801c584 <LCD_SetColorIndex+0x14>)
 801c572:	681b      	ldr	r3, [r3, #0]
 801c574:	7c1a      	ldrb	r2, [r3, #16]
 801c576:	0752      	lsls	r2, r2, #29
 801c578:	bf4c      	ite	mi
 801c57a:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 801c57c:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 801c57e:	6018      	str	r0, [r3, #0]
 801c580:	4770      	bx	lr
 801c582:	bf00      	nop
 801c584:	20000114 	.word	0x20000114

0801c588 <_SetColor>:
 801c588:	b508      	push	{r3, lr}
 801c58a:	4b06      	ldr	r3, [pc, #24]	; (801c5a4 <_SetColor+0x1c>)
 801c58c:	681b      	ldr	r3, [r3, #0]
 801c58e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801c590:	4281      	cmp	r1, r0
 801c592:	d006      	beq.n	801c5a2 <_SetColor+0x1a>
 801c594:	6318      	str	r0, [r3, #48]	; 0x30
 801c596:	f7ff ffcb 	bl	801c530 <LCD_Color2Index>
 801c59a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c59e:	f7ff bfe7 	b.w	801c570 <LCD_SetColorIndex>
 801c5a2:	bd08      	pop	{r3, pc}
 801c5a4:	20000114 	.word	0x20000114

0801c5a8 <LCD_SetBkColorIndex>:
 801c5a8:	4b04      	ldr	r3, [pc, #16]	; (801c5bc <LCD_SetBkColorIndex+0x14>)
 801c5aa:	681b      	ldr	r3, [r3, #0]
 801c5ac:	7c1a      	ldrb	r2, [r3, #16]
 801c5ae:	0752      	lsls	r2, r2, #29
 801c5b0:	bf4c      	ite	mi
 801c5b2:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 801c5b4:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 801c5b6:	6018      	str	r0, [r3, #0]
 801c5b8:	4770      	bx	lr
 801c5ba:	bf00      	nop
 801c5bc:	20000114 	.word	0x20000114

0801c5c0 <_SetBkColor>:
 801c5c0:	b508      	push	{r3, lr}
 801c5c2:	4b06      	ldr	r3, [pc, #24]	; (801c5dc <_SetBkColor+0x1c>)
 801c5c4:	681b      	ldr	r3, [r3, #0]
 801c5c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801c5c8:	4281      	cmp	r1, r0
 801c5ca:	d006      	beq.n	801c5da <_SetBkColor+0x1a>
 801c5cc:	6358      	str	r0, [r3, #52]	; 0x34
 801c5ce:	f7ff ffaf 	bl	801c530 <LCD_Color2Index>
 801c5d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c5d6:	f7ff bfe7 	b.w	801c5a8 <LCD_SetBkColorIndex>
 801c5da:	bd08      	pop	{r3, pc}
 801c5dc:	20000114 	.word	0x20000114

0801c5e0 <LCD_SetBkColor>:
 801c5e0:	b508      	push	{r3, lr}
 801c5e2:	4b02      	ldr	r3, [pc, #8]	; (801c5ec <LCD_SetBkColor+0xc>)
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	685b      	ldr	r3, [r3, #4]
 801c5e8:	4798      	blx	r3
 801c5ea:	bd08      	pop	{r3, pc}
 801c5ec:	20000100 	.word	0x20000100

0801c5f0 <LCD_SetColor>:
 801c5f0:	b508      	push	{r3, lr}
 801c5f2:	4b02      	ldr	r3, [pc, #8]	; (801c5fc <LCD_SetColor+0xc>)
 801c5f4:	681b      	ldr	r3, [r3, #0]
 801c5f6:	681b      	ldr	r3, [r3, #0]
 801c5f8:	4798      	blx	r3
 801c5fa:	bd08      	pop	{r3, pc}
 801c5fc:	20000100 	.word	0x20000100

0801c600 <GUI__memset>:
 801c600:	b570      	push	{r4, r5, r6, lr}
 801c602:	b12a      	cbz	r2, 801c610 <GUI__memset+0x10>
 801c604:	0783      	lsls	r3, r0, #30
 801c606:	d003      	beq.n	801c610 <GUI__memset+0x10>
 801c608:	f800 1b01 	strb.w	r1, [r0], #1
 801c60c:	3a01      	subs	r2, #1
 801c60e:	e7f8      	b.n	801c602 <GUI__memset+0x2>
 801c610:	0893      	lsrs	r3, r2, #2
 801c612:	d101      	bne.n	801c618 <GUI__memset+0x18>
 801c614:	4402      	add	r2, r0
 801c616:	e017      	b.n	801c648 <GUI__memset+0x48>
 801c618:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 801c61c:	f002 0203 	and.w	r2, r2, #3
 801c620:	434c      	muls	r4, r1
 801c622:	2b03      	cmp	r3, #3
 801c624:	4605      	mov	r5, r0
 801c626:	dd06      	ble.n	801c636 <GUI__memset+0x36>
 801c628:	6004      	str	r4, [r0, #0]
 801c62a:	6044      	str	r4, [r0, #4]
 801c62c:	6084      	str	r4, [r0, #8]
 801c62e:	60c4      	str	r4, [r0, #12]
 801c630:	3b04      	subs	r3, #4
 801c632:	3010      	adds	r0, #16
 801c634:	e7f5      	b.n	801c622 <GUI__memset+0x22>
 801c636:	461e      	mov	r6, r3
 801c638:	b11b      	cbz	r3, 801c642 <GUI__memset+0x42>
 801c63a:	f845 4b04 	str.w	r4, [r5], #4
 801c63e:	3b01      	subs	r3, #1
 801c640:	e7fa      	b.n	801c638 <GUI__memset+0x38>
 801c642:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 801c646:	e7e5      	b.n	801c614 <GUI__memset+0x14>
 801c648:	4290      	cmp	r0, r2
 801c64a:	d002      	beq.n	801c652 <GUI__memset+0x52>
 801c64c:	f800 1b01 	strb.w	r1, [r0], #1
 801c650:	e7fa      	b.n	801c648 <GUI__memset+0x48>
 801c652:	bd70      	pop	{r4, r5, r6, pc}

0801c654 <GUI__ManageCacheEx>:
 801c654:	2801      	cmp	r0, #1
 801c656:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c658:	4604      	mov	r4, r0
 801c65a:	460d      	mov	r5, r1
 801c65c:	dc65      	bgt.n	801c72a <GUI__ManageCacheEx+0xd6>
 801c65e:	4b34      	ldr	r3, [pc, #208]	; (801c730 <GUI__ManageCacheEx+0xdc>)
 801c660:	681b      	ldr	r3, [r3, #0]
 801c662:	b103      	cbz	r3, 801c666 <GUI__ManageCacheEx+0x12>
 801c664:	4798      	blx	r3
 801c666:	2d01      	cmp	r5, #1
 801c668:	d004      	beq.n	801c674 <GUI__ManageCacheEx+0x20>
 801c66a:	2d02      	cmp	r5, #2
 801c66c:	d021      	beq.n	801c6b2 <GUI__ManageCacheEx+0x5e>
 801c66e:	2d00      	cmp	r5, #0
 801c670:	d15b      	bne.n	801c72a <GUI__ManageCacheEx+0xd6>
 801c672:	e035      	b.n	801c6e0 <GUI__ManageCacheEx+0x8c>
 801c674:	4e2f      	ldr	r6, [pc, #188]	; (801c734 <GUI__ManageCacheEx+0xe0>)
 801c676:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 801c67a:	b9b7      	cbnz	r7, 801c6aa <GUI__ManageCacheEx+0x56>
 801c67c:	4620      	mov	r0, r4
 801c67e:	f001 fad7 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 801c682:	9001      	str	r0, [sp, #4]
 801c684:	2800      	cmp	r0, #0
 801c686:	d050      	beq.n	801c72a <GUI__ManageCacheEx+0xd6>
 801c688:	68c3      	ldr	r3, [r0, #12]
 801c68a:	210d      	movs	r1, #13
 801c68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c68e:	a801      	add	r0, sp, #4
 801c690:	4798      	blx	r3
 801c692:	4603      	mov	r3, r0
 801c694:	2800      	cmp	r0, #0
 801c696:	d048      	beq.n	801c72a <GUI__ManageCacheEx+0xd6>
 801c698:	9801      	ldr	r0, [sp, #4]
 801c69a:	4629      	mov	r1, r5
 801c69c:	4798      	blx	r3
 801c69e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 801c6a2:	3301      	adds	r3, #1
 801c6a4:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 801c6a8:	e018      	b.n	801c6dc <GUI__ManageCacheEx+0x88>
 801c6aa:	3701      	adds	r7, #1
 801c6ac:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 801c6b0:	e03b      	b.n	801c72a <GUI__ManageCacheEx+0xd6>
 801c6b2:	4620      	mov	r0, r4
 801c6b4:	f001 fabc 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 801c6b8:	9001      	str	r0, [sp, #4]
 801c6ba:	2800      	cmp	r0, #0
 801c6bc:	d035      	beq.n	801c72a <GUI__ManageCacheEx+0xd6>
 801c6be:	68c3      	ldr	r3, [r0, #12]
 801c6c0:	210d      	movs	r1, #13
 801c6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c6c4:	a801      	add	r0, sp, #4
 801c6c6:	4798      	blx	r3
 801c6c8:	4604      	mov	r4, r0
 801c6ca:	2800      	cmp	r0, #0
 801c6cc:	d02d      	beq.n	801c72a <GUI__ManageCacheEx+0xd6>
 801c6ce:	4b1a      	ldr	r3, [pc, #104]	; (801c738 <GUI__ManageCacheEx+0xe4>)
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	b103      	cbz	r3, 801c6d6 <GUI__ManageCacheEx+0x82>
 801c6d4:	4798      	blx	r3
 801c6d6:	9801      	ldr	r0, [sp, #4]
 801c6d8:	2102      	movs	r1, #2
 801c6da:	47a0      	blx	r4
 801c6dc:	2000      	movs	r0, #0
 801c6de:	e025      	b.n	801c72c <GUI__ManageCacheEx+0xd8>
 801c6e0:	4d14      	ldr	r5, [pc, #80]	; (801c734 <GUI__ManageCacheEx+0xe0>)
 801c6e2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801c6e6:	2b01      	cmp	r3, #1
 801c6e8:	d001      	beq.n	801c6ee <GUI__ManageCacheEx+0x9a>
 801c6ea:	2001      	movs	r0, #1
 801c6ec:	e015      	b.n	801c71a <GUI__ManageCacheEx+0xc6>
 801c6ee:	4620      	mov	r0, r4
 801c6f0:	f001 fa9e 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 801c6f4:	9001      	str	r0, [sp, #4]
 801c6f6:	2800      	cmp	r0, #0
 801c6f8:	d0f7      	beq.n	801c6ea <GUI__ManageCacheEx+0x96>
 801c6fa:	68c3      	ldr	r3, [r0, #12]
 801c6fc:	210d      	movs	r1, #13
 801c6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c700:	a801      	add	r0, sp, #4
 801c702:	4798      	blx	r3
 801c704:	4606      	mov	r6, r0
 801c706:	2800      	cmp	r0, #0
 801c708:	d0ef      	beq.n	801c6ea <GUI__ManageCacheEx+0x96>
 801c70a:	4b0b      	ldr	r3, [pc, #44]	; (801c738 <GUI__ManageCacheEx+0xe4>)
 801c70c:	681b      	ldr	r3, [r3, #0]
 801c70e:	b103      	cbz	r3, 801c712 <GUI__ManageCacheEx+0xbe>
 801c710:	4798      	blx	r3
 801c712:	9801      	ldr	r0, [sp, #4]
 801c714:	2100      	movs	r1, #0
 801c716:	47b0      	blx	r6
 801c718:	2000      	movs	r0, #0
 801c71a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801c71e:	2b00      	cmp	r3, #0
 801c720:	bf18      	it	ne
 801c722:	3b01      	subne	r3, #1
 801c724:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 801c728:	e000      	b.n	801c72c <GUI__ManageCacheEx+0xd8>
 801c72a:	2001      	movs	r0, #1
 801c72c:	b003      	add	sp, #12
 801c72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c730:	2002c358 	.word	0x2002c358
 801c734:	2002c350 	.word	0x2002c350
 801c738:	2002c34c 	.word	0x2002c34c

0801c73c <GUI__ManageCache>:
 801c73c:	4b02      	ldr	r3, [pc, #8]	; (801c748 <GUI__ManageCache+0xc>)
 801c73e:	681b      	ldr	r3, [r3, #0]
 801c740:	4601      	mov	r1, r0
 801c742:	7c58      	ldrb	r0, [r3, #17]
 801c744:	f7ff bf86 	b.w	801c654 <GUI__ManageCacheEx>
 801c748:	20000114 	.word	0x20000114

0801c74c <GUI__IntersectRects>:
 801c74c:	b570      	push	{r4, r5, r6, lr}
 801c74e:	f9b2 3000 	ldrsh.w	r3, [r2]
 801c752:	f9b1 4000 	ldrsh.w	r4, [r1]
 801c756:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801c75a:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 801c75e:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 801c762:	429c      	cmp	r4, r3
 801c764:	bfb8      	it	lt
 801c766:	461c      	movlt	r4, r3
 801c768:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801c76c:	429d      	cmp	r5, r3
 801c76e:	bfa8      	it	ge
 801c770:	462b      	movge	r3, r5
 801c772:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 801c776:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801c77a:	42ae      	cmp	r6, r5
 801c77c:	bfb8      	it	lt
 801c77e:	4635      	movlt	r5, r6
 801c780:	b2a4      	uxth	r4, r4
 801c782:	b2ad      	uxth	r5, r5
 801c784:	4291      	cmp	r1, r2
 801c786:	bfb8      	it	lt
 801c788:	460a      	movlt	r2, r1
 801c78a:	8004      	strh	r4, [r0, #0]
 801c78c:	8085      	strh	r5, [r0, #4]
 801c78e:	b224      	sxth	r4, r4
 801c790:	b22d      	sxth	r5, r5
 801c792:	b29b      	uxth	r3, r3
 801c794:	b292      	uxth	r2, r2
 801c796:	42a5      	cmp	r5, r4
 801c798:	8043      	strh	r3, [r0, #2]
 801c79a:	80c2      	strh	r2, [r0, #6]
 801c79c:	db06      	blt.n	801c7ac <GUI__IntersectRects+0x60>
 801c79e:	b210      	sxth	r0, r2
 801c7a0:	b21b      	sxth	r3, r3
 801c7a2:	4298      	cmp	r0, r3
 801c7a4:	bfb4      	ite	lt
 801c7a6:	2000      	movlt	r0, #0
 801c7a8:	2001      	movge	r0, #1
 801c7aa:	bd70      	pop	{r4, r5, r6, pc}
 801c7ac:	2000      	movs	r0, #0
 801c7ae:	bd70      	pop	{r4, r5, r6, pc}

0801c7b0 <GUI__IntersectRect>:
 801c7b0:	880b      	ldrh	r3, [r1, #0]
 801c7b2:	b510      	push	{r4, lr}
 801c7b4:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c7b8:	b21a      	sxth	r2, r3
 801c7ba:	4294      	cmp	r4, r2
 801c7bc:	bfb8      	it	lt
 801c7be:	8003      	strhlt	r3, [r0, #0]
 801c7c0:	884b      	ldrh	r3, [r1, #2]
 801c7c2:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801c7c6:	b21a      	sxth	r2, r3
 801c7c8:	4294      	cmp	r4, r2
 801c7ca:	bfb8      	it	lt
 801c7cc:	8043      	strhlt	r3, [r0, #2]
 801c7ce:	888b      	ldrh	r3, [r1, #4]
 801c7d0:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801c7d4:	b21a      	sxth	r2, r3
 801c7d6:	4294      	cmp	r4, r2
 801c7d8:	bfc8      	it	gt
 801c7da:	8083      	strhgt	r3, [r0, #4]
 801c7dc:	88cb      	ldrh	r3, [r1, #6]
 801c7de:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801c7e2:	b21a      	sxth	r2, r3
 801c7e4:	4291      	cmp	r1, r2
 801c7e6:	bfc8      	it	gt
 801c7e8:	80c3      	strhgt	r3, [r0, #6]
 801c7ea:	bd10      	pop	{r4, pc}

0801c7ec <GUI__MixColors>:
 801c7ec:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 801c7f0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801c7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7f6:	d027      	beq.n	801c848 <GUI__MixColors+0x5c>
 801c7f8:	43d3      	mvns	r3, r2
 801c7fa:	b2db      	uxtb	r3, r3
 801c7fc:	b2cd      	uxtb	r5, r1
 801c7fe:	b2c6      	uxtb	r6, r0
 801c800:	435d      	muls	r5, r3
 801c802:	fb02 5506 	mla	r5, r2, r6, r5
 801c806:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 801c80a:	f400 447f 	and.w	r4, r0, #65280	; 0xff00
 801c80e:	435e      	muls	r6, r3
 801c810:	fb02 6604 	mla	r6, r2, r4, r6
 801c814:	f401 047f 	and.w	r4, r1, #16711680	; 0xff0000
 801c818:	f400 077f 	and.w	r7, r0, #16711680	; 0xff0000
 801c81c:	435c      	muls	r4, r3
 801c81e:	0e09      	lsrs	r1, r1, #24
 801c820:	0e00      	lsrs	r0, r0, #24
 801c822:	fb02 4407 	mla	r4, r2, r7, r4
 801c826:	434b      	muls	r3, r1
 801c828:	0a36      	lsrs	r6, r6, #8
 801c82a:	fb02 3200 	mla	r2, r2, r0, r3
 801c82e:	0a24      	lsrs	r4, r4, #8
 801c830:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801c834:	f406 407f 	and.w	r0, r6, #65280	; 0xff00
 801c838:	4318      	orrs	r0, r3
 801c83a:	0412      	lsls	r2, r2, #16
 801c83c:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 801c840:	4318      	orrs	r0, r3
 801c842:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 801c846:	4310      	orrs	r0, r2
 801c848:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801c84c <_OnExit>:
 801c84c:	b570      	push	{r4, r5, r6, lr}
 801c84e:	4c0a      	ldr	r4, [pc, #40]	; (801c878 <_OnExit+0x2c>)
 801c850:	4d0a      	ldr	r5, [pc, #40]	; (801c87c <_OnExit+0x30>)
 801c852:	6820      	ldr	r0, [r4, #0]
 801c854:	4e0a      	ldr	r6, [pc, #40]	; (801c880 <_OnExit+0x34>)
 801c856:	f002 f839 	bl	801e8cc <GUI_ALLOC_FreeFixedBlock>
 801c85a:	6828      	ldr	r0, [r5, #0]
 801c85c:	f002 f836 	bl	801e8cc <GUI_ALLOC_FreeFixedBlock>
 801c860:	6830      	ldr	r0, [r6, #0]
 801c862:	f002 f833 	bl	801e8cc <GUI_ALLOC_FreeFixedBlock>
 801c866:	4a07      	ldr	r2, [pc, #28]	; (801c884 <_OnExit+0x38>)
 801c868:	2300      	movs	r3, #0
 801c86a:	6013      	str	r3, [r2, #0]
 801c86c:	4a06      	ldr	r2, [pc, #24]	; (801c888 <_OnExit+0x3c>)
 801c86e:	6033      	str	r3, [r6, #0]
 801c870:	602b      	str	r3, [r5, #0]
 801c872:	6023      	str	r3, [r4, #0]
 801c874:	6013      	str	r3, [r2, #0]
 801c876:	bd70      	pop	{r4, r5, r6, pc}
 801c878:	2002c360 	.word	0x2002c360
 801c87c:	2002c35c 	.word	0x2002c35c
 801c880:	2002c364 	.word	0x2002c364
 801c884:	2002c368 	.word	0x2002c368
 801c888:	2002c378 	.word	0x2002c378

0801c88c <GUI__GetAlphaBuffer>:
 801c88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c890:	461c      	mov	r4, r3
 801c892:	4b28      	ldr	r3, [pc, #160]	; (801c934 <GUI__GetAlphaBuffer+0xa8>)
 801c894:	4617      	mov	r7, r2
 801c896:	681a      	ldr	r2, [r3, #0]
 801c898:	4606      	mov	r6, r0
 801c89a:	4688      	mov	r8, r1
 801c89c:	b932      	cbnz	r2, 801c8ac <GUI__GetAlphaBuffer+0x20>
 801c89e:	2201      	movs	r2, #1
 801c8a0:	4825      	ldr	r0, [pc, #148]	; (801c938 <GUI__GetAlphaBuffer+0xac>)
 801c8a2:	601a      	str	r2, [r3, #0]
 801c8a4:	4b25      	ldr	r3, [pc, #148]	; (801c93c <GUI__GetAlphaBuffer+0xb0>)
 801c8a6:	6003      	str	r3, [r0, #0]
 801c8a8:	f001 fafc 	bl	801dea4 <GUI__RegisterExit>
 801c8ac:	4d24      	ldr	r5, [pc, #144]	; (801c940 <GUI__GetAlphaBuffer+0xb4>)
 801c8ae:	682b      	ldr	r3, [r5, #0]
 801c8b0:	b933      	cbnz	r3, 801c8c0 <GUI__GetAlphaBuffer+0x34>
 801c8b2:	4b24      	ldr	r3, [pc, #144]	; (801c944 <GUI__GetAlphaBuffer+0xb8>)
 801c8b4:	681b      	ldr	r3, [r3, #0]
 801c8b6:	602b      	str	r3, [r5, #0]
 801c8b8:	b913      	cbnz	r3, 801c8c0 <GUI__GetAlphaBuffer+0x34>
 801c8ba:	f7ff fac5 	bl	801be48 <LCD_GetVXSizeMax>
 801c8be:	6028      	str	r0, [r5, #0]
 801c8c0:	b10c      	cbz	r4, 801c8c6 <GUI__GetAlphaBuffer+0x3a>
 801c8c2:	682b      	ldr	r3, [r5, #0]
 801c8c4:	6023      	str	r3, [r4, #0]
 801c8c6:	b196      	cbz	r6, 801c8ee <GUI__GetAlphaBuffer+0x62>
 801c8c8:	4b1f      	ldr	r3, [pc, #124]	; (801c948 <GUI__GetAlphaBuffer+0xbc>)
 801c8ca:	681a      	ldr	r2, [r3, #0]
 801c8cc:	4699      	mov	r9, r3
 801c8ce:	2400      	movs	r4, #0
 801c8d0:	b94a      	cbnz	r2, 801c8e6 <GUI__GetAlphaBuffer+0x5a>
 801c8d2:	6828      	ldr	r0, [r5, #0]
 801c8d4:	0080      	lsls	r0, r0, #2
 801c8d6:	f002 f959 	bl	801eb8c <GUI_ALLOC_GetFixedBlock>
 801c8da:	f1d0 0401 	rsbs	r4, r0, #1
 801c8de:	f8c9 0000 	str.w	r0, [r9]
 801c8e2:	bf38      	it	cc
 801c8e4:	2400      	movcc	r4, #0
 801c8e6:	f8d9 3000 	ldr.w	r3, [r9]
 801c8ea:	6033      	str	r3, [r6, #0]
 801c8ec:	e000      	b.n	801c8f0 <GUI__GetAlphaBuffer+0x64>
 801c8ee:	4634      	mov	r4, r6
 801c8f0:	f1b8 0f00 	cmp.w	r8, #0
 801c8f4:	d00d      	beq.n	801c912 <GUI__GetAlphaBuffer+0x86>
 801c8f6:	4e15      	ldr	r6, [pc, #84]	; (801c94c <GUI__GetAlphaBuffer+0xc0>)
 801c8f8:	6833      	ldr	r3, [r6, #0]
 801c8fa:	b93b      	cbnz	r3, 801c90c <GUI__GetAlphaBuffer+0x80>
 801c8fc:	6828      	ldr	r0, [r5, #0]
 801c8fe:	0080      	lsls	r0, r0, #2
 801c900:	f002 f944 	bl	801eb8c <GUI_ALLOC_GetFixedBlock>
 801c904:	2800      	cmp	r0, #0
 801c906:	6030      	str	r0, [r6, #0]
 801c908:	bf08      	it	eq
 801c90a:	2401      	moveq	r4, #1
 801c90c:	6833      	ldr	r3, [r6, #0]
 801c90e:	f8c8 3000 	str.w	r3, [r8]
 801c912:	b167      	cbz	r7, 801c92e <GUI__GetAlphaBuffer+0xa2>
 801c914:	4e0e      	ldr	r6, [pc, #56]	; (801c950 <GUI__GetAlphaBuffer+0xc4>)
 801c916:	6833      	ldr	r3, [r6, #0]
 801c918:	b93b      	cbnz	r3, 801c92a <GUI__GetAlphaBuffer+0x9e>
 801c91a:	6828      	ldr	r0, [r5, #0]
 801c91c:	0080      	lsls	r0, r0, #2
 801c91e:	f002 f935 	bl	801eb8c <GUI_ALLOC_GetFixedBlock>
 801c922:	2800      	cmp	r0, #0
 801c924:	6030      	str	r0, [r6, #0]
 801c926:	bf08      	it	eq
 801c928:	2401      	moveq	r4, #1
 801c92a:	6833      	ldr	r3, [r6, #0]
 801c92c:	603b      	str	r3, [r7, #0]
 801c92e:	4620      	mov	r0, r4
 801c930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c934:	2002c378 	.word	0x2002c378
 801c938:	2002c370 	.word	0x2002c370
 801c93c:	0801c84d 	.word	0x0801c84d
 801c940:	2002c368 	.word	0x2002c368
 801c944:	2002c5d4 	.word	0x2002c5d4
 801c948:	2002c360 	.word	0x2002c360
 801c94c:	2002c35c 	.word	0x2002c35c
 801c950:	2002c364 	.word	0x2002c364

0801c954 <GUI__DoAlphaBlending>:
 801c954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c958:	b093      	sub	sp, #76	; 0x4c
 801c95a:	2400      	movs	r4, #0
 801c95c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801c95e:	900b      	str	r0, [sp, #44]	; 0x2c
 801c960:	910c      	str	r1, [sp, #48]	; 0x30
 801c962:	4690      	mov	r8, r2
 801c964:	461f      	mov	r7, r3
 801c966:	6034      	str	r4, [r6, #0]
 801c968:	a80f      	add	r0, sp, #60	; 0x3c
 801c96a:	a910      	add	r1, sp, #64	; 0x40
 801c96c:	4622      	mov	r2, r4
 801c96e:	ab11      	add	r3, sp, #68	; 0x44
 801c970:	f7ff ff8c 	bl	801c88c <GUI__GetAlphaBuffer>
 801c974:	4605      	mov	r5, r0
 801c976:	2800      	cmp	r0, #0
 801c978:	f040 80c3 	bne.w	801cb02 <GUI__DoAlphaBlending+0x1ae>
 801c97c:	4c63      	ldr	r4, [pc, #396]	; (801cb0c <GUI__DoAlphaBlending+0x1b8>)
 801c97e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c980:	6823      	ldr	r3, [r4, #0]
 801c982:	7c58      	ldrb	r0, [r3, #17]
 801c984:	4b62      	ldr	r3, [pc, #392]	; (801cb10 <GUI__DoAlphaBlending+0x1bc>)
 801c986:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801c98a:	9307      	str	r3, [sp, #28]
 801c98c:	4297      	cmp	r7, r2
 801c98e:	bfa8      	it	ge
 801c990:	4617      	movge	r7, r2
 801c992:	691a      	ldr	r2, [r3, #16]
 801c994:	920d      	str	r2, [sp, #52]	; 0x34
 801c996:	970a      	str	r7, [sp, #40]	; 0x28
 801c998:	f7ff fa22 	bl	801bde0 <GUI_GetBitsPerPixelEx>
 801c99c:	6823      	ldr	r3, [r4, #0]
 801c99e:	9008      	str	r0, [sp, #32]
 801c9a0:	7c58      	ldrb	r0, [r3, #17]
 801c9a2:	f7ff fa3b 	bl	801be1c <GUI_GetpfIndex2ColorEx>
 801c9a6:	4b5b      	ldr	r3, [pc, #364]	; (801cb14 <GUI__DoAlphaBlending+0x1c0>)
 801c9a8:	9004      	str	r0, [sp, #16]
 801c9aa:	4298      	cmp	r0, r3
 801c9ac:	d005      	beq.n	801c9ba <GUI__DoAlphaBlending+0x66>
 801c9ae:	4b5a      	ldr	r3, [pc, #360]	; (801cb18 <GUI__DoAlphaBlending+0x1c4>)
 801c9b0:	1ac3      	subs	r3, r0, r3
 801c9b2:	bf18      	it	ne
 801c9b4:	2301      	movne	r3, #1
 801c9b6:	9306      	str	r3, [sp, #24]
 801c9b8:	e000      	b.n	801c9bc <GUI__DoAlphaBlending+0x68>
 801c9ba:	9506      	str	r5, [sp, #24]
 801c9bc:	2500      	movs	r5, #0
 801c9be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c9c0:	46ab      	mov	fp, r5
 801c9c2:	4643      	mov	r3, r8
 801c9c4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801c9c6:	f853 0b04 	ldr.w	r0, [r3], #4
 801c9ca:	9305      	str	r3, [sp, #20]
 801c9cc:	4790      	blx	r2
 801c9ce:	0e03      	lsrs	r3, r0, #24
 801c9d0:	4681      	mov	r9, r0
 801c9d2:	9309      	str	r3, [sp, #36]	; 0x24
 801c9d4:	f000 8085 	beq.w	801cae2 <GUI__DoAlphaBlending+0x18e>
 801c9d8:	f1bb 0f00 	cmp.w	fp, #0
 801c9dc:	d13f      	bne.n	801ca5e <GUI__DoAlphaBlending+0x10a>
 801c9de:	4b4b      	ldr	r3, [pc, #300]	; (801cb0c <GUI__DoAlphaBlending+0x1b8>)
 801c9e0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801c9e2:	681b      	ldr	r3, [r3, #0]
 801c9e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c9e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c9ea:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 801c9ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c9f0:	442f      	add	r7, r5
 801c9f2:	42bb      	cmp	r3, r7
 801c9f4:	bfc8      	it	gt
 801c9f6:	ebc7 0b03 	rsbgt	fp, r7, r3
 801c9fa:	eb0b 0a05 	add.w	sl, fp, r5
 801c9fe:	bfc8      	it	gt
 801ca00:	461f      	movgt	r7, r3
 801ca02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ca04:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 801ca08:	4453      	add	r3, sl
 801ca0a:	4494      	add	ip, r2
 801ca0c:	9300      	str	r3, [sp, #0]
 801ca0e:	9b07      	ldr	r3, [sp, #28]
 801ca10:	9301      	str	r3, [sp, #4]
 801ca12:	f10c 32ff 	add.w	r2, ip, #4294967295
 801ca16:	4638      	mov	r0, r7
 801ca18:	460b      	mov	r3, r1
 801ca1a:	f8cd c00c 	str.w	ip, [sp, #12]
 801ca1e:	f004 faa7 	bl	8020f70 <GUI_ReadRectEx>
 801ca22:	9a08      	ldr	r2, [sp, #32]
 801ca24:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ca26:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801ca2a:	2a17      	cmp	r2, #23
 801ca2c:	dc06      	bgt.n	801ca3c <GUI__DoAlphaBlending+0xe8>
 801ca2e:	4450      	add	r0, sl
 801ca30:	ebcb 0104 	rsb	r1, fp, r4
 801ca34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ca36:	f004 fc2d 	bl	8021294 <GUI__ExpandPixelIndicesEx>
 801ca3a:	e001      	b.n	801ca40 <GUI__DoAlphaBlending+0xec>
 801ca3c:	9b06      	ldr	r3, [sp, #24]
 801ca3e:	b913      	cbnz	r3, 801ca46 <GUI__DoAlphaBlending+0xf2>
 801ca40:	f04f 0b01 	mov.w	fp, #1
 801ca44:	e00b      	b.n	801ca5e <GUI__DoAlphaBlending+0x10a>
 801ca46:	ebc7 070c 	rsb	r7, r7, ip
 801ca4a:	4482      	add	sl, r0
 801ca4c:	f8da 0000 	ldr.w	r0, [sl]
 801ca50:	9a04      	ldr	r2, [sp, #16]
 801ca52:	4790      	blx	r2
 801ca54:	3f01      	subs	r7, #1
 801ca56:	f84a 0b04 	str.w	r0, [sl], #4
 801ca5a:	d1f7      	bne.n	801ca4c <GUI__DoAlphaBlending+0xf8>
 801ca5c:	e7f0      	b.n	801ca40 <GUI__DoAlphaBlending+0xec>
 801ca5e:	4b2f      	ldr	r3, [pc, #188]	; (801cb1c <GUI__DoAlphaBlending+0x1c8>)
 801ca60:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801ca62:	f8d3 c000 	ldr.w	ip, [r3]
 801ca66:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801ca68:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 801ca6c:	f1bc 0f00 	cmp.w	ip, #0
 801ca70:	d024      	beq.n	801cabc <GUI__DoAlphaBlending+0x168>
 801ca72:	eb07 020a 	add.w	r2, r7, sl
 801ca76:	4451      	add	r1, sl
 801ca78:	9210      	str	r2, [sp, #64]	; 0x40
 801ca7a:	4623      	mov	r3, r4
 801ca7c:	910f      	str	r1, [sp, #60]	; 0x3c
 801ca7e:	4640      	mov	r0, r8
 801ca80:	47e0      	blx	ip
 801ca82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ca84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ca86:	2300      	movs	r3, #0
 801ca88:	f858 1003 	ldr.w	r1, [r8, r3]
 801ca8c:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 801ca90:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 801ca94:	58e8      	ldr	r0, [r5, r3]
 801ca96:	d101      	bne.n	801ca9c <GUI__DoAlphaBlending+0x148>
 801ca98:	50d0      	str	r0, [r2, r3]
 801ca9a:	e005      	b.n	801caa8 <GUI__DoAlphaBlending+0x154>
 801ca9c:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 801caa0:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 801caa4:	bf08      	it	eq
 801caa6:	50d1      	streq	r1, [r2, r3]
 801caa8:	3c01      	subs	r4, #1
 801caaa:	f103 0304 	add.w	r3, r3, #4
 801caae:	d1eb      	bne.n	801ca88 <GUI__DoAlphaBlending+0x134>
 801cab0:	6833      	ldr	r3, [r6, #0]
 801cab2:	9710      	str	r7, [sp, #64]	; 0x40
 801cab4:	f043 0301 	orr.w	r3, r3, #1
 801cab8:	6033      	str	r3, [r6, #0]
 801caba:	e020      	b.n	801cafe <GUI__DoAlphaBlending+0x1aa>
 801cabc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cabe:	2bff      	cmp	r3, #255	; 0xff
 801cac0:	d104      	bne.n	801cacc <GUI__DoAlphaBlending+0x178>
 801cac2:	f851 300a 	ldr.w	r3, [r1, sl]
 801cac6:	f847 300a 	str.w	r3, [r7, sl]
 801caca:	e011      	b.n	801caf0 <GUI__DoAlphaBlending+0x19c>
 801cacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cace:	f851 100a 	ldr.w	r1, [r1, sl]
 801cad2:	43da      	mvns	r2, r3
 801cad4:	4648      	mov	r0, r9
 801cad6:	b2d2      	uxtb	r2, r2
 801cad8:	f7ff fe88 	bl	801c7ec <GUI__MixColors>
 801cadc:	f847 000a 	str.w	r0, [r7, sl]
 801cae0:	e002      	b.n	801cae8 <GUI__DoAlphaBlending+0x194>
 801cae2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cae4:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801cae8:	6833      	ldr	r3, [r6, #0]
 801caea:	f043 0301 	orr.w	r3, r3, #1
 801caee:	6033      	str	r3, [r6, #0]
 801caf0:	3c01      	subs	r4, #1
 801caf2:	f105 0501 	add.w	r5, r5, #1
 801caf6:	d002      	beq.n	801cafe <GUI__DoAlphaBlending+0x1aa>
 801caf8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801cafc:	e761      	b.n	801c9c2 <GUI__DoAlphaBlending+0x6e>
 801cafe:	9810      	ldr	r0, [sp, #64]	; 0x40
 801cb00:	e000      	b.n	801cb04 <GUI__DoAlphaBlending+0x1b0>
 801cb02:	4620      	mov	r0, r4
 801cb04:	b013      	add	sp, #76	; 0x4c
 801cb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb0a:	bf00      	nop
 801cb0c:	20000114 	.word	0x20000114
 801cb10:	2002c5cc 	.word	0x2002c5cc
 801cb14:	0801eef5 	.word	0x0801eef5
 801cb18:	0801eef3 	.word	0x0801eef3
 801cb1c:	2002c36c 	.word	0x2002c36c

0801cb20 <GUI__AllocAlphaBuffer>:
 801cb20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cb22:	b108      	cbz	r0, 801cb28 <GUI__AllocAlphaBuffer+0x8>
 801cb24:	aa03      	add	r2, sp, #12
 801cb26:	e000      	b.n	801cb2a <GUI__AllocAlphaBuffer+0xa>
 801cb28:	4602      	mov	r2, r0
 801cb2a:	a801      	add	r0, sp, #4
 801cb2c:	a902      	add	r1, sp, #8
 801cb2e:	2300      	movs	r3, #0
 801cb30:	f7ff feac 	bl	801c88c <GUI__GetAlphaBuffer>
 801cb34:	b005      	add	sp, #20
 801cb36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801cb3c <GUI_SignalEvent>:
 801cb3c:	b508      	push	{r3, lr}
 801cb3e:	4b02      	ldr	r3, [pc, #8]	; (801cb48 <GUI_SignalEvent+0xc>)
 801cb40:	681b      	ldr	r3, [r3, #0]
 801cb42:	b103      	cbz	r3, 801cb46 <GUI_SignalEvent+0xa>
 801cb44:	4798      	blx	r3
 801cb46:	bd08      	pop	{r3, pc}
 801cb48:	2002c37c 	.word	0x2002c37c

0801cb4c <GUI_DispDecAt>:
 801cb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb4e:	b085      	sub	sp, #20
 801cb50:	ac04      	add	r4, sp, #16
 801cb52:	460f      	mov	r7, r1
 801cb54:	4616      	mov	r6, r2
 801cb56:	ad01      	add	r5, sp, #4
 801cb58:	4619      	mov	r1, r3
 801cb5a:	2200      	movs	r2, #0
 801cb5c:	466b      	mov	r3, sp
 801cb5e:	f844 5d10 	str.w	r5, [r4, #-16]!
 801cb62:	f002 f913 	bl	801ed8c <GUI_AddDecShift>
 801cb66:	4628      	mov	r0, r5
 801cb68:	4639      	mov	r1, r7
 801cb6a:	4632      	mov	r2, r6
 801cb6c:	f000 ffbc 	bl	801dae8 <GUI_DispStringAt>
 801cb70:	b005      	add	sp, #20
 801cb72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cb74 <_Unlink>:
 801cb74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cb76:	4605      	mov	r5, r0
 801cb78:	b1f0      	cbz	r0, 801cbb8 <_Unlink+0x44>
 801cb7a:	f001 febb 	bl	801e8f4 <GUI_ALLOC_LockH>
 801cb7e:	4b0f      	ldr	r3, [pc, #60]	; (801cbbc <_Unlink+0x48>)
 801cb80:	9000      	str	r0, [sp, #0]
 801cb82:	681c      	ldr	r4, [r3, #0]
 801cb84:	42ac      	cmp	r4, r5
 801cb86:	d104      	bne.n	801cb92 <_Unlink+0x1e>
 801cb88:	6842      	ldr	r2, [r0, #4]
 801cb8a:	601a      	str	r2, [r3, #0]
 801cb8c:	e011      	b.n	801cbb2 <_Unlink+0x3e>
 801cb8e:	f001 febf 	bl	801e910 <GUI_ALLOC_UnlockH>
 801cb92:	b174      	cbz	r4, 801cbb2 <_Unlink+0x3e>
 801cb94:	4620      	mov	r0, r4
 801cb96:	f001 fead 	bl	801e8f4 <GUI_ALLOC_LockH>
 801cb9a:	4603      	mov	r3, r0
 801cb9c:	a802      	add	r0, sp, #8
 801cb9e:	685c      	ldr	r4, [r3, #4]
 801cba0:	f840 3d04 	str.w	r3, [r0, #-4]!
 801cba4:	42ac      	cmp	r4, r5
 801cba6:	d1f2      	bne.n	801cb8e <_Unlink+0x1a>
 801cba8:	9a00      	ldr	r2, [sp, #0]
 801cbaa:	6852      	ldr	r2, [r2, #4]
 801cbac:	605a      	str	r2, [r3, #4]
 801cbae:	f001 feaf 	bl	801e910 <GUI_ALLOC_UnlockH>
 801cbb2:	4668      	mov	r0, sp
 801cbb4:	f001 feac 	bl	801e910 <GUI_ALLOC_UnlockH>
 801cbb8:	b003      	add	sp, #12
 801cbba:	bd30      	pop	{r4, r5, pc}
 801cbbc:	2002c384 	.word	0x2002c384

0801cbc0 <GUI_TIMER__GetFirstTimer>:
 801cbc0:	2300      	movs	r3, #0
 801cbc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cbc4:	6003      	str	r3, [r0, #0]
 801cbc6:	4b09      	ldr	r3, [pc, #36]	; (801cbec <GUI_TIMER__GetFirstTimer+0x2c>)
 801cbc8:	681c      	ldr	r4, [r3, #0]
 801cbca:	4605      	mov	r5, r0
 801cbcc:	b154      	cbz	r4, 801cbe4 <GUI_TIMER__GetFirstTimer+0x24>
 801cbce:	4620      	mov	r0, r4
 801cbd0:	f001 fe90 	bl	801e8f4 <GUI_ALLOC_LockH>
 801cbd4:	ab02      	add	r3, sp, #8
 801cbd6:	6902      	ldr	r2, [r0, #16]
 801cbd8:	f843 0d04 	str.w	r0, [r3, #-4]!
 801cbdc:	602a      	str	r2, [r5, #0]
 801cbde:	4618      	mov	r0, r3
 801cbe0:	f001 fe96 	bl	801e910 <GUI_ALLOC_UnlockH>
 801cbe4:	4620      	mov	r0, r4
 801cbe6:	b003      	add	sp, #12
 801cbe8:	bd30      	pop	{r4, r5, pc}
 801cbea:	bf00      	nop
 801cbec:	2002c380 	.word	0x2002c380

0801cbf0 <GUI_TIMER__GetNextTimerLin>:
 801cbf0:	2300      	movs	r3, #0
 801cbf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cbf4:	600b      	str	r3, [r1, #0]
 801cbf6:	460e      	mov	r6, r1
 801cbf8:	4604      	mov	r4, r0
 801cbfa:	b190      	cbz	r0, 801cc22 <GUI_TIMER__GetNextTimerLin+0x32>
 801cbfc:	f001 fe7a 	bl	801e8f4 <GUI_ALLOC_LockH>
 801cc00:	ad02      	add	r5, sp, #8
 801cc02:	6884      	ldr	r4, [r0, #8]
 801cc04:	f845 0d04 	str.w	r0, [r5, #-4]!
 801cc08:	b144      	cbz	r4, 801cc1c <GUI_TIMER__GetNextTimerLin+0x2c>
 801cc0a:	4628      	mov	r0, r5
 801cc0c:	f001 fe80 	bl	801e910 <GUI_ALLOC_UnlockH>
 801cc10:	4620      	mov	r0, r4
 801cc12:	f001 fe6f 	bl	801e8f4 <GUI_ALLOC_LockH>
 801cc16:	6903      	ldr	r3, [r0, #16]
 801cc18:	9001      	str	r0, [sp, #4]
 801cc1a:	6033      	str	r3, [r6, #0]
 801cc1c:	4628      	mov	r0, r5
 801cc1e:	f001 fe77 	bl	801e910 <GUI_ALLOC_UnlockH>
 801cc22:	4620      	mov	r0, r4
 801cc24:	b002      	add	sp, #8
 801cc26:	bd70      	pop	{r4, r5, r6, pc}

0801cc28 <GUI_TIMER_Delete>:
 801cc28:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cc2a:	4604      	mov	r4, r0
 801cc2c:	b358      	cbz	r0, 801cc86 <GUI_TIMER_Delete+0x5e>
 801cc2e:	4d17      	ldr	r5, [pc, #92]	; (801cc8c <GUI_TIMER_Delete+0x64>)
 801cc30:	682e      	ldr	r6, [r5, #0]
 801cc32:	4286      	cmp	r6, r0
 801cc34:	d10b      	bne.n	801cc4e <GUI_TIMER_Delete+0x26>
 801cc36:	f001 fe5d 	bl	801e8f4 <GUI_ALLOC_LockH>
 801cc3a:	ab02      	add	r3, sp, #8
 801cc3c:	6882      	ldr	r2, [r0, #8]
 801cc3e:	f843 0d04 	str.w	r0, [r3, #-4]!
 801cc42:	602a      	str	r2, [r5, #0]
 801cc44:	4618      	mov	r0, r3
 801cc46:	e016      	b.n	801cc76 <GUI_TIMER_Delete+0x4e>
 801cc48:	4668      	mov	r0, sp
 801cc4a:	f001 fe61 	bl	801e910 <GUI_ALLOC_UnlockH>
 801cc4e:	4630      	mov	r0, r6
 801cc50:	f001 fe50 	bl	801e8f4 <GUI_ALLOC_LockH>
 801cc54:	6886      	ldr	r6, [r0, #8]
 801cc56:	ad02      	add	r5, sp, #8
 801cc58:	42a6      	cmp	r6, r4
 801cc5a:	f845 0d08 	str.w	r0, [r5, #-8]!
 801cc5e:	d1f3      	bne.n	801cc48 <GUI_TIMER_Delete+0x20>
 801cc60:	4620      	mov	r0, r4
 801cc62:	f001 fe47 	bl	801e8f4 <GUI_ALLOC_LockH>
 801cc66:	9b00      	ldr	r3, [sp, #0]
 801cc68:	6882      	ldr	r2, [r0, #8]
 801cc6a:	9001      	str	r0, [sp, #4]
 801cc6c:	609a      	str	r2, [r3, #8]
 801cc6e:	a801      	add	r0, sp, #4
 801cc70:	f001 fe4e 	bl	801e910 <GUI_ALLOC_UnlockH>
 801cc74:	4668      	mov	r0, sp
 801cc76:	f001 fe4b 	bl	801e910 <GUI_ALLOC_UnlockH>
 801cc7a:	4620      	mov	r0, r4
 801cc7c:	f7ff ff7a 	bl	801cb74 <_Unlink>
 801cc80:	4620      	mov	r0, r4
 801cc82:	f001 fe65 	bl	801e950 <GUI_ALLOC_Free>
 801cc86:	b002      	add	sp, #8
 801cc88:	bd70      	pop	{r4, r5, r6, pc}
 801cc8a:	bf00      	nop
 801cc8c:	2002c380 	.word	0x2002c380

0801cc90 <GUI_TIMER_GetFlag>:
 801cc90:	b513      	push	{r0, r1, r4, lr}
 801cc92:	460c      	mov	r4, r1
 801cc94:	b168      	cbz	r0, 801ccb2 <GUI_TIMER_GetFlag+0x22>
 801cc96:	f001 fe2d 	bl	801e8f4 <GUI_ALLOC_LockH>
 801cc9a:	ab02      	add	r3, sp, #8
 801cc9c:	8982      	ldrh	r2, [r0, #12]
 801cc9e:	f843 0d04 	str.w	r0, [r3, #-4]!
 801cca2:	4214      	tst	r4, r2
 801cca4:	4618      	mov	r0, r3
 801cca6:	bf0c      	ite	eq
 801cca8:	2400      	moveq	r4, #0
 801ccaa:	2401      	movne	r4, #1
 801ccac:	f001 fe30 	bl	801e910 <GUI_ALLOC_UnlockH>
 801ccb0:	e000      	b.n	801ccb4 <GUI_TIMER_GetFlag+0x24>
 801ccb2:	2401      	movs	r4, #1
 801ccb4:	4620      	mov	r0, r4
 801ccb6:	b002      	add	sp, #8
 801ccb8:	bd10      	pop	{r4, pc}
	...

0801ccbc <GUI_SetTextAlign>:
 801ccbc:	4b03      	ldr	r3, [pc, #12]	; (801cccc <GUI_SetTextAlign+0x10>)
 801ccbe:	681b      	ldr	r3, [r3, #0]
 801ccc0:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 801ccc4:	8598      	strh	r0, [r3, #44]	; 0x2c
 801ccc6:	4610      	mov	r0, r2
 801ccc8:	4770      	bx	lr
 801ccca:	bf00      	nop
 801cccc:	20000114 	.word	0x20000114

0801ccd0 <GUI_SetFont>:
 801ccd0:	4b03      	ldr	r3, [pc, #12]	; (801cce0 <GUI_SetFont+0x10>)
 801ccd2:	681b      	ldr	r3, [r3, #0]
 801ccd4:	69d9      	ldr	r1, [r3, #28]
 801ccd6:	b100      	cbz	r0, 801ccda <GUI_SetFont+0xa>
 801ccd8:	61d8      	str	r0, [r3, #28]
 801ccda:	4608      	mov	r0, r1
 801ccdc:	4770      	bx	lr
 801ccde:	bf00      	nop
 801cce0:	20000114 	.word	0x20000114

0801cce4 <GUI_SetDrawMode>:
 801cce4:	f7ff b934 	b.w	801bf50 <LCD_SetDrawMode>

0801cce8 <GL_SetDefault>:
 801cce8:	b508      	push	{r3, lr}
 801ccea:	2000      	movs	r0, #0
 801ccec:	f000 f81c 	bl	801cd28 <GUI_SetBkColor>
 801ccf0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ccf4:	f000 f81a 	bl	801cd2c <GUI_SetColor>
 801ccf8:	2001      	movs	r0, #1
 801ccfa:	f000 f88d 	bl	801ce18 <GUI_SetPenSize>
 801ccfe:	2000      	movs	r0, #0
 801cd00:	f7ff ffdc 	bl	801ccbc <GUI_SetTextAlign>
 801cd04:	2000      	movs	r0, #0
 801cd06:	f004 fd41 	bl	802178c <GUI_SetTextMode>
 801cd0a:	2000      	movs	r0, #0
 801cd0c:	f7ff ffea 	bl	801cce4 <GUI_SetDrawMode>
 801cd10:	4b04      	ldr	r3, [pc, #16]	; (801cd24 <GL_SetDefault+0x3c>)
 801cd12:	6818      	ldr	r0, [r3, #0]
 801cd14:	f7ff ffdc 	bl	801ccd0 <GUI_SetFont>
 801cd18:	2000      	movs	r0, #0
 801cd1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801cd1e:	f004 bd59 	b.w	80217d4 <GUI_SetLineStyle>
 801cd22:	bf00      	nop
 801cd24:	20000118 	.word	0x20000118

0801cd28 <GUI_SetBkColor>:
 801cd28:	f7ff bc5a 	b.w	801c5e0 <LCD_SetBkColor>

0801cd2c <GUI_SetColor>:
 801cd2c:	f7ff bc60 	b.w	801c5f0 <LCD_SetColor>

0801cd30 <GUI__AlphaPreserveTrans>:
 801cd30:	b510      	push	{r4, lr}
 801cd32:	4b07      	ldr	r3, [pc, #28]	; (801cd50 <GUI__AlphaPreserveTrans+0x20>)
 801cd34:	781c      	ldrb	r4, [r3, #0]
 801cd36:	b120      	cbz	r0, 801cd42 <GUI__AlphaPreserveTrans+0x12>
 801cd38:	2201      	movs	r2, #1
 801cd3a:	701a      	strb	r2, [r3, #0]
 801cd3c:	f04f 30ff 	mov.w	r0, #4294967295
 801cd40:	e002      	b.n	801cd48 <GUI__AlphaPreserveTrans+0x18>
 801cd42:	7018      	strb	r0, [r3, #0]
 801cd44:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801cd48:	f004 fa1c 	bl	8021184 <LCD_AA_SetAndMask>
 801cd4c:	4620      	mov	r0, r4
 801cd4e:	bd10      	pop	{r4, pc}
 801cd50:	2002c5bd 	.word	0x2002c5bd

0801cd54 <GUI_GetLayerPosEx>:
 801cd54:	b538      	push	{r3, r4, r5, lr}
 801cd56:	460d      	mov	r5, r1
 801cd58:	4614      	mov	r4, r2
 801cd5a:	f7fe ffbd 	bl	801bcd8 <LCD_GetPosEx>
 801cd5e:	b110      	cbz	r0, 801cd66 <GUI_GetLayerPosEx+0x12>
 801cd60:	2300      	movs	r3, #0
 801cd62:	602b      	str	r3, [r5, #0]
 801cd64:	6023      	str	r3, [r4, #0]
 801cd66:	bd38      	pop	{r3, r4, r5, pc}

0801cd68 <GUI_SelectLayer>:
 801cd68:	b570      	push	{r4, r5, r6, lr}
 801cd6a:	4d08      	ldr	r5, [pc, #32]	; (801cd8c <GUI_SelectLayer+0x24>)
 801cd6c:	682b      	ldr	r3, [r5, #0]
 801cd6e:	2801      	cmp	r0, #1
 801cd70:	4604      	mov	r4, r0
 801cd72:	7c5e      	ldrb	r6, [r3, #17]
 801cd74:	d808      	bhi.n	801cd88 <GUI_SelectLayer+0x20>
 801cd76:	f000 ff5b 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 801cd7a:	b128      	cbz	r0, 801cd88 <GUI_SelectLayer+0x20>
 801cd7c:	682b      	ldr	r3, [r5, #0]
 801cd7e:	745c      	strb	r4, [r3, #17]
 801cd80:	f000 f808 	bl	801cd94 <GUI_SelectLCD>
 801cd84:	4b02      	ldr	r3, [pc, #8]	; (801cd90 <GUI_SelectLayer+0x28>)
 801cd86:	601c      	str	r4, [r3, #0]
 801cd88:	4630      	mov	r0, r6
 801cd8a:	bd70      	pop	{r4, r5, r6, pc}
 801cd8c:	20000114 	.word	0x20000114
 801cd90:	2002c570 	.word	0x2002c570

0801cd94 <GUI_SelectLCD>:
 801cd94:	b508      	push	{r3, lr}
 801cd96:	f003 ffd7 	bl	8020d48 <LCD_SelectLCD>
 801cd9a:	f7fe ff15 	bl	801bbc8 <LCD_UpdateColorIndices>
 801cd9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801cda2:	f7fd b80f 	b.w	8019dc4 <WM_Activate>
	...

0801cda8 <GUI_SaveContext_W>:
 801cda8:	b508      	push	{r3, lr}
 801cdaa:	4b03      	ldr	r3, [pc, #12]	; (801cdb8 <GUI_SaveContext_W+0x10>)
 801cdac:	2270      	movs	r2, #112	; 0x70
 801cdae:	6819      	ldr	r1, [r3, #0]
 801cdb0:	f004 ff28 	bl	8021c04 <memcpy>
 801cdb4:	bd08      	pop	{r3, pc}
 801cdb6:	bf00      	nop
 801cdb8:	20000114 	.word	0x20000114

0801cdbc <GUI_RestoreContext>:
 801cdbc:	b508      	push	{r3, lr}
 801cdbe:	4b03      	ldr	r3, [pc, #12]	; (801cdcc <GUI_RestoreContext+0x10>)
 801cdc0:	4601      	mov	r1, r0
 801cdc2:	2270      	movs	r2, #112	; 0x70
 801cdc4:	6818      	ldr	r0, [r3, #0]
 801cdc6:	f004 ff1d 	bl	8021c04 <memcpy>
 801cdca:	bd08      	pop	{r3, pc}
 801cdcc:	20000114 	.word	0x20000114

0801cdd0 <GUI_RectsIntersect>:
 801cdd0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801cdd4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801cdd8:	429a      	cmp	r2, r3
 801cdda:	dc14      	bgt.n	801ce06 <GUI_RectsIntersect+0x36>
 801cddc:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801cde0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801cde4:	429a      	cmp	r2, r3
 801cde6:	dc0e      	bgt.n	801ce06 <GUI_RectsIntersect+0x36>
 801cde8:	f9b0 2000 	ldrsh.w	r2, [r0]
 801cdec:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801cdf0:	429a      	cmp	r2, r3
 801cdf2:	dc08      	bgt.n	801ce06 <GUI_RectsIntersect+0x36>
 801cdf4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801cdf8:	f9b1 2000 	ldrsh.w	r2, [r1]
 801cdfc:	429a      	cmp	r2, r3
 801cdfe:	bfcc      	ite	gt
 801ce00:	2000      	movgt	r0, #0
 801ce02:	2001      	movle	r0, #1
 801ce04:	4770      	bx	lr
 801ce06:	2000      	movs	r0, #0
 801ce08:	4770      	bx	lr
	...

0801ce0c <GUI_GetPenSize>:
 801ce0c:	4b01      	ldr	r3, [pc, #4]	; (801ce14 <GUI_GetPenSize+0x8>)
 801ce0e:	681b      	ldr	r3, [r3, #0]
 801ce10:	7e18      	ldrb	r0, [r3, #24]
 801ce12:	4770      	bx	lr
 801ce14:	20000114 	.word	0x20000114

0801ce18 <GUI_SetPenSize>:
 801ce18:	4b02      	ldr	r3, [pc, #8]	; (801ce24 <GUI_SetPenSize+0xc>)
 801ce1a:	681b      	ldr	r3, [r3, #0]
 801ce1c:	7e1a      	ldrb	r2, [r3, #24]
 801ce1e:	7618      	strb	r0, [r3, #24]
 801ce20:	4610      	mov	r0, r2
 801ce22:	4770      	bx	lr
 801ce24:	20000114 	.word	0x20000114

0801ce28 <GUI_StoreKey>:
 801ce28:	4b02      	ldr	r3, [pc, #8]	; (801ce34 <GUI_StoreKey+0xc>)
 801ce2a:	681a      	ldr	r2, [r3, #0]
 801ce2c:	b902      	cbnz	r2, 801ce30 <GUI_StoreKey+0x8>
 801ce2e:	6018      	str	r0, [r3, #0]
 801ce30:	f7ff be84 	b.w	801cb3c <GUI_SignalEvent>
 801ce34:	2002c388 	.word	0x2002c388

0801ce38 <GUI_PollKeyMsg>:
 801ce38:	4a0a      	ldr	r2, [pc, #40]	; (801ce64 <GUI_PollKeyMsg+0x2c>)
 801ce3a:	490b      	ldr	r1, [pc, #44]	; (801ce68 <GUI_PollKeyMsg+0x30>)
 801ce3c:	6813      	ldr	r3, [r2, #0]
 801ce3e:	6809      	ldr	r1, [r1, #0]
 801ce40:	428b      	cmp	r3, r1
 801ce42:	b510      	push	{r4, lr}
 801ce44:	d00b      	beq.n	801ce5e <GUI_PollKeyMsg+0x26>
 801ce46:	4c09      	ldr	r4, [pc, #36]	; (801ce6c <GUI_PollKeyMsg+0x34>)
 801ce48:	42a3      	cmp	r3, r4
 801ce4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ce4e:	bf14      	ite	ne
 801ce50:	3308      	addne	r3, #8
 801ce52:	3b50      	subeq	r3, #80	; 0x50
 801ce54:	6013      	str	r3, [r2, #0]
 801ce56:	f003 f84f 	bl	801fef8 <WM_OnKey>
 801ce5a:	2001      	movs	r0, #1
 801ce5c:	bd10      	pop	{r4, pc}
 801ce5e:	2000      	movs	r0, #0
 801ce60:	bd10      	pop	{r4, pc}
 801ce62:	bf00      	nop
 801ce64:	2000010c 	.word	0x2000010c
 801ce68:	20000108 	.word	0x20000108
 801ce6c:	2002c3dc 	.word	0x2002c3dc

0801ce70 <GUI_MoveRect>:
 801ce70:	b168      	cbz	r0, 801ce8e <GUI_MoveRect+0x1e>
 801ce72:	8803      	ldrh	r3, [r0, #0]
 801ce74:	b289      	uxth	r1, r1
 801ce76:	440b      	add	r3, r1
 801ce78:	8003      	strh	r3, [r0, #0]
 801ce7a:	8883      	ldrh	r3, [r0, #4]
 801ce7c:	4419      	add	r1, r3
 801ce7e:	8843      	ldrh	r3, [r0, #2]
 801ce80:	8081      	strh	r1, [r0, #4]
 801ce82:	b292      	uxth	r2, r2
 801ce84:	4413      	add	r3, r2
 801ce86:	8043      	strh	r3, [r0, #2]
 801ce88:	88c3      	ldrh	r3, [r0, #6]
 801ce8a:	441a      	add	r2, r3
 801ce8c:	80c2      	strh	r2, [r0, #6]
 801ce8e:	4770      	bx	lr

0801ce90 <GUI_MergeRect>:
 801ce90:	b510      	push	{r4, lr}
 801ce92:	b338      	cbz	r0, 801cee4 <GUI_MergeRect+0x54>
 801ce94:	b309      	cbz	r1, 801ceda <GUI_MergeRect+0x4a>
 801ce96:	b30a      	cbz	r2, 801cedc <GUI_MergeRect+0x4c>
 801ce98:	f9b1 4000 	ldrsh.w	r4, [r1]
 801ce9c:	f9b2 3000 	ldrsh.w	r3, [r2]
 801cea0:	429c      	cmp	r4, r3
 801cea2:	bfb8      	it	lt
 801cea4:	4623      	movlt	r3, r4
 801cea6:	8003      	strh	r3, [r0, #0]
 801cea8:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801ceac:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801ceb0:	429c      	cmp	r4, r3
 801ceb2:	bfb8      	it	lt
 801ceb4:	4623      	movlt	r3, r4
 801ceb6:	8043      	strh	r3, [r0, #2]
 801ceb8:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 801cebc:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801cec0:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 801cec4:	429c      	cmp	r4, r3
 801cec6:	bfa8      	it	ge
 801cec8:	4623      	movge	r3, r4
 801ceca:	8083      	strh	r3, [r0, #4]
 801cecc:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801ced0:	4299      	cmp	r1, r3
 801ced2:	bfa8      	it	ge
 801ced4:	460b      	movge	r3, r1
 801ced6:	80c3      	strh	r3, [r0, #6]
 801ced8:	bd10      	pop	{r4, pc}
 801ceda:	4611      	mov	r1, r2
 801cedc:	680b      	ldr	r3, [r1, #0]
 801cede:	6003      	str	r3, [r0, #0]
 801cee0:	684b      	ldr	r3, [r1, #4]
 801cee2:	6043      	str	r3, [r0, #4]
 801cee4:	bd10      	pop	{r4, pc}
	...

0801cee8 <GUI_MULTIBUF_ConfigEx>:
 801cee8:	4b05      	ldr	r3, [pc, #20]	; (801cf00 <GUI_MULTIBUF_ConfigEx+0x18>)
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	bf18      	it	ne
 801cef0:	2000      	movne	r0, #0
 801cef2:	4b04      	ldr	r3, [pc, #16]	; (801cf04 <GUI_MULTIBUF_ConfigEx+0x1c>)
 801cef4:	2901      	cmp	r1, #1
 801cef6:	bfb8      	it	lt
 801cef8:	2101      	movlt	r1, #1
 801cefa:	5419      	strb	r1, [r3, r0]
 801cefc:	4770      	bx	lr
 801cefe:	bf00      	nop
 801cf00:	2002c3e4 	.word	0x2002c3e4
 801cf04:	2002c59c 	.word	0x2002c59c

0801cf08 <GUI_GotoXY>:
 801cf08:	4b02      	ldr	r3, [pc, #8]	; (801cf14 <GUI_GotoXY+0xc>)
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	8458      	strh	r0, [r3, #34]	; 0x22
 801cf0e:	8499      	strh	r1, [r3, #36]	; 0x24
 801cf10:	2000      	movs	r0, #0
 801cf12:	4770      	bx	lr
 801cf14:	20000114 	.word	0x20000114

0801cf18 <GUI_GetOrg>:
 801cf18:	4b04      	ldr	r3, [pc, #16]	; (801cf2c <GUI_GetOrg+0x14>)
 801cf1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cf1e:	6003      	str	r3, [r0, #0]
 801cf20:	4b03      	ldr	r3, [pc, #12]	; (801cf30 <GUI_GetOrg+0x18>)
 801cf22:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cf26:	600b      	str	r3, [r1, #0]
 801cf28:	4770      	bx	lr
 801cf2a:	bf00      	nop
 801cf2c:	2002c5b4 	.word	0x2002c5b4
 801cf30:	2002c5a8 	.word	0x2002c5a8

0801cf34 <GUI_GetDrawMode>:
 801cf34:	4b01      	ldr	r3, [pc, #4]	; (801cf3c <GUI_GetDrawMode+0x8>)
 801cf36:	681b      	ldr	r3, [r3, #0]
 801cf38:	7c18      	ldrb	r0, [r3, #16]
 801cf3a:	4770      	bx	lr
 801cf3c:	20000114 	.word	0x20000114

0801cf40 <GUI_FillRect>:
 801cf40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cf42:	4c0f      	ldr	r4, [pc, #60]	; (801cf80 <GUI_FillRect+0x40>)
 801cf44:	6824      	ldr	r4, [r4, #0]
 801cf46:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801cf48:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801cf4a:	1947      	adds	r7, r0, r5
 801cf4c:	190e      	adds	r6, r1, r4
 801cf4e:	4415      	add	r5, r2
 801cf50:	441c      	add	r4, r3
 801cf52:	4668      	mov	r0, sp
 801cf54:	f8ad 7000 	strh.w	r7, [sp]
 801cf58:	f8ad 5004 	strh.w	r5, [sp, #4]
 801cf5c:	f8ad 6002 	strh.w	r6, [sp, #2]
 801cf60:	f8ad 4006 	strh.w	r4, [sp, #6]
 801cf64:	f7fc fd5a 	bl	8019a1c <WM__InitIVRSearch>
 801cf68:	b140      	cbz	r0, 801cf7c <GUI_FillRect+0x3c>
 801cf6a:	4638      	mov	r0, r7
 801cf6c:	4631      	mov	r1, r6
 801cf6e:	462a      	mov	r2, r5
 801cf70:	4623      	mov	r3, r4
 801cf72:	f7ff f86f 	bl	801c054 <LCD_FillRect>
 801cf76:	f7fc fc8f 	bl	8019898 <WM__GetNextIVR>
 801cf7a:	e7f5      	b.n	801cf68 <GUI_FillRect+0x28>
 801cf7c:	b003      	add	sp, #12
 801cf7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf80:	20000114 	.word	0x20000114

0801cf84 <GUI_Exec1>:
 801cf84:	4b0a      	ldr	r3, [pc, #40]	; (801cfb0 <GUI_Exec1+0x2c>)
 801cf86:	b510      	push	{r4, lr}
 801cf88:	681c      	ldr	r4, [r3, #0]
 801cf8a:	b11c      	cbz	r4, 801cf94 <GUI_Exec1+0x10>
 801cf8c:	47a0      	blx	r4
 801cf8e:	1c04      	adds	r4, r0, #0
 801cf90:	bf18      	it	ne
 801cf92:	2401      	movne	r4, #1
 801cf94:	f7fc fe68 	bl	8019c68 <WM_Exec>
 801cf98:	4b06      	ldr	r3, [pc, #24]	; (801cfb4 <GUI_Exec1+0x30>)
 801cf9a:	681b      	ldr	r3, [r3, #0]
 801cf9c:	2800      	cmp	r0, #0
 801cf9e:	bf18      	it	ne
 801cfa0:	2401      	movne	r4, #1
 801cfa2:	b11b      	cbz	r3, 801cfac <GUI_Exec1+0x28>
 801cfa4:	4798      	blx	r3
 801cfa6:	2800      	cmp	r0, #0
 801cfa8:	bf18      	it	ne
 801cfaa:	2401      	movne	r4, #1
 801cfac:	4620      	mov	r0, r4
 801cfae:	bd10      	pop	{r4, pc}
 801cfb0:	2002c5b0 	.word	0x2002c5b0
 801cfb4:	2002c5c8 	.word	0x2002c5c8

0801cfb8 <GUI_Exec>:
 801cfb8:	b510      	push	{r4, lr}
 801cfba:	2400      	movs	r4, #0
 801cfbc:	f7ff ffe2 	bl	801cf84 <GUI_Exec1>
 801cfc0:	b108      	cbz	r0, 801cfc6 <GUI_Exec+0xe>
 801cfc2:	2401      	movs	r4, #1
 801cfc4:	e7fa      	b.n	801cfbc <GUI_Exec+0x4>
 801cfc6:	4620      	mov	r0, r4
 801cfc8:	bd10      	pop	{r4, pc}
	...

0801cfcc <_SetLineColor>:
 801cfcc:	4b1e      	ldr	r3, [pc, #120]	; (801d048 <_SetLineColor+0x7c>)
 801cfce:	681b      	ldr	r3, [r3, #0]
 801cfd0:	7e9b      	ldrb	r3, [r3, #26]
 801cfd2:	3b01      	subs	r3, #1
 801cfd4:	2b03      	cmp	r3, #3
 801cfd6:	d832      	bhi.n	801d03e <_SetLineColor+0x72>
 801cfd8:	e8df f003 	tbb	[pc, r3]
 801cfdc:	221a0d02 	.word	0x221a0d02
 801cfe0:	4b1a      	ldr	r3, [pc, #104]	; (801d04c <_SetLineColor+0x80>)
 801cfe2:	3006      	adds	r0, #6
 801cfe4:	4003      	ands	r3, r0
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	da03      	bge.n	801cff2 <_SetLineColor+0x26>
 801cfea:	3b01      	subs	r3, #1
 801cfec:	f063 030f 	orn	r3, r3, #15
 801cff0:	3301      	adds	r3, #1
 801cff2:	2b0b      	cmp	r3, #11
 801cff4:	e008      	b.n	801d008 <_SetLineColor+0x3c>
 801cff6:	4b16      	ldr	r3, [pc, #88]	; (801d050 <_SetLineColor+0x84>)
 801cff8:	4003      	ands	r3, r0
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	da03      	bge.n	801d006 <_SetLineColor+0x3a>
 801cffe:	3b01      	subs	r3, #1
 801d000:	f063 0303 	orn	r3, r3, #3
 801d004:	3301      	adds	r3, #1
 801d006:	2b01      	cmp	r3, #1
 801d008:	bfcc      	ite	gt
 801d00a:	2000      	movgt	r0, #0
 801d00c:	2001      	movle	r0, #1
 801d00e:	4770      	bx	lr
 801d010:	2314      	movs	r3, #20
 801d012:	fb90 f2f3 	sdiv	r2, r0, r3
 801d016:	fb03 0012 	mls	r0, r3, r2, r0
 801d01a:	280b      	cmp	r0, #11
 801d01c:	dc09      	bgt.n	801d032 <_SetLineColor+0x66>
 801d01e:	e010      	b.n	801d042 <_SetLineColor+0x76>
 801d020:	2318      	movs	r3, #24
 801d022:	fb90 f2f3 	sdiv	r2, r0, r3
 801d026:	fb03 0012 	mls	r0, r3, r2, r0
 801d02a:	280b      	cmp	r0, #11
 801d02c:	dd09      	ble.n	801d042 <_SetLineColor+0x76>
 801d02e:	f020 0004 	bic.w	r0, r0, #4
 801d032:	3810      	subs	r0, #16
 801d034:	2801      	cmp	r0, #1
 801d036:	bf8c      	ite	hi
 801d038:	2000      	movhi	r0, #0
 801d03a:	2001      	movls	r0, #1
 801d03c:	4770      	bx	lr
 801d03e:	2000      	movs	r0, #0
 801d040:	4770      	bx	lr
 801d042:	2001      	movs	r0, #1
 801d044:	4770      	bx	lr
 801d046:	bf00      	nop
 801d048:	20000114 	.word	0x20000114
 801d04c:	8000000f 	.word	0x8000000f
 801d050:	80000003 	.word	0x80000003

0801d054 <GUI_sin>:
 801d054:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801d058:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 801d05c:	bfc6      	itte	gt
 801d05e:	f5a0 6000 	subgt.w	r0, r0, #2048	; 0x800
 801d062:	2101      	movgt	r1, #1
 801d064:	2100      	movle	r1, #0
 801d066:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801d06a:	bfc8      	it	gt
 801d06c:	f5c0 6000 	rsbgt	r0, r0, #2048	; 0x800
 801d070:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 801d074:	b510      	push	{r4, lr}
 801d076:	1182      	asrs	r2, r0, #6
 801d078:	4c0b      	ldr	r4, [pc, #44]	; (801d0a8 <GUI_sin+0x54>)
 801d07a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801d07e:	b29b      	uxth	r3, r3
 801d080:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 801d084:	2b40      	cmp	r3, #64	; 0x40
 801d086:	fb00 f003 	mul.w	r0, r0, r3
 801d08a:	d008      	beq.n	801d09e <GUI_sin+0x4a>
 801d08c:	2a10      	cmp	r2, #16
 801d08e:	d006      	beq.n	801d09e <GUI_sin+0x4a>
 801d090:	3201      	adds	r2, #1
 801d092:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801d096:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 801d09a:	fb03 0002 	mla	r0, r3, r2, r0
 801d09e:	3020      	adds	r0, #32
 801d0a0:	0980      	lsrs	r0, r0, #6
 801d0a2:	b101      	cbz	r1, 801d0a6 <GUI_sin+0x52>
 801d0a4:	4240      	negs	r0, r0
 801d0a6:	bd10      	pop	{r4, pc}
 801d0a8:	0812dfe0 	.word	0x0812dfe0

0801d0ac <GUI_cos>:
 801d0ac:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 801d0b0:	f7ff bfd0 	b.w	801d054 <GUI_sin>

0801d0b4 <GL_DrawLine1Ex>:
 801d0b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0b8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 801d0bc:	1a17      	subs	r7, r2, r0
 801d0be:	1a5c      	subs	r4, r3, r1
 801d0c0:	ea54 0c07 	orrs.w	ip, r4, r7
 801d0c4:	4605      	mov	r5, r0
 801d0c6:	460e      	mov	r6, r1
 801d0c8:	f8d8 b000 	ldr.w	fp, [r8]
 801d0cc:	d104      	bne.n	801d0d8 <GL_DrawLine1Ex+0x24>
 801d0ce:	b003      	add	sp, #12
 801d0d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0d4:	f004 bca0 	b.w	8021a18 <GL_DrawPoint>
 801d0d8:	ea87 70e7 	eor.w	r0, r7, r7, asr #31
 801d0dc:	eba0 70e7 	sub.w	r0, r0, r7, asr #31
 801d0e0:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 801d0e4:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 801d0e8:	4288      	cmp	r0, r1
 801d0ea:	db04      	blt.n	801d0f6 <GL_DrawLine1Ex+0x42>
 801d0ec:	4621      	mov	r1, r4
 801d0ee:	463c      	mov	r4, r7
 801d0f0:	460f      	mov	r7, r1
 801d0f2:	2100      	movs	r1, #0
 801d0f4:	e006      	b.n	801d104 <GL_DrawLine1Ex+0x50>
 801d0f6:	4611      	mov	r1, r2
 801d0f8:	461a      	mov	r2, r3
 801d0fa:	460b      	mov	r3, r1
 801d0fc:	4629      	mov	r1, r5
 801d0fe:	4635      	mov	r5, r6
 801d100:	460e      	mov	r6, r1
 801d102:	2101      	movs	r1, #1
 801d104:	9100      	str	r1, [sp, #0]
 801d106:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 801d10a:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 801d10e:	428c      	cmp	r4, r1
 801d110:	d008      	beq.n	801d124 <GL_DrawLine1Ex+0x70>
 801d112:	461e      	mov	r6, r3
 801d114:	462b      	mov	r3, r5
 801d116:	4264      	negs	r4, r4
 801d118:	4615      	mov	r5, r2
 801d11a:	427f      	negs	r7, r7
 801d11c:	461a      	mov	r2, r3
 801d11e:	f04f 3aff 	mov.w	sl, #4294967295
 801d122:	e001      	b.n	801d128 <GL_DrawLine1Ex+0x74>
 801d124:	f04f 0a01 	mov.w	sl, #1
 801d128:	2f00      	cmp	r7, #0
 801d12a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 801d274 <GL_DrawLine1Ex+0x1c0>
 801d12e:	d13e      	bne.n	801d1ae <GL_DrawLine1Ex+0xfa>
 801d130:	9b00      	ldr	r3, [sp, #0]
 801d132:	b1d3      	cbz	r3, 801d16a <GL_DrawLine1Ex+0xb6>
 801d134:	f8d9 3000 	ldr.w	r3, [r9]
 801d138:	7e9b      	ldrb	r3, [r3, #26]
 801d13a:	b98b      	cbnz	r3, 801d160 <GL_DrawLine1Ex+0xac>
 801d13c:	4630      	mov	r0, r6
 801d13e:	4629      	mov	r1, r5
 801d140:	b003      	add	sp, #12
 801d142:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d146:	f7fe bf5f 	b.w	801c008 <LCD_DrawVLine>
 801d14a:	f7ff ff3f 	bl	801cfcc <_SetLineColor>
 801d14e:	b930      	cbnz	r0, 801d15e <GL_DrawLine1Ex+0xaa>
 801d150:	f8d9 3000 	ldr.w	r3, [r9]
 801d154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d156:	4630      	mov	r0, r6
 801d158:	685b      	ldr	r3, [r3, #4]
 801d15a:	1979      	adds	r1, r7, r5
 801d15c:	4798      	blx	r3
 801d15e:	3701      	adds	r7, #1
 801d160:	42a7      	cmp	r7, r4
 801d162:	eb07 000b 	add.w	r0, r7, fp
 801d166:	ddf0      	ble.n	801d14a <GL_DrawLine1Ex+0x96>
 801d168:	e01d      	b.n	801d1a6 <GL_DrawLine1Ex+0xf2>
 801d16a:	f8d9 3000 	ldr.w	r3, [r9]
 801d16e:	7e99      	ldrb	r1, [r3, #26]
 801d170:	b111      	cbz	r1, 801d178 <GL_DrawLine1Ex+0xc4>
 801d172:	f8dd a000 	ldr.w	sl, [sp]
 801d176:	e012      	b.n	801d19e <GL_DrawLine1Ex+0xea>
 801d178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d17a:	4628      	mov	r0, r5
 801d17c:	681b      	ldr	r3, [r3, #0]
 801d17e:	4631      	mov	r1, r6
 801d180:	4798      	blx	r3
 801d182:	e074      	b.n	801d26e <GL_DrawLine1Ex+0x1ba>
 801d184:	f7ff ff22 	bl	801cfcc <_SetLineColor>
 801d188:	b938      	cbnz	r0, 801d19a <GL_DrawLine1Ex+0xe6>
 801d18a:	f8d9 3000 	ldr.w	r3, [r9]
 801d18e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d190:	eb0a 0005 	add.w	r0, sl, r5
 801d194:	685b      	ldr	r3, [r3, #4]
 801d196:	4631      	mov	r1, r6
 801d198:	4798      	blx	r3
 801d19a:	f10a 0a01 	add.w	sl, sl, #1
 801d19e:	45a2      	cmp	sl, r4
 801d1a0:	eb0a 000b 	add.w	r0, sl, fp
 801d1a4:	ddee      	ble.n	801d184 <GL_DrawLine1Ex+0xd0>
 801d1a6:	3801      	subs	r0, #1
 801d1a8:	f8c8 0000 	str.w	r0, [r8]
 801d1ac:	e05f      	b.n	801d26e <GL_DrawLine1Ex+0x1ba>
 801d1ae:	f8d9 1000 	ldr.w	r1, [r9]
 801d1b2:	f04f 0202 	mov.w	r2, #2
 801d1b6:	7e89      	ldrb	r1, [r1, #26]
 801d1b8:	fb94 f2f2 	sdiv	r2, r4, r2
 801d1bc:	bfb8      	it	lt
 801d1be:	4252      	neglt	r2, r2
 801d1c0:	b9d9      	cbnz	r1, 801d1fa <GL_DrawLine1Ex+0x146>
 801d1c2:	4693      	mov	fp, r2
 801d1c4:	46a8      	mov	r8, r5
 801d1c6:	ebc5 0308 	rsb	r3, r5, r8
 801d1ca:	42a3      	cmp	r3, r4
 801d1cc:	dc4f      	bgt.n	801d26e <GL_DrawLine1Ex+0x1ba>
 801d1ce:	9b00      	ldr	r3, [sp, #0]
 801d1d0:	fb9b f1f4 	sdiv	r1, fp, r4
 801d1d4:	4431      	add	r1, r6
 801d1d6:	b92b      	cbnz	r3, 801d1e4 <GL_DrawLine1Ex+0x130>
 801d1d8:	f8d9 3000 	ldr.w	r3, [r9]
 801d1dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d1de:	4640      	mov	r0, r8
 801d1e0:	685b      	ldr	r3, [r3, #4]
 801d1e2:	e005      	b.n	801d1f0 <GL_DrawLine1Ex+0x13c>
 801d1e4:	f8d9 3000 	ldr.w	r3, [r9]
 801d1e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d1ea:	685b      	ldr	r3, [r3, #4]
 801d1ec:	4608      	mov	r0, r1
 801d1ee:	4641      	mov	r1, r8
 801d1f0:	4798      	blx	r3
 801d1f2:	f108 0801 	add.w	r8, r8, #1
 801d1f6:	44bb      	add	fp, r7
 801d1f8:	e7e5      	b.n	801d1c6 <GL_DrawLine1Ex+0x112>
 801d1fa:	f1ba 3fff 	cmp.w	sl, #4294967295
 801d1fe:	bf04      	itt	eq
 801d200:	eb04 010b 	addeq.w	r1, r4, fp
 801d204:	f8c8 1000 	streq.w	r1, [r8]
 801d208:	9201      	str	r2, [sp, #4]
 801d20a:	46ab      	mov	fp, r5
 801d20c:	ebc5 010b 	rsb	r1, r5, fp
 801d210:	42a1      	cmp	r1, r4
 801d212:	f8d8 0000 	ldr.w	r0, [r8]
 801d216:	dc1e      	bgt.n	801d256 <GL_DrawLine1Ex+0x1a2>
 801d218:	4450      	add	r0, sl
 801d21a:	f8c8 0000 	str.w	r0, [r8]
 801d21e:	f7ff fed5 	bl	801cfcc <_SetLineColor>
 801d222:	b980      	cbnz	r0, 801d246 <GL_DrawLine1Ex+0x192>
 801d224:	f8dd c004 	ldr.w	ip, [sp, #4]
 801d228:	f8d9 0000 	ldr.w	r0, [r9]
 801d22c:	9b00      	ldr	r3, [sp, #0]
 801d22e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801d230:	fb9c f1f4 	sdiv	r1, ip, r4
 801d234:	4431      	add	r1, r6
 801d236:	b913      	cbnz	r3, 801d23e <GL_DrawLine1Ex+0x18a>
 801d238:	6843      	ldr	r3, [r0, #4]
 801d23a:	4658      	mov	r0, fp
 801d23c:	e002      	b.n	801d244 <GL_DrawLine1Ex+0x190>
 801d23e:	6843      	ldr	r3, [r0, #4]
 801d240:	4608      	mov	r0, r1
 801d242:	4659      	mov	r1, fp
 801d244:	4798      	blx	r3
 801d246:	f8dd c004 	ldr.w	ip, [sp, #4]
 801d24a:	44bc      	add	ip, r7
 801d24c:	f10b 0b01 	add.w	fp, fp, #1
 801d250:	f8cd c004 	str.w	ip, [sp, #4]
 801d254:	e7da      	b.n	801d20c <GL_DrawLine1Ex+0x158>
 801d256:	f1ba 3fff 	cmp.w	sl, #4294967295
 801d25a:	bf04      	itt	eq
 801d25c:	1824      	addeq	r4, r4, r0
 801d25e:	f8c8 4000 	streq.w	r4, [r8]
 801d262:	f8d8 2000 	ldr.w	r2, [r8]
 801d266:	ebca 0302 	rsb	r3, sl, r2
 801d26a:	f8c8 3000 	str.w	r3, [r8]
 801d26e:	b003      	add	sp, #12
 801d270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d274:	20000114 	.word	0x20000114

0801d278 <GL_DrawLineEx>:
 801d278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d27c:	4d67      	ldr	r5, [pc, #412]	; (801d41c <GL_DrawLineEx+0x1a4>)
 801d27e:	682c      	ldr	r4, [r5, #0]
 801d280:	f894 b018 	ldrb.w	fp, [r4, #24]
 801d284:	f1bb 0f01 	cmp.w	fp, #1
 801d288:	b087      	sub	sp, #28
 801d28a:	4681      	mov	r9, r0
 801d28c:	4688      	mov	r8, r1
 801d28e:	4617      	mov	r7, r2
 801d290:	461e      	mov	r6, r3
 801d292:	46aa      	mov	sl, r5
 801d294:	d104      	bne.n	801d2a0 <GL_DrawLineEx+0x28>
 801d296:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d298:	9400      	str	r4, [sp, #0]
 801d29a:	f7ff ff0b 	bl	801d0b4 <GL_DrawLine1Ex>
 801d29e:	e0ba      	b.n	801d416 <GL_DrawLineEx+0x19e>
 801d2a0:	1a84      	subs	r4, r0, r2
 801d2a2:	1acd      	subs	r5, r1, r3
 801d2a4:	ea54 0305 	orrs.w	r3, r4, r5
 801d2a8:	f000 80b5 	beq.w	801d416 <GL_DrawLineEx+0x19e>
 801d2ac:	2c00      	cmp	r4, #0
 801d2ae:	bfba      	itte	lt
 801d2b0:	4264      	neglt	r4, r4
 801d2b2:	2301      	movlt	r3, #1
 801d2b4:	2300      	movge	r3, #0
 801d2b6:	2d00      	cmp	r5, #0
 801d2b8:	bfbc      	itt	lt
 801d2ba:	426d      	neglt	r5, r5
 801d2bc:	f043 0302 	orrlt.w	r3, r3, #2
 801d2c0:	42a5      	cmp	r5, r4
 801d2c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d2c6:	dd04      	ble.n	801d2d2 <GL_DrawLineEx+0x5a>
 801d2c8:	4622      	mov	r2, r4
 801d2ca:	f043 0304 	orr.w	r3, r3, #4
 801d2ce:	462c      	mov	r4, r5
 801d2d0:	4615      	mov	r5, r2
 801d2d2:	2202      	movs	r2, #2
 801d2d4:	fb94 f2f2 	sdiv	r2, r4, r2
 801d2d8:	eb02 2585 	add.w	r5, r2, r5, lsl #10
 801d2dc:	fb95 f4f4 	sdiv	r4, r5, r4
 801d2e0:	11a1      	asrs	r1, r4, #6
 801d2e2:	4a4f      	ldr	r2, [pc, #316]	; (801d420 <GL_DrawLineEx+0x1a8>)
 801d2e4:	f3c4 0483 	ubfx	r4, r4, #2, #4
 801d2e8:	f1c4 0510 	rsb	r5, r4, #16
 801d2ec:	f932 0011 	ldrsh.w	r0, [r2, r1, lsl #1]
 801d2f0:	2d10      	cmp	r5, #16
 801d2f2:	fb05 f000 	mul.w	r0, r5, r0
 801d2f6:	d004      	beq.n	801d302 <GL_DrawLineEx+0x8a>
 801d2f8:	3101      	adds	r1, #1
 801d2fa:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801d2fe:	fb04 0002 	mla	r0, r4, r2, r0
 801d302:	2210      	movs	r2, #16
 801d304:	3008      	adds	r0, #8
 801d306:	fb90 f0f2 	sdiv	r0, r0, r2
 801d30a:	0759      	lsls	r1, r3, #29
 801d30c:	bf48      	it	mi
 801d30e:	f5c0 6080 	rsbmi	r0, r0, #1024	; 0x400
 801d312:	07da      	lsls	r2, r3, #31
 801d314:	bf48      	it	mi
 801d316:	f5c0 6000 	rsbmi	r0, r0, #2048	; 0x800
 801d31a:	079b      	lsls	r3, r3, #30
 801d31c:	bf48      	it	mi
 801d31e:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 801d322:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 801d326:	4628      	mov	r0, r5
 801d328:	f7ff fec0 	bl	801d0ac <GUI_cos>
 801d32c:	fb00 f40b 	mul.w	r4, r0, fp
 801d330:	4628      	mov	r0, r5
 801d332:	f7ff fe8f 	bl	801d054 <GUI_sin>
 801d336:	2c00      	cmp	r4, #0
 801d338:	fb00 f00b 	mul.w	r0, r0, fp
 801d33c:	da04      	bge.n	801d348 <GL_DrawLineEx+0xd0>
 801d33e:	f5c4 7300 	rsb	r3, r4, #512	; 0x200
 801d342:	129b      	asrs	r3, r3, #10
 801d344:	425b      	negs	r3, r3
 801d346:	e002      	b.n	801d34e <GL_DrawLineEx+0xd6>
 801d348:	f504 7300 	add.w	r3, r4, #512	; 0x200
 801d34c:	129b      	asrs	r3, r3, #10
 801d34e:	2800      	cmp	r0, #0
 801d350:	da06      	bge.n	801d360 <GL_DrawLineEx+0xe8>
 801d352:	f5c0 7b00 	rsb	fp, r0, #512	; 0x200
 801d356:	ea4f 2bab 	mov.w	fp, fp, asr #10
 801d35a:	f1cb 0b00 	rsb	fp, fp, #0
 801d35e:	e003      	b.n	801d368 <GL_DrawLineEx+0xf0>
 801d360:	f500 7b00 	add.w	fp, r0, #512	; 0x200
 801d364:	ea4f 2bab 	mov.w	fp, fp, asr #10
 801d368:	2b00      	cmp	r3, #0
 801d36a:	dd03      	ble.n	801d374 <GL_DrawLineEx+0xfc>
 801d36c:	1c58      	adds	r0, r3, #1
 801d36e:	1040      	asrs	r0, r0, #1
 801d370:	105b      	asrs	r3, r3, #1
 801d372:	e005      	b.n	801d380 <GL_DrawLineEx+0x108>
 801d374:	2202      	movs	r2, #2
 801d376:	fb93 f0f2 	sdiv	r0, r3, r2
 801d37a:	3b01      	subs	r3, #1
 801d37c:	fb93 f3f2 	sdiv	r3, r3, r2
 801d380:	f1bb 0f00 	cmp.w	fp, #0
 801d384:	dd05      	ble.n	801d392 <GL_DrawLineEx+0x11a>
 801d386:	f10b 0201 	add.w	r2, fp, #1
 801d38a:	1052      	asrs	r2, r2, #1
 801d38c:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 801d390:	e006      	b.n	801d3a0 <GL_DrawLineEx+0x128>
 801d392:	2102      	movs	r1, #2
 801d394:	fb9b f2f1 	sdiv	r2, fp, r1
 801d398:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d39c:	fb9b fbf1 	sdiv	fp, fp, r1
 801d3a0:	b280      	uxth	r0, r0
 801d3a2:	fa1f f489 	uxth.w	r4, r9
 801d3a6:	1901      	adds	r1, r0, r4
 801d3a8:	b292      	uxth	r2, r2
 801d3aa:	f8ad 1008 	strh.w	r1, [sp, #8]
 801d3ae:	fa1f fb8b 	uxth.w	fp, fp
 801d3b2:	fa1f f188 	uxth.w	r1, r8
 801d3b6:	1855      	adds	r5, r2, r1
 801d3b8:	ebcb 0101 	rsb	r1, fp, r1
 801d3bc:	b29b      	uxth	r3, r3
 801d3be:	f8ad 100e 	strh.w	r1, [sp, #14]
 801d3c2:	b2b9      	uxth	r1, r7
 801d3c4:	1ae4      	subs	r4, r4, r3
 801d3c6:	1acb      	subs	r3, r1, r3
 801d3c8:	f8ad 3010 	strh.w	r3, [sp, #16]
 801d3cc:	b2b3      	uxth	r3, r6
 801d3ce:	4401      	add	r1, r0
 801d3d0:	ebcb 0b03 	rsb	fp, fp, r3
 801d3d4:	4413      	add	r3, r2
 801d3d6:	2200      	movs	r2, #0
 801d3d8:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d3dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d3e0:	a802      	add	r0, sp, #8
 801d3e2:	4613      	mov	r3, r2
 801d3e4:	2104      	movs	r1, #4
 801d3e6:	f8ad 500a 	strh.w	r5, [sp, #10]
 801d3ea:	f8ad 400c 	strh.w	r4, [sp, #12]
 801d3ee:	f8ad b012 	strh.w	fp, [sp, #18]
 801d3f2:	f004 fa2f 	bl	8021854 <GL_FillPolygon>
 801d3f6:	f8da 3000 	ldr.w	r3, [sl]
 801d3fa:	7e5b      	ldrb	r3, [r3, #25]
 801d3fc:	b91b      	cbnz	r3, 801d406 <GL_DrawLineEx+0x18e>
 801d3fe:	4648      	mov	r0, r9
 801d400:	4641      	mov	r1, r8
 801d402:	f004 fb09 	bl	8021a18 <GL_DrawPoint>
 801d406:	f8da 3000 	ldr.w	r3, [sl]
 801d40a:	7e5b      	ldrb	r3, [r3, #25]
 801d40c:	b91b      	cbnz	r3, 801d416 <GL_DrawLineEx+0x19e>
 801d40e:	4638      	mov	r0, r7
 801d410:	4631      	mov	r1, r6
 801d412:	f004 fb01 	bl	8021a18 <GL_DrawPoint>
 801d416:	b007      	add	sp, #28
 801d418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d41c:	20000114 	.word	0x20000114
 801d420:	0812e002 	.word	0x0812e002

0801d424 <GL_DrawLine>:
 801d424:	b530      	push	{r4, r5, lr}
 801d426:	b085      	sub	sp, #20
 801d428:	ac04      	add	r4, sp, #16
 801d42a:	2500      	movs	r5, #0
 801d42c:	f844 5d04 	str.w	r5, [r4, #-4]!
 801d430:	9400      	str	r4, [sp, #0]
 801d432:	f7ff ff21 	bl	801d278 <GL_DrawLineEx>
 801d436:	b005      	add	sp, #20
 801d438:	bd30      	pop	{r4, r5, pc}
	...

0801d43c <GUI_DrawLine>:
 801d43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d440:	461e      	mov	r6, r3
 801d442:	4b0c      	ldr	r3, [pc, #48]	; (801d474 <GUI_DrawLine+0x38>)
 801d444:	681c      	ldr	r4, [r3, #0]
 801d446:	4681      	mov	r9, r0
 801d448:	2000      	movs	r0, #0
 801d44a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801d44c:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801d44e:	4688      	mov	r8, r1
 801d450:	4617      	mov	r7, r2
 801d452:	f7fc fae3 	bl	8019a1c <WM__InitIVRSearch>
 801d456:	b150      	cbz	r0, 801d46e <GUI_DrawLine+0x32>
 801d458:	eb09 0005 	add.w	r0, r9, r5
 801d45c:	eb08 0104 	add.w	r1, r8, r4
 801d460:	197a      	adds	r2, r7, r5
 801d462:	1933      	adds	r3, r6, r4
 801d464:	f7ff ffde 	bl	801d424 <GL_DrawLine>
 801d468:	f7fc fa16 	bl	8019898 <WM__GetNextIVR>
 801d46c:	e7f3      	b.n	801d456 <GUI_DrawLine+0x1a>
 801d46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d472:	bf00      	nop
 801d474:	20000114 	.word	0x20000114

0801d478 <_DoClipping>:
 801d478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d47c:	680f      	ldr	r7, [r1, #0]
 801d47e:	681d      	ldr	r5, [r3, #0]
 801d480:	6806      	ldr	r6, [r0, #0]
 801d482:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801d486:	443d      	add	r5, r7
 801d488:	f105 38ff 	add.w	r8, r5, #4294967295
 801d48c:	6815      	ldr	r5, [r2, #0]
 801d48e:	f8dc 4000 	ldr.w	r4, [ip]
 801d492:	442e      	add	r6, r5
 801d494:	4d21      	ldr	r5, [pc, #132]	; (801d51c <_DoClipping+0xa4>)
 801d496:	682d      	ldr	r5, [r5, #0]
 801d498:	f106 39ff 	add.w	r9, r6, #4294967295
 801d49c:	f9b5 600a 	ldrsh.w	r6, [r5, #10]
 801d4a0:	42b7      	cmp	r7, r6
 801d4a2:	da0a      	bge.n	801d4ba <_DoClipping+0x42>
 801d4a4:	600e      	str	r6, [r1, #0]
 801d4a6:	1bf7      	subs	r7, r6, r7
 801d4a8:	9e08      	ldr	r6, [sp, #32]
 801d4aa:	fb06 f107 	mul.w	r1, r6, r7
 801d4ae:	f021 0103 	bic.w	r1, r1, #3
 801d4b2:	440c      	add	r4, r1
 801d4b4:	6819      	ldr	r1, [r3, #0]
 801d4b6:	1bcf      	subs	r7, r1, r7
 801d4b8:	601f      	str	r7, [r3, #0]
 801d4ba:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
 801d4be:	ebc1 0808 	rsb	r8, r1, r8
 801d4c2:	f1b8 0f00 	cmp.w	r8, #0
 801d4c6:	dd03      	ble.n	801d4d0 <_DoClipping+0x58>
 801d4c8:	6819      	ldr	r1, [r3, #0]
 801d4ca:	ebc8 0101 	rsb	r1, r8, r1
 801d4ce:	6019      	str	r1, [r3, #0]
 801d4d0:	681b      	ldr	r3, [r3, #0]
 801d4d2:	2b00      	cmp	r3, #0
 801d4d4:	dc02      	bgt.n	801d4dc <_DoClipping+0x64>
 801d4d6:	2001      	movs	r0, #1
 801d4d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d4dc:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
 801d4e0:	ebc6 0609 	rsb	r6, r6, r9
 801d4e4:	2e00      	cmp	r6, #0
 801d4e6:	dd02      	ble.n	801d4ee <_DoClipping+0x76>
 801d4e8:	6813      	ldr	r3, [r2, #0]
 801d4ea:	1b9e      	subs	r6, r3, r6
 801d4ec:	6016      	str	r6, [r2, #0]
 801d4ee:	6803      	ldr	r3, [r0, #0]
 801d4f0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801d4f4:	428b      	cmp	r3, r1
 801d4f6:	da08      	bge.n	801d50a <_DoClipping+0x92>
 801d4f8:	1acb      	subs	r3, r1, r3
 801d4fa:	6811      	ldr	r1, [r2, #0]
 801d4fc:	1ac9      	subs	r1, r1, r3
 801d4fe:	6011      	str	r1, [r2, #0]
 801d500:	6801      	ldr	r1, [r0, #0]
 801d502:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801d506:	440b      	add	r3, r1
 801d508:	6003      	str	r3, [r0, #0]
 801d50a:	6813      	ldr	r3, [r2, #0]
 801d50c:	2b00      	cmp	r3, #0
 801d50e:	dde2      	ble.n	801d4d6 <_DoClipping+0x5e>
 801d510:	f8cc 4000 	str.w	r4, [ip]
 801d514:	2000      	movs	r0, #0
 801d516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d51a:	bf00      	nop
 801d51c:	20000114 	.word	0x20000114

0801d520 <_DrawBitmapHW_8888>:
 801d520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d524:	b088      	sub	sp, #32
 801d526:	9104      	str	r1, [sp, #16]
 801d528:	9205      	str	r2, [sp, #20]
 801d52a:	9306      	str	r3, [sp, #24]
 801d52c:	9003      	str	r0, [sp, #12]
 801d52e:	f003 fd8d 	bl	802104c <LCD_GetColorIndex>
 801d532:	9e05      	ldr	r6, [sp, #20]
 801d534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d536:	9307      	str	r3, [sp, #28]
 801d538:	00b6      	lsls	r6, r6, #2
 801d53a:	ab07      	add	r3, sp, #28
 801d53c:	4607      	mov	r7, r0
 801d53e:	9300      	str	r3, [sp, #0]
 801d540:	9601      	str	r6, [sp, #4]
 801d542:	a803      	add	r0, sp, #12
 801d544:	a904      	add	r1, sp, #16
 801d546:	aa05      	add	r2, sp, #20
 801d548:	ab06      	add	r3, sp, #24
 801d54a:	f7ff ff95 	bl	801d478 <_DoClipping>
 801d54e:	bb30      	cbnz	r0, 801d59e <_DrawBitmapHW_8888+0x7e>
 801d550:	4605      	mov	r5, r0
 801d552:	9b06      	ldr	r3, [sp, #24]
 801d554:	429d      	cmp	r5, r3
 801d556:	da1f      	bge.n	801d598 <_DrawBitmapHW_8888+0x78>
 801d558:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801d55c:	2400      	movs	r4, #0
 801d55e:	9b05      	ldr	r3, [sp, #20]
 801d560:	429c      	cmp	r4, r3
 801d562:	da14      	bge.n	801d58e <_DrawBitmapHW_8888+0x6e>
 801d564:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 801d568:	f7fe ffe2 	bl	801c530 <LCD_Color2Index>
 801d56c:	4a0d      	ldr	r2, [pc, #52]	; (801d5a4 <_DrawBitmapHW_8888+0x84>)
 801d56e:	6812      	ldr	r2, [r2, #0]
 801d570:	7c51      	ldrb	r1, [r2, #17]
 801d572:	4a0d      	ldr	r2, [pc, #52]	; (801d5a8 <_DrawBitmapHW_8888+0x88>)
 801d574:	4603      	mov	r3, r0
 801d576:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 801d57a:	9a04      	ldr	r2, [sp, #16]
 801d57c:	68c1      	ldr	r1, [r0, #12]
 801d57e:	f8d1 c018 	ldr.w	ip, [r1, #24]
 801d582:	9903      	ldr	r1, [sp, #12]
 801d584:	442a      	add	r2, r5
 801d586:	4421      	add	r1, r4
 801d588:	47e0      	blx	ip
 801d58a:	3401      	adds	r4, #1
 801d58c:	e7e7      	b.n	801d55e <_DrawBitmapHW_8888+0x3e>
 801d58e:	9b07      	ldr	r3, [sp, #28]
 801d590:	4433      	add	r3, r6
 801d592:	9307      	str	r3, [sp, #28]
 801d594:	3501      	adds	r5, #1
 801d596:	e7dc      	b.n	801d552 <_DrawBitmapHW_8888+0x32>
 801d598:	4638      	mov	r0, r7
 801d59a:	f004 f923 	bl	80217e4 <GUI_SetColorIndex>
 801d59e:	b008      	add	sp, #32
 801d5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d5a4:	20000114 	.word	0x20000114
 801d5a8:	2002c5cc 	.word	0x2002c5cc

0801d5ac <_DrawBitmap>:
 801d5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5b0:	b095      	sub	sp, #84	; 0x54
 801d5b2:	930e      	str	r3, [sp, #56]	; 0x38
 801d5b4:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801d5b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d5b8:	9110      	str	r1, [sp, #64]	; 0x40
 801d5ba:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801d5be:	9011      	str	r0, [sp, #68]	; 0x44
 801d5c0:	920f      	str	r2, [sp, #60]	; 0x3c
 801d5c2:	f004 f920 	bl	8021806 <GUI_GetColor>
 801d5c6:	9920      	ldr	r1, [sp, #128]	; 0x80
 801d5c8:	900c      	str	r0, [sp, #48]	; 0x30
 801d5ca:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801d5cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d5ce:	9313      	str	r3, [sp, #76]	; 0x4c
 801d5d0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d5d2:	ea40 0301 	orr.w	r3, r0, r1
 801d5d6:	2b01      	cmp	r3, #1
 801d5d8:	b2ed      	uxtb	r5, r5
 801d5da:	ea4f 0787 	mov.w	r7, r7, lsl #2
 801d5de:	f040 814b 	bne.w	801d878 <_DrawBitmap+0x2cc>
 801d5e2:	4ca1      	ldr	r4, [pc, #644]	; (801d868 <_DrawBitmap+0x2bc>)
 801d5e4:	6823      	ldr	r3, [r4, #0]
 801d5e6:	7c58      	ldrb	r0, [r3, #17]
 801d5e8:	f7fe fc18 	bl	801be1c <GUI_GetpfIndex2ColorEx>
 801d5ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d5ee:	4283      	cmp	r3, r0
 801d5f0:	46a1      	mov	r9, r4
 801d5f2:	f040 80cb 	bne.w	801d78c <_DrawBitmap+0x1e0>
 801d5f6:	f06f 4a70 	mvn.w	sl, #4026531840	; 0xf0000000
 801d5fa:	f8d9 3000 	ldr.w	r3, [r9]
 801d5fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d600:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801d604:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d606:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 801d60a:	1a82      	subs	r2, r0, r2
 801d60c:	428a      	cmp	r2, r1
 801d60e:	dd03      	ble.n	801d618 <_DrawBitmap+0x6c>
 801d610:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d612:	f7ff fb8b 	bl	801cd2c <GUI_SetColor>
 801d616:	e1b6      	b.n	801d986 <_DrawBitmap+0x3da>
 801d618:	2a00      	cmp	r2, #0
 801d61a:	dd0a      	ble.n	801d632 <_DrawBitmap+0x86>
 801d61c:	9010      	str	r0, [sp, #64]	; 0x40
 801d61e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d620:	4350      	muls	r0, r2
 801d622:	1a8a      	subs	r2, r1, r2
 801d624:	eb08 0880 	add.w	r8, r8, r0, lsl #2
 801d628:	2a00      	cmp	r2, #0
 801d62a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801d62e:	920e      	str	r2, [sp, #56]	; 0x38
 801d630:	ddee      	ble.n	801d610 <_DrawBitmap+0x64>
 801d632:	9910      	ldr	r1, [sp, #64]	; 0x40
 801d634:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 801d638:	4291      	cmp	r1, r2
 801d63a:	dce9      	bgt.n	801d610 <_DrawBitmap+0x64>
 801d63c:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801d640:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 801d644:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d646:	ebcb 0204 	rsb	r2, fp, r4
 801d64a:	2a00      	cmp	r2, #0
 801d64c:	dd05      	ble.n	801d65a <_DrawBitmap+0xae>
 801d64e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d650:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801d654:	9013      	str	r0, [sp, #76]	; 0x4c
 801d656:	1ab6      	subs	r6, r6, r2
 801d658:	46a3      	mov	fp, r4
 801d65a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801d65e:	459b      	cmp	fp, r3
 801d660:	dcd6      	bgt.n	801d610 <_DrawBitmap+0x64>
 801d662:	eb0b 0206 	add.w	r2, fp, r6
 801d666:	3a01      	subs	r2, #1
 801d668:	429a      	cmp	r2, r3
 801d66a:	bfc4      	itt	gt
 801d66c:	ebcb 0603 	rsbgt	r6, fp, r3
 801d670:	3601      	addgt	r6, #1
 801d672:	2e00      	cmp	r6, #0
 801d674:	ddcc      	ble.n	801d610 <_DrawBitmap+0x64>
 801d676:	4b7d      	ldr	r3, [pc, #500]	; (801d86c <_DrawBitmap+0x2c0>)
 801d678:	781b      	ldrb	r3, [r3, #0]
 801d67a:	2b00      	cmp	r3, #0
 801d67c:	d02f      	beq.n	801d6de <_DrawBitmap+0x132>
 801d67e:	2220      	movs	r2, #32
 801d680:	9202      	str	r2, [sp, #8]
 801d682:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d684:	9204      	str	r2, [sp, #16]
 801d686:	2301      	movs	r3, #1
 801d688:	2200      	movs	r2, #0
 801d68a:	9205      	str	r2, [sp, #20]
 801d68c:	9300      	str	r3, [sp, #0]
 801d68e:	9301      	str	r3, [sp, #4]
 801d690:	9703      	str	r7, [sp, #12]
 801d692:	4658      	mov	r0, fp
 801d694:	4632      	mov	r2, r6
 801d696:	f7fe fde5 	bl	801c264 <LCD_DrawBitmap>
 801d69a:	e069      	b.n	801d770 <_DrawBitmap+0x1c4>
 801d69c:	3401      	adds	r4, #1
 801d69e:	42a6      	cmp	r6, r4
 801d6a0:	d006      	beq.n	801d6b0 <_DrawBitmap+0x104>
 801d6a2:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 801d6a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801d6aa:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801d6ae:	d0f5      	beq.n	801d69c <_DrawBitmap+0xf0>
 801d6b0:	b334      	cbz	r4, 801d700 <_DrawBitmap+0x154>
 801d6b2:	2301      	movs	r3, #1
 801d6b4:	2120      	movs	r1, #32
 801d6b6:	9204      	str	r2, [sp, #16]
 801d6b8:	2200      	movs	r2, #0
 801d6ba:	9300      	str	r3, [sp, #0]
 801d6bc:	9301      	str	r3, [sp, #4]
 801d6be:	9102      	str	r1, [sp, #8]
 801d6c0:	9205      	str	r2, [sp, #20]
 801d6c2:	4658      	mov	r0, fp
 801d6c4:	9703      	str	r7, [sp, #12]
 801d6c6:	9910      	ldr	r1, [sp, #64]	; 0x40
 801d6c8:	4622      	mov	r2, r4
 801d6ca:	f7fe fdcb 	bl	801c264 <LCD_DrawBitmap>
 801d6ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d6d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801d6d4:	44a3      	add	fp, r4
 801d6d6:	9313      	str	r3, [sp, #76]	; 0x4c
 801d6d8:	1b36      	subs	r6, r6, r4
 801d6da:	2e00      	cmp	r6, #0
 801d6dc:	dd48      	ble.n	801d770 <_DrawBitmap+0x1c4>
 801d6de:	f005 0302 	and.w	r3, r5, #2
 801d6e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d6e4:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 801d6e8:	b123      	cbz	r3, 801d6f4 <_DrawBitmap+0x148>
 801d6ea:	2400      	movs	r4, #0
 801d6ec:	e7d9      	b.n	801d6a2 <_DrawBitmap+0xf6>
 801d6ee:	3401      	adds	r4, #1
 801d6f0:	42a6      	cmp	r6, r4
 801d6f2:	d0dd      	beq.n	801d6b0 <_DrawBitmap+0x104>
 801d6f4:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 801d6f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801d6fc:	d0f7      	beq.n	801d6ee <_DrawBitmap+0x142>
 801d6fe:	e7d7      	b.n	801d6b0 <_DrawBitmap+0x104>
 801d700:	1d13      	adds	r3, r2, #4
 801d702:	2d02      	cmp	r5, #2
 801d704:	9313      	str	r3, [sp, #76]	; 0x4c
 801d706:	6814      	ldr	r4, [r2, #0]
 801d708:	d018      	beq.n	801d73c <_DrawBitmap+0x190>
 801d70a:	2d03      	cmp	r5, #3
 801d70c:	d009      	beq.n	801d722 <_DrawBitmap+0x176>
 801d70e:	2d01      	cmp	r5, #1
 801d710:	d116      	bne.n	801d740 <_DrawBitmap+0x194>
 801d712:	f004 22ff 	and.w	r2, r4, #4278255360	; 0xff00ff00
 801d716:	f3c4 4307 	ubfx	r3, r4, #16, #8
 801d71a:	0624      	lsls	r4, r4, #24
 801d71c:	ea42 2414 	orr.w	r4, r2, r4, lsr #8
 801d720:	e00a      	b.n	801d738 <_DrawBitmap+0x18c>
 801d722:	0622      	lsls	r2, r4, #24
 801d724:	f3c4 4307 	ubfx	r3, r4, #16, #8
 801d728:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 801d72c:	f404 427f 	and.w	r2, r4, #65280	; 0xff00
 801d730:	43e4      	mvns	r4, r4
 801d732:	4313      	orrs	r3, r2
 801d734:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 801d738:	431c      	orrs	r4, r3
 801d73a:	e001      	b.n	801d740 <_DrawBitmap+0x194>
 801d73c:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 801d740:	0e22      	lsrs	r2, r4, #24
 801d742:	2aff      	cmp	r2, #255	; 0xff
 801d744:	d010      	beq.n	801d768 <_DrawBitmap+0x1bc>
 801d746:	4554      	cmp	r4, sl
 801d748:	d004      	beq.n	801d754 <_DrawBitmap+0x1a8>
 801d74a:	4620      	mov	r0, r4
 801d74c:	9206      	str	r2, [sp, #24]
 801d74e:	f7fe ff4f 	bl	801c5f0 <LCD_SetColor>
 801d752:	9a06      	ldr	r2, [sp, #24]
 801d754:	4b46      	ldr	r3, [pc, #280]	; (801d870 <_DrawBitmap+0x2c4>)
 801d756:	9910      	ldr	r1, [sp, #64]	; 0x40
 801d758:	f8d3 c000 	ldr.w	ip, [r3]
 801d75c:	43d2      	mvns	r2, r2
 801d75e:	4658      	mov	r0, fp
 801d760:	b2d2      	uxtb	r2, r2
 801d762:	4623      	mov	r3, r4
 801d764:	47e0      	blx	ip
 801d766:	46a2      	mov	sl, r4
 801d768:	f10b 0b01 	add.w	fp, fp, #1
 801d76c:	3e01      	subs	r6, #1
 801d76e:	e7b4      	b.n	801d6da <_DrawBitmap+0x12e>
 801d770:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d772:	3301      	adds	r3, #1
 801d774:	9310      	str	r3, [sp, #64]	; 0x40
 801d776:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d778:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801d77c:	9313      	str	r3, [sp, #76]	; 0x4c
 801d77e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d780:	3b01      	subs	r3, #1
 801d782:	930e      	str	r3, [sp, #56]	; 0x38
 801d784:	2b00      	cmp	r3, #0
 801d786:	f47f af38 	bne.w	801d5fa <_DrawBitmap+0x4e>
 801d78a:	e741      	b.n	801d610 <_DrawBitmap+0x64>
 801d78c:	ab13      	add	r3, sp, #76	; 0x4c
 801d78e:	e88d 0088 	stmia.w	sp, {r3, r7}
 801d792:	a811      	add	r0, sp, #68	; 0x44
 801d794:	a910      	add	r1, sp, #64	; 0x40
 801d796:	aa0f      	add	r2, sp, #60	; 0x3c
 801d798:	ab0e      	add	r3, sp, #56	; 0x38
 801d79a:	f7ff fe6d 	bl	801d478 <_DoClipping>
 801d79e:	2800      	cmp	r0, #0
 801d7a0:	f040 80f1 	bne.w	801d986 <_DrawBitmap+0x3da>
 801d7a4:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801d7a8:	4680      	mov	r8, r0
 801d7aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d7ac:	4590      	cmp	r8, r2
 801d7ae:	f6bf af2f 	bge.w	801d610 <_DrawBitmap+0x64>
 801d7b2:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 801d7b6:	2600      	movs	r6, #0
 801d7b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d7ba:	4296      	cmp	r6, r2
 801d7bc:	da4e      	bge.n	801d85c <_DrawBitmap+0x2b0>
 801d7be:	2d02      	cmp	r5, #2
 801d7c0:	f85a 4026 	ldr.w	r4, [sl, r6, lsl #2]
 801d7c4:	d018      	beq.n	801d7f8 <_DrawBitmap+0x24c>
 801d7c6:	2d03      	cmp	r5, #3
 801d7c8:	d009      	beq.n	801d7de <_DrawBitmap+0x232>
 801d7ca:	2d01      	cmp	r5, #1
 801d7cc:	d116      	bne.n	801d7fc <_DrawBitmap+0x250>
 801d7ce:	f004 21ff 	and.w	r1, r4, #4278255360	; 0xff00ff00
 801d7d2:	f3c4 4207 	ubfx	r2, r4, #16, #8
 801d7d6:	0624      	lsls	r4, r4, #24
 801d7d8:	ea41 2414 	orr.w	r4, r1, r4, lsr #8
 801d7dc:	e00a      	b.n	801d7f4 <_DrawBitmap+0x248>
 801d7de:	0621      	lsls	r1, r4, #24
 801d7e0:	f3c4 4207 	ubfx	r2, r4, #16, #8
 801d7e4:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
 801d7e8:	f404 417f 	and.w	r1, r4, #65280	; 0xff00
 801d7ec:	43e4      	mvns	r4, r4
 801d7ee:	430a      	orrs	r2, r1
 801d7f0:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 801d7f4:	4314      	orrs	r4, r2
 801d7f6:	e001      	b.n	801d7fc <_DrawBitmap+0x250>
 801d7f8:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 801d7fc:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 801d800:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801d804:	d028      	beq.n	801d858 <_DrawBitmap+0x2ac>
 801d806:	429c      	cmp	r4, r3
 801d808:	d002      	beq.n	801d810 <_DrawBitmap+0x264>
 801d80a:	4620      	mov	r0, r4
 801d80c:	f7fe fef0 	bl	801c5f0 <LCD_SetColor>
 801d810:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d812:	f1bb 0f00 	cmp.w	fp, #0
 801d816:	d00c      	beq.n	801d832 <_DrawBitmap+0x286>
 801d818:	4915      	ldr	r1, [pc, #84]	; (801d870 <_DrawBitmap+0x2c4>)
 801d81a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d81c:	f8d1 c000 	ldr.w	ip, [r1]
 801d820:	ea6f 020b 	mvn.w	r2, fp
 801d824:	eb08 0103 	add.w	r1, r8, r3
 801d828:	4430      	add	r0, r6
 801d82a:	b2d2      	uxtb	r2, r2
 801d82c:	4623      	mov	r3, r4
 801d82e:	47e0      	blx	ip
 801d830:	e011      	b.n	801d856 <_DrawBitmap+0x2aa>
 801d832:	f8d9 1000 	ldr.w	r1, [r9]
 801d836:	4a0f      	ldr	r2, [pc, #60]	; (801d874 <_DrawBitmap+0x2c8>)
 801d838:	7c48      	ldrb	r0, [r1, #17]
 801d83a:	f8d1 e03c 	ldr.w	lr, [r1, #60]	; 0x3c
 801d83e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 801d842:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d844:	68c2      	ldr	r2, [r0, #12]
 801d846:	4431      	add	r1, r6
 801d848:	f8d2 c018 	ldr.w	ip, [r2, #24]
 801d84c:	eb08 0203 	add.w	r2, r8, r3
 801d850:	f8de 3000 	ldr.w	r3, [lr]
 801d854:	47e0      	blx	ip
 801d856:	4623      	mov	r3, r4
 801d858:	3601      	adds	r6, #1
 801d85a:	e7ad      	b.n	801d7b8 <_DrawBitmap+0x20c>
 801d85c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d85e:	443a      	add	r2, r7
 801d860:	9213      	str	r2, [sp, #76]	; 0x4c
 801d862:	f108 0801 	add.w	r8, r8, #1
 801d866:	e7a0      	b.n	801d7aa <_DrawBitmap+0x1fe>
 801d868:	20000114 	.word	0x20000114
 801d86c:	2002c5bd 	.word	0x2002c5bd
 801d870:	20000110 	.word	0x20000110
 801d874:	2002c5cc 	.word	0x2002c5cc
 801d878:	2100      	movs	r1, #0
 801d87a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d87c:	9109      	str	r1, [sp, #36]	; 0x24
 801d87e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801d882:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d884:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d886:	4290      	cmp	r0, r2
 801d888:	f6bf aec2 	bge.w	801d610 <_DrawBitmap+0x64>
 801d88c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d88e:	4432      	add	r2, r6
 801d890:	1e50      	subs	r0, r2, #1
 801d892:	920a      	str	r2, [sp, #40]	; 0x28
 801d894:	4a3d      	ldr	r2, [pc, #244]	; (801d98c <_DrawBitmap+0x3e0>)
 801d896:	9008      	str	r0, [sp, #32]
 801d898:	6812      	ldr	r2, [r2, #0]
 801d89a:	f9b2 100a 	ldrsh.w	r1, [r2, #10]
 801d89e:	4288      	cmp	r0, r1
 801d8a0:	db69      	blt.n	801d976 <_DrawBitmap+0x3ca>
 801d8a2:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 801d8a6:	4296      	cmp	r6, r2
 801d8a8:	dc65      	bgt.n	801d976 <_DrawBitmap+0x3ca>
 801d8aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d8ac:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 801d8b0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801d8b2:	910d      	str	r1, [sp, #52]	; 0x34
 801d8b4:	4490      	add	r8, r2
 801d8b6:	2200      	movs	r2, #0
 801d8b8:	9207      	str	r2, [sp, #28]
 801d8ba:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801d8bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d8be:	9807      	ldr	r0, [sp, #28]
 801d8c0:	ebc1 0108 	rsb	r1, r1, r8
 801d8c4:	4290      	cmp	r0, r2
 801d8c6:	910b      	str	r1, [sp, #44]	; 0x2c
 801d8c8:	da55      	bge.n	801d976 <_DrawBitmap+0x3ca>
 801d8ca:	9907      	ldr	r1, [sp, #28]
 801d8cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d8ce:	2d02      	cmp	r5, #2
 801d8d0:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 801d8d4:	d018      	beq.n	801d908 <_DrawBitmap+0x35c>
 801d8d6:	2d03      	cmp	r5, #3
 801d8d8:	d009      	beq.n	801d8ee <_DrawBitmap+0x342>
 801d8da:	2d01      	cmp	r5, #1
 801d8dc:	d116      	bne.n	801d90c <_DrawBitmap+0x360>
 801d8de:	f004 21ff 	and.w	r1, r4, #4278255360	; 0xff00ff00
 801d8e2:	f3c4 4207 	ubfx	r2, r4, #16, #8
 801d8e6:	0624      	lsls	r4, r4, #24
 801d8e8:	ea41 2414 	orr.w	r4, r1, r4, lsr #8
 801d8ec:	e00a      	b.n	801d904 <_DrawBitmap+0x358>
 801d8ee:	0621      	lsls	r1, r4, #24
 801d8f0:	f3c4 4207 	ubfx	r2, r4, #16, #8
 801d8f4:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
 801d8f8:	f404 417f 	and.w	r1, r4, #65280	; 0xff00
 801d8fc:	43e4      	mvns	r4, r4
 801d8fe:	430a      	orrs	r2, r1
 801d900:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 801d904:	4314      	orrs	r4, r2
 801d906:	e001      	b.n	801d90c <_DrawBitmap+0x360>
 801d908:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 801d90c:	429c      	cmp	r4, r3
 801d90e:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 801d912:	d002      	beq.n	801d91a <_DrawBitmap+0x36e>
 801d914:	4620      	mov	r0, r4
 801d916:	f7fe fe6b 	bl	801c5f0 <LCD_SetColor>
 801d91a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801d91e:	d023      	beq.n	801d968 <_DrawBitmap+0x3bc>
 801d920:	f1bb 0f00 	cmp.w	fp, #0
 801d924:	d019      	beq.n	801d95a <_DrawBitmap+0x3ae>
 801d926:	ea6f 0b0b 	mvn.w	fp, fp
 801d92a:	fa5f fb8b 	uxtb.w	fp, fp
 801d92e:	46b1      	mov	r9, r6
 801d930:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801d934:	45d0      	cmp	r8, sl
 801d936:	dd0a      	ble.n	801d94e <_DrawBitmap+0x3a2>
 801d938:	4b15      	ldr	r3, [pc, #84]	; (801d990 <_DrawBitmap+0x3e4>)
 801d93a:	4650      	mov	r0, sl
 801d93c:	f8d3 c000 	ldr.w	ip, [r3]
 801d940:	4649      	mov	r1, r9
 801d942:	465a      	mov	r2, fp
 801d944:	4623      	mov	r3, r4
 801d946:	47e0      	blx	ip
 801d948:	f10a 0a01 	add.w	sl, sl, #1
 801d94c:	e7f2      	b.n	801d934 <_DrawBitmap+0x388>
 801d94e:	9a08      	ldr	r2, [sp, #32]
 801d950:	f109 0901 	add.w	r9, r9, #1
 801d954:	4591      	cmp	r9, r2
 801d956:	ddeb      	ble.n	801d930 <_DrawBitmap+0x384>
 801d958:	e006      	b.n	801d968 <_DrawBitmap+0x3bc>
 801d95a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d95c:	9b08      	ldr	r3, [sp, #32]
 801d95e:	4631      	mov	r1, r6
 801d960:	f108 32ff 	add.w	r2, r8, #4294967295
 801d964:	f7fe fb76 	bl	801c054 <LCD_FillRect>
 801d968:	9b07      	ldr	r3, [sp, #28]
 801d96a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801d96c:	3301      	adds	r3, #1
 801d96e:	9307      	str	r3, [sp, #28]
 801d970:	4480      	add	r8, r0
 801d972:	4623      	mov	r3, r4
 801d974:	e7a1      	b.n	801d8ba <_DrawBitmap+0x30e>
 801d976:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d978:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d97a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801d97c:	443a      	add	r2, r7
 801d97e:	3101      	adds	r1, #1
 801d980:	9213      	str	r2, [sp, #76]	; 0x4c
 801d982:	9109      	str	r1, [sp, #36]	; 0x24
 801d984:	e77d      	b.n	801d882 <_DrawBitmap+0x2d6>
 801d986:	b015      	add	sp, #84	; 0x54
 801d988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d98c:	20000114 	.word	0x20000114
 801d990:	20000110 	.word	0x20000110

0801d994 <_DrawBitmap_8888>:
 801d994:	b510      	push	{r4, lr}
 801d996:	b086      	sub	sp, #24
 801d998:	9c08      	ldr	r4, [sp, #32]
 801d99a:	9400      	str	r4, [sp, #0]
 801d99c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d99e:	9401      	str	r4, [sp, #4]
 801d9a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d9a2:	9402      	str	r4, [sp, #8]
 801d9a4:	4c04      	ldr	r4, [pc, #16]	; (801d9b8 <_DrawBitmap_8888+0x24>)
 801d9a6:	9403      	str	r4, [sp, #12]
 801d9a8:	2400      	movs	r4, #0
 801d9aa:	9404      	str	r4, [sp, #16]
 801d9ac:	9405      	str	r4, [sp, #20]
 801d9ae:	f7ff fdfd 	bl	801d5ac <_DrawBitmap>
 801d9b2:	b006      	add	sp, #24
 801d9b4:	bd10      	pop	{r4, pc}
 801d9b6:	bf00      	nop
 801d9b8:	0801eef5 	.word	0x0801eef5

0801d9bc <_SetPixelAlpha>:
 801d9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d9be:	461d      	mov	r5, r3
 801d9c0:	460e      	mov	r6, r1
 801d9c2:	4607      	mov	r7, r0
 801d9c4:	4614      	mov	r4, r2
 801d9c6:	f003 fb03 	bl	8020fd0 <LCD_GetPixelColor>
 801d9ca:	4622      	mov	r2, r4
 801d9cc:	4601      	mov	r1, r0
 801d9ce:	4628      	mov	r0, r5
 801d9d0:	f7fe ff0c 	bl	801c7ec <GUI__MixColors>
 801d9d4:	f7fe fdac 	bl	801c530 <LCD_Color2Index>
 801d9d8:	4a06      	ldr	r2, [pc, #24]	; (801d9f4 <_SetPixelAlpha+0x38>)
 801d9da:	6812      	ldr	r2, [r2, #0]
 801d9dc:	7c51      	ldrb	r1, [r2, #17]
 801d9de:	4a06      	ldr	r2, [pc, #24]	; (801d9f8 <_SetPixelAlpha+0x3c>)
 801d9e0:	4603      	mov	r3, r0
 801d9e2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 801d9e6:	68c5      	ldr	r5, [r0, #12]
 801d9e8:	4639      	mov	r1, r7
 801d9ea:	69ad      	ldr	r5, [r5, #24]
 801d9ec:	4632      	mov	r2, r6
 801d9ee:	47a8      	blx	r5
 801d9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d9f2:	bf00      	nop
 801d9f4:	20000114 	.word	0x20000114
 801d9f8:	2002c5cc 	.word	0x2002c5cc

0801d9fc <GL_DrawBitmap>:
 801d9fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801da00:	68c6      	ldr	r6, [r0, #12]
 801da02:	b087      	sub	sp, #28
 801da04:	4604      	mov	r4, r0
 801da06:	2000      	movs	r0, #0
 801da08:	4688      	mov	r8, r1
 801da0a:	4617      	mov	r7, r2
 801da0c:	f7ff f96a 	bl	801cce4 <GUI_SetDrawMode>
 801da10:	4605      	mov	r5, r0
 801da12:	b126      	cbz	r6, 801da1e <GL_DrawBitmap+0x22>
 801da14:	7933      	ldrb	r3, [r6, #4]
 801da16:	b113      	cbz	r3, 801da1e <GL_DrawBitmap+0x22>
 801da18:	f040 0002 	orr.w	r0, r0, #2
 801da1c:	e001      	b.n	801da22 <GL_DrawBitmap+0x26>
 801da1e:	f025 0002 	bic.w	r0, r5, #2
 801da22:	f7ff f95f 	bl	801cce4 <GUI_SetDrawMode>
 801da26:	6921      	ldr	r1, [r4, #16]
 801da28:	b169      	cbz	r1, 801da46 <GL_DrawBitmap+0x4a>
 801da2a:	68a0      	ldr	r0, [r4, #8]
 801da2c:	8822      	ldrh	r2, [r4, #0]
 801da2e:	8863      	ldrh	r3, [r4, #2]
 801da30:	9000      	str	r0, [sp, #0]
 801da32:	68e0      	ldr	r0, [r4, #12]
 801da34:	9001      	str	r0, [sp, #4]
 801da36:	2001      	movs	r0, #1
 801da38:	9002      	str	r0, [sp, #8]
 801da3a:	9003      	str	r0, [sp, #12]
 801da3c:	680c      	ldr	r4, [r1, #0]
 801da3e:	4640      	mov	r0, r8
 801da40:	4639      	mov	r1, r7
 801da42:	47a0      	blx	r4
 801da44:	e020      	b.n	801da88 <GL_DrawBitmap+0x8c>
 801da46:	f8df 9050 	ldr.w	r9, [pc, #80]	; 801da98 <GL_DrawBitmap+0x9c>
 801da4a:	4a12      	ldr	r2, [pc, #72]	; (801da94 <GL_DrawBitmap+0x98>)
 801da4c:	f8d9 3000 	ldr.w	r3, [r9]
 801da50:	6816      	ldr	r6, [r2, #0]
 801da52:	68e0      	ldr	r0, [r4, #12]
 801da54:	7c5a      	ldrb	r2, [r3, #17]
 801da56:	4621      	mov	r1, r4
 801da58:	47b0      	blx	r6
 801da5a:	88e1      	ldrh	r1, [r4, #6]
 801da5c:	4606      	mov	r6, r0
 801da5e:	b920      	cbnz	r0, 801da6a <GL_DrawBitmap+0x6e>
 801da60:	2901      	cmp	r1, #1
 801da62:	bf04      	itt	eq
 801da64:	f8d9 3000 	ldreq.w	r3, [r9]
 801da68:	6b9e      	ldreq	r6, [r3, #56]	; 0x38
 801da6a:	2001      	movs	r0, #1
 801da6c:	8822      	ldrh	r2, [r4, #0]
 801da6e:	8863      	ldrh	r3, [r4, #2]
 801da70:	9000      	str	r0, [sp, #0]
 801da72:	9001      	str	r0, [sp, #4]
 801da74:	9102      	str	r1, [sp, #8]
 801da76:	88a1      	ldrh	r1, [r4, #4]
 801da78:	9103      	str	r1, [sp, #12]
 801da7a:	68a1      	ldr	r1, [r4, #8]
 801da7c:	9104      	str	r1, [sp, #16]
 801da7e:	9605      	str	r6, [sp, #20]
 801da80:	4640      	mov	r0, r8
 801da82:	4639      	mov	r1, r7
 801da84:	f7fe fbee 	bl	801c264 <LCD_DrawBitmap>
 801da88:	4628      	mov	r0, r5
 801da8a:	b007      	add	sp, #28
 801da8c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801da90:	f7ff b928 	b.w	801cce4 <GUI_SetDrawMode>
 801da94:	2000011c 	.word	0x2000011c
 801da98:	20000114 	.word	0x20000114

0801da9c <GUI_DrawBitmap>:
 801da9c:	4b11      	ldr	r3, [pc, #68]	; (801dae4 <GUI_DrawBitmap+0x48>)
 801da9e:	681b      	ldr	r3, [r3, #0]
 801daa0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801daa2:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801daa4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801daa6:	8803      	ldrh	r3, [r0, #0]
 801daa8:	440e      	add	r6, r1
 801daaa:	3b01      	subs	r3, #1
 801daac:	4433      	add	r3, r6
 801daae:	f8ad 3004 	strh.w	r3, [sp, #4]
 801dab2:	8843      	ldrh	r3, [r0, #2]
 801dab4:	f8ad 6000 	strh.w	r6, [sp]
 801dab8:	4415      	add	r5, r2
 801daba:	3b01      	subs	r3, #1
 801dabc:	4604      	mov	r4, r0
 801dabe:	442b      	add	r3, r5
 801dac0:	4668      	mov	r0, sp
 801dac2:	f8ad 5002 	strh.w	r5, [sp, #2]
 801dac6:	f8ad 3006 	strh.w	r3, [sp, #6]
 801daca:	f7fb ffa7 	bl	8019a1c <WM__InitIVRSearch>
 801dace:	b138      	cbz	r0, 801dae0 <GUI_DrawBitmap+0x44>
 801dad0:	4620      	mov	r0, r4
 801dad2:	4631      	mov	r1, r6
 801dad4:	462a      	mov	r2, r5
 801dad6:	f7ff ff91 	bl	801d9fc <GL_DrawBitmap>
 801dada:	f7fb fedd 	bl	8019898 <WM__GetNextIVR>
 801dade:	e7f6      	b.n	801dace <GUI_DrawBitmap+0x32>
 801dae0:	b002      	add	sp, #8
 801dae2:	bd70      	pop	{r4, r5, r6, pc}
 801dae4:	20000114 	.word	0x20000114

0801dae8 <GUI_DispStringAt>:
 801dae8:	4b02      	ldr	r3, [pc, #8]	; (801daf4 <GUI_DispStringAt+0xc>)
 801daea:	681b      	ldr	r3, [r3, #0]
 801daec:	8459      	strh	r1, [r3, #34]	; 0x22
 801daee:	849a      	strh	r2, [r3, #36]	; 0x24
 801daf0:	f000 b802 	b.w	801daf8 <GUI_DispString>
 801daf4:	20000114 	.word	0x20000114

0801daf8 <GUI_DispString>:
 801daf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dafc:	4604      	mov	r4, r0
 801dafe:	2800      	cmp	r0, #0
 801db00:	d079      	beq.n	801dbf6 <GUI_DispString+0xfe>
 801db02:	4d3e      	ldr	r5, [pc, #248]	; (801dbfc <GUI_DispString+0x104>)
 801db04:	f000 fdda 	bl	801e6bc <GUI_GetFontDistY>
 801db08:	682b      	ldr	r3, [r5, #0]
 801db0a:	4680      	mov	r8, r0
 801db0c:	f8b3 9022 	ldrh.w	r9, [r3, #34]	; 0x22
 801db10:	f000 fdbc 	bl	801e68c <GUI_GetYAdjust>
 801db14:	682b      	ldr	r3, [r5, #0]
 801db16:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 801db18:	b287      	uxth	r7, r0
 801db1a:	1bd2      	subs	r2, r2, r7
 801db1c:	849a      	strh	r2, [r3, #36]	; 0x24
 801db1e:	7823      	ldrb	r3, [r4, #0]
 801db20:	2b00      	cmp	r3, #0
 801db22:	d05d      	beq.n	801dbe0 <GUI_DispString+0xe8>
 801db24:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801db28:	4620      	mov	r0, r4
 801db2a:	f000 fcfd 	bl	801e528 <GUI__GetLineNumChars>
 801db2e:	4606      	mov	r6, r0
 801db30:	4631      	mov	r1, r6
 801db32:	4620      	mov	r0, r4
 801db34:	f000 fd26 	bl	801e584 <GUI__GetLineDistX>
 801db38:	682b      	ldr	r3, [r5, #0]
 801db3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801db3c:	f002 0203 	and.w	r2, r2, #3
 801db40:	2a01      	cmp	r2, #1
 801db42:	d005      	beq.n	801db50 <GUI_DispString+0x58>
 801db44:	2a02      	cmp	r2, #2
 801db46:	bf14      	ite	ne
 801db48:	2200      	movne	r2, #0
 801db4a:	fb90 f2f2 	sdiveq	r2, r0, r2
 801db4e:	e000      	b.n	801db52 <GUI_DispString+0x5a>
 801db50:	4602      	mov	r2, r0
 801db52:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801db54:	1a8a      	subs	r2, r1, r2
 801db56:	b292      	uxth	r2, r2
 801db58:	b291      	uxth	r1, r2
 801db5a:	8459      	strh	r1, [r3, #34]	; 0x22
 801db5c:	fa1f fa80 	uxth.w	sl, r0
 801db60:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801db62:	f8ad 1000 	strh.w	r1, [sp]
 801db66:	f10a 31ff 	add.w	r1, sl, #4294967295
 801db6a:	440a      	add	r2, r1
 801db6c:	f8ad 3002 	strh.w	r3, [sp, #2]
 801db70:	fa1f fb88 	uxth.w	fp, r8
 801db74:	3b01      	subs	r3, #1
 801db76:	445b      	add	r3, fp
 801db78:	f8ad 2004 	strh.w	r2, [sp, #4]
 801db7c:	4620      	mov	r0, r4
 801db7e:	4631      	mov	r1, r6
 801db80:	466a      	mov	r2, sp
 801db82:	f8ad 3006 	strh.w	r3, [sp, #6]
 801db86:	f000 fd2d 	bl	801e5e4 <GUI__DispLine>
 801db8a:	682b      	ldr	r3, [r5, #0]
 801db8c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801db90:	849a      	strh	r2, [r3, #36]	; 0x24
 801db92:	4620      	mov	r0, r4
 801db94:	4631      	mov	r1, r6
 801db96:	f003 fde7 	bl	8021768 <GUI_UC__NumChars2NumBytes>
 801db9a:	5c23      	ldrb	r3, [r4, r0]
 801db9c:	2b0a      	cmp	r3, #10
 801db9e:	eb04 0200 	add.w	r2, r4, r0
 801dba2:	d001      	beq.n	801dba8 <GUI_DispString+0xb0>
 801dba4:	2b0d      	cmp	r3, #13
 801dba6:	d112      	bne.n	801dbce <GUI_DispString+0xd6>
 801dba8:	682b      	ldr	r3, [r5, #0]
 801dbaa:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 801dbac:	f001 0103 	and.w	r1, r1, #3
 801dbb0:	3901      	subs	r1, #1
 801dbb2:	2901      	cmp	r1, #1
 801dbb4:	bf8a      	itet	hi
 801dbb6:	8c19      	ldrhhi	r1, [r3, #32]
 801dbb8:	f8a3 9022 	strhls.w	r9, [r3, #34]	; 0x22
 801dbbc:	8459      	strhhi	r1, [r3, #34]	; 0x22
 801dbbe:	7811      	ldrb	r1, [r2, #0]
 801dbc0:	290a      	cmp	r1, #10
 801dbc2:	d10b      	bne.n	801dbdc <GUI_DispString+0xe4>
 801dbc4:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 801dbc6:	448b      	add	fp, r1
 801dbc8:	f8a3 b024 	strh.w	fp, [r3, #36]	; 0x24
 801dbcc:	e006      	b.n	801dbdc <GUI_DispString+0xe4>
 801dbce:	4b0b      	ldr	r3, [pc, #44]	; (801dbfc <GUI_DispString+0x104>)
 801dbd0:	f8bd 0000 	ldrh.w	r0, [sp]
 801dbd4:	681b      	ldr	r3, [r3, #0]
 801dbd6:	4482      	add	sl, r0
 801dbd8:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
 801dbdc:	7813      	ldrb	r3, [r2, #0]
 801dbde:	b943      	cbnz	r3, 801dbf2 <GUI_DispString+0xfa>
 801dbe0:	682b      	ldr	r3, [r5, #0]
 801dbe2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 801dbe4:	4417      	add	r7, r2
 801dbe6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801dbe8:	849f      	strh	r7, [r3, #36]	; 0x24
 801dbea:	f022 0203 	bic.w	r2, r2, #3
 801dbee:	859a      	strh	r2, [r3, #44]	; 0x2c
 801dbf0:	e001      	b.n	801dbf6 <GUI_DispString+0xfe>
 801dbf2:	1c54      	adds	r4, r2, #1
 801dbf4:	e793      	b.n	801db1e <GUI_DispString+0x26>
 801dbf6:	b003      	add	sp, #12
 801dbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbfc:	20000114 	.word	0x20000114

0801dc00 <GUI_DispCEOL>:
 801dc00:	b570      	push	{r4, r5, r6, lr}
 801dc02:	4c0a      	ldr	r4, [pc, #40]	; (801dc2c <GUI_DispCEOL+0x2c>)
 801dc04:	6823      	ldr	r3, [r4, #0]
 801dc06:	f9b3 5024 	ldrsh.w	r5, [r3, #36]	; 0x24
 801dc0a:	f000 fd3f 	bl	801e68c <GUI_GetYAdjust>
 801dc0e:	6822      	ldr	r2, [r4, #0]
 801dc10:	69d3      	ldr	r3, [r2, #28]
 801dc12:	7e5b      	ldrb	r3, [r3, #25]
 801dc14:	1a29      	subs	r1, r5, r0
 801dc16:	440b      	add	r3, r1
 801dc18:	f9b2 0022 	ldrsh.w	r0, [r2, #34]	; 0x22
 801dc1c:	3b01      	subs	r3, #1
 801dc1e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801dc22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dc26:	f000 b8fb 	b.w	801de20 <GUI_ClearRect>
 801dc2a:	bf00      	nop
 801dc2c:	20000114 	.word	0x20000114

0801dc30 <GUI_DEVICE__GetpDriver>:
 801dc30:	2801      	cmp	r0, #1
 801dc32:	dc09      	bgt.n	801dc48 <GUI_DEVICE__GetpDriver+0x18>
 801dc34:	4b05      	ldr	r3, [pc, #20]	; (801dc4c <GUI_DEVICE__GetpDriver+0x1c>)
 801dc36:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801dc3a:	b120      	cbz	r0, 801dc46 <GUI_DEVICE__GetpDriver+0x16>
 801dc3c:	68c3      	ldr	r3, [r0, #12]
 801dc3e:	681b      	ldr	r3, [r3, #0]
 801dc40:	b11b      	cbz	r3, 801dc4a <GUI_DEVICE__GetpDriver+0x1a>
 801dc42:	6800      	ldr	r0, [r0, #0]
 801dc44:	e7f9      	b.n	801dc3a <GUI_DEVICE__GetpDriver+0xa>
 801dc46:	4770      	bx	lr
 801dc48:	2000      	movs	r0, #0
 801dc4a:	4770      	bx	lr
 801dc4c:	2002c5cc 	.word	0x2002c5cc

0801dc50 <GUI_DEVICE_Delete>:
 801dc50:	f000 be3c 	b.w	801e8cc <GUI_ALLOC_FreeFixedBlock>

0801dc54 <GUI_DEVICE_Create>:
 801dc54:	2b01      	cmp	r3, #1
 801dc56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc58:	4606      	mov	r6, r0
 801dc5a:	460d      	mov	r5, r1
 801dc5c:	4617      	mov	r7, r2
 801dc5e:	461c      	mov	r4, r3
 801dc60:	dd01      	ble.n	801dc66 <GUI_DEVICE_Create+0x12>
 801dc62:	2000      	movs	r0, #0
 801dc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc66:	201c      	movs	r0, #28
 801dc68:	f000 ff90 	bl	801eb8c <GUI_ALLOC_GetFixedBlock>
 801dc6c:	2800      	cmp	r0, #0
 801dc6e:	d0f8      	beq.n	801dc62 <GUI_DEVICE_Create+0xe>
 801dc70:	b10d      	cbz	r5, 801dc76 <GUI_DEVICE_Create+0x22>
 801dc72:	6105      	str	r5, [r0, #16]
 801dc74:	e009      	b.n	801dc8a <GUI_DEVICE_Create+0x36>
 801dc76:	4b09      	ldr	r3, [pc, #36]	; (801dc9c <GUI_DEVICE_Create+0x48>)
 801dc78:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 801dc7c:	b129      	cbz	r1, 801dc8a <GUI_DEVICE_Create+0x36>
 801dc7e:	680b      	ldr	r3, [r1, #0]
 801dc80:	b10b      	cbz	r3, 801dc86 <GUI_DEVICE_Create+0x32>
 801dc82:	4619      	mov	r1, r3
 801dc84:	e7fb      	b.n	801dc7e <GUI_DEVICE_Create+0x2a>
 801dc86:	690b      	ldr	r3, [r1, #16]
 801dc88:	6103      	str	r3, [r0, #16]
 801dc8a:	2300      	movs	r3, #0
 801dc8c:	6083      	str	r3, [r0, #8]
 801dc8e:	6184      	str	r4, [r0, #24]
 801dc90:	8287      	strh	r7, [r0, #20]
 801dc92:	60c6      	str	r6, [r0, #12]
 801dc94:	6003      	str	r3, [r0, #0]
 801dc96:	6043      	str	r3, [r0, #4]
 801dc98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc9a:	bf00      	nop
 801dc9c:	2002c5cc 	.word	0x2002c5cc

0801dca0 <GUI_DEVICE_Unlink>:
 801dca0:	4b09      	ldr	r3, [pc, #36]	; (801dcc8 <GUI_DEVICE_Unlink+0x28>)
 801dca2:	6982      	ldr	r2, [r0, #24]
 801dca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801dca8:	4281      	cmp	r1, r0
 801dcaa:	bf04      	itt	eq
 801dcac:	6801      	ldreq	r1, [r0, #0]
 801dcae:	f843 1022 	streq.w	r1, [r3, r2, lsl #2]
 801dcb2:	6843      	ldr	r3, [r0, #4]
 801dcb4:	b10b      	cbz	r3, 801dcba <GUI_DEVICE_Unlink+0x1a>
 801dcb6:	6802      	ldr	r2, [r0, #0]
 801dcb8:	601a      	str	r2, [r3, #0]
 801dcba:	6802      	ldr	r2, [r0, #0]
 801dcbc:	b102      	cbz	r2, 801dcc0 <GUI_DEVICE_Unlink+0x20>
 801dcbe:	6053      	str	r3, [r2, #4]
 801dcc0:	2300      	movs	r3, #0
 801dcc2:	6003      	str	r3, [r0, #0]
 801dcc4:	6043      	str	r3, [r0, #4]
 801dcc6:	4770      	bx	lr
 801dcc8:	2002c5cc 	.word	0x2002c5cc

0801dccc <GUI_DEVICE_Link>:
 801dccc:	b570      	push	{r4, r5, r6, lr}
 801dcce:	b338      	cbz	r0, 801dd20 <GUI_DEVICE_Link+0x54>
 801dcd0:	6982      	ldr	r2, [r0, #24]
 801dcd2:	2a01      	cmp	r2, #1
 801dcd4:	dc24      	bgt.n	801dd20 <GUI_DEVICE_Link+0x54>
 801dcd6:	4919      	ldr	r1, [pc, #100]	; (801dd3c <GUI_DEVICE_Link+0x70>)
 801dcd8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 801dcdc:	460d      	mov	r5, r1
 801dcde:	b913      	cbnz	r3, 801dce6 <GUI_DEVICE_Link+0x1a>
 801dce0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 801dce4:	e01a      	b.n	801dd1c <GUI_DEVICE_Link+0x50>
 801dce6:	6859      	ldr	r1, [r3, #4]
 801dce8:	b109      	cbz	r1, 801dcee <GUI_DEVICE_Link+0x22>
 801dcea:	460b      	mov	r3, r1
 801dcec:	e7fb      	b.n	801dce6 <GUI_DEVICE_Link+0x1a>
 801dcee:	68c1      	ldr	r1, [r0, #12]
 801dcf0:	680e      	ldr	r6, [r1, #0]
 801dcf2:	68d9      	ldr	r1, [r3, #12]
 801dcf4:	680c      	ldr	r4, [r1, #0]
 801dcf6:	42b4      	cmp	r4, r6
 801dcf8:	dd03      	ble.n	801dd02 <GUI_DEVICE_Link+0x36>
 801dcfa:	681b      	ldr	r3, [r3, #0]
 801dcfc:	2b00      	cmp	r3, #0
 801dcfe:	d1f8      	bne.n	801dcf2 <GUI_DEVICE_Link+0x26>
 801dd00:	e00e      	b.n	801dd20 <GUI_DEVICE_Link+0x54>
 801dd02:	d102      	bne.n	801dd0a <GUI_DEVICE_Link+0x3e>
 801dd04:	8a81      	ldrh	r1, [r0, #20]
 801dd06:	2901      	cmp	r1, #1
 801dd08:	d011      	beq.n	801dd2e <GUI_DEVICE_Link+0x62>
 801dd0a:	6859      	ldr	r1, [r3, #4]
 801dd0c:	b199      	cbz	r1, 801dd36 <GUI_DEVICE_Link+0x6a>
 801dd0e:	6008      	str	r0, [r1, #0]
 801dd10:	6041      	str	r1, [r0, #4]
 801dd12:	6058      	str	r0, [r3, #4]
 801dd14:	4298      	cmp	r0, r3
 801dd16:	bf08      	it	eq
 801dd18:	2300      	moveq	r3, #0
 801dd1a:	6003      	str	r3, [r0, #0]
 801dd1c:	2000      	movs	r0, #0
 801dd1e:	bd70      	pop	{r4, r5, r6, pc}
 801dd20:	2001      	movs	r0, #1
 801dd22:	bd70      	pop	{r4, r5, r6, pc}
 801dd24:	68cb      	ldr	r3, [r1, #12]
 801dd26:	681b      	ldr	r3, [r3, #0]
 801dd28:	42a3      	cmp	r3, r4
 801dd2a:	460b      	mov	r3, r1
 801dd2c:	dbed      	blt.n	801dd0a <GUI_DEVICE_Link+0x3e>
 801dd2e:	6819      	ldr	r1, [r3, #0]
 801dd30:	2900      	cmp	r1, #0
 801dd32:	d1f7      	bne.n	801dd24 <GUI_DEVICE_Link+0x58>
 801dd34:	e7e9      	b.n	801dd0a <GUI_DEVICE_Link+0x3e>
 801dd36:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 801dd3a:	e7ea      	b.n	801dd12 <GUI_DEVICE_Link+0x46>
 801dd3c:	2002c5cc 	.word	0x2002c5cc

0801dd40 <GUI_DEVICE_CreateAndLink>:
 801dd40:	b538      	push	{r3, r4, r5, lr}
 801dd42:	461d      	mov	r5, r3
 801dd44:	f7ff ff86 	bl	801dc54 <GUI_DEVICE_Create>
 801dd48:	4604      	mov	r4, r0
 801dd4a:	b148      	cbz	r0, 801dd60 <GUI_DEVICE_CreateAndLink+0x20>
 801dd4c:	f7ff ffbe 	bl	801dccc <GUI_DEVICE_Link>
 801dd50:	68e3      	ldr	r3, [r4, #12]
 801dd52:	681b      	ldr	r3, [r3, #0]
 801dd54:	b923      	cbnz	r3, 801dd60 <GUI_DEVICE_CreateAndLink+0x20>
 801dd56:	4b03      	ldr	r3, [pc, #12]	; (801dd64 <GUI_DEVICE_CreateAndLink+0x24>)
 801dd58:	3516      	adds	r5, #22
 801dd5a:	681b      	ldr	r3, [r3, #0]
 801dd5c:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 801dd60:	4620      	mov	r0, r4
 801dd62:	bd38      	pop	{r3, r4, r5, pc}
 801dd64:	20000114 	.word	0x20000114

0801dd68 <_OnExit>:
 801dd68:	b510      	push	{r4, lr}
 801dd6a:	4b07      	ldr	r3, [pc, #28]	; (801dd88 <_OnExit+0x20>)
 801dd6c:	4807      	ldr	r0, [pc, #28]	; (801dd8c <_OnExit+0x24>)
 801dd6e:	2400      	movs	r4, #0
 801dd70:	4621      	mov	r1, r4
 801dd72:	2270      	movs	r2, #112	; 0x70
 801dd74:	601c      	str	r4, [r3, #0]
 801dd76:	f7fe fc43 	bl	801c600 <GUI__memset>
 801dd7a:	4621      	mov	r1, r4
 801dd7c:	4804      	ldr	r0, [pc, #16]	; (801dd90 <_OnExit+0x28>)
 801dd7e:	2208      	movs	r2, #8
 801dd80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dd84:	f7fe bc3c 	b.w	801c600 <GUI__memset>
 801dd88:	2002c464 	.word	0x2002c464
 801dd8c:	2002c3ec 	.word	0x2002c3ec
 801dd90:	2002c5cc 	.word	0x2002c5cc

0801dd94 <_InitContext>:
 801dd94:	b538      	push	{r3, r4, r5, lr}
 801dd96:	4d19      	ldr	r5, [pc, #100]	; (801ddfc <_InitContext+0x68>)
 801dd98:	682b      	ldr	r3, [r5, #0]
 801dd9a:	1d1a      	adds	r2, r3, #4
 801dd9c:	63da      	str	r2, [r3, #60]	; 0x3c
 801dd9e:	f103 0208 	add.w	r2, r3, #8
 801dda2:	639b      	str	r3, [r3, #56]	; 0x38
 801dda4:	641b      	str	r3, [r3, #64]	; 0x40
 801dda6:	6142      	str	r2, [r0, #20]
 801dda8:	7c5a      	ldrb	r2, [r3, #17]
 801ddaa:	4b15      	ldr	r3, [pc, #84]	; (801de00 <_InitContext+0x6c>)
 801ddac:	4604      	mov	r4, r0
 801ddae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801ddb2:	68c3      	ldr	r3, [r0, #12]
 801ddb4:	f104 0108 	add.w	r1, r4, #8
 801ddb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ddba:	4798      	blx	r3
 801ddbc:	4b11      	ldr	r3, [pc, #68]	; (801de04 <_InitContext+0x70>)
 801ddbe:	6663      	str	r3, [r4, #100]	; 0x64
 801ddc0:	4b11      	ldr	r3, [pc, #68]	; (801de08 <_InitContext+0x74>)
 801ddc2:	681b      	ldr	r3, [r3, #0]
 801ddc4:	61e3      	str	r3, [r4, #28]
 801ddc6:	682b      	ldr	r3, [r5, #0]
 801ddc8:	3308      	adds	r3, #8
 801ddca:	6163      	str	r3, [r4, #20]
 801ddcc:	2301      	movs	r3, #1
 801ddce:	7623      	strb	r3, [r4, #24]
 801ddd0:	f002 f950 	bl	8020074 <WM_GetDesktopWindow>
 801ddd4:	2303      	movs	r3, #3
 801ddd6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 801ddda:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801ddde:	6323      	str	r3, [r4, #48]	; 0x30
 801dde0:	6363      	str	r3, [r4, #52]	; 0x34
 801dde2:	64a0      	str	r0, [r4, #72]	; 0x48
 801dde4:	2000      	movs	r0, #0
 801dde6:	f7fe fbfb 	bl	801c5e0 <LCD_SetBkColor>
 801ddea:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ddee:	f7fe fbff 	bl	801c5f0 <LCD_SetColor>
 801ddf2:	4b06      	ldr	r3, [pc, #24]	; (801de0c <_InitContext+0x78>)
 801ddf4:	4a06      	ldr	r2, [pc, #24]	; (801de10 <_InitContext+0x7c>)
 801ddf6:	601a      	str	r2, [r3, #0]
 801ddf8:	bd38      	pop	{r3, r4, r5, pc}
 801ddfa:	bf00      	nop
 801ddfc:	20000114 	.word	0x20000114
 801de00:	2002c5cc 	.word	0x2002c5cc
 801de04:	0812e034 	.word	0x0812e034
 801de08:	20000118 	.word	0x20000118
 801de0c:	2002c5c4 	.word	0x2002c5c4
 801de10:	08130de0 	.word	0x08130de0

0801de14 <GUI_SetDefaultFont>:
 801de14:	4b01      	ldr	r3, [pc, #4]	; (801de1c <GUI_SetDefaultFont+0x8>)
 801de16:	6018      	str	r0, [r3, #0]
 801de18:	4770      	bx	lr
 801de1a:	bf00      	nop
 801de1c:	20000118 	.word	0x20000118

0801de20 <GUI_ClearRect>:
 801de20:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801de24:	4607      	mov	r7, r0
 801de26:	2004      	movs	r0, #4
 801de28:	469a      	mov	sl, r3
 801de2a:	460e      	mov	r6, r1
 801de2c:	4691      	mov	r9, r2
 801de2e:	f7fe f88f 	bl	801bf50 <LCD_SetDrawMode>
 801de32:	4b13      	ldr	r3, [pc, #76]	; (801de80 <GUI_ClearRect+0x60>)
 801de34:	681c      	ldr	r4, [r3, #0]
 801de36:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801de38:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801de3a:	442f      	add	r7, r5
 801de3c:	4426      	add	r6, r4
 801de3e:	4680      	mov	r8, r0
 801de40:	444d      	add	r5, r9
 801de42:	4454      	add	r4, sl
 801de44:	4668      	mov	r0, sp
 801de46:	f8ad 7000 	strh.w	r7, [sp]
 801de4a:	f8ad 5004 	strh.w	r5, [sp, #4]
 801de4e:	f8ad 6002 	strh.w	r6, [sp, #2]
 801de52:	f8ad 4006 	strh.w	r4, [sp, #6]
 801de56:	f7fb fde1 	bl	8019a1c <WM__InitIVRSearch>
 801de5a:	b928      	cbnz	r0, 801de68 <GUI_ClearRect+0x48>
 801de5c:	4640      	mov	r0, r8
 801de5e:	f7fe f877 	bl	801bf50 <LCD_SetDrawMode>
 801de62:	b002      	add	sp, #8
 801de64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de68:	4638      	mov	r0, r7
 801de6a:	4631      	mov	r1, r6
 801de6c:	462a      	mov	r2, r5
 801de6e:	4623      	mov	r3, r4
 801de70:	f7fe f8f0 	bl	801c054 <LCD_FillRect>
 801de74:	f7fb fd10 	bl	8019898 <WM__GetNextIVR>
 801de78:	2800      	cmp	r0, #0
 801de7a:	d1f5      	bne.n	801de68 <GUI_ClearRect+0x48>
 801de7c:	e7ee      	b.n	801de5c <GUI_ClearRect+0x3c>
 801de7e:	bf00      	nop
 801de80:	20000114 	.word	0x20000114

0801de84 <GUI_Clear>:
 801de84:	b510      	push	{r4, lr}
 801de86:	2000      	movs	r0, #0
 801de88:	4601      	mov	r1, r0
 801de8a:	f7ff f83d 	bl	801cf08 <GUI_GotoXY>
 801de8e:	4804      	ldr	r0, [pc, #16]	; (801dea0 <GUI_Clear+0x1c>)
 801de90:	f643 72ff 	movw	r2, #16383	; 0x3fff
 801de94:	4601      	mov	r1, r0
 801de96:	4613      	mov	r3, r2
 801de98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de9c:	f7ff bfc0 	b.w	801de20 <GUI_ClearRect>
 801dea0:	ffffc001 	.word	0xffffc001

0801dea4 <GUI__RegisterExit>:
 801dea4:	b480      	push	{r7}
 801dea6:	b083      	sub	sp, #12
 801dea8:	af00      	add	r7, sp, #0
 801deaa:	6078      	str	r0, [r7, #4]
 801deac:	4b05      	ldr	r3, [pc, #20]	; (801dec4 <GUI__RegisterExit+0x20>)
 801deae:	681a      	ldr	r2, [r3, #0]
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	605a      	str	r2, [r3, #4]
 801deb4:	4b03      	ldr	r3, [pc, #12]	; (801dec4 <GUI__RegisterExit+0x20>)
 801deb6:	687a      	ldr	r2, [r7, #4]
 801deb8:	601a      	str	r2, [r3, #0]
 801deba:	370c      	adds	r7, #12
 801debc:	46bd      	mov	sp, r7
 801debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dec2:	4770      	bx	lr
 801dec4:	2002c3e8 	.word	0x2002c3e8

0801dec8 <GUI__Config>:
 801dec8:	b508      	push	{r3, lr}
 801deca:	4b08      	ldr	r3, [pc, #32]	; (801deec <GUI__Config+0x24>)
 801decc:	681a      	ldr	r2, [r3, #0]
 801dece:	b962      	cbnz	r2, 801deea <GUI__Config+0x22>
 801ded0:	2201      	movs	r2, #1
 801ded2:	601a      	str	r2, [r3, #0]
 801ded4:	f7fa f9be 	bl	8018254 <GUI_X_Config>
 801ded8:	f7fa f9e4 	bl	80182a4 <LCD_X_Config>
 801dedc:	4804      	ldr	r0, [pc, #16]	; (801def0 <GUI__Config+0x28>)
 801dede:	4b05      	ldr	r3, [pc, #20]	; (801def4 <GUI__Config+0x2c>)
 801dee0:	6003      	str	r3, [r0, #0]
 801dee2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801dee6:	f7ff bfdd 	b.w	801dea4 <GUI__RegisterExit>
 801deea:	bd08      	pop	{r3, pc}
 801deec:	2002c464 	.word	0x2002c464
 801def0:	2002c45c 	.word	0x2002c45c
 801def4:	0801dd69 	.word	0x0801dd69

0801def8 <GUI_Init>:
 801def8:	b590      	push	{r4, r7, lr}
 801defa:	b083      	sub	sp, #12
 801defc:	af00      	add	r7, sp, #0
 801defe:	4b20      	ldr	r3, [pc, #128]	; (801df80 <GUI_Init+0x88>)
 801df00:	4a1f      	ldr	r2, [pc, #124]	; (801df80 <GUI_Init+0x88>)
 801df02:	6812      	ldr	r2, [r2, #0]
 801df04:	f022 0201 	bic.w	r2, r2, #1
 801df08:	601a      	str	r2, [r3, #0]
 801df0a:	4b1e      	ldr	r3, [pc, #120]	; (801df84 <GUI_Init+0x8c>)
 801df0c:	2201      	movs	r2, #1
 801df0e:	601a      	str	r2, [r3, #0]
 801df10:	4b1d      	ldr	r3, [pc, #116]	; (801df88 <GUI_Init+0x90>)
 801df12:	4a1e      	ldr	r2, [pc, #120]	; (801df8c <GUI_Init+0x94>)
 801df14:	601a      	str	r2, [r3, #0]
 801df16:	4b1c      	ldr	r3, [pc, #112]	; (801df88 <GUI_Init+0x90>)
 801df18:	681a      	ldr	r2, [r3, #0]
 801df1a:	4b1d      	ldr	r3, [pc, #116]	; (801df90 <GUI_Init+0x98>)
 801df1c:	429a      	cmp	r2, r3
 801df1e:	d000      	beq.n	801df22 <GUI_Init+0x2a>
 801df20:	e7fe      	b.n	801df20 <GUI_Init+0x28>
 801df22:	f7ff ffd1 	bl	801dec8 <GUI__Config>
 801df26:	4b1b      	ldr	r3, [pc, #108]	; (801df94 <GUI_Init+0x9c>)
 801df28:	222e      	movs	r2, #46	; 0x2e
 801df2a:	701a      	strb	r2, [r3, #0]
 801df2c:	f7fa f9a2 	bl	8018274 <GUI_X_Init>
 801df30:	4819      	ldr	r0, [pc, #100]	; (801df98 <GUI_Init+0xa0>)
 801df32:	f7ff ff2f 	bl	801dd94 <_InitContext>
 801df36:	f7fe fab1 	bl	801c49c <emWin_LCD_Init>
 801df3a:	6078      	str	r0, [r7, #4]
 801df3c:	f7fd ff92 	bl	801be64 <LCD_GetXSizeDisplay>
 801df40:	4603      	mov	r3, r0
 801df42:	2b00      	cmp	r3, #0
 801df44:	d004      	beq.n	801df50 <GUI_Init+0x58>
 801df46:	f7fd ff93 	bl	801be70 <LCD_GetYSizeDisplay>
 801df4a:	4603      	mov	r3, r0
 801df4c:	2b00      	cmp	r3, #0
 801df4e:	d109      	bne.n	801df64 <GUI_Init+0x6c>
 801df50:	f7fd ff74 	bl	801be3c <LCD_GetXSizeMax>
 801df54:	4604      	mov	r4, r0
 801df56:	f7fd ff74 	bl	801be42 <LCD_GetYSizeMax>
 801df5a:	4603      	mov	r3, r0
 801df5c:	4620      	mov	r0, r4
 801df5e:	4619      	mov	r1, r3
 801df60:	f7fd ff76 	bl	801be50 <LCD_SetDisplaySize>
 801df64:	2000      	movs	r0, #0
 801df66:	2100      	movs	r1, #0
 801df68:	f003 fc1a 	bl	80217a0 <GUI_SetOrg>
 801df6c:	f7fb ff94 	bl	8019e98 <WM_Init>
 801df70:	4b0a      	ldr	r3, [pc, #40]	; (801df9c <GUI_Init+0xa4>)
 801df72:	2201      	movs	r2, #1
 801df74:	701a      	strb	r2, [r3, #0]
 801df76:	687b      	ldr	r3, [r7, #4]
 801df78:	4618      	mov	r0, r3
 801df7a:	370c      	adds	r7, #12
 801df7c:	46bd      	mov	sp, r7
 801df7e:	bd90      	pop	{r4, r7, pc}
 801df80:	e0002000 	.word	0xe0002000
 801df84:	40023008 	.word	0x40023008
 801df88:	40023000 	.word	0x40023000
 801df8c:	f407a5c2 	.word	0xf407a5c2
 801df90:	b5e8b5cd 	.word	0xb5e8b5cd
 801df94:	2002c59e 	.word	0x2002c59e
 801df98:	2002c3ec 	.word	0x2002c3ec
 801df9c:	2002c5bc 	.word	0x2002c5bc

0801dfa0 <Draw8Point>:
 801dfa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfa4:	4c23      	ldr	r4, [pc, #140]	; (801e034 <Draw8Point+0x94>)
 801dfa6:	eb01 0903 	add.w	r9, r1, r3
 801dfaa:	461d      	mov	r5, r3
 801dfac:	6823      	ldr	r3, [r4, #0]
 801dfae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801dfb0:	eb00 0b02 	add.w	fp, r0, r2
 801dfb4:	4606      	mov	r6, r0
 801dfb6:	460f      	mov	r7, r1
 801dfb8:	685b      	ldr	r3, [r3, #4]
 801dfba:	4649      	mov	r1, r9
 801dfbc:	4658      	mov	r0, fp
 801dfbe:	4690      	mov	r8, r2
 801dfc0:	4798      	blx	r3
 801dfc2:	6823      	ldr	r3, [r4, #0]
 801dfc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801dfc6:	ebc8 0a06 	rsb	sl, r8, r6
 801dfca:	4649      	mov	r1, r9
 801dfcc:	685b      	ldr	r3, [r3, #4]
 801dfce:	4650      	mov	r0, sl
 801dfd0:	4798      	blx	r3
 801dfd2:	6822      	ldr	r2, [r4, #0]
 801dfd4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801dfd6:	1973      	adds	r3, r6, r5
 801dfd8:	eb07 0908 	add.w	r9, r7, r8
 801dfdc:	6852      	ldr	r2, [r2, #4]
 801dfde:	9301      	str	r3, [sp, #4]
 801dfe0:	4618      	mov	r0, r3
 801dfe2:	4649      	mov	r1, r9
 801dfe4:	4790      	blx	r2
 801dfe6:	6822      	ldr	r2, [r4, #0]
 801dfe8:	9b01      	ldr	r3, [sp, #4]
 801dfea:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801dfec:	ebc8 0807 	rsb	r8, r8, r7
 801dff0:	6852      	ldr	r2, [r2, #4]
 801dff2:	4618      	mov	r0, r3
 801dff4:	4641      	mov	r1, r8
 801dff6:	4790      	blx	r2
 801dff8:	b1cd      	cbz	r5, 801e02e <Draw8Point+0x8e>
 801dffa:	6823      	ldr	r3, [r4, #0]
 801dffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801dffe:	1b7f      	subs	r7, r7, r5
 801e000:	685b      	ldr	r3, [r3, #4]
 801e002:	4658      	mov	r0, fp
 801e004:	4639      	mov	r1, r7
 801e006:	4798      	blx	r3
 801e008:	6823      	ldr	r3, [r4, #0]
 801e00a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e00c:	4650      	mov	r0, sl
 801e00e:	685b      	ldr	r3, [r3, #4]
 801e010:	4639      	mov	r1, r7
 801e012:	4798      	blx	r3
 801e014:	6823      	ldr	r3, [r4, #0]
 801e016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e018:	1b75      	subs	r5, r6, r5
 801e01a:	685b      	ldr	r3, [r3, #4]
 801e01c:	4628      	mov	r0, r5
 801e01e:	4649      	mov	r1, r9
 801e020:	4798      	blx	r3
 801e022:	6823      	ldr	r3, [r4, #0]
 801e024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e026:	4628      	mov	r0, r5
 801e028:	685b      	ldr	r3, [r3, #4]
 801e02a:	4641      	mov	r1, r8
 801e02c:	4798      	blx	r3
 801e02e:	b003      	add	sp, #12
 801e030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e034:	20000114 	.word	0x20000114

0801e038 <GL_DrawCircle>:
 801e038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e03c:	f240 28c3 	movw	r8, #707	; 0x2c3
 801e040:	fb08 f802 	mul.w	r8, r8, r2
 801e044:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801e048:	f04f 0902 	mov.w	r9, #2
 801e04c:	fb98 f8f3 	sdiv	r8, r8, r3
 801e050:	fb92 f9f9 	sdiv	r9, r2, r9
 801e054:	2300      	movs	r3, #0
 801e056:	4606      	mov	r6, r0
 801e058:	460f      	mov	r7, r1
 801e05a:	4614      	mov	r4, r2
 801e05c:	fb02 9902 	mla	r9, r2, r2, r9
 801e060:	f7ff ff9e 	bl	801dfa0 <Draw8Point>
 801e064:	f108 0801 	add.w	r8, r8, #1
 801e068:	2501      	movs	r5, #1
 801e06a:	4545      	cmp	r5, r8
 801e06c:	dc14      	bgt.n	801e098 <GL_DrawCircle+0x60>
 801e06e:	fb04 f304 	mul.w	r3, r4, r4
 801e072:	fb05 3305 	mla	r3, r5, r5, r3
 801e076:	454b      	cmp	r3, r9
 801e078:	dd06      	ble.n	801e088 <GL_DrawCircle+0x50>
 801e07a:	4623      	mov	r3, r4
 801e07c:	4630      	mov	r0, r6
 801e07e:	4639      	mov	r1, r7
 801e080:	462a      	mov	r2, r5
 801e082:	f7ff ff8d 	bl	801dfa0 <Draw8Point>
 801e086:	3c01      	subs	r4, #1
 801e088:	462a      	mov	r2, r5
 801e08a:	4630      	mov	r0, r6
 801e08c:	4639      	mov	r1, r7
 801e08e:	4623      	mov	r3, r4
 801e090:	f7ff ff86 	bl	801dfa0 <Draw8Point>
 801e094:	3501      	adds	r5, #1
 801e096:	e7e8      	b.n	801e06a <GL_DrawCircle+0x32>
 801e098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801e09c <GUI_DrawCircle>:
 801e09c:	4b12      	ldr	r3, [pc, #72]	; (801e0e8 <GUI_DrawCircle+0x4c>)
 801e09e:	681b      	ldr	r3, [r3, #0]
 801e0a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e0a2:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801e0a4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801e0a6:	4614      	mov	r4, r2
 801e0a8:	4406      	add	r6, r0
 801e0aa:	b2a3      	uxth	r3, r4
 801e0ac:	b2b2      	uxth	r2, r6
 801e0ae:	440d      	add	r5, r1
 801e0b0:	1ad1      	subs	r1, r2, r3
 801e0b2:	441a      	add	r2, r3
 801e0b4:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e0b8:	b2aa      	uxth	r2, r5
 801e0ba:	f8ad 1000 	strh.w	r1, [sp]
 801e0be:	4668      	mov	r0, sp
 801e0c0:	1ad1      	subs	r1, r2, r3
 801e0c2:	4413      	add	r3, r2
 801e0c4:	f8ad 1002 	strh.w	r1, [sp, #2]
 801e0c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e0cc:	f7fb fca6 	bl	8019a1c <WM__InitIVRSearch>
 801e0d0:	b138      	cbz	r0, 801e0e2 <GUI_DrawCircle+0x46>
 801e0d2:	4630      	mov	r0, r6
 801e0d4:	4629      	mov	r1, r5
 801e0d6:	4622      	mov	r2, r4
 801e0d8:	f7ff ffae 	bl	801e038 <GL_DrawCircle>
 801e0dc:	f7fb fbdc 	bl	8019898 <WM__GetNextIVR>
 801e0e0:	e7f6      	b.n	801e0d0 <GUI_DrawCircle+0x34>
 801e0e2:	b002      	add	sp, #8
 801e0e4:	bd70      	pop	{r4, r5, r6, pc}
 801e0e6:	bf00      	nop
 801e0e8:	20000114 	.word	0x20000114

0801e0ec <GL_FillCircle>:
 801e0ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0f0:	f240 29c3 	movw	r9, #707	; 0x2c3
 801e0f4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 801e1ac <GL_FillCircle+0xc0>
 801e0f8:	fb09 f902 	mul.w	r9, r9, r2
 801e0fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801e100:	fb99 f9f3 	sdiv	r9, r9, r3
 801e104:	f8d8 3000 	ldr.w	r3, [r8]
 801e108:	f04f 0b02 	mov.w	fp, #2
 801e10c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e10e:	4606      	mov	r6, r0
 801e110:	fb92 fbfb 	sdiv	fp, r2, fp
 801e114:	1a80      	subs	r0, r0, r2
 801e116:	4614      	mov	r4, r2
 801e118:	fb02 bb02 	mla	fp, r2, r2, fp
 801e11c:	681b      	ldr	r3, [r3, #0]
 801e11e:	18b2      	adds	r2, r6, r2
 801e120:	460f      	mov	r7, r1
 801e122:	4798      	blx	r3
 801e124:	f109 0901 	add.w	r9, r9, #1
 801e128:	2501      	movs	r5, #1
 801e12a:	454d      	cmp	r5, r9
 801e12c:	dc3a      	bgt.n	801e1a4 <GL_FillCircle+0xb8>
 801e12e:	fb04 f304 	mul.w	r3, r4, r4
 801e132:	fb05 3305 	mla	r3, r5, r5, r3
 801e136:	455b      	cmp	r3, fp
 801e138:	dd1b      	ble.n	801e172 <GL_FillCircle+0x86>
 801e13a:	454c      	cmp	r4, r9
 801e13c:	dd18      	ble.n	801e170 <GL_FillCircle+0x84>
 801e13e:	f8d8 2000 	ldr.w	r2, [r8]
 801e142:	1c73      	adds	r3, r6, #1
 801e144:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801e146:	f106 3aff 	add.w	sl, r6, #4294967295
 801e14a:	1b5b      	subs	r3, r3, r5
 801e14c:	44aa      	add	sl, r5
 801e14e:	f8d2 c000 	ldr.w	ip, [r2]
 801e152:	9301      	str	r3, [sp, #4]
 801e154:	4618      	mov	r0, r3
 801e156:	1939      	adds	r1, r7, r4
 801e158:	4652      	mov	r2, sl
 801e15a:	47e0      	blx	ip
 801e15c:	f8d8 2000 	ldr.w	r2, [r8]
 801e160:	9b01      	ldr	r3, [sp, #4]
 801e162:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801e164:	4618      	mov	r0, r3
 801e166:	f8d2 c000 	ldr.w	ip, [r2]
 801e16a:	1b39      	subs	r1, r7, r4
 801e16c:	4652      	mov	r2, sl
 801e16e:	47e0      	blx	ip
 801e170:	3c01      	subs	r4, #1
 801e172:	f8d8 2000 	ldr.w	r2, [r8]
 801e176:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801e178:	1b33      	subs	r3, r6, r4
 801e17a:	eb06 0a04 	add.w	sl, r6, r4
 801e17e:	f8d2 c000 	ldr.w	ip, [r2]
 801e182:	9301      	str	r3, [sp, #4]
 801e184:	4618      	mov	r0, r3
 801e186:	19e9      	adds	r1, r5, r7
 801e188:	4652      	mov	r2, sl
 801e18a:	47e0      	blx	ip
 801e18c:	f8d8 2000 	ldr.w	r2, [r8]
 801e190:	9b01      	ldr	r3, [sp, #4]
 801e192:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801e194:	1b79      	subs	r1, r7, r5
 801e196:	f8d2 c000 	ldr.w	ip, [r2]
 801e19a:	4618      	mov	r0, r3
 801e19c:	4652      	mov	r2, sl
 801e19e:	47e0      	blx	ip
 801e1a0:	3501      	adds	r5, #1
 801e1a2:	e7c2      	b.n	801e12a <GL_FillCircle+0x3e>
 801e1a4:	b003      	add	sp, #12
 801e1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1aa:	bf00      	nop
 801e1ac:	20000114 	.word	0x20000114

0801e1b0 <GUIPROP__FindChar>:
 801e1b0:	b138      	cbz	r0, 801e1c2 <GUIPROP__FindChar+0x12>
 801e1b2:	8803      	ldrh	r3, [r0, #0]
 801e1b4:	428b      	cmp	r3, r1
 801e1b6:	d802      	bhi.n	801e1be <GUIPROP__FindChar+0xe>
 801e1b8:	8843      	ldrh	r3, [r0, #2]
 801e1ba:	428b      	cmp	r3, r1
 801e1bc:	d201      	bcs.n	801e1c2 <GUIPROP__FindChar+0x12>
 801e1be:	6880      	ldr	r0, [r0, #8]
 801e1c0:	e7f6      	b.n	801e1b0 <GUIPROP__FindChar>
 801e1c2:	4770      	bx	lr

0801e1c4 <GUIPROP_DispChar>:
 801e1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1c8:	4c38      	ldr	r4, [pc, #224]	; (801e2ac <GUIPROP_DispChar+0xe8>)
 801e1ca:	6823      	ldr	r3, [r4, #0]
 801e1cc:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 801e1d0:	69db      	ldr	r3, [r3, #28]
 801e1d2:	4605      	mov	r5, r0
 801e1d4:	b089      	sub	sp, #36	; 0x24
 801e1d6:	69d8      	ldr	r0, [r3, #28]
 801e1d8:	4629      	mov	r1, r5
 801e1da:	f7ff ffe9 	bl	801e1b0 <GUIPROP__FindChar>
 801e1de:	2800      	cmp	r0, #0
 801e1e0:	d061      	beq.n	801e2a6 <GUIPROP_DispChar+0xe2>
 801e1e2:	f8b0 8000 	ldrh.w	r8, [r0]
 801e1e6:	6847      	ldr	r7, [r0, #4]
 801e1e8:	ebc8 0805 	rsb	r8, r8, r5
 801e1ec:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 801e1f0:	4648      	mov	r0, r9
 801e1f2:	f896 b002 	ldrb.w	fp, [r6, #2]
 801e1f6:	f7fd feab 	bl	801bf50 <LCD_SetDrawMode>
 801e1fa:	6825      	ldr	r5, [r4, #0]
 801e1fc:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 801e200:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 801e204:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 801e208:	f89e c01a 	ldrb.w	ip, [lr, #26]
 801e20c:	f89e 3018 	ldrb.w	r3, [lr, #24]
 801e210:	9306      	str	r3, [sp, #24]
 801e212:	4682      	mov	sl, r0
 801e214:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 801e218:	f8cd c000 	str.w	ip, [sp]
 801e21c:	f89e e01b 	ldrb.w	lr, [lr, #27]
 801e220:	f8cd e004 	str.w	lr, [sp, #4]
 801e224:	f04f 0e01 	mov.w	lr, #1
 801e228:	f8cd b00c 	str.w	fp, [sp, #12]
 801e22c:	f8cd e008 	str.w	lr, [sp, #8]
 801e230:	6873      	ldr	r3, [r6, #4]
 801e232:	9304      	str	r3, [sp, #16]
 801e234:	6bad      	ldr	r5, [r5, #56]	; 0x38
 801e236:	9b06      	ldr	r3, [sp, #24]
 801e238:	9505      	str	r5, [sp, #20]
 801e23a:	f7fe f813 	bl	801c264 <LCD_DrawBitmap>
 801e23e:	6823      	ldr	r3, [r4, #0]
 801e240:	69da      	ldr	r2, [r3, #28]
 801e242:	f892 b019 	ldrb.w	fp, [r2, #25]
 801e246:	7e11      	ldrb	r1, [r2, #24]
 801e248:	458b      	cmp	fp, r1
 801e24a:	d920      	bls.n	801e28e <GUIPROP_DispChar+0xca>
 801e24c:	f1b9 0f02 	cmp.w	r9, #2
 801e250:	7ed5      	ldrb	r5, [r2, #27]
 801e252:	d01c      	beq.n	801e28e <GUIPROP_DispChar+0xca>
 801e254:	9107      	str	r1, [sp, #28]
 801e256:	f003 fad6 	bl	8021806 <GUI_GetColor>
 801e25a:	4681      	mov	r9, r0
 801e25c:	f003 facc 	bl	80217f8 <GUI_GetBkColor>
 801e260:	f7fe fd64 	bl	801cd2c <GUI_SetColor>
 801e264:	6824      	ldr	r4, [r4, #0]
 801e266:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 801e26a:	69e2      	ldr	r2, [r4, #28]
 801e26c:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 801e270:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801e274:	7ed2      	ldrb	r2, [r2, #27]
 801e276:	9907      	ldr	r1, [sp, #28]
 801e278:	fb07 0202 	mla	r2, r7, r2, r0
 801e27c:	fb01 3105 	mla	r1, r1, r5, r3
 801e280:	fb0b 3305 	mla	r3, fp, r5, r3
 801e284:	f7fd fee6 	bl	801c054 <LCD_FillRect>
 801e288:	4648      	mov	r0, r9
 801e28a:	f7fe fd4f 	bl	801cd2c <GUI_SetColor>
 801e28e:	4650      	mov	r0, sl
 801e290:	f7fd fe5e 	bl	801bf50 <LCD_SetDrawMode>
 801e294:	4b05      	ldr	r3, [pc, #20]	; (801e2ac <GUIPROP_DispChar+0xe8>)
 801e296:	681b      	ldr	r3, [r3, #0]
 801e298:	69da      	ldr	r2, [r3, #28]
 801e29a:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801e29c:	7e90      	ldrb	r0, [r2, #26]
 801e29e:	7872      	ldrb	r2, [r6, #1]
 801e2a0:	fb00 1202 	mla	r2, r0, r2, r1
 801e2a4:	845a      	strh	r2, [r3, #34]	; 0x22
 801e2a6:	b009      	add	sp, #36	; 0x24
 801e2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2ac:	20000114 	.word	0x20000114

0801e2b0 <GUIPROP_GetCharDistX>:
 801e2b0:	4b0d      	ldr	r3, [pc, #52]	; (801e2e8 <GUIPROP_GetCharDistX+0x38>)
 801e2b2:	b570      	push	{r4, r5, r6, lr}
 801e2b4:	681b      	ldr	r3, [r3, #0]
 801e2b6:	69dd      	ldr	r5, [r3, #28]
 801e2b8:	4606      	mov	r6, r0
 801e2ba:	460c      	mov	r4, r1
 801e2bc:	69e8      	ldr	r0, [r5, #28]
 801e2be:	4631      	mov	r1, r6
 801e2c0:	f7ff ff76 	bl	801e1b0 <GUIPROP__FindChar>
 801e2c4:	b170      	cbz	r0, 801e2e4 <GUIPROP_GetCharDistX+0x34>
 801e2c6:	8803      	ldrh	r3, [r0, #0]
 801e2c8:	6842      	ldr	r2, [r0, #4]
 801e2ca:	1af6      	subs	r6, r6, r3
 801e2cc:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 801e2d0:	7858      	ldrb	r0, [r3, #1]
 801e2d2:	7eab      	ldrb	r3, [r5, #26]
 801e2d4:	fb10 f003 	smulbb	r0, r0, r3
 801e2d8:	b124      	cbz	r4, 801e2e4 <GUIPROP_GetCharDistX+0x34>
 801e2da:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 801e2de:	fb12 f303 	smulbb	r3, r2, r3
 801e2e2:	6023      	str	r3, [r4, #0]
 801e2e4:	bd70      	pop	{r4, r5, r6, pc}
 801e2e6:	bf00      	nop
 801e2e8:	20000114 	.word	0x20000114

0801e2ec <GUIPROP_GetFontInfo>:
 801e2ec:	2301      	movs	r3, #1
 801e2ee:	800b      	strh	r3, [r1, #0]
 801e2f0:	4770      	bx	lr

0801e2f2 <GUIPROP_IsInFont>:
 801e2f2:	b508      	push	{r3, lr}
 801e2f4:	69c0      	ldr	r0, [r0, #28]
 801e2f6:	f7ff ff5b 	bl	801e1b0 <GUIPROP__FindChar>
 801e2fa:	3000      	adds	r0, #0
 801e2fc:	bf18      	it	ne
 801e2fe:	2001      	movne	r0, #1
 801e300:	bd08      	pop	{r3, pc}
	...

0801e304 <GUIMONO_DispChar>:
 801e304:	4b52      	ldr	r3, [pc, #328]	; (801e450 <GUIMONO_DispChar+0x14c>)
 801e306:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e30a:	681b      	ldr	r3, [r3, #0]
 801e30c:	69d9      	ldr	r1, [r3, #28]
 801e30e:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 801e310:	69cc      	ldr	r4, [r1, #28]
 801e312:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 801e314:	89a2      	ldrh	r2, [r4, #12]
 801e316:	4290      	cmp	r0, r2
 801e318:	b08b      	sub	sp, #44	; 0x2c
 801e31a:	d308      	bcc.n	801e32e <GUIMONO_DispChar+0x2a>
 801e31c:	89e6      	ldrh	r6, [r4, #14]
 801e31e:	4286      	cmp	r6, r0
 801e320:	d305      	bcc.n	801e32e <GUIMONO_DispChar+0x2a>
 801e322:	f8d4 9000 	ldr.w	r9, [r4]
 801e326:	1a82      	subs	r2, r0, r2
 801e328:	f04f 3bff 	mov.w	fp, #4294967295
 801e32c:	e015      	b.n	801e35a <GUIMONO_DispChar+0x56>
 801e32e:	68a2      	ldr	r2, [r4, #8]
 801e330:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801e334:	2a00      	cmp	r2, #0
 801e336:	f000 8081 	beq.w	801e43c <GUIMONO_DispChar+0x138>
 801e33a:	8816      	ldrh	r6, [r2, #0]
 801e33c:	42b0      	cmp	r0, r6
 801e33e:	d37d      	bcc.n	801e43c <GUIMONO_DispChar+0x138>
 801e340:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 801e344:	4584      	cmp	ip, r0
 801e346:	d379      	bcc.n	801e43c <GUIMONO_DispChar+0x138>
 801e348:	6852      	ldr	r2, [r2, #4]
 801e34a:	1b80      	subs	r0, r0, r6
 801e34c:	b280      	uxth	r0, r0
 801e34e:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 801e352:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 801e356:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 801e35a:	1c50      	adds	r0, r2, #1
 801e35c:	d06e      	beq.n	801e43c <GUIMONO_DispChar+0x138>
 801e35e:	f891 8018 	ldrb.w	r8, [r1, #24]
 801e362:	7ca1      	ldrb	r1, [r4, #18]
 801e364:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 801e368:	7c26      	ldrb	r6, [r4, #16]
 801e36a:	9206      	str	r2, [sp, #24]
 801e36c:	fb18 f101 	smulbb	r1, r8, r1
 801e370:	9107      	str	r1, [sp, #28]
 801e372:	fa0f f18a 	sxth.w	r1, sl
 801e376:	4608      	mov	r0, r1
 801e378:	9108      	str	r1, [sp, #32]
 801e37a:	f7fd fde9 	bl	801bf50 <LCD_SetDrawMode>
 801e37e:	4934      	ldr	r1, [pc, #208]	; (801e450 <GUIMONO_DispChar+0x14c>)
 801e380:	9009      	str	r0, [sp, #36]	; 0x24
 801e382:	680b      	ldr	r3, [r1, #0]
 801e384:	9a06      	ldr	r2, [sp, #24]
 801e386:	69d9      	ldr	r1, [r3, #28]
 801e388:	7e88      	ldrb	r0, [r1, #26]
 801e38a:	9000      	str	r0, [sp, #0]
 801e38c:	7ec9      	ldrb	r1, [r1, #27]
 801e38e:	9101      	str	r1, [sp, #4]
 801e390:	2101      	movs	r1, #1
 801e392:	9102      	str	r1, [sp, #8]
 801e394:	7ca1      	ldrb	r1, [r4, #18]
 801e396:	9103      	str	r1, [sp, #12]
 801e398:	9907      	ldr	r1, [sp, #28]
 801e39a:	fb01 9202 	mla	r2, r1, r2, r9
 801e39e:	9204      	str	r2, [sp, #16]
 801e3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e3a2:	9305      	str	r3, [sp, #20]
 801e3a4:	b23f      	sxth	r7, r7
 801e3a6:	b22d      	sxth	r5, r5
 801e3a8:	4638      	mov	r0, r7
 801e3aa:	4629      	mov	r1, r5
 801e3ac:	4632      	mov	r2, r6
 801e3ae:	4643      	mov	r3, r8
 801e3b0:	f7fd ff58 	bl	801c264 <LCD_DrawBitmap>
 801e3b4:	f1bb 3fff 	cmp.w	fp, #4294967295
 801e3b8:	d01b      	beq.n	801e3f2 <GUIMONO_DispChar+0xee>
 801e3ba:	f04a 0002 	orr.w	r0, sl, #2
 801e3be:	b200      	sxth	r0, r0
 801e3c0:	f7fd fdc6 	bl	801bf50 <LCD_SetDrawMode>
 801e3c4:	4a22      	ldr	r2, [pc, #136]	; (801e450 <GUIMONO_DispChar+0x14c>)
 801e3c6:	6813      	ldr	r3, [r2, #0]
 801e3c8:	69da      	ldr	r2, [r3, #28]
 801e3ca:	7e91      	ldrb	r1, [r2, #26]
 801e3cc:	9100      	str	r1, [sp, #0]
 801e3ce:	7ed2      	ldrb	r2, [r2, #27]
 801e3d0:	9201      	str	r2, [sp, #4]
 801e3d2:	2101      	movs	r1, #1
 801e3d4:	9102      	str	r1, [sp, #8]
 801e3d6:	9907      	ldr	r1, [sp, #28]
 801e3d8:	7ca2      	ldrb	r2, [r4, #18]
 801e3da:	9203      	str	r2, [sp, #12]
 801e3dc:	fb01 920b 	mla	r2, r1, fp, r9
 801e3e0:	9204      	str	r2, [sp, #16]
 801e3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e3e4:	9305      	str	r3, [sp, #20]
 801e3e6:	4638      	mov	r0, r7
 801e3e8:	4629      	mov	r1, r5
 801e3ea:	4632      	mov	r2, r6
 801e3ec:	4643      	mov	r3, r8
 801e3ee:	f7fd ff39 	bl	801c264 <LCD_DrawBitmap>
 801e3f2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 801e450 <GUIMONO_DispChar+0x14c>
 801e3f6:	f8d8 3000 	ldr.w	r3, [r8]
 801e3fa:	69db      	ldr	r3, [r3, #28]
 801e3fc:	7e5a      	ldrb	r2, [r3, #25]
 801e3fe:	7e1b      	ldrb	r3, [r3, #24]
 801e400:	429a      	cmp	r2, r3
 801e402:	d917      	bls.n	801e434 <GUIMONO_DispChar+0x130>
 801e404:	9a08      	ldr	r2, [sp, #32]
 801e406:	2a02      	cmp	r2, #2
 801e408:	d014      	beq.n	801e434 <GUIMONO_DispChar+0x130>
 801e40a:	f08a 0004 	eor.w	r0, sl, #4
 801e40e:	b200      	sxth	r0, r0
 801e410:	f7fd fd9e 	bl	801bf50 <LCD_SetDrawMode>
 801e414:	f8d8 3000 	ldr.w	r3, [r8]
 801e418:	69db      	ldr	r3, [r3, #28]
 801e41a:	f893 e018 	ldrb.w	lr, [r3, #24]
 801e41e:	7ed9      	ldrb	r1, [r3, #27]
 801e420:	7e9a      	ldrb	r2, [r3, #26]
 801e422:	7e5b      	ldrb	r3, [r3, #25]
 801e424:	4638      	mov	r0, r7
 801e426:	fb0e 5101 	mla	r1, lr, r1, r5
 801e42a:	fb06 7202 	mla	r2, r6, r2, r7
 801e42e:	442b      	add	r3, r5
 801e430:	f7fd fe10 	bl	801c054 <LCD_FillRect>
 801e434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e436:	b2d8      	uxtb	r0, r3
 801e438:	f7fd fd8a 	bl	801bf50 <LCD_SetDrawMode>
 801e43c:	4b04      	ldr	r3, [pc, #16]	; (801e450 <GUIMONO_DispChar+0x14c>)
 801e43e:	7c61      	ldrb	r1, [r4, #17]
 801e440:	681b      	ldr	r3, [r3, #0]
 801e442:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801e444:	440a      	add	r2, r1
 801e446:	845a      	strh	r2, [r3, #34]	; 0x22
 801e448:	b00b      	add	sp, #44	; 0x2c
 801e44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e44e:	bf00      	nop
 801e450:	20000114 	.word	0x20000114

0801e454 <GUIMONO_GetCharDistX>:
 801e454:	4b04      	ldr	r3, [pc, #16]	; (801e468 <GUIMONO_GetCharDistX+0x14>)
 801e456:	681b      	ldr	r3, [r3, #0]
 801e458:	69db      	ldr	r3, [r3, #28]
 801e45a:	69db      	ldr	r3, [r3, #28]
 801e45c:	b109      	cbz	r1, 801e462 <GUIMONO_GetCharDistX+0xe>
 801e45e:	7c1a      	ldrb	r2, [r3, #16]
 801e460:	600a      	str	r2, [r1, #0]
 801e462:	7c58      	ldrb	r0, [r3, #17]
 801e464:	4770      	bx	lr
 801e466:	bf00      	nop
 801e468:	20000114 	.word	0x20000114

0801e46c <GUIMONO_GetFontInfo>:
 801e46c:	2302      	movs	r3, #2
 801e46e:	800b      	strh	r3, [r1, #0]
 801e470:	4770      	bx	lr

0801e472 <GUIMONO_IsInFont>:
 801e472:	69c3      	ldr	r3, [r0, #28]
 801e474:	899a      	ldrh	r2, [r3, #12]
 801e476:	428a      	cmp	r2, r1
 801e478:	d802      	bhi.n	801e480 <GUIMONO_IsInFont+0xe>
 801e47a:	89da      	ldrh	r2, [r3, #14]
 801e47c:	428a      	cmp	r2, r1
 801e47e:	d20f      	bcs.n	801e4a0 <GUIMONO_IsInFont+0x2e>
 801e480:	6898      	ldr	r0, [r3, #8]
 801e482:	b180      	cbz	r0, 801e4a6 <GUIMONO_IsInFont+0x34>
 801e484:	8803      	ldrh	r3, [r0, #0]
 801e486:	4299      	cmp	r1, r3
 801e488:	d30c      	bcc.n	801e4a4 <GUIMONO_IsInFont+0x32>
 801e48a:	8842      	ldrh	r2, [r0, #2]
 801e48c:	428a      	cmp	r2, r1
 801e48e:	d309      	bcc.n	801e4a4 <GUIMONO_IsInFont+0x32>
 801e490:	1ac9      	subs	r1, r1, r3
 801e492:	6842      	ldr	r2, [r0, #4]
 801e494:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 801e498:	43c0      	mvns	r0, r0
 801e49a:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 801e49e:	4770      	bx	lr
 801e4a0:	2001      	movs	r0, #1
 801e4a2:	4770      	bx	lr
 801e4a4:	2000      	movs	r0, #0
 801e4a6:	4770      	bx	lr

0801e4a8 <_Log2VisBuffered>:
 801e4a8:	4770      	bx	lr
	...

0801e4ac <_DispLine>:
 801e4ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e4ae:	4615      	mov	r5, r2
 801e4b0:	ab02      	add	r3, sp, #8
 801e4b2:	4a1a      	ldr	r2, [pc, #104]	; (801e51c <_DispLine+0x70>)
 801e4b4:	f843 1d08 	str.w	r1, [r3, #-8]!
 801e4b8:	9001      	str	r0, [sp, #4]
 801e4ba:	6812      	ldr	r2, [r2, #0]
 801e4bc:	4c18      	ldr	r4, [pc, #96]	; (801e520 <_DispLine+0x74>)
 801e4be:	4669      	mov	r1, sp
 801e4c0:	4790      	blx	r2
 801e4c2:	6823      	ldr	r3, [r4, #0]
 801e4c4:	9001      	str	r0, [sp, #4]
 801e4c6:	6958      	ldr	r0, [r3, #20]
 801e4c8:	b958      	cbnz	r0, 801e4e2 <_DispLine+0x36>
 801e4ca:	2001      	movs	r0, #1
 801e4cc:	f7fe f936 	bl	801c73c <GUI__ManageCache>
 801e4d0:	6823      	ldr	r3, [r4, #0]
 801e4d2:	69db      	ldr	r3, [r3, #28]
 801e4d4:	695b      	ldr	r3, [r3, #20]
 801e4d6:	b1bb      	cbz	r3, 801e508 <_DispLine+0x5c>
 801e4d8:	689b      	ldr	r3, [r3, #8]
 801e4da:	9801      	ldr	r0, [sp, #4]
 801e4dc:	9900      	ldr	r1, [sp, #0]
 801e4de:	4798      	blx	r3
 801e4e0:	e017      	b.n	801e512 <_DispLine+0x66>
 801e4e2:	4629      	mov	r1, r5
 801e4e4:	f7fe fc74 	bl	801cdd0 <GUI_RectsIntersect>
 801e4e8:	2800      	cmp	r0, #0
 801e4ea:	d1ee      	bne.n	801e4ca <_DispLine+0x1e>
 801e4ec:	e014      	b.n	801e518 <_DispLine+0x6c>
 801e4ee:	a801      	add	r0, sp, #4
 801e4f0:	f003 f926 	bl	8021740 <GUI_UC__GetCharCodeInc>
 801e4f4:	6823      	ldr	r3, [r4, #0]
 801e4f6:	69db      	ldr	r3, [r3, #28]
 801e4f8:	681b      	ldr	r3, [r3, #0]
 801e4fa:	4605      	mov	r5, r0
 801e4fc:	4798      	blx	r3
 801e4fe:	4b09      	ldr	r3, [pc, #36]	; (801e524 <_DispLine+0x78>)
 801e500:	681b      	ldr	r3, [r3, #0]
 801e502:	b10b      	cbz	r3, 801e508 <_DispLine+0x5c>
 801e504:	4628      	mov	r0, r5
 801e506:	4798      	blx	r3
 801e508:	9b00      	ldr	r3, [sp, #0]
 801e50a:	3b01      	subs	r3, #1
 801e50c:	2b00      	cmp	r3, #0
 801e50e:	9300      	str	r3, [sp, #0]
 801e510:	daed      	bge.n	801e4ee <_DispLine+0x42>
 801e512:	2000      	movs	r0, #0
 801e514:	f7fe f912 	bl	801c73c <GUI__ManageCache>
 801e518:	b003      	add	sp, #12
 801e51a:	bd30      	pop	{r4, r5, pc}
 801e51c:	20000120 	.word	0x20000120
 801e520:	20000114 	.word	0x20000114
 801e524:	2002c5b8 	.word	0x2002c5b8

0801e528 <GUI__GetLineNumChars>:
 801e528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e52a:	460d      	mov	r5, r1
 801e52c:	9001      	str	r0, [sp, #4]
 801e52e:	4604      	mov	r4, r0
 801e530:	b198      	cbz	r0, 801e55a <GUI__GetLineNumChars+0x32>
 801e532:	4b0b      	ldr	r3, [pc, #44]	; (801e560 <GUI__GetLineNumChars+0x38>)
 801e534:	681b      	ldr	r3, [r3, #0]
 801e536:	69db      	ldr	r3, [r3, #28]
 801e538:	695b      	ldr	r3, [r3, #20]
 801e53a:	b10b      	cbz	r3, 801e540 <GUI__GetLineNumChars+0x18>
 801e53c:	685b      	ldr	r3, [r3, #4]
 801e53e:	b90b      	cbnz	r3, 801e544 <GUI__GetLineNumChars+0x1c>
 801e540:	2400      	movs	r4, #0
 801e542:	e008      	b.n	801e556 <GUI__GetLineNumChars+0x2e>
 801e544:	4798      	blx	r3
 801e546:	e009      	b.n	801e55c <GUI__GetLineNumChars+0x34>
 801e548:	a801      	add	r0, sp, #4
 801e54a:	f003 f8f9 	bl	8021740 <GUI_UC__GetCharCodeInc>
 801e54e:	b120      	cbz	r0, 801e55a <GUI__GetLineNumChars+0x32>
 801e550:	280a      	cmp	r0, #10
 801e552:	d002      	beq.n	801e55a <GUI__GetLineNumChars+0x32>
 801e554:	3401      	adds	r4, #1
 801e556:	42ac      	cmp	r4, r5
 801e558:	dbf6      	blt.n	801e548 <GUI__GetLineNumChars+0x20>
 801e55a:	4620      	mov	r0, r4
 801e55c:	b003      	add	sp, #12
 801e55e:	bd30      	pop	{r4, r5, pc}
 801e560:	20000114 	.word	0x20000114

0801e564 <GUI__GetOverlap>:
 801e564:	b513      	push	{r0, r1, r4, lr}
 801e566:	a902      	add	r1, sp, #8
 801e568:	2400      	movs	r4, #0
 801e56a:	f841 4d04 	str.w	r4, [r1, #-4]!
 801e56e:	f000 f8b7 	bl	801e6e0 <GUI_GetCharDistXEx>
 801e572:	9b01      	ldr	r3, [sp, #4]
 801e574:	4283      	cmp	r3, r0
 801e576:	bfcc      	ite	gt
 801e578:	ebc0 0003 	rsbgt	r0, r0, r3
 801e57c:	4620      	movle	r0, r4
 801e57e:	b002      	add	sp, #8
 801e580:	bd10      	pop	{r4, pc}
	...

0801e584 <GUI__GetLineDistX>:
 801e584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e586:	4a15      	ldr	r2, [pc, #84]	; (801e5dc <GUI__GetLineDistX+0x58>)
 801e588:	9001      	str	r0, [sp, #4]
 801e58a:	ab02      	add	r3, sp, #8
 801e58c:	6812      	ldr	r2, [r2, #0]
 801e58e:	f843 1d08 	str.w	r1, [r3, #-8]!
 801e592:	4669      	mov	r1, sp
 801e594:	4790      	blx	r2
 801e596:	9001      	str	r0, [sp, #4]
 801e598:	b1f0      	cbz	r0, 801e5d8 <GUI__GetLineDistX+0x54>
 801e59a:	4b11      	ldr	r3, [pc, #68]	; (801e5e0 <GUI__GetLineDistX+0x5c>)
 801e59c:	681b      	ldr	r3, [r3, #0]
 801e59e:	69db      	ldr	r3, [r3, #28]
 801e5a0:	695b      	ldr	r3, [r3, #20]
 801e5a2:	b10b      	cbz	r3, 801e5a8 <GUI__GetLineDistX+0x24>
 801e5a4:	681b      	ldr	r3, [r3, #0]
 801e5a6:	b913      	cbnz	r3, 801e5ae <GUI__GetLineDistX+0x2a>
 801e5a8:	2500      	movs	r5, #0
 801e5aa:	462c      	mov	r4, r5
 801e5ac:	e002      	b.n	801e5b4 <GUI__GetLineDistX+0x30>
 801e5ae:	9900      	ldr	r1, [sp, #0]
 801e5b0:	4798      	blx	r3
 801e5b2:	e011      	b.n	801e5d8 <GUI__GetLineDistX+0x54>
 801e5b4:	9b00      	ldr	r3, [sp, #0]
 801e5b6:	3b01      	subs	r3, #1
 801e5b8:	2b00      	cmp	r3, #0
 801e5ba:	9300      	str	r3, [sp, #0]
 801e5bc:	db07      	blt.n	801e5ce <GUI__GetLineDistX+0x4a>
 801e5be:	a801      	add	r0, sp, #4
 801e5c0:	f003 f8be 	bl	8021740 <GUI_UC__GetCharCodeInc>
 801e5c4:	4605      	mov	r5, r0
 801e5c6:	f000 f881 	bl	801e6cc <GUI_GetCharDistX>
 801e5ca:	4404      	add	r4, r0
 801e5cc:	e7f2      	b.n	801e5b4 <GUI__GetLineDistX+0x30>
 801e5ce:	4628      	mov	r0, r5
 801e5d0:	f7ff ffc8 	bl	801e564 <GUI__GetOverlap>
 801e5d4:	4420      	add	r0, r4
 801e5d6:	e7ff      	b.n	801e5d8 <GUI__GetLineDistX+0x54>
 801e5d8:	b003      	add	sp, #12
 801e5da:	bd30      	pop	{r4, r5, pc}
 801e5dc:	20000120 	.word	0x20000120
 801e5e0:	20000114 	.word	0x20000114

0801e5e4 <GUI__DispLine>:
 801e5e4:	4b27      	ldr	r3, [pc, #156]	; (801e684 <GUI__DispLine+0xa0>)
 801e5e6:	681b      	ldr	r3, [r3, #0]
 801e5e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e5ea:	4605      	mov	r5, r0
 801e5ec:	460c      	mov	r4, r1
 801e5ee:	b163      	cbz	r3, 801e60a <GUI__DispLine+0x26>
 801e5f0:	2000      	movs	r0, #0
 801e5f2:	f7fb fa13 	bl	8019a1c <WM__InitIVRSearch>
 801e5f6:	2800      	cmp	r0, #0
 801e5f8:	d041      	beq.n	801e67e <GUI__DispLine+0x9a>
 801e5fa:	4628      	mov	r0, r5
 801e5fc:	4621      	mov	r1, r4
 801e5fe:	466a      	mov	r2, sp
 801e600:	f7ff ff54 	bl	801e4ac <_DispLine>
 801e604:	f7fb f948 	bl	8019898 <WM__GetNextIVR>
 801e608:	e7f5      	b.n	801e5f6 <GUI__DispLine+0x12>
 801e60a:	6810      	ldr	r0, [r2, #0]
 801e60c:	6851      	ldr	r1, [r2, #4]
 801e60e:	4e1e      	ldr	r6, [pc, #120]	; (801e688 <GUI__DispLine+0xa4>)
 801e610:	466b      	mov	r3, sp
 801e612:	c303      	stmia	r3!, {r0, r1}
 801e614:	6833      	ldr	r3, [r6, #0]
 801e616:	f8bd 1000 	ldrh.w	r1, [sp]
 801e61a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 801e61e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801e622:	4411      	add	r1, r2
 801e624:	f8ad 1000 	strh.w	r1, [sp]
 801e628:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 801e62c:	4419      	add	r1, r3
 801e62e:	f8ad 1002 	strh.w	r1, [sp, #2]
 801e632:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801e636:	440a      	add	r2, r1
 801e638:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e63c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801e640:	4668      	mov	r0, sp
 801e642:	4413      	add	r3, r2
 801e644:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e648:	f7fb f9e8 	bl	8019a1c <WM__InitIVRSearch>
 801e64c:	6833      	ldr	r3, [r6, #0]
 801e64e:	b940      	cbnz	r0, 801e662 <GUI__DispLine+0x7e>
 801e650:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801e652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801e654:	1a8a      	subs	r2, r1, r2
 801e656:	845a      	strh	r2, [r3, #34]	; 0x22
 801e658:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 801e65a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e65c:	1a8a      	subs	r2, r1, r2
 801e65e:	849a      	strh	r2, [r3, #36]	; 0x24
 801e660:	e00d      	b.n	801e67e <GUI__DispLine+0x9a>
 801e662:	f8bd 2000 	ldrh.w	r2, [sp]
 801e666:	845a      	strh	r2, [r3, #34]	; 0x22
 801e668:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801e66c:	849a      	strh	r2, [r3, #36]	; 0x24
 801e66e:	4628      	mov	r0, r5
 801e670:	4621      	mov	r1, r4
 801e672:	466a      	mov	r2, sp
 801e674:	f7ff ff1a 	bl	801e4ac <_DispLine>
 801e678:	f7fb f90e 	bl	8019898 <WM__GetNextIVR>
 801e67c:	e7e6      	b.n	801e64c <GUI__DispLine+0x68>
 801e67e:	b002      	add	sp, #8
 801e680:	bd70      	pop	{r4, r5, r6, pc}
 801e682:	bf00      	nop
 801e684:	2002c5a0 	.word	0x2002c5a0
 801e688:	20000114 	.word	0x20000114

0801e68c <GUI_GetYAdjust>:
 801e68c:	4b0a      	ldr	r3, [pc, #40]	; (801e6b8 <GUI_GetYAdjust+0x2c>)
 801e68e:	681b      	ldr	r3, [r3, #0]
 801e690:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801e692:	f002 020c 	and.w	r2, r2, #12
 801e696:	2a08      	cmp	r2, #8
 801e698:	d007      	beq.n	801e6aa <GUI_GetYAdjust+0x1e>
 801e69a:	2a0c      	cmp	r2, #12
 801e69c:	d005      	beq.n	801e6aa <GUI_GetYAdjust+0x1e>
 801e69e:	2a04      	cmp	r2, #4
 801e6a0:	d107      	bne.n	801e6b2 <GUI_GetYAdjust+0x26>
 801e6a2:	69db      	ldr	r3, [r3, #28]
 801e6a4:	7e18      	ldrb	r0, [r3, #24]
 801e6a6:	3801      	subs	r0, #1
 801e6a8:	4770      	bx	lr
 801e6aa:	69db      	ldr	r3, [r3, #28]
 801e6ac:	7e18      	ldrb	r0, [r3, #24]
 801e6ae:	0840      	lsrs	r0, r0, #1
 801e6b0:	4770      	bx	lr
 801e6b2:	2000      	movs	r0, #0
 801e6b4:	4770      	bx	lr
 801e6b6:	bf00      	nop
 801e6b8:	20000114 	.word	0x20000114

0801e6bc <GUI_GetFontDistY>:
 801e6bc:	4b02      	ldr	r3, [pc, #8]	; (801e6c8 <GUI_GetFontDistY+0xc>)
 801e6be:	681b      	ldr	r3, [r3, #0]
 801e6c0:	69db      	ldr	r3, [r3, #28]
 801e6c2:	7e58      	ldrb	r0, [r3, #25]
 801e6c4:	4770      	bx	lr
 801e6c6:	bf00      	nop
 801e6c8:	20000114 	.word	0x20000114

0801e6cc <GUI_GetCharDistX>:
 801e6cc:	b508      	push	{r3, lr}
 801e6ce:	4b03      	ldr	r3, [pc, #12]	; (801e6dc <GUI_GetCharDistX+0x10>)
 801e6d0:	681b      	ldr	r3, [r3, #0]
 801e6d2:	69db      	ldr	r3, [r3, #28]
 801e6d4:	2100      	movs	r1, #0
 801e6d6:	685b      	ldr	r3, [r3, #4]
 801e6d8:	4798      	blx	r3
 801e6da:	bd08      	pop	{r3, pc}
 801e6dc:	20000114 	.word	0x20000114

0801e6e0 <GUI_GetCharDistXEx>:
 801e6e0:	b508      	push	{r3, lr}
 801e6e2:	4b03      	ldr	r3, [pc, #12]	; (801e6f0 <GUI_GetCharDistXEx+0x10>)
 801e6e4:	681b      	ldr	r3, [r3, #0]
 801e6e6:	69db      	ldr	r3, [r3, #28]
 801e6e8:	685b      	ldr	r3, [r3, #4]
 801e6ea:	4798      	blx	r3
 801e6ec:	bd08      	pop	{r3, pc}
 801e6ee:	bf00      	nop
 801e6f0:	20000114 	.word	0x20000114

0801e6f4 <_PushFreeBlock>:
 801e6f4:	4b07      	ldr	r3, [pc, #28]	; (801e714 <_PushFreeBlock+0x20>)
 801e6f6:	685a      	ldr	r2, [r3, #4]
 801e6f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801e6fa:	3201      	adds	r2, #1
 801e6fc:	b510      	push	{r4, lr}
 801e6fe:	605a      	str	r2, [r3, #4]
 801e700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e702:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 801e706:	6061      	str	r1, [r4, #4]
 801e708:	2100      	movs	r1, #0
 801e70a:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 801e70e:	6258      	str	r0, [r3, #36]	; 0x24
 801e710:	bd10      	pop	{r4, pc}
 801e712:	bf00      	nop
 801e714:	2002c5dc 	.word	0x2002c5dc

0801e718 <_OnExit>:
 801e718:	b538      	push	{r3, r4, r5, lr}
 801e71a:	4d0b      	ldr	r5, [pc, #44]	; (801e748 <_OnExit+0x30>)
 801e71c:	2400      	movs	r4, #0
 801e71e:	f105 0040 	add.w	r0, r5, #64	; 0x40
 801e722:	4621      	mov	r1, r4
 801e724:	2280      	movs	r2, #128	; 0x80
 801e726:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
 801e72a:	f7fd ff69 	bl	801c600 <GUI__memset>
 801e72e:	4628      	mov	r0, r5
 801e730:	4621      	mov	r1, r4
 801e732:	22c0      	movs	r2, #192	; 0xc0
 801e734:	f7fd ff64 	bl	801c600 <GUI__memset>
 801e738:	4621      	mov	r1, r4
 801e73a:	4804      	ldr	r0, [pc, #16]	; (801e74c <_OnExit+0x34>)
 801e73c:	220c      	movs	r2, #12
 801e73e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e742:	f7fd bf5d 	b.w	801c600 <GUI__memset>
 801e746:	bf00      	nop
 801e748:	2002c5dc 	.word	0x2002c5dc
 801e74c:	2002c468 	.word	0x2002c468

0801e750 <_RemoveFreeBlock>:
 801e750:	b510      	push	{r4, lr}
 801e752:	6842      	ldr	r2, [r0, #4]
 801e754:	230f      	movs	r3, #15
 801e756:	490d      	ldr	r1, [pc, #52]	; (801e78c <_RemoveFreeBlock+0x3c>)
 801e758:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 801e75c:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801e75e:	42a2      	cmp	r2, r4
 801e760:	d203      	bcs.n	801e76a <_RemoveFreeBlock+0x1a>
 801e762:	f113 33ff 	adds.w	r3, r3, #4294967295
 801e766:	d2f6      	bcs.n	801e756 <_RemoveFreeBlock+0x6>
 801e768:	bd10      	pop	{r4, pc}
 801e76a:	2b0f      	cmp	r3, #15
 801e76c:	d80c      	bhi.n	801e788 <_RemoveFreeBlock+0x38>
 801e76e:	680c      	ldr	r4, [r1, #0]
 801e770:	1aa2      	subs	r2, r4, r2
 801e772:	600a      	str	r2, [r1, #0]
 801e774:	6882      	ldr	r2, [r0, #8]
 801e776:	68c0      	ldr	r0, [r0, #12]
 801e778:	b102      	cbz	r2, 801e77c <_RemoveFreeBlock+0x2c>
 801e77a:	6050      	str	r0, [r2, #4]
 801e77c:	b108      	cbz	r0, 801e782 <_RemoveFreeBlock+0x32>
 801e77e:	6002      	str	r2, [r0, #0]
 801e780:	bd10      	pop	{r4, pc}
 801e782:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e786:	645a      	str	r2, [r3, #68]	; 0x44
 801e788:	bd10      	pop	{r4, pc}
 801e78a:	bf00      	nop
 801e78c:	2002c5dc 	.word	0x2002c5dc

0801e790 <_AddFreeMemory>:
 801e790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e792:	4e26      	ldr	r6, [pc, #152]	; (801e82c <_AddFreeMemory+0x9c>)
 801e794:	68f3      	ldr	r3, [r6, #12]
 801e796:	1e5a      	subs	r2, r3, #1
 801e798:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 801e79a:	4605      	mov	r5, r0
 801e79c:	4413      	add	r3, r2
 801e79e:	1808      	adds	r0, r1, r0
 801e7a0:	4298      	cmp	r0, r3
 801e7a2:	460c      	mov	r4, r1
 801e7a4:	d805      	bhi.n	801e7b2 <_AddFreeMemory+0x22>
 801e7a6:	594b      	ldr	r3, [r1, r5]
 801e7a8:	b91b      	cbnz	r3, 801e7b2 <_AddFreeMemory+0x22>
 801e7aa:	6843      	ldr	r3, [r0, #4]
 801e7ac:	441d      	add	r5, r3
 801e7ae:	f7ff ffcf 	bl	801e750 <_RemoveFreeBlock>
 801e7b2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 801e7b4:	429c      	cmp	r4, r3
 801e7b6:	d90a      	bls.n	801e7ce <_AddFreeMemory+0x3e>
 801e7b8:	f854 7c04 	ldr.w	r7, [r4, #-4]
 801e7bc:	1be7      	subs	r7, r4, r7
 801e7be:	683b      	ldr	r3, [r7, #0]
 801e7c0:	b92b      	cbnz	r3, 801e7ce <_AddFreeMemory+0x3e>
 801e7c2:	687b      	ldr	r3, [r7, #4]
 801e7c4:	4638      	mov	r0, r7
 801e7c6:	441d      	add	r5, r3
 801e7c8:	f7ff ffc2 	bl	801e750 <_RemoveFreeBlock>
 801e7cc:	463c      	mov	r4, r7
 801e7ce:	230f      	movs	r3, #15
 801e7d0:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801e7d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801e7d6:	4295      	cmp	r5, r2
 801e7d8:	d203      	bcs.n	801e7e2 <_AddFreeMemory+0x52>
 801e7da:	f113 33ff 	adds.w	r3, r3, #4294967295
 801e7de:	d2f7      	bcs.n	801e7d0 <_AddFreeMemory+0x40>
 801e7e0:	e022      	b.n	801e828 <_AddFreeMemory+0x98>
 801e7e2:	2b0f      	cmp	r3, #15
 801e7e4:	d820      	bhi.n	801e828 <_AddFreeMemory+0x98>
 801e7e6:	3308      	adds	r3, #8
 801e7e8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801e7ec:	1961      	adds	r1, r4, r5
 801e7ee:	6852      	ldr	r2, [r2, #4]
 801e7f0:	60a2      	str	r2, [r4, #8]
 801e7f2:	2000      	movs	r0, #0
 801e7f4:	e884 0021 	stmia.w	r4, {r0, r5}
 801e7f8:	6124      	str	r4, [r4, #16]
 801e7fa:	f841 5c04 	str.w	r5, [r1, #-4]
 801e7fe:	f104 0108 	add.w	r1, r4, #8
 801e802:	b102      	cbz	r2, 801e806 <_AddFreeMemory+0x76>
 801e804:	6051      	str	r1, [r2, #4]
 801e806:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801e80a:	60e0      	str	r0, [r4, #12]
 801e80c:	6059      	str	r1, [r3, #4]
 801e80e:	6833      	ldr	r3, [r6, #0]
 801e810:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 801e814:	4a05      	ldr	r2, [pc, #20]	; (801e82c <_AddFreeMemory+0x9c>)
 801e816:	442b      	add	r3, r5
 801e818:	6033      	str	r3, [r6, #0]
 801e81a:	b929      	cbnz	r1, 801e828 <_AddFreeMemory+0x98>
 801e81c:	68d1      	ldr	r1, [r2, #12]
 801e81e:	1acb      	subs	r3, r1, r3
 801e820:	6891      	ldr	r1, [r2, #8]
 801e822:	4299      	cmp	r1, r3
 801e824:	bf38      	it	cc
 801e826:	6093      	strcc	r3, [r2, #8]
 801e828:	4628      	mov	r0, r5
 801e82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e82c:	2002c5dc 	.word	0x2002c5dc

0801e830 <_RemoveHoles>:
 801e830:	4b25      	ldr	r3, [pc, #148]	; (801e8c8 <_RemoveHoles+0x98>)
 801e832:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e836:	68da      	ldr	r2, [r3, #12]
 801e838:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 801e83a:	3a01      	subs	r2, #1
 801e83c:	4682      	mov	sl, r0
 801e83e:	eb02 0904 	add.w	r9, r2, r4
 801e842:	469b      	mov	fp, r3
 801e844:	e894 0028 	ldmia.w	r4, {r3, r5}
 801e848:	2b00      	cmp	r3, #0
 801e84a:	d133      	bne.n	801e8b4 <_RemoveHoles+0x84>
 801e84c:	eb04 0805 	add.w	r8, r4, r5
 801e850:	45c8      	cmp	r8, r9
 801e852:	d22f      	bcs.n	801e8b4 <_RemoveHoles+0x84>
 801e854:	f854 c005 	ldr.w	ip, [r4, r5]
 801e858:	f8d8 6004 	ldr.w	r6, [r8, #4]
 801e85c:	f1bc 0f00 	cmp.w	ip, #0
 801e860:	d028      	beq.n	801e8b4 <_RemoveHoles+0x84>
 801e862:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 801e866:	4f18      	ldr	r7, [pc, #96]	; (801e8c8 <_RemoveHoles+0x98>)
 801e868:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 801e86c:	2b01      	cmp	r3, #1
 801e86e:	d121      	bne.n	801e8b4 <_RemoveHoles+0x84>
 801e870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e872:	4620      	mov	r0, r4
 801e874:	e88d 1008 	stmia.w	sp, {r3, ip}
 801e878:	f7ff ff6a 	bl	801e750 <_RemoveFreeBlock>
 801e87c:	f8d8 1000 	ldr.w	r1, [r8]
 801e880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e882:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801e886:	4620      	mov	r0, r4
 801e888:	6054      	str	r4, [r2, #4]
 801e88a:	4641      	mov	r1, r8
 801e88c:	4632      	mov	r2, r6
 801e88e:	f003 f9c7 	bl	8021c20 <memmove>
 801e892:	e89d 1008 	ldmia.w	sp, {r3, ip}
 801e896:	459c      	cmp	ip, r3
 801e898:	d102      	bne.n	801e8a0 <_RemoveHoles+0x70>
 801e89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e89c:	1b5b      	subs	r3, r3, r5
 801e89e:	637b      	str	r3, [r7, #52]	; 0x34
 801e8a0:	4628      	mov	r0, r5
 801e8a2:	19a1      	adds	r1, r4, r6
 801e8a4:	f7ff ff74 	bl	801e790 <_AddFreeMemory>
 801e8a8:	f1ba 0f00 	cmp.w	sl, #0
 801e8ac:	d001      	beq.n	801e8b2 <_RemoveHoles+0x82>
 801e8ae:	4582      	cmp	sl, r0
 801e8b0:	d905      	bls.n	801e8be <_RemoveHoles+0x8e>
 801e8b2:	4635      	mov	r5, r6
 801e8b4:	442c      	add	r4, r5
 801e8b6:	454c      	cmp	r4, r9
 801e8b8:	d3c4      	bcc.n	801e844 <_RemoveHoles+0x14>
 801e8ba:	2001      	movs	r0, #1
 801e8bc:	e000      	b.n	801e8c0 <_RemoveHoles+0x90>
 801e8be:	2000      	movs	r0, #0
 801e8c0:	b003      	add	sp, #12
 801e8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8c6:	bf00      	nop
 801e8c8:	2002c5dc 	.word	0x2002c5dc

0801e8cc <GUI_ALLOC_FreeFixedBlock>:
 801e8cc:	b128      	cbz	r0, 801e8da <GUI_ALLOC_FreeFixedBlock+0xe>
 801e8ce:	4a03      	ldr	r2, [pc, #12]	; (801e8dc <GUI_ALLOC_FreeFixedBlock+0x10>)
 801e8d0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 801e8d2:	6003      	str	r3, [r0, #0]
 801e8d4:	b103      	cbz	r3, 801e8d8 <GUI_ALLOC_FreeFixedBlock+0xc>
 801e8d6:	6058      	str	r0, [r3, #4]
 801e8d8:	63d0      	str	r0, [r2, #60]	; 0x3c
 801e8da:	4770      	bx	lr
 801e8dc:	2002c5dc 	.word	0x2002c5dc

0801e8e0 <GUI_ALLOC_h2p>:
 801e8e0:	b128      	cbz	r0, 801e8ee <GUI_ALLOC_h2p+0xe>
 801e8e2:	4b03      	ldr	r3, [pc, #12]	; (801e8f0 <GUI_ALLOC_h2p+0x10>)
 801e8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e8e6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801e8ea:	6840      	ldr	r0, [r0, #4]
 801e8ec:	3008      	adds	r0, #8
 801e8ee:	4770      	bx	lr
 801e8f0:	2002c5dc 	.word	0x2002c5dc

0801e8f4 <GUI_ALLOC_LockH>:
 801e8f4:	4b05      	ldr	r3, [pc, #20]	; (801e90c <GUI_ALLOC_LockH+0x18>)
 801e8f6:	69d9      	ldr	r1, [r3, #28]
 801e8f8:	3101      	adds	r1, #1
 801e8fa:	61d9      	str	r1, [r3, #28]
 801e8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e8fe:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 801e902:	3101      	adds	r1, #1
 801e904:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 801e908:	f7ff bfea 	b.w	801e8e0 <GUI_ALLOC_h2p>
 801e90c:	2002c5dc 	.word	0x2002c5dc

0801e910 <GUI_ALLOC_UnlockH>:
 801e910:	b530      	push	{r4, r5, lr}
 801e912:	6802      	ldr	r2, [r0, #0]
 801e914:	4b09      	ldr	r3, [pc, #36]	; (801e93c <GUI_ALLOC_UnlockH+0x2c>)
 801e916:	f852 1c08 	ldr.w	r1, [r2, #-8]
 801e91a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e91c:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 801e920:	2c01      	cmp	r4, #1
 801e922:	d903      	bls.n	801e92c <GUI_ALLOC_UnlockH+0x1c>
 801e924:	69dd      	ldr	r5, [r3, #28]
 801e926:	b10d      	cbz	r5, 801e92c <GUI_ALLOC_UnlockH+0x1c>
 801e928:	3d01      	subs	r5, #1
 801e92a:	61dd      	str	r5, [r3, #28]
 801e92c:	3c01      	subs	r4, #1
 801e92e:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 801e932:	2300      	movs	r3, #0
 801e934:	6003      	str	r3, [r0, #0]
 801e936:	4618      	mov	r0, r3
 801e938:	bd30      	pop	{r4, r5, pc}
 801e93a:	bf00      	nop
 801e93c:	2002c5dc 	.word	0x2002c5dc

0801e940 <GUI_ALLOC_AssignMemory>:
 801e940:	4b02      	ldr	r3, [pc, #8]	; (801e94c <GUI_ALLOC_AssignMemory+0xc>)
 801e942:	f021 0103 	bic.w	r1, r1, #3
 801e946:	6018      	str	r0, [r3, #0]
 801e948:	6059      	str	r1, [r3, #4]
 801e94a:	4770      	bx	lr
 801e94c:	2002c468 	.word	0x2002c468

0801e950 <GUI_ALLOC_Free>:
 801e950:	b510      	push	{r4, lr}
 801e952:	4604      	mov	r4, r0
 801e954:	b180      	cbz	r0, 801e978 <GUI_ALLOC_Free+0x28>
 801e956:	4b09      	ldr	r3, [pc, #36]	; (801e97c <GUI_ALLOC_Free+0x2c>)
 801e958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e95a:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 801e95e:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 801e962:	2b01      	cmp	r3, #1
 801e964:	d108      	bne.n	801e978 <GUI_ALLOC_Free+0x28>
 801e966:	6851      	ldr	r1, [r2, #4]
 801e968:	6848      	ldr	r0, [r1, #4]
 801e96a:	f7ff ff11 	bl	801e790 <_AddFreeMemory>
 801e96e:	4620      	mov	r0, r4
 801e970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e974:	f7ff bebe 	b.w	801e6f4 <_PushFreeBlock>
 801e978:	bd10      	pop	{r4, pc}
 801e97a:	bf00      	nop
 801e97c:	2002c5dc 	.word	0x2002c5dc

0801e980 <_EnlargeBlocks>:
 801e980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e984:	4c22      	ldr	r4, [pc, #136]	; (801ea10 <_EnlargeBlocks+0x90>)
 801e986:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801e988:	b93b      	cbnz	r3, 801e99a <_EnlargeBlocks+0x1a>
 801e98a:	4b22      	ldr	r3, [pc, #136]	; (801ea14 <_EnlargeBlocks+0x94>)
 801e98c:	689d      	ldr	r5, [r3, #8]
 801e98e:	685b      	ldr	r3, [r3, #4]
 801e990:	3508      	adds	r5, #8
 801e992:	fbb3 f5f5 	udiv	r5, r3, r5
 801e996:	3502      	adds	r5, #2
 801e998:	e003      	b.n	801e9a2 <_EnlargeBlocks+0x22>
 801e99a:	6923      	ldr	r3, [r4, #16]
 801e99c:	1d1d      	adds	r5, r3, #4
 801e99e:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 801e9a2:	00e8      	lsls	r0, r5, #3
 801e9a4:	f000 f978 	bl	801ec98 <_Alloc>
 801e9a8:	4680      	mov	r8, r0
 801e9aa:	b360      	cbz	r0, 801ea06 <_EnlargeBlocks+0x86>
 801e9ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e9ae:	6922      	ldr	r2, [r4, #16]
 801e9b0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801e9b2:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 801e9b6:	00d2      	lsls	r2, r2, #3
 801e9b8:	685e      	ldr	r6, [r3, #4]
 801e9ba:	3608      	adds	r6, #8
 801e9bc:	4630      	mov	r0, r6
 801e9be:	f003 f921 	bl	8021c04 <memcpy>
 801e9c2:	6922      	ldr	r2, [r4, #16]
 801e9c4:	6366      	str	r6, [r4, #52]	; 0x34
 801e9c6:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 801e9ca:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 801e9ce:	3104      	adds	r1, #4
 801e9d0:	4613      	mov	r3, r2
 801e9d2:	1e68      	subs	r0, r5, #1
 801e9d4:	4283      	cmp	r3, r0
 801e9d6:	f101 0108 	add.w	r1, r1, #8
 801e9da:	d203      	bcs.n	801e9e4 <_EnlargeBlocks+0x64>
 801e9dc:	3301      	adds	r3, #1
 801e9de:	f841 3c08 	str.w	r3, [r1, #-8]
 801e9e2:	e7f6      	b.n	801e9d2 <_EnlargeBlocks+0x52>
 801e9e4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801e9e8:	2600      	movs	r6, #0
 801e9ea:	605e      	str	r6, [r3, #4]
 801e9ec:	6863      	ldr	r3, [r4, #4]
 801e9ee:	6262      	str	r2, [r4, #36]	; 0x24
 801e9f0:	1a9b      	subs	r3, r3, r2
 801e9f2:	442b      	add	r3, r5
 801e9f4:	6063      	str	r3, [r4, #4]
 801e9f6:	6125      	str	r5, [r4, #16]
 801e9f8:	4638      	mov	r0, r7
 801e9fa:	b13f      	cbz	r7, 801ea0c <_EnlargeBlocks+0x8c>
 801e9fc:	f7ff ffa8 	bl	801e950 <GUI_ALLOC_Free>
 801ea00:	4630      	mov	r0, r6
 801ea02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea06:	2001      	movs	r0, #1
 801ea08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea10:	2002c5dc 	.word	0x2002c5dc
 801ea14:	2002c468 	.word	0x2002c468

0801ea18 <_InitOnce>:
 801ea18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea1a:	4e58      	ldr	r6, [pc, #352]	; (801eb7c <_InitOnce+0x164>)
 801ea1c:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 801ea20:	2900      	cmp	r1, #0
 801ea22:	f040 80aa 	bne.w	801eb7a <_InitOnce+0x162>
 801ea26:	4d56      	ldr	r5, [pc, #344]	; (801eb80 <_InitOnce+0x168>)
 801ea28:	686a      	ldr	r2, [r5, #4]
 801ea2a:	2301      	movs	r3, #1
 801ea2c:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 801ea30:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 801ea34:	bf28      	it	cs
 801ea36:	f44f 5220 	movcs.w	r2, #10240	; 0x2800
 801ea3a:	682b      	ldr	r3, [r5, #0]
 801ea3c:	0894      	lsrs	r4, r2, #2
 801ea3e:	2000      	movs	r0, #0
 801ea40:	42a0      	cmp	r0, r4
 801ea42:	d00c      	beq.n	801ea5e <_InitOnce+0x46>
 801ea44:	1847      	adds	r7, r0, r1
 801ea46:	f04f 0eff 	mov.w	lr, #255	; 0xff
 801ea4a:	fbb7 fefe 	udiv	lr, r7, lr
 801ea4e:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 801ea52:	ebce 0707 	rsb	r7, lr, r7
 801ea56:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 801ea5a:	3001      	adds	r0, #1
 801ea5c:	e7f0      	b.n	801ea40 <_InitOnce+0x28>
 801ea5e:	2000      	movs	r0, #0
 801ea60:	42a0      	cmp	r0, r4
 801ea62:	d016      	beq.n	801ea92 <_InitOnce+0x7a>
 801ea64:	1847      	adds	r7, r0, r1
 801ea66:	f04f 0eff 	mov.w	lr, #255	; 0xff
 801ea6a:	fbb7 fefe 	udiv	lr, r7, lr
 801ea6e:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 801ea72:	ebce 0e07 	rsb	lr, lr, r7
 801ea76:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801ea7a:	4577      	cmp	r7, lr
 801ea7c:	d007      	beq.n	801ea8e <_InitOnce+0x76>
 801ea7e:	68aa      	ldr	r2, [r5, #8]
 801ea80:	4b3f      	ldr	r3, [pc, #252]	; (801eb80 <_InitOnce+0x168>)
 801ea82:	2a00      	cmp	r2, #0
 801ea84:	d155      	bne.n	801eb32 <_InitOnce+0x11a>
 801ea86:	685a      	ldr	r2, [r3, #4]
 801ea88:	0892      	lsrs	r2, r2, #2
 801ea8a:	609a      	str	r2, [r3, #8]
 801ea8c:	e051      	b.n	801eb32 <_InitOnce+0x11a>
 801ea8e:	3001      	adds	r0, #1
 801ea90:	e7e6      	b.n	801ea60 <_InitOnce+0x48>
 801ea92:	3101      	adds	r1, #1
 801ea94:	2902      	cmp	r1, #2
 801ea96:	d1d2      	bne.n	801ea3e <_InitOnce+0x26>
 801ea98:	0854      	lsrs	r4, r2, #1
 801ea9a:	2100      	movs	r1, #0
 801ea9c:	2000      	movs	r0, #0
 801ea9e:	42a0      	cmp	r0, r4
 801eaa0:	d00c      	beq.n	801eabc <_InitOnce+0xa4>
 801eaa2:	1847      	adds	r7, r0, r1
 801eaa4:	f04f 0eff 	mov.w	lr, #255	; 0xff
 801eaa8:	fbb7 fefe 	udiv	lr, r7, lr
 801eaac:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 801eab0:	ebce 0707 	rsb	r7, lr, r7
 801eab4:	f823 7010 	strh.w	r7, [r3, r0, lsl #1]
 801eab8:	3001      	adds	r0, #1
 801eaba:	e7f0      	b.n	801ea9e <_InitOnce+0x86>
 801eabc:	2000      	movs	r0, #0
 801eabe:	42a0      	cmp	r0, r4
 801eac0:	d00f      	beq.n	801eae2 <_InitOnce+0xca>
 801eac2:	1847      	adds	r7, r0, r1
 801eac4:	f04f 0eff 	mov.w	lr, #255	; 0xff
 801eac8:	fbb7 fefe 	udiv	lr, r7, lr
 801eacc:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 801ead0:	ebce 0707 	rsb	r7, lr, r7
 801ead4:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
 801ead8:	b2bf      	uxth	r7, r7
 801eada:	45bc      	cmp	ip, r7
 801eadc:	d1cf      	bne.n	801ea7e <_InitOnce+0x66>
 801eade:	3001      	adds	r0, #1
 801eae0:	e7ed      	b.n	801eabe <_InitOnce+0xa6>
 801eae2:	3101      	adds	r1, #1
 801eae4:	2902      	cmp	r1, #2
 801eae6:	d1d9      	bne.n	801ea9c <_InitOnce+0x84>
 801eae8:	2100      	movs	r1, #0
 801eaea:	2000      	movs	r0, #0
 801eaec:	4290      	cmp	r0, r2
 801eaee:	d007      	beq.n	801eb00 <_InitOnce+0xe8>
 801eaf0:	1844      	adds	r4, r0, r1
 801eaf2:	27ff      	movs	r7, #255	; 0xff
 801eaf4:	fbb4 f7f7 	udiv	r7, r4, r7
 801eaf8:	443c      	add	r4, r7
 801eafa:	541c      	strb	r4, [r3, r0]
 801eafc:	3001      	adds	r0, #1
 801eafe:	e7f5      	b.n	801eaec <_InitOnce+0xd4>
 801eb00:	2000      	movs	r0, #0
 801eb02:	4290      	cmp	r0, r2
 801eb04:	d00b      	beq.n	801eb1e <_InitOnce+0x106>
 801eb06:	1844      	adds	r4, r0, r1
 801eb08:	27ff      	movs	r7, #255	; 0xff
 801eb0a:	fbb4 f7f7 	udiv	r7, r4, r7
 801eb0e:	443c      	add	r4, r7
 801eb10:	5c1f      	ldrb	r7, [r3, r0]
 801eb12:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 801eb16:	42a7      	cmp	r7, r4
 801eb18:	d1b1      	bne.n	801ea7e <_InitOnce+0x66>
 801eb1a:	3001      	adds	r0, #1
 801eb1c:	e7f1      	b.n	801eb02 <_InitOnce+0xea>
 801eb1e:	3101      	adds	r1, #1
 801eb20:	2902      	cmp	r1, #2
 801eb22:	d1e2      	bne.n	801eaea <_InitOnce+0xd2>
 801eb24:	2100      	movs	r1, #0
 801eb26:	4291      	cmp	r1, r2
 801eb28:	d0a9      	beq.n	801ea7e <_InitOnce+0x66>
 801eb2a:	2000      	movs	r0, #0
 801eb2c:	5458      	strb	r0, [r3, r1]
 801eb2e:	3101      	adds	r1, #1
 801eb30:	e7f9      	b.n	801eb26 <_InitOnce+0x10e>
 801eb32:	4814      	ldr	r0, [pc, #80]	; (801eb84 <_InitOnce+0x16c>)
 801eb34:	4b14      	ldr	r3, [pc, #80]	; (801eb88 <_InitOnce+0x170>)
 801eb36:	6003      	str	r3, [r0, #0]
 801eb38:	f7ff f9b4 	bl	801dea4 <GUI__RegisterExit>
 801eb3c:	235a      	movs	r3, #90	; 0x5a
 801eb3e:	6233      	str	r3, [r6, #32]
 801eb40:	2300      	movs	r3, #0
 801eb42:	2110      	movs	r1, #16
 801eb44:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801eb48:	4099      	lsls	r1, r3
 801eb4a:	3301      	adds	r3, #1
 801eb4c:	2b10      	cmp	r3, #16
 801eb4e:	4c0b      	ldr	r4, [pc, #44]	; (801eb7c <_InitOnce+0x164>)
 801eb50:	6411      	str	r1, [r2, #64]	; 0x40
 801eb52:	d1f6      	bne.n	801eb42 <_InitOnce+0x12a>
 801eb54:	6868      	ldr	r0, [r5, #4]
 801eb56:	6829      	ldr	r1, [r5, #0]
 801eb58:	63a1      	str	r1, [r4, #56]	; 0x38
 801eb5a:	2302      	movs	r3, #2
 801eb5c:	6123      	str	r3, [r4, #16]
 801eb5e:	f1a0 0314 	sub.w	r3, r0, #20
 801eb62:	440b      	add	r3, r1
 801eb64:	2501      	movs	r5, #1
 801eb66:	6363      	str	r3, [r4, #52]	; 0x34
 801eb68:	60e0      	str	r0, [r4, #12]
 801eb6a:	605d      	str	r5, [r3, #4]
 801eb6c:	6265      	str	r5, [r4, #36]	; 0x24
 801eb6e:	6065      	str	r5, [r4, #4]
 801eb70:	f7ff fe0e 	bl	801e790 <_AddFreeMemory>
 801eb74:	f7ff ff04 	bl	801e980 <_EnlargeBlocks>
 801eb78:	6325      	str	r5, [r4, #48]	; 0x30
 801eb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eb7c:	2002c5dc 	.word	0x2002c5dc
 801eb80:	2002c468 	.word	0x2002c468
 801eb84:	2002c474 	.word	0x2002c474
 801eb88:	0801e719 	.word	0x0801e719

0801eb8c <GUI_ALLOC_GetFixedBlock>:
 801eb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb90:	4605      	mov	r5, r0
 801eb92:	4e26      	ldr	r6, [pc, #152]	; (801ec2c <GUI_ALLOC_GetFixedBlock+0xa0>)
 801eb94:	3503      	adds	r5, #3
 801eb96:	f7ff ff3f 	bl	801ea18 <_InitOnce>
 801eb9a:	f025 0503 	bic.w	r5, r5, #3
 801eb9e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 801eba0:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801eba2:	3504      	adds	r5, #4
 801eba4:	429d      	cmp	r5, r3
 801eba6:	bf38      	it	cc
 801eba8:	461d      	movcc	r5, r3
 801ebaa:	4614      	mov	r4, r2
 801ebac:	b12c      	cbz	r4, 801ebba <GUI_ALLOC_GetFixedBlock+0x2e>
 801ebae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801ebb2:	42ab      	cmp	r3, r5
 801ebb4:	d02c      	beq.n	801ec10 <GUI_ALLOC_GetFixedBlock+0x84>
 801ebb6:	6824      	ldr	r4, [r4, #0]
 801ebb8:	e7f8      	b.n	801ebac <GUI_ALLOC_GetFixedBlock+0x20>
 801ebba:	68f3      	ldr	r3, [r6, #12]
 801ebbc:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 801ebbe:	eb02 0803 	add.w	r8, r2, r3
 801ebc2:	f858 7c04 	ldr.w	r7, [r8, #-4]
 801ebc6:	ebc7 0708 	rsb	r7, r7, r8
 801ebca:	683b      	ldr	r3, [r7, #0]
 801ebcc:	b133      	cbz	r3, 801ebdc <GUI_ALLOC_GetFixedBlock+0x50>
 801ebce:	4620      	mov	r0, r4
 801ebd0:	f7ff fe2e 	bl	801e830 <_RemoveHoles>
 801ebd4:	f858 7c04 	ldr.w	r7, [r8, #-4]
 801ebd8:	ebc7 0708 	rsb	r7, r7, r8
 801ebdc:	683b      	ldr	r3, [r7, #0]
 801ebde:	bb13      	cbnz	r3, 801ec26 <GUI_ALLOC_GetFixedBlock+0x9a>
 801ebe0:	687b      	ldr	r3, [r7, #4]
 801ebe2:	42ab      	cmp	r3, r5
 801ebe4:	db1f      	blt.n	801ec26 <GUI_ALLOC_GetFixedBlock+0x9a>
 801ebe6:	4638      	mov	r0, r7
 801ebe8:	1d1c      	adds	r4, r3, #4
 801ebea:	f7ff fdb1 	bl	801e750 <_RemoveFreeBlock>
 801ebee:	68f3      	ldr	r3, [r6, #12]
 801ebf0:	6878      	ldr	r0, [r7, #4]
 801ebf2:	1b5b      	subs	r3, r3, r5
 801ebf4:	60f3      	str	r3, [r6, #12]
 801ebf6:	6973      	ldr	r3, [r6, #20]
 801ebf8:	1b64      	subs	r4, r4, r5
 801ebfa:	442b      	add	r3, r5
 801ebfc:	1b40      	subs	r0, r0, r5
 801ebfe:	443c      	add	r4, r7
 801ec00:	6173      	str	r3, [r6, #20]
 801ec02:	d002      	beq.n	801ec0a <GUI_ALLOC_GetFixedBlock+0x7e>
 801ec04:	4639      	mov	r1, r7
 801ec06:	f7ff fdc3 	bl	801e790 <_AddFreeMemory>
 801ec0a:	f844 5c04 	str.w	r5, [r4, #-4]
 801ec0e:	e00a      	b.n	801ec26 <GUI_ALLOC_GetFixedBlock+0x9a>
 801ec10:	6823      	ldr	r3, [r4, #0]
 801ec12:	b10b      	cbz	r3, 801ec18 <GUI_ALLOC_GetFixedBlock+0x8c>
 801ec14:	6861      	ldr	r1, [r4, #4]
 801ec16:	6059      	str	r1, [r3, #4]
 801ec18:	6861      	ldr	r1, [r4, #4]
 801ec1a:	b101      	cbz	r1, 801ec1e <GUI_ALLOC_GetFixedBlock+0x92>
 801ec1c:	600b      	str	r3, [r1, #0]
 801ec1e:	42a2      	cmp	r2, r4
 801ec20:	d101      	bne.n	801ec26 <GUI_ALLOC_GetFixedBlock+0x9a>
 801ec22:	6823      	ldr	r3, [r4, #0]
 801ec24:	63f3      	str	r3, [r6, #60]	; 0x3c
 801ec26:	4620      	mov	r0, r4
 801ec28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ec2c:	2002c5dc 	.word	0x2002c5dc

0801ec30 <GUI_ALLOC_GetMaxSize>:
 801ec30:	b508      	push	{r3, lr}
 801ec32:	f7ff fef1 	bl	801ea18 <_InitOnce>
 801ec36:	2200      	movs	r2, #0
 801ec38:	4b0b      	ldr	r3, [pc, #44]	; (801ec68 <GUI_ALLOC_GetMaxSize+0x38>)
 801ec3a:	4413      	add	r3, r2
 801ec3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801ec40:	b113      	cbz	r3, 801ec48 <GUI_ALLOC_GetMaxSize+0x18>
 801ec42:	689b      	ldr	r3, [r3, #8]
 801ec44:	2000      	movs	r0, #0
 801ec46:	e00b      	b.n	801ec60 <GUI_ALLOC_GetMaxSize+0x30>
 801ec48:	3a08      	subs	r2, #8
 801ec4a:	f112 0f80 	cmn.w	r2, #128	; 0x80
 801ec4e:	d1f3      	bne.n	801ec38 <GUI_ALLOC_GetMaxSize+0x8>
 801ec50:	e7f8      	b.n	801ec44 <GUI_ALLOC_GetMaxSize+0x14>
 801ec52:	685a      	ldr	r2, [r3, #4]
 801ec54:	689b      	ldr	r3, [r3, #8]
 801ec56:	4290      	cmp	r0, r2
 801ec58:	bf38      	it	cc
 801ec5a:	4610      	movcc	r0, r2
 801ec5c:	b113      	cbz	r3, 801ec64 <GUI_ALLOC_GetMaxSize+0x34>
 801ec5e:	689b      	ldr	r3, [r3, #8]
 801ec60:	2b00      	cmp	r3, #0
 801ec62:	d1f6      	bne.n	801ec52 <GUI_ALLOC_GetMaxSize+0x22>
 801ec64:	380c      	subs	r0, #12
 801ec66:	bd08      	pop	{r3, pc}
 801ec68:	2002c5dc 	.word	0x2002c5dc

0801ec6c <GUI_ALLOC_RequestSize>:
 801ec6c:	b508      	push	{r3, lr}
 801ec6e:	f7ff ffdf 	bl	801ec30 <GUI_ALLOC_GetMaxSize>
 801ec72:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 801ec76:	f04f 0364 	mov.w	r3, #100	; 0x64
 801ec7a:	4a06      	ldr	r2, [pc, #24]	; (801ec94 <GUI_ALLOC_RequestSize+0x28>)
 801ec7c:	d904      	bls.n	801ec88 <GUI_ALLOC_RequestSize+0x1c>
 801ec7e:	fb90 f0f3 	sdiv	r0, r0, r3
 801ec82:	6a13      	ldr	r3, [r2, #32]
 801ec84:	4358      	muls	r0, r3
 801ec86:	bd08      	pop	{r3, pc}
 801ec88:	6a12      	ldr	r2, [r2, #32]
 801ec8a:	4350      	muls	r0, r2
 801ec8c:	fbb0 f0f3 	udiv	r0, r0, r3
 801ec90:	bd08      	pop	{r3, pc}
 801ec92:	bf00      	nop
 801ec94:	2002c5dc 	.word	0x2002c5dc

0801ec98 <_Alloc>:
 801ec98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ec9c:	4d38      	ldr	r5, [pc, #224]	; (801ed80 <_Alloc+0xe8>)
 801ec9e:	4604      	mov	r4, r0
 801eca0:	f7ff feba 	bl	801ea18 <_InitOnce>
 801eca4:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 801eca6:	682b      	ldr	r3, [r5, #0]
 801eca8:	42bc      	cmp	r4, r7
 801ecaa:	bf24      	itt	cs
 801ecac:	1ce7      	addcs	r7, r4, #3
 801ecae:	f027 0703 	biccs.w	r7, r7, #3
 801ecb2:	370c      	adds	r7, #12
 801ecb4:	429f      	cmp	r7, r3
 801ecb6:	4c32      	ldr	r4, [pc, #200]	; (801ed80 <_Alloc+0xe8>)
 801ecb8:	d83e      	bhi.n	801ed38 <_Alloc+0xa0>
 801ecba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801ecbc:	6862      	ldr	r2, [r4, #4]
 801ecbe:	429a      	cmp	r2, r3
 801ecc0:	d90f      	bls.n	801ece2 <_Alloc+0x4a>
 801ecc2:	686b      	ldr	r3, [r5, #4]
 801ecc4:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 801ecc6:	3b01      	subs	r3, #1
 801ecc8:	606b      	str	r3, [r5, #4]
 801ecca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801eccc:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 801ecd0:	eb03 0209 	add.w	r2, r3, r9
 801ecd4:	6852      	ldr	r2, [r2, #4]
 801ecd6:	626a      	str	r2, [r5, #36]	; 0x24
 801ecd8:	2201      	movs	r2, #1
 801ecda:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 801ecde:	b956      	cbnz	r6, 801ecf6 <_Alloc+0x5e>
 801ece0:	e02a      	b.n	801ed38 <_Alloc+0xa0>
 801ece2:	3b01      	subs	r3, #1
 801ece4:	6323      	str	r3, [r4, #48]	; 0x30
 801ece6:	f7ff fe4b 	bl	801e980 <_EnlargeBlocks>
 801ecea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801ecec:	3301      	adds	r3, #1
 801ecee:	6323      	str	r3, [r4, #48]	; 0x30
 801ecf0:	2800      	cmp	r0, #0
 801ecf2:	d0e6      	beq.n	801ecc2 <_Alloc+0x2a>
 801ecf4:	e020      	b.n	801ed38 <_Alloc+0xa0>
 801ecf6:	230f      	movs	r3, #15
 801ecf8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801ecfc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801ecfe:	4297      	cmp	r7, r2
 801ed00:	d20c      	bcs.n	801ed1c <_Alloc+0x84>
 801ed02:	f113 33ff 	adds.w	r3, r3, #4294967295
 801ed06:	d2f7      	bcs.n	801ecf8 <_Alloc+0x60>
 801ed08:	e008      	b.n	801ed1c <_Alloc+0x84>
 801ed0a:	6894      	ldr	r4, [r2, #8]
 801ed0c:	b12c      	cbz	r4, 801ed1a <_Alloc+0x82>
 801ed0e:	6862      	ldr	r2, [r4, #4]
 801ed10:	4297      	cmp	r7, r2
 801ed12:	d914      	bls.n	801ed3e <_Alloc+0xa6>
 801ed14:	68a2      	ldr	r2, [r4, #8]
 801ed16:	2a00      	cmp	r2, #0
 801ed18:	d1f7      	bne.n	801ed0a <_Alloc+0x72>
 801ed1a:	3301      	adds	r3, #1
 801ed1c:	2b0f      	cmp	r3, #15
 801ed1e:	d803      	bhi.n	801ed28 <_Alloc+0x90>
 801ed20:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801ed24:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801ed26:	e7f6      	b.n	801ed16 <_Alloc+0x7e>
 801ed28:	4638      	mov	r0, r7
 801ed2a:	f7ff fd81 	bl	801e830 <_RemoveHoles>
 801ed2e:	2800      	cmp	r0, #0
 801ed30:	d0e1      	beq.n	801ecf6 <_Alloc+0x5e>
 801ed32:	4630      	mov	r0, r6
 801ed34:	f7ff fcde 	bl	801e6f4 <_PushFreeBlock>
 801ed38:	2000      	movs	r0, #0
 801ed3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ed3e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801ed42:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 801ed44:	ebc7 0208 	rsb	r2, r7, r8
 801ed48:	330c      	adds	r3, #12
 801ed4a:	4620      	mov	r0, r4
 801ed4c:	429a      	cmp	r2, r3
 801ed4e:	bf38      	it	cc
 801ed50:	4647      	movcc	r7, r8
 801ed52:	f7ff fcfd 	bl	801e750 <_RemoveFreeBlock>
 801ed56:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801ed58:	444b      	add	r3, r9
 801ed5a:	19e1      	adds	r1, r4, r7
 801ed5c:	605c      	str	r4, [r3, #4]
 801ed5e:	45b8      	cmp	r8, r7
 801ed60:	f04f 0300 	mov.w	r3, #0
 801ed64:	e884 00c0 	stmia.w	r4, {r6, r7}
 801ed68:	60a3      	str	r3, [r4, #8]
 801ed6a:	6124      	str	r4, [r4, #16]
 801ed6c:	f841 7c04 	str.w	r7, [r1, #-4]
 801ed70:	dd03      	ble.n	801ed7a <_Alloc+0xe2>
 801ed72:	ebc7 0008 	rsb	r0, r7, r8
 801ed76:	f7ff fd0b 	bl	801e790 <_AddFreeMemory>
 801ed7a:	4630      	mov	r0, r6
 801ed7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ed80:	2002c5dc 	.word	0x2002c5dc

0801ed84 <GUI_ALLOC_AllocNoInit>:
 801ed84:	b108      	cbz	r0, 801ed8a <GUI_ALLOC_AllocNoInit+0x6>
 801ed86:	f7ff bf87 	b.w	801ec98 <_Alloc>
 801ed8a:	4770      	bx	lr

0801ed8c <GUI_AddDecShift>:
 801ed8c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801ed90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ed92:	681c      	ldr	r4, [r3, #0]
 801ed94:	d109      	bne.n	801edaa <GUI_AddDecShift+0x1e>
 801ed96:	1c60      	adds	r0, r4, #1
 801ed98:	6018      	str	r0, [r3, #0]
 801ed9a:	3901      	subs	r1, #1
 801ed9c:	202d      	movs	r0, #45	; 0x2d
 801ed9e:	7020      	strb	r0, [r4, #0]
 801eda0:	b2c9      	uxtb	r1, r1
 801eda2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801eda6:	2601      	movs	r6, #1
 801eda8:	e00c      	b.n	801edc4 <GUI_AddDecShift+0x38>
 801edaa:	2800      	cmp	r0, #0
 801edac:	da06      	bge.n	801edbc <GUI_AddDecShift+0x30>
 801edae:	1c65      	adds	r5, r4, #1
 801edb0:	601d      	str	r5, [r3, #0]
 801edb2:	252d      	movs	r5, #45	; 0x2d
 801edb4:	7025      	strb	r5, [r4, #0]
 801edb6:	4240      	negs	r0, r0
 801edb8:	2401      	movs	r4, #1
 801edba:	e000      	b.n	801edbe <GUI_AddDecShift+0x32>
 801edbc:	2400      	movs	r4, #0
 801edbe:	1b09      	subs	r1, r1, r4
 801edc0:	b2c9      	uxtb	r1, r1
 801edc2:	2600      	movs	r6, #0
 801edc4:	b30a      	cbz	r2, 801ee0a <GUI_AddDecShift+0x7e>
 801edc6:	3901      	subs	r1, #1
 801edc8:	b2c9      	uxtb	r1, r1
 801edca:	e01e      	b.n	801ee0a <GUI_AddDecShift+0x7e>
 801edcc:	1e4d      	subs	r5, r1, #1
 801edce:	4291      	cmp	r1, r2
 801edd0:	b2ed      	uxtb	r5, r5
 801edd2:	d105      	bne.n	801ede0 <GUI_AddDecShift+0x54>
 801edd4:	681c      	ldr	r4, [r3, #0]
 801edd6:	1c67      	adds	r7, r4, #1
 801edd8:	601f      	str	r7, [r3, #0]
 801edda:	4f11      	ldr	r7, [pc, #68]	; (801ee20 <GUI_AddDecShift+0x94>)
 801eddc:	783f      	ldrb	r7, [r7, #0]
 801edde:	7027      	strb	r7, [r4, #0]
 801ede0:	4c10      	ldr	r4, [pc, #64]	; (801ee24 <GUI_AddDecShift+0x98>)
 801ede2:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
 801ede6:	fb90 f4f7 	sdiv	r4, r0, r7
 801edea:	b2e4      	uxtb	r4, r4
 801edec:	2c0a      	cmp	r4, #10
 801edee:	d80e      	bhi.n	801ee0e <GUI_AddDecShift+0x82>
 801edf0:	fb07 0014 	mls	r0, r7, r4, r0
 801edf4:	b17d      	cbz	r5, 801ee16 <GUI_AddDecShift+0x8a>
 801edf6:	2c0a      	cmp	r4, #10
 801edf8:	bf18      	it	ne
 801edfa:	4629      	movne	r1, r5
 801edfc:	681d      	ldr	r5, [r3, #0]
 801edfe:	bf08      	it	eq
 801ee00:	2401      	moveq	r4, #1
 801ee02:	1c6f      	adds	r7, r5, #1
 801ee04:	3430      	adds	r4, #48	; 0x30
 801ee06:	601f      	str	r7, [r3, #0]
 801ee08:	702c      	strb	r4, [r5, #0]
 801ee0a:	2900      	cmp	r1, #0
 801ee0c:	d1de      	bne.n	801edcc <GUI_AddDecShift+0x40>
 801ee0e:	681b      	ldr	r3, [r3, #0]
 801ee10:	2200      	movs	r2, #0
 801ee12:	701a      	strb	r2, [r3, #0]
 801ee14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ee16:	2e00      	cmp	r6, #0
 801ee18:	d0ed      	beq.n	801edf6 <GUI_AddDecShift+0x6a>
 801ee1a:	3401      	adds	r4, #1
 801ee1c:	b2e4      	uxtb	r4, r4
 801ee1e:	e7ea      	b.n	801edf6 <GUI_AddDecShift+0x6a>
 801ee20:	2002c59e 	.word	0x2002c59e
 801ee24:	0812e03c 	.word	0x0812e03c

0801ee28 <GUI_ALLOC_AllocZero>:
 801ee28:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ee2a:	4605      	mov	r5, r0
 801ee2c:	f7ff ffaa 	bl	801ed84 <GUI_ALLOC_AllocNoInit>
 801ee30:	4606      	mov	r6, r0
 801ee32:	b158      	cbz	r0, 801ee4c <GUI_ALLOC_AllocZero+0x24>
 801ee34:	f7ff fd5e 	bl	801e8f4 <GUI_ALLOC_LockH>
 801ee38:	ac02      	add	r4, sp, #8
 801ee3a:	2100      	movs	r1, #0
 801ee3c:	f844 0d04 	str.w	r0, [r4, #-4]!
 801ee40:	462a      	mov	r2, r5
 801ee42:	f7fd fbdd 	bl	801c600 <GUI__memset>
 801ee46:	4620      	mov	r0, r4
 801ee48:	f7ff fd62 	bl	801e910 <GUI_ALLOC_UnlockH>
 801ee4c:	4630      	mov	r0, r6
 801ee4e:	b002      	add	sp, #8
 801ee50:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ee54 <GUI_DrawRect>:
 801ee54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ee58:	4c1e      	ldr	r4, [pc, #120]	; (801eed4 <GUI_DrawRect+0x80>)
 801ee5a:	f8d4 e000 	ldr.w	lr, [r4]
 801ee5e:	f8de 404c 	ldr.w	r4, [lr, #76]	; 0x4c
 801ee62:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
 801ee66:	1905      	adds	r5, r0, r4
 801ee68:	4414      	add	r4, r2
 801ee6a:	f89e 2018 	ldrb.w	r2, [lr, #24]
 801ee6e:	3a01      	subs	r2, #1
 801ee70:	b292      	uxth	r2, r2
 801ee72:	198f      	adds	r7, r1, r6
 801ee74:	441e      	add	r6, r3
 801ee76:	1aab      	subs	r3, r5, r2
 801ee78:	f8ad 3000 	strh.w	r3, [sp]
 801ee7c:	1913      	adds	r3, r2, r4
 801ee7e:	f8ad 3004 	strh.w	r3, [sp, #4]
 801ee82:	4668      	mov	r0, sp
 801ee84:	1abb      	subs	r3, r7, r2
 801ee86:	4432      	add	r2, r6
 801ee88:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ee8c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ee90:	f7fa fdc4 	bl	8019a1c <WM__InitIVRSearch>
 801ee94:	b1d0      	cbz	r0, 801eecc <GUI_DrawRect+0x78>
 801ee96:	4628      	mov	r0, r5
 801ee98:	4639      	mov	r1, r7
 801ee9a:	4622      	mov	r2, r4
 801ee9c:	f7fd f88e 	bl	801bfbc <LCD_DrawHLine>
 801eea0:	f107 0901 	add.w	r9, r7, #1
 801eea4:	4628      	mov	r0, r5
 801eea6:	4631      	mov	r1, r6
 801eea8:	4622      	mov	r2, r4
 801eeaa:	f106 38ff 	add.w	r8, r6, #4294967295
 801eeae:	f7fd f885 	bl	801bfbc <LCD_DrawHLine>
 801eeb2:	4628      	mov	r0, r5
 801eeb4:	4649      	mov	r1, r9
 801eeb6:	4642      	mov	r2, r8
 801eeb8:	f7fd f8a6 	bl	801c008 <LCD_DrawVLine>
 801eebc:	4620      	mov	r0, r4
 801eebe:	4649      	mov	r1, r9
 801eec0:	4642      	mov	r2, r8
 801eec2:	f7fd f8a1 	bl	801c008 <LCD_DrawVLine>
 801eec6:	f7fa fce7 	bl	8019898 <WM__GetNextIVR>
 801eeca:	e7e3      	b.n	801ee94 <GUI_DrawRect+0x40>
 801eecc:	b003      	add	sp, #12
 801eece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eed2:	bf00      	nop
 801eed4:	20000114 	.word	0x20000114

0801eed8 <LCD_Index2Color_M8888I>:
 801eed8:	43c3      	mvns	r3, r0
 801eeda:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801eede:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801eee2:	4313      	orrs	r3, r2
 801eee4:	b2c2      	uxtb	r2, r0
 801eee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801eeea:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801eeee:	4318      	orrs	r0, r3
 801eef0:	4770      	bx	lr

0801eef2 <LCD_Index2Color_888>:
 801eef2:	4770      	bx	lr

0801eef4 <LCD_Index2Color_8888>:
 801eef4:	4770      	bx	lr

0801eef6 <_Color2Index_8888>:
 801eef6:	4770      	bx	lr

0801eef8 <_GetIndexMask_8888>:
 801eef8:	f04f 30ff 	mov.w	r0, #4294967295
 801eefc:	4770      	bx	lr

0801eefe <_Color2IndexBulk>:
 801eefe:	b510      	push	{r4, lr}
 801ef00:	f850 4b04 	ldr.w	r4, [r0], #4
 801ef04:	600c      	str	r4, [r1, #0]
 801ef06:	3a01      	subs	r2, #1
 801ef08:	4419      	add	r1, r3
 801ef0a:	d1f9      	bne.n	801ef00 <_Color2IndexBulk+0x2>
 801ef0c:	bd10      	pop	{r4, pc}

0801ef0e <_Index2ColorBulk>:
 801ef0e:	b510      	push	{r4, lr}
 801ef10:	6804      	ldr	r4, [r0, #0]
 801ef12:	f841 4b04 	str.w	r4, [r1], #4
 801ef16:	3a01      	subs	r2, #1
 801ef18:	4418      	add	r0, r3
 801ef1a:	d1f9      	bne.n	801ef10 <_Index2ColorBulk+0x2>
 801ef1c:	bd10      	pop	{r4, pc}

0801ef1e <_Color2Index_M8888I>:
 801ef1e:	43c3      	mvns	r3, r0
 801ef20:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801ef24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801ef28:	4313      	orrs	r3, r2
 801ef2a:	b2c2      	uxtb	r2, r0
 801ef2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ef30:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ef34:	4318      	orrs	r0, r3
 801ef36:	4770      	bx	lr

0801ef38 <_GetIndexMask_M8888I>:
 801ef38:	f04f 30ff 	mov.w	r0, #4294967295
 801ef3c:	4770      	bx	lr
	...

0801ef40 <_Color2IndexBulk_M8888I>:
 801ef40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef42:	4c0e      	ldr	r4, [pc, #56]	; (801ef7c <_Color2IndexBulk_M8888I+0x3c>)
 801ef44:	6824      	ldr	r4, [r4, #0]
 801ef46:	4607      	mov	r7, r0
 801ef48:	460e      	mov	r6, r1
 801ef4a:	4615      	mov	r5, r2
 801ef4c:	469c      	mov	ip, r3
 801ef4e:	b10c      	cbz	r4, 801ef54 <_Color2IndexBulk_M8888I+0x14>
 801ef50:	47a0      	blx	r4
 801ef52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef54:	f857 4b04 	ldr.w	r4, [r7], #4
 801ef58:	43e3      	mvns	r3, r4
 801ef5a:	f3c4 4207 	ubfx	r2, r4, #16, #8
 801ef5e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801ef62:	4313      	orrs	r3, r2
 801ef64:	b2e2      	uxtb	r2, r4
 801ef66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ef6a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801ef6e:	431c      	orrs	r4, r3
 801ef70:	3d01      	subs	r5, #1
 801ef72:	6034      	str	r4, [r6, #0]
 801ef74:	4466      	add	r6, ip
 801ef76:	d1ed      	bne.n	801ef54 <_Color2IndexBulk_M8888I+0x14>
 801ef78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef7a:	bf00      	nop
 801ef7c:	2002c480 	.word	0x2002c480

0801ef80 <_Index2ColorBulk_M8888I>:
 801ef80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef82:	4c0e      	ldr	r4, [pc, #56]	; (801efbc <_Index2ColorBulk_M8888I+0x3c>)
 801ef84:	6824      	ldr	r4, [r4, #0]
 801ef86:	4606      	mov	r6, r0
 801ef88:	460f      	mov	r7, r1
 801ef8a:	4615      	mov	r5, r2
 801ef8c:	469c      	mov	ip, r3
 801ef8e:	b10c      	cbz	r4, 801ef94 <_Index2ColorBulk_M8888I+0x14>
 801ef90:	47a0      	blx	r4
 801ef92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef94:	6834      	ldr	r4, [r6, #0]
 801ef96:	43e3      	mvns	r3, r4
 801ef98:	f3c4 4207 	ubfx	r2, r4, #16, #8
 801ef9c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801efa0:	4313      	orrs	r3, r2
 801efa2:	b2e2      	uxtb	r2, r4
 801efa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801efa8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801efac:	431c      	orrs	r4, r3
 801efae:	3d01      	subs	r5, #1
 801efb0:	f847 4b04 	str.w	r4, [r7], #4
 801efb4:	4466      	add	r6, ip
 801efb6:	d1ed      	bne.n	801ef94 <_Index2ColorBulk_M8888I+0x14>
 801efb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801efba:	bf00      	nop
 801efbc:	2002c47c 	.word	0x2002c47c

0801efc0 <_CalcClipRectHL>:
 801efc0:	4b0b      	ldr	r3, [pc, #44]	; (801eff0 <_CalcClipRectHL+0x30>)
 801efc2:	490c      	ldr	r1, [pc, #48]	; (801eff4 <_CalcClipRectHL+0x34>)
 801efc4:	681a      	ldr	r2, [r3, #0]
 801efc6:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 801efca:	8910      	ldrh	r0, [r2, #8]
 801efcc:	4358      	muls	r0, r3
 801efce:	8008      	strh	r0, [r1, #0]
 801efd0:	8950      	ldrh	r0, [r2, #10]
 801efd2:	4358      	muls	r0, r3
 801efd4:	8048      	strh	r0, [r1, #2]
 801efd6:	f9b2 000c 	ldrsh.w	r0, [r2, #12]
 801efda:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 801efde:	fb00 3003 	mla	r0, r0, r3, r3
 801efe2:	fb02 3303 	mla	r3, r2, r3, r3
 801efe6:	3801      	subs	r0, #1
 801efe8:	3b01      	subs	r3, #1
 801efea:	8088      	strh	r0, [r1, #4]
 801efec:	80cb      	strh	r3, [r1, #6]
 801efee:	4770      	bx	lr
 801eff0:	20000114 	.word	0x20000114
 801eff4:	2002c4b4 	.word	0x2002c4b4

0801eff8 <_OnExit>:
 801eff8:	b510      	push	{r4, lr}
 801effa:	4c03      	ldr	r4, [pc, #12]	; (801f008 <_OnExit+0x10>)
 801effc:	6820      	ldr	r0, [r4, #0]
 801effe:	f7ff fc65 	bl	801e8cc <GUI_ALLOC_FreeFixedBlock>
 801f002:	2300      	movs	r3, #0
 801f004:	6023      	str	r3, [r4, #0]
 801f006:	bd10      	pop	{r4, pc}
 801f008:	2002c4ac 	.word	0x2002c4ac

0801f00c <_CleanLine>:
 801f00c:	b508      	push	{r3, lr}
 801f00e:	4b0a      	ldr	r3, [pc, #40]	; (801f038 <_CleanLine+0x2c>)
 801f010:	681a      	ldr	r2, [r3, #0]
 801f012:	4b0a      	ldr	r3, [pc, #40]	; (801f03c <_CleanLine+0x30>)
 801f014:	681b      	ldr	r3, [r3, #0]
 801f016:	1ad2      	subs	r2, r2, r3
 801f018:	4b09      	ldr	r3, [pc, #36]	; (801f040 <_CleanLine+0x34>)
 801f01a:	2100      	movs	r1, #0
 801f01c:	6818      	ldr	r0, [r3, #0]
 801f01e:	3201      	adds	r2, #1
 801f020:	f7fd faee 	bl	801c600 <GUI__memset>
 801f024:	4a07      	ldr	r2, [pc, #28]	; (801f044 <_CleanLine+0x38>)
 801f026:	4b08      	ldr	r3, [pc, #32]	; (801f048 <_CleanLine+0x3c>)
 801f028:	6013      	str	r3, [r2, #0]
 801f02a:	4a08      	ldr	r2, [pc, #32]	; (801f04c <_CleanLine+0x40>)
 801f02c:	f643 71ff 	movw	r1, #16383	; 0x3fff
 801f030:	6011      	str	r1, [r2, #0]
 801f032:	4a07      	ldr	r2, [pc, #28]	; (801f050 <_CleanLine+0x44>)
 801f034:	6013      	str	r3, [r2, #0]
 801f036:	bd08      	pop	{r3, pc}
 801f038:	2002c49c 	.word	0x2002c49c
 801f03c:	2002c498 	.word	0x2002c498
 801f040:	2002c4a8 	.word	0x2002c4a8
 801f044:	2002c4a0 	.word	0x2002c4a0
 801f048:	ffffc001 	.word	0xffffc001
 801f04c:	2002c4bc 	.word	0x2002c4bc
 801f050:	2002c4a4 	.word	0x2002c4a4

0801f054 <_FlushLine>:
 801f054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f058:	4b2c      	ldr	r3, [pc, #176]	; (801f10c <_FlushLine+0xb8>)
 801f05a:	4c2d      	ldr	r4, [pc, #180]	; (801f110 <_FlushLine+0xbc>)
 801f05c:	492d      	ldr	r1, [pc, #180]	; (801f114 <_FlushLine+0xc0>)
 801f05e:	681e      	ldr	r6, [r3, #0]
 801f060:	482d      	ldr	r0, [pc, #180]	; (801f118 <_FlushLine+0xc4>)
 801f062:	6822      	ldr	r2, [r4, #0]
 801f064:	6809      	ldr	r1, [r1, #0]
 801f066:	6803      	ldr	r3, [r0, #0]
 801f068:	1ab6      	subs	r6, r6, r2
 801f06a:	42b1      	cmp	r1, r6
 801f06c:	f893 7068 	ldrb.w	r7, [r3, #104]	; 0x68
 801f070:	bfd8      	it	le
 801f072:	f101 36ff 	addle.w	r6, r1, #4294967295
 801f076:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801f078:	fb17 f707 	smulbb	r7, r7, r7
 801f07c:	46a0      	mov	r8, r4
 801f07e:	4681      	mov	r9, r0
 801f080:	b909      	cbnz	r1, 801f086 <_FlushLine+0x32>
 801f082:	4926      	ldr	r1, [pc, #152]	; (801f11c <_FlushLine+0xc8>)
 801f084:	66d9      	str	r1, [r3, #108]	; 0x6c
 801f086:	4b26      	ldr	r3, [pc, #152]	; (801f120 <_FlushLine+0xcc>)
 801f088:	681c      	ldr	r4, [r3, #0]
 801f08a:	ea4f 0a67 	mov.w	sl, r7, asr #1
 801f08e:	1aa4      	subs	r4, r4, r2
 801f090:	42b4      	cmp	r4, r6
 801f092:	dc36      	bgt.n	801f102 <_FlushLine+0xae>
 801f094:	4b23      	ldr	r3, [pc, #140]	; (801f124 <_FlushLine+0xd0>)
 801f096:	681a      	ldr	r2, [r3, #0]
 801f098:	5d13      	ldrb	r3, [r2, r4]
 801f09a:	b383      	cbz	r3, 801f0fe <_FlushLine+0xaa>
 801f09c:	42bb      	cmp	r3, r7
 801f09e:	d121      	bne.n	801f0e4 <_FlushLine+0x90>
 801f0a0:	4625      	mov	r5, r4
 801f0a2:	42b5      	cmp	r5, r6
 801f0a4:	d003      	beq.n	801f0ae <_FlushLine+0x5a>
 801f0a6:	1953      	adds	r3, r2, r5
 801f0a8:	785b      	ldrb	r3, [r3, #1]
 801f0aa:	42bb      	cmp	r3, r7
 801f0ac:	d00e      	beq.n	801f0cc <_FlushLine+0x78>
 801f0ae:	42a5      	cmp	r5, r4
 801f0b0:	4b1d      	ldr	r3, [pc, #116]	; (801f128 <_FlushLine+0xd4>)
 801f0b2:	d00d      	beq.n	801f0d0 <_FlushLine+0x7c>
 801f0b4:	491d      	ldr	r1, [pc, #116]	; (801f12c <_FlushLine+0xd8>)
 801f0b6:	f8d8 2000 	ldr.w	r2, [r8]
 801f0ba:	6809      	ldr	r1, [r1, #0]
 801f0bc:	1910      	adds	r0, r2, r4
 801f0be:	f8d1 c000 	ldr.w	ip, [r1]
 801f0c2:	6819      	ldr	r1, [r3, #0]
 801f0c4:	442a      	add	r2, r5
 801f0c6:	47e0      	blx	ip
 801f0c8:	462c      	mov	r4, r5
 801f0ca:	e018      	b.n	801f0fe <_FlushLine+0xaa>
 801f0cc:	3501      	adds	r5, #1
 801f0ce:	e7e8      	b.n	801f0a2 <_FlushLine+0x4e>
 801f0d0:	f8d9 2000 	ldr.w	r2, [r9]
 801f0d4:	f8d8 0000 	ldr.w	r0, [r8]
 801f0d8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801f0da:	6819      	ldr	r1, [r3, #0]
 801f0dc:	6852      	ldr	r2, [r2, #4]
 801f0de:	4420      	add	r0, r4
 801f0e0:	4790      	blx	r2
 801f0e2:	e00c      	b.n	801f0fe <_FlushLine+0xaa>
 801f0e4:	220f      	movs	r2, #15
 801f0e6:	fb12 a303 	smlabb	r3, r2, r3, sl
 801f0ea:	fb93 f2f7 	sdiv	r2, r3, r7
 801f0ee:	f8d8 0000 	ldr.w	r0, [r8]
 801f0f2:	4b0d      	ldr	r3, [pc, #52]	; (801f128 <_FlushLine+0xd4>)
 801f0f4:	4420      	add	r0, r4
 801f0f6:	6819      	ldr	r1, [r3, #0]
 801f0f8:	b2d2      	uxtb	r2, r2
 801f0fa:	f002 f87f 	bl	80211fc <LCD_SetPixelAA4_Trans>
 801f0fe:	3401      	adds	r4, #1
 801f100:	e7c6      	b.n	801f090 <_FlushLine+0x3c>
 801f102:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f106:	f7ff bf81 	b.w	801f00c <_CleanLine>
 801f10a:	bf00      	nop
 801f10c:	2002c4a4 	.word	0x2002c4a4
 801f110:	2002c498 	.word	0x2002c498
 801f114:	2002c4b0 	.word	0x2002c4b0
 801f118:	20000114 	.word	0x20000114
 801f11c:	080211fd 	.word	0x080211fd
 801f120:	2002c4bc 	.word	0x2002c4bc
 801f124:	2002c4a8 	.word	0x2002c4a8
 801f128:	2002c4a0 	.word	0x2002c4a0
 801f12c:	2002c484 	.word	0x2002c484

0801f130 <_DrawHLine>:
 801f130:	4282      	cmp	r2, r0
 801f132:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f136:	4604      	mov	r4, r0
 801f138:	460f      	mov	r7, r1
 801f13a:	4615      	mov	r5, r2
 801f13c:	db77      	blt.n	801f22e <_DrawHLine+0xfe>
 801f13e:	4e3d      	ldr	r6, [pc, #244]	; (801f234 <_DrawHLine+0x104>)
 801f140:	f8df 8108 	ldr.w	r8, [pc, #264]	; 801f24c <_DrawHLine+0x11c>
 801f144:	6833      	ldr	r3, [r6, #0]
 801f146:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 801f14a:	f8d8 3000 	ldr.w	r3, [r8]
 801f14e:	fb91 f2f2 	sdiv	r2, r1, r2
 801f152:	429a      	cmp	r2, r3
 801f154:	d008      	beq.n	801f168 <_DrawHLine+0x38>
 801f156:	f7ff ff7d 	bl	801f054 <_FlushLine>
 801f15a:	6833      	ldr	r3, [r6, #0]
 801f15c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801f160:	fb97 f7f3 	sdiv	r7, r7, r3
 801f164:	f8c8 7000 	str.w	r7, [r8]
 801f168:	6833      	ldr	r3, [r6, #0]
 801f16a:	4833      	ldr	r0, [pc, #204]	; (801f238 <_DrawHLine+0x108>)
 801f16c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801f170:	6807      	ldr	r7, [r0, #0]
 801f172:	fb94 f1f3 	sdiv	r1, r4, r3
 801f176:	42b9      	cmp	r1, r7
 801f178:	bfb8      	it	lt
 801f17a:	6001      	strlt	r1, [r0, #0]
 801f17c:	482f      	ldr	r0, [pc, #188]	; (801f23c <_DrawHLine+0x10c>)
 801f17e:	6807      	ldr	r7, [r0, #0]
 801f180:	fb95 f2f3 	sdiv	r2, r5, r3
 801f184:	42ba      	cmp	r2, r7
 801f186:	bfc8      	it	gt
 801f188:	6002      	strgt	r2, [r0, #0]
 801f18a:	482d      	ldr	r0, [pc, #180]	; (801f240 <_DrawHLine+0x110>)
 801f18c:	6800      	ldr	r0, [r0, #0]
 801f18e:	4281      	cmp	r1, r0
 801f190:	492c      	ldr	r1, [pc, #176]	; (801f244 <_DrawHLine+0x114>)
 801f192:	6809      	ldr	r1, [r1, #0]
 801f194:	bfb8      	it	lt
 801f196:	fb03 f400 	mullt.w	r4, r3, r0
 801f19a:	428a      	cmp	r2, r1
 801f19c:	bfc4      	itt	gt
 801f19e:	fb01 3503 	mlagt	r5, r1, r3, r3
 801f1a2:	f105 35ff 	addgt.w	r5, r5, #4294967295
 801f1a6:	42a5      	cmp	r5, r4
 801f1a8:	db41      	blt.n	801f22e <_DrawHLine+0xfe>
 801f1aa:	4927      	ldr	r1, [pc, #156]	; (801f248 <_DrawHLine+0x118>)
 801f1ac:	fb94 f8f3 	sdiv	r8, r4, r3
 801f1b0:	ebc0 0708 	rsb	r7, r0, r8
 801f1b4:	f8d1 c000 	ldr.w	ip, [r1]
 801f1b8:	fb95 f2f3 	sdiv	r2, r5, r3
 801f1bc:	ebb2 0a08 	subs.w	sl, r2, r8
 801f1c0:	eb0c 0107 	add.w	r1, ip, r7
 801f1c4:	f81c 9007 	ldrb.w	r9, [ip, r7]
 801f1c8:	d107      	bne.n	801f1da <_DrawHLine+0xaa>
 801f1ca:	f1c4 0401 	rsb	r4, r4, #1
 801f1ce:	44a1      	add	r9, r4
 801f1d0:	444d      	add	r5, r9
 801f1d2:	f80c 5007 	strb.w	r5, [ip, r7]
 801f1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f1da:	fb08 3303 	mla	r3, r8, r3, r3
 801f1de:	1b1c      	subs	r4, r3, r4
 801f1e0:	44a1      	add	r9, r4
 801f1e2:	3101      	adds	r1, #1
 801f1e4:	f80c 9007 	strb.w	r9, [ip, r7]
 801f1e8:	460c      	mov	r4, r1
 801f1ea:	eb04 030a 	add.w	r3, r4, sl
 801f1ee:	1a5b      	subs	r3, r3, r1
 801f1f0:	2b01      	cmp	r3, #1
 801f1f2:	dd08      	ble.n	801f206 <_DrawHLine+0xd6>
 801f1f4:	6833      	ldr	r3, [r6, #0]
 801f1f6:	f811 7b01 	ldrb.w	r7, [r1], #1
 801f1fa:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801f1fe:	443b      	add	r3, r7
 801f200:	f801 3c01 	strb.w	r3, [r1, #-1]
 801f204:	e7f1      	b.n	801f1ea <_DrawHLine+0xba>
 801f206:	2800      	cmp	r0, #0
 801f208:	f105 0501 	add.w	r5, r5, #1
 801f20c:	780b      	ldrb	r3, [r1, #0]
 801f20e:	db05      	blt.n	801f21c <_DrawHLine+0xec>
 801f210:	6830      	ldr	r0, [r6, #0]
 801f212:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
 801f216:	fb02 5510 	mls	r5, r2, r0, r5
 801f21a:	e006      	b.n	801f22a <_DrawHLine+0xfa>
 801f21c:	6830      	ldr	r0, [r6, #0]
 801f21e:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
 801f222:	f1c2 0201 	rsb	r2, r2, #1
 801f226:	fb02 5500 	mla	r5, r2, r0, r5
 801f22a:	442b      	add	r3, r5
 801f22c:	700b      	strb	r3, [r1, #0]
 801f22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f232:	bf00      	nop
 801f234:	20000114 	.word	0x20000114
 801f238:	2002c4bc 	.word	0x2002c4bc
 801f23c:	2002c4a4 	.word	0x2002c4a4
 801f240:	2002c498 	.word	0x2002c498
 801f244:	2002c49c 	.word	0x2002c49c
 801f248:	2002c4a8 	.word	0x2002c4a8
 801f24c:	2002c4a0 	.word	0x2002c4a0

0801f250 <GUI_AA_Init>:
 801f250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f254:	4f27      	ldr	r7, [pc, #156]	; (801f2f4 <GUI_AA_Init+0xa4>)
 801f256:	4d28      	ldr	r5, [pc, #160]	; (801f2f8 <GUI_AA_Init+0xa8>)
 801f258:	683b      	ldr	r3, [r7, #0]
 801f25a:	4680      	mov	r8, r0
 801f25c:	460c      	mov	r4, r1
 801f25e:	b983      	cbnz	r3, 801f282 <GUI_AA_Init+0x32>
 801f260:	4b26      	ldr	r3, [pc, #152]	; (801f2fc <GUI_AA_Init+0xac>)
 801f262:	681a      	ldr	r2, [r3, #0]
 801f264:	602a      	str	r2, [r5, #0]
 801f266:	b912      	cbnz	r2, 801f26e <GUI_AA_Init+0x1e>
 801f268:	f7fc fdee 	bl	801be48 <LCD_GetVXSizeMax>
 801f26c:	6028      	str	r0, [r5, #0]
 801f26e:	6828      	ldr	r0, [r5, #0]
 801f270:	f7ff fc8c 	bl	801eb8c <GUI_ALLOC_GetFixedBlock>
 801f274:	6038      	str	r0, [r7, #0]
 801f276:	b130      	cbz	r0, 801f286 <GUI_AA_Init+0x36>
 801f278:	4821      	ldr	r0, [pc, #132]	; (801f300 <GUI_AA_Init+0xb0>)
 801f27a:	4b22      	ldr	r3, [pc, #136]	; (801f304 <GUI_AA_Init+0xb4>)
 801f27c:	6003      	str	r3, [r0, #0]
 801f27e:	f7fe fe11 	bl	801dea4 <GUI__RegisterExit>
 801f282:	2600      	movs	r6, #0
 801f284:	e000      	b.n	801f288 <GUI_AA_Init+0x38>
 801f286:	2601      	movs	r6, #1
 801f288:	4b1f      	ldr	r3, [pc, #124]	; (801f308 <GUI_AA_Init+0xb8>)
 801f28a:	682a      	ldr	r2, [r5, #0]
 801f28c:	681b      	ldr	r3, [r3, #0]
 801f28e:	4598      	cmp	r8, r3
 801f290:	bfa8      	it	ge
 801f292:	4643      	movge	r3, r8
 801f294:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801f328 <GUI_AA_Init+0xd8>
 801f298:	f8d8 e000 	ldr.w	lr, [r8]
 801f29c:	f8de 5064 	ldr.w	r5, [lr, #100]	; 0x64
 801f2a0:	1ae1      	subs	r1, r4, r3
 801f2a2:	428a      	cmp	r2, r1
 801f2a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 801f2a8:	bfd8      	it	le
 801f2aa:	189c      	addle	r4, r3, r2
 801f2ac:	4a17      	ldr	r2, [pc, #92]	; (801f30c <GUI_AA_Init+0xbc>)
 801f2ae:	f8ce 2064 	str.w	r2, [lr, #100]	; 0x64
 801f2b2:	e882 0003 	stmia.w	r2, {r0, r1}
 801f2b6:	4916      	ldr	r1, [pc, #88]	; (801f310 <GUI_AA_Init+0xc0>)
 801f2b8:	600d      	str	r5, [r1, #0]
 801f2ba:	4916      	ldr	r1, [pc, #88]	; (801f314 <GUI_AA_Init+0xc4>)
 801f2bc:	6011      	str	r1, [r2, #0]
 801f2be:	4a16      	ldr	r2, [pc, #88]	; (801f318 <GUI_AA_Init+0xc8>)
 801f2c0:	6839      	ldr	r1, [r7, #0]
 801f2c2:	6011      	str	r1, [r2, #0]
 801f2c4:	bfd8      	it	le
 801f2c6:	f104 34ff 	addle.w	r4, r4, #4294967295
 801f2ca:	4a14      	ldr	r2, [pc, #80]	; (801f31c <GUI_AA_Init+0xcc>)
 801f2cc:	429c      	cmp	r4, r3
 801f2ce:	bfb8      	it	lt
 801f2d0:	461c      	movlt	r4, r3
 801f2d2:	6013      	str	r3, [r2, #0]
 801f2d4:	4b12      	ldr	r3, [pc, #72]	; (801f320 <GUI_AA_Init+0xd0>)
 801f2d6:	bfb8      	it	lt
 801f2d8:	2601      	movlt	r6, #1
 801f2da:	601c      	str	r4, [r3, #0]
 801f2dc:	f7ff fe96 	bl	801f00c <_CleanLine>
 801f2e0:	f7ff fe6e 	bl	801efc0 <_CalcClipRectHL>
 801f2e4:	f8d8 3000 	ldr.w	r3, [r8]
 801f2e8:	4a0e      	ldr	r2, [pc, #56]	; (801f324 <GUI_AA_Init+0xd4>)
 801f2ea:	615a      	str	r2, [r3, #20]
 801f2ec:	4630      	mov	r0, r6
 801f2ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f2f2:	bf00      	nop
 801f2f4:	2002c4ac 	.word	0x2002c4ac
 801f2f8:	2002c4b0 	.word	0x2002c4b0
 801f2fc:	2002c5d4 	.word	0x2002c5d4
 801f300:	2002c488 	.word	0x2002c488
 801f304:	0801eff9 	.word	0x0801eff9
 801f308:	2002c5a4 	.word	0x2002c5a4
 801f30c:	2002c490 	.word	0x2002c490
 801f310:	2002c484 	.word	0x2002c484
 801f314:	0801f131 	.word	0x0801f131
 801f318:	2002c4a8 	.word	0x2002c4a8
 801f31c:	2002c498 	.word	0x2002c498
 801f320:	2002c49c 	.word	0x2002c49c
 801f324:	2002c4b4 	.word	0x2002c4b4
 801f328:	20000114 	.word	0x20000114

0801f32c <GUI_AA_Init_HiRes>:
 801f32c:	4b04      	ldr	r3, [pc, #16]	; (801f340 <GUI_AA_Init_HiRes+0x14>)
 801f32e:	681b      	ldr	r3, [r3, #0]
 801f330:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801f334:	fb90 f0f3 	sdiv	r0, r0, r3
 801f338:	fb91 f1f3 	sdiv	r1, r1, r3
 801f33c:	f7ff bf88 	b.w	801f250 <GUI_AA_Init>
 801f340:	20000114 	.word	0x20000114

0801f344 <GUI_AA_SetFactor>:
 801f344:	4b02      	ldr	r3, [pc, #8]	; (801f350 <GUI_AA_SetFactor+0xc>)
 801f346:	681b      	ldr	r3, [r3, #0]
 801f348:	f883 0068 	strb.w	r0, [r3, #104]	; 0x68
 801f34c:	f7ff be38 	b.w	801efc0 <_CalcClipRectHL>
 801f350:	20000114 	.word	0x20000114

0801f354 <GUI_AA_EnableHiRes>:
 801f354:	4b02      	ldr	r3, [pc, #8]	; (801f360 <GUI_AA_EnableHiRes+0xc>)
 801f356:	681b      	ldr	r3, [r3, #0]
 801f358:	2201      	movs	r2, #1
 801f35a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801f35e:	4770      	bx	lr
 801f360:	20000114 	.word	0x20000114

0801f364 <GUI_AA_HiRes2Pixel>:
 801f364:	4b04      	ldr	r3, [pc, #16]	; (801f378 <GUI_AA_HiRes2Pixel+0x14>)
 801f366:	681b      	ldr	r3, [r3, #0]
 801f368:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801f36c:	b10b      	cbz	r3, 801f372 <GUI_AA_HiRes2Pixel+0xe>
 801f36e:	fb90 f0f3 	sdiv	r0, r0, r3
 801f372:	b280      	uxth	r0, r0
 801f374:	b200      	sxth	r0, r0
 801f376:	4770      	bx	lr
 801f378:	20000114 	.word	0x20000114

0801f37c <GUI_AA_Exit>:
 801f37c:	b508      	push	{r3, lr}
 801f37e:	f7ff fe69 	bl	801f054 <_FlushLine>
 801f382:	4b04      	ldr	r3, [pc, #16]	; (801f394 <GUI_AA_Exit+0x18>)
 801f384:	4a04      	ldr	r2, [pc, #16]	; (801f398 <GUI_AA_Exit+0x1c>)
 801f386:	681b      	ldr	r3, [r3, #0]
 801f388:	6812      	ldr	r2, [r2, #0]
 801f38a:	665a      	str	r2, [r3, #100]	; 0x64
 801f38c:	f103 0208 	add.w	r2, r3, #8
 801f390:	615a      	str	r2, [r3, #20]
 801f392:	bd08      	pop	{r3, pc}
 801f394:	20000114 	.word	0x20000114
 801f398:	2002c484 	.word	0x2002c484

0801f39c <GUI_AA_DrawRoundedRect>:
 801f39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3a0:	b091      	sub	sp, #68	; 0x44
 801f3a2:	4692      	mov	sl, r2
 801f3a4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801f3a6:	1a12      	subs	r2, r2, r0
 801f3a8:	ebb2 0245 	subs.w	r2, r2, r5, lsl #1
 801f3ac:	4699      	mov	r9, r3
 801f3ae:	4607      	mov	r7, r0
 801f3b0:	468b      	mov	fp, r1
 801f3b2:	ea4f 0345 	mov.w	r3, r5, lsl #1
 801f3b6:	f100 819d 	bmi.w	801f6f4 <GUI_AA_DrawRoundedRect+0x358>
 801f3ba:	ebc1 0209 	rsb	r2, r1, r9
 801f3be:	1ad3      	subs	r3, r2, r3
 801f3c0:	2b00      	cmp	r3, #0
 801f3c2:	f2c0 8197 	blt.w	801f6f4 <GUI_AA_DrawRoundedRect+0x358>
 801f3c6:	4ea5      	ldr	r6, [pc, #660]	; (801f65c <GUI_AA_DrawRoundedRect+0x2c0>)
 801f3c8:	6834      	ldr	r4, [r6, #0]
 801f3ca:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801f3ce:	b933      	cbnz	r3, 801f3de <GUI_AA_DrawRoundedRect+0x42>
 801f3d0:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 801f3d4:	930c      	str	r3, [sp, #48]	; 0x30
 801f3d6:	2304      	movs	r3, #4
 801f3d8:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 801f3dc:	e001      	b.n	801f3e2 <GUI_AA_DrawRoundedRect+0x46>
 801f3de:	2300      	movs	r3, #0
 801f3e0:	930c      	str	r3, [sp, #48]	; 0x30
 801f3e2:	f000 fc89 	bl	801fcf8 <WM__GetOrgX_AA>
 801f3e6:	eb07 0c00 	add.w	ip, r7, r0
 801f3ea:	f8cd c004 	str.w	ip, [sp, #4]
 801f3ee:	f000 fc8f 	bl	801fd10 <WM__GetOrgY_AA>
 801f3f2:	4483      	add	fp, r0
 801f3f4:	f000 fc80 	bl	801fcf8 <WM__GetOrgX_AA>
 801f3f8:	4482      	add	sl, r0
 801f3fa:	f000 fc89 	bl	801fd10 <WM__GetOrgY_AA>
 801f3fe:	6833      	ldr	r3, [r6, #0]
 801f400:	f8dd c004 	ldr.w	ip, [sp, #4]
 801f404:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 801f408:	4481      	add	r9, r0
 801f40a:	b952      	cbnz	r2, 801f422 <GUI_AA_DrawRoundedRect+0x86>
 801f40c:	f893 4068 	ldrb.w	r4, [r3, #104]	; 0x68
 801f410:	fb04 fc0c 	mul.w	ip, r4, ip
 801f414:	fb04 fb0b 	mul.w	fp, r4, fp
 801f418:	fb04 fa0a 	mul.w	sl, r4, sl
 801f41c:	fb04 f909 	mul.w	r9, r4, r9
 801f420:	4365      	muls	r5, r4
 801f422:	f8cd c004 	str.w	ip, [sp, #4]
 801f426:	f7fd fcf1 	bl	801ce0c <GUI_GetPenSize>
 801f42a:	6833      	ldr	r3, [r6, #0]
 801f42c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801f430:	f893 8068 	ldrb.w	r8, [r3, #104]	; 0x68
 801f434:	fb08 f000 	mul.w	r0, r8, r0
 801f438:	b2c0      	uxtb	r0, r0
 801f43a:	0846      	lsrs	r6, r0, #1
 801f43c:	f108 0701 	add.w	r7, r8, #1
 801f440:	107f      	asrs	r7, r7, #1
 801f442:	ebc6 0c0c 	rsb	ip, r6, ip
 801f446:	ebc6 0b0b 	rsb	fp, r6, fp
 801f44a:	44b2      	add	sl, r6
 801f44c:	44bc      	add	ip, r7
 801f44e:	44bb      	add	fp, r7
 801f450:	44ba      	add	sl, r7
 801f452:	44b1      	add	r9, r6
 801f454:	9006      	str	r0, [sp, #24]
 801f456:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f45a:	4660      	mov	r0, ip
 801f45c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f460:	44b9      	add	r9, r7
 801f462:	f8cd c008 	str.w	ip, [sp, #8]
 801f466:	f8cd b01c 	str.w	fp, [sp, #28]
 801f46a:	f8cd a00c 	str.w	sl, [sp, #12]
 801f46e:	f8cd 9020 	str.w	r9, [sp, #32]
 801f472:	f7ff ff77 	bl	801f364 <GUI_AA_HiRes2Pixel>
 801f476:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 801f47a:	9803      	ldr	r0, [sp, #12]
 801f47c:	f7ff ff72 	bl	801f364 <GUI_AA_HiRes2Pixel>
 801f480:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 801f484:	9807      	ldr	r0, [sp, #28]
 801f486:	f7ff ff6d 	bl	801f364 <GUI_AA_HiRes2Pixel>
 801f48a:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 801f48e:	9808      	ldr	r0, [sp, #32]
 801f490:	f7ff ff68 	bl	801f364 <GUI_AA_HiRes2Pixel>
 801f494:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
 801f498:	a80e      	add	r0, sp, #56	; 0x38
 801f49a:	f7fa fabf 	bl	8019a1c <WM__InitIVRSearch>
 801f49e:	b950      	cbnz	r0, 801f4b6 <GUI_AA_DrawRoundedRect+0x11a>
 801f4a0:	4b6e      	ldr	r3, [pc, #440]	; (801f65c <GUI_AA_DrawRoundedRect+0x2c0>)
 801f4a2:	681b      	ldr	r3, [r3, #0]
 801f4a4:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 801f4a8:	2a00      	cmp	r2, #0
 801f4aa:	f040 8123 	bne.w	801f6f4 <GUI_AA_DrawRoundedRect+0x358>
 801f4ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f4b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 801f4b4:	e11e      	b.n	801f6f4 <GUI_AA_DrawRoundedRect+0x358>
 801f4b6:	19ac      	adds	r4, r5, r6
 801f4b8:	9b06      	ldr	r3, [sp, #24]
 801f4ba:	eba4 0458 	sub.w	r4, r4, r8, lsr #1
 801f4be:	1ae5      	subs	r5, r4, r3
 801f4c0:	2302      	movs	r3, #2
 801f4c2:	fb94 f2f3 	sdiv	r2, r4, r3
 801f4c6:	fb95 f3f3 	sdiv	r3, r5, r3
 801f4ca:	fb04 2204 	mla	r2, r4, r4, r2
 801f4ce:	fb05 3305 	mla	r3, r5, r5, r3
 801f4d2:	9209      	str	r2, [sp, #36]	; 0x24
 801f4d4:	930d      	str	r3, [sp, #52]	; 0x34
 801f4d6:	9903      	ldr	r1, [sp, #12]
 801f4d8:	9802      	ldr	r0, [sp, #8]
 801f4da:	f7ff ff27 	bl	801f32c <GUI_AA_Init_HiRes>
 801f4de:	9906      	ldr	r1, [sp, #24]
 801f4e0:	9b02      	ldr	r3, [sp, #8]
 801f4e2:	9a03      	ldr	r2, [sp, #12]
 801f4e4:	440b      	add	r3, r1
 801f4e6:	3b01      	subs	r3, #1
 801f4e8:	930a      	str	r3, [sp, #40]	; 0x28
 801f4ea:	1a53      	subs	r3, r2, r1
 801f4ec:	3301      	adds	r3, #1
 801f4ee:	930b      	str	r3, [sp, #44]	; 0x2c
 801f4f0:	4b5a      	ldr	r3, [pc, #360]	; (801f65c <GUI_AA_DrawRoundedRect+0x2c0>)
 801f4f2:	681b      	ldr	r3, [r3, #0]
 801f4f4:	695b      	ldr	r3, [r3, #20]
 801f4f6:	b173      	cbz	r3, 801f516 <GUI_AA_DrawRoundedRect+0x17a>
 801f4f8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801f4fc:	9908      	ldr	r1, [sp, #32]
 801f4fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f502:	4291      	cmp	r1, r2
 801f504:	bfa8      	it	ge
 801f506:	4611      	movge	r1, r2
 801f508:	9a07      	ldr	r2, [sp, #28]
 801f50a:	9105      	str	r1, [sp, #20]
 801f50c:	429a      	cmp	r2, r3
 801f50e:	bfb8      	it	lt
 801f510:	461a      	movlt	r2, r3
 801f512:	9204      	str	r2, [sp, #16]
 801f514:	e003      	b.n	801f51e <GUI_AA_DrawRoundedRect+0x182>
 801f516:	9b08      	ldr	r3, [sp, #32]
 801f518:	9305      	str	r3, [sp, #20]
 801f51a:	9b07      	ldr	r3, [sp, #28]
 801f51c:	9304      	str	r3, [sp, #16]
 801f51e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801f522:	44a3      	add	fp, r4
 801f524:	46d8      	mov	r8, fp
 801f526:	462f      	mov	r7, r5
 801f528:	4626      	mov	r6, r4
 801f52a:	f04f 0900 	mov.w	r9, #0
 801f52e:	45a9      	cmp	r9, r5
 801f530:	da34      	bge.n	801f59c <GUI_AA_DrawRoundedRect+0x200>
 801f532:	9b04      	ldr	r3, [sp, #16]
 801f534:	4598      	cmp	r8, r3
 801f536:	db2c      	blt.n	801f592 <GUI_AA_DrawRoundedRect+0x1f6>
 801f538:	9b05      	ldr	r3, [sp, #20]
 801f53a:	4598      	cmp	r8, r3
 801f53c:	dc29      	bgt.n	801f592 <GUI_AA_DrawRoundedRect+0x1f6>
 801f53e:	fb09 f309 	mul.w	r3, r9, r9
 801f542:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f544:	fb06 3206 	mla	r2, r6, r6, r3
 801f548:	428a      	cmp	r2, r1
 801f54a:	dd01      	ble.n	801f550 <GUI_AA_DrawRoundedRect+0x1b4>
 801f54c:	3e01      	subs	r6, #1
 801f54e:	e7f8      	b.n	801f542 <GUI_AA_DrawRoundedRect+0x1a6>
 801f550:	990d      	ldr	r1, [sp, #52]	; 0x34
 801f552:	fb07 3207 	mla	r2, r7, r7, r3
 801f556:	428a      	cmp	r2, r1
 801f558:	dd01      	ble.n	801f55e <GUI_AA_DrawRoundedRect+0x1c2>
 801f55a:	3f01      	subs	r7, #1
 801f55c:	e7f8      	b.n	801f550 <GUI_AA_DrawRoundedRect+0x1b4>
 801f55e:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 801f65c <GUI_AA_DrawRoundedRect+0x2c0>
 801f562:	9802      	ldr	r0, [sp, #8]
 801f564:	f8da 3000 	ldr.w	r3, [sl]
 801f568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f56a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801f56c:	4420      	add	r0, r4
 801f56e:	442a      	add	r2, r5
 801f570:	681b      	ldr	r3, [r3, #0]
 801f572:	1b80      	subs	r0, r0, r6
 801f574:	4641      	mov	r1, r8
 801f576:	1bd2      	subs	r2, r2, r7
 801f578:	4798      	blx	r3
 801f57a:	f8da 3000 	ldr.w	r3, [sl]
 801f57e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f580:	9903      	ldr	r1, [sp, #12]
 801f582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801f584:	1b50      	subs	r0, r2, r5
 801f586:	1b0a      	subs	r2, r1, r4
 801f588:	681b      	ldr	r3, [r3, #0]
 801f58a:	4438      	add	r0, r7
 801f58c:	4641      	mov	r1, r8
 801f58e:	4432      	add	r2, r6
 801f590:	4798      	blx	r3
 801f592:	f109 0901 	add.w	r9, r9, #1
 801f596:	f108 38ff 	add.w	r8, r8, #4294967295
 801f59a:	e7c8      	b.n	801f52e <GUI_AA_DrawRoundedRect+0x192>
 801f59c:	ea25 77e5 	bic.w	r7, r5, r5, asr #31
 801f5a0:	ebc7 090b 	rsb	r9, r7, fp
 801f5a4:	46b8      	mov	r8, r7
 801f5a6:	45a0      	cmp	r8, r4
 801f5a8:	da1f      	bge.n	801f5ea <GUI_AA_DrawRoundedRect+0x24e>
 801f5aa:	9b04      	ldr	r3, [sp, #16]
 801f5ac:	4599      	cmp	r9, r3
 801f5ae:	db17      	blt.n	801f5e0 <GUI_AA_DrawRoundedRect+0x244>
 801f5b0:	9b05      	ldr	r3, [sp, #20]
 801f5b2:	4599      	cmp	r9, r3
 801f5b4:	dc14      	bgt.n	801f5e0 <GUI_AA_DrawRoundedRect+0x244>
 801f5b6:	fb08 f208 	mul.w	r2, r8, r8
 801f5ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f5bc:	fb06 2306 	mla	r3, r6, r6, r2
 801f5c0:	428b      	cmp	r3, r1
 801f5c2:	dd01      	ble.n	801f5c8 <GUI_AA_DrawRoundedRect+0x22c>
 801f5c4:	3e01      	subs	r6, #1
 801f5c6:	e7f8      	b.n	801f5ba <GUI_AA_DrawRoundedRect+0x21e>
 801f5c8:	4b24      	ldr	r3, [pc, #144]	; (801f65c <GUI_AA_DrawRoundedRect+0x2c0>)
 801f5ca:	9903      	ldr	r1, [sp, #12]
 801f5cc:	681b      	ldr	r3, [r3, #0]
 801f5ce:	9802      	ldr	r0, [sp, #8]
 801f5d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801f5d2:	1b0a      	subs	r2, r1, r4
 801f5d4:	4420      	add	r0, r4
 801f5d6:	681b      	ldr	r3, [r3, #0]
 801f5d8:	1b80      	subs	r0, r0, r6
 801f5da:	4649      	mov	r1, r9
 801f5dc:	4432      	add	r2, r6
 801f5de:	4798      	blx	r3
 801f5e0:	f108 0801 	add.w	r8, r8, #1
 801f5e4:	f109 39ff 	add.w	r9, r9, #4294967295
 801f5e8:	e7dd      	b.n	801f5a6 <GUI_AA_DrawRoundedRect+0x20a>
 801f5ea:	f10b 0601 	add.w	r6, fp, #1
 801f5ee:	9b08      	ldr	r3, [sp, #32]
 801f5f0:	ebc4 0b03 	rsb	fp, r4, r3
 801f5f4:	455e      	cmp	r6, fp
 801f5f6:	da13      	bge.n	801f620 <GUI_AA_DrawRoundedRect+0x284>
 801f5f8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 801f65c <GUI_AA_DrawRoundedRect+0x2c0>
 801f5fc:	9802      	ldr	r0, [sp, #8]
 801f5fe:	f8d8 3000 	ldr.w	r3, [r8]
 801f602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801f606:	4631      	mov	r1, r6
 801f608:	681b      	ldr	r3, [r3, #0]
 801f60a:	4798      	blx	r3
 801f60c:	f8d8 3000 	ldr.w	r3, [r8]
 801f610:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801f614:	9a03      	ldr	r2, [sp, #12]
 801f616:	681b      	ldr	r3, [r3, #0]
 801f618:	4631      	mov	r1, r6
 801f61a:	4798      	blx	r3
 801f61c:	3601      	adds	r6, #1
 801f61e:	e7e6      	b.n	801f5ee <GUI_AA_DrawRoundedRect+0x252>
 801f620:	46d8      	mov	r8, fp
 801f622:	46a9      	mov	r9, r5
 801f624:	4626      	mov	r6, r4
 801f626:	f04f 0a00 	mov.w	sl, #0
 801f62a:	45aa      	cmp	sl, r5
 801f62c:	da38      	bge.n	801f6a0 <GUI_AA_DrawRoundedRect+0x304>
 801f62e:	9b04      	ldr	r3, [sp, #16]
 801f630:	4598      	cmp	r8, r3
 801f632:	db30      	blt.n	801f696 <GUI_AA_DrawRoundedRect+0x2fa>
 801f634:	9b05      	ldr	r3, [sp, #20]
 801f636:	4598      	cmp	r8, r3
 801f638:	dc2d      	bgt.n	801f696 <GUI_AA_DrawRoundedRect+0x2fa>
 801f63a:	fb0a f30a 	mul.w	r3, sl, sl
 801f63e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f640:	fb06 3206 	mla	r2, r6, r6, r3
 801f644:	428a      	cmp	r2, r1
 801f646:	dd01      	ble.n	801f64c <GUI_AA_DrawRoundedRect+0x2b0>
 801f648:	3e01      	subs	r6, #1
 801f64a:	e7f8      	b.n	801f63e <GUI_AA_DrawRoundedRect+0x2a2>
 801f64c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801f64e:	fb09 3209 	mla	r2, r9, r9, r3
 801f652:	428a      	cmp	r2, r1
 801f654:	dd04      	ble.n	801f660 <GUI_AA_DrawRoundedRect+0x2c4>
 801f656:	f109 39ff 	add.w	r9, r9, #4294967295
 801f65a:	e7f7      	b.n	801f64c <GUI_AA_DrawRoundedRect+0x2b0>
 801f65c:	20000114 	.word	0x20000114
 801f660:	4b26      	ldr	r3, [pc, #152]	; (801f6fc <GUI_AA_DrawRoundedRect+0x360>)
 801f662:	9802      	ldr	r0, [sp, #8]
 801f664:	681a      	ldr	r2, [r3, #0]
 801f666:	6e51      	ldr	r1, [r2, #100]	; 0x64
 801f668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f66a:	f8d1 c000 	ldr.w	ip, [r1]
 801f66e:	9301      	str	r3, [sp, #4]
 801f670:	4420      	add	r0, r4
 801f672:	442a      	add	r2, r5
 801f674:	1b80      	subs	r0, r0, r6
 801f676:	4641      	mov	r1, r8
 801f678:	ebc9 0202 	rsb	r2, r9, r2
 801f67c:	47e0      	blx	ip
 801f67e:	9b01      	ldr	r3, [sp, #4]
 801f680:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f682:	681b      	ldr	r3, [r3, #0]
 801f684:	9903      	ldr	r1, [sp, #12]
 801f686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801f688:	1b50      	subs	r0, r2, r5
 801f68a:	1b0a      	subs	r2, r1, r4
 801f68c:	681b      	ldr	r3, [r3, #0]
 801f68e:	4448      	add	r0, r9
 801f690:	4641      	mov	r1, r8
 801f692:	4432      	add	r2, r6
 801f694:	4798      	blx	r3
 801f696:	f10a 0a01 	add.w	sl, sl, #1
 801f69a:	f108 0801 	add.w	r8, r8, #1
 801f69e:	e7c4      	b.n	801f62a <GUI_AA_DrawRoundedRect+0x28e>
 801f6a0:	44bb      	add	fp, r7
 801f6a2:	42a7      	cmp	r7, r4
 801f6a4:	da1e      	bge.n	801f6e4 <GUI_AA_DrawRoundedRect+0x348>
 801f6a6:	9b04      	ldr	r3, [sp, #16]
 801f6a8:	459b      	cmp	fp, r3
 801f6aa:	db17      	blt.n	801f6dc <GUI_AA_DrawRoundedRect+0x340>
 801f6ac:	9b05      	ldr	r3, [sp, #20]
 801f6ae:	459b      	cmp	fp, r3
 801f6b0:	dc14      	bgt.n	801f6dc <GUI_AA_DrawRoundedRect+0x340>
 801f6b2:	fb07 f207 	mul.w	r2, r7, r7
 801f6b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f6b8:	fb06 2306 	mla	r3, r6, r6, r2
 801f6bc:	428b      	cmp	r3, r1
 801f6be:	dd01      	ble.n	801f6c4 <GUI_AA_DrawRoundedRect+0x328>
 801f6c0:	3e01      	subs	r6, #1
 801f6c2:	e7f8      	b.n	801f6b6 <GUI_AA_DrawRoundedRect+0x31a>
 801f6c4:	4b0d      	ldr	r3, [pc, #52]	; (801f6fc <GUI_AA_DrawRoundedRect+0x360>)
 801f6c6:	9903      	ldr	r1, [sp, #12]
 801f6c8:	681b      	ldr	r3, [r3, #0]
 801f6ca:	9802      	ldr	r0, [sp, #8]
 801f6cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801f6ce:	1b0a      	subs	r2, r1, r4
 801f6d0:	4420      	add	r0, r4
 801f6d2:	681b      	ldr	r3, [r3, #0]
 801f6d4:	1b80      	subs	r0, r0, r6
 801f6d6:	4659      	mov	r1, fp
 801f6d8:	4432      	add	r2, r6
 801f6da:	4798      	blx	r3
 801f6dc:	3701      	adds	r7, #1
 801f6de:	f10b 0b01 	add.w	fp, fp, #1
 801f6e2:	e7de      	b.n	801f6a2 <GUI_AA_DrawRoundedRect+0x306>
 801f6e4:	f7ff fe4a 	bl	801f37c <GUI_AA_Exit>
 801f6e8:	f7fa f8d6 	bl	8019898 <WM__GetNextIVR>
 801f6ec:	2800      	cmp	r0, #0
 801f6ee:	f47f aef2 	bne.w	801f4d6 <GUI_AA_DrawRoundedRect+0x13a>
 801f6f2:	e6d5      	b.n	801f4a0 <GUI_AA_DrawRoundedRect+0x104>
 801f6f4:	b011      	add	sp, #68	; 0x44
 801f6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6fa:	bf00      	nop
 801f6fc:	20000114 	.word	0x20000114

0801f700 <_DrawCharAA4_Trans>:
 801f700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f704:	4680      	mov	r8, r0
 801f706:	468a      	mov	sl, r1
 801f708:	4693      	mov	fp, r2
 801f70a:	461f      	mov	r7, r3
 801f70c:	2500      	movs	r5, #0
 801f70e:	42bd      	cmp	r5, r7
 801f710:	da2b      	bge.n	801f76a <_DrawCharAA4_Trans+0x6a>
 801f712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f714:	eb05 090a 	add.w	r9, r5, sl
 801f718:	4644      	mov	r4, r8
 801f71a:	465e      	mov	r6, fp
 801f71c:	2e01      	cmp	r6, #1
 801f71e:	ebc8 0004 	rsb	r0, r8, r4
 801f722:	dd15      	ble.n	801f750 <_DrawCharAA4_Trans+0x50>
 801f724:	f813 cb01 	ldrb.w	ip, [r3], #1
 801f728:	4620      	mov	r0, r4
 801f72a:	ea4f 121c 	mov.w	r2, ip, lsr #4
 801f72e:	4649      	mov	r1, r9
 801f730:	e88d 1008 	stmia.w	sp, {r3, ip}
 801f734:	f001 fd62 	bl	80211fc <LCD_SetPixelAA4_Trans>
 801f738:	f8dd c004 	ldr.w	ip, [sp, #4]
 801f73c:	1c60      	adds	r0, r4, #1
 801f73e:	4649      	mov	r1, r9
 801f740:	f00c 020f 	and.w	r2, ip, #15
 801f744:	f001 fd5a 	bl	80211fc <LCD_SetPixelAA4_Trans>
 801f748:	3e02      	subs	r6, #2
 801f74a:	3402      	adds	r4, #2
 801f74c:	9b00      	ldr	r3, [sp, #0]
 801f74e:	e7e5      	b.n	801f71c <_DrawCharAA4_Trans+0x1c>
 801f750:	b12e      	cbz	r6, 801f75e <_DrawCharAA4_Trans+0x5e>
 801f752:	781a      	ldrb	r2, [r3, #0]
 801f754:	4440      	add	r0, r8
 801f756:	4649      	mov	r1, r9
 801f758:	0912      	lsrs	r2, r2, #4
 801f75a:	f001 fd4f 	bl	80211fc <LCD_SetPixelAA4_Trans>
 801f75e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f762:	4413      	add	r3, r2
 801f764:	930d      	str	r3, [sp, #52]	; 0x34
 801f766:	3501      	adds	r5, #1
 801f768:	e7d1      	b.n	801f70e <_DrawCharAA4_Trans+0xe>
 801f76a:	b003      	add	sp, #12
 801f76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f770 <GUI_AA__DrawCharAA4>:
 801f770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f774:	4c2b      	ldr	r4, [pc, #172]	; (801f824 <GUI_AA__DrawCharAA4+0xb4>)
 801f776:	6825      	ldr	r5, [r4, #0]
 801f778:	7c2c      	ldrb	r4, [r5, #16]
 801f77a:	b087      	sub	sp, #28
 801f77c:	07a4      	lsls	r4, r4, #30
 801f77e:	4682      	mov	sl, r0
 801f780:	4689      	mov	r9, r1
 801f782:	4693      	mov	fp, r2
 801f784:	9305      	str	r3, [sp, #20]
 801f786:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f788:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f78a:	d443      	bmi.n	801f814 <GUI_AA__DrawCharAA4+0xa4>
 801f78c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801f78e:	681c      	ldr	r4, [r3, #0]
 801f790:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801f792:	681d      	ldr	r5, [r3, #0]
 801f794:	4b24      	ldr	r3, [pc, #144]	; (801f828 <GUI_AA__DrawCharAA4+0xb8>)
 801f796:	681b      	ldr	r3, [r3, #0]
 801f798:	42ab      	cmp	r3, r5
 801f79a:	d103      	bne.n	801f7a4 <GUI_AA__DrawCharAA4+0x34>
 801f79c:	4b23      	ldr	r3, [pc, #140]	; (801f82c <GUI_AA__DrawCharAA4+0xbc>)
 801f79e:	681b      	ldr	r3, [r3, #0]
 801f7a0:	42a3      	cmp	r3, r4
 801f7a2:	d025      	beq.n	801f7f0 <GUI_AA__DrawCharAA4+0x80>
 801f7a4:	4620      	mov	r0, r4
 801f7a6:	f7fc fed3 	bl	801c550 <LCD_Index2Color>
 801f7aa:	4680      	mov	r8, r0
 801f7ac:	4628      	mov	r0, r5
 801f7ae:	f7fc fecf 	bl	801c550 <LCD_Index2Color>
 801f7b2:	4b1f      	ldr	r3, [pc, #124]	; (801f830 <GUI_AA__DrawCharAA4+0xc0>)
 801f7b4:	4684      	mov	ip, r0
 801f7b6:	f8c3 8000 	str.w	r8, [r3]
 801f7ba:	2301      	movs	r3, #1
 801f7bc:	b2da      	uxtb	r2, r3
 801f7be:	4660      	mov	r0, ip
 801f7c0:	4641      	mov	r1, r8
 801f7c2:	9303      	str	r3, [sp, #12]
 801f7c4:	f8cd c010 	str.w	ip, [sp, #16]
 801f7c8:	f001 fce4 	bl	8021194 <LCD_AA_MixColors16>
 801f7cc:	9b03      	ldr	r3, [sp, #12]
 801f7ce:	4a18      	ldr	r2, [pc, #96]	; (801f830 <GUI_AA__DrawCharAA4+0xc0>)
 801f7d0:	f8dd c010 	ldr.w	ip, [sp, #16]
 801f7d4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 801f7d8:	3301      	adds	r3, #1
 801f7da:	2b0f      	cmp	r3, #15
 801f7dc:	d1ee      	bne.n	801f7bc <GUI_AA__DrawCharAA4+0x4c>
 801f7de:	4815      	ldr	r0, [pc, #84]	; (801f834 <GUI_AA__DrawCharAA4+0xc4>)
 801f7e0:	f8c2 c03c 	str.w	ip, [r2, #60]	; 0x3c
 801f7e4:	f001 fc60 	bl	80210a8 <LCD_GetpPalConvTableUncached>
 801f7e8:	4b0f      	ldr	r3, [pc, #60]	; (801f828 <GUI_AA__DrawCharAA4+0xb8>)
 801f7ea:	601d      	str	r5, [r3, #0]
 801f7ec:	4b0f      	ldr	r3, [pc, #60]	; (801f82c <GUI_AA__DrawCharAA4+0xbc>)
 801f7ee:	601c      	str	r4, [r3, #0]
 801f7f0:	4811      	ldr	r0, [pc, #68]	; (801f838 <GUI_AA__DrawCharAA4+0xc8>)
 801f7f2:	9b05      	ldr	r3, [sp, #20]
 801f7f4:	8043      	strh	r3, [r0, #2]
 801f7f6:	4b11      	ldr	r3, [pc, #68]	; (801f83c <GUI_AA__DrawCharAA4+0xcc>)
 801f7f8:	f8a0 b000 	strh.w	fp, [r0]
 801f7fc:	781a      	ldrb	r2, [r3, #0]
 801f7fe:	4b0d      	ldr	r3, [pc, #52]	; (801f834 <GUI_AA__DrawCharAA4+0xc4>)
 801f800:	8087      	strh	r7, [r0, #4]
 801f802:	711a      	strb	r2, [r3, #4]
 801f804:	4651      	mov	r1, sl
 801f806:	464a      	mov	r2, r9
 801f808:	6086      	str	r6, [r0, #8]
 801f80a:	b007      	add	sp, #28
 801f80c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f810:	f7fe b8f4 	b.w	801d9fc <GL_DrawBitmap>
 801f814:	4c0a      	ldr	r4, [pc, #40]	; (801f840 <GUI_AA__DrawCharAA4+0xd0>)
 801f816:	9700      	str	r7, [sp, #0]
 801f818:	9601      	str	r6, [sp, #4]
 801f81a:	6824      	ldr	r4, [r4, #0]
 801f81c:	47a0      	blx	r4
 801f81e:	b007      	add	sp, #28
 801f820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f824:	20000114 	.word	0x20000114
 801f828:	2002c500 	.word	0x2002c500
 801f82c:	2002c504 	.word	0x2002c504
 801f830:	2002c4c0 	.word	0x2002c4c0
 801f834:	20000124 	.word	0x20000124
 801f838:	20000130 	.word	0x20000130
 801f83c:	2002c6d0 	.word	0x2002c6d0
 801f840:	20000144 	.word	0x20000144

0801f844 <GUIPROP_AA4_DispChar>:
 801f844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f848:	4d23      	ldr	r5, [pc, #140]	; (801f8d8 <GUIPROP_AA4_DispChar+0x94>)
 801f84a:	682b      	ldr	r3, [r5, #0]
 801f84c:	f9b3 802a 	ldrsh.w	r8, [r3, #42]	; 0x2a
 801f850:	69db      	ldr	r3, [r3, #28]
 801f852:	4604      	mov	r4, r0
 801f854:	b087      	sub	sp, #28
 801f856:	69d8      	ldr	r0, [r3, #28]
 801f858:	4621      	mov	r1, r4
 801f85a:	f7fe fca9 	bl	801e1b0 <GUIPROP__FindChar>
 801f85e:	2800      	cmp	r0, #0
 801f860:	d036      	beq.n	801f8d0 <GUIPROP_AA4_DispChar+0x8c>
 801f862:	f8b0 9000 	ldrh.w	r9, [r0]
 801f866:	6847      	ldr	r7, [r0, #4]
 801f868:	ebc9 0904 	rsb	r9, r9, r4
 801f86c:	eb07 04c9 	add.w	r4, r7, r9, lsl #3
 801f870:	4640      	mov	r0, r8
 801f872:	78a6      	ldrb	r6, [r4, #2]
 801f874:	f7fc fb6c 	bl	801bf50 <LCD_SetDrawMode>
 801f878:	4b18      	ldr	r3, [pc, #96]	; (801f8dc <GUIPROP_AA4_DispChar+0x98>)
 801f87a:	f817 2039 	ldrb.w	r2, [r7, r9, lsl #3]
 801f87e:	6819      	ldr	r1, [r3, #0]
 801f880:	682b      	ldr	r3, [r5, #0]
 801f882:	4680      	mov	r8, r0
 801f884:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 801f888:	b189      	cbz	r1, 801f8ae <GUIPROP_AA4_DispChar+0x6a>
 801f88a:	f9b3 e024 	ldrsh.w	lr, [r3, #36]	; 0x24
 801f88e:	69db      	ldr	r3, [r3, #28]
 801f890:	2701      	movs	r7, #1
 801f892:	7e1b      	ldrb	r3, [r3, #24]
 801f894:	9700      	str	r7, [sp, #0]
 801f896:	9701      	str	r7, [sp, #4]
 801f898:	2704      	movs	r7, #4
 801f89a:	9702      	str	r7, [sp, #8]
 801f89c:	9603      	str	r6, [sp, #12]
 801f89e:	6866      	ldr	r6, [r4, #4]
 801f8a0:	9604      	str	r6, [sp, #16]
 801f8a2:	2600      	movs	r6, #0
 801f8a4:	9605      	str	r6, [sp, #20]
 801f8a6:	680e      	ldr	r6, [r1, #0]
 801f8a8:	4671      	mov	r1, lr
 801f8aa:	47b0      	blx	r6
 801f8ac:	e008      	b.n	801f8c0 <GUIPROP_AA4_DispChar+0x7c>
 801f8ae:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 801f8b2:	69db      	ldr	r3, [r3, #28]
 801f8b4:	7e1b      	ldrb	r3, [r3, #24]
 801f8b6:	9600      	str	r6, [sp, #0]
 801f8b8:	6866      	ldr	r6, [r4, #4]
 801f8ba:	9601      	str	r6, [sp, #4]
 801f8bc:	f7ff ff58 	bl	801f770 <GUI_AA__DrawCharAA4>
 801f8c0:	4640      	mov	r0, r8
 801f8c2:	f7fc fb45 	bl	801bf50 <LCD_SetDrawMode>
 801f8c6:	682b      	ldr	r3, [r5, #0]
 801f8c8:	7861      	ldrb	r1, [r4, #1]
 801f8ca:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801f8cc:	440a      	add	r2, r1
 801f8ce:	845a      	strh	r2, [r3, #34]	; 0x22
 801f8d0:	b007      	add	sp, #28
 801f8d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f8d6:	bf00      	nop
 801f8d8:	20000114 	.word	0x20000114
 801f8dc:	2002c5a0 	.word	0x2002c5a0

0801f8e0 <GUIPROP_AA4_GetCharDistX>:
 801f8e0:	b538      	push	{r3, r4, r5, lr}
 801f8e2:	4b0a      	ldr	r3, [pc, #40]	; (801f90c <GUIPROP_AA4_GetCharDistX+0x2c>)
 801f8e4:	681b      	ldr	r3, [r3, #0]
 801f8e6:	69db      	ldr	r3, [r3, #28]
 801f8e8:	4605      	mov	r5, r0
 801f8ea:	460c      	mov	r4, r1
 801f8ec:	69d8      	ldr	r0, [r3, #28]
 801f8ee:	4629      	mov	r1, r5
 801f8f0:	f7fe fc5e 	bl	801e1b0 <GUIPROP__FindChar>
 801f8f4:	b148      	cbz	r0, 801f90a <GUIPROP_AA4_GetCharDistX+0x2a>
 801f8f6:	8803      	ldrh	r3, [r0, #0]
 801f8f8:	1aed      	subs	r5, r5, r3
 801f8fa:	6843      	ldr	r3, [r0, #4]
 801f8fc:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801f900:	7850      	ldrb	r0, [r2, #1]
 801f902:	b114      	cbz	r4, 801f90a <GUIPROP_AA4_GetCharDistX+0x2a>
 801f904:	f813 3035 	ldrb.w	r3, [r3, r5, lsl #3]
 801f908:	6023      	str	r3, [r4, #0]
 801f90a:	bd38      	pop	{r3, r4, r5, pc}
 801f90c:	20000114 	.word	0x20000114

0801f910 <GUIPROP_AA4_GetFontInfo>:
 801f910:	2311      	movs	r3, #17
 801f912:	800b      	strh	r3, [r1, #0]
 801f914:	4770      	bx	lr

0801f916 <GUIPROP_AA4_IsInFont>:
 801f916:	b508      	push	{r3, lr}
 801f918:	69c0      	ldr	r0, [r0, #28]
 801f91a:	f7fe fc49 	bl	801e1b0 <GUIPROP__FindChar>
 801f91e:	3000      	adds	r0, #0
 801f920:	bf18      	it	ne
 801f922:	2001      	movne	r0, #1
 801f924:	bd08      	pop	{r3, pc}
	...

0801f928 <GUI_AA__DrawCharAA2>:
 801f928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f92c:	b087      	sub	sp, #28
 801f92e:	4692      	mov	sl, r2
 801f930:	9302      	str	r3, [sp, #8]
 801f932:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f934:	9303      	str	r3, [sp, #12]
 801f936:	4b59      	ldr	r3, [pc, #356]	; (801fa9c <GUI_AA__DrawCharAA2+0x174>)
 801f938:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f93a:	681a      	ldr	r2, [r3, #0]
 801f93c:	7c13      	ldrb	r3, [r2, #16]
 801f93e:	079b      	lsls	r3, r3, #30
 801f940:	4680      	mov	r8, r0
 801f942:	4689      	mov	r9, r1
 801f944:	d43e      	bmi.n	801f9c4 <GUI_AA__DrawCharAA2+0x9c>
 801f946:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801f948:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801f94a:	681b      	ldr	r3, [r3, #0]
 801f94c:	6815      	ldr	r5, [r2, #0]
 801f94e:	4a54      	ldr	r2, [pc, #336]	; (801faa0 <GUI_AA__DrawCharAA2+0x178>)
 801f950:	6812      	ldr	r2, [r2, #0]
 801f952:	42aa      	cmp	r2, r5
 801f954:	d103      	bne.n	801f95e <GUI_AA__DrawCharAA2+0x36>
 801f956:	4a53      	ldr	r2, [pc, #332]	; (801faa4 <GUI_AA__DrawCharAA2+0x17c>)
 801f958:	6812      	ldr	r2, [r2, #0]
 801f95a:	429a      	cmp	r2, r3
 801f95c:	d01f      	beq.n	801f99e <GUI_AA__DrawCharAA2+0x76>
 801f95e:	4618      	mov	r0, r3
 801f960:	9300      	str	r3, [sp, #0]
 801f962:	f7fc fdf5 	bl	801c550 <LCD_Index2Color>
 801f966:	4683      	mov	fp, r0
 801f968:	4628      	mov	r0, r5
 801f96a:	f7fc fdf1 	bl	801c550 <LCD_Index2Color>
 801f96e:	4c4e      	ldr	r4, [pc, #312]	; (801faa8 <GUI_AA__DrawCharAA2+0x180>)
 801f970:	4659      	mov	r1, fp
 801f972:	2205      	movs	r2, #5
 801f974:	4607      	mov	r7, r0
 801f976:	f8c4 b000 	str.w	fp, [r4]
 801f97a:	f001 fc0b 	bl	8021194 <LCD_AA_MixColors16>
 801f97e:	220a      	movs	r2, #10
 801f980:	6060      	str	r0, [r4, #4]
 801f982:	4659      	mov	r1, fp
 801f984:	4638      	mov	r0, r7
 801f986:	f001 fc05 	bl	8021194 <LCD_AA_MixColors16>
 801f98a:	60a0      	str	r0, [r4, #8]
 801f98c:	4847      	ldr	r0, [pc, #284]	; (801faac <GUI_AA__DrawCharAA2+0x184>)
 801f98e:	60e7      	str	r7, [r4, #12]
 801f990:	f001 fb8a 	bl	80210a8 <LCD_GetpPalConvTableUncached>
 801f994:	4a42      	ldr	r2, [pc, #264]	; (801faa0 <GUI_AA__DrawCharAA2+0x178>)
 801f996:	9b00      	ldr	r3, [sp, #0]
 801f998:	6015      	str	r5, [r2, #0]
 801f99a:	4a42      	ldr	r2, [pc, #264]	; (801faa4 <GUI_AA__DrawCharAA2+0x17c>)
 801f99c:	6013      	str	r3, [r2, #0]
 801f99e:	4844      	ldr	r0, [pc, #272]	; (801fab0 <GUI_AA__DrawCharAA2+0x188>)
 801f9a0:	9b02      	ldr	r3, [sp, #8]
 801f9a2:	8043      	strh	r3, [r0, #2]
 801f9a4:	9b03      	ldr	r3, [sp, #12]
 801f9a6:	8083      	strh	r3, [r0, #4]
 801f9a8:	4b42      	ldr	r3, [pc, #264]	; (801fab4 <GUI_AA__DrawCharAA2+0x18c>)
 801f9aa:	f8a0 a000 	strh.w	sl, [r0]
 801f9ae:	781a      	ldrb	r2, [r3, #0]
 801f9b0:	4b3e      	ldr	r3, [pc, #248]	; (801faac <GUI_AA__DrawCharAA2+0x184>)
 801f9b2:	6086      	str	r6, [r0, #8]
 801f9b4:	711a      	strb	r2, [r3, #4]
 801f9b6:	4641      	mov	r1, r8
 801f9b8:	464a      	mov	r2, r9
 801f9ba:	b007      	add	sp, #28
 801f9bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9c0:	f7fe b81c 	b.w	801d9fc <GL_DrawBitmap>
 801f9c4:	4b3c      	ldr	r3, [pc, #240]	; (801fab8 <GUI_AA__DrawCharAA2+0x190>)
 801f9c6:	6818      	ldr	r0, [r3, #0]
 801f9c8:	9005      	str	r0, [sp, #20]
 801f9ca:	2700      	movs	r7, #0
 801f9cc:	9b02      	ldr	r3, [sp, #8]
 801f9ce:	429f      	cmp	r7, r3
 801f9d0:	da60      	bge.n	801fa94 <GUI_AA__DrawCharAA2+0x16c>
 801f9d2:	eb07 0509 	add.w	r5, r7, r9
 801f9d6:	4644      	mov	r4, r8
 801f9d8:	46b4      	mov	ip, r6
 801f9da:	f04f 0b00 	mov.w	fp, #0
 801f9de:	ebcb 030a 	rsb	r3, fp, sl
 801f9e2:	2b03      	cmp	r3, #3
 801f9e4:	dd37      	ble.n	801fa56 <GUI_AA__DrawCharAA2+0x12e>
 801f9e6:	f81c 3b01 	ldrb.w	r3, [ip], #1
 801f9ea:	a906      	add	r1, sp, #24
 801f9ec:	eb01 1293 	add.w	r2, r1, r3, lsr #6
 801f9f0:	4620      	mov	r0, r4
 801f9f2:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 801f9f6:	4629      	mov	r1, r5
 801f9f8:	e88d 1008 	stmia.w	sp, {r3, ip}
 801f9fc:	f001 fbfe 	bl	80211fc <LCD_SetPixelAA4_Trans>
 801fa00:	9b00      	ldr	r3, [sp, #0]
 801fa02:	009b      	lsls	r3, r3, #2
 801fa04:	b2db      	uxtb	r3, r3
 801fa06:	a906      	add	r1, sp, #24
 801fa08:	eb01 1293 	add.w	r2, r1, r3, lsr #6
 801fa0c:	1c60      	adds	r0, r4, #1
 801fa0e:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 801fa12:	9300      	str	r3, [sp, #0]
 801fa14:	4629      	mov	r1, r5
 801fa16:	f001 fbf1 	bl	80211fc <LCD_SetPixelAA4_Trans>
 801fa1a:	9b00      	ldr	r3, [sp, #0]
 801fa1c:	009b      	lsls	r3, r3, #2
 801fa1e:	b2db      	uxtb	r3, r3
 801fa20:	a906      	add	r1, sp, #24
 801fa22:	eb01 1293 	add.w	r2, r1, r3, lsr #6
 801fa26:	1ca0      	adds	r0, r4, #2
 801fa28:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 801fa2c:	9300      	str	r3, [sp, #0]
 801fa2e:	4629      	mov	r1, r5
 801fa30:	f001 fbe4 	bl	80211fc <LCD_SetPixelAA4_Trans>
 801fa34:	9b00      	ldr	r3, [sp, #0]
 801fa36:	aa06      	add	r2, sp, #24
 801fa38:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801fa3c:	4413      	add	r3, r2
 801fa3e:	1ce0      	adds	r0, r4, #3
 801fa40:	4629      	mov	r1, r5
 801fa42:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 801fa46:	f001 fbd9 	bl	80211fc <LCD_SetPixelAA4_Trans>
 801fa4a:	f10b 0b04 	add.w	fp, fp, #4
 801fa4e:	3404      	adds	r4, #4
 801fa50:	f8dd c004 	ldr.w	ip, [sp, #4]
 801fa54:	e7c3      	b.n	801f9de <GUI_AA__DrawCharAA2+0xb6>
 801fa56:	b1cb      	cbz	r3, 801fa8c <GUI_AA__DrawCharAA2+0x164>
 801fa58:	f89c c000 	ldrb.w	ip, [ip]
 801fa5c:	461c      	mov	r4, r3
 801fa5e:	a906      	add	r1, sp, #24
 801fa60:	eb01 129c 	add.w	r2, r1, ip, lsr #6
 801fa64:	eb03 000b 	add.w	r0, r3, fp
 801fa68:	4440      	add	r0, r8
 801fa6a:	1b00      	subs	r0, r0, r4
 801fa6c:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 801fa70:	4629      	mov	r1, r5
 801fa72:	e88d 1008 	stmia.w	sp, {r3, ip}
 801fa76:	f001 fbc1 	bl	80211fc <LCD_SetPixelAA4_Trans>
 801fa7a:	f8dd c004 	ldr.w	ip, [sp, #4]
 801fa7e:	9b00      	ldr	r3, [sp, #0]
 801fa80:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801fa84:	3c01      	subs	r4, #1
 801fa86:	fa5f fc8c 	uxtb.w	ip, ip
 801fa8a:	d1e8      	bne.n	801fa5e <GUI_AA__DrawCharAA2+0x136>
 801fa8c:	9b03      	ldr	r3, [sp, #12]
 801fa8e:	3701      	adds	r7, #1
 801fa90:	441e      	add	r6, r3
 801fa92:	e79b      	b.n	801f9cc <GUI_AA__DrawCharAA2+0xa4>
 801fa94:	b007      	add	sp, #28
 801fa96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa9a:	bf00      	nop
 801fa9c:	20000114 	.word	0x20000114
 801faa0:	2002c518 	.word	0x2002c518
 801faa4:	2002c51c 	.word	0x2002c51c
 801faa8:	2002c508 	.word	0x2002c508
 801faac:	20000148 	.word	0x20000148
 801fab0:	20000154 	.word	0x20000154
 801fab4:	2002c6d0 	.word	0x2002c6d0
 801fab8:	0802274a 	.word	0x0802274a

0801fabc <GUIPROP_AA2_DispChar>:
 801fabc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fac0:	4d23      	ldr	r5, [pc, #140]	; (801fb50 <GUIPROP_AA2_DispChar+0x94>)
 801fac2:	682b      	ldr	r3, [r5, #0]
 801fac4:	f9b3 802a 	ldrsh.w	r8, [r3, #42]	; 0x2a
 801fac8:	69db      	ldr	r3, [r3, #28]
 801faca:	4604      	mov	r4, r0
 801facc:	b087      	sub	sp, #28
 801face:	69d8      	ldr	r0, [r3, #28]
 801fad0:	4621      	mov	r1, r4
 801fad2:	f7fe fb6d 	bl	801e1b0 <GUIPROP__FindChar>
 801fad6:	2800      	cmp	r0, #0
 801fad8:	d036      	beq.n	801fb48 <GUIPROP_AA2_DispChar+0x8c>
 801fada:	f8b0 9000 	ldrh.w	r9, [r0]
 801fade:	6847      	ldr	r7, [r0, #4]
 801fae0:	ebc9 0904 	rsb	r9, r9, r4
 801fae4:	eb07 04c9 	add.w	r4, r7, r9, lsl #3
 801fae8:	4640      	mov	r0, r8
 801faea:	78a6      	ldrb	r6, [r4, #2]
 801faec:	f7fc fa30 	bl	801bf50 <LCD_SetDrawMode>
 801faf0:	4b18      	ldr	r3, [pc, #96]	; (801fb54 <GUIPROP_AA2_DispChar+0x98>)
 801faf2:	f817 2039 	ldrb.w	r2, [r7, r9, lsl #3]
 801faf6:	6819      	ldr	r1, [r3, #0]
 801faf8:	682b      	ldr	r3, [r5, #0]
 801fafa:	4680      	mov	r8, r0
 801fafc:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 801fb00:	b189      	cbz	r1, 801fb26 <GUIPROP_AA2_DispChar+0x6a>
 801fb02:	f9b3 e024 	ldrsh.w	lr, [r3, #36]	; 0x24
 801fb06:	69db      	ldr	r3, [r3, #28]
 801fb08:	2701      	movs	r7, #1
 801fb0a:	7e1b      	ldrb	r3, [r3, #24]
 801fb0c:	9700      	str	r7, [sp, #0]
 801fb0e:	9701      	str	r7, [sp, #4]
 801fb10:	2702      	movs	r7, #2
 801fb12:	9702      	str	r7, [sp, #8]
 801fb14:	9603      	str	r6, [sp, #12]
 801fb16:	6866      	ldr	r6, [r4, #4]
 801fb18:	9604      	str	r6, [sp, #16]
 801fb1a:	2600      	movs	r6, #0
 801fb1c:	9605      	str	r6, [sp, #20]
 801fb1e:	680e      	ldr	r6, [r1, #0]
 801fb20:	4671      	mov	r1, lr
 801fb22:	47b0      	blx	r6
 801fb24:	e008      	b.n	801fb38 <GUIPROP_AA2_DispChar+0x7c>
 801fb26:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 801fb2a:	69db      	ldr	r3, [r3, #28]
 801fb2c:	7e1b      	ldrb	r3, [r3, #24]
 801fb2e:	9600      	str	r6, [sp, #0]
 801fb30:	6866      	ldr	r6, [r4, #4]
 801fb32:	9601      	str	r6, [sp, #4]
 801fb34:	f7ff fef8 	bl	801f928 <GUI_AA__DrawCharAA2>
 801fb38:	4640      	mov	r0, r8
 801fb3a:	f7fc fa09 	bl	801bf50 <LCD_SetDrawMode>
 801fb3e:	682b      	ldr	r3, [r5, #0]
 801fb40:	7861      	ldrb	r1, [r4, #1]
 801fb42:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801fb44:	440a      	add	r2, r1
 801fb46:	845a      	strh	r2, [r3, #34]	; 0x22
 801fb48:	b007      	add	sp, #28
 801fb4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fb4e:	bf00      	nop
 801fb50:	20000114 	.word	0x20000114
 801fb54:	2002c5a0 	.word	0x2002c5a0

0801fb58 <GUIPROP_AA2_GetCharDistX>:
 801fb58:	b538      	push	{r3, r4, r5, lr}
 801fb5a:	4b0a      	ldr	r3, [pc, #40]	; (801fb84 <GUIPROP_AA2_GetCharDistX+0x2c>)
 801fb5c:	681b      	ldr	r3, [r3, #0]
 801fb5e:	69db      	ldr	r3, [r3, #28]
 801fb60:	4605      	mov	r5, r0
 801fb62:	460c      	mov	r4, r1
 801fb64:	69d8      	ldr	r0, [r3, #28]
 801fb66:	4629      	mov	r1, r5
 801fb68:	f7fe fb22 	bl	801e1b0 <GUIPROP__FindChar>
 801fb6c:	b148      	cbz	r0, 801fb82 <GUIPROP_AA2_GetCharDistX+0x2a>
 801fb6e:	8803      	ldrh	r3, [r0, #0]
 801fb70:	1aed      	subs	r5, r5, r3
 801fb72:	6843      	ldr	r3, [r0, #4]
 801fb74:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801fb78:	7850      	ldrb	r0, [r2, #1]
 801fb7a:	b114      	cbz	r4, 801fb82 <GUIPROP_AA2_GetCharDistX+0x2a>
 801fb7c:	f813 3035 	ldrb.w	r3, [r3, r5, lsl #3]
 801fb80:	6023      	str	r3, [r4, #0]
 801fb82:	bd38      	pop	{r3, r4, r5, pc}
 801fb84:	20000114 	.word	0x20000114

0801fb88 <GUIPROP_AA2_GetFontInfo>:
 801fb88:	2309      	movs	r3, #9
 801fb8a:	800b      	strh	r3, [r1, #0]
 801fb8c:	4770      	bx	lr

0801fb8e <GUIPROP_AA2_IsInFont>:
 801fb8e:	b508      	push	{r3, lr}
 801fb90:	69c0      	ldr	r0, [r0, #28]
 801fb92:	f7fe fb0d 	bl	801e1b0 <GUIPROP__FindChar>
 801fb96:	3000      	adds	r0, #0
 801fb98:	bf18      	it	ne
 801fb9a:	2001      	movne	r0, #1
 801fb9c:	bd08      	pop	{r3, pc}

0801fb9e <WM__UpdateChildPositions>:
 801fb9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fba2:	b087      	sub	sp, #28
 801fba4:	69c4      	ldr	r4, [r0, #28]
 801fba6:	9303      	str	r3, [sp, #12]
 801fba8:	468a      	mov	sl, r1
 801fbaa:	4693      	mov	fp, r2
 801fbac:	2c00      	cmp	r4, #0
 801fbae:	d06d      	beq.n	801fc8c <WM__UpdateChildPositions+0xee>
 801fbb0:	4620      	mov	r0, r4
 801fbb2:	f7fe fe9f 	bl	801e8f4 <GUI_ALLOC_LockH>
 801fbb6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801fbb8:	9005      	str	r0, [sp, #20]
 801fbba:	f401 7320 	and.w	r3, r1, #640	; 0x280
 801fbbe:	2b80      	cmp	r3, #128	; 0x80
 801fbc0:	f8b0 8000 	ldrh.w	r8, [r0]
 801fbc4:	8842      	ldrh	r2, [r0, #2]
 801fbc6:	8886      	ldrh	r6, [r0, #4]
 801fbc8:	88c5      	ldrh	r5, [r0, #6]
 801fbca:	d008      	beq.n	801fbde <WM__UpdateChildPositions+0x40>
 801fbcc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801fbd0:	d108      	bne.n	801fbe4 <WM__UpdateChildPositions+0x46>
 801fbd2:	eb08 090a 	add.w	r9, r8, sl
 801fbd6:	fa1f f989 	uxth.w	r9, r9
 801fbda:	9b03      	ldr	r3, [sp, #12]
 801fbdc:	e008      	b.n	801fbf0 <WM__UpdateChildPositions+0x52>
 801fbde:	9803      	ldr	r0, [sp, #12]
 801fbe0:	b283      	uxth	r3, r0
 801fbe2:	e001      	b.n	801fbe8 <WM__UpdateChildPositions+0x4a>
 801fbe4:	fa1f f38a 	uxth.w	r3, sl
 801fbe8:	eb03 0908 	add.w	r9, r3, r8
 801fbec:	fa1f f989 	uxth.w	r9, r9
 801fbf0:	f401 61a0 	and.w	r1, r1, #1280	; 0x500
 801fbf4:	4433      	add	r3, r6
 801fbf6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 801fbfa:	b29b      	uxth	r3, r3
 801fbfc:	d008      	beq.n	801fc10 <WM__UpdateChildPositions+0x72>
 801fbfe:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 801fc02:	d108      	bne.n	801fc16 <WM__UpdateChildPositions+0x78>
 801fc04:	eb02 0c0b 	add.w	ip, r2, fp
 801fc08:	fa1f fc8c 	uxth.w	ip, ip
 801fc0c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801fc0e:	e008      	b.n	801fc22 <WM__UpdateChildPositions+0x84>
 801fc10:	9910      	ldr	r1, [sp, #64]	; 0x40
 801fc12:	b28f      	uxth	r7, r1
 801fc14:	e001      	b.n	801fc1a <WM__UpdateChildPositions+0x7c>
 801fc16:	fa1f f78b 	uxth.w	r7, fp
 801fc1a:	eb07 0c02 	add.w	ip, r7, r2
 801fc1e:	fa1f fc8c 	uxth.w	ip, ip
 801fc22:	fa0f f989 	sxth.w	r9, r9
 801fc26:	fa0f f888 	sxth.w	r8, r8
 801fc2a:	b212      	sxth	r2, r2
 801fc2c:	442f      	add	r7, r5
 801fc2e:	fa0f fc8c 	sxth.w	ip, ip
 801fc32:	ebb9 0108 	subs.w	r1, r9, r8
 801fc36:	9202      	str	r2, [sp, #8]
 801fc38:	b2bf      	uxth	r7, r7
 801fc3a:	ebc2 020c 	rsb	r2, r2, ip
 801fc3e:	d100      	bne.n	801fc42 <WM__UpdateChildPositions+0xa4>
 801fc40:	b142      	cbz	r2, 801fc54 <WM__UpdateChildPositions+0xb6>
 801fc42:	4620      	mov	r0, r4
 801fc44:	9301      	str	r3, [sp, #4]
 801fc46:	f8cd c000 	str.w	ip, [sp]
 801fc4a:	f000 f9f9 	bl	8020040 <WM_MoveWindow>
 801fc4e:	f8dd c000 	ldr.w	ip, [sp]
 801fc52:	9b01      	ldr	r3, [sp, #4]
 801fc54:	b21b      	sxth	r3, r3
 801fc56:	ebc9 0903 	rsb	r9, r9, r3
 801fc5a:	b236      	sxth	r6, r6
 801fc5c:	9b02      	ldr	r3, [sp, #8]
 801fc5e:	ebc6 0808 	rsb	r8, r6, r8
 801fc62:	b23f      	sxth	r7, r7
 801fc64:	b22d      	sxth	r5, r5
 801fc66:	ebcc 0c07 	rsb	ip, ip, r7
 801fc6a:	1b5d      	subs	r5, r3, r5
 801fc6c:	eb19 0108 	adds.w	r1, r9, r8
 801fc70:	eb0c 0205 	add.w	r2, ip, r5
 801fc74:	d100      	bne.n	801fc78 <WM__UpdateChildPositions+0xda>
 801fc76:	b112      	cbz	r2, 801fc7e <WM__UpdateChildPositions+0xe0>
 801fc78:	4620      	mov	r0, r4
 801fc7a:	f000 f8c1 	bl	801fe00 <WM_ResizeWindow>
 801fc7e:	a806      	add	r0, sp, #24
 801fc80:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 801fc84:	6a1c      	ldr	r4, [r3, #32]
 801fc86:	f7fe fe43 	bl	801e910 <GUI_ALLOC_UnlockH>
 801fc8a:	e78f      	b.n	801fbac <WM__UpdateChildPositions+0xe>
 801fc8c:	b007      	add	sp, #28
 801fc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fc92 <WM__SendMessageNoPara>:
 801fc92:	b530      	push	{r4, r5, lr}
 801fc94:	b085      	sub	sp, #20
 801fc96:	4604      	mov	r4, r0
 801fc98:	2210      	movs	r2, #16
 801fc9a:	460d      	mov	r5, r1
 801fc9c:	4668      	mov	r0, sp
 801fc9e:	2100      	movs	r1, #0
 801fca0:	f001 ffd8 	bl	8021c54 <memset>
 801fca4:	4620      	mov	r0, r4
 801fca6:	f7fe fe1b 	bl	801e8e0 <GUI_ALLOC_h2p>
 801fcaa:	6903      	ldr	r3, [r0, #16]
 801fcac:	b11b      	cbz	r3, 801fcb6 <WM__SendMessageNoPara+0x24>
 801fcae:	9401      	str	r4, [sp, #4]
 801fcb0:	9500      	str	r5, [sp, #0]
 801fcb2:	4668      	mov	r0, sp
 801fcb4:	4798      	blx	r3
 801fcb6:	b005      	add	sp, #20
 801fcb8:	bd30      	pop	{r4, r5, pc}
	...

0801fcbc <WM__SendMessage>:
 801fcbc:	b570      	push	{r4, r5, r6, lr}
 801fcbe:	4c0d      	ldr	r4, [pc, #52]	; (801fcf4 <WM__SendMessage+0x38>)
 801fcc0:	6823      	ldr	r3, [r4, #0]
 801fcc2:	2b13      	cmp	r3, #19
 801fcc4:	4606      	mov	r6, r0
 801fcc6:	460d      	mov	r5, r1
 801fcc8:	dc12      	bgt.n	801fcf0 <WM__SendMessage+0x34>
 801fcca:	f7fe fe09 	bl	801e8e0 <GUI_ALLOC_h2p>
 801fcce:	6903      	ldr	r3, [r0, #16]
 801fcd0:	606e      	str	r6, [r5, #4]
 801fcd2:	b143      	cbz	r3, 801fce6 <WM__SendMessage+0x2a>
 801fcd4:	6822      	ldr	r2, [r4, #0]
 801fcd6:	4628      	mov	r0, r5
 801fcd8:	3201      	adds	r2, #1
 801fcda:	6022      	str	r2, [r4, #0]
 801fcdc:	4798      	blx	r3
 801fcde:	6823      	ldr	r3, [r4, #0]
 801fce0:	3b01      	subs	r3, #1
 801fce2:	6023      	str	r3, [r4, #0]
 801fce4:	bd70      	pop	{r4, r5, r6, pc}
 801fce6:	4628      	mov	r0, r5
 801fce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fcec:	f7fa b87c 	b.w	8019de8 <WM_DefaultProc>
 801fcf0:	bd70      	pop	{r4, r5, r6, pc}
 801fcf2:	bf00      	nop
 801fcf4:	2002c520 	.word	0x2002c520

0801fcf8 <WM__GetOrgX_AA>:
 801fcf8:	4b04      	ldr	r3, [pc, #16]	; (801fd0c <WM__GetOrgX_AA+0x14>)
 801fcfa:	681b      	ldr	r3, [r3, #0]
 801fcfc:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 801fd00:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801fd02:	b112      	cbz	r2, 801fd0a <WM__GetOrgX_AA+0x12>
 801fd04:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801fd08:	4358      	muls	r0, r3
 801fd0a:	4770      	bx	lr
 801fd0c:	20000114 	.word	0x20000114

0801fd10 <WM__GetOrgY_AA>:
 801fd10:	4b04      	ldr	r3, [pc, #16]	; (801fd24 <WM__GetOrgY_AA+0x14>)
 801fd12:	681b      	ldr	r3, [r3, #0]
 801fd14:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 801fd18:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801fd1a:	b112      	cbz	r2, 801fd22 <WM__GetOrgY_AA+0x12>
 801fd1c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801fd20:	4358      	muls	r0, r3
 801fd22:	4770      	bx	lr
 801fd24:	20000114 	.word	0x20000114

0801fd28 <WM_DeleteTimer>:
 801fd28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fd2a:	4605      	mov	r5, r0
 801fd2c:	b168      	cbz	r0, 801fd4a <WM_DeleteTimer+0x22>
 801fd2e:	f7fe fde1 	bl	801e8f4 <GUI_ALLOC_LockH>
 801fd32:	ac02      	add	r4, sp, #8
 801fd34:	f844 0d04 	str.w	r0, [r4, #-4]!
 801fd38:	6800      	ldr	r0, [r0, #0]
 801fd3a:	f7fc ff75 	bl	801cc28 <GUI_TIMER_Delete>
 801fd3e:	4620      	mov	r0, r4
 801fd40:	f7fe fde6 	bl	801e910 <GUI_ALLOC_UnlockH>
 801fd44:	4628      	mov	r0, r5
 801fd46:	f7fe fe03 	bl	801e950 <GUI_ALLOC_Free>
 801fd4a:	b003      	add	sp, #12
 801fd4c:	bd30      	pop	{r4, r5, pc}

0801fd4e <WM__DeleteAssocTimer>:
 801fd4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fd50:	4605      	mov	r5, r0
 801fd52:	a801      	add	r0, sp, #4
 801fd54:	f7fc ff34 	bl	801cbc0 <GUI_TIMER__GetFirstTimer>
 801fd58:	4604      	mov	r4, r0
 801fd5a:	b1dc      	cbz	r4, 801fd94 <WM__DeleteAssocTimer+0x46>
 801fd5c:	4620      	mov	r0, r4
 801fd5e:	2101      	movs	r1, #1
 801fd60:	f7fc ff96 	bl	801cc90 <GUI_TIMER_GetFlag>
 801fd64:	9b01      	ldr	r3, [sp, #4]
 801fd66:	b183      	cbz	r3, 801fd8a <WM__DeleteAssocTimer+0x3c>
 801fd68:	b178      	cbz	r0, 801fd8a <WM__DeleteAssocTimer+0x3c>
 801fd6a:	4618      	mov	r0, r3
 801fd6c:	f7fe fdb8 	bl	801e8e0 <GUI_ALLOC_h2p>
 801fd70:	6843      	ldr	r3, [r0, #4]
 801fd72:	42ab      	cmp	r3, r5
 801fd74:	d109      	bne.n	801fd8a <WM__DeleteAssocTimer+0x3c>
 801fd76:	4620      	mov	r0, r4
 801fd78:	a901      	add	r1, sp, #4
 801fd7a:	9e01      	ldr	r6, [sp, #4]
 801fd7c:	f7fc ff38 	bl	801cbf0 <GUI_TIMER__GetNextTimerLin>
 801fd80:	4604      	mov	r4, r0
 801fd82:	4630      	mov	r0, r6
 801fd84:	f7ff ffd0 	bl	801fd28 <WM_DeleteTimer>
 801fd88:	e7e7      	b.n	801fd5a <WM__DeleteAssocTimer+0xc>
 801fd8a:	4620      	mov	r0, r4
 801fd8c:	a901      	add	r1, sp, #4
 801fd8e:	f7fc ff2f 	bl	801cbf0 <GUI_TIMER__GetNextTimerLin>
 801fd92:	e7e1      	b.n	801fd58 <WM__DeleteAssocTimer+0xa>
 801fd94:	b002      	add	sp, #8
 801fd96:	bd70      	pop	{r4, r5, r6, pc}

0801fd98 <WM_SetSize>:
 801fd98:	e92d 41e7 	stmdb	sp!, {r0, r1, r2, r5, r6, r7, r8, lr}
 801fd9c:	460e      	mov	r6, r1
 801fd9e:	4690      	mov	r8, r2
 801fda0:	4607      	mov	r7, r0
 801fda2:	b1d0      	cbz	r0, 801fdda <WM_SetSize+0x42>
 801fda4:	f7fe fda6 	bl	801e8f4 <GUI_ALLOC_LockH>
 801fda8:	4603      	mov	r3, r0
 801fdaa:	a802      	add	r0, sp, #8
 801fdac:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801fdb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801fdb4:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 801fdb8:	f840 3d04 	str.w	r3, [r0, #-4]!
 801fdbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fdc0:	1a8a      	subs	r2, r1, r2
 801fdc2:	1aed      	subs	r5, r5, r3
 801fdc4:	43d2      	mvns	r2, r2
 801fdc6:	43ed      	mvns	r5, r5
 801fdc8:	4416      	add	r6, r2
 801fdca:	4445      	add	r5, r8
 801fdcc:	f7fe fda0 	bl	801e910 <GUI_ALLOC_UnlockH>
 801fdd0:	4638      	mov	r0, r7
 801fdd2:	4631      	mov	r1, r6
 801fdd4:	462a      	mov	r2, r5
 801fdd6:	f000 f813 	bl	801fe00 <WM_ResizeWindow>
 801fdda:	b003      	add	sp, #12
 801fddc:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}

0801fde0 <WM_SendToParent>:
 801fde0:	b538      	push	{r3, r4, r5, lr}
 801fde2:	4605      	mov	r5, r0
 801fde4:	460c      	mov	r4, r1
 801fde6:	b141      	cbz	r1, 801fdfa <WM_SendToParent+0x1a>
 801fde8:	f000 f92c 	bl	8020044 <WM_GetParent>
 801fdec:	b128      	cbz	r0, 801fdfa <WM_SendToParent+0x1a>
 801fdee:	60a5      	str	r5, [r4, #8]
 801fdf0:	4621      	mov	r1, r4
 801fdf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fdf6:	f7ff bf61 	b.w	801fcbc <WM__SendMessage>
 801fdfa:	bd38      	pop	{r3, r4, r5, pc}

0801fdfc <WM_SendMessageNoPara>:
 801fdfc:	f7ff bf49 	b.w	801fc92 <WM__SendMessageNoPara>

0801fe00 <WM_ResizeWindow>:
 801fe00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe04:	ea51 0302 	orrs.w	r3, r1, r2
 801fe08:	b08a      	sub	sp, #40	; 0x28
 801fe0a:	4680      	mov	r8, r0
 801fe0c:	460e      	mov	r6, r1
 801fe0e:	4617      	mov	r7, r2
 801fe10:	d06e      	beq.n	801fef0 <WM_ResizeWindow+0xf0>
 801fe12:	2800      	cmp	r0, #0
 801fe14:	d06c      	beq.n	801fef0 <WM_ResizeWindow+0xf0>
 801fe16:	f7fe fd6d 	bl	801e8f4 <GUI_ALLOC_LockH>
 801fe1a:	4603      	mov	r3, r0
 801fe1c:	9003      	str	r0, [sp, #12]
 801fe1e:	c803      	ldmia	r0, {r0, r1}
 801fe20:	ad04      	add	r5, sp, #16
 801fe22:	ac06      	add	r4, sp, #24
 801fe24:	e885 0003 	stmia.w	r5, {r0, r1}
 801fe28:	e884 0003 	stmia.w	r4, {r0, r1}
 801fe2c:	b17e      	cbz	r6, 801fe4e <WM_ResizeWindow+0x4e>
 801fe2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801fe30:	f402 7220 	and.w	r2, r2, #640	; 0x280
 801fe34:	2a80      	cmp	r2, #128	; 0x80
 801fe36:	d105      	bne.n	801fe44 <WM_ResizeWindow+0x44>
 801fe38:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801fe3c:	1b96      	subs	r6, r2, r6
 801fe3e:	f8ad 6018 	strh.w	r6, [sp, #24]
 801fe42:	e004      	b.n	801fe4e <WM_ResizeWindow+0x4e>
 801fe44:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801fe48:	4416      	add	r6, r2
 801fe4a:	f8ad 601c 	strh.w	r6, [sp, #28]
 801fe4e:	b187      	cbz	r7, 801fe72 <WM_ResizeWindow+0x72>
 801fe50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801fe52:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 801fe56:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801fe5a:	d105      	bne.n	801fe68 <WM_ResizeWindow+0x68>
 801fe5c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801fe60:	1bd7      	subs	r7, r2, r7
 801fe62:	f8ad 701a 	strh.w	r7, [sp, #26]
 801fe66:	e004      	b.n	801fe72 <WM_ResizeWindow+0x72>
 801fe68:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801fe6c:	4417      	add	r7, r2
 801fe6e:	f8ad 701e 	strh.w	r7, [sp, #30]
 801fe72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe74:	03da      	lsls	r2, r3, #15
 801fe76:	d502      	bpl.n	801fe7e <WM_ResizeWindow+0x7e>
 801fe78:	4640      	mov	r0, r8
 801fe7a:	f7f9 fa29 	bl	80192d0 <WM__InvalidateDrawAndDescs>
 801fe7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801fe82:	9b03      	ldr	r3, [sp, #12]
 801fe84:	e883 0003 	stmia.w	r3, {r0, r1}
 801fe88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe8a:	079b      	lsls	r3, r3, #30
 801fe8c:	d50a      	bpl.n	801fea4 <WM_ResizeWindow+0xa4>
 801fe8e:	a808      	add	r0, sp, #32
 801fe90:	4629      	mov	r1, r5
 801fe92:	4622      	mov	r2, r4
 801fe94:	f7fc fffc 	bl	801ce90 <GUI_MergeRect>
 801fe98:	9b03      	ldr	r3, [sp, #12]
 801fe9a:	a808      	add	r0, sp, #32
 801fe9c:	6999      	ldr	r1, [r3, #24]
 801fe9e:	6a1a      	ldr	r2, [r3, #32]
 801fea0:	f7f9 fb1a 	bl	80194d8 <WM__InvalidateRectEx>
 801fea4:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 801fea8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801feac:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 801feb0:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801feb4:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 801feb8:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 801febc:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 801fec0:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801fec4:	1ae3      	subs	r3, r4, r3
 801fec6:	1a38      	subs	r0, r7, r0
 801fec8:	ac0a      	add	r4, sp, #40	; 0x28
 801feca:	1aaa      	subs	r2, r5, r2
 801fecc:	9000      	str	r0, [sp, #0]
 801fece:	1a71      	subs	r1, r6, r1
 801fed0:	9803      	ldr	r0, [sp, #12]
 801fed2:	f7ff fe64 	bl	801fb9e <WM__UpdateChildPositions>
 801fed6:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 801feda:	f101 0008 	add.w	r0, r1, #8
 801fede:	f7fc fc67 	bl	801c7b0 <GUI__IntersectRect>
 801fee2:	4640      	mov	r0, r8
 801fee4:	2105      	movs	r1, #5
 801fee6:	f7f9 fb0f 	bl	8019508 <WM__SendMsgNoData>
 801feea:	4620      	mov	r0, r4
 801feec:	f7fe fd10 	bl	801e910 <GUI_ALLOC_UnlockH>
 801fef0:	b00a      	add	sp, #40	; 0x28
 801fef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801fef8 <WM_OnKey>:
 801fef8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801fefa:	4a0a      	ldr	r2, [pc, #40]	; (801ff24 <WM_OnKey+0x2c>)
 801fefc:	4603      	mov	r3, r0
 801fefe:	6810      	ldr	r0, [r2, #0]
 801ff00:	4a09      	ldr	r2, [pc, #36]	; (801ff28 <WM_OnKey+0x30>)
 801ff02:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 801ff06:	b148      	cbz	r0, 801ff1c <WM_OnKey+0x24>
 801ff08:	9300      	str	r3, [sp, #0]
 801ff0a:	230e      	movs	r3, #14
 801ff0c:	9101      	str	r1, [sp, #4]
 801ff0e:	9302      	str	r3, [sp, #8]
 801ff10:	a902      	add	r1, sp, #8
 801ff12:	ab00      	add	r3, sp, #0
 801ff14:	9305      	str	r3, [sp, #20]
 801ff16:	f7ff fed1 	bl	801fcbc <WM__SendMessage>
 801ff1a:	2001      	movs	r0, #1
 801ff1c:	b007      	add	sp, #28
 801ff1e:	f85d fb04 	ldr.w	pc, [sp], #4
 801ff22:	bf00      	nop
 801ff24:	2002c570 	.word	0x2002c570
 801ff28:	2002c560 	.word	0x2002c560

0801ff2c <_MoveDescendents>:
 801ff2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff30:	b088      	sub	sp, #32
 801ff32:	4606      	mov	r6, r0
 801ff34:	460c      	mov	r4, r1
 801ff36:	4615      	mov	r5, r2
 801ff38:	a804      	add	r0, sp, #16
 801ff3a:	2100      	movs	r1, #0
 801ff3c:	2210      	movs	r2, #16
 801ff3e:	f001 fe89 	bl	8021c54 <memset>
 801ff42:	b336      	cbz	r6, 801ff92 <_MoveDescendents+0x66>
 801ff44:	4630      	mov	r0, r6
 801ff46:	f7fe fcd5 	bl	801e8f4 <GUI_ALLOC_LockH>
 801ff4a:	4621      	mov	r1, r4
 801ff4c:	462a      	mov	r2, r5
 801ff4e:	9001      	str	r0, [sp, #4]
 801ff50:	f7fc ff8e 	bl	801ce70 <GUI_MoveRect>
 801ff54:	9801      	ldr	r0, [sp, #4]
 801ff56:	4621      	mov	r1, r4
 801ff58:	3008      	adds	r0, #8
 801ff5a:	462a      	mov	r2, r5
 801ff5c:	f7fc ff88 	bl	801ce70 <GUI_MoveRect>
 801ff60:	a808      	add	r0, sp, #32
 801ff62:	f850 2d1c 	ldr.w	r2, [r0, #-28]!
 801ff66:	f8d2 801c 	ldr.w	r8, [r2, #28]
 801ff6a:	6a17      	ldr	r7, [r2, #32]
 801ff6c:	f7fe fcd0 	bl	801e910 <GUI_ALLOC_UnlockH>
 801ff70:	4640      	mov	r0, r8
 801ff72:	4621      	mov	r1, r4
 801ff74:	462a      	mov	r2, r5
 801ff76:	f7ff ffd9 	bl	801ff2c <_MoveDescendents>
 801ff7a:	2303      	movs	r3, #3
 801ff7c:	9304      	str	r3, [sp, #16]
 801ff7e:	4630      	mov	r0, r6
 801ff80:	ab02      	add	r3, sp, #8
 801ff82:	a904      	add	r1, sp, #16
 801ff84:	9307      	str	r3, [sp, #28]
 801ff86:	9402      	str	r4, [sp, #8]
 801ff88:	9503      	str	r5, [sp, #12]
 801ff8a:	463e      	mov	r6, r7
 801ff8c:	f7ff fe96 	bl	801fcbc <WM__SendMessage>
 801ff90:	e7d7      	b.n	801ff42 <_MoveDescendents+0x16>
 801ff92:	b008      	add	sp, #32
 801ff94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ff98 <WM__MoveWindow>:
 801ff98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ff9c:	b08b      	sub	sp, #44	; 0x2c
 801ff9e:	4606      	mov	r6, r0
 801ffa0:	460d      	mov	r5, r1
 801ffa2:	4614      	mov	r4, r2
 801ffa4:	a806      	add	r0, sp, #24
 801ffa6:	2100      	movs	r1, #0
 801ffa8:	2210      	movs	r2, #16
 801ffaa:	f001 fe53 	bl	8021c54 <memset>
 801ffae:	2e00      	cmp	r6, #0
 801ffb0:	d043      	beq.n	802003a <WM__MoveWindow+0xa2>
 801ffb2:	b90d      	cbnz	r5, 801ffb8 <WM__MoveWindow+0x20>
 801ffb4:	2c00      	cmp	r4, #0
 801ffb6:	d040      	beq.n	802003a <WM__MoveWindow+0xa2>
 801ffb8:	4630      	mov	r0, r6
 801ffba:	f7fe fc9b 	bl	801e8f4 <GUI_ALLOC_LockH>
 801ffbe:	4603      	mov	r3, r0
 801ffc0:	9001      	str	r0, [sp, #4]
 801ffc2:	c803      	ldmia	r0, {r0, r1}
 801ffc4:	f10d 0808 	add.w	r8, sp, #8
 801ffc8:	e888 0003 	stmia.w	r8, {r0, r1}
 801ffcc:	4622      	mov	r2, r4
 801ffce:	4618      	mov	r0, r3
 801ffd0:	4629      	mov	r1, r5
 801ffd2:	f7fc ff4d 	bl	801ce70 <GUI_MoveRect>
 801ffd6:	9801      	ldr	r0, [sp, #4]
 801ffd8:	af0a      	add	r7, sp, #40	; 0x28
 801ffda:	4629      	mov	r1, r5
 801ffdc:	4622      	mov	r2, r4
 801ffde:	3008      	adds	r0, #8
 801ffe0:	f7fc ff46 	bl	801ce70 <GUI_MoveRect>
 801ffe4:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 801ffe8:	f8d3 901c 	ldr.w	r9, [r3, #28]
 801ffec:	4638      	mov	r0, r7
 801ffee:	f7fe fc8f 	bl	801e910 <GUI_ALLOC_UnlockH>
 801fff2:	4622      	mov	r2, r4
 801fff4:	4648      	mov	r0, r9
 801fff6:	4629      	mov	r1, r5
 801fff8:	f7ff ff98 	bl	801ff2c <_MoveDescendents>
 801fffc:	4630      	mov	r0, r6
 801fffe:	f7fe fc79 	bl	801e8f4 <GUI_ALLOC_LockH>
 8020002:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8020004:	9001      	str	r0, [sp, #4]
 8020006:	0792      	lsls	r2, r2, #30
 8020008:	d50a      	bpl.n	8020020 <WM__MoveWindow+0x88>
 802000a:	6981      	ldr	r1, [r0, #24]
 802000c:	b141      	cbz	r1, 8020020 <WM__MoveWindow+0x88>
 802000e:	6a02      	ldr	r2, [r0, #32]
 8020010:	f7f9 fa4d 	bl	80194ae <WM__InvalidateParent>
 8020014:	9b01      	ldr	r3, [sp, #4]
 8020016:	4640      	mov	r0, r8
 8020018:	6999      	ldr	r1, [r3, #24]
 802001a:	6a1a      	ldr	r2, [r3, #32]
 802001c:	f7f9 fa47 	bl	80194ae <WM__InvalidateParent>
 8020020:	4638      	mov	r0, r7
 8020022:	f7fe fc75 	bl	801e910 <GUI_ALLOC_UnlockH>
 8020026:	2303      	movs	r3, #3
 8020028:	9306      	str	r3, [sp, #24]
 802002a:	4630      	mov	r0, r6
 802002c:	ab04      	add	r3, sp, #16
 802002e:	a906      	add	r1, sp, #24
 8020030:	9309      	str	r3, [sp, #36]	; 0x24
 8020032:	9504      	str	r5, [sp, #16]
 8020034:	9405      	str	r4, [sp, #20]
 8020036:	f7ff fe41 	bl	801fcbc <WM__SendMessage>
 802003a:	b00b      	add	sp, #44	; 0x2c
 802003c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08020040 <WM_MoveWindow>:
 8020040:	f7ff bfaa 	b.w	801ff98 <WM__MoveWindow>

08020044 <WM_GetParent>:
 8020044:	b508      	push	{r3, lr}
 8020046:	4603      	mov	r3, r0
 8020048:	b110      	cbz	r0, 8020050 <WM_GetParent+0xc>
 802004a:	f7fe fc49 	bl	801e8e0 <GUI_ALLOC_h2p>
 802004e:	6983      	ldr	r3, [r0, #24]
 8020050:	4618      	mov	r0, r3
 8020052:	bd08      	pop	{r3, pc}

08020054 <WM_GetWindowOrgX>:
 8020054:	b508      	push	{r3, lr}
 8020056:	b120      	cbz	r0, 8020062 <WM_GetWindowOrgX+0xe>
 8020058:	f7fe fc42 	bl	801e8e0 <GUI_ALLOC_h2p>
 802005c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8020060:	bd08      	pop	{r3, pc}
 8020062:	bd08      	pop	{r3, pc}

08020064 <WM_GetFirstChild>:
 8020064:	b508      	push	{r3, lr}
 8020066:	4603      	mov	r3, r0
 8020068:	b110      	cbz	r0, 8020070 <WM_GetFirstChild+0xc>
 802006a:	f7fe fc39 	bl	801e8e0 <GUI_ALLOC_h2p>
 802006e:	69c3      	ldr	r3, [r0, #28]
 8020070:	4618      	mov	r0, r3
 8020072:	bd08      	pop	{r3, pc}

08020074 <WM_GetDesktopWindow>:
 8020074:	4b03      	ldr	r3, [pc, #12]	; (8020084 <WM_GetDesktopWindow+0x10>)
 8020076:	681b      	ldr	r3, [r3, #0]
 8020078:	7c5a      	ldrb	r2, [r3, #17]
 802007a:	4b03      	ldr	r3, [pc, #12]	; (8020088 <WM_GetDesktopWindow+0x14>)
 802007c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020080:	4770      	bx	lr
 8020082:	bf00      	nop
 8020084:	20000114 	.word	0x20000114
 8020088:	2002c550 	.word	0x2002c550

0802008c <WM__GetClientRectEx>:
 802008c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802008e:	460d      	mov	r5, r1
 8020090:	b158      	cbz	r0, 80200aa <WM__GetClientRectEx+0x1e>
 8020092:	b151      	cbz	r1, 80200aa <WM__GetClientRectEx+0x1e>
 8020094:	f7fe fc2e 	bl	801e8f4 <GUI_ALLOC_LockH>
 8020098:	ac02      	add	r4, sp, #8
 802009a:	4629      	mov	r1, r5
 802009c:	f844 0d04 	str.w	r0, [r4, #-4]!
 80200a0:	f7f9 fa3d 	bl	801951e <WM__GetClientRectWin>
 80200a4:	4620      	mov	r0, r4
 80200a6:	f7fe fc33 	bl	801e910 <GUI_ALLOC_UnlockH>
 80200aa:	b003      	add	sp, #12
 80200ac:	bd30      	pop	{r4, r5, pc}
	...

080200b0 <WM__AddCriticalHandle>:
 80200b0:	4b02      	ldr	r3, [pc, #8]	; (80200bc <WM__AddCriticalHandle+0xc>)
 80200b2:	681a      	ldr	r2, [r3, #0]
 80200b4:	6002      	str	r2, [r0, #0]
 80200b6:	6018      	str	r0, [r3, #0]
 80200b8:	4770      	bx	lr
 80200ba:	bf00      	nop
 80200bc:	2002c584 	.word	0x2002c584

080200c0 <WM_BringToBottom>:
 80200c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80200c4:	4604      	mov	r4, r0
 80200c6:	b087      	sub	sp, #28
 80200c8:	2800      	cmp	r0, #0
 80200ca:	d039      	beq.n	8020140 <WM_BringToBottom+0x80>
 80200cc:	f7fe fc12 	bl	801e8f4 <GUI_ALLOC_LockH>
 80200d0:	4603      	mov	r3, r0
 80200d2:	9001      	str	r0, [sp, #4]
 80200d4:	c803      	ldmia	r0, {r0, r1}
 80200d6:	ad04      	add	r5, sp, #16
 80200d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80200dc:	a801      	add	r0, sp, #4
 80200de:	6a1e      	ldr	r6, [r3, #32]
 80200e0:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 80200e4:	f7fe fc14 	bl	801e910 <GUI_ALLOC_UnlockH>
 80200e8:	4620      	mov	r0, r4
 80200ea:	f001 fd0e 	bl	8021b0a <WM__GetPrevSibling>
 80200ee:	4607      	mov	r7, r0
 80200f0:	b330      	cbz	r0, 8020140 <WM_BringToBottom+0x80>
 80200f2:	4620      	mov	r0, r4
 80200f4:	f7ff ffa6 	bl	8020044 <WM_GetParent>
 80200f8:	f019 0f02 	tst.w	r9, #2
 80200fc:	4680      	mov	r8, r0
 80200fe:	d004      	beq.n	802010a <WM_BringToBottom+0x4a>
 8020100:	4628      	mov	r0, r5
 8020102:	4641      	mov	r1, r8
 8020104:	4632      	mov	r2, r6
 8020106:	f7f9 f9e7 	bl	80194d8 <WM__InvalidateRectEx>
 802010a:	4620      	mov	r0, r4
 802010c:	f7fe fbf2 	bl	801e8f4 <GUI_ALLOC_LockH>
 8020110:	9001      	str	r0, [sp, #4]
 8020112:	4640      	mov	r0, r8
 8020114:	f7fe fbee 	bl	801e8f4 <GUI_ALLOC_LockH>
 8020118:	9003      	str	r0, [sp, #12]
 802011a:	4638      	mov	r0, r7
 802011c:	f7fe fbea 	bl	801e8f4 <GUI_ALLOC_LockH>
 8020120:	9b03      	ldr	r3, [sp, #12]
 8020122:	9a01      	ldr	r2, [sp, #4]
 8020124:	69d9      	ldr	r1, [r3, #28]
 8020126:	6206      	str	r6, [r0, #32]
 8020128:	9002      	str	r0, [sp, #8]
 802012a:	6211      	str	r1, [r2, #32]
 802012c:	a801      	add	r0, sp, #4
 802012e:	61dc      	str	r4, [r3, #28]
 8020130:	f7fe fbee 	bl	801e910 <GUI_ALLOC_UnlockH>
 8020134:	a803      	add	r0, sp, #12
 8020136:	f7fe fbeb 	bl	801e910 <GUI_ALLOC_UnlockH>
 802013a:	a802      	add	r0, sp, #8
 802013c:	f7fe fbe8 	bl	801e910 <GUI_ALLOC_UnlockH>
 8020140:	b007      	add	sp, #28
 8020142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08020146 <_Convert16>:
 8020146:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802014a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 802014e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8020152:	4605      	mov	r5, r0
 8020154:	460e      	mov	r6, r1
 8020156:	4690      	mov	r8, r2
 8020158:	461f      	mov	r7, r3
 802015a:	4614      	mov	r4, r2
 802015c:	4689      	mov	r9, r1
 802015e:	f835 0b02 	ldrh.w	r0, [r5], #2
 8020162:	47d8      	blx	fp
 8020164:	47d0      	blx	sl
 8020166:	3c01      	subs	r4, #1
 8020168:	f849 0b04 	str.w	r0, [r9], #4
 802016c:	d1f7      	bne.n	802015e <_Convert16+0x18>
 802016e:	2f1f      	cmp	r7, #31
 8020170:	d806      	bhi.n	8020180 <_Convert16+0x3a>
 8020172:	4630      	mov	r0, r6
 8020174:	4641      	mov	r1, r8
 8020176:	463a      	mov	r2, r7
 8020178:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802017c:	f001 b945 	b.w	802140a <GUI__CompactPixelIndices>
 8020180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020184 <_Convert8>:
 8020184:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020188:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 802018c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8020190:	4605      	mov	r5, r0
 8020192:	460e      	mov	r6, r1
 8020194:	4690      	mov	r8, r2
 8020196:	461f      	mov	r7, r3
 8020198:	4689      	mov	r9, r1
 802019a:	4604      	mov	r4, r0
 802019c:	f814 0b01 	ldrb.w	r0, [r4], #1
 80201a0:	47d8      	blx	fp
 80201a2:	47d0      	blx	sl
 80201a4:	1b2b      	subs	r3, r5, r4
 80201a6:	4443      	add	r3, r8
 80201a8:	f849 0b04 	str.w	r0, [r9], #4
 80201ac:	2b00      	cmp	r3, #0
 80201ae:	d1f5      	bne.n	802019c <_Convert8+0x18>
 80201b0:	2f1f      	cmp	r7, #31
 80201b2:	d806      	bhi.n	80201c2 <_Convert8+0x3e>
 80201b4:	4630      	mov	r0, r6
 80201b6:	4641      	mov	r1, r8
 80201b8:	463a      	mov	r2, r7
 80201ba:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201be:	f001 b924 	b.w	802140a <GUI__CompactPixelIndices>
 80201c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080201c8 <GUI_MEMDEV__WriteToActiveOpaque>:
 80201c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201cc:	b09d      	sub	sp, #116	; 0x74
 80201ce:	4606      	mov	r6, r0
 80201d0:	910f      	str	r1, [sp, #60]	; 0x3c
 80201d2:	920d      	str	r2, [sp, #52]	; 0x34
 80201d4:	2800      	cmp	r0, #0
 80201d6:	f000 8386 	beq.w	80208e6 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 80201da:	f7fe fb8b 	bl	801e8f4 <GUI_ALLOC_LockH>
 80201de:	ab1c      	add	r3, sp, #112	; 0x70
 80201e0:	6944      	ldr	r4, [r0, #20]
 80201e2:	f843 0d1c 	str.w	r0, [r3, #-28]!
 80201e6:	4618      	mov	r0, r3
 80201e8:	f7fe fb92 	bl	801e910 <GUI_ALLOC_UnlockH>
 80201ec:	4630      	mov	r0, r6
 80201ee:	f7fa fe37 	bl	801ae60 <GUI_MEMDEV_GetBitsPerPixel>
 80201f2:	2808      	cmp	r0, #8
 80201f4:	4601      	mov	r1, r0
 80201f6:	dd02      	ble.n	80201fe <GUI_MEMDEV__WriteToActiveOpaque+0x36>
 80201f8:	2c00      	cmp	r4, #0
 80201fa:	f000 81c3 	beq.w	8020584 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 80201fe:	2201      	movs	r2, #1
 8020200:	f04f 0800 	mov.w	r8, #0
 8020204:	4630      	mov	r0, r6
 8020206:	921b      	str	r2, [sp, #108]	; 0x6c
 8020208:	920b      	str	r2, [sp, #44]	; 0x2c
 802020a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 802020e:	f7fe fb71 	bl	801e8f4 <GUI_ALLOC_LockH>
 8020212:	6803      	ldr	r3, [r0, #0]
 8020214:	f8df a60c 	ldr.w	sl, [pc, #1548]	; 8020824 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 8020218:	691b      	ldr	r3, [r3, #16]
 802021a:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 802021e:	685b      	ldr	r3, [r3, #4]
 8020220:	930e      	str	r3, [sp, #56]	; 0x38
 8020222:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8020226:	f8da 3000 	ldr.w	r3, [sl]
 802022a:	f84b 0d14 	str.w	r0, [fp, #-20]!
 802022e:	6904      	ldr	r4, [r0, #16]
 8020230:	6945      	ldr	r5, [r0, #20]
 8020232:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8020236:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802023a:	7c58      	ldrb	r0, [r3, #17]
 802023c:	9112      	str	r1, [sp, #72]	; 0x48
 802023e:	f7fb fdcf 	bl	801bde0 <GUI_GetBitsPerPixelEx>
 8020242:	f8da 3000 	ldr.w	r3, [sl]
 8020246:	9010      	str	r0, [sp, #64]	; 0x40
 8020248:	7c58      	ldrb	r0, [r3, #17]
 802024a:	f7fb fde7 	bl	801be1c <GUI_GetpfIndex2ColorEx>
 802024e:	4603      	mov	r3, r0
 8020250:	4658      	mov	r0, fp
 8020252:	9309      	str	r3, [sp, #36]	; 0x24
 8020254:	f7fe fb5c 	bl	801e910 <GUI_ALLOC_UnlockH>
 8020258:	2c08      	cmp	r4, #8
 802025a:	4651      	mov	r1, sl
 802025c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802025e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020260:	d904      	bls.n	802026c <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 8020262:	2c10      	cmp	r4, #16
 8020264:	bf8c      	ite	hi
 8020266:	2204      	movhi	r2, #4
 8020268:	2202      	movls	r2, #2
 802026a:	e005      	b.n	8020278 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 802026c:	2c01      	cmp	r4, #1
 802026e:	d103      	bne.n	8020278 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 8020270:	9411      	str	r4, [sp, #68]	; 0x44
 8020272:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 8020276:	e000      	b.n	802027a <GUI_MEMDEV__WriteToActiveOpaque+0xb2>
 8020278:	9211      	str	r2, [sp, #68]	; 0x44
 802027a:	980e      	ldr	r0, [sp, #56]	; 0x38
 802027c:	4298      	cmp	r0, r3
 802027e:	f000 80e2 	beq.w	8020446 <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 8020282:	680b      	ldr	r3, [r1, #0]
 8020284:	7c58      	ldrb	r0, [r3, #17]
 8020286:	f7fb fdd1 	bl	801be2c <GUI_GetpfColor2IndexEx>
 802028a:	9013      	str	r0, [sp, #76]	; 0x4c
 802028c:	00b8      	lsls	r0, r7, #2
 802028e:	f7fe fd79 	bl	801ed84 <GUI_ALLOC_AllocNoInit>
 8020292:	900c      	str	r0, [sp, #48]	; 0x30
 8020294:	2800      	cmp	r0, #0
 8020296:	f000 8326 	beq.w	80208e6 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 802029a:	4630      	mov	r0, r6
 802029c:	f7f9 ff7c 	bl	801a198 <GUI_MEMDEV_GetDataPtr>
 80202a0:	4606      	mov	r6, r0
 80202a2:	2d00      	cmp	r5, #0
 80202a4:	f000 80be 	beq.w	8020424 <GUI_MEMDEV__WriteToActiveOpaque+0x25c>
 80202a8:	4628      	mov	r0, r5
 80202aa:	f7fe fb23 	bl	801e8f4 <GUI_ALLOC_LockH>
 80202ae:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80202b2:	9018      	str	r0, [sp, #96]	; 0x60
 80202b4:	f04f 0a00 	mov.w	sl, #0
 80202b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80202ba:	4592      	cmp	sl, r2
 80202bc:	f280 80ae 	bge.w	802041c <GUI_MEMDEV__WriteToActiveOpaque+0x254>
 80202c0:	9818      	ldr	r0, [sp, #96]	; 0x60
 80202c2:	2300      	movs	r3, #0
 80202c4:	9319      	str	r3, [sp, #100]	; 0x64
 80202c6:	6883      	ldr	r3, [r0, #8]
 80202c8:	a919      	add	r1, sp, #100	; 0x64
 80202ca:	695b      	ldr	r3, [r3, #20]
 80202cc:	4652      	mov	r2, sl
 80202ce:	4798      	blx	r3
 80202d0:	42b8      	cmp	r0, r7
 80202d2:	4605      	mov	r5, r0
 80202d4:	d12f      	bne.n	8020336 <GUI_MEMDEV__WriteToActiveOpaque+0x16e>
 80202d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80202d8:	f7fe fb0c 	bl	801e8f4 <GUI_ALLOC_LockH>
 80202dc:	2c08      	cmp	r4, #8
 80202de:	4601      	mov	r1, r0
 80202e0:	9016      	str	r0, [sp, #88]	; 0x58
 80202e2:	d909      	bls.n	80202f8 <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 80202e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80202e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80202e8:	9200      	str	r2, [sp, #0]
 80202ea:	9301      	str	r3, [sp, #4]
 80202ec:	4630      	mov	r0, r6
 80202ee:	463a      	mov	r2, r7
 80202f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80202f2:	f7ff ff28 	bl	8020146 <_Convert16>
 80202f6:	e008      	b.n	802030a <GUI_MEMDEV__WriteToActiveOpaque+0x142>
 80202f8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80202fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80202fc:	9000      	str	r0, [sp, #0]
 80202fe:	9201      	str	r2, [sp, #4]
 8020300:	4630      	mov	r0, r6
 8020302:	463a      	mov	r2, r7
 8020304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020306:	f7ff ff3d 	bl	8020184 <_Convert8>
 802030a:	2301      	movs	r3, #1
 802030c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802030e:	9002      	str	r0, [sp, #8]
 8020310:	ad1c      	add	r5, sp, #112	; 0x70
 8020312:	2200      	movs	r2, #0
 8020314:	9300      	str	r3, [sp, #0]
 8020316:	9301      	str	r3, [sp, #4]
 8020318:	9203      	str	r2, [sp, #12]
 802031a:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 802031e:	9204      	str	r2, [sp, #16]
 8020320:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020322:	f8cd 8014 	str.w	r8, [sp, #20]
 8020326:	4659      	mov	r1, fp
 8020328:	463a      	mov	r2, r7
 802032a:	f7fb ff9b 	bl	801c264 <LCD_DrawBitmap>
 802032e:	4628      	mov	r0, r5
 8020330:	f7fe faee 	bl	801e910 <GUI_ALLOC_UnlockH>
 8020334:	e060      	b.n	80203f8 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 8020336:	2c01      	cmp	r4, #1
 8020338:	d15c      	bne.n	80203f4 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 802033a:	2d00      	cmp	r5, #0
 802033c:	d05c      	beq.n	80203f8 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 802033e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020340:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8020342:	f8cd 900c 	str.w	r9, [sp, #12]
 8020346:	2208      	movs	r2, #8
 8020348:	fb90 f2f2 	sdiv	r2, r0, r2
 802034c:	4432      	add	r2, r6
 802034e:	2301      	movs	r3, #1
 8020350:	9204      	str	r2, [sp, #16]
 8020352:	f000 0207 	and.w	r2, r0, #7
 8020356:	9300      	str	r3, [sp, #0]
 8020358:	4408      	add	r0, r1
 802035a:	9301      	str	r3, [sp, #4]
 802035c:	9302      	str	r3, [sp, #8]
 802035e:	9206      	str	r2, [sp, #24]
 8020360:	4659      	mov	r1, fp
 8020362:	462a      	mov	r2, r5
 8020364:	f8cd 8014 	str.w	r8, [sp, #20]
 8020368:	f7fb fea0 	bl	801c0ac <LCD__DrawBitmap_1bpp>
 802036c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802036e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8020370:	441d      	add	r5, r3
 8020372:	6883      	ldr	r3, [r0, #8]
 8020374:	9519      	str	r5, [sp, #100]	; 0x64
 8020376:	695b      	ldr	r3, [r3, #20]
 8020378:	a919      	add	r1, sp, #100	; 0x64
 802037a:	4652      	mov	r2, sl
 802037c:	4798      	blx	r3
 802037e:	4605      	mov	r5, r0
 8020380:	e7db      	b.n	802033a <GUI_MEMDEV__WriteToActiveOpaque+0x172>
 8020382:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020384:	f7fe fab6 	bl	801e8f4 <GUI_ALLOC_LockH>
 8020388:	2c08      	cmp	r4, #8
 802038a:	4601      	mov	r1, r0
 802038c:	9016      	str	r0, [sp, #88]	; 0x58
 802038e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020390:	d938      	bls.n	8020404 <GUI_MEMDEV__WriteToActiveOpaque+0x23c>
 8020392:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020394:	9200      	str	r2, [sp, #0]
 8020396:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020398:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802039a:	9301      	str	r3, [sp, #4]
 802039c:	fb00 6002 	mla	r0, r0, r2, r6
 80203a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80203a2:	462a      	mov	r2, r5
 80203a4:	f7ff fecf 	bl	8020146 <_Convert16>
 80203a8:	2301      	movs	r3, #1
 80203aa:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 80203ae:	9810      	ldr	r0, [sp, #64]	; 0x40
 80203b0:	9300      	str	r3, [sp, #0]
 80203b2:	2200      	movs	r2, #0
 80203b4:	9301      	str	r3, [sp, #4]
 80203b6:	9002      	str	r0, [sp, #8]
 80203b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80203ba:	9203      	str	r2, [sp, #12]
 80203bc:	9819      	ldr	r0, [sp, #100]	; 0x64
 80203be:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 80203c2:	9204      	str	r2, [sp, #16]
 80203c4:	4408      	add	r0, r1
 80203c6:	462a      	mov	r2, r5
 80203c8:	4659      	mov	r1, fp
 80203ca:	f8cd 8014 	str.w	r8, [sp, #20]
 80203ce:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80203d2:	f7fb ff47 	bl	801c264 <LCD_DrawBitmap>
 80203d6:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80203da:	4660      	mov	r0, ip
 80203dc:	f7fe fa98 	bl	801e910 <GUI_ALLOC_UnlockH>
 80203e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80203e2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80203e4:	441d      	add	r5, r3
 80203e6:	6883      	ldr	r3, [r0, #8]
 80203e8:	9519      	str	r5, [sp, #100]	; 0x64
 80203ea:	695b      	ldr	r3, [r3, #20]
 80203ec:	a919      	add	r1, sp, #100	; 0x64
 80203ee:	4652      	mov	r2, sl
 80203f0:	4798      	blx	r3
 80203f2:	4605      	mov	r5, r0
 80203f4:	2d00      	cmp	r5, #0
 80203f6:	d1c4      	bne.n	8020382 <GUI_MEMDEV__WriteToActiveOpaque+0x1ba>
 80203f8:	444e      	add	r6, r9
 80203fa:	f10a 0a01 	add.w	sl, sl, #1
 80203fe:	f10b 0b01 	add.w	fp, fp, #1
 8020402:	e759      	b.n	80202b8 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 8020404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020406:	9300      	str	r3, [sp, #0]
 8020408:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802040a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802040c:	9201      	str	r2, [sp, #4]
 802040e:	fb00 6003 	mla	r0, r0, r3, r6
 8020412:	462a      	mov	r2, r5
 8020414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020416:	f7ff feb5 	bl	8020184 <_Convert8>
 802041a:	e7c5      	b.n	80203a8 <GUI_MEMDEV__WriteToActiveOpaque+0x1e0>
 802041c:	a818      	add	r0, sp, #96	; 0x60
 802041e:	f7fe fa77 	bl	801e910 <GUI_ALLOC_UnlockH>
 8020422:	e00e      	b.n	8020442 <GUI_MEMDEV__WriteToActiveOpaque+0x27a>
 8020424:	2301      	movs	r3, #1
 8020426:	9300      	str	r3, [sp, #0]
 8020428:	9301      	str	r3, [sp, #4]
 802042a:	9004      	str	r0, [sp, #16]
 802042c:	9402      	str	r4, [sp, #8]
 802042e:	f8cd 900c 	str.w	r9, [sp, #12]
 8020432:	f8cd 8014 	str.w	r8, [sp, #20]
 8020436:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020438:	990d      	ldr	r1, [sp, #52]	; 0x34
 802043a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802043c:	463a      	mov	r2, r7
 802043e:	f7fb ff11 	bl	801c264 <LCD_DrawBitmap>
 8020442:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020444:	e24d      	b.n	80208e2 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 8020446:	4630      	mov	r0, r6
 8020448:	f7f9 fea6 	bl	801a198 <GUI_MEMDEV_GetDataPtr>
 802044c:	4606      	mov	r6, r0
 802044e:	2d00      	cmp	r5, #0
 8020450:	f000 808a 	beq.w	8020568 <GUI_MEMDEV__WriteToActiveOpaque+0x3a0>
 8020454:	4628      	mov	r0, r5
 8020456:	f7fe fa4d 	bl	801e8f4 <GUI_ALLOC_LockH>
 802045a:	2500      	movs	r5, #0
 802045c:	9018      	str	r0, [sp, #96]	; 0x60
 802045e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020460:	429d      	cmp	r5, r3
 8020462:	da7d      	bge.n	8020560 <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 8020464:	9818      	ldr	r0, [sp, #96]	; 0x60
 8020466:	2300      	movs	r3, #0
 8020468:	9319      	str	r3, [sp, #100]	; 0x64
 802046a:	6883      	ldr	r3, [r0, #8]
 802046c:	a919      	add	r1, sp, #100	; 0x64
 802046e:	695b      	ldr	r3, [r3, #20]
 8020470:	462a      	mov	r2, r5
 8020472:	4798      	blx	r3
 8020474:	42b8      	cmp	r0, r7
 8020476:	4682      	mov	sl, r0
 8020478:	d124      	bne.n	80204c4 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 802047a:	46aa      	mov	sl, r5
 802047c:	9818      	ldr	r0, [sp, #96]	; 0x60
 802047e:	6883      	ldr	r3, [r0, #8]
 8020480:	f10a 0b01 	add.w	fp, sl, #1
 8020484:	695b      	ldr	r3, [r3, #20]
 8020486:	a919      	add	r1, sp, #100	; 0x64
 8020488:	465a      	mov	r2, fp
 802048a:	4798      	blx	r3
 802048c:	42b8      	cmp	r0, r7
 802048e:	d101      	bne.n	8020494 <GUI_MEMDEV__WriteToActiveOpaque+0x2cc>
 8020490:	46da      	mov	sl, fp
 8020492:	e7f3      	b.n	802047c <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 8020494:	ebc5 0b0a 	rsb	fp, r5, sl
 8020498:	990d      	ldr	r1, [sp, #52]	; 0x34
 802049a:	9604      	str	r6, [sp, #16]
 802049c:	2301      	movs	r3, #1
 802049e:	f10b 0b01 	add.w	fp, fp, #1
 80204a2:	9300      	str	r3, [sp, #0]
 80204a4:	9301      	str	r3, [sp, #4]
 80204a6:	4429      	add	r1, r5
 80204a8:	9402      	str	r4, [sp, #8]
 80204aa:	f8cd 900c 	str.w	r9, [sp, #12]
 80204ae:	f8cd 8014 	str.w	r8, [sp, #20]
 80204b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80204b4:	463a      	mov	r2, r7
 80204b6:	465b      	mov	r3, fp
 80204b8:	f7fb fed4 	bl	801c264 <LCD_DrawBitmap>
 80204bc:	fb09 660b 	mla	r6, r9, fp, r6
 80204c0:	4655      	mov	r5, sl
 80204c2:	e04b      	b.n	802055c <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 80204c4:	2c01      	cmp	r4, #1
 80204c6:	d127      	bne.n	8020518 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 80204c8:	f1ba 0f00 	cmp.w	sl, #0
 80204cc:	d022      	beq.n	8020514 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 80204ce:	9819      	ldr	r0, [sp, #100]	; 0x64
 80204d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80204d2:	f8cd 900c 	str.w	r9, [sp, #12]
 80204d6:	2208      	movs	r2, #8
 80204d8:	fb90 f2f2 	sdiv	r2, r0, r2
 80204dc:	4432      	add	r2, r6
 80204de:	9204      	str	r2, [sp, #16]
 80204e0:	f000 0207 	and.w	r2, r0, #7
 80204e4:	4408      	add	r0, r1
 80204e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80204e8:	9206      	str	r2, [sp, #24]
 80204ea:	2301      	movs	r3, #1
 80204ec:	4652      	mov	r2, sl
 80204ee:	9300      	str	r3, [sp, #0]
 80204f0:	9301      	str	r3, [sp, #4]
 80204f2:	9302      	str	r3, [sp, #8]
 80204f4:	4429      	add	r1, r5
 80204f6:	f8cd 8014 	str.w	r8, [sp, #20]
 80204fa:	f7fb fdd7 	bl	801c0ac <LCD__DrawBitmap_1bpp>
 80204fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020500:	9818      	ldr	r0, [sp, #96]	; 0x60
 8020502:	4453      	add	r3, sl
 8020504:	9319      	str	r3, [sp, #100]	; 0x64
 8020506:	6883      	ldr	r3, [r0, #8]
 8020508:	a919      	add	r1, sp, #100	; 0x64
 802050a:	695b      	ldr	r3, [r3, #20]
 802050c:	462a      	mov	r2, r5
 802050e:	4798      	blx	r3
 8020510:	4682      	mov	sl, r0
 8020512:	e7d9      	b.n	80204c8 <GUI_MEMDEV__WriteToActiveOpaque+0x300>
 8020514:	444e      	add	r6, r9
 8020516:	e021      	b.n	802055c <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 8020518:	f1ba 0f00 	cmp.w	sl, #0
 802051c:	d0fa      	beq.n	8020514 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 802051e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020520:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020522:	9402      	str	r4, [sp, #8]
 8020524:	fb00 6201 	mla	r2, r0, r1, r6
 8020528:	9204      	str	r2, [sp, #16]
 802052a:	990d      	ldr	r1, [sp, #52]	; 0x34
 802052c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802052e:	f8cd 900c 	str.w	r9, [sp, #12]
 8020532:	2301      	movs	r3, #1
 8020534:	4410      	add	r0, r2
 8020536:	9300      	str	r3, [sp, #0]
 8020538:	4652      	mov	r2, sl
 802053a:	9301      	str	r3, [sp, #4]
 802053c:	4429      	add	r1, r5
 802053e:	f8cd 8014 	str.w	r8, [sp, #20]
 8020542:	f7fb fe8f 	bl	801c264 <LCD_DrawBitmap>
 8020546:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020548:	9818      	ldr	r0, [sp, #96]	; 0x60
 802054a:	4453      	add	r3, sl
 802054c:	9319      	str	r3, [sp, #100]	; 0x64
 802054e:	6883      	ldr	r3, [r0, #8]
 8020550:	a919      	add	r1, sp, #100	; 0x64
 8020552:	695b      	ldr	r3, [r3, #20]
 8020554:	462a      	mov	r2, r5
 8020556:	4798      	blx	r3
 8020558:	4682      	mov	sl, r0
 802055a:	e7dd      	b.n	8020518 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 802055c:	3501      	adds	r5, #1
 802055e:	e77e      	b.n	802045e <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 8020560:	a818      	add	r0, sp, #96	; 0x60
 8020562:	f7fe f9d5 	bl	801e910 <GUI_ALLOC_UnlockH>
 8020566:	e1be      	b.n	80208e6 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8020568:	2301      	movs	r3, #1
 802056a:	9300      	str	r3, [sp, #0]
 802056c:	9301      	str	r3, [sp, #4]
 802056e:	9004      	str	r0, [sp, #16]
 8020570:	9402      	str	r4, [sp, #8]
 8020572:	f8cd 900c 	str.w	r9, [sp, #12]
 8020576:	f8cd 8014 	str.w	r8, [sp, #20]
 802057a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802057c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802057e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020580:	463a      	mov	r2, r7
 8020582:	e041      	b.n	8020608 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 8020584:	4630      	mov	r0, r6
 8020586:	910a      	str	r1, [sp, #40]	; 0x28
 8020588:	f7fe f9b4 	bl	801e8f4 <GUI_ALLOC_LockH>
 802058c:	4682      	mov	sl, r0
 802058e:	a81c      	add	r0, sp, #112	; 0x70
 8020590:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 8020594:	f840 ad10 	str.w	sl, [r0, #-16]!
 8020598:	f8da 4000 	ldr.w	r4, [sl]
 802059c:	9210      	str	r2, [sp, #64]	; 0x40
 802059e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80205a2:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 80205a6:	4c9e      	ldr	r4, [pc, #632]	; (8020820 <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 80205a8:	b213      	sxth	r3, r2
 80205aa:	f8da 200c 	ldr.w	r2, [sl, #12]
 80205ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80205b0:	9309      	str	r3, [sp, #36]	; 0x24
 80205b2:	f7fe f9ad 	bl	801e910 <GUI_ALLOC_UnlockH>
 80205b6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80205ba:	900e      	str	r0, [sp, #56]	; 0x38
 80205bc:	4899      	ldr	r0, [pc, #612]	; (8020824 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>)
 80205be:	6800      	ldr	r0, [r0, #0]
 80205c0:	7c40      	ldrb	r0, [r0, #17]
 80205c2:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 80205c6:	6925      	ldr	r5, [r4, #16]
 80205c8:	f8d5 8000 	ldr.w	r8, [r5]
 80205cc:	f7fb fc08 	bl	801bde0 <GUI_GetBitsPerPixelEx>
 80205d0:	2808      	cmp	r0, #8
 80205d2:	fa0f fb87 	sxth.w	fp, r7
 80205d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80205d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80205da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205dc:	d904      	bls.n	80205e8 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 80205de:	2810      	cmp	r0, #16
 80205e0:	bf8c      	ite	hi
 80205e2:	2404      	movhi	r4, #4
 80205e4:	2402      	movls	r4, #2
 80205e6:	e000      	b.n	80205ea <GUI_MEMDEV__WriteToActiveOpaque+0x422>
 80205e8:	2401      	movs	r4, #1
 80205ea:	45a9      	cmp	r9, r5
 80205ec:	d10f      	bne.n	802060e <GUI_MEMDEV__WriteToActiveOpaque+0x446>
 80205ee:	2001      	movs	r0, #1
 80205f0:	9203      	str	r2, [sp, #12]
 80205f2:	f10a 0218 	add.w	r2, sl, #24
 80205f6:	9000      	str	r0, [sp, #0]
 80205f8:	9001      	str	r0, [sp, #4]
 80205fa:	9102      	str	r1, [sp, #8]
 80205fc:	9204      	str	r2, [sp, #16]
 80205fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020600:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020602:	2200      	movs	r2, #0
 8020604:	9205      	str	r2, [sp, #20]
 8020606:	465a      	mov	r2, fp
 8020608:	f7fb fe2c 	bl	801c264 <LCD_DrawBitmap>
 802060c:	e16b      	b.n	80208e6 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 802060e:	2920      	cmp	r1, #32
 8020610:	f040 808e 	bne.w	8020730 <GUI_MEMDEV__WriteToActiveOpaque+0x568>
 8020614:	fb0b f004 	mul.w	r0, fp, r4
 8020618:	f7fe fbb4 	bl	801ed84 <GUI_ALLOC_AllocNoInit>
 802061c:	900e      	str	r0, [sp, #56]	; 0x38
 802061e:	2800      	cmp	r0, #0
 8020620:	f000 8161 	beq.w	80208e6 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8020624:	f7fe f966 	bl	801e8f4 <GUI_ALLOC_LockH>
 8020628:	901a      	str	r0, [sp, #104]	; 0x68
 802062a:	4630      	mov	r0, r6
 802062c:	f7fe f962 	bl	801e8f4 <GUI_ALLOC_LockH>
 8020630:	9018      	str	r0, [sp, #96]	; 0x60
 8020632:	692b      	ldr	r3, [r5, #16]
 8020634:	f100 0a18 	add.w	sl, r0, #24
 8020638:	ea4f 068b 	mov.w	r6, fp, lsl #2
 802063c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8020640:	2b00      	cmp	r3, #0
 8020642:	d02f      	beq.n	80206a4 <GUI_MEMDEV__WriteToActiveOpaque+0x4dc>
 8020644:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8020648:	2c02      	cmp	r4, #2
 802064a:	d003      	beq.n	8020654 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 802064c:	2c04      	cmp	r4, #4
 802064e:	d001      	beq.n	8020654 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 8020650:	2c01      	cmp	r4, #1
 8020652:	d106      	bne.n	8020662 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 8020654:	4650      	mov	r0, sl
 8020656:	692f      	ldr	r7, [r5, #16]
 8020658:	991a      	ldr	r1, [sp, #104]	; 0x68
 802065a:	465a      	mov	r2, fp
 802065c:	4623      	mov	r3, r4
 802065e:	47b8      	blx	r7
 8020660:	44b2      	add	sl, r6
 8020662:	2301      	movs	r3, #1
 8020664:	2200      	movs	r2, #0
 8020666:	991a      	ldr	r1, [sp, #104]	; 0x68
 8020668:	9300      	str	r3, [sp, #0]
 802066a:	9301      	str	r3, [sp, #4]
 802066c:	9203      	str	r2, [sp, #12]
 802066e:	9104      	str	r1, [sp, #16]
 8020670:	9205      	str	r2, [sp, #20]
 8020672:	4641      	mov	r1, r8
 8020674:	465a      	mov	r2, fp
 8020676:	f8cd 9008 	str.w	r9, [sp, #8]
 802067a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802067c:	f7fb fdf2 	bl	801c264 <LCD_DrawBitmap>
 8020680:	9910      	ldr	r1, [sp, #64]	; 0x40
 8020682:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020684:	f108 0701 	add.w	r7, r8, #1
 8020688:	fa02 f381 	sxtah	r3, r2, r1
 802068c:	42bb      	cmp	r3, r7
 802068e:	d107      	bne.n	80206a0 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 8020690:	a818      	add	r0, sp, #96	; 0x60
 8020692:	f7fe f93d 	bl	801e910 <GUI_ALLOC_UnlockH>
 8020696:	a81a      	add	r0, sp, #104	; 0x68
 8020698:	f7fe f93a 	bl	801e910 <GUI_ALLOC_UnlockH>
 802069c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802069e:	e120      	b.n	80208e2 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 80206a0:	46b8      	mov	r8, r7
 80206a2:	e7d1      	b.n	8020648 <GUI_MEMDEV__WriteToActiveOpaque+0x480>
 80206a4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80206a6:	2c02      	cmp	r4, #2
 80206a8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80206aa:	d00e      	beq.n	80206ca <GUI_MEMDEV__WriteToActiveOpaque+0x502>
 80206ac:	2c04      	cmp	r4, #4
 80206ae:	d018      	beq.n	80206e2 <GUI_MEMDEV__WriteToActiveOpaque+0x51a>
 80206b0:	2c01      	cmp	r4, #1
 80206b2:	d125      	bne.n	8020700 <GUI_MEMDEV__WriteToActiveOpaque+0x538>
 80206b4:	2300      	movs	r3, #0
 80206b6:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 80206ba:	9309      	str	r3, [sp, #36]	; 0x24
 80206bc:	47c0      	blx	r8
 80206be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206c0:	54f8      	strb	r0, [r7, r3]
 80206c2:	3301      	adds	r3, #1
 80206c4:	459b      	cmp	fp, r3
 80206c6:	d1f6      	bne.n	80206b6 <GUI_MEMDEV__WriteToActiveOpaque+0x4ee>
 80206c8:	e019      	b.n	80206fe <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 80206ca:	2300      	movs	r3, #0
 80206cc:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 80206d0:	9309      	str	r3, [sp, #36]	; 0x24
 80206d2:	47c0      	blx	r8
 80206d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206d6:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 80206da:	3301      	adds	r3, #1
 80206dc:	459b      	cmp	fp, r3
 80206de:	d1f5      	bne.n	80206cc <GUI_MEMDEV__WriteToActiveOpaque+0x504>
 80206e0:	e00d      	b.n	80206fe <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 80206e2:	465a      	mov	r2, fp
 80206e4:	2300      	movs	r3, #0
 80206e6:	f85a 0003 	ldr.w	r0, [sl, r3]
 80206ea:	920b      	str	r2, [sp, #44]	; 0x2c
 80206ec:	9309      	str	r3, [sp, #36]	; 0x24
 80206ee:	47c0      	blx	r8
 80206f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80206f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206f4:	3a01      	subs	r2, #1
 80206f6:	50f8      	str	r0, [r7, r3]
 80206f8:	f103 0304 	add.w	r3, r3, #4
 80206fc:	d1f3      	bne.n	80206e6 <GUI_MEMDEV__WriteToActiveOpaque+0x51e>
 80206fe:	44b2      	add	sl, r6
 8020700:	2301      	movs	r3, #1
 8020702:	2200      	movs	r2, #0
 8020704:	991a      	ldr	r1, [sp, #104]	; 0x68
 8020706:	9300      	str	r3, [sp, #0]
 8020708:	9301      	str	r3, [sp, #4]
 802070a:	9203      	str	r2, [sp, #12]
 802070c:	9104      	str	r1, [sp, #16]
 802070e:	9205      	str	r2, [sp, #20]
 8020710:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020712:	f8cd 9008 	str.w	r9, [sp, #8]
 8020716:	4629      	mov	r1, r5
 8020718:	465a      	mov	r2, fp
 802071a:	f7fb fda3 	bl	801c264 <LCD_DrawBitmap>
 802071e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020720:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020722:	1c6f      	adds	r7, r5, #1
 8020724:	fa01 f380 	sxtah	r3, r1, r0
 8020728:	42bb      	cmp	r3, r7
 802072a:	d0b1      	beq.n	8020690 <GUI_MEMDEV__WriteToActiveOpaque+0x4c8>
 802072c:	463d      	mov	r5, r7
 802072e:	e7ba      	b.n	80206a6 <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 8020730:	2910      	cmp	r1, #16
 8020732:	f040 80d8 	bne.w	80208e6 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8020736:	fa0f fa87 	sxth.w	sl, r7
 802073a:	fb0a f004 	mul.w	r0, sl, r4
 802073e:	f7fe fb21 	bl	801ed84 <GUI_ALLOC_AllocNoInit>
 8020742:	9012      	str	r0, [sp, #72]	; 0x48
 8020744:	2800      	cmp	r0, #0
 8020746:	f000 80ce 	beq.w	80208e6 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 802074a:	f7fe f8d3 	bl	801e8f4 <GUI_ALLOC_LockH>
 802074e:	901a      	str	r0, [sp, #104]	; 0x68
 8020750:	4630      	mov	r0, r6
 8020752:	f7fe f8cf 	bl	801e8f4 <GUI_ALLOC_LockH>
 8020756:	9018      	str	r0, [sp, #96]	; 0x60
 8020758:	692b      	ldr	r3, [r5, #16]
 802075a:	f100 0618 	add.w	r6, r0, #24
 802075e:	b113      	cbz	r3, 8020766 <GUI_MEMDEV__WriteToActiveOpaque+0x59e>
 8020760:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8020764:	b92b      	cbnz	r3, 8020772 <GUI_MEMDEV__WriteToActiveOpaque+0x5aa>
 8020766:	00e2      	lsls	r2, r4, #3
 8020768:	b23f      	sxth	r7, r7
 802076a:	9211      	str	r2, [sp, #68]	; 0x44
 802076c:	007f      	lsls	r7, r7, #1
 802076e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020770:	e088      	b.n	8020884 <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 8020772:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8020776:	0080      	lsls	r0, r0, #2
 8020778:	f7fe fb04 	bl	801ed84 <GUI_ALLOC_AllocNoInit>
 802077c:	9011      	str	r0, [sp, #68]	; 0x44
 802077e:	b118      	cbz	r0, 8020788 <GUI_MEMDEV__WriteToActiveOpaque+0x5c0>
 8020780:	f7fe f8b8 	bl	801e8f4 <GUI_ALLOC_LockH>
 8020784:	9019      	str	r0, [sp, #100]	; 0x64
 8020786:	e001      	b.n	802078c <GUI_MEMDEV__WriteToActiveOpaque+0x5c4>
 8020788:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802078a:	9319      	str	r3, [sp, #100]	; 0x64
 802078c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802078e:	2b00      	cmp	r3, #0
 8020790:	f000 80a0 	beq.w	80208d4 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 8020794:	b23f      	sxth	r7, r7
 8020796:	007f      	lsls	r7, r7, #1
 8020798:	970e      	str	r7, [sp, #56]	; 0x38
 802079a:	00e7      	lsls	r7, r4, #3
 802079c:	9713      	str	r7, [sp, #76]	; 0x4c
 802079e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80207a0:	970c      	str	r7, [sp, #48]	; 0x30
 80207a2:	2c02      	cmp	r4, #2
 80207a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80207a8:	d004      	beq.n	80207b4 <GUI_MEMDEV__WriteToActiveOpaque+0x5ec>
 80207aa:	2c04      	cmp	r4, #4
 80207ac:	d007      	beq.n	80207be <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 80207ae:	2c01      	cmp	r4, #1
 80207b0:	d114      	bne.n	80207dc <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 80207b2:	e004      	b.n	80207be <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 80207b4:	4630      	mov	r0, r6
 80207b6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80207b8:	4652      	mov	r2, sl
 80207ba:	4623      	mov	r3, r4
 80207bc:	e003      	b.n	80207c6 <GUI_MEMDEV__WriteToActiveOpaque+0x5fe>
 80207be:	9919      	ldr	r1, [sp, #100]	; 0x64
 80207c0:	4630      	mov	r0, r6
 80207c2:	4652      	mov	r2, sl
 80207c4:	2302      	movs	r3, #2
 80207c6:	f8d9 7014 	ldr.w	r7, [r9, #20]
 80207ca:	47b8      	blx	r7
 80207cc:	692f      	ldr	r7, [r5, #16]
 80207ce:	9819      	ldr	r0, [sp, #100]	; 0x64
 80207d0:	4641      	mov	r1, r8
 80207d2:	4652      	mov	r2, sl
 80207d4:	4623      	mov	r3, r4
 80207d6:	47b8      	blx	r7
 80207d8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80207da:	443e      	add	r6, r7
 80207dc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80207de:	991a      	ldr	r1, [sp, #104]	; 0x68
 80207e0:	9104      	str	r1, [sp, #16]
 80207e2:	2301      	movs	r3, #1
 80207e4:	2200      	movs	r2, #0
 80207e6:	f107 0801 	add.w	r8, r7, #1
 80207ea:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80207ec:	9300      	str	r3, [sp, #0]
 80207ee:	9301      	str	r3, [sp, #4]
 80207f0:	9702      	str	r7, [sp, #8]
 80207f2:	9203      	str	r2, [sp, #12]
 80207f4:	9205      	str	r2, [sp, #20]
 80207f6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80207f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80207fa:	465a      	mov	r2, fp
 80207fc:	f7fb fd32 	bl	801c264 <LCD_DrawBitmap>
 8020800:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020802:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020804:	fa00 f387 	sxtah	r3, r0, r7
 8020808:	4543      	cmp	r3, r8
 802080a:	d002      	beq.n	8020812 <GUI_MEMDEV__WriteToActiveOpaque+0x64a>
 802080c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8020810:	e7c7      	b.n	80207a2 <GUI_MEMDEV__WriteToActiveOpaque+0x5da>
 8020812:	a819      	add	r0, sp, #100	; 0x64
 8020814:	f7fe f87c 	bl	801e910 <GUI_ALLOC_UnlockH>
 8020818:	9811      	ldr	r0, [sp, #68]	; 0x44
 802081a:	f7fe f899 	bl	801e950 <GUI_ALLOC_Free>
 802081e:	e059      	b.n	80208d4 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 8020820:	2002c5cc 	.word	0x2002c5cc
 8020824:	20000114 	.word	0x20000114
 8020828:	2c04      	cmp	r4, #4
 802082a:	d041      	beq.n	80208b0 <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 802082c:	2c01      	cmp	r4, #1
 802082e:	d111      	bne.n	8020854 <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 8020830:	464a      	mov	r2, r9
 8020832:	4631      	mov	r1, r6
 8020834:	f831 0b02 	ldrh.w	r0, [r1], #2
 8020838:	910a      	str	r1, [sp, #40]	; 0x28
 802083a:	920b      	str	r2, [sp, #44]	; 0x2c
 802083c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802083e:	4798      	blx	r3
 8020840:	47c0      	blx	r8
 8020842:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020844:	f802 0b01 	strb.w	r0, [r2], #1
 8020848:	eb09 000a 	add.w	r0, r9, sl
 802084c:	4282      	cmp	r2, r0
 802084e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020850:	d1f0      	bne.n	8020834 <GUI_MEMDEV__WriteToActiveOpaque+0x66c>
 8020852:	443e      	add	r6, r7
 8020854:	2301      	movs	r3, #1
 8020856:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020858:	991a      	ldr	r1, [sp, #104]	; 0x68
 802085a:	9300      	str	r3, [sp, #0]
 802085c:	2200      	movs	r2, #0
 802085e:	9301      	str	r3, [sp, #4]
 8020860:	9002      	str	r0, [sp, #8]
 8020862:	9203      	str	r2, [sp, #12]
 8020864:	9104      	str	r1, [sp, #16]
 8020866:	9205      	str	r2, [sp, #20]
 8020868:	4629      	mov	r1, r5
 802086a:	465a      	mov	r2, fp
 802086c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802086e:	f7fb fcf9 	bl	801c264 <LCD_DrawBitmap>
 8020872:	9910      	ldr	r1, [sp, #64]	; 0x40
 8020874:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020876:	f105 0901 	add.w	r9, r5, #1
 802087a:	fa02 f381 	sxtah	r3, r2, r1
 802087e:	454b      	cmp	r3, r9
 8020880:	d028      	beq.n	80208d4 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 8020882:	464d      	mov	r5, r9
 8020884:	2c02      	cmp	r4, #2
 8020886:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 802088a:	d1cd      	bne.n	8020828 <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 802088c:	464b      	mov	r3, r9
 802088e:	4631      	mov	r1, r6
 8020890:	46d9      	mov	r9, fp
 8020892:	f831 0b02 	ldrh.w	r0, [r1], #2
 8020896:	910a      	str	r1, [sp, #40]	; 0x28
 8020898:	9309      	str	r3, [sp, #36]	; 0x24
 802089a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802089c:	4790      	blx	r2
 802089e:	47c0      	blx	r8
 80208a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80208a4:	f823 0b02 	strh.w	r0, [r3], #2
 80208a8:	f1b9 0901 	subs.w	r9, r9, #1
 80208ac:	d1f1      	bne.n	8020892 <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 80208ae:	e7d0      	b.n	8020852 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 80208b0:	464b      	mov	r3, r9
 80208b2:	4631      	mov	r1, r6
 80208b4:	46d9      	mov	r9, fp
 80208b6:	f831 0b02 	ldrh.w	r0, [r1], #2
 80208ba:	910a      	str	r1, [sp, #40]	; 0x28
 80208bc:	9309      	str	r3, [sp, #36]	; 0x24
 80208be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80208c0:	4790      	blx	r2
 80208c2:	47c0      	blx	r8
 80208c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80208c8:	f843 0b04 	str.w	r0, [r3], #4
 80208cc:	f1b9 0901 	subs.w	r9, r9, #1
 80208d0:	d1f1      	bne.n	80208b6 <GUI_MEMDEV__WriteToActiveOpaque+0x6ee>
 80208d2:	e7be      	b.n	8020852 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 80208d4:	a818      	add	r0, sp, #96	; 0x60
 80208d6:	f7fe f81b 	bl	801e910 <GUI_ALLOC_UnlockH>
 80208da:	a81a      	add	r0, sp, #104	; 0x68
 80208dc:	f7fe f818 	bl	801e910 <GUI_ALLOC_UnlockH>
 80208e0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80208e2:	f7fe f835 	bl	801e950 <GUI_ALLOC_Free>
 80208e6:	b01d      	add	sp, #116	; 0x74
 80208e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080208ec <GUI_MEMDEV__WriteToActiveAlpha>:
 80208ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208f0:	b091      	sub	sp, #68	; 0x44
 80208f2:	460e      	mov	r6, r1
 80208f4:	4614      	mov	r4, r2
 80208f6:	900d      	str	r0, [sp, #52]	; 0x34
 80208f8:	f7fd fffc 	bl	801e8f4 <GUI_ALLOC_LockH>
 80208fc:	4602      	mov	r2, r0
 80208fe:	a810      	add	r0, sp, #64	; 0x40
 8020900:	6813      	ldr	r3, [r2, #0]
 8020902:	4d5b      	ldr	r5, [pc, #364]	; (8020a70 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 8020904:	691b      	ldr	r3, [r3, #16]
 8020906:	f840 2d08 	str.w	r2, [r0, #-8]!
 802090a:	685b      	ldr	r3, [r3, #4]
 802090c:	f8b2 b008 	ldrh.w	fp, [r2, #8]
 8020910:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 8020914:	9309      	str	r3, [sp, #36]	; 0x24
 8020916:	f7fd fffb 	bl	801e910 <GUI_ALLOC_UnlockH>
 802091a:	682b      	ldr	r3, [r5, #0]
 802091c:	4f55      	ldr	r7, [pc, #340]	; (8020a74 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 802091e:	7c5b      	ldrb	r3, [r3, #17]
 8020920:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8020924:	68c3      	ldr	r3, [r0, #12]
 8020926:	2108      	movs	r1, #8
 8020928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802092a:	4798      	blx	r3
 802092c:	682b      	ldr	r3, [r5, #0]
 802092e:	7c5b      	ldrb	r3, [r3, #17]
 8020930:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8020934:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8020938:	2817      	cmp	r0, #23
 802093a:	bf88      	it	hi
 802093c:	2020      	movhi	r0, #32
 802093e:	9008      	str	r0, [sp, #32]
 8020940:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8020944:	f8d8 2000 	ldr.w	r2, [r8]
 8020948:	910a      	str	r1, [sp, #40]	; 0x28
 802094a:	2000      	movs	r0, #0
 802094c:	920b      	str	r2, [sp, #44]	; 0x2c
 802094e:	f7fc f8e7 	bl	801cb20 <GUI__AllocAlphaBuffer>
 8020952:	2800      	cmp	r0, #0
 8020954:	f040 8089 	bne.w	8020a6a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8020958:	682a      	ldr	r2, [r5, #0]
 802095a:	fa0f f78b 	sxth.w	r7, fp
 802095e:	19f5      	adds	r5, r6, r7
 8020960:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8020964:	3d01      	subs	r5, #1
 8020966:	1aed      	subs	r5, r5, r3
 8020968:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 802096c:	2d00      	cmp	r5, #0
 802096e:	bfcc      	ite	gt
 8020970:	ebc5 0507 	rsbgt	r5, r5, r7
 8020974:	463d      	movle	r5, r7
 8020976:	42b3      	cmp	r3, r6
 8020978:	bfc3      	ittte	gt
 802097a:	ebc6 0103 	rsbgt	r1, r6, r3
 802097e:	ebc1 0505 	rsbgt	r5, r1, r5
 8020982:	461e      	movgt	r6, r3
 8020984:	2100      	movle	r1, #0
 8020986:	2d00      	cmp	r5, #0
 8020988:	dd6f      	ble.n	8020a6a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 802098a:	fa0f f389 	sxth.w	r3, r9
 802098e:	18e0      	adds	r0, r4, r3
 8020990:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 8020994:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8020998:	3801      	subs	r0, #1
 802099a:	ebcc 0000 	rsb	r0, ip, r0
 802099e:	2800      	cmp	r0, #0
 80209a0:	bfc8      	it	gt
 80209a2:	ebc0 0303 	rsbgt	r3, r0, r3
 80209a6:	4294      	cmp	r4, r2
 80209a8:	bfbd      	ittte	lt
 80209aa:	ebc4 0a02 	rsblt	sl, r4, r2
 80209ae:	ebca 0303 	rsblt	r3, sl, r3
 80209b2:	4614      	movlt	r4, r2
 80209b4:	f04f 0a00 	movge.w	sl, #0
 80209b8:	2b00      	cmp	r3, #0
 80209ba:	dd56      	ble.n	8020a6a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 80209bc:	fb07 1a0a 	mla	sl, r7, sl, r1
 80209c0:	18e3      	adds	r3, r4, r3
 80209c2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80209c6:	930c      	str	r3, [sp, #48]	; 0x30
 80209c8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80209ca:	f7f9 fbe5 	bl	801a198 <GUI_MEMDEV_GetDataPtr>
 80209ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209d0:	9300      	str	r3, [sp, #0]
 80209d2:	ab0f      	add	r3, sp, #60	; 0x3c
 80209d4:	eb00 020a 	add.w	r2, r0, sl
 80209d8:	9301      	str	r3, [sp, #4]
 80209da:	4630      	mov	r0, r6
 80209dc:	4621      	mov	r1, r4
 80209de:	462b      	mov	r3, r5
 80209e0:	f7fb ffb8 	bl	801c954 <GUI__DoAlphaBlending>
 80209e4:	4681      	mov	r9, r0
 80209e6:	2800      	cmp	r0, #0
 80209e8:	d03f      	beq.n	8020a6a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 80209ea:	4b23      	ldr	r3, [pc, #140]	; (8020a78 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 80209ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80209ee:	4299      	cmp	r1, r3
 80209f0:	d01e      	beq.n	8020a30 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 80209f2:	4629      	mov	r1, r5
 80209f4:	9a08      	ldr	r2, [sp, #32]
 80209f6:	4643      	mov	r3, r8
 80209f8:	f000 fe91 	bl	802171e <GUI__CompactPixelIndicesEx>
 80209fc:	b9c0      	cbnz	r0, 8020a30 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 80209fe:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8020a02:	f1bc 0f00 	cmp.w	ip, #0
 8020a06:	d006      	beq.n	8020a16 <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 8020a08:	4648      	mov	r0, r9
 8020a0a:	4649      	mov	r1, r9
 8020a0c:	fa0f f28b 	sxth.w	r2, fp
 8020a10:	2304      	movs	r3, #4
 8020a12:	47e0      	blx	ip
 8020a14:	e00c      	b.n	8020a30 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8020a16:	464a      	mov	r2, r9
 8020a18:	463b      	mov	r3, r7
 8020a1a:	6810      	ldr	r0, [r2, #0]
 8020a1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020a1e:	9206      	str	r2, [sp, #24]
 8020a20:	9307      	str	r3, [sp, #28]
 8020a22:	4788      	blx	r1
 8020a24:	9b07      	ldr	r3, [sp, #28]
 8020a26:	9a06      	ldr	r2, [sp, #24]
 8020a28:	3b01      	subs	r3, #1
 8020a2a:	f842 0b04 	str.w	r0, [r2], #4
 8020a2e:	d1f4      	bne.n	8020a1a <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 8020a30:	9a08      	ldr	r2, [sp, #32]
 8020a32:	9202      	str	r2, [sp, #8]
 8020a34:	2301      	movs	r3, #1
 8020a36:	2200      	movs	r2, #0
 8020a38:	f104 0c01 	add.w	ip, r4, #1
 8020a3c:	9300      	str	r3, [sp, #0]
 8020a3e:	9301      	str	r3, [sp, #4]
 8020a40:	9203      	str	r2, [sp, #12]
 8020a42:	9205      	str	r2, [sp, #20]
 8020a44:	f8cd 9010 	str.w	r9, [sp, #16]
 8020a48:	4630      	mov	r0, r6
 8020a4a:	4621      	mov	r1, r4
 8020a4c:	462a      	mov	r2, r5
 8020a4e:	f8cd c01c 	str.w	ip, [sp, #28]
 8020a52:	f7fb fc07 	bl	801c264 <LCD_DrawBitmap>
 8020a56:	2304      	movs	r3, #4
 8020a58:	fb1b aa03 	smlabb	sl, fp, r3, sl
 8020a5c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8020a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a62:	459c      	cmp	ip, r3
 8020a64:	d001      	beq.n	8020a6a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8020a66:	4664      	mov	r4, ip
 8020a68:	e7ae      	b.n	80209c8 <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 8020a6a:	b011      	add	sp, #68	; 0x44
 8020a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a70:	20000114 	.word	0x20000114
 8020a74:	2002c5cc 	.word	0x2002c5cc
 8020a78:	0801eef5 	.word	0x0801eef5

08020a7c <GUI_MEMDEV_WriteAt>:
 8020a7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8020a7e:	460c      	mov	r4, r1
 8020a80:	4615      	mov	r5, r2
 8020a82:	4606      	mov	r6, r0
 8020a84:	b330      	cbz	r0, 8020ad4 <GUI_MEMDEV_WriteAt+0x58>
 8020a86:	f7fd ff35 	bl	801e8f4 <GUI_ALLOC_LockH>
 8020a8a:	4a13      	ldr	r2, [pc, #76]	; (8020ad8 <GUI_MEMDEV_WriteAt+0x5c>)
 8020a8c:	8943      	ldrh	r3, [r0, #10]
 8020a8e:	9001      	str	r0, [sp, #4]
 8020a90:	4294      	cmp	r4, r2
 8020a92:	8902      	ldrh	r2, [r0, #8]
 8020a94:	bf04      	itt	eq
 8020a96:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 8020a9a:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 8020a9e:	f8ad 4008 	strh.w	r4, [sp, #8]
 8020aa2:	3a01      	subs	r2, #1
 8020aa4:	3b01      	subs	r3, #1
 8020aa6:	4422      	add	r2, r4
 8020aa8:	442b      	add	r3, r5
 8020aaa:	a801      	add	r0, sp, #4
 8020aac:	f8ad 200c 	strh.w	r2, [sp, #12]
 8020ab0:	f8ad 500a 	strh.w	r5, [sp, #10]
 8020ab4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020ab8:	f7fd ff2a 	bl	801e910 <GUI_ALLOC_UnlockH>
 8020abc:	a802      	add	r0, sp, #8
 8020abe:	f7f8 ffad 	bl	8019a1c <WM__InitIVRSearch>
 8020ac2:	b138      	cbz	r0, 8020ad4 <GUI_MEMDEV_WriteAt+0x58>
 8020ac4:	4630      	mov	r0, r6
 8020ac6:	4621      	mov	r1, r4
 8020ac8:	462a      	mov	r2, r5
 8020aca:	f7fa f92b 	bl	801ad24 <GUI_MEMDEV__WriteToActiveAt>
 8020ace:	f7f8 fee3 	bl	8019898 <WM__GetNextIVR>
 8020ad2:	e7f6      	b.n	8020ac2 <GUI_MEMDEV_WriteAt+0x46>
 8020ad4:	b004      	add	sp, #16
 8020ad6:	bd70      	pop	{r4, r5, r6, pc}
 8020ad8:	fffff001 	.word	0xfffff001

08020adc <GUI_MEMDEV_Write>:
 8020adc:	4901      	ldr	r1, [pc, #4]	; (8020ae4 <GUI_MEMDEV_Write+0x8>)
 8020ade:	460a      	mov	r2, r1
 8020ae0:	f7ff bfcc 	b.w	8020a7c <GUI_MEMDEV_WriteAt>
 8020ae4:	fffff001 	.word	0xfffff001

08020ae8 <GUI_USAGE_BM_AddPixel>:
 8020ae8:	4603      	mov	r3, r0
 8020aea:	b510      	push	{r4, lr}
 8020aec:	f933 4b14 	ldrsh.w	r4, [r3], #20
 8020af0:	1b09      	subs	r1, r1, r4
 8020af2:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8020af6:	6900      	ldr	r0, [r0, #16]
 8020af8:	1b12      	subs	r2, r2, r4
 8020afa:	fb00 3302 	mla	r3, r0, r2, r3
 8020afe:	10c8      	asrs	r0, r1, #3
 8020b00:	2280      	movs	r2, #128	; 0x80
 8020b02:	f001 0107 	and.w	r1, r1, #7
 8020b06:	fa42 f101 	asr.w	r1, r2, r1
 8020b0a:	5c1a      	ldrb	r2, [r3, r0]
 8020b0c:	4311      	orrs	r1, r2
 8020b0e:	5419      	strb	r1, [r3, r0]
 8020b10:	bd10      	pop	{r4, pc}

08020b12 <GUI_USAGE_BM_GetNextDirty>:
 8020b12:	b570      	push	{r4, r5, r6, lr}
 8020b14:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8020b18:	680b      	ldr	r3, [r1, #0]
 8020b1a:	8886      	ldrh	r6, [r0, #4]
 8020b1c:	42a2      	cmp	r2, r4
 8020b1e:	da41      	bge.n	8020ba4 <GUI_USAGE_BM_GetNextDirty+0x92>
 8020b20:	b236      	sxth	r6, r6
 8020b22:	42b3      	cmp	r3, r6
 8020b24:	6904      	ldr	r4, [r0, #16]
 8020b26:	da3d      	bge.n	8020ba4 <GUI_USAGE_BM_GetNextDirty+0x92>
 8020b28:	3014      	adds	r0, #20
 8020b2a:	fb04 0202 	mla	r2, r4, r2, r0
 8020b2e:	10dd      	asrs	r5, r3, #3
 8020b30:	1e70      	subs	r0, r6, #1
 8020b32:	1954      	adds	r4, r2, r5
 8020b34:	ebc5 00e0 	rsb	r0, r5, r0, asr #3
 8020b38:	5d55      	ldrb	r5, [r2, r5]
 8020b3a:	f003 0207 	and.w	r2, r3, #7
 8020b3e:	fa05 f202 	lsl.w	r2, r5, r2
 8020b42:	3401      	adds	r4, #1
 8020b44:	b2d2      	uxtb	r2, r2
 8020b46:	b93a      	cbnz	r2, 8020b58 <GUI_USAGE_BM_GetNextDirty+0x46>
 8020b48:	b368      	cbz	r0, 8020ba6 <GUI_USAGE_BM_GetNextDirty+0x94>
 8020b4a:	3308      	adds	r3, #8
 8020b4c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8020b50:	3801      	subs	r0, #1
 8020b52:	f023 0307 	bic.w	r3, r3, #7
 8020b56:	e7f6      	b.n	8020b46 <GUI_USAGE_BM_GetNextDirty+0x34>
 8020b58:	0615      	lsls	r5, r2, #24
 8020b5a:	d403      	bmi.n	8020b64 <GUI_USAGE_BM_GetNextDirty+0x52>
 8020b5c:	0052      	lsls	r2, r2, #1
 8020b5e:	b2d2      	uxtb	r2, r2
 8020b60:	3301      	adds	r3, #1
 8020b62:	e7f9      	b.n	8020b58 <GUI_USAGE_BM_GetNextDirty+0x46>
 8020b64:	2aff      	cmp	r2, #255	; 0xff
 8020b66:	461d      	mov	r5, r3
 8020b68:	d005      	beq.n	8020b76 <GUI_USAGE_BM_GetNextDirty+0x64>
 8020b6a:	0656      	lsls	r6, r2, #25
 8020b6c:	d504      	bpl.n	8020b78 <GUI_USAGE_BM_GetNextDirty+0x66>
 8020b6e:	0052      	lsls	r2, r2, #1
 8020b70:	b2d2      	uxtb	r2, r2
 8020b72:	3301      	adds	r3, #1
 8020b74:	e7f9      	b.n	8020b6a <GUI_USAGE_BM_GetNextDirty+0x58>
 8020b76:	3307      	adds	r3, #7
 8020b78:	f003 0207 	and.w	r2, r3, #7
 8020b7c:	2a07      	cmp	r2, #7
 8020b7e:	d10d      	bne.n	8020b9c <GUI_USAGE_BM_GetNextDirty+0x8a>
 8020b80:	3801      	subs	r0, #1
 8020b82:	d40b      	bmi.n	8020b9c <GUI_USAGE_BM_GetNextDirty+0x8a>
 8020b84:	f814 2b01 	ldrb.w	r2, [r4], #1
 8020b88:	2aff      	cmp	r2, #255	; 0xff
 8020b8a:	d101      	bne.n	8020b90 <GUI_USAGE_BM_GetNextDirty+0x7e>
 8020b8c:	3308      	adds	r3, #8
 8020b8e:	e7f7      	b.n	8020b80 <GUI_USAGE_BM_GetNextDirty+0x6e>
 8020b90:	0610      	lsls	r0, r2, #24
 8020b92:	d503      	bpl.n	8020b9c <GUI_USAGE_BM_GetNextDirty+0x8a>
 8020b94:	0052      	lsls	r2, r2, #1
 8020b96:	b2d2      	uxtb	r2, r2
 8020b98:	3301      	adds	r3, #1
 8020b9a:	e7f9      	b.n	8020b90 <GUI_USAGE_BM_GetNextDirty+0x7e>
 8020b9c:	1b58      	subs	r0, r3, r5
 8020b9e:	600d      	str	r5, [r1, #0]
 8020ba0:	3001      	adds	r0, #1
 8020ba2:	bd70      	pop	{r4, r5, r6, pc}
 8020ba4:	2000      	movs	r0, #0
 8020ba6:	bd70      	pop	{r4, r5, r6, pc}

08020ba8 <_GUI_USAGE_BM_Delete>:
 8020ba8:	f7fd bed2 	b.w	801e950 <GUI_ALLOC_Free>

08020bac <GUI_USAGE_BM_Clear>:
 8020bac:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8020bb0:	6902      	ldr	r2, [r0, #16]
 8020bb2:	2100      	movs	r1, #0
 8020bb4:	3014      	adds	r0, #20
 8020bb6:	435a      	muls	r2, r3
 8020bb8:	f001 b84c 	b.w	8021c54 <memset>

08020bbc <GUI_USAGE_BM_AddHLine>:
 8020bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bbe:	f9b0 4000 	ldrsh.w	r4, [r0]
 8020bc2:	1b09      	subs	r1, r1, r4
 8020bc4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8020bc8:	42a1      	cmp	r1, r4
 8020bca:	da2f      	bge.n	8020c2c <GUI_USAGE_BM_AddHLine+0x70>
 8020bcc:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8020bd0:	440b      	add	r3, r1
 8020bd2:	f100 0414 	add.w	r4, r0, #20
 8020bd6:	3b01      	subs	r3, #1
 8020bd8:	6900      	ldr	r0, [r0, #16]
 8020bda:	1b52      	subs	r2, r2, r5
 8020bdc:	43de      	mvns	r6, r3
 8020bde:	fb00 4202 	mla	r2, r0, r2, r4
 8020be2:	f001 0707 	and.w	r7, r1, #7
 8020be6:	10cc      	asrs	r4, r1, #3
 8020be8:	f006 0607 	and.w	r6, r6, #7
 8020bec:	21ff      	movs	r1, #255	; 0xff
 8020bee:	fa41 f707 	asr.w	r7, r1, r7
 8020bf2:	fa01 f606 	lsl.w	r6, r1, r6
 8020bf6:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 8020bfa:	eb02 0504 	add.w	r5, r2, r4
 8020bfe:	b2ff      	uxtb	r7, r7
 8020c00:	b2f6      	uxtb	r6, r6
 8020c02:	5d10      	ldrb	r0, [r2, r4]
 8020c04:	d103      	bne.n	8020c0e <GUI_USAGE_BM_AddHLine+0x52>
 8020c06:	403e      	ands	r6, r7
 8020c08:	4330      	orrs	r0, r6
 8020c0a:	5510      	strb	r0, [r2, r4]
 8020c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020c0e:	4338      	orrs	r0, r7
 8020c10:	5510      	strb	r0, [r2, r4]
 8020c12:	1e5c      	subs	r4, r3, #1
 8020c14:	2c00      	cmp	r4, #0
 8020c16:	f105 0501 	add.w	r5, r5, #1
 8020c1a:	dd04      	ble.n	8020c26 <GUI_USAGE_BM_AddHLine+0x6a>
 8020c1c:	4628      	mov	r0, r5
 8020c1e:	4622      	mov	r2, r4
 8020c20:	f001 f818 	bl	8021c54 <memset>
 8020c24:	4425      	add	r5, r4
 8020c26:	782b      	ldrb	r3, [r5, #0]
 8020c28:	431e      	orrs	r6, r3
 8020c2a:	702e      	strb	r6, [r5, #0]
 8020c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020c30 <GUI_USAGE_BM_Create>:
 8020c30:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 8020c34:	f102 060f 	add.w	r6, r2, #15
 8020c38:	1136      	asrs	r6, r6, #4
 8020c3a:	0076      	lsls	r6, r6, #1
 8020c3c:	4682      	mov	sl, r0
 8020c3e:	fb06 f003 	mul.w	r0, r6, r3
 8020c42:	3014      	adds	r0, #20
 8020c44:	4689      	mov	r9, r1
 8020c46:	4690      	mov	r8, r2
 8020c48:	461f      	mov	r7, r3
 8020c4a:	f7fe f8ed 	bl	801ee28 <GUI_ALLOC_AllocZero>
 8020c4e:	4683      	mov	fp, r0
 8020c50:	b198      	cbz	r0, 8020c7a <GUI_USAGE_BM_Create+0x4a>
 8020c52:	f7fd fe4f 	bl	801e8f4 <GUI_ALLOC_LockH>
 8020c56:	4604      	mov	r4, r0
 8020c58:	4b0a      	ldr	r3, [pc, #40]	; (8020c84 <GUI_USAGE_BM_Create+0x54>)
 8020c5a:	60a3      	str	r3, [r4, #8]
 8020c5c:	a802      	add	r0, sp, #8
 8020c5e:	2301      	movs	r3, #1
 8020c60:	f840 4d04 	str.w	r4, [r0, #-4]!
 8020c64:	f8a4 8004 	strh.w	r8, [r4, #4]
 8020c68:	f8a4 a000 	strh.w	sl, [r4]
 8020c6c:	f8a4 9002 	strh.w	r9, [r4, #2]
 8020c70:	80e7      	strh	r7, [r4, #6]
 8020c72:	81a3      	strh	r3, [r4, #12]
 8020c74:	6126      	str	r6, [r4, #16]
 8020c76:	f7fd fe4b 	bl	801e910 <GUI_ALLOC_UnlockH>
 8020c7a:	4658      	mov	r0, fp
 8020c7c:	b002      	add	sp, #8
 8020c7e:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 8020c82:	bf00      	nop
 8020c84:	0812e094 	.word	0x0812e094

08020c88 <GUI_USAGE_DecUseCnt>:
 8020c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020c8a:	4605      	mov	r5, r0
 8020c8c:	f7fd fe32 	bl	801e8f4 <GUI_ALLOC_LockH>
 8020c90:	4602      	mov	r2, r0
 8020c92:	a802      	add	r0, sp, #8
 8020c94:	8994      	ldrh	r4, [r2, #12]
 8020c96:	f840 2d04 	str.w	r2, [r0, #-4]!
 8020c9a:	3c01      	subs	r4, #1
 8020c9c:	b2a4      	uxth	r4, r4
 8020c9e:	8194      	strh	r4, [r2, #12]
 8020ca0:	f7fd fe36 	bl	801e910 <GUI_ALLOC_UnlockH>
 8020ca4:	b914      	cbnz	r4, 8020cac <GUI_USAGE_DecUseCnt+0x24>
 8020ca6:	4628      	mov	r0, r5
 8020ca8:	f7fd fe52 	bl	801e950 <GUI_ALLOC_Free>
 8020cac:	b003      	add	sp, #12
 8020cae:	bd30      	pop	{r4, r5, pc}

08020cb0 <GUI_USAGE_AddRect>:
 8020cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020cb4:	4605      	mov	r5, r0
 8020cb6:	4688      	mov	r8, r1
 8020cb8:	4617      	mov	r7, r2
 8020cba:	4699      	mov	r9, r3
 8020cbc:	68a8      	ldr	r0, [r5, #8]
 8020cbe:	464b      	mov	r3, r9
 8020cc0:	6846      	ldr	r6, [r0, #4]
 8020cc2:	4641      	mov	r1, r8
 8020cc4:	4628      	mov	r0, r5
 8020cc6:	1c54      	adds	r4, r2, #1
 8020cc8:	47b0      	blx	r6
 8020cca:	9b08      	ldr	r3, [sp, #32]
 8020ccc:	443b      	add	r3, r7
 8020cce:	42a3      	cmp	r3, r4
 8020cd0:	d001      	beq.n	8020cd6 <GUI_USAGE_AddRect+0x26>
 8020cd2:	4622      	mov	r2, r4
 8020cd4:	e7f2      	b.n	8020cbc <GUI_USAGE_AddRect+0xc>
 8020cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08020cdc <GUI_MEMDEV_ReduceYSize>:
 8020cdc:	b513      	push	{r0, r1, r4, lr}
 8020cde:	460c      	mov	r4, r1
 8020ce0:	b918      	cbnz	r0, 8020cea <GUI_MEMDEV_ReduceYSize+0xe>
 8020ce2:	4b08      	ldr	r3, [pc, #32]	; (8020d04 <GUI_MEMDEV_ReduceYSize+0x28>)
 8020ce4:	681b      	ldr	r3, [r3, #0]
 8020ce6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8020ce8:	b150      	cbz	r0, 8020d00 <GUI_MEMDEV_ReduceYSize+0x24>
 8020cea:	f7fd fe03 	bl	801e8f4 <GUI_ALLOC_LockH>
 8020cee:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8020cf2:	9001      	str	r0, [sp, #4]
 8020cf4:	429c      	cmp	r4, r3
 8020cf6:	bfb8      	it	lt
 8020cf8:	8144      	strhlt	r4, [r0, #10]
 8020cfa:	a801      	add	r0, sp, #4
 8020cfc:	f7fd fe08 	bl	801e910 <GUI_ALLOC_UnlockH>
 8020d00:	b002      	add	sp, #8
 8020d02:	bd10      	pop	{r4, pc}
 8020d04:	20000114 	.word	0x20000114

08020d08 <GUI_MEMDEV_Clear>:
 8020d08:	b513      	push	{r0, r1, r4, lr}
 8020d0a:	b918      	cbnz	r0, 8020d14 <GUI_MEMDEV_Clear+0xc>
 8020d0c:	4b0d      	ldr	r3, [pc, #52]	; (8020d44 <GUI_MEMDEV_Clear+0x3c>)
 8020d0e:	681b      	ldr	r3, [r3, #0]
 8020d10:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8020d12:	b1a8      	cbz	r0, 8020d40 <GUI_MEMDEV_Clear+0x38>
 8020d14:	f7fd fdee 	bl	801e8f4 <GUI_ALLOC_LockH>
 8020d18:	ab02      	add	r3, sp, #8
 8020d1a:	6944      	ldr	r4, [r0, #20]
 8020d1c:	f843 0d08 	str.w	r0, [r3, #-8]!
 8020d20:	4668      	mov	r0, sp
 8020d22:	f7fd fdf5 	bl	801e910 <GUI_ALLOC_UnlockH>
 8020d26:	b15c      	cbz	r4, 8020d40 <GUI_MEMDEV_Clear+0x38>
 8020d28:	4620      	mov	r0, r4
 8020d2a:	f7fd fde3 	bl	801e8f4 <GUI_ALLOC_LockH>
 8020d2e:	ac02      	add	r4, sp, #8
 8020d30:	6883      	ldr	r3, [r0, #8]
 8020d32:	f844 0d04 	str.w	r0, [r4, #-4]!
 8020d36:	689b      	ldr	r3, [r3, #8]
 8020d38:	4798      	blx	r3
 8020d3a:	4620      	mov	r0, r4
 8020d3c:	f7fd fde8 	bl	801e910 <GUI_ALLOC_UnlockH>
 8020d40:	b002      	add	sp, #8
 8020d42:	bd10      	pop	{r4, pc}
 8020d44:	20000114 	.word	0x20000114

08020d48 <LCD_SelectLCD>:
 8020d48:	b510      	push	{r4, lr}
 8020d4a:	4b0d      	ldr	r3, [pc, #52]	; (8020d80 <LCD_SelectLCD+0x38>)
 8020d4c:	681a      	ldr	r2, [r3, #0]
 8020d4e:	7c51      	ldrb	r1, [r2, #17]
 8020d50:	4a0c      	ldr	r2, [pc, #48]	; (8020d84 <LCD_SelectLCD+0x3c>)
 8020d52:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8020d56:	461c      	mov	r4, r3
 8020d58:	b140      	cbz	r0, 8020d6c <LCD_SelectLCD+0x24>
 8020d5a:	68c3      	ldr	r3, [r0, #12]
 8020d5c:	b113      	cbz	r3, 8020d64 <LCD_SelectLCD+0x1c>
 8020d5e:	681b      	ldr	r3, [r3, #0]
 8020d60:	2b04      	cmp	r3, #4
 8020d62:	d001      	beq.n	8020d68 <LCD_SelectLCD+0x20>
 8020d64:	6800      	ldr	r0, [r0, #0]
 8020d66:	e7f7      	b.n	8020d58 <LCD_SelectLCD+0x10>
 8020d68:	f7fc ff9a 	bl	801dca0 <GUI_DEVICE_Unlink>
 8020d6c:	6823      	ldr	r3, [r4, #0]
 8020d6e:	2200      	movs	r2, #0
 8020d70:	661a      	str	r2, [r3, #96]	; 0x60
 8020d72:	f103 0208 	add.w	r2, r3, #8
 8020d76:	615a      	str	r2, [r3, #20]
 8020d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020d7c:	f7fb bb7e 	b.w	801c47c <LCD_SetClipRectMax>
 8020d80:	20000114 	.word	0x20000114
 8020d84:	2002c5cc 	.word	0x2002c5cc

08020d88 <LCD_ReadRectEx>:
 8020d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d8c:	b087      	sub	sp, #28
 8020d8e:	4617      	mov	r7, r2
 8020d90:	9304      	str	r3, [sp, #16]
 8020d92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020d94:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020d96:	68da      	ldr	r2, [r3, #12]
 8020d98:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8020d9a:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8020d9e:	4606      	mov	r6, r0
 8020da0:	460d      	mov	r5, r1
 8020da2:	b973      	cbnz	r3, 8020dc2 <LCD_ReadRectEx+0x3a>
 8020da4:	4b71      	ldr	r3, [pc, #452]	; (8020f6c <LCD_ReadRectEx+0x1e4>)
 8020da6:	681b      	ldr	r3, [r3, #0]
 8020da8:	7c58      	ldrb	r0, [r3, #17]
 8020daa:	f7fb f819 	bl	801bde0 <GUI_GetBitsPerPixelEx>
 8020dae:	2808      	cmp	r0, #8
 8020db0:	4682      	mov	sl, r0
 8020db2:	dd15      	ble.n	8020de0 <LCD_ReadRectEx+0x58>
 8020db4:	2810      	cmp	r0, #16
 8020db6:	bfcc      	ite	gt
 8020db8:	f04f 0904 	movgt.w	r9, #4
 8020dbc:	f04f 0902 	movle.w	r9, #2
 8020dc0:	e010      	b.n	8020de4 <LCD_ReadRectEx+0x5c>
 8020dc2:	a811      	add	r0, sp, #68	; 0x44
 8020dc4:	2101      	movs	r1, #1
 8020dc6:	4798      	blx	r3
 8020dc8:	4684      	mov	ip, r0
 8020dca:	2800      	cmp	r0, #0
 8020dcc:	d0ea      	beq.n	8020da4 <LCD_ReadRectEx+0x1c>
 8020dce:	9b04      	ldr	r3, [sp, #16]
 8020dd0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020dd2:	e88d 0018 	stmia.w	sp, {r3, r4}
 8020dd6:	4631      	mov	r1, r6
 8020dd8:	462a      	mov	r2, r5
 8020dda:	463b      	mov	r3, r7
 8020ddc:	47e0      	blx	ip
 8020dde:	e0c1      	b.n	8020f64 <LCD_ReadRectEx+0x1dc>
 8020de0:	f04f 0901 	mov.w	r9, #1
 8020de4:	f04f 0b00 	mov.w	fp, #0
 8020de8:	9b04      	ldr	r3, [sp, #16]
 8020dea:	429d      	cmp	r5, r3
 8020dec:	f300 80ba 	bgt.w	8020f64 <LCD_ReadRectEx+0x1dc>
 8020df0:	f1b9 0f02 	cmp.w	r9, #2
 8020df4:	d009      	beq.n	8020e0a <LCD_ReadRectEx+0x82>
 8020df6:	f1b9 0f04 	cmp.w	r9, #4
 8020dfa:	d004      	beq.n	8020e06 <LCD_ReadRectEx+0x7e>
 8020dfc:	f1b9 0f01 	cmp.w	r9, #1
 8020e00:	f040 80ae 	bne.w	8020f60 <LCD_ReadRectEx+0x1d8>
 8020e04:	e003      	b.n	8020e0e <LCD_ReadRectEx+0x86>
 8020e06:	46b4      	mov	ip, r6
 8020e08:	e09b      	b.n	8020f42 <LCD_ReadRectEx+0x1ba>
 8020e0a:	46b4      	mov	ip, r6
 8020e0c:	e08a      	b.n	8020f24 <LCD_ReadRectEx+0x19c>
 8020e0e:	f10a 32ff 	add.w	r2, sl, #4294967295
 8020e12:	2a07      	cmp	r2, #7
 8020e14:	f200 80a4 	bhi.w	8020f60 <LCD_ReadRectEx+0x1d8>
 8020e18:	e8df f002 	tbb	[pc, r2]
 8020e1c:	0606080a 	.word	0x0606080a
 8020e20:	04040404 	.word	0x04040404
 8020e24:	46b4      	mov	ip, r6
 8020e26:	e066      	b.n	8020ef6 <LCD_ReadRectEx+0x16e>
 8020e28:	46b4      	mov	ip, r6
 8020e2a:	e047      	b.n	8020ebc <LCD_ReadRectEx+0x134>
 8020e2c:	46b4      	mov	ip, r6
 8020e2e:	e022      	b.n	8020e76 <LCD_ReadRectEx+0xee>
 8020e30:	46b4      	mov	ip, r6
 8020e32:	45bc      	cmp	ip, r7
 8020e34:	f300 8094 	bgt.w	8020f60 <LCD_ReadRectEx+0x1d8>
 8020e38:	4661      	mov	r1, ip
 8020e3a:	462a      	mov	r2, r5
 8020e3c:	f8cd c00c 	str.w	ip, [sp, #12]
 8020e40:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020e42:	47c0      	blx	r8
 8020e44:	f1cb 0207 	rsb	r2, fp, #7
 8020e48:	fa00 f202 	lsl.w	r2, r0, r2
 8020e4c:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8020e50:	7820      	ldrb	r0, [r4, #0]
 8020e52:	fa41 f10b 	asr.w	r1, r1, fp
 8020e56:	4001      	ands	r1, r0
 8020e58:	430a      	orrs	r2, r1
 8020e5a:	7022      	strb	r2, [r4, #0]
 8020e5c:	f10b 0301 	add.w	r3, fp, #1
 8020e60:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8020e64:	f023 0207 	bic.w	r2, r3, #7
 8020e68:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8020e6c:	fa43 fb02 	asr.w	fp, r3, r2
 8020e70:	f10c 0c01 	add.w	ip, ip, #1
 8020e74:	e7dd      	b.n	8020e32 <LCD_ReadRectEx+0xaa>
 8020e76:	45bc      	cmp	ip, r7
 8020e78:	dc72      	bgt.n	8020f60 <LCD_ReadRectEx+0x1d8>
 8020e7a:	4661      	mov	r1, ip
 8020e7c:	462a      	mov	r2, r5
 8020e7e:	f8cd c00c 	str.w	ip, [sp, #12]
 8020e82:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020e84:	47c0      	blx	r8
 8020e86:	ea4f 024b 	mov.w	r2, fp, lsl #1
 8020e8a:	f1c2 0106 	rsb	r1, r2, #6
 8020e8e:	fa00 f101 	lsl.w	r1, r0, r1
 8020e92:	f64f 703f 	movw	r0, #65343	; 0xff3f
 8020e96:	fa40 f202 	asr.w	r2, r0, r2
 8020e9a:	7820      	ldrb	r0, [r4, #0]
 8020e9c:	4002      	ands	r2, r0
 8020e9e:	4311      	orrs	r1, r2
 8020ea0:	7021      	strb	r1, [r4, #0]
 8020ea2:	f10b 0301 	add.w	r3, fp, #1
 8020ea6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8020eaa:	f023 0203 	bic.w	r2, r3, #3
 8020eae:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8020eb2:	fa43 fb02 	asr.w	fp, r3, r2
 8020eb6:	f10c 0c01 	add.w	ip, ip, #1
 8020eba:	e7dc      	b.n	8020e76 <LCD_ReadRectEx+0xee>
 8020ebc:	45bc      	cmp	ip, r7
 8020ebe:	dc4f      	bgt.n	8020f60 <LCD_ReadRectEx+0x1d8>
 8020ec0:	4661      	mov	r1, ip
 8020ec2:	462a      	mov	r2, r5
 8020ec4:	f8cd c00c 	str.w	ip, [sp, #12]
 8020ec8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020eca:	47c0      	blx	r8
 8020ecc:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8020ed0:	f1c2 0104 	rsb	r1, r2, #4
 8020ed4:	fa00 f101 	lsl.w	r1, r0, r1
 8020ed8:	200f      	movs	r0, #15
 8020eda:	fa00 f202 	lsl.w	r2, r0, r2
 8020ede:	7820      	ldrb	r0, [r4, #0]
 8020ee0:	4002      	ands	r2, r0
 8020ee2:	4311      	orrs	r1, r2
 8020ee4:	7021      	strb	r1, [r4, #0]
 8020ee6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8020eea:	445c      	add	r4, fp
 8020eec:	f10c 0c01 	add.w	ip, ip, #1
 8020ef0:	f08b 0b01 	eor.w	fp, fp, #1
 8020ef4:	e7e2      	b.n	8020ebc <LCD_ReadRectEx+0x134>
 8020ef6:	4273      	negs	r3, r6
 8020ef8:	1ba2      	subs	r2, r4, r6
 8020efa:	45bc      	cmp	ip, r7
 8020efc:	9305      	str	r3, [sp, #20]
 8020efe:	4462      	add	r2, ip
 8020f00:	dc0e      	bgt.n	8020f20 <LCD_ReadRectEx+0x198>
 8020f02:	4661      	mov	r1, ip
 8020f04:	462a      	mov	r2, r5
 8020f06:	f8cd c00c 	str.w	ip, [sp, #12]
 8020f0a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020f0c:	47c0      	blx	r8
 8020f0e:	9a05      	ldr	r2, [sp, #20]
 8020f10:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8020f14:	4422      	add	r2, r4
 8020f16:	f802 000c 	strb.w	r0, [r2, ip]
 8020f1a:	f10c 0c01 	add.w	ip, ip, #1
 8020f1e:	e7ea      	b.n	8020ef6 <LCD_ReadRectEx+0x16e>
 8020f20:	4614      	mov	r4, r2
 8020f22:	e01d      	b.n	8020f60 <LCD_ReadRectEx+0x1d8>
 8020f24:	45bc      	cmp	ip, r7
 8020f26:	dc1b      	bgt.n	8020f60 <LCD_ReadRectEx+0x1d8>
 8020f28:	4661      	mov	r1, ip
 8020f2a:	f8cd c00c 	str.w	ip, [sp, #12]
 8020f2e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020f30:	462a      	mov	r2, r5
 8020f32:	47c0      	blx	r8
 8020f34:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8020f38:	f824 0b02 	strh.w	r0, [r4], #2
 8020f3c:	f10c 0c01 	add.w	ip, ip, #1
 8020f40:	e7f0      	b.n	8020f24 <LCD_ReadRectEx+0x19c>
 8020f42:	45bc      	cmp	ip, r7
 8020f44:	dc0c      	bgt.n	8020f60 <LCD_ReadRectEx+0x1d8>
 8020f46:	4661      	mov	r1, ip
 8020f48:	f8cd c00c 	str.w	ip, [sp, #12]
 8020f4c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020f4e:	462a      	mov	r2, r5
 8020f50:	47c0      	blx	r8
 8020f52:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8020f56:	f844 0b04 	str.w	r0, [r4], #4
 8020f5a:	f10c 0c01 	add.w	ip, ip, #1
 8020f5e:	e7f0      	b.n	8020f42 <LCD_ReadRectEx+0x1ba>
 8020f60:	3501      	adds	r5, #1
 8020f62:	e741      	b.n	8020de8 <LCD_ReadRectEx+0x60>
 8020f64:	b007      	add	sp, #28
 8020f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f6a:	bf00      	nop
 8020f6c:	20000114 	.word	0x20000114

08020f70 <GUI_ReadRectEx>:
 8020f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020f72:	4d16      	ldr	r5, [pc, #88]	; (8020fcc <GUI_ReadRectEx+0x5c>)
 8020f74:	9e05      	ldr	r6, [sp, #20]
 8020f76:	682d      	ldr	r5, [r5, #0]
 8020f78:	9c06      	ldr	r4, [sp, #24]
 8020f7a:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 8020f7e:	42b8      	cmp	r0, r7
 8020f80:	bfb8      	it	lt
 8020f82:	4638      	movlt	r0, r7
 8020f84:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8020f88:	42ba      	cmp	r2, r7
 8020f8a:	bfa8      	it	ge
 8020f8c:	463a      	movge	r2, r7
 8020f8e:	4282      	cmp	r2, r0
 8020f90:	db1b      	blt.n	8020fca <GUI_ReadRectEx+0x5a>
 8020f92:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 8020f96:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 8020f9a:	42b9      	cmp	r1, r7
 8020f9c:	bfb8      	it	lt
 8020f9e:	4639      	movlt	r1, r7
 8020fa0:	42ab      	cmp	r3, r5
 8020fa2:	bfa8      	it	ge
 8020fa4:	462b      	movge	r3, r5
 8020fa6:	428b      	cmp	r3, r1
 8020fa8:	db0f      	blt.n	8020fca <GUI_ReadRectEx+0x5a>
 8020faa:	68e5      	ldr	r5, [r4, #12]
 8020fac:	682d      	ldr	r5, [r5, #0]
 8020fae:	f035 0704 	bics.w	r7, r5, #4
 8020fb2:	d105      	bne.n	8020fc0 <GUI_ReadRectEx+0x50>
 8020fb4:	9605      	str	r6, [sp, #20]
 8020fb6:	9406      	str	r4, [sp, #24]
 8020fb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8020fbc:	f7ff bee4 	b.w	8020d88 <LCD_ReadRectEx>
 8020fc0:	6825      	ldr	r5, [r4, #0]
 8020fc2:	2d00      	cmp	r5, #0
 8020fc4:	d0f6      	beq.n	8020fb4 <GUI_ReadRectEx+0x44>
 8020fc6:	462c      	mov	r4, r5
 8020fc8:	e7ef      	b.n	8020faa <GUI_ReadRectEx+0x3a>
 8020fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020fcc:	20000114 	.word	0x20000114

08020fd0 <LCD_GetPixelColor>:
 8020fd0:	b508      	push	{r3, lr}
 8020fd2:	f000 f805 	bl	8020fe0 <LCD_GetPixelIndex>
 8020fd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8020fda:	f7fb bab9 	b.w	801c550 <LCD_Index2Color>
	...

08020fe0 <LCD_GetPixelIndex>:
 8020fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020fe2:	4f14      	ldr	r7, [pc, #80]	; (8021034 <LCD_GetPixelIndex+0x54>)
 8020fe4:	4e14      	ldr	r6, [pc, #80]	; (8021038 <LCD_GetPixelIndex+0x58>)
 8020fe6:	683b      	ldr	r3, [r7, #0]
 8020fe8:	7c5b      	ldrb	r3, [r3, #17]
 8020fea:	4605      	mov	r5, r0
 8020fec:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8020ff0:	68c3      	ldr	r3, [r0, #12]
 8020ff2:	460c      	mov	r4, r1
 8020ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ff6:	4669      	mov	r1, sp
 8020ff8:	4798      	blx	r3
 8020ffa:	f9bd 3000 	ldrsh.w	r3, [sp]
 8020ffe:	429d      	cmp	r5, r3
 8021000:	db15      	blt.n	802102e <LCD_GetPixelIndex+0x4e>
 8021002:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8021006:	429d      	cmp	r5, r3
 8021008:	dc11      	bgt.n	802102e <LCD_GetPixelIndex+0x4e>
 802100a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802100e:	429c      	cmp	r4, r3
 8021010:	db0d      	blt.n	802102e <LCD_GetPixelIndex+0x4e>
 8021012:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8021016:	429c      	cmp	r4, r3
 8021018:	dc09      	bgt.n	802102e <LCD_GetPixelIndex+0x4e>
 802101a:	683b      	ldr	r3, [r7, #0]
 802101c:	7c5b      	ldrb	r3, [r3, #17]
 802101e:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8021022:	68c3      	ldr	r3, [r0, #12]
 8021024:	4629      	mov	r1, r5
 8021026:	695b      	ldr	r3, [r3, #20]
 8021028:	4622      	mov	r2, r4
 802102a:	4798      	blx	r3
 802102c:	e000      	b.n	8021030 <LCD_GetPixelIndex+0x50>
 802102e:	2000      	movs	r0, #0
 8021030:	b003      	add	sp, #12
 8021032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021034:	20000114 	.word	0x20000114
 8021038:	2002c5cc 	.word	0x2002c5cc

0802103c <LCD_GetBkColorIndex>:
 802103c:	4b02      	ldr	r3, [pc, #8]	; (8021048 <LCD_GetBkColorIndex+0xc>)
 802103e:	681b      	ldr	r3, [r3, #0]
 8021040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021042:	6818      	ldr	r0, [r3, #0]
 8021044:	4770      	bx	lr
 8021046:	bf00      	nop
 8021048:	20000114 	.word	0x20000114

0802104c <LCD_GetColorIndex>:
 802104c:	4b02      	ldr	r3, [pc, #8]	; (8021058 <LCD_GetColorIndex+0xc>)
 802104e:	681b      	ldr	r3, [r3, #0]
 8021050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021052:	6818      	ldr	r0, [r3, #0]
 8021054:	4770      	bx	lr
 8021056:	bf00      	nop
 8021058:	20000114 	.word	0x20000114

0802105c <_OnExit>:
 802105c:	b510      	push	{r4, lr}
 802105e:	4c03      	ldr	r4, [pc, #12]	; (802106c <_OnExit+0x10>)
 8021060:	6820      	ldr	r0, [r4, #0]
 8021062:	f7fd fc33 	bl	801e8cc <GUI_ALLOC_FreeFixedBlock>
 8021066:	2300      	movs	r3, #0
 8021068:	6023      	str	r3, [r4, #0]
 802106a:	bd10      	pop	{r4, pc}
 802106c:	2002c6cc 	.word	0x2002c6cc

08021070 <LCD_InitColors>:
 8021070:	b538      	push	{r3, r4, r5, lr}
 8021072:	4d09      	ldr	r5, [pc, #36]	; (8021098 <LCD_InitColors+0x28>)
 8021074:	682c      	ldr	r4, [r5, #0]
 8021076:	b95c      	cbnz	r4, 8021090 <LCD_InitColors+0x20>
 8021078:	4b08      	ldr	r3, [pc, #32]	; (802109c <LCD_InitColors+0x2c>)
 802107a:	6818      	ldr	r0, [r3, #0]
 802107c:	0080      	lsls	r0, r0, #2
 802107e:	f7fd fd85 	bl	801eb8c <GUI_ALLOC_GetFixedBlock>
 8021082:	6028      	str	r0, [r5, #0]
 8021084:	b130      	cbz	r0, 8021094 <LCD_InitColors+0x24>
 8021086:	4806      	ldr	r0, [pc, #24]	; (80210a0 <LCD_InitColors+0x30>)
 8021088:	4b06      	ldr	r3, [pc, #24]	; (80210a4 <LCD_InitColors+0x34>)
 802108a:	6003      	str	r3, [r0, #0]
 802108c:	f7fc ff0a 	bl	801dea4 <GUI__RegisterExit>
 8021090:	2000      	movs	r0, #0
 8021092:	bd38      	pop	{r3, r4, r5, pc}
 8021094:	2001      	movs	r0, #1
 8021096:	bd38      	pop	{r3, r4, r5, pc}
 8021098:	2002c6cc 	.word	0x2002c6cc
 802109c:	20000168 	.word	0x20000168
 80210a0:	2002c524 	.word	0x2002c524
 80210a4:	0802105d 	.word	0x0802105d

080210a8 <LCD_GetpPalConvTableUncached>:
 80210a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80210ac:	b320      	cbz	r0, 80210f8 <LCD_GetpPalConvTableUncached+0x50>
 80210ae:	6885      	ldr	r5, [r0, #8]
 80210b0:	b1dd      	cbz	r5, 80210ea <LCD_GetpPalConvTableUncached+0x42>
 80210b2:	4e12      	ldr	r6, [pc, #72]	; (80210fc <LCD_GetpPalConvTableUncached+0x54>)
 80210b4:	6833      	ldr	r3, [r6, #0]
 80210b6:	b1db      	cbz	r3, 80210f0 <LCD_GetpPalConvTableUncached+0x48>
 80210b8:	6803      	ldr	r3, [r0, #0]
 80210ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80210be:	dc1a      	bgt.n	80210f6 <LCD_GetpPalConvTableUncached+0x4e>
 80210c0:	4a0f      	ldr	r2, [pc, #60]	; (8021100 <LCD_GetpPalConvTableUncached+0x58>)
 80210c2:	6812      	ldr	r2, [r2, #0]
 80210c4:	2400      	movs	r4, #0
 80210c6:	429a      	cmp	r2, r3
 80210c8:	bfb4      	ite	lt
 80210ca:	4690      	movlt	r8, r2
 80210cc:	4698      	movge	r8, r3
 80210ce:	4544      	cmp	r4, r8
 80210d0:	da08      	bge.n	80210e4 <LCD_GetpPalConvTableUncached+0x3c>
 80210d2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80210d6:	6837      	ldr	r7, [r6, #0]
 80210d8:	f7fb fa2a 	bl	801c530 <LCD_Color2Index>
 80210dc:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 80210e0:	3401      	adds	r4, #1
 80210e2:	e7f4      	b.n	80210ce <LCD_GetpPalConvTableUncached+0x26>
 80210e4:	6830      	ldr	r0, [r6, #0]
 80210e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210ea:	4628      	mov	r0, r5
 80210ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210f0:	4618      	mov	r0, r3
 80210f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210f6:	2000      	movs	r0, #0
 80210f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210fc:	2002c6cc 	.word	0x2002c6cc
 8021100:	20000168 	.word	0x20000168

08021104 <LCD_GetpPalConvTableBM>:
 8021104:	f7ff bfd0 	b.w	80210a8 <LCD_GetpPalConvTableUncached>

08021108 <LCD_InitLUT>:
 8021108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802110c:	f000 fd19 	bl	8021b42 <LCD_GetNumLayers>
 8021110:	2400      	movs	r4, #0
 8021112:	4680      	mov	r8, r0
 8021114:	4544      	cmp	r4, r8
 8021116:	da2c      	bge.n	8021172 <LCD_InitLUT+0x6a>
 8021118:	4620      	mov	r0, r4
 802111a:	f7fc fd89 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 802111e:	b330      	cbz	r0, 802116e <LCD_InitLUT+0x66>
 8021120:	4e15      	ldr	r6, [pc, #84]	; (8021178 <LCD_InitLUT+0x70>)
 8021122:	6833      	ldr	r3, [r6, #0]
 8021124:	4620      	mov	r0, r4
 8021126:	f893 9011 	ldrb.w	r9, [r3, #17]
 802112a:	745c      	strb	r4, [r3, #17]
 802112c:	f7fa fe30 	bl	801bd90 <LCD_GetBitsPerPixelEx>
 8021130:	2808      	cmp	r0, #8
 8021132:	dd03      	ble.n	802113c <LCD_InitLUT+0x34>
 8021134:	6833      	ldr	r3, [r6, #0]
 8021136:	f883 9011 	strb.w	r9, [r3, #17]
 802113a:	e018      	b.n	802116e <LCD_InitLUT+0x66>
 802113c:	4b0f      	ldr	r3, [pc, #60]	; (802117c <LCD_InitLUT+0x74>)
 802113e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8021142:	691a      	ldr	r2, [r3, #16]
 8021144:	4b0e      	ldr	r3, [pc, #56]	; (8021180 <LCD_InitLUT+0x78>)
 8021146:	429a      	cmp	r2, r3
 8021148:	d0f4      	beq.n	8021134 <LCD_InitLUT+0x2c>
 802114a:	4620      	mov	r0, r4
 802114c:	f7fa fe23 	bl	801bd96 <LCD_GetNumColorsEx>
 8021150:	2500      	movs	r5, #0
 8021152:	4682      	mov	sl, r0
 8021154:	4555      	cmp	r5, sl
 8021156:	daed      	bge.n	8021134 <LCD_InitLUT+0x2c>
 8021158:	b2ef      	uxtb	r7, r5
 802115a:	4638      	mov	r0, r7
 802115c:	f7fb f9f8 	bl	801c550 <LCD_Index2Color>
 8021160:	4639      	mov	r1, r7
 8021162:	4602      	mov	r2, r0
 8021164:	4620      	mov	r0, r4
 8021166:	f7fa fd9f 	bl	801bca8 <LCD_SetLUTEntryEx>
 802116a:	3501      	adds	r5, #1
 802116c:	e7f2      	b.n	8021154 <LCD_InitLUT+0x4c>
 802116e:	3401      	adds	r4, #1
 8021170:	e7d0      	b.n	8021114 <LCD_InitLUT+0xc>
 8021172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021176:	bf00      	nop
 8021178:	20000114 	.word	0x20000114
 802117c:	2002c5cc 	.word	0x2002c5cc
 8021180:	08130df0 	.word	0x08130df0

08021184 <LCD_AA_SetAndMask>:
 8021184:	4b02      	ldr	r3, [pc, #8]	; (8021190 <LCD_AA_SetAndMask+0xc>)
 8021186:	681a      	ldr	r2, [r3, #0]
 8021188:	6018      	str	r0, [r3, #0]
 802118a:	4610      	mov	r0, r2
 802118c:	4770      	bx	lr
 802118e:	bf00      	nop
 8021190:	2000016c 	.word	0x2000016c

08021194 <LCD_AA_MixColors16>:
 8021194:	b538      	push	{r3, r4, r5, lr}
 8021196:	0e0d      	lsrs	r5, r1, #24
 8021198:	2dff      	cmp	r5, #255	; 0xff
 802119a:	460b      	mov	r3, r1
 802119c:	d11e      	bne.n	80211dc <LCD_AA_MixColors16+0x48>
 802119e:	0e01      	lsrs	r1, r0, #24
 80211a0:	d109      	bne.n	80211b6 <LCD_AA_MixColors16+0x22>
 80211a2:	f06f 0310 	mvn.w	r3, #16
 80211a6:	4353      	muls	r3, r2
 80211a8:	4a12      	ldr	r2, [pc, #72]	; (80211f4 <LCD_AA_MixColors16+0x60>)
 80211aa:	33ff      	adds	r3, #255	; 0xff
 80211ac:	6811      	ldr	r1, [r2, #0]
 80211ae:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 80211b2:	400b      	ands	r3, r1
 80211b4:	e01b      	b.n	80211ee <LCD_AA_MixColors16+0x5a>
 80211b6:	29fe      	cmp	r1, #254	; 0xfe
 80211b8:	d819      	bhi.n	80211ee <LCD_AA_MixColors16+0x5a>
 80211ba:	f06f 0310 	mvn.w	r3, #16
 80211be:	435a      	muls	r2, r3
 80211c0:	32ff      	adds	r2, #255	; 0xff
 80211c2:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
 80211c6:	434b      	muls	r3, r1
 80211c8:	fbb3 f3f5 	udiv	r3, r3, r5
 80211cc:	4413      	add	r3, r2
 80211ce:	4a09      	ldr	r2, [pc, #36]	; (80211f4 <LCD_AA_MixColors16+0x60>)
 80211d0:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
 80211d4:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
 80211d8:	6810      	ldr	r0, [r2, #0]
 80211da:	e007      	b.n	80211ec <LCD_AA_MixColors16+0x58>
 80211dc:	4b06      	ldr	r3, [pc, #24]	; (80211f8 <LCD_AA_MixColors16+0x64>)
 80211de:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80211e2:	681d      	ldr	r5, [r3, #0]
 80211e4:	b2d2      	uxtb	r2, r2
 80211e6:	47a8      	blx	r5
 80211e8:	4b02      	ldr	r3, [pc, #8]	; (80211f4 <LCD_AA_MixColors16+0x60>)
 80211ea:	681b      	ldr	r3, [r3, #0]
 80211ec:	4003      	ands	r3, r0
 80211ee:	4618      	mov	r0, r3
 80211f0:	bd38      	pop	{r3, r4, r5, pc}
 80211f2:	bf00      	nop
 80211f4:	2000016c 	.word	0x2000016c
 80211f8:	20000104 	.word	0x20000104

080211fc <LCD_SetPixelAA4_Trans>:
 80211fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021200:	4605      	mov	r5, r0
 8021202:	460c      	mov	r4, r1
 8021204:	4616      	mov	r6, r2
 8021206:	2a00      	cmp	r2, #0
 8021208:	d03d      	beq.n	8021286 <LCD_SetPixelAA4_Trans+0x8a>
 802120a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8021290 <LCD_SetPixelAA4_Trans+0x94>
 802120e:	f8d8 3000 	ldr.w	r3, [r8]
 8021212:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8021216:	4291      	cmp	r1, r2
 8021218:	db35      	blt.n	8021286 <LCD_SetPixelAA4_Trans+0x8a>
 802121a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 802121e:	4291      	cmp	r1, r2
 8021220:	dc31      	bgt.n	8021286 <LCD_SetPixelAA4_Trans+0x8a>
 8021222:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8021226:	4290      	cmp	r0, r2
 8021228:	db2d      	blt.n	8021286 <LCD_SetPixelAA4_Trans+0x8a>
 802122a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802122e:	4290      	cmp	r0, r2
 8021230:	dc29      	bgt.n	8021286 <LCD_SetPixelAA4_Trans+0x8a>
 8021232:	2e0e      	cmp	r6, #14
 8021234:	4f15      	ldr	r7, [pc, #84]	; (802128c <LCD_SetPixelAA4_Trans+0x90>)
 8021236:	f8d3 e03c 	ldr.w	lr, [r3, #60]	; 0x3c
 802123a:	d909      	bls.n	8021250 <LCD_SetPixelAA4_Trans+0x54>
 802123c:	7c5b      	ldrb	r3, [r3, #17]
 802123e:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8021242:	68c3      	ldr	r3, [r0, #12]
 8021244:	4629      	mov	r1, r5
 8021246:	699e      	ldr	r6, [r3, #24]
 8021248:	f8de 3000 	ldr.w	r3, [lr]
 802124c:	4622      	mov	r2, r4
 802124e:	e019      	b.n	8021284 <LCD_SetPixelAA4_Trans+0x88>
 8021250:	f8de 0000 	ldr.w	r0, [lr]
 8021254:	f7fb f97c 	bl	801c550 <LCD_Index2Color>
 8021258:	4621      	mov	r1, r4
 802125a:	4681      	mov	r9, r0
 802125c:	4628      	mov	r0, r5
 802125e:	f7ff feb7 	bl	8020fd0 <LCD_GetPixelColor>
 8021262:	4632      	mov	r2, r6
 8021264:	4601      	mov	r1, r0
 8021266:	4648      	mov	r0, r9
 8021268:	f7ff ff94 	bl	8021194 <LCD_AA_MixColors16>
 802126c:	f7fb f960 	bl	801c530 <LCD_Color2Index>
 8021270:	f8d8 2000 	ldr.w	r2, [r8]
 8021274:	7c52      	ldrb	r2, [r2, #17]
 8021276:	4603      	mov	r3, r0
 8021278:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 802127c:	68c1      	ldr	r1, [r0, #12]
 802127e:	4622      	mov	r2, r4
 8021280:	698e      	ldr	r6, [r1, #24]
 8021282:	4629      	mov	r1, r5
 8021284:	47b0      	blx	r6
 8021286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802128a:	bf00      	nop
 802128c:	2002c5cc 	.word	0x2002c5cc
 8021290:	20000114 	.word	0x20000114

08021294 <GUI__ExpandPixelIndicesEx>:
 8021294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021298:	1e0c      	subs	r4, r1, #0
 802129a:	4605      	mov	r5, r0
 802129c:	f340 80b3 	ble.w	8021406 <GUI__ExpandPixelIndicesEx+0x172>
 80212a0:	2a08      	cmp	r2, #8
 80212a2:	685f      	ldr	r7, [r3, #4]
 80212a4:	dd04      	ble.n	80212b0 <GUI__ExpandPixelIndicesEx+0x1c>
 80212a6:	2a10      	cmp	r2, #16
 80212a8:	f340 8098 	ble.w	80213dc <GUI__ExpandPixelIndicesEx+0x148>
 80212ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80212b0:	3a01      	subs	r2, #1
 80212b2:	2a07      	cmp	r2, #7
 80212b4:	f200 80a7 	bhi.w	8021406 <GUI__ExpandPixelIndicesEx+0x172>
 80212b8:	e8df f002 	tbb	[pc, r2]
 80212bc:	58a52d04 	.word	0x58a52d04
 80212c0:	83a5a5a5 	.word	0x83a5a5a5
 80212c4:	1e66      	subs	r6, r4, #1
 80212c6:	10f2      	asrs	r2, r6, #3
 80212c8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80212cc:	3b01      	subs	r3, #1
 80212ce:	eb05 0802 	add.w	r8, r5, r2
 80212d2:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 80212d6:	f006 0607 	and.w	r6, r6, #7
 80212da:	f815 a002 	ldrb.w	sl, [r5, r2]
 80212de:	2580      	movs	r5, #128	; 0x80
 80212e0:	4135      	asrs	r5, r6
 80212e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80212e6:	b2ed      	uxtb	r5, r5
 80212e8:	f1c6 0307 	rsb	r3, r6, #7
 80212ec:	ea0a 0005 	and.w	r0, sl, r5
 80212f0:	4118      	asrs	r0, r3
 80212f2:	47b8      	blx	r7
 80212f4:	f849 0904 	str.w	r0, [r9], #-4
 80212f8:	b936      	cbnz	r6, 8021308 <GUI__ExpandPixelIndicesEx+0x74>
 80212fa:	f898 a000 	ldrb.w	sl, [r8]
 80212fe:	2501      	movs	r5, #1
 8021300:	f108 38ff 	add.w	r8, r8, #4294967295
 8021304:	2607      	movs	r6, #7
 8021306:	e002      	b.n	802130e <GUI__ExpandPixelIndicesEx+0x7a>
 8021308:	006d      	lsls	r5, r5, #1
 802130a:	3e01      	subs	r6, #1
 802130c:	b2ed      	uxtb	r5, r5
 802130e:	3c01      	subs	r4, #1
 8021310:	d1ea      	bne.n	80212e8 <GUI__ExpandPixelIndicesEx+0x54>
 8021312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021316:	1e66      	subs	r6, r4, #1
 8021318:	10b2      	asrs	r2, r6, #2
 802131a:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 802131e:	3b01      	subs	r3, #1
 8021320:	f006 0603 	and.w	r6, r6, #3
 8021324:	eb05 0802 	add.w	r8, r5, r2
 8021328:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 802132c:	f815 a002 	ldrb.w	sl, [r5, r2]
 8021330:	0073      	lsls	r3, r6, #1
 8021332:	25c0      	movs	r5, #192	; 0xc0
 8021334:	411d      	asrs	r5, r3
 8021336:	f108 38ff 	add.w	r8, r8, #4294967295
 802133a:	b2ed      	uxtb	r5, r5
 802133c:	0073      	lsls	r3, r6, #1
 802133e:	f1c3 0306 	rsb	r3, r3, #6
 8021342:	ea0a 0005 	and.w	r0, sl, r5
 8021346:	4118      	asrs	r0, r3
 8021348:	47b8      	blx	r7
 802134a:	f849 0904 	str.w	r0, [r9], #-4
 802134e:	b936      	cbnz	r6, 802135e <GUI__ExpandPixelIndicesEx+0xca>
 8021350:	2503      	movs	r5, #3
 8021352:	f898 a000 	ldrb.w	sl, [r8]
 8021356:	462e      	mov	r6, r5
 8021358:	f108 38ff 	add.w	r8, r8, #4294967295
 802135c:	e002      	b.n	8021364 <GUI__ExpandPixelIndicesEx+0xd0>
 802135e:	00ad      	lsls	r5, r5, #2
 8021360:	3e01      	subs	r6, #1
 8021362:	b2ed      	uxtb	r5, r5
 8021364:	3c01      	subs	r4, #1
 8021366:	d1e9      	bne.n	802133c <GUI__ExpandPixelIndicesEx+0xa8>
 8021368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802136c:	1e66      	subs	r6, r4, #1
 802136e:	1072      	asrs	r2, r6, #1
 8021370:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8021374:	3b01      	subs	r3, #1
 8021376:	f006 0601 	and.w	r6, r6, #1
 802137a:	eb05 0802 	add.w	r8, r5, r2
 802137e:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8021382:	f815 a002 	ldrb.w	sl, [r5, r2]
 8021386:	00b3      	lsls	r3, r6, #2
 8021388:	25f0      	movs	r5, #240	; 0xf0
 802138a:	411d      	asrs	r5, r3
 802138c:	f108 38ff 	add.w	r8, r8, #4294967295
 8021390:	b2ed      	uxtb	r5, r5
 8021392:	00b3      	lsls	r3, r6, #2
 8021394:	f1c3 0304 	rsb	r3, r3, #4
 8021398:	ea0a 0005 	and.w	r0, sl, r5
 802139c:	4118      	asrs	r0, r3
 802139e:	47b8      	blx	r7
 80213a0:	f849 0904 	str.w	r0, [r9], #-4
 80213a4:	b936      	cbnz	r6, 80213b4 <GUI__ExpandPixelIndicesEx+0x120>
 80213a6:	f898 a000 	ldrb.w	sl, [r8]
 80213aa:	250f      	movs	r5, #15
 80213ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80213b0:	2601      	movs	r6, #1
 80213b2:	e002      	b.n	80213ba <GUI__ExpandPixelIndicesEx+0x126>
 80213b4:	012d      	lsls	r5, r5, #4
 80213b6:	b2ed      	uxtb	r5, r5
 80213b8:	2600      	movs	r6, #0
 80213ba:	3c01      	subs	r4, #1
 80213bc:	d1e9      	bne.n	8021392 <GUI__ExpandPixelIndicesEx+0xfe>
 80213be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80213c2:	192e      	adds	r6, r5, r4
 80213c4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 80213c8:	1b34      	subs	r4, r6, r4
 80213ca:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 80213ce:	47b8      	blx	r7
 80213d0:	42a6      	cmp	r6, r4
 80213d2:	f845 0d04 	str.w	r0, [r5, #-4]!
 80213d6:	d1f8      	bne.n	80213ca <GUI__ExpandPixelIndicesEx+0x136>
 80213d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80213dc:	695e      	ldr	r6, [r3, #20]
 80213de:	b12e      	cbz	r6, 80213ec <GUI__ExpandPixelIndicesEx+0x158>
 80213e0:	4629      	mov	r1, r5
 80213e2:	4622      	mov	r2, r4
 80213e4:	2302      	movs	r3, #2
 80213e6:	47b0      	blx	r6
 80213e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80213ec:	0064      	lsls	r4, r4, #1
 80213ee:	4425      	add	r5, r4
 80213f0:	192e      	adds	r6, r5, r4
 80213f2:	1b2c      	subs	r4, r5, r4
 80213f4:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 80213f8:	47b8      	blx	r7
 80213fa:	42a5      	cmp	r5, r4
 80213fc:	f846 0d04 	str.w	r0, [r6, #-4]!
 8021400:	d1f8      	bne.n	80213f4 <GUI__ExpandPixelIndicesEx+0x160>
 8021402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0802140a <GUI__CompactPixelIndices>:
 802140a:	2a08      	cmp	r2, #8
 802140c:	b510      	push	{r4, lr}
 802140e:	dd0e      	ble.n	802142e <GUI__CompactPixelIndices+0x24>
 8021410:	2a10      	cmp	r2, #16
 8021412:	dc0a      	bgt.n	802142a <GUI__CompactPixelIndices+0x20>
 8021414:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8021418:	4603      	mov	r3, r0
 802141a:	f850 2b04 	ldr.w	r2, [r0], #4
 802141e:	f823 2b02 	strh.w	r2, [r3], #2
 8021422:	428b      	cmp	r3, r1
 8021424:	d1f9      	bne.n	802141a <GUI__CompactPixelIndices+0x10>
 8021426:	2001      	movs	r0, #1
 8021428:	bd10      	pop	{r4, pc}
 802142a:	2000      	movs	r0, #0
 802142c:	bd10      	pop	{r4, pc}
 802142e:	2a02      	cmp	r2, #2
 8021430:	d06d      	beq.n	802150e <GUI__CompactPixelIndices+0x104>
 8021432:	2a04      	cmp	r2, #4
 8021434:	d054      	beq.n	80214e0 <GUI__CompactPixelIndices+0xd6>
 8021436:	2a01      	cmp	r2, #1
 8021438:	f040 8095 	bne.w	8021566 <GUI__CompactPixelIndices+0x15c>
 802143c:	4604      	mov	r4, r0
 802143e:	6803      	ldr	r3, [r0, #0]
 8021440:	2901      	cmp	r1, #1
 8021442:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8021446:	b2db      	uxtb	r3, r3
 8021448:	d047      	beq.n	80214da <GUI__CompactPixelIndices+0xd0>
 802144a:	6842      	ldr	r2, [r0, #4]
 802144c:	2902      	cmp	r1, #2
 802144e:	f002 0201 	and.w	r2, r2, #1
 8021452:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8021456:	d102      	bne.n	802145e <GUI__CompactPixelIndices+0x54>
 8021458:	f100 0208 	add.w	r2, r0, #8
 802145c:	e03e      	b.n	80214dc <GUI__CompactPixelIndices+0xd2>
 802145e:	6882      	ldr	r2, [r0, #8]
 8021460:	2903      	cmp	r1, #3
 8021462:	f002 0201 	and.w	r2, r2, #1
 8021466:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 802146a:	d102      	bne.n	8021472 <GUI__CompactPixelIndices+0x68>
 802146c:	f100 020c 	add.w	r2, r0, #12
 8021470:	e034      	b.n	80214dc <GUI__CompactPixelIndices+0xd2>
 8021472:	68c2      	ldr	r2, [r0, #12]
 8021474:	2904      	cmp	r1, #4
 8021476:	f002 0201 	and.w	r2, r2, #1
 802147a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 802147e:	d102      	bne.n	8021486 <GUI__CompactPixelIndices+0x7c>
 8021480:	f100 0210 	add.w	r2, r0, #16
 8021484:	e02a      	b.n	80214dc <GUI__CompactPixelIndices+0xd2>
 8021486:	6902      	ldr	r2, [r0, #16]
 8021488:	2905      	cmp	r1, #5
 802148a:	f002 0201 	and.w	r2, r2, #1
 802148e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8021492:	d102      	bne.n	802149a <GUI__CompactPixelIndices+0x90>
 8021494:	f100 0214 	add.w	r2, r0, #20
 8021498:	e020      	b.n	80214dc <GUI__CompactPixelIndices+0xd2>
 802149a:	6942      	ldr	r2, [r0, #20]
 802149c:	2906      	cmp	r1, #6
 802149e:	f002 0201 	and.w	r2, r2, #1
 80214a2:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80214a6:	d102      	bne.n	80214ae <GUI__CompactPixelIndices+0xa4>
 80214a8:	f100 0218 	add.w	r2, r0, #24
 80214ac:	e016      	b.n	80214dc <GUI__CompactPixelIndices+0xd2>
 80214ae:	6982      	ldr	r2, [r0, #24]
 80214b0:	3907      	subs	r1, #7
 80214b2:	f002 0201 	and.w	r2, r2, #1
 80214b6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80214ba:	d102      	bne.n	80214c2 <GUI__CompactPixelIndices+0xb8>
 80214bc:	f100 021c 	add.w	r2, r0, #28
 80214c0:	e005      	b.n	80214ce <GUI__CompactPixelIndices+0xc4>
 80214c2:	f100 0220 	add.w	r2, r0, #32
 80214c6:	69c0      	ldr	r0, [r0, #28]
 80214c8:	f000 0001 	and.w	r0, r0, #1
 80214cc:	4303      	orrs	r3, r0
 80214ce:	f804 3b01 	strb.w	r3, [r4], #1
 80214d2:	2900      	cmp	r1, #0
 80214d4:	d0a7      	beq.n	8021426 <GUI__CompactPixelIndices+0x1c>
 80214d6:	4610      	mov	r0, r2
 80214d8:	e7b1      	b.n	802143e <GUI__CompactPixelIndices+0x34>
 80214da:	1d02      	adds	r2, r0, #4
 80214dc:	2100      	movs	r1, #0
 80214de:	e7f6      	b.n	80214ce <GUI__CompactPixelIndices+0xc4>
 80214e0:	4602      	mov	r2, r0
 80214e2:	6803      	ldr	r3, [r0, #0]
 80214e4:	2901      	cmp	r1, #1
 80214e6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80214ea:	b2db      	uxtb	r3, r3
 80214ec:	d102      	bne.n	80214f4 <GUI__CompactPixelIndices+0xea>
 80214ee:	1d04      	adds	r4, r0, #4
 80214f0:	2100      	movs	r1, #0
 80214f2:	e006      	b.n	8021502 <GUI__CompactPixelIndices+0xf8>
 80214f4:	f100 0408 	add.w	r4, r0, #8
 80214f8:	6840      	ldr	r0, [r0, #4]
 80214fa:	f000 000f 	and.w	r0, r0, #15
 80214fe:	4303      	orrs	r3, r0
 8021500:	3902      	subs	r1, #2
 8021502:	f802 3b01 	strb.w	r3, [r2], #1
 8021506:	2900      	cmp	r1, #0
 8021508:	d08d      	beq.n	8021426 <GUI__CompactPixelIndices+0x1c>
 802150a:	4620      	mov	r0, r4
 802150c:	e7e9      	b.n	80214e2 <GUI__CompactPixelIndices+0xd8>
 802150e:	4604      	mov	r4, r0
 8021510:	6803      	ldr	r3, [r0, #0]
 8021512:	2901      	cmp	r1, #1
 8021514:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8021518:	b2db      	uxtb	r3, r3
 802151a:	d021      	beq.n	8021560 <GUI__CompactPixelIndices+0x156>
 802151c:	6842      	ldr	r2, [r0, #4]
 802151e:	2902      	cmp	r1, #2
 8021520:	f002 0203 	and.w	r2, r2, #3
 8021524:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8021528:	d102      	bne.n	8021530 <GUI__CompactPixelIndices+0x126>
 802152a:	f100 0208 	add.w	r2, r0, #8
 802152e:	e018      	b.n	8021562 <GUI__CompactPixelIndices+0x158>
 8021530:	6882      	ldr	r2, [r0, #8]
 8021532:	2903      	cmp	r1, #3
 8021534:	f002 0203 	and.w	r2, r2, #3
 8021538:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 802153c:	d102      	bne.n	8021544 <GUI__CompactPixelIndices+0x13a>
 802153e:	f100 020c 	add.w	r2, r0, #12
 8021542:	e00e      	b.n	8021562 <GUI__CompactPixelIndices+0x158>
 8021544:	f100 0210 	add.w	r2, r0, #16
 8021548:	68c0      	ldr	r0, [r0, #12]
 802154a:	f000 0003 	and.w	r0, r0, #3
 802154e:	4303      	orrs	r3, r0
 8021550:	3904      	subs	r1, #4
 8021552:	f804 3b01 	strb.w	r3, [r4], #1
 8021556:	2900      	cmp	r1, #0
 8021558:	f43f af65 	beq.w	8021426 <GUI__CompactPixelIndices+0x1c>
 802155c:	4610      	mov	r0, r2
 802155e:	e7d7      	b.n	8021510 <GUI__CompactPixelIndices+0x106>
 8021560:	1d02      	adds	r2, r0, #4
 8021562:	2100      	movs	r1, #0
 8021564:	e7f5      	b.n	8021552 <GUI__CompactPixelIndices+0x148>
 8021566:	2300      	movs	r3, #0
 8021568:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 802156c:	54c2      	strb	r2, [r0, r3]
 802156e:	3301      	adds	r3, #1
 8021570:	428b      	cmp	r3, r1
 8021572:	d1f9      	bne.n	8021568 <GUI__CompactPixelIndices+0x15e>
 8021574:	e757      	b.n	8021426 <GUI__CompactPixelIndices+0x1c>

08021576 <GUI__ConvertColor2Index>:
 8021576:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802157a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802157e:	681e      	ldr	r6, [r3, #0]
 8021580:	f1b8 0f00 	cmp.w	r8, #0
 8021584:	bf08      	it	eq
 8021586:	4680      	moveq	r8, r0
 8021588:	2a08      	cmp	r2, #8
 802158a:	4604      	mov	r4, r0
 802158c:	460d      	mov	r5, r1
 802158e:	dd05      	ble.n	802159c <GUI__ConvertColor2Index+0x26>
 8021590:	2a10      	cmp	r2, #16
 8021592:	f340 80b6 	ble.w	8021702 <GUI__ConvertColor2Index+0x18c>
 8021596:	2000      	movs	r0, #0
 8021598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802159c:	3a01      	subs	r2, #1
 802159e:	2a07      	cmp	r2, #7
 80215a0:	f200 80a4 	bhi.w	80216ec <GUI__ConvertColor2Index+0x176>
 80215a4:	e8df f002 	tbb	[pc, r2]
 80215a8:	87a26111 	.word	0x87a26111
 80215ac:	92a2a2a2 	.word	0x92a2a2a2
 80215b0:	69e0      	ldr	r0, [r4, #28]
 80215b2:	47b0      	blx	r6
 80215b4:	4338      	orrs	r0, r7
 80215b6:	f104 0920 	add.w	r9, r4, #32
 80215ba:	b2c7      	uxtb	r7, r0
 80215bc:	3d08      	subs	r5, #8
 80215be:	f808 7b01 	strb.w	r7, [r8], #1
 80215c2:	2d00      	cmp	r5, #0
 80215c4:	f000 8092 	beq.w	80216ec <GUI__ConvertColor2Index+0x176>
 80215c8:	464c      	mov	r4, r9
 80215ca:	6820      	ldr	r0, [r4, #0]
 80215cc:	47b0      	blx	r6
 80215ce:	2d01      	cmp	r5, #1
 80215d0:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 80215d4:	b2c7      	uxtb	r7, r0
 80215d6:	f000 808c 	beq.w	80216f2 <GUI__ConvertColor2Index+0x17c>
 80215da:	6860      	ldr	r0, [r4, #4]
 80215dc:	47b0      	blx	r6
 80215de:	2d02      	cmp	r5, #2
 80215e0:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 80215e4:	b2c7      	uxtb	r7, r0
 80215e6:	d102      	bne.n	80215ee <GUI__ConvertColor2Index+0x78>
 80215e8:	f104 0908 	add.w	r9, r4, #8
 80215ec:	e083      	b.n	80216f6 <GUI__ConvertColor2Index+0x180>
 80215ee:	68a0      	ldr	r0, [r4, #8]
 80215f0:	47b0      	blx	r6
 80215f2:	2d03      	cmp	r5, #3
 80215f4:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 80215f8:	b2c7      	uxtb	r7, r0
 80215fa:	d102      	bne.n	8021602 <GUI__ConvertColor2Index+0x8c>
 80215fc:	f104 090c 	add.w	r9, r4, #12
 8021600:	e079      	b.n	80216f6 <GUI__ConvertColor2Index+0x180>
 8021602:	68e0      	ldr	r0, [r4, #12]
 8021604:	47b0      	blx	r6
 8021606:	2d04      	cmp	r5, #4
 8021608:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 802160c:	b2c7      	uxtb	r7, r0
 802160e:	d102      	bne.n	8021616 <GUI__ConvertColor2Index+0xa0>
 8021610:	f104 0910 	add.w	r9, r4, #16
 8021614:	e06f      	b.n	80216f6 <GUI__ConvertColor2Index+0x180>
 8021616:	6920      	ldr	r0, [r4, #16]
 8021618:	47b0      	blx	r6
 802161a:	2d05      	cmp	r5, #5
 802161c:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 8021620:	b2c7      	uxtb	r7, r0
 8021622:	d102      	bne.n	802162a <GUI__ConvertColor2Index+0xb4>
 8021624:	f104 0914 	add.w	r9, r4, #20
 8021628:	e065      	b.n	80216f6 <GUI__ConvertColor2Index+0x180>
 802162a:	6960      	ldr	r0, [r4, #20]
 802162c:	47b0      	blx	r6
 802162e:	2d06      	cmp	r5, #6
 8021630:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8021634:	b2c7      	uxtb	r7, r0
 8021636:	d102      	bne.n	802163e <GUI__ConvertColor2Index+0xc8>
 8021638:	f104 0918 	add.w	r9, r4, #24
 802163c:	e05b      	b.n	80216f6 <GUI__ConvertColor2Index+0x180>
 802163e:	69a0      	ldr	r0, [r4, #24]
 8021640:	47b0      	blx	r6
 8021642:	2d07      	cmp	r5, #7
 8021644:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 8021648:	b2c7      	uxtb	r7, r0
 802164a:	d1b1      	bne.n	80215b0 <GUI__ConvertColor2Index+0x3a>
 802164c:	f104 091c 	add.w	r9, r4, #28
 8021650:	e051      	b.n	80216f6 <GUI__ConvertColor2Index+0x180>
 8021652:	68e0      	ldr	r0, [r4, #12]
 8021654:	47b0      	blx	r6
 8021656:	4338      	orrs	r0, r7
 8021658:	f104 0910 	add.w	r9, r4, #16
 802165c:	b2c7      	uxtb	r7, r0
 802165e:	3d04      	subs	r5, #4
 8021660:	f808 7b01 	strb.w	r7, [r8], #1
 8021664:	2d00      	cmp	r5, #0
 8021666:	d041      	beq.n	80216ec <GUI__ConvertColor2Index+0x176>
 8021668:	464c      	mov	r4, r9
 802166a:	6820      	ldr	r0, [r4, #0]
 802166c:	47b0      	blx	r6
 802166e:	2d01      	cmp	r5, #1
 8021670:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8021674:	b2c7      	uxtb	r7, r0
 8021676:	d040      	beq.n	80216fa <GUI__ConvertColor2Index+0x184>
 8021678:	6860      	ldr	r0, [r4, #4]
 802167a:	47b0      	blx	r6
 802167c:	2d02      	cmp	r5, #2
 802167e:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8021682:	b2c7      	uxtb	r7, r0
 8021684:	d102      	bne.n	802168c <GUI__ConvertColor2Index+0x116>
 8021686:	f104 0908 	add.w	r9, r4, #8
 802168a:	e038      	b.n	80216fe <GUI__ConvertColor2Index+0x188>
 802168c:	68a0      	ldr	r0, [r4, #8]
 802168e:	47b0      	blx	r6
 8021690:	2d03      	cmp	r5, #3
 8021692:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8021696:	b2c7      	uxtb	r7, r0
 8021698:	d1db      	bne.n	8021652 <GUI__ConvertColor2Index+0xdc>
 802169a:	f104 090c 	add.w	r9, r4, #12
 802169e:	e02e      	b.n	80216fe <GUI__ConvertColor2Index+0x188>
 80216a0:	6860      	ldr	r0, [r4, #4]
 80216a2:	47b0      	blx	r6
 80216a4:	4338      	orrs	r0, r7
 80216a6:	f104 0908 	add.w	r9, r4, #8
 80216aa:	b2c7      	uxtb	r7, r0
 80216ac:	3d02      	subs	r5, #2
 80216ae:	f808 7b01 	strb.w	r7, [r8], #1
 80216b2:	b1dd      	cbz	r5, 80216ec <GUI__ConvertColor2Index+0x176>
 80216b4:	464c      	mov	r4, r9
 80216b6:	6820      	ldr	r0, [r4, #0]
 80216b8:	47b0      	blx	r6
 80216ba:	2d01      	cmp	r5, #1
 80216bc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80216c0:	b2c7      	uxtb	r7, r0
 80216c2:	d1ed      	bne.n	80216a0 <GUI__ConvertColor2Index+0x12a>
 80216c4:	f104 0904 	add.w	r9, r4, #4
 80216c8:	2500      	movs	r5, #0
 80216ca:	e7f0      	b.n	80216ae <GUI__ConvertColor2Index+0x138>
 80216cc:	691f      	ldr	r7, [r3, #16]
 80216ce:	b12f      	cbz	r7, 80216dc <GUI__ConvertColor2Index+0x166>
 80216d0:	4620      	mov	r0, r4
 80216d2:	4641      	mov	r1, r8
 80216d4:	462a      	mov	r2, r5
 80216d6:	2301      	movs	r3, #1
 80216d8:	47b8      	blx	r7
 80216da:	e007      	b.n	80216ec <GUI__ConvertColor2Index+0x176>
 80216dc:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 80216e0:	47b0      	blx	r6
 80216e2:	f808 0007 	strb.w	r0, [r8, r7]
 80216e6:	3701      	adds	r7, #1
 80216e8:	42bd      	cmp	r5, r7
 80216ea:	d1f7      	bne.n	80216dc <GUI__ConvertColor2Index+0x166>
 80216ec:	2001      	movs	r0, #1
 80216ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80216f2:	f104 0904 	add.w	r9, r4, #4
 80216f6:	2500      	movs	r5, #0
 80216f8:	e761      	b.n	80215be <GUI__ConvertColor2Index+0x48>
 80216fa:	f104 0904 	add.w	r9, r4, #4
 80216fe:	2500      	movs	r5, #0
 8021700:	e7ae      	b.n	8021660 <GUI__ConvertColor2Index+0xea>
 8021702:	691f      	ldr	r7, [r3, #16]
 8021704:	b11f      	cbz	r7, 802170e <GUI__ConvertColor2Index+0x198>
 8021706:	4641      	mov	r1, r8
 8021708:	462a      	mov	r2, r5
 802170a:	2302      	movs	r3, #2
 802170c:	e7e4      	b.n	80216d8 <GUI__ConvertColor2Index+0x162>
 802170e:	f854 0b04 	ldr.w	r0, [r4], #4
 8021712:	47b0      	blx	r6
 8021714:	3d01      	subs	r5, #1
 8021716:	f828 0b02 	strh.w	r0, [r8], #2
 802171a:	d1f8      	bne.n	802170e <GUI__ConvertColor2Index+0x198>
 802171c:	e7e6      	b.n	80216ec <GUI__ConvertColor2Index+0x176>

0802171e <GUI__CompactPixelIndicesEx>:
 802171e:	b513      	push	{r0, r1, r4, lr}
 8021720:	2400      	movs	r4, #0
 8021722:	9400      	str	r4, [sp, #0]
 8021724:	f7ff ff27 	bl	8021576 <GUI__ConvertColor2Index>
 8021728:	b002      	add	sp, #8
 802172a:	bd10      	pop	{r4, pc}

0802172c <_GetCharCode>:
 802172c:	7800      	ldrb	r0, [r0, #0]
 802172e:	4770      	bx	lr

08021730 <_GetCharSize>:
 8021730:	2001      	movs	r0, #1
 8021732:	4770      	bx	lr

08021734 <_CalcSizeOfChar>:
 8021734:	2001      	movs	r0, #1
 8021736:	4770      	bx	lr

08021738 <_Encode>:
 8021738:	7001      	strb	r1, [r0, #0]
 802173a:	2001      	movs	r0, #1
 802173c:	4770      	bx	lr
	...

08021740 <GUI_UC__GetCharCodeInc>:
 8021740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021742:	4e08      	ldr	r6, [pc, #32]	; (8021764 <GUI_UC__GetCharCodeInc+0x24>)
 8021744:	6804      	ldr	r4, [r0, #0]
 8021746:	6833      	ldr	r3, [r6, #0]
 8021748:	4605      	mov	r5, r0
 802174a:	681b      	ldr	r3, [r3, #0]
 802174c:	4620      	mov	r0, r4
 802174e:	4798      	blx	r3
 8021750:	6833      	ldr	r3, [r6, #0]
 8021752:	4607      	mov	r7, r0
 8021754:	685b      	ldr	r3, [r3, #4]
 8021756:	4620      	mov	r0, r4
 8021758:	4798      	blx	r3
 802175a:	4420      	add	r0, r4
 802175c:	6028      	str	r0, [r5, #0]
 802175e:	4638      	mov	r0, r7
 8021760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021762:	bf00      	nop
 8021764:	2002c5c4 	.word	0x2002c5c4

08021768 <GUI_UC__NumChars2NumBytes>:
 8021768:	b570      	push	{r4, r5, r6, lr}
 802176a:	4604      	mov	r4, r0
 802176c:	460e      	mov	r6, r1
 802176e:	2500      	movs	r5, #0
 8021770:	b146      	cbz	r6, 8021784 <GUI_UC__NumChars2NumBytes+0x1c>
 8021772:	4b05      	ldr	r3, [pc, #20]	; (8021788 <GUI_UC__NumChars2NumBytes+0x20>)
 8021774:	681b      	ldr	r3, [r3, #0]
 8021776:	4620      	mov	r0, r4
 8021778:	685b      	ldr	r3, [r3, #4]
 802177a:	4798      	blx	r3
 802177c:	3e01      	subs	r6, #1
 802177e:	4404      	add	r4, r0
 8021780:	4405      	add	r5, r0
 8021782:	e7f5      	b.n	8021770 <GUI_UC__NumChars2NumBytes+0x8>
 8021784:	4628      	mov	r0, r5
 8021786:	bd70      	pop	{r4, r5, r6, pc}
 8021788:	2002c5c4 	.word	0x2002c5c4

0802178c <GUI_SetTextMode>:
 802178c:	4b03      	ldr	r3, [pc, #12]	; (802179c <GUI_SetTextMode+0x10>)
 802178e:	681b      	ldr	r3, [r3, #0]
 8021790:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 8021794:	8558      	strh	r0, [r3, #42]	; 0x2a
 8021796:	4610      	mov	r0, r2
 8021798:	4770      	bx	lr
 802179a:	bf00      	nop
 802179c:	20000114 	.word	0x20000114

080217a0 <GUI_SetOrg>:
 80217a0:	460a      	mov	r2, r1
 80217a2:	4908      	ldr	r1, [pc, #32]	; (80217c4 <GUI_SetOrg+0x24>)
 80217a4:	b510      	push	{r4, lr}
 80217a6:	8008      	strh	r0, [r1, #0]
 80217a8:	4907      	ldr	r1, [pc, #28]	; (80217c8 <GUI_SetOrg+0x28>)
 80217aa:	800a      	strh	r2, [r1, #0]
 80217ac:	4907      	ldr	r1, [pc, #28]	; (80217cc <GUI_SetOrg+0x2c>)
 80217ae:	6809      	ldr	r1, [r1, #0]
 80217b0:	4603      	mov	r3, r0
 80217b2:	7c48      	ldrb	r0, [r1, #17]
 80217b4:	4906      	ldr	r1, [pc, #24]	; (80217d0 <GUI_SetOrg+0x30>)
 80217b6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80217ba:	68c1      	ldr	r1, [r0, #12]
 80217bc:	6a0c      	ldr	r4, [r1, #32]
 80217be:	4619      	mov	r1, r3
 80217c0:	47a0      	blx	r4
 80217c2:	bd10      	pop	{r4, pc}
 80217c4:	2002c5b4 	.word	0x2002c5b4
 80217c8:	2002c5a8 	.word	0x2002c5a8
 80217cc:	20000114 	.word	0x20000114
 80217d0:	2002c5cc 	.word	0x2002c5cc

080217d4 <GUI_SetLineStyle>:
 80217d4:	4b02      	ldr	r3, [pc, #8]	; (80217e0 <GUI_SetLineStyle+0xc>)
 80217d6:	681b      	ldr	r3, [r3, #0]
 80217d8:	7e9a      	ldrb	r2, [r3, #26]
 80217da:	7698      	strb	r0, [r3, #26]
 80217dc:	4610      	mov	r0, r2
 80217de:	4770      	bx	lr
 80217e0:	20000114 	.word	0x20000114

080217e4 <GUI_SetColorIndex>:
 80217e4:	4b03      	ldr	r3, [pc, #12]	; (80217f4 <GUI_SetColorIndex+0x10>)
 80217e6:	681b      	ldr	r3, [r3, #0]
 80217e8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80217ec:	631a      	str	r2, [r3, #48]	; 0x30
 80217ee:	f7fa bebf 	b.w	801c570 <LCD_SetColorIndex>
 80217f2:	bf00      	nop
 80217f4:	20000114 	.word	0x20000114

080217f8 <GUI_GetBkColor>:
 80217f8:	b508      	push	{r3, lr}
 80217fa:	f7ff fc1f 	bl	802103c <LCD_GetBkColorIndex>
 80217fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8021802:	f7fa bea5 	b.w	801c550 <LCD_Index2Color>

08021806 <GUI_GetColor>:
 8021806:	b508      	push	{r3, lr}
 8021808:	f7ff fc20 	bl	802104c <LCD_GetColorIndex>
 802180c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8021810:	f7fa be9e 	b.w	801c550 <LCD_Index2Color>

08021814 <_Add>:
 8021814:	4a0d      	ldr	r2, [pc, #52]	; (802184c <_Add+0x38>)
 8021816:	6813      	ldr	r3, [r2, #0]
 8021818:	2b0b      	cmp	r3, #11
 802181a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802181c:	4615      	mov	r5, r2
 802181e:	dc14      	bgt.n	802184a <_Add+0x36>
 8021820:	4c0b      	ldr	r4, [pc, #44]	; (8021850 <_Add+0x3c>)
 8021822:	461a      	mov	r2, r3
 8021824:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8021828:	4626      	mov	r6, r4
 802182a:	b152      	cbz	r2, 8021842 <_Add+0x2e>
 802182c:	f831 4d02 	ldrh.w	r4, [r1, #-2]!
 8021830:	fa0f fc84 	sxth.w	ip, r4
 8021834:	4584      	cmp	ip, r0
 8021836:	f102 37ff 	add.w	r7, r2, #4294967295
 802183a:	db02      	blt.n	8021842 <_Add+0x2e>
 802183c:	804c      	strh	r4, [r1, #2]
 802183e:	463a      	mov	r2, r7
 8021840:	e7f3      	b.n	802182a <_Add+0x16>
 8021842:	3301      	adds	r3, #1
 8021844:	f826 0012 	strh.w	r0, [r6, r2, lsl #1]
 8021848:	602b      	str	r3, [r5, #0]
 802184a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802184c:	2002c52c 	.word	0x2002c52c
 8021850:	2002c530 	.word	0x2002c530

08021854 <GL_FillPolygon>:
 8021854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021858:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8021a14 <GL_FillPolygon+0x1c0>
 802185c:	9101      	str	r1, [sp, #4]
 802185e:	4692      	mov	sl, r2
 8021860:	4606      	mov	r6, r0
 8021862:	f643 74ff 	movw	r4, #16383	; 0x3fff
 8021866:	2200      	movs	r2, #0
 8021868:	9901      	ldr	r1, [sp, #4]
 802186a:	428a      	cmp	r2, r1
 802186c:	da0b      	bge.n	8021886 <GL_FillPolygon+0x32>
 802186e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8021872:	3201      	adds	r2, #1
 8021874:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8021878:	428c      	cmp	r4, r1
 802187a:	bfa8      	it	ge
 802187c:	460c      	movge	r4, r1
 802187e:	4589      	cmp	r9, r1
 8021880:	bfb8      	it	lt
 8021882:	4689      	movlt	r9, r1
 8021884:	e7f0      	b.n	8021868 <GL_FillPolygon+0x14>
 8021886:	4960      	ldr	r1, [pc, #384]	; (8021a08 <GL_FillPolygon+0x1b4>)
 8021888:	680a      	ldr	r2, [r1, #0]
 802188a:	6952      	ldr	r2, [r2, #20]
 802188c:	468b      	mov	fp, r1
 802188e:	b15a      	cbz	r2, 80218a8 <GL_FillPolygon+0x54>
 8021890:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8021894:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8021898:	1ac9      	subs	r1, r1, r3
 802189a:	1ad2      	subs	r2, r2, r3
 802189c:	4589      	cmp	r9, r1
 802189e:	bfa8      	it	ge
 80218a0:	4689      	movge	r9, r1
 80218a2:	4294      	cmp	r4, r2
 80218a4:	bfb8      	it	lt
 80218a6:	4614      	movlt	r4, r2
 80218a8:	eb04 0803 	add.w	r8, r4, r3
 80218ac:	454c      	cmp	r4, r9
 80218ae:	f300 80a7 	bgt.w	8021a00 <GL_FillPolygon+0x1ac>
 80218b2:	4b56      	ldr	r3, [pc, #344]	; (8021a0c <GL_FillPolygon+0x1b8>)
 80218b4:	2700      	movs	r7, #0
 80218b6:	601f      	str	r7, [r3, #0]
 80218b8:	4635      	mov	r5, r6
 80218ba:	9901      	ldr	r1, [sp, #4]
 80218bc:	428f      	cmp	r7, r1
 80218be:	da55      	bge.n	802196c <GL_FillPolygon+0x118>
 80218c0:	9b01      	ldr	r3, [sp, #4]
 80218c2:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80218c6:	1e59      	subs	r1, r3, #1
 80218c8:	428f      	cmp	r7, r1
 80218ca:	bfb4      	ite	lt
 80218cc:	f107 0c01 	addlt.w	ip, r7, #1
 80218d0:	f04f 0c00 	movge.w	ip, #0
 80218d4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80218d8:	eb06 030c 	add.w	r3, r6, ip
 80218dc:	42a2      	cmp	r2, r4
 80218de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80218e2:	d136      	bne.n	8021952 <GL_FillPolygon+0xfe>
 80218e4:	42a3      	cmp	r3, r4
 80218e6:	d002      	beq.n	80218ee <GL_FillPolygon+0x9a>
 80218e8:	463a      	mov	r2, r7
 80218ea:	2000      	movs	r0, #0
 80218ec:	e01b      	b.n	8021926 <GL_FillPolygon+0xd2>
 80218ee:	f9b5 e000 	ldrsh.w	lr, [r5]
 80218f2:	f936 200c 	ldrsh.w	r2, [r6, ip]
 80218f6:	f8db 3000 	ldr.w	r3, [fp]
 80218fa:	44d6      	add	lr, sl
 80218fc:	4452      	add	r2, sl
 80218fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021900:	4596      	cmp	lr, r2
 8021902:	681b      	ldr	r3, [r3, #0]
 8021904:	da02      	bge.n	802190c <GL_FillPolygon+0xb8>
 8021906:	4670      	mov	r0, lr
 8021908:	4641      	mov	r1, r8
 802190a:	e020      	b.n	802194e <GL_FillPolygon+0xfa>
 802190c:	4610      	mov	r0, r2
 802190e:	4641      	mov	r1, r8
 8021910:	4672      	mov	r2, lr
 8021912:	e01c      	b.n	802194e <GL_FillPolygon+0xfa>
 8021914:	b152      	cbz	r2, 802192c <GL_FillPolygon+0xd8>
 8021916:	3a01      	subs	r2, #1
 8021918:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
 802191c:	f9bc c002 	ldrsh.w	ip, [ip, #2]
 8021920:	45a4      	cmp	ip, r4
 8021922:	d105      	bne.n	8021930 <GL_FillPolygon+0xdc>
 8021924:	3001      	adds	r0, #1
 8021926:	4288      	cmp	r0, r1
 8021928:	dbf4      	blt.n	8021914 <GL_FillPolygon+0xc0>
 802192a:	e01c      	b.n	8021966 <GL_FillPolygon+0x112>
 802192c:	460a      	mov	r2, r1
 802192e:	e7f3      	b.n	8021918 <GL_FillPolygon+0xc4>
 8021930:	ebc4 0c0c 	rsb	ip, r4, ip
 8021934:	1b1b      	subs	r3, r3, r4
 8021936:	ea9c 0f03 	teq	ip, r3
 802193a:	f9b5 0000 	ldrsh.w	r0, [r5]
 802193e:	d44d      	bmi.n	80219dc <GL_FillPolygon+0x188>
 8021940:	f8db 3000 	ldr.w	r3, [fp]
 8021944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021946:	4450      	add	r0, sl
 8021948:	681b      	ldr	r3, [r3, #0]
 802194a:	4641      	mov	r1, r8
 802194c:	4602      	mov	r2, r0
 802194e:	4798      	blx	r3
 8021950:	e009      	b.n	8021966 <GL_FillPolygon+0x112>
 8021952:	42a3      	cmp	r3, r4
 8021954:	d007      	beq.n	8021966 <GL_FillPolygon+0x112>
 8021956:	db44      	blt.n	80219e2 <GL_FillPolygon+0x18e>
 8021958:	42a2      	cmp	r2, r4
 802195a:	dd27      	ble.n	80219ac <GL_FillPolygon+0x158>
 802195c:	42a3      	cmp	r3, r4
 802195e:	dd42      	ble.n	80219e6 <GL_FillPolygon+0x192>
 8021960:	e001      	b.n	8021966 <GL_FillPolygon+0x112>
 8021962:	42a3      	cmp	r3, r4
 8021964:	dd49      	ble.n	80219fa <GL_FillPolygon+0x1a6>
 8021966:	3701      	adds	r7, #1
 8021968:	3504      	adds	r5, #4
 802196a:	e7a6      	b.n	80218ba <GL_FillPolygon+0x66>
 802196c:	2500      	movs	r5, #0
 802196e:	4628      	mov	r0, r5
 8021970:	462f      	mov	r7, r5
 8021972:	4b26      	ldr	r3, [pc, #152]	; (8021a0c <GL_FillPolygon+0x1b8>)
 8021974:	681b      	ldr	r3, [r3, #0]
 8021976:	429f      	cmp	r7, r3
 8021978:	da14      	bge.n	80219a4 <GL_FillPolygon+0x150>
 802197a:	4b25      	ldr	r3, [pc, #148]	; (8021a10 <GL_FillPolygon+0x1bc>)
 802197c:	f933 3017 	ldrsh.w	r3, [r3, r7, lsl #1]
 8021980:	b15d      	cbz	r5, 802199a <GL_FillPolygon+0x146>
 8021982:	f8db 2000 	ldr.w	r2, [fp]
 8021986:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8021988:	4450      	add	r0, sl
 802198a:	f8d2 c000 	ldr.w	ip, [r2]
 802198e:	9300      	str	r3, [sp, #0]
 8021990:	eb0a 0203 	add.w	r2, sl, r3
 8021994:	4641      	mov	r1, r8
 8021996:	47e0      	blx	ip
 8021998:	9b00      	ldr	r3, [sp, #0]
 802199a:	f085 0501 	eor.w	r5, r5, #1
 802199e:	3701      	adds	r7, #1
 80219a0:	4618      	mov	r0, r3
 80219a2:	e7e6      	b.n	8021972 <GL_FillPolygon+0x11e>
 80219a4:	3401      	adds	r4, #1
 80219a6:	f108 0801 	add.w	r8, r8, #1
 80219aa:	e77f      	b.n	80218ac <GL_FillPolygon+0x58>
 80219ac:	429a      	cmp	r2, r3
 80219ae:	dcd8      	bgt.n	8021962 <GL_FillPolygon+0x10e>
 80219b0:	f9b5 1000 	ldrsh.w	r1, [r5]
 80219b4:	f936 000c 	ldrsh.w	r0, [r6, ip]
 80219b8:	ebc2 0e04 	rsb	lr, r2, r4
 80219bc:	1a40      	subs	r0, r0, r1
 80219be:	fb0e f000 	mul.w	r0, lr, r0
 80219c2:	2800      	cmp	r0, #0
 80219c4:	ebc2 0303 	rsb	r3, r2, r3
 80219c8:	bfdb      	ittet	le
 80219ca:	105a      	asrle	r2, r3, #1
 80219cc:	f1c2 0201 	rsble	r2, r2, #1
 80219d0:	eb00 0063 	addgt.w	r0, r0, r3, asr #1
 80219d4:	1880      	addle	r0, r0, r2
 80219d6:	fb90 f0f3 	sdiv	r0, r0, r3
 80219da:	4408      	add	r0, r1
 80219dc:	f7ff ff1a 	bl	8021814 <_Add>
 80219e0:	e7c1      	b.n	8021966 <GL_FillPolygon+0x112>
 80219e2:	42a2      	cmp	r2, r4
 80219e4:	dbbf      	blt.n	8021966 <GL_FillPolygon+0x112>
 80219e6:	429a      	cmp	r2, r3
 80219e8:	ddbd      	ble.n	8021966 <GL_FillPolygon+0x112>
 80219ea:	4696      	mov	lr, r2
 80219ec:	f936 100c 	ldrsh.w	r1, [r6, ip]
 80219f0:	f9b5 0000 	ldrsh.w	r0, [r5]
 80219f4:	461a      	mov	r2, r3
 80219f6:	4673      	mov	r3, lr
 80219f8:	e7de      	b.n	80219b8 <GL_FillPolygon+0x164>
 80219fa:	42a2      	cmp	r2, r4
 80219fc:	daf5      	bge.n	80219ea <GL_FillPolygon+0x196>
 80219fe:	e7b2      	b.n	8021966 <GL_FillPolygon+0x112>
 8021a00:	b003      	add	sp, #12
 8021a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a06:	bf00      	nop
 8021a08:	20000114 	.word	0x20000114
 8021a0c:	2002c52c 	.word	0x2002c52c
 8021a10:	2002c530 	.word	0x2002c530
 8021a14:	ffffc001 	.word	0xffffc001

08021a18 <GL_DrawPoint>:
 8021a18:	b508      	push	{r3, lr}
 8021a1a:	4b08      	ldr	r3, [pc, #32]	; (8021a3c <GL_DrawPoint+0x24>)
 8021a1c:	681b      	ldr	r3, [r3, #0]
 8021a1e:	7e1a      	ldrb	r2, [r3, #24]
 8021a20:	2a01      	cmp	r2, #1
 8021a22:	d103      	bne.n	8021a2c <GL_DrawPoint+0x14>
 8021a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021a26:	685b      	ldr	r3, [r3, #4]
 8021a28:	4798      	blx	r3
 8021a2a:	bd08      	pop	{r3, pc}
 8021a2c:	2302      	movs	r3, #2
 8021a2e:	3a01      	subs	r2, #1
 8021a30:	fb92 f2f3 	sdiv	r2, r2, r3
 8021a34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8021a38:	f7fc bb58 	b.w	801e0ec <GL_FillCircle>
 8021a3c:	20000114 	.word	0x20000114

08021a40 <_GetIndexMask_0>:
 8021a40:	b508      	push	{r3, lr}
 8021a42:	f7fa f9c5 	bl	801bdd0 <LCD_GetNumColors>
 8021a46:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8021a4a:	d010      	beq.n	8021a6e <_GetIndexMask_0+0x2e>
 8021a4c:	287f      	cmp	r0, #127	; 0x7f
 8021a4e:	d810      	bhi.n	8021a72 <_GetIndexMask_0+0x32>
 8021a50:	283f      	cmp	r0, #63	; 0x3f
 8021a52:	d810      	bhi.n	8021a76 <_GetIndexMask_0+0x36>
 8021a54:	281f      	cmp	r0, #31
 8021a56:	d810      	bhi.n	8021a7a <_GetIndexMask_0+0x3a>
 8021a58:	280f      	cmp	r0, #15
 8021a5a:	d810      	bhi.n	8021a7e <_GetIndexMask_0+0x3e>
 8021a5c:	2807      	cmp	r0, #7
 8021a5e:	d810      	bhi.n	8021a82 <_GetIndexMask_0+0x42>
 8021a60:	2803      	cmp	r0, #3
 8021a62:	d810      	bhi.n	8021a86 <_GetIndexMask_0+0x46>
 8021a64:	2801      	cmp	r0, #1
 8021a66:	bf94      	ite	ls
 8021a68:	2000      	movls	r0, #0
 8021a6a:	2001      	movhi	r0, #1
 8021a6c:	e00c      	b.n	8021a88 <_GetIndexMask_0+0x48>
 8021a6e:	2008      	movs	r0, #8
 8021a70:	e00a      	b.n	8021a88 <_GetIndexMask_0+0x48>
 8021a72:	2007      	movs	r0, #7
 8021a74:	e008      	b.n	8021a88 <_GetIndexMask_0+0x48>
 8021a76:	2006      	movs	r0, #6
 8021a78:	e006      	b.n	8021a88 <_GetIndexMask_0+0x48>
 8021a7a:	2005      	movs	r0, #5
 8021a7c:	e004      	b.n	8021a88 <_GetIndexMask_0+0x48>
 8021a7e:	2004      	movs	r0, #4
 8021a80:	e002      	b.n	8021a88 <_GetIndexMask_0+0x48>
 8021a82:	2003      	movs	r0, #3
 8021a84:	e000      	b.n	8021a88 <_GetIndexMask_0+0x48>
 8021a86:	2002      	movs	r0, #2
 8021a88:	2301      	movs	r3, #1
 8021a8a:	fa03 f000 	lsl.w	r0, r3, r0
 8021a8e:	3801      	subs	r0, #1
 8021a90:	bd08      	pop	{r3, pc}

08021a92 <_Index2Color_0>:
 8021a92:	b538      	push	{r3, r4, r5, lr}
 8021a94:	4604      	mov	r4, r0
 8021a96:	f7fa f99b 	bl	801bdd0 <LCD_GetNumColors>
 8021a9a:	4605      	mov	r5, r0
 8021a9c:	f7fa f9b6 	bl	801be0c <LCD_GetPalette>
 8021aa0:	42ac      	cmp	r4, r5
 8021aa2:	d203      	bcs.n	8021aac <_Index2Color_0+0x1a>
 8021aa4:	b118      	cbz	r0, 8021aae <_Index2Color_0+0x1c>
 8021aa6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8021aaa:	bd38      	pop	{r3, r4, r5, pc}
 8021aac:	2000      	movs	r0, #0
 8021aae:	bd38      	pop	{r3, r4, r5, pc}

08021ab0 <_Color2Index_0>:
 8021ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021ab4:	4681      	mov	r9, r0
 8021ab6:	f7fa f98b 	bl	801bdd0 <LCD_GetNumColors>
 8021aba:	4680      	mov	r8, r0
 8021abc:	f7fa f9a6 	bl	801be0c <LCD_GetPalette>
 8021ac0:	4606      	mov	r6, r0
 8021ac2:	b1d8      	cbz	r0, 8021afc <_Color2Index_0+0x4c>
 8021ac4:	2300      	movs	r3, #0
 8021ac6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8021aca:	4591      	cmp	r9, r2
 8021acc:	d01a      	beq.n	8021b04 <_Color2Index_0+0x54>
 8021ace:	3301      	adds	r3, #1
 8021ad0:	4543      	cmp	r3, r8
 8021ad2:	dbf8      	blt.n	8021ac6 <_Color2Index_0+0x16>
 8021ad4:	2500      	movs	r5, #0
 8021ad6:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 8021ada:	462c      	mov	r4, r5
 8021adc:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8021ae0:	4648      	mov	r0, r9
 8021ae2:	f000 f83d 	bl	8021b60 <GUI_CalcColorDist>
 8021ae6:	42b8      	cmp	r0, r7
 8021ae8:	bf38      	it	cc
 8021aea:	4625      	movcc	r5, r4
 8021aec:	f104 0401 	add.w	r4, r4, #1
 8021af0:	bf28      	it	cs
 8021af2:	4638      	movcs	r0, r7
 8021af4:	4544      	cmp	r4, r8
 8021af6:	da02      	bge.n	8021afe <_Color2Index_0+0x4e>
 8021af8:	4607      	mov	r7, r0
 8021afa:	e7ef      	b.n	8021adc <_Color2Index_0+0x2c>
 8021afc:	4605      	mov	r5, r0
 8021afe:	4628      	mov	r0, r5
 8021b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021b04:	4618      	mov	r0, r3
 8021b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08021b0a <WM__GetPrevSibling>:
 8021b0a:	b538      	push	{r3, r4, r5, lr}
 8021b0c:	4605      	mov	r5, r0
 8021b0e:	f000 f80f 	bl	8021b30 <WM__GetFirstSibling>
 8021b12:	4604      	mov	r4, r0
 8021b14:	b154      	cbz	r4, 8021b2c <WM__GetPrevSibling+0x22>
 8021b16:	42ac      	cmp	r4, r5
 8021b18:	d007      	beq.n	8021b2a <WM__GetPrevSibling+0x20>
 8021b1a:	4620      	mov	r0, r4
 8021b1c:	f7fc fee0 	bl	801e8e0 <GUI_ALLOC_h2p>
 8021b20:	6a03      	ldr	r3, [r0, #32]
 8021b22:	42ab      	cmp	r3, r5
 8021b24:	d002      	beq.n	8021b2c <WM__GetPrevSibling+0x22>
 8021b26:	461c      	mov	r4, r3
 8021b28:	e7f4      	b.n	8021b14 <WM__GetPrevSibling+0xa>
 8021b2a:	2400      	movs	r4, #0
 8021b2c:	4620      	mov	r0, r4
 8021b2e:	bd38      	pop	{r3, r4, r5, pc}

08021b30 <WM__GetFirstSibling>:
 8021b30:	b508      	push	{r3, lr}
 8021b32:	f7fe fa87 	bl	8020044 <WM_GetParent>
 8021b36:	b118      	cbz	r0, 8021b40 <WM__GetFirstSibling+0x10>
 8021b38:	f7fc fed2 	bl	801e8e0 <GUI_ALLOC_h2p>
 8021b3c:	69c0      	ldr	r0, [r0, #28]
 8021b3e:	bd08      	pop	{r3, pc}
 8021b40:	bd08      	pop	{r3, pc}

08021b42 <LCD_GetNumLayers>:
 8021b42:	b510      	push	{r4, lr}
 8021b44:	2000      	movs	r0, #0
 8021b46:	f7fc f873 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 8021b4a:	1c04      	adds	r4, r0, #0
 8021b4c:	f04f 0001 	mov.w	r0, #1
 8021b50:	bf18      	it	ne
 8021b52:	2401      	movne	r4, #1
 8021b54:	f7fc f86c 	bl	801dc30 <GUI_DEVICE__GetpDriver>
 8021b58:	b100      	cbz	r0, 8021b5c <LCD_GetNumLayers+0x1a>
 8021b5a:	3401      	adds	r4, #1
 8021b5c:	4620      	mov	r0, r4
 8021b5e:	bd10      	pop	{r4, pc}

08021b60 <GUI_CalcColorDist>:
 8021b60:	b2cb      	uxtb	r3, r1
 8021b62:	b2c2      	uxtb	r2, r0
 8021b64:	1ad2      	subs	r2, r2, r3
 8021b66:	b292      	uxth	r2, r2
 8021b68:	b293      	uxth	r3, r2
 8021b6a:	b530      	push	{r4, r5, lr}
 8021b6c:	041c      	lsls	r4, r3, #16
 8021b6e:	bf48      	it	mi
 8021b70:	4253      	negmi	r3, r2
 8021b72:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8021b76:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8021b7a:	ebc5 0202 	rsb	r2, r5, r2
 8021b7e:	bf48      	it	mi
 8021b80:	b29b      	uxthmi	r3, r3
 8021b82:	b292      	uxth	r2, r2
 8021b84:	0c09      	lsrs	r1, r1, #16
 8021b86:	fb13 f403 	smulbb	r4, r3, r3
 8021b8a:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 8021b8e:	b293      	uxth	r3, r2
 8021b90:	041d      	lsls	r5, r3, #16
 8021b92:	b289      	uxth	r1, r1
 8021b94:	b288      	uxth	r0, r1
 8021b96:	bf44      	itt	mi
 8021b98:	4253      	negmi	r3, r2
 8021b9a:	b29b      	uxthmi	r3, r3
 8021b9c:	0402      	lsls	r2, r0, #16
 8021b9e:	bf48      	it	mi
 8021ba0:	4248      	negmi	r0, r1
 8021ba2:	fb13 4303 	smlabb	r3, r3, r3, r4
 8021ba6:	bf48      	it	mi
 8021ba8:	b280      	uxthmi	r0, r0
 8021baa:	fb00 3000 	mla	r0, r0, r0, r3
 8021bae:	bd30      	pop	{r4, r5, pc}

08021bb0 <__errno>:
 8021bb0:	4b01      	ldr	r3, [pc, #4]	; (8021bb8 <__errno+0x8>)
 8021bb2:	6818      	ldr	r0, [r3, #0]
 8021bb4:	4770      	bx	lr
 8021bb6:	bf00      	nop
 8021bb8:	20000170 	.word	0x20000170

08021bbc <__libc_init_array>:
 8021bbc:	b570      	push	{r4, r5, r6, lr}
 8021bbe:	4d0d      	ldr	r5, [pc, #52]	; (8021bf4 <__libc_init_array+0x38>)
 8021bc0:	4c0d      	ldr	r4, [pc, #52]	; (8021bf8 <__libc_init_array+0x3c>)
 8021bc2:	1b64      	subs	r4, r4, r5
 8021bc4:	10a4      	asrs	r4, r4, #2
 8021bc6:	2600      	movs	r6, #0
 8021bc8:	42a6      	cmp	r6, r4
 8021bca:	d109      	bne.n	8021be0 <__libc_init_array+0x24>
 8021bcc:	4d0b      	ldr	r5, [pc, #44]	; (8021bfc <__libc_init_array+0x40>)
 8021bce:	4c0c      	ldr	r4, [pc, #48]	; (8021c00 <__libc_init_array+0x44>)
 8021bd0:	f000 fb4a 	bl	8022268 <_init>
 8021bd4:	1b64      	subs	r4, r4, r5
 8021bd6:	10a4      	asrs	r4, r4, #2
 8021bd8:	2600      	movs	r6, #0
 8021bda:	42a6      	cmp	r6, r4
 8021bdc:	d105      	bne.n	8021bea <__libc_init_array+0x2e>
 8021bde:	bd70      	pop	{r4, r5, r6, pc}
 8021be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8021be4:	4798      	blx	r3
 8021be6:	3601      	adds	r6, #1
 8021be8:	e7ee      	b.n	8021bc8 <__libc_init_array+0xc>
 8021bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8021bee:	4798      	blx	r3
 8021bf0:	3601      	adds	r6, #1
 8021bf2:	e7f2      	b.n	8021bda <__libc_init_array+0x1e>
 8021bf4:	081326c8 	.word	0x081326c8
 8021bf8:	081326c8 	.word	0x081326c8
 8021bfc:	081326c8 	.word	0x081326c8
 8021c00:	081326cc 	.word	0x081326cc

08021c04 <memcpy>:
 8021c04:	440a      	add	r2, r1
 8021c06:	4291      	cmp	r1, r2
 8021c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8021c0c:	d100      	bne.n	8021c10 <memcpy+0xc>
 8021c0e:	4770      	bx	lr
 8021c10:	b510      	push	{r4, lr}
 8021c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021c1a:	4291      	cmp	r1, r2
 8021c1c:	d1f9      	bne.n	8021c12 <memcpy+0xe>
 8021c1e:	bd10      	pop	{r4, pc}

08021c20 <memmove>:
 8021c20:	4288      	cmp	r0, r1
 8021c22:	b510      	push	{r4, lr}
 8021c24:	eb01 0402 	add.w	r4, r1, r2
 8021c28:	d902      	bls.n	8021c30 <memmove+0x10>
 8021c2a:	4284      	cmp	r4, r0
 8021c2c:	4623      	mov	r3, r4
 8021c2e:	d807      	bhi.n	8021c40 <memmove+0x20>
 8021c30:	1e43      	subs	r3, r0, #1
 8021c32:	42a1      	cmp	r1, r4
 8021c34:	d008      	beq.n	8021c48 <memmove+0x28>
 8021c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021c3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021c3e:	e7f8      	b.n	8021c32 <memmove+0x12>
 8021c40:	4402      	add	r2, r0
 8021c42:	4601      	mov	r1, r0
 8021c44:	428a      	cmp	r2, r1
 8021c46:	d100      	bne.n	8021c4a <memmove+0x2a>
 8021c48:	bd10      	pop	{r4, pc}
 8021c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021c4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021c52:	e7f7      	b.n	8021c44 <memmove+0x24>

08021c54 <memset>:
 8021c54:	4402      	add	r2, r0
 8021c56:	4603      	mov	r3, r0
 8021c58:	4293      	cmp	r3, r2
 8021c5a:	d100      	bne.n	8021c5e <memset+0xa>
 8021c5c:	4770      	bx	lr
 8021c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8021c62:	e7f9      	b.n	8021c58 <memset+0x4>

08021c64 <strcpy>:
 8021c64:	4603      	mov	r3, r0
 8021c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021c6a:	f803 2b01 	strb.w	r2, [r3], #1
 8021c6e:	2a00      	cmp	r2, #0
 8021c70:	d1f9      	bne.n	8021c66 <strcpy+0x2>
 8021c72:	4770      	bx	lr

08021c74 <checkint>:
 8021c74:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8021c78:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8021c7c:	429a      	cmp	r2, r3
 8021c7e:	b570      	push	{r4, r5, r6, lr}
 8021c80:	dd2a      	ble.n	8021cd8 <checkint+0x64>
 8021c82:	f240 4333 	movw	r3, #1075	; 0x433
 8021c86:	429a      	cmp	r2, r3
 8021c88:	dc24      	bgt.n	8021cd4 <checkint+0x60>
 8021c8a:	1a9b      	subs	r3, r3, r2
 8021c8c:	f1a3 0620 	sub.w	r6, r3, #32
 8021c90:	f04f 32ff 	mov.w	r2, #4294967295
 8021c94:	fa02 f403 	lsl.w	r4, r2, r3
 8021c98:	fa02 f606 	lsl.w	r6, r2, r6
 8021c9c:	f1c3 0520 	rsb	r5, r3, #32
 8021ca0:	fa22 f505 	lsr.w	r5, r2, r5
 8021ca4:	4334      	orrs	r4, r6
 8021ca6:	432c      	orrs	r4, r5
 8021ca8:	409a      	lsls	r2, r3
 8021caa:	ea20 0202 	bic.w	r2, r0, r2
 8021cae:	ea21 0404 	bic.w	r4, r1, r4
 8021cb2:	4322      	orrs	r2, r4
 8021cb4:	f1a3 0420 	sub.w	r4, r3, #32
 8021cb8:	f1c3 0220 	rsb	r2, r3, #32
 8021cbc:	d10c      	bne.n	8021cd8 <checkint+0x64>
 8021cbe:	40d8      	lsrs	r0, r3
 8021cc0:	fa01 f302 	lsl.w	r3, r1, r2
 8021cc4:	4318      	orrs	r0, r3
 8021cc6:	40e1      	lsrs	r1, r4
 8021cc8:	4308      	orrs	r0, r1
 8021cca:	f000 0001 	and.w	r0, r0, #1
 8021cce:	f1d0 0002 	rsbs	r0, r0, #2
 8021cd2:	bd70      	pop	{r4, r5, r6, pc}
 8021cd4:	2002      	movs	r0, #2
 8021cd6:	e7fc      	b.n	8021cd2 <checkint+0x5e>
 8021cd8:	2000      	movs	r0, #0
 8021cda:	e7fa      	b.n	8021cd2 <checkint+0x5e>
 8021cdc:	0000      	movs	r0, r0
	...

08021ce0 <pow>:
 8021ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021ce4:	ee10 4a90 	vmov	r4, s1
 8021ce8:	ed2d 8b0a 	vpush	{d8-d12}
 8021cec:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8021cf0:	ee11 7a90 	vmov	r7, s3
 8021cf4:	f10a 32ff 	add.w	r2, sl, #4294967295
 8021cf8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8021cfc:	429a      	cmp	r2, r3
 8021cfe:	ee10 6a10 	vmov	r6, s0
 8021d02:	ee11 0a10 	vmov	r0, s2
 8021d06:	b086      	sub	sp, #24
 8021d08:	46d4      	mov	ip, sl
 8021d0a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8021d0e:	d806      	bhi.n	8021d1e <pow+0x3e>
 8021d10:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8021d14:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8021d18:	2b7f      	cmp	r3, #127	; 0x7f
 8021d1a:	f240 8156 	bls.w	8021fca <pow+0x2ea>
 8021d1e:	1802      	adds	r2, r0, r0
 8021d20:	eb47 0107 	adc.w	r1, r7, r7
 8021d24:	f06f 0e01 	mvn.w	lr, #1
 8021d28:	f112 39ff 	adds.w	r9, r2, #4294967295
 8021d2c:	f141 38ff 	adc.w	r8, r1, #4294967295
 8021d30:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8021d34:	45ce      	cmp	lr, r9
 8021d36:	eb73 0808 	sbcs.w	r8, r3, r8
 8021d3a:	d23f      	bcs.n	8021dbc <pow+0xdc>
 8021d3c:	ea52 0301 	orrs.w	r3, r2, r1
 8021d40:	f04f 0300 	mov.w	r3, #0
 8021d44:	d10c      	bne.n	8021d60 <pow+0x80>
 8021d46:	19b6      	adds	r6, r6, r6
 8021d48:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8021d4c:	4164      	adcs	r4, r4
 8021d4e:	42b3      	cmp	r3, r6
 8021d50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8021d54:	41a3      	sbcs	r3, r4
 8021d56:	f0c0 808c 	bcc.w	8021e72 <pow+0x192>
 8021d5a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8021d5e:	e028      	b.n	8021db2 <pow+0xd2>
 8021d60:	4da3      	ldr	r5, [pc, #652]	; (8021ff0 <pow+0x310>)
 8021d62:	42ac      	cmp	r4, r5
 8021d64:	bf08      	it	eq
 8021d66:	429e      	cmpeq	r6, r3
 8021d68:	d107      	bne.n	8021d7a <pow+0x9a>
 8021d6a:	1800      	adds	r0, r0, r0
 8021d6c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8021d70:	417f      	adcs	r7, r7
 8021d72:	4283      	cmp	r3, r0
 8021d74:	4b9f      	ldr	r3, [pc, #636]	; (8021ff4 <pow+0x314>)
 8021d76:	41bb      	sbcs	r3, r7
 8021d78:	e7ed      	b.n	8021d56 <pow+0x76>
 8021d7a:	19b6      	adds	r6, r6, r6
 8021d7c:	489e      	ldr	r0, [pc, #632]	; (8021ff8 <pow+0x318>)
 8021d7e:	4164      	adcs	r4, r4
 8021d80:	42b3      	cmp	r3, r6
 8021d82:	eb70 0504 	sbcs.w	r5, r0, r4
 8021d86:	d374      	bcc.n	8021e72 <pow+0x192>
 8021d88:	4281      	cmp	r1, r0
 8021d8a:	bf08      	it	eq
 8021d8c:	429a      	cmpeq	r2, r3
 8021d8e:	d170      	bne.n	8021e72 <pow+0x192>
 8021d90:	4a9a      	ldr	r2, [pc, #616]	; (8021ffc <pow+0x31c>)
 8021d92:	4294      	cmp	r4, r2
 8021d94:	bf08      	it	eq
 8021d96:	429e      	cmpeq	r6, r3
 8021d98:	d0df      	beq.n	8021d5a <pow+0x7a>
 8021d9a:	4294      	cmp	r4, r2
 8021d9c:	ea6f 0707 	mvn.w	r7, r7
 8021da0:	bf34      	ite	cc
 8021da2:	2400      	movcc	r4, #0
 8021da4:	2401      	movcs	r4, #1
 8021da6:	0fff      	lsrs	r7, r7, #31
 8021da8:	42bc      	cmp	r4, r7
 8021daa:	f040 81d9 	bne.w	8022160 <pow+0x480>
 8021dae:	ee21 0b01 	vmul.f64	d0, d1, d1
 8021db2:	b006      	add	sp, #24
 8021db4:	ecbd 8b0a 	vpop	{d8-d12}
 8021db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021dbc:	eb16 0806 	adds.w	r8, r6, r6
 8021dc0:	eb44 0904 	adc.w	r9, r4, r4
 8021dc4:	f118 31ff 	adds.w	r1, r8, #4294967295
 8021dc8:	f169 0200 	sbc.w	r2, r9, #0
 8021dcc:	458e      	cmp	lr, r1
 8021dce:	4193      	sbcs	r3, r2
 8021dd0:	d223      	bcs.n	8021e1a <pow+0x13a>
 8021dd2:	ee20 0b00 	vmul.f64	d0, d0, d0
 8021dd6:	2c00      	cmp	r4, #0
 8021dd8:	da12      	bge.n	8021e00 <pow+0x120>
 8021dda:	4639      	mov	r1, r7
 8021ddc:	f7ff ff4a 	bl	8021c74 <checkint>
 8021de0:	2801      	cmp	r0, #1
 8021de2:	d10d      	bne.n	8021e00 <pow+0x120>
 8021de4:	eeb1 0b40 	vneg.f64	d0, d0
 8021de8:	ea58 0309 	orrs.w	r3, r8, r9
 8021dec:	d10a      	bne.n	8021e04 <pow+0x124>
 8021dee:	2f00      	cmp	r7, #0
 8021df0:	dadf      	bge.n	8021db2 <pow+0xd2>
 8021df2:	b006      	add	sp, #24
 8021df4:	ecbd 8b0a 	vpop	{d8-d12}
 8021df8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021dfc:	f000 b9f0 	b.w	80221e0 <__math_divzero>
 8021e00:	2000      	movs	r0, #0
 8021e02:	e7f1      	b.n	8021de8 <pow+0x108>
 8021e04:	2f00      	cmp	r7, #0
 8021e06:	dad4      	bge.n	8021db2 <pow+0xd2>
 8021e08:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8021e0c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8021e10:	ed8d 7b00 	vstr	d7, [sp]
 8021e14:	ed9d 0b00 	vldr	d0, [sp]
 8021e18:	e7cb      	b.n	8021db2 <pow+0xd2>
 8021e1a:	2c00      	cmp	r4, #0
 8021e1c:	da2c      	bge.n	8021e78 <pow+0x198>
 8021e1e:	4639      	mov	r1, r7
 8021e20:	f7ff ff28 	bl	8021c74 <checkint>
 8021e24:	b930      	cbnz	r0, 8021e34 <pow+0x154>
 8021e26:	b006      	add	sp, #24
 8021e28:	ecbd 8b0a 	vpop	{d8-d12}
 8021e2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e30:	f000 b9ee 	b.w	8022210 <__math_invalid>
 8021e34:	2801      	cmp	r0, #1
 8021e36:	bf14      	ite	ne
 8021e38:	2000      	movne	r0, #0
 8021e3a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8021e3e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8021e42:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8021e46:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8021e4a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8021e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8021e50:	d92d      	bls.n	8021eae <pow+0x1ce>
 8021e52:	4b67      	ldr	r3, [pc, #412]	; (8021ff0 <pow+0x310>)
 8021e54:	2000      	movs	r0, #0
 8021e56:	429c      	cmp	r4, r3
 8021e58:	bf08      	it	eq
 8021e5a:	4286      	cmpeq	r6, r0
 8021e5c:	f43f af7d 	beq.w	8021d5a <pow+0x7a>
 8021e60:	f240 31bd 	movw	r1, #957	; 0x3bd
 8021e64:	428a      	cmp	r2, r1
 8021e66:	d80c      	bhi.n	8021e82 <pow+0x1a2>
 8021e68:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8021e6c:	42b0      	cmp	r0, r6
 8021e6e:	41a3      	sbcs	r3, r4
 8021e70:	d204      	bcs.n	8021e7c <pow+0x19c>
 8021e72:	ee31 0b00 	vadd.f64	d0, d1, d0
 8021e76:	e79c      	b.n	8021db2 <pow+0xd2>
 8021e78:	2000      	movs	r0, #0
 8021e7a:	e7e4      	b.n	8021e46 <pow+0x166>
 8021e7c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8021e80:	e797      	b.n	8021db2 <pow+0xd2>
 8021e82:	2e01      	cmp	r6, #1
 8021e84:	eb74 0303 	sbcs.w	r3, r4, r3
 8021e88:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8021e8c:	bf34      	ite	cc
 8021e8e:	2301      	movcc	r3, #1
 8021e90:	2300      	movcs	r3, #0
 8021e92:	4295      	cmp	r5, r2
 8021e94:	bf8c      	ite	hi
 8021e96:	2500      	movhi	r5, #0
 8021e98:	2501      	movls	r5, #1
 8021e9a:	42ab      	cmp	r3, r5
 8021e9c:	f000 809d 	beq.w	8021fda <pow+0x2fa>
 8021ea0:	b006      	add	sp, #24
 8021ea2:	ecbd 8b0a 	vpop	{d8-d12}
 8021ea6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021eaa:	f000 b991 	b.w	80221d0 <__math_oflow>
 8021eae:	f1bc 0f00 	cmp.w	ip, #0
 8021eb2:	d10b      	bne.n	8021ecc <pow+0x1ec>
 8021eb4:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8021fe8 <pow+0x308>
 8021eb8:	ee20 7b07 	vmul.f64	d7, d0, d7
 8021ebc:	ec53 2b17 	vmov	r2, r3, d7
 8021ec0:	ee17 6a10 	vmov	r6, s14
 8021ec4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8021ec8:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8021ecc:	4b4c      	ldr	r3, [pc, #304]	; (8022000 <pow+0x320>)
 8021ece:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8021ed2:	4423      	add	r3, r4
 8021ed4:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8021ed8:	1519      	asrs	r1, r3, #20
 8021eda:	0d1b      	lsrs	r3, r3, #20
 8021edc:	051b      	lsls	r3, r3, #20
 8021ede:	eba4 0903 	sub.w	r9, r4, r3
 8021ee2:	4b48      	ldr	r3, [pc, #288]	; (8022004 <pow+0x324>)
 8021ee4:	ee04 1a10 	vmov	s8, r1
 8021ee8:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8021eec:	f1b6 0800 	subs.w	r8, r6, #0
 8021ef0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8021ef4:	ec49 8b15 	vmov	d5, r8, r9
 8021ef8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8021efc:	eea5 6b07 	vfma.f64	d6, d5, d7
 8021f00:	ed93 7b00 	vldr	d7, [r3]
 8021f04:	ed93 5b02 	vldr	d5, [r3, #8]
 8021f08:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8021f0c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8021f10:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8021f14:	ee36 ab02 	vadd.f64	d10, d6, d2
 8021f18:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8021f1c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8021f20:	ed93 5b04 	vldr	d5, [r3, #16]
 8021f24:	ee32 2b06 	vadd.f64	d2, d2, d6
 8021f28:	ee37 7b02 	vadd.f64	d7, d7, d2
 8021f2c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8021f30:	ed93 4b08 	vldr	d4, [r3, #32]
 8021f34:	ee26 0b05 	vmul.f64	d0, d6, d5
 8021f38:	eeb0 9b40 	vmov.f64	d9, d0
 8021f3c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8021f40:	ed93 5b06 	vldr	d5, [r3, #24]
 8021f44:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8021f48:	ee26 bb00 	vmul.f64	d11, d6, d0
 8021f4c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8021f50:	eea6 5b04 	vfma.f64	d5, d6, d4
 8021f54:	ee3a ab48 	vsub.f64	d10, d10, d8
 8021f58:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8021f5c:	ee37 9b09 	vadd.f64	d9, d7, d9
 8021f60:	ee3a ab00 	vadd.f64	d10, d10, d0
 8021f64:	eea6 4b03 	vfma.f64	d4, d6, d3
 8021f68:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8021f6c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8021f70:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8021f74:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8021f78:	eea0 4b03 	vfma.f64	d4, d0, d3
 8021f7c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8021f80:	eeab ab05 	vfma.f64	d10, d11, d5
 8021f84:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8021f88:	ee21 7b06 	vmul.f64	d7, d1, d6
 8021f8c:	ee17 3a90 	vmov	r3, s15
 8021f90:	eeb0 5b47 	vmov.f64	d5, d7
 8021f94:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8021f98:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8021f9c:	18b2      	adds	r2, r6, r2
 8021f9e:	2a3e      	cmp	r2, #62	; 0x3e
 8021fa0:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8021fa4:	ee38 8b46 	vsub.f64	d8, d8, d6
 8021fa8:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8021fac:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8021fb0:	d92b      	bls.n	802200a <pow+0x32a>
 8021fb2:	2a00      	cmp	r2, #0
 8021fb4:	da0b      	bge.n	8021fce <pow+0x2ee>
 8021fb6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8021fba:	ee37 0b00 	vadd.f64	d0, d7, d0
 8021fbe:	2800      	cmp	r0, #0
 8021fc0:	f43f aef7 	beq.w	8021db2 <pow+0xd2>
 8021fc4:	eeb1 0b40 	vneg.f64	d0, d0
 8021fc8:	e6f3      	b.n	8021db2 <pow+0xd2>
 8021fca:	2000      	movs	r0, #0
 8021fcc:	e77e      	b.n	8021ecc <pow+0x1ec>
 8021fce:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8021fd2:	d919      	bls.n	8022008 <pow+0x328>
 8021fd4:	2b00      	cmp	r3, #0
 8021fd6:	f6bf af63 	bge.w	8021ea0 <pow+0x1c0>
 8021fda:	b006      	add	sp, #24
 8021fdc:	ecbd 8b0a 	vpop	{d8-d12}
 8021fe0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021fe4:	f000 b8ec 	b.w	80221c0 <__math_uflow>
 8021fe8:	00000000 	.word	0x00000000
 8021fec:	43300000 	.word	0x43300000
 8021ff0:	3ff00000 	.word	0x3ff00000
 8021ff4:	fff00000 	.word	0xfff00000
 8021ff8:	ffe00000 	.word	0xffe00000
 8021ffc:	7fe00000 	.word	0x7fe00000
 8022000:	c0196aab 	.word	0xc0196aab
 8022004:	08130e08 	.word	0x08130e08
 8022008:	2600      	movs	r6, #0
 802200a:	495d      	ldr	r1, [pc, #372]	; (8022180 <pow+0x4a0>)
 802200c:	ed91 4b02 	vldr	d4, [r1, #8]
 8022010:	ed91 3b00 	vldr	d3, [r1]
 8022014:	eeb0 6b44 	vmov.f64	d6, d4
 8022018:	eea7 6b03 	vfma.f64	d6, d7, d3
 802201c:	ee16 5a10 	vmov	r5, s12
 8022020:	ee36 6b44 	vsub.f64	d6, d6, d4
 8022024:	ed91 4b04 	vldr	d4, [r1, #16]
 8022028:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 802202c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8022030:	eeb0 0b47 	vmov.f64	d0, d7
 8022034:	ed91 7b06 	vldr	d7, [r1, #24]
 8022038:	18dc      	adds	r4, r3, r3
 802203a:	f104 030f 	add.w	r3, r4, #15
 802203e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8022042:	eea6 0b07 	vfma.f64	d0, d6, d7
 8022046:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 802204a:	ee35 0b00 	vadd.f64	d0, d5, d0
 802204e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8022052:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8022056:	ed91 5b08 	vldr	d5, [r1, #32]
 802205a:	ee30 7b07 	vadd.f64	d7, d0, d7
 802205e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8022062:	eea0 5b04 	vfma.f64	d5, d0, d4
 8022066:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 802206a:	eea6 7b05 	vfma.f64	d7, d6, d5
 802206e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8022072:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8022076:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 802207a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 802207e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8022082:	1940      	adds	r0, r0, r5
 8022084:	2700      	movs	r7, #0
 8022086:	eb17 020c 	adds.w	r2, r7, ip
 802208a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 802208e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8022092:	2e00      	cmp	r6, #0
 8022094:	d15f      	bne.n	8022156 <pow+0x476>
 8022096:	42bd      	cmp	r5, r7
 8022098:	db13      	blt.n	80220c2 <pow+0x3e2>
 802209a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 802209e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80220a2:	4610      	mov	r0, r2
 80220a4:	ec41 0b10 	vmov	d0, r0, r1
 80220a8:	eea7 0b00 	vfma.f64	d0, d7, d0
 80220ac:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8022168 <pow+0x488>
 80220b0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80220b4:	b006      	add	sp, #24
 80220b6:	ecbd 8b0a 	vpop	{d8-d12}
 80220ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80220be:	f000 b8bf 	b.w	8022240 <__math_check_oflow>
 80220c2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80220c6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80220ca:	4610      	mov	r0, r2
 80220cc:	ec41 0b15 	vmov	d5, r0, r1
 80220d0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80220d4:	ee27 6b05 	vmul.f64	d6, d7, d5
 80220d8:	ee35 7b06 	vadd.f64	d7, d5, d6
 80220dc:	eeb0 3bc7 	vabs.f64	d3, d7
 80220e0:	eeb4 3bc4 	vcmpe.f64	d3, d4
 80220e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220e8:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8022170 <pow+0x490>
 80220ec:	d52a      	bpl.n	8022144 <pow+0x464>
 80220ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80220f2:	ee35 5b47 	vsub.f64	d5, d5, d7
 80220f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220fa:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 80220fe:	ee35 6b06 	vadd.f64	d6, d5, d6
 8022102:	bf48      	it	mi
 8022104:	eeb0 4b43 	vmovmi.f64	d4, d3
 8022108:	ee37 3b04 	vadd.f64	d3, d7, d4
 802210c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8022110:	ee35 7b07 	vadd.f64	d7, d5, d7
 8022114:	ee37 7b06 	vadd.f64	d7, d7, d6
 8022118:	ee37 7b03 	vadd.f64	d7, d7, d3
 802211c:	ee37 7b44 	vsub.f64	d7, d7, d4
 8022120:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022128:	d104      	bne.n	8022134 <pow+0x454>
 802212a:	4632      	mov	r2, r6
 802212c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8022130:	ec43 2b17 	vmov	d7, r2, r3
 8022134:	ed8d 0b02 	vstr	d0, [sp, #8]
 8022138:	ed9d 6b02 	vldr	d6, [sp, #8]
 802213c:	ee26 6b00 	vmul.f64	d6, d6, d0
 8022140:	ed8d 6b04 	vstr	d6, [sp, #16]
 8022144:	ee27 0b00 	vmul.f64	d0, d7, d0
 8022148:	b006      	add	sp, #24
 802214a:	ecbd 8b0a 	vpop	{d8-d12}
 802214e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022152:	f000 b86c 	b.w	802222e <__math_check_uflow>
 8022156:	ec43 2b10 	vmov	d0, r2, r3
 802215a:	eea7 0b00 	vfma.f64	d0, d7, d0
 802215e:	e628      	b.n	8021db2 <pow+0xd2>
 8022160:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8022178 <pow+0x498>
 8022164:	e625      	b.n	8021db2 <pow+0xd2>
 8022166:	bf00      	nop
 8022168:	00000000 	.word	0x00000000
 802216c:	7f000000 	.word	0x7f000000
 8022170:	00000000 	.word	0x00000000
 8022174:	00100000 	.word	0x00100000
	...
 8022180:	08131e50 	.word	0x08131e50

08022184 <with_errno>:
 8022184:	b513      	push	{r0, r1, r4, lr}
 8022186:	4604      	mov	r4, r0
 8022188:	ed8d 0b00 	vstr	d0, [sp]
 802218c:	f7ff fd10 	bl	8021bb0 <__errno>
 8022190:	ed9d 0b00 	vldr	d0, [sp]
 8022194:	6004      	str	r4, [r0, #0]
 8022196:	b002      	add	sp, #8
 8022198:	bd10      	pop	{r4, pc}

0802219a <xflow>:
 802219a:	b082      	sub	sp, #8
 802219c:	b158      	cbz	r0, 80221b6 <xflow+0x1c>
 802219e:	eeb1 7b40 	vneg.f64	d7, d0
 80221a2:	ed8d 7b00 	vstr	d7, [sp]
 80221a6:	ed9d 7b00 	vldr	d7, [sp]
 80221aa:	2022      	movs	r0, #34	; 0x22
 80221ac:	ee20 0b07 	vmul.f64	d0, d0, d7
 80221b0:	b002      	add	sp, #8
 80221b2:	f7ff bfe7 	b.w	8022184 <with_errno>
 80221b6:	eeb0 7b40 	vmov.f64	d7, d0
 80221ba:	e7f2      	b.n	80221a2 <xflow+0x8>
 80221bc:	0000      	movs	r0, r0
	...

080221c0 <__math_uflow>:
 80221c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80221c8 <__math_uflow+0x8>
 80221c4:	f7ff bfe9 	b.w	802219a <xflow>
 80221c8:	00000000 	.word	0x00000000
 80221cc:	10000000 	.word	0x10000000

080221d0 <__math_oflow>:
 80221d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80221d8 <__math_oflow+0x8>
 80221d4:	f7ff bfe1 	b.w	802219a <xflow>
 80221d8:	00000000 	.word	0x00000000
 80221dc:	70000000 	.word	0x70000000

080221e0 <__math_divzero>:
 80221e0:	b082      	sub	sp, #8
 80221e2:	2800      	cmp	r0, #0
 80221e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80221e8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80221ec:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80221f0:	ed8d 7b00 	vstr	d7, [sp]
 80221f4:	ed9d 0b00 	vldr	d0, [sp]
 80221f8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8022208 <__math_divzero+0x28>
 80221fc:	2022      	movs	r0, #34	; 0x22
 80221fe:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8022202:	b002      	add	sp, #8
 8022204:	f7ff bfbe 	b.w	8022184 <with_errno>
	...

08022210 <__math_invalid>:
 8022210:	eeb0 7b40 	vmov.f64	d7, d0
 8022214:	eeb4 7b47 	vcmp.f64	d7, d7
 8022218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802221c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8022220:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8022224:	d602      	bvs.n	802222c <__math_invalid+0x1c>
 8022226:	2021      	movs	r0, #33	; 0x21
 8022228:	f7ff bfac 	b.w	8022184 <with_errno>
 802222c:	4770      	bx	lr

0802222e <__math_check_uflow>:
 802222e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8022232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022236:	d102      	bne.n	802223e <__math_check_uflow+0x10>
 8022238:	2022      	movs	r0, #34	; 0x22
 802223a:	f7ff bfa3 	b.w	8022184 <with_errno>
 802223e:	4770      	bx	lr

08022240 <__math_check_oflow>:
 8022240:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8022260 <__math_check_oflow+0x20>
 8022244:	eeb0 7bc0 	vabs.f64	d7, d0
 8022248:	eeb4 7b46 	vcmp.f64	d7, d6
 802224c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022250:	dd02      	ble.n	8022258 <__math_check_oflow+0x18>
 8022252:	2022      	movs	r0, #34	; 0x22
 8022254:	f7ff bf96 	b.w	8022184 <with_errno>
 8022258:	4770      	bx	lr
 802225a:	bf00      	nop
 802225c:	f3af 8000 	nop.w
 8022260:	ffffffff 	.word	0xffffffff
 8022264:	7fefffff 	.word	0x7fefffff

08022268 <_init>:
 8022268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802226a:	bf00      	nop
 802226c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802226e:	bc08      	pop	{r3}
 8022270:	469e      	mov	lr, r3
 8022272:	4770      	bx	lr

08022274 <_fini>:
 8022274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022276:	bf00      	nop
 8022278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802227a:	bc08      	pop	{r3}
 802227c:	469e      	mov	lr, r3
 802227e:	4770      	bx	lr
