/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x42, 0x45, 0x53, 0x54, 0x20, 0x20, 0x2, 0x0, // @0 "BEST  <>"
    0x46, 0x55, 0x45, 0x4c, 0x20, 0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x0, // @8 "FUEL PRESSURE"
    0x4c, 0x41, 0x53, 0x54, 0x20, 0x20, 0x2, 0x0, // @22 "LAST  <>"
    0x4f, 0x49, 0x4c, 0x20, 0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x0, // @30 "OIL PRESSURE"
    0x50, 0x4f, 0x50, 0x55, 0x50, 0x5c, 0x6e, 0x43, 0x4f, 0x4e, 0x54, 0x53, 0x0, // @43 "POPUP\nCONTS"
    0x50, 0x4f, 0x50, 0x55, 0x50, 0x5c, 0x6e, 0x4e, 0x41, 0x4d, 0x45, 0x0, // @56 "POPUP\nNAME"
    0x42, 0x52, 0x41, 0x4b, 0x45, 0x20, 0x50, 0x52, 0x45, 0x53, 0x0, // @68 "BRAKE PRES"
    0x42, 0x52, 0x41, 0x4b, 0x45, 0x20, 0x52, 0x45, 0x41, 0x52, 0x0, // @79 "BRAKE REAR"
    0x46, 0x55, 0x45, 0x4c, 0x20, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x0, // @90 "FUEL ALARM"
    0x57, 0x41, 0x54, 0x45, 0x52, 0x20, 0x54, 0x45, 0x4d, 0x50, 0x0, // @101 "WATER TEMP"
    0x45, 0x2d, 0x4d, 0x4f, 0x54, 0x4f, 0x52, 0x20, 0x54, 0x0, // @112 "E-MOTOR T"
    0x46, 0x4c, 0x20, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x0, // @122 "FL HEIGHT"
    0x46, 0x52, 0x20, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x0, // @132 "FR HEIGHT"
    0x4f, 0x49, 0x4c, 0x20, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x0, // @142 "OIL ALARM"
    0x52, 0x4c, 0x20, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x0, // @152 "RL HEIGHT"
    0x52, 0x52, 0x20, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x0, // @162 "RR HEIGHT"
    0x53, 0x54, 0x45, 0x45, 0x52, 0x20, 0x44, 0x45, 0x47, 0x0, // @172 "STEER DEG"
    0x53, 0x74, 0x65, 0x65, 0x72, 0x20, 0x44, 0x65, 0x67, 0x0, // @182 "Steer Deg"
    0x2d, 0x2d, 0x3a, 0x2d, 0x2d, 0x3a, 0x2d, 0x2d, 0x0, // @192 "--:--:--"
    0x2, 0xb0, 0x0, // @201 "<>?"
    0x42, 0x45, 0x53, 0x54, 0x20, 0x4c, 0x41, 0x50, 0x0, // @204 "BEST LAP"
    0x4c, 0x41, 0x53, 0x54, 0x20, 0x4c, 0x41, 0x50, 0x0, // @213 "LAST LAP"
    0x4f, 0x49, 0x4c, 0x20, 0x54, 0x45, 0x4d, 0x50, 0x0, // @222 "OIL TEMP"
    0x54, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x0, // @231 "TRACTION"
    0x57, 0x41, 0x54, 0x45, 0x52, 0x20, 0x54, 0xb0, 0x0, // @240 "WATER T?"
    0x46, 0x55, 0x45, 0x4c, 0x20, 0x54, 0xb0, 0x0, // @249 "FUEL T?"
    0x4e, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x0, // @257 "NAAAAAA"
    0x57, 0x41, 0x54, 0x45, 0x52, 0x20, 0x54, 0x0, // @265 "WATER T"
    0x41, 0x49, 0x52, 0x20, 0x54, 0xb0, 0x0, // @273 "AIR T?"
    0x42, 0x41, 0x54, 0x54, 0x20, 0x54, 0x0, // @280 "BATT T"
    0x46, 0x55, 0x45, 0x4c, 0x20, 0x50, 0x0, // @287 "FUEL P"
    0x46, 0x75, 0x65, 0x6c, 0x20, 0x50, 0x0, // @294 "Fuel P"
    0x46, 0x75, 0x65, 0x6c, 0x20, 0x54, 0x0, // @301 "Fuel T"
    0x4c, 0x41, 0x4d, 0x42, 0x44, 0x41, 0x0, // @308 "LAMBDA"
    0x4e, 0x41, 0x41, 0x41, 0x41, 0x41, 0x0, // @315 "NAAAAA"
    0x4f, 0x49, 0x4c, 0x20, 0x20, 0x54, 0x0, // @322 "OIL  T"
    0x4f, 0x49, 0x4c, 0x20, 0x54, 0xb0, 0x0, // @329 "OIL T?"
    0x54, 0x4f, 0x52, 0x51, 0x55, 0x45, 0x0, // @336 "TORQUE"
    0x56, 0x20, 0x42, 0x41, 0x54, 0x54, 0x0, // @343 "V BATT"
    0x30, 0x30, 0x30, 0x30, 0x30, 0x0, // @350 "00000"
    0x41, 0x69, 0x72, 0x20, 0x54, 0x0, // @356 "Air T"
    0x42, 0x42, 0x69, 0x61, 0x73, 0x0, // @362 "BBias"
    0x42, 0x72, 0x61, 0x6b, 0x65, 0x0, // @368 "Brake"
    0x4e, 0x41, 0x2f, 0x4e, 0x41, 0x0, // @374 "NA/NA"
    0x4e, 0x41, 0x41, 0x2e, 0x41, 0x0, // @380 "NAA.A"
    0x4e, 0x41, 0x41, 0x41, 0x41, 0x0, // @386 "NAAAA"
    0x4f, 0x49, 0x4c, 0x20, 0x50, 0x0, // @392 "OIL P"
    0x4f, 0x49, 0x4c, 0x20, 0x54, 0x0, // @398 "OIL T"
    0x4f, 0x69, 0x6c, 0x20, 0x50, 0x0, // @404 "Oil P"
    0x4f, 0x69, 0x6c, 0x20, 0x54, 0x0, // @410 "Oil T"
    0x52, 0x45, 0x41, 0x44, 0x59, 0x0, // @416 "READY"
    0x53, 0x50, 0x45, 0x45, 0x44, 0x0, // @422 "SPEED"
    0x53, 0x74, 0x65, 0x65, 0x72, 0x0, // @428 "Steer"
    0x56, 0x20, 0x42, 0x41, 0x54, 0x0, // @434 "V BAT"
    0x56, 0x20, 0x42, 0x61, 0x74, 0x0, // @440 "V Bat"
    0x56, 0x41, 0x4c, 0x55, 0x45, 0x0, // @446 "VALUE"
    0x57, 0x41, 0x54, 0x20, 0x54, 0x0, // @452 "WAT T"
    0x57, 0x61, 0x74, 0x20, 0x54, 0x0, // @458 "Wat T"
    0x42, 0x41, 0x53, 0x45, 0x0, // @464 "BASE"
    0x42, 0x49, 0x41, 0x53, 0x0, // @469 "BIAS"
    0x44, 0x52, 0x56, 0x31, 0x0, // @474 "DRV1"
    0x45, 0x2d, 0x54, 0x43, 0x0, // @479 "E-TC"
    0x47, 0x45, 0x41, 0x52, 0x0, // @484 "GEAR"
    0x4b, 0x4d, 0x2f, 0x48, 0x0, // @489 "KM/H"
    0x4d, 0x4f, 0x44, 0x45, 0x0, // @494 "MODE"
    0x4e, 0x41, 0x41, 0x41, 0x0, // @499 "NAAA"
    0x4d, 0x41, 0x50, 0x0, // @504 "MAP"
    0x4e, 0x41, 0x41, 0x0, // @508 "NAA"
    0x4f, 0x46, 0x46, 0x0, // @512 "OFF"
    0x52, 0x50, 0x4d, 0x0, // @516 "RPM"
    0x53, 0x4f, 0x43, 0x0, // @520 "SOC"
    0x54, 0x43, 0x53, 0x0, // @524 "TCS"
    0x54, 0x50, 0x53, 0x0, // @528 "TPS"
    0x46, 0x4c, 0x0, // @532 "FL"
    0x46, 0x52, 0x0, // @535 "FR"
    0x52, 0x4c, 0x0, // @538 "RL"
    0x52, 0x52, 0x0, // @541 "RR"
    0xb0, 0x43, 0x0 // @544 "?C"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
